// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Scaleway
{
    [ScalewayResourceType("scaleway:index/iotRoute:IotRoute")]
    public partial class IotRoute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The date and time of the creation of the IoT Route
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Database Route parameters
        /// </summary>
        [Output("database")]
        public Output<Outputs.IotRouteDatabase?> Database { get; private set; } = null!;

        /// <summary>
        /// The ID of the route's hub
        /// </summary>
        [Output("hubId")]
        public Output<string> HubId { get; private set; } = null!;

        /// <summary>
        /// The name of the route
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The region you want to attach the resource to
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Rest Route parameters
        /// </summary>
        [Output("rest")]
        public Output<Outputs.IotRouteRest?> Rest { get; private set; } = null!;

        /// <summary>
        /// S3 Route parameters
        /// </summary>
        [Output("s3")]
        public Output<Outputs.IotRouteS3?> S3 { get; private set; } = null!;

        /// <summary>
        /// The Topic the route subscribes to (wildcards allowed)
        /// </summary>
        [Output("topic")]
        public Output<string> Topic { get; private set; } = null!;


        /// <summary>
        /// Create a IotRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IotRoute(string name, IotRouteArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/iotRoute:IotRoute", name, args ?? new IotRouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IotRoute(string name, Input<string> id, IotRouteState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/iotRoute:IotRoute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-scaleway",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IotRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IotRoute Get(string name, Input<string> id, IotRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new IotRoute(name, id, state, options);
        }
    }

    public sealed class IotRouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Database Route parameters
        /// </summary>
        [Input("database")]
        public Input<Inputs.IotRouteDatabaseArgs>? Database { get; set; }

        /// <summary>
        /// The ID of the route's hub
        /// </summary>
        [Input("hubId", required: true)]
        public Input<string> HubId { get; set; } = null!;

        /// <summary>
        /// The name of the route
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region you want to attach the resource to
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Rest Route parameters
        /// </summary>
        [Input("rest")]
        public Input<Inputs.IotRouteRestArgs>? Rest { get; set; }

        /// <summary>
        /// S3 Route parameters
        /// </summary>
        [Input("s3")]
        public Input<Inputs.IotRouteS3Args>? S3 { get; set; }

        /// <summary>
        /// The Topic the route subscribes to (wildcards allowed)
        /// </summary>
        [Input("topic", required: true)]
        public Input<string> Topic { get; set; } = null!;

        public IotRouteArgs()
        {
        }
        public static new IotRouteArgs Empty => new IotRouteArgs();
    }

    public sealed class IotRouteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date and time of the creation of the IoT Route
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Database Route parameters
        /// </summary>
        [Input("database")]
        public Input<Inputs.IotRouteDatabaseGetArgs>? Database { get; set; }

        /// <summary>
        /// The ID of the route's hub
        /// </summary>
        [Input("hubId")]
        public Input<string>? HubId { get; set; }

        /// <summary>
        /// The name of the route
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region you want to attach the resource to
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Rest Route parameters
        /// </summary>
        [Input("rest")]
        public Input<Inputs.IotRouteRestGetArgs>? Rest { get; set; }

        /// <summary>
        /// S3 Route parameters
        /// </summary>
        [Input("s3")]
        public Input<Inputs.IotRouteS3GetArgs>? S3 { get; set; }

        /// <summary>
        /// The Topic the route subscribes to (wildcards allowed)
        /// </summary>
        [Input("topic")]
        public Input<string>? Topic { get; set; }

        public IotRouteState()
        {
        }
        public static new IotRouteState Empty => new IotRouteState();
    }
}
