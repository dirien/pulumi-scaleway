// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Scaleway
{
    [ScalewayResourceType("scaleway:index/appleSiliconServer:AppleSiliconServer")]
    public partial class AppleSiliconServer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The date and time of the creation of the server
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The minimal date and time on which you can delete this server due to Apple licence
        /// </summary>
        [Output("deletableAt")]
        public Output<string> DeletableAt { get; private set; } = null!;

        /// <summary>
        /// IPv4 address of the server
        /// </summary>
        [Output("ip")]
        public Output<string> Ip { get; private set; } = null!;

        /// <summary>
        /// Name of the server
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The organization_id you want to attach the resource to
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// The project_id you want to attach the resource to
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The state of the server
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Type of the server
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The date and time of the last update of the server
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// VNC url use to connect remotely to the desktop GUI
        /// </summary>
        [Output("vncUrl")]
        public Output<string> VncUrl { get; private set; } = null!;

        /// <summary>
        /// The zone you want to attach the resource to
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a AppleSiliconServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppleSiliconServer(string name, AppleSiliconServerArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/appleSiliconServer:AppleSiliconServer", name, args ?? new AppleSiliconServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppleSiliconServer(string name, Input<string> id, AppleSiliconServerState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/appleSiliconServer:AppleSiliconServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-scaleway",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppleSiliconServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppleSiliconServer Get(string name, Input<string> id, AppleSiliconServerState? state = null, CustomResourceOptions? options = null)
        {
            return new AppleSiliconServer(name, id, state, options);
        }
    }

    public sealed class AppleSiliconServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the server
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The project_id you want to attach the resource to
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Type of the server
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The zone you want to attach the resource to
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public AppleSiliconServerArgs()
        {
        }
        public static new AppleSiliconServerArgs Empty => new AppleSiliconServerArgs();
    }

    public sealed class AppleSiliconServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date and time of the creation of the server
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The minimal date and time on which you can delete this server due to Apple licence
        /// </summary>
        [Input("deletableAt")]
        public Input<string>? DeletableAt { get; set; }

        /// <summary>
        /// IPv4 address of the server
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// Name of the server
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization_id you want to attach the resource to
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// The project_id you want to attach the resource to
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The state of the server
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Type of the server
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The date and time of the last update of the server
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// VNC url use to connect remotely to the desktop GUI
        /// </summary>
        [Input("vncUrl")]
        public Input<string>? VncUrl { get; set; }

        /// <summary>
        /// The zone you want to attach the resource to
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public AppleSiliconServerState()
        {
        }
        public static new AppleSiliconServerState Empty => new AppleSiliconServerState();
    }
}
