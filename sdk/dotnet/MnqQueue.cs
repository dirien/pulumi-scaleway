// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Scaleway
{
    /// <summary>
    /// Creates and manages Scaleway Messaging and Queuing queues.
    /// 
    /// For more information about MNQ, see [the documentation](https://www.scaleway.com/en/developers/api/messaging-and-queuing/).
    /// 
    /// ## Examples
    /// 
    /// ### NATS
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = ediri.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mainMnqNamespace = new Scaleway.MnqNamespace("mainMnqNamespace", new()
    ///     {
    ///         Protocol = "nats",
    ///     });
    /// 
    ///     var mainMnqCredential = new Scaleway.MnqCredential("mainMnqCredential", new()
    ///     {
    ///         NamespaceId = mainMnqNamespace.Id,
    ///     });
    /// 
    ///     var myQueue = new Scaleway.MnqQueue("myQueue", new()
    ///     {
    ///         NamespaceId = mainMnqNamespace.Id,
    ///         Nats = new Scaleway.Inputs.MnqQueueNatsArgs
    ///         {
    ///             Credentials = mainMnqCredential.NatsCredentials.Apply(natsCredentials =&gt; natsCredentials.Content),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### SQS
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = ediri.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mainMnqNamespace = new Scaleway.MnqNamespace("mainMnqNamespace", new()
    ///     {
    ///         Protocol = "sqs_sns",
    ///     });
    /// 
    ///     var mainMnqCredential = new Scaleway.MnqCredential("mainMnqCredential", new()
    ///     {
    ///         NamespaceId = mainMnqNamespace.Id,
    ///         SqsSnsCredentials = new Scaleway.Inputs.MnqCredentialSqsSnsCredentialsArgs
    ///         {
    ///             Permissions = new Scaleway.Inputs.MnqCredentialSqsSnsCredentialsPermissionsArgs
    ///             {
    ///                 CanPublish = true,
    ///                 CanReceive = true,
    ///                 CanManage = true,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var myQueue = new Scaleway.MnqQueue("myQueue", new()
    ///     {
    ///         NamespaceId = mainMnqNamespace.Id,
    ///         Sqs = new Scaleway.Inputs.MnqQueueSqsArgs
    ///         {
    ///             AccessKey = mainMnqCredential.SqsSnsCredentials.Apply(sqsSnsCredentials =&gt; sqsSnsCredentials?.AccessKey),
    ///             SecretKey = mainMnqCredential.SqsSnsCredentials.Apply(sqsSnsCredentials =&gt; sqsSnsCredentials?.SecretKey),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Argument Reference
    /// 
    /// The following arguments are supported:
    /// 
    /// * `namespace_id` - (Required) The ID of the Namespace associated to.
    /// 
    /// * `name` - (Optional) The name of the queue. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.
    /// 
    /// * `name_prefix` - (Optional) Creates a unique name beginning with the specified prefix. Conflicts with `name`.
    /// 
    /// * `message_max_age` - (Optional) The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.
    /// 
    /// * `message_max_size` - (Optional) The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.
    /// 
    /// * `sqs` - (Optional) The SQS attributes of the queue. Conflicts with `nats`.
    ///     - `endpoint` - (Optional) The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `http://sqs-sns.mnq.{region}.scw.cloud`.
    ///     - `access_key` - (Required) The access key of the SQS queue.
    ///     - `secret_key` - (Required) The secret key of the SQS queue.
    ///     - `fifo_queue` - (Optional) Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.
    ///     - `content_based_deduplication` - (Optional) Specifies whether to enable content-based deduplication. Defaults to `false`.
    ///     - `receive_wait_time_seconds` - (Optional) The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.
    ///     - `visibility_timeout_seconds` - (Optional) The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.
    ///     - For more information about the SQS limitations, see [the documentation](https://www.scaleway.com/en/developers/api/messaging-and-queuing/#technical-limitations).
    /// 
    /// * `nats` - (Optional) The NATS attributes of the queue. Conflicts with `sqs`.
    ///     - `endpoint` - (Optional) The endpoint of the NATS queue. Can contain a {region} placeholder. Defaults to `nats://nats.mnq.{region}.scw.cloud:4222`.
    ///     - `credentials` - (Required) Line jump separated key and seed.
    ///     - `retention_policy` - (Optional) The retention policy of the queue. See https://docs.nats.io/nats-concepts/jetstream/streams#retentionpolicy for more information. Defaults to `workqueue`.
    /// 
    /// ### Attribute Reference
    /// 
    /// In addition to all arguments above, the following attributes are exported:
    /// 
    /// * `sqs` - The SQS attributes of the queue.
    ///   ~ `url` - The URL of the queue.
    /// </summary>
    [ScalewayResourceType("scaleway:index/mnqQueue:MnqQueue")]
    public partial class MnqQueue : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The number of seconds the queue retains a message.
        /// </summary>
        [Output("messageMaxAge")]
        public Output<int?> MessageMaxAge { get; private set; } = null!;

        /// <summary>
        /// The maximum size of a message. Should be in bytes.
        /// </summary>
        [Output("messageMaxSize")]
        public Output<int?> MessageMaxSize { get; private set; } = null!;

        /// <summary>
        /// The name of the queue. Conflicts with name_prefix.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with name.
        /// </summary>
        [Output("namePrefix")]
        public Output<string> NamePrefix { get; private set; } = null!;

        /// <summary>
        /// The ID of the Namespace associated to
        /// </summary>
        [Output("namespaceId")]
        public Output<string> NamespaceId { get; private set; } = null!;

        /// <summary>
        /// The NATS attributes of the queue
        /// </summary>
        [Output("nats")]
        public Output<Outputs.MnqQueueNats?> Nats { get; private set; } = null!;

        /// <summary>
        /// The SQS attributes of the queue
        /// </summary>
        [Output("sqs")]
        public Output<Outputs.MnqQueueSqs?> Sqs { get; private set; } = null!;


        /// <summary>
        /// Create a MnqQueue resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MnqQueue(string name, MnqQueueArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/mnqQueue:MnqQueue", name, args ?? new MnqQueueArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MnqQueue(string name, Input<string> id, MnqQueueState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/mnqQueue:MnqQueue", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-scaleway",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MnqQueue resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MnqQueue Get(string name, Input<string> id, MnqQueueState? state = null, CustomResourceOptions? options = null)
        {
            return new MnqQueue(name, id, state, options);
        }
    }

    public sealed class MnqQueueArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of seconds the queue retains a message.
        /// </summary>
        [Input("messageMaxAge")]
        public Input<int>? MessageMaxAge { get; set; }

        /// <summary>
        /// The maximum size of a message. Should be in bytes.
        /// </summary>
        [Input("messageMaxSize")]
        public Input<int>? MessageMaxSize { get; set; }

        /// <summary>
        /// The name of the queue. Conflicts with name_prefix.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with name.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// The ID of the Namespace associated to
        /// </summary>
        [Input("namespaceId", required: true)]
        public Input<string> NamespaceId { get; set; } = null!;

        /// <summary>
        /// The NATS attributes of the queue
        /// </summary>
        [Input("nats")]
        public Input<Inputs.MnqQueueNatsArgs>? Nats { get; set; }

        /// <summary>
        /// The SQS attributes of the queue
        /// </summary>
        [Input("sqs")]
        public Input<Inputs.MnqQueueSqsArgs>? Sqs { get; set; }

        public MnqQueueArgs()
        {
        }
        public static new MnqQueueArgs Empty => new MnqQueueArgs();
    }

    public sealed class MnqQueueState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of seconds the queue retains a message.
        /// </summary>
        [Input("messageMaxAge")]
        public Input<int>? MessageMaxAge { get; set; }

        /// <summary>
        /// The maximum size of a message. Should be in bytes.
        /// </summary>
        [Input("messageMaxSize")]
        public Input<int>? MessageMaxSize { get; set; }

        /// <summary>
        /// The name of the queue. Conflicts with name_prefix.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with name.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// The ID of the Namespace associated to
        /// </summary>
        [Input("namespaceId")]
        public Input<string>? NamespaceId { get; set; }

        /// <summary>
        /// The NATS attributes of the queue
        /// </summary>
        [Input("nats")]
        public Input<Inputs.MnqQueueNatsGetArgs>? Nats { get; set; }

        /// <summary>
        /// The SQS attributes of the queue
        /// </summary>
        [Input("sqs")]
        public Input<Inputs.MnqQueueSqsGetArgs>? Sqs { get; set; }

        public MnqQueueState()
        {
        }
        public static new MnqQueueState Empty => new MnqQueueState();
    }
}
