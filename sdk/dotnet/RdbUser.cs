// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Scaleway
{
    /// <summary>
    /// Creates and manages database users.
    /// For more information refer to [the API documentation](https://www.scaleway.com/en/developers/api/managed-database-postgre-mysql/).
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Random = Pulumi.Random;
    /// using Scaleway = ediri.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.RdbInstance("main", new()
    ///     {
    ///         NodeType = "DB-DEV-S",
    ///         Engine = "PostgreSQL-15",
    ///         IsHaCluster = true,
    ///         DisableBackup = true,
    ///         UserName = "my_initial_user",
    ///         Password = "thiZ_is_v&amp;ry_s3cret",
    ///     });
    /// 
    ///     var dbPassword = new Random.RandomPassword("dbPassword", new()
    ///     {
    ///         Length = 16,
    ///         Special = true,
    ///     });
    /// 
    ///     var dbAdmin = new Scaleway.RdbUser("dbAdmin", new()
    ///     {
    ///         InstanceId = main.Id,
    ///         Password = dbPassword.Result,
    ///         IsAdmin = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Database users can be imported using `{region}/{instance_id}/{user_name}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:index/rdbUser:RdbUser admin fr-par/11111111-1111-1111-1111-111111111111/admin
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:index/rdbUser:RdbUser")]
    public partial class RdbUser : global::Pulumi.CustomResource
    {
        /// <summary>
        /// UUID of the Database Instance.
        /// 
        /// &gt; **Important:** Updates to `instance_id` will recreate the database user.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Grant admin permissions to the database user.
        /// </summary>
        [Output("isAdmin")]
        public Output<bool?> IsAdmin { get; private set; } = null!;

        /// <summary>
        /// database user name.
        /// 
        /// &gt; **Important:** Updates to `name` will recreate the database user.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// database user password.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// The Scaleway region this resource resides in.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;


        /// <summary>
        /// Create a RdbUser resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RdbUser(string name, RdbUserArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/rdbUser:RdbUser", name, args ?? new RdbUserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RdbUser(string name, Input<string> id, RdbUserState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/rdbUser:RdbUser", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-scaleway",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RdbUser resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RdbUser Get(string name, Input<string> id, RdbUserState? state = null, CustomResourceOptions? options = null)
        {
            return new RdbUser(name, id, state, options);
        }
    }

    public sealed class RdbUserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// UUID of the Database Instance.
        /// 
        /// &gt; **Important:** Updates to `instance_id` will recreate the database user.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Grant admin permissions to the database user.
        /// </summary>
        [Input("isAdmin")]
        public Input<bool>? IsAdmin { get; set; }

        /// <summary>
        /// database user name.
        /// 
        /// &gt; **Important:** Updates to `name` will recreate the database user.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password", required: true)]
        private Input<string>? _password;

        /// <summary>
        /// database user password.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Scaleway region this resource resides in.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public RdbUserArgs()
        {
        }
        public static new RdbUserArgs Empty => new RdbUserArgs();
    }

    public sealed class RdbUserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// UUID of the Database Instance.
        /// 
        /// &gt; **Important:** Updates to `instance_id` will recreate the database user.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Grant admin permissions to the database user.
        /// </summary>
        [Input("isAdmin")]
        public Input<bool>? IsAdmin { get; set; }

        /// <summary>
        /// database user name.
        /// 
        /// &gt; **Important:** Updates to `name` will recreate the database user.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// database user password.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Scaleway region this resource resides in.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public RdbUserState()
        {
        }
        public static new RdbUserState Empty => new RdbUserState();
    }
}
