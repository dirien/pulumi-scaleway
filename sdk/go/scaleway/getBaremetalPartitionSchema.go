// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The getBaremetalPartitionSchema data source allows you to retrieve a ready-to-use partitioning schema for a BareMetal server. This schema can be used for custom installations with optional swap and extra partitions.
//
// This data source simplifies the process of generating valid partitioning configurations, especially useful when dealing with OS and offer compatibility requirements.
//
// ## Partitioning Details
//
// The partitioning schema generated by the `getBaremetalPartitionSchema` data source includes a root (`/`) partition that is **20GB** in size by default.
//
// If additional storage is required, you can enable the `extraPartition` option to mount extra space on a custom path (e.g., `/data`).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.GetBaremetalPartitionSchema(ctx, &scaleway.GetBaremetalPartitionSchemaArgs{
//				Ext4Mountpoint: pulumi.StringRef("/data"),
//				ExtraPartition: pulumi.BoolRef(true),
//				OfferId:        "11111111-1111-1111-1111-111111111111",
//				OsId:           "22222222-2222-2222-2222-222222222222",
//				Swap:           pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetBaremetalPartitionSchema(ctx *pulumi.Context, args *GetBaremetalPartitionSchemaArgs, opts ...pulumi.InvokeOption) (*GetBaremetalPartitionSchemaResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetBaremetalPartitionSchemaResult
	err := ctx.Invoke("scaleway:index/getBaremetalPartitionSchema:getBaremetalPartitionSchema", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBaremetalPartitionSchema.
type GetBaremetalPartitionSchemaArgs struct {
	// The mount point for the extra partition. Must be an absolute path using alphanumeric characters and underscores.
	Ext4Mountpoint *string `pulumi:"ext4Mountpoint"`
	// Whether to add an extra ext4 data partition.
	ExtraPartition *bool `pulumi:"extraPartition"`
	// The UUID of the BareMetal offer.
	OfferId string `pulumi:"offerId"`
	// The UUID of the OS image.
	OsId string `pulumi:"osId"`
	// Whether to include a swap partition.
	Swap *bool `pulumi:"swap"`
}

// A collection of values returned by getBaremetalPartitionSchema.
type GetBaremetalPartitionSchemaResult struct {
	Ext4Mountpoint *string `pulumi:"ext4Mountpoint"`
	ExtraPartition *bool   `pulumi:"extraPartition"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// — A validated partitioning schema in JSON format that can be directly used for BareMetal server deployment.
	JsonPartition string `pulumi:"jsonPartition"`
	OfferId       string `pulumi:"offerId"`
	OsId          string `pulumi:"osId"`
	Swap          *bool  `pulumi:"swap"`
}

func GetBaremetalPartitionSchemaOutput(ctx *pulumi.Context, args GetBaremetalPartitionSchemaOutputArgs, opts ...pulumi.InvokeOption) GetBaremetalPartitionSchemaResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetBaremetalPartitionSchemaResultOutput, error) {
			args := v.(GetBaremetalPartitionSchemaArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:index/getBaremetalPartitionSchema:getBaremetalPartitionSchema", args, GetBaremetalPartitionSchemaResultOutput{}, options).(GetBaremetalPartitionSchemaResultOutput), nil
		}).(GetBaremetalPartitionSchemaResultOutput)
}

// A collection of arguments for invoking getBaremetalPartitionSchema.
type GetBaremetalPartitionSchemaOutputArgs struct {
	// The mount point for the extra partition. Must be an absolute path using alphanumeric characters and underscores.
	Ext4Mountpoint pulumi.StringPtrInput `pulumi:"ext4Mountpoint"`
	// Whether to add an extra ext4 data partition.
	ExtraPartition pulumi.BoolPtrInput `pulumi:"extraPartition"`
	// The UUID of the BareMetal offer.
	OfferId pulumi.StringInput `pulumi:"offerId"`
	// The UUID of the OS image.
	OsId pulumi.StringInput `pulumi:"osId"`
	// Whether to include a swap partition.
	Swap pulumi.BoolPtrInput `pulumi:"swap"`
}

func (GetBaremetalPartitionSchemaOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBaremetalPartitionSchemaArgs)(nil)).Elem()
}

// A collection of values returned by getBaremetalPartitionSchema.
type GetBaremetalPartitionSchemaResultOutput struct{ *pulumi.OutputState }

func (GetBaremetalPartitionSchemaResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBaremetalPartitionSchemaResult)(nil)).Elem()
}

func (o GetBaremetalPartitionSchemaResultOutput) ToGetBaremetalPartitionSchemaResultOutput() GetBaremetalPartitionSchemaResultOutput {
	return o
}

func (o GetBaremetalPartitionSchemaResultOutput) ToGetBaremetalPartitionSchemaResultOutputWithContext(ctx context.Context) GetBaremetalPartitionSchemaResultOutput {
	return o
}

func (o GetBaremetalPartitionSchemaResultOutput) Ext4Mountpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBaremetalPartitionSchemaResult) *string { return v.Ext4Mountpoint }).(pulumi.StringPtrOutput)
}

func (o GetBaremetalPartitionSchemaResultOutput) ExtraPartition() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetBaremetalPartitionSchemaResult) *bool { return v.ExtraPartition }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetBaremetalPartitionSchemaResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalPartitionSchemaResult) string { return v.Id }).(pulumi.StringOutput)
}

// — A validated partitioning schema in JSON format that can be directly used for BareMetal server deployment.
func (o GetBaremetalPartitionSchemaResultOutput) JsonPartition() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalPartitionSchemaResult) string { return v.JsonPartition }).(pulumi.StringOutput)
}

func (o GetBaremetalPartitionSchemaResultOutput) OfferId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalPartitionSchemaResult) string { return v.OfferId }).(pulumi.StringOutput)
}

func (o GetBaremetalPartitionSchemaResultOutput) OsId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalPartitionSchemaResult) string { return v.OsId }).(pulumi.StringOutput)
}

func (o GetBaremetalPartitionSchemaResultOutput) Swap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetBaremetalPartitionSchemaResult) *bool { return v.Swap }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetBaremetalPartitionSchemaResultOutput{})
}
