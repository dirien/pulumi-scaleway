// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets information about an Database Instance.
//
// For further information refer the Managed Databases for PostgreSQL and MySQL [API documentation](https://developers.scaleway.com/en/products/rdb/api/#database-instance)
func LookupRdbInstance(ctx *pulumi.Context, args *LookupRdbInstanceArgs, opts ...pulumi.InvokeOption) (*LookupRdbInstanceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRdbInstanceResult
	err := ctx.Invoke("scaleway:index/getRdbInstance:getRdbInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRdbInstance.
type LookupRdbInstanceArgs struct {
	// The RDB instance ID.
	//
	// > **Note** You must specify at least one: `name` and/or `instanceId`.
	InstanceId *string `pulumi:"instanceId"`
	// The name of the RDB instance.
	Name *string `pulumi:"name"`
	// The ID of the project the Database Instance is in. Can be used to filter instances when using `name`.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region in which the Database Instance exists.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getRdbInstance.
type LookupRdbInstanceResult struct {
	BackupSameRegion        bool   `pulumi:"backupSameRegion"`
	BackupScheduleFrequency int    `pulumi:"backupScheduleFrequency"`
	BackupScheduleRetention int    `pulumi:"backupScheduleRetention"`
	Certificate             string `pulumi:"certificate"`
	DisableBackup           bool   `pulumi:"disableBackup"`
	EncryptionAtRest        bool   `pulumi:"encryptionAtRest"`
	EndpointIp              string `pulumi:"endpointIp"`
	EndpointPort            int    `pulumi:"endpointPort"`
	Engine                  string `pulumi:"engine"`
	// The provider-assigned unique ID for this managed resource.
	Id              string                         `pulumi:"id"`
	InitSettings    map[string]string              `pulumi:"initSettings"`
	InstanceId      *string                        `pulumi:"instanceId"`
	IsHaCluster     bool                           `pulumi:"isHaCluster"`
	LoadBalancers   []GetRdbInstanceLoadBalancer   `pulumi:"loadBalancers"`
	LogsPolicies    []GetRdbInstanceLogsPolicy     `pulumi:"logsPolicies"`
	Name            *string                        `pulumi:"name"`
	NodeType        string                         `pulumi:"nodeType"`
	OrganizationId  string                         `pulumi:"organizationId"`
	Password        string                         `pulumi:"password"`
	PrivateIps      []GetRdbInstancePrivateIp      `pulumi:"privateIps"`
	PrivateNetworks []GetRdbInstancePrivateNetwork `pulumi:"privateNetworks"`
	ProjectId       *string                        `pulumi:"projectId"`
	ReadReplicas    []GetRdbInstanceReadReplica    `pulumi:"readReplicas"`
	Region          *string                        `pulumi:"region"`
	Settings        map[string]string              `pulumi:"settings"`
	SnapshotId      string                         `pulumi:"snapshotId"`
	Tags            []string                       `pulumi:"tags"`
	UserName        string                         `pulumi:"userName"`
	VolumeSizeInGb  int                            `pulumi:"volumeSizeInGb"`
	VolumeType      string                         `pulumi:"volumeType"`
}

func LookupRdbInstanceOutput(ctx *pulumi.Context, args LookupRdbInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupRdbInstanceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRdbInstanceResultOutput, error) {
			args := v.(LookupRdbInstanceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:index/getRdbInstance:getRdbInstance", args, LookupRdbInstanceResultOutput{}, options).(LookupRdbInstanceResultOutput), nil
		}).(LookupRdbInstanceResultOutput)
}

// A collection of arguments for invoking getRdbInstance.
type LookupRdbInstanceOutputArgs struct {
	// The RDB instance ID.
	//
	// > **Note** You must specify at least one: `name` and/or `instanceId`.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// The name of the RDB instance.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ID of the project the Database Instance is in. Can be used to filter instances when using `name`.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// `region`) The region in which the Database Instance exists.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupRdbInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRdbInstanceArgs)(nil)).Elem()
}

// A collection of values returned by getRdbInstance.
type LookupRdbInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupRdbInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRdbInstanceResult)(nil)).Elem()
}

func (o LookupRdbInstanceResultOutput) ToLookupRdbInstanceResultOutput() LookupRdbInstanceResultOutput {
	return o
}

func (o LookupRdbInstanceResultOutput) ToLookupRdbInstanceResultOutputWithContext(ctx context.Context) LookupRdbInstanceResultOutput {
	return o
}

func (o LookupRdbInstanceResultOutput) BackupSameRegion() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) bool { return v.BackupSameRegion }).(pulumi.BoolOutput)
}

func (o LookupRdbInstanceResultOutput) BackupScheduleFrequency() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) int { return v.BackupScheduleFrequency }).(pulumi.IntOutput)
}

func (o LookupRdbInstanceResultOutput) BackupScheduleRetention() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) int { return v.BackupScheduleRetention }).(pulumi.IntOutput)
}

func (o LookupRdbInstanceResultOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) string { return v.Certificate }).(pulumi.StringOutput)
}

func (o LookupRdbInstanceResultOutput) DisableBackup() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) bool { return v.DisableBackup }).(pulumi.BoolOutput)
}

func (o LookupRdbInstanceResultOutput) EncryptionAtRest() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) bool { return v.EncryptionAtRest }).(pulumi.BoolOutput)
}

func (o LookupRdbInstanceResultOutput) EndpointIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) string { return v.EndpointIp }).(pulumi.StringOutput)
}

func (o LookupRdbInstanceResultOutput) EndpointPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) int { return v.EndpointPort }).(pulumi.IntOutput)
}

func (o LookupRdbInstanceResultOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) string { return v.Engine }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRdbInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRdbInstanceResultOutput) InitSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) map[string]string { return v.InitSettings }).(pulumi.StringMapOutput)
}

func (o LookupRdbInstanceResultOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

func (o LookupRdbInstanceResultOutput) IsHaCluster() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) bool { return v.IsHaCluster }).(pulumi.BoolOutput)
}

func (o LookupRdbInstanceResultOutput) LoadBalancers() GetRdbInstanceLoadBalancerArrayOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) []GetRdbInstanceLoadBalancer { return v.LoadBalancers }).(GetRdbInstanceLoadBalancerArrayOutput)
}

func (o LookupRdbInstanceResultOutput) LogsPolicies() GetRdbInstanceLogsPolicyArrayOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) []GetRdbInstanceLogsPolicy { return v.LogsPolicies }).(GetRdbInstanceLogsPolicyArrayOutput)
}

func (o LookupRdbInstanceResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupRdbInstanceResultOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) string { return v.NodeType }).(pulumi.StringOutput)
}

func (o LookupRdbInstanceResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o LookupRdbInstanceResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) string { return v.Password }).(pulumi.StringOutput)
}

func (o LookupRdbInstanceResultOutput) PrivateIps() GetRdbInstancePrivateIpArrayOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) []GetRdbInstancePrivateIp { return v.PrivateIps }).(GetRdbInstancePrivateIpArrayOutput)
}

func (o LookupRdbInstanceResultOutput) PrivateNetworks() GetRdbInstancePrivateNetworkArrayOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) []GetRdbInstancePrivateNetwork { return v.PrivateNetworks }).(GetRdbInstancePrivateNetworkArrayOutput)
}

func (o LookupRdbInstanceResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o LookupRdbInstanceResultOutput) ReadReplicas() GetRdbInstanceReadReplicaArrayOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) []GetRdbInstanceReadReplica { return v.ReadReplicas }).(GetRdbInstanceReadReplicaArrayOutput)
}

func (o LookupRdbInstanceResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o LookupRdbInstanceResultOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

func (o LookupRdbInstanceResultOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) string { return v.SnapshotId }).(pulumi.StringOutput)
}

func (o LookupRdbInstanceResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o LookupRdbInstanceResultOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) string { return v.UserName }).(pulumi.StringOutput)
}

func (o LookupRdbInstanceResultOutput) VolumeSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) int { return v.VolumeSizeInGb }).(pulumi.IntOutput)
}

func (o LookupRdbInstanceResultOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdbInstanceResult) string { return v.VolumeType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRdbInstanceResultOutput{})
}
