// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about Scaleway Load Balancer certificates.
//
// This data source can prove useful when a module accepts a Load Balancer certificate as an input variable and needs to, for example, determine the security of a certificate for the frontend associated with your domain.
//
// For more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/how-to/add-certificate/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-certificate).
//
// ## Examples
func LookupLbCertificate(ctx *pulumi.Context, args *LookupLbCertificateArgs, opts ...pulumi.InvokeOption) (*LookupLbCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLbCertificateResult
	err := ctx.Invoke("scaleway:index/getLbCertificate:getLbCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLbCertificate.
type LookupLbCertificateArgs struct {
	// The certificate ID.
	// - Only one of `name` and `certificateId` should be specified.
	CertificateId *string `pulumi:"certificateId"`
	// The Load Balancer ID this certificate is attached to.
	LbId *string `pulumi:"lbId"`
	// The name of the Load Balancer certificate.
	// - When using a certificate `name` you should specify the `lb-id`
	Name *string `pulumi:"name"`
}

// A collection of values returned by getLbCertificate.
type LookupLbCertificateResult struct {
	CertificateId      *string                             `pulumi:"certificateId"`
	CommonName         string                              `pulumi:"commonName"`
	CustomCertificates []GetLbCertificateCustomCertificate `pulumi:"customCertificates"`
	Fingerprint        string                              `pulumi:"fingerprint"`
	// The provider-assigned unique ID for this managed resource.
	Id                      string                        `pulumi:"id"`
	LbId                    *string                       `pulumi:"lbId"`
	Letsencrypts            []GetLbCertificateLetsencrypt `pulumi:"letsencrypts"`
	Name                    *string                       `pulumi:"name"`
	NotValidAfter           string                        `pulumi:"notValidAfter"`
	NotValidBefore          string                        `pulumi:"notValidBefore"`
	Status                  string                        `pulumi:"status"`
	SubjectAlternativeNames []string                      `pulumi:"subjectAlternativeNames"`
}

func LookupLbCertificateOutput(ctx *pulumi.Context, args LookupLbCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupLbCertificateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLbCertificateResultOutput, error) {
			args := v.(LookupLbCertificateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:index/getLbCertificate:getLbCertificate", args, LookupLbCertificateResultOutput{}, options).(LookupLbCertificateResultOutput), nil
		}).(LookupLbCertificateResultOutput)
}

// A collection of arguments for invoking getLbCertificate.
type LookupLbCertificateOutputArgs struct {
	// The certificate ID.
	// - Only one of `name` and `certificateId` should be specified.
	CertificateId pulumi.StringPtrInput `pulumi:"certificateId"`
	// The Load Balancer ID this certificate is attached to.
	LbId pulumi.StringPtrInput `pulumi:"lbId"`
	// The name of the Load Balancer certificate.
	// - When using a certificate `name` you should specify the `lb-id`
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupLbCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLbCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getLbCertificate.
type LookupLbCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupLbCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLbCertificateResult)(nil)).Elem()
}

func (o LookupLbCertificateResultOutput) ToLookupLbCertificateResultOutput() LookupLbCertificateResultOutput {
	return o
}

func (o LookupLbCertificateResultOutput) ToLookupLbCertificateResultOutputWithContext(ctx context.Context) LookupLbCertificateResultOutput {
	return o
}

func (o LookupLbCertificateResultOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLbCertificateResult) *string { return v.CertificateId }).(pulumi.StringPtrOutput)
}

func (o LookupLbCertificateResultOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbCertificateResult) string { return v.CommonName }).(pulumi.StringOutput)
}

func (o LookupLbCertificateResultOutput) CustomCertificates() GetLbCertificateCustomCertificateArrayOutput {
	return o.ApplyT(func(v LookupLbCertificateResult) []GetLbCertificateCustomCertificate { return v.CustomCertificates }).(GetLbCertificateCustomCertificateArrayOutput)
}

func (o LookupLbCertificateResultOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbCertificateResult) string { return v.Fingerprint }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupLbCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupLbCertificateResultOutput) LbId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLbCertificateResult) *string { return v.LbId }).(pulumi.StringPtrOutput)
}

func (o LookupLbCertificateResultOutput) Letsencrypts() GetLbCertificateLetsencryptArrayOutput {
	return o.ApplyT(func(v LookupLbCertificateResult) []GetLbCertificateLetsencrypt { return v.Letsencrypts }).(GetLbCertificateLetsencryptArrayOutput)
}

func (o LookupLbCertificateResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLbCertificateResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupLbCertificateResultOutput) NotValidAfter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbCertificateResult) string { return v.NotValidAfter }).(pulumi.StringOutput)
}

func (o LookupLbCertificateResultOutput) NotValidBefore() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbCertificateResult) string { return v.NotValidBefore }).(pulumi.StringOutput)
}

func (o LookupLbCertificateResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbCertificateResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupLbCertificateResultOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLbCertificateResult) []string { return v.SubjectAlternativeNames }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLbCertificateResultOutput{})
}
