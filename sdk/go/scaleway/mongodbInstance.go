// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages Scaleway MongoDB® instance.
// For more information refer to [the API documentation](https://www.scaleway.com/en/docs/managed-databases/mongodb/).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewMongodbInstance(ctx, "main", &scaleway.MongodbInstanceArgs{
//				NodeNumber:     pulumi.Int(1),
//				NodeType:       pulumi.String("MGDB-PLAY2-NANO"),
//				Password:       pulumi.String("thiZ_is_v&ry_s3cret"),
//				UserName:       pulumi.String("my_initial_user"),
//				Version:        pulumi.String("7.0.12"),
//				VolumeSizeInGb: pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Restore From Snapshot
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewMongodbInstance(ctx, "restoredInstance", &scaleway.MongodbInstanceArgs{
//				NodeNumber: pulumi.Int(1),
//				NodeType:   pulumi.String("MGDB-PLAY2-NANO"),
//				SnapshotId: pulumi.Any(scaleway_vpc_private_network.Pn.Idscaleway_mongodb_snapshot.Main_snapshot.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MongoDB® instance can be imported using the `id`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/mongodbInstance:MongodbInstance main fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type MongodbInstance struct {
	pulumi.CustomResourceState

	// The date and time of the creation of the MongoDB® instance.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Name of the MongoDB® instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of nodes in the instance
	NodeNumber pulumi.IntOutput `pulumi:"nodeNumber"`
	// The type of MongoDB® intance to create.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// Password of the user.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Public network specs details.
	PublicNetwork MongodbInstancePublicNetworkOutput `pulumi:"publicNetwork"`
	// The region you want to attach the resource to
	Region pulumi.StringOutput `pulumi:"region"`
	// Map of settings to define for the instance.
	Settings pulumi.StringMapOutput `pulumi:"settings"`
	// Snapshot ID to restore the MongoDB® instance from.
	SnapshotId pulumi.StringPtrOutput `pulumi:"snapshotId"`
	// List of tags attached to the MongoDB® instance.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The date and time of the last update of the MongoDB® instance.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Name of the user created when the intance is created.
	UserName pulumi.StringPtrOutput `pulumi:"userName"`
	// MongoDB® version of the instance.
	Version pulumi.StringOutput `pulumi:"version"`
	// Volume size in GB.
	VolumeSizeInGb pulumi.IntOutput `pulumi:"volumeSizeInGb"`
	// Volume type of the instance.
	VolumeType pulumi.StringPtrOutput `pulumi:"volumeType"`
}

// NewMongodbInstance registers a new resource with the given unique name, arguments, and options.
func NewMongodbInstance(ctx *pulumi.Context,
	name string, args *MongodbInstanceArgs, opts ...pulumi.ResourceOption) (*MongodbInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NodeNumber == nil {
		return nil, errors.New("invalid value for required argument 'NodeNumber'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MongodbInstance
	err := ctx.RegisterResource("scaleway:index/mongodbInstance:MongodbInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongodbInstance gets an existing MongodbInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongodbInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongodbInstanceState, opts ...pulumi.ResourceOption) (*MongodbInstance, error) {
	var resource MongodbInstance
	err := ctx.ReadResource("scaleway:index/mongodbInstance:MongodbInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongodbInstance resources.
type mongodbInstanceState struct {
	// The date and time of the creation of the MongoDB® instance.
	CreatedAt *string `pulumi:"createdAt"`
	// Name of the MongoDB® instance.
	Name *string `pulumi:"name"`
	// Number of nodes in the instance
	NodeNumber *int `pulumi:"nodeNumber"`
	// The type of MongoDB® intance to create.
	NodeType *string `pulumi:"nodeType"`
	// Password of the user.
	Password *string `pulumi:"password"`
	// The projectId you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// Public network specs details.
	PublicNetwork *MongodbInstancePublicNetwork `pulumi:"publicNetwork"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// Map of settings to define for the instance.
	Settings map[string]string `pulumi:"settings"`
	// Snapshot ID to restore the MongoDB® instance from.
	SnapshotId *string `pulumi:"snapshotId"`
	// List of tags attached to the MongoDB® instance.
	Tags []string `pulumi:"tags"`
	// The date and time of the last update of the MongoDB® instance.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Name of the user created when the intance is created.
	UserName *string `pulumi:"userName"`
	// MongoDB® version of the instance.
	Version *string `pulumi:"version"`
	// Volume size in GB.
	VolumeSizeInGb *int `pulumi:"volumeSizeInGb"`
	// Volume type of the instance.
	VolumeType *string `pulumi:"volumeType"`
}

type MongodbInstanceState struct {
	// The date and time of the creation of the MongoDB® instance.
	CreatedAt pulumi.StringPtrInput
	// Name of the MongoDB® instance.
	Name pulumi.StringPtrInput
	// Number of nodes in the instance
	NodeNumber pulumi.IntPtrInput
	// The type of MongoDB® intance to create.
	NodeType pulumi.StringPtrInput
	// Password of the user.
	Password pulumi.StringPtrInput
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// Public network specs details.
	PublicNetwork MongodbInstancePublicNetworkPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// Map of settings to define for the instance.
	Settings pulumi.StringMapInput
	// Snapshot ID to restore the MongoDB® instance from.
	SnapshotId pulumi.StringPtrInput
	// List of tags attached to the MongoDB® instance.
	Tags pulumi.StringArrayInput
	// The date and time of the last update of the MongoDB® instance.
	UpdatedAt pulumi.StringPtrInput
	// Name of the user created when the intance is created.
	UserName pulumi.StringPtrInput
	// MongoDB® version of the instance.
	Version pulumi.StringPtrInput
	// Volume size in GB.
	VolumeSizeInGb pulumi.IntPtrInput
	// Volume type of the instance.
	VolumeType pulumi.StringPtrInput
}

func (MongodbInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongodbInstanceState)(nil)).Elem()
}

type mongodbInstanceArgs struct {
	// Name of the MongoDB® instance.
	Name *string `pulumi:"name"`
	// Number of nodes in the instance
	NodeNumber int `pulumi:"nodeNumber"`
	// The type of MongoDB® intance to create.
	NodeType string `pulumi:"nodeType"`
	// Password of the user.
	Password *string `pulumi:"password"`
	// The projectId you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// Public network specs details.
	PublicNetwork *MongodbInstancePublicNetwork `pulumi:"publicNetwork"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// Map of settings to define for the instance.
	Settings map[string]string `pulumi:"settings"`
	// Snapshot ID to restore the MongoDB® instance from.
	SnapshotId *string `pulumi:"snapshotId"`
	// List of tags attached to the MongoDB® instance.
	Tags []string `pulumi:"tags"`
	// Name of the user created when the intance is created.
	UserName *string `pulumi:"userName"`
	// MongoDB® version of the instance.
	Version *string `pulumi:"version"`
	// Volume size in GB.
	VolumeSizeInGb *int `pulumi:"volumeSizeInGb"`
	// Volume type of the instance.
	VolumeType *string `pulumi:"volumeType"`
}

// The set of arguments for constructing a MongodbInstance resource.
type MongodbInstanceArgs struct {
	// Name of the MongoDB® instance.
	Name pulumi.StringPtrInput
	// Number of nodes in the instance
	NodeNumber pulumi.IntInput
	// The type of MongoDB® intance to create.
	NodeType pulumi.StringInput
	// Password of the user.
	Password pulumi.StringPtrInput
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// Public network specs details.
	PublicNetwork MongodbInstancePublicNetworkPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// Map of settings to define for the instance.
	Settings pulumi.StringMapInput
	// Snapshot ID to restore the MongoDB® instance from.
	SnapshotId pulumi.StringPtrInput
	// List of tags attached to the MongoDB® instance.
	Tags pulumi.StringArrayInput
	// Name of the user created when the intance is created.
	UserName pulumi.StringPtrInput
	// MongoDB® version of the instance.
	Version pulumi.StringPtrInput
	// Volume size in GB.
	VolumeSizeInGb pulumi.IntPtrInput
	// Volume type of the instance.
	VolumeType pulumi.StringPtrInput
}

func (MongodbInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongodbInstanceArgs)(nil)).Elem()
}

type MongodbInstanceInput interface {
	pulumi.Input

	ToMongodbInstanceOutput() MongodbInstanceOutput
	ToMongodbInstanceOutputWithContext(ctx context.Context) MongodbInstanceOutput
}

func (*MongodbInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbInstance)(nil)).Elem()
}

func (i *MongodbInstance) ToMongodbInstanceOutput() MongodbInstanceOutput {
	return i.ToMongodbInstanceOutputWithContext(context.Background())
}

func (i *MongodbInstance) ToMongodbInstanceOutputWithContext(ctx context.Context) MongodbInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbInstanceOutput)
}

// MongodbInstanceArrayInput is an input type that accepts MongodbInstanceArray and MongodbInstanceArrayOutput values.
// You can construct a concrete instance of `MongodbInstanceArrayInput` via:
//
//	MongodbInstanceArray{ MongodbInstanceArgs{...} }
type MongodbInstanceArrayInput interface {
	pulumi.Input

	ToMongodbInstanceArrayOutput() MongodbInstanceArrayOutput
	ToMongodbInstanceArrayOutputWithContext(context.Context) MongodbInstanceArrayOutput
}

type MongodbInstanceArray []MongodbInstanceInput

func (MongodbInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongodbInstance)(nil)).Elem()
}

func (i MongodbInstanceArray) ToMongodbInstanceArrayOutput() MongodbInstanceArrayOutput {
	return i.ToMongodbInstanceArrayOutputWithContext(context.Background())
}

func (i MongodbInstanceArray) ToMongodbInstanceArrayOutputWithContext(ctx context.Context) MongodbInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbInstanceArrayOutput)
}

// MongodbInstanceMapInput is an input type that accepts MongodbInstanceMap and MongodbInstanceMapOutput values.
// You can construct a concrete instance of `MongodbInstanceMapInput` via:
//
//	MongodbInstanceMap{ "key": MongodbInstanceArgs{...} }
type MongodbInstanceMapInput interface {
	pulumi.Input

	ToMongodbInstanceMapOutput() MongodbInstanceMapOutput
	ToMongodbInstanceMapOutputWithContext(context.Context) MongodbInstanceMapOutput
}

type MongodbInstanceMap map[string]MongodbInstanceInput

func (MongodbInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongodbInstance)(nil)).Elem()
}

func (i MongodbInstanceMap) ToMongodbInstanceMapOutput() MongodbInstanceMapOutput {
	return i.ToMongodbInstanceMapOutputWithContext(context.Background())
}

func (i MongodbInstanceMap) ToMongodbInstanceMapOutputWithContext(ctx context.Context) MongodbInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbInstanceMapOutput)
}

type MongodbInstanceOutput struct{ *pulumi.OutputState }

func (MongodbInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbInstance)(nil)).Elem()
}

func (o MongodbInstanceOutput) ToMongodbInstanceOutput() MongodbInstanceOutput {
	return o
}

func (o MongodbInstanceOutput) ToMongodbInstanceOutputWithContext(ctx context.Context) MongodbInstanceOutput {
	return o
}

// The date and time of the creation of the MongoDB® instance.
func (o MongodbInstanceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbInstance) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Name of the MongoDB® instance.
func (o MongodbInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of nodes in the instance
func (o MongodbInstanceOutput) NodeNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *MongodbInstance) pulumi.IntOutput { return v.NodeNumber }).(pulumi.IntOutput)
}

// The type of MongoDB® intance to create.
func (o MongodbInstanceOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbInstance) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// Password of the user.
func (o MongodbInstanceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongodbInstance) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The projectId you want to attach the resource to
func (o MongodbInstanceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbInstance) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Public network specs details.
func (o MongodbInstanceOutput) PublicNetwork() MongodbInstancePublicNetworkOutput {
	return o.ApplyT(func(v *MongodbInstance) MongodbInstancePublicNetworkOutput { return v.PublicNetwork }).(MongodbInstancePublicNetworkOutput)
}

// The region you want to attach the resource to
func (o MongodbInstanceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbInstance) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Map of settings to define for the instance.
func (o MongodbInstanceOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MongodbInstance) pulumi.StringMapOutput { return v.Settings }).(pulumi.StringMapOutput)
}

// Snapshot ID to restore the MongoDB® instance from.
func (o MongodbInstanceOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongodbInstance) pulumi.StringPtrOutput { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// List of tags attached to the MongoDB® instance.
func (o MongodbInstanceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MongodbInstance) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The date and time of the last update of the MongoDB® instance.
func (o MongodbInstanceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbInstance) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Name of the user created when the intance is created.
func (o MongodbInstanceOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongodbInstance) pulumi.StringPtrOutput { return v.UserName }).(pulumi.StringPtrOutput)
}

// MongoDB® version of the instance.
func (o MongodbInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbInstance) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// Volume size in GB.
func (o MongodbInstanceOutput) VolumeSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v *MongodbInstance) pulumi.IntOutput { return v.VolumeSizeInGb }).(pulumi.IntOutput)
}

// Volume type of the instance.
func (o MongodbInstanceOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongodbInstance) pulumi.StringPtrOutput { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type MongodbInstanceArrayOutput struct{ *pulumi.OutputState }

func (MongodbInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongodbInstance)(nil)).Elem()
}

func (o MongodbInstanceArrayOutput) ToMongodbInstanceArrayOutput() MongodbInstanceArrayOutput {
	return o
}

func (o MongodbInstanceArrayOutput) ToMongodbInstanceArrayOutputWithContext(ctx context.Context) MongodbInstanceArrayOutput {
	return o
}

func (o MongodbInstanceArrayOutput) Index(i pulumi.IntInput) MongodbInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MongodbInstance {
		return vs[0].([]*MongodbInstance)[vs[1].(int)]
	}).(MongodbInstanceOutput)
}

type MongodbInstanceMapOutput struct{ *pulumi.OutputState }

func (MongodbInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongodbInstance)(nil)).Elem()
}

func (o MongodbInstanceMapOutput) ToMongodbInstanceMapOutput() MongodbInstanceMapOutput {
	return o
}

func (o MongodbInstanceMapOutput) ToMongodbInstanceMapOutputWithContext(ctx context.Context) MongodbInstanceMapOutput {
	return o
}

func (o MongodbInstanceMapOutput) MapIndex(k pulumi.StringInput) MongodbInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MongodbInstance {
		return vs[0].(map[string]*MongodbInstance)[vs[1].(string)]
	}).(MongodbInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbInstanceInput)(nil)).Elem(), &MongodbInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbInstanceArrayInput)(nil)).Elem(), MongodbInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbInstanceMapInput)(nil)).Elem(), MongodbInstanceMap{})
	pulumi.RegisterOutputType(MongodbInstanceOutput{})
	pulumi.RegisterOutputType(MongodbInstanceArrayOutput{})
	pulumi.RegisterOutputType(MongodbInstanceMapOutput{})
}
