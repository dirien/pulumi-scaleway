// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages Scaleway Load Balancer IP addresses.
//
// For more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/how-to/create-manage-flex-ips/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-ip-addresses-list-ip-addresses).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewLbIp(ctx, "ip", &scaleway.LbIpArgs{
//				Reverse: pulumi.String("my-reverse.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With IPv6
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewLbIp(ctx, "ipv6", &scaleway.LbIpArgs{
//				IsIpv6: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IPs can be imported using `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/lbIp:LbIp ip01 fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type LbIp struct {
	pulumi.CustomResourceState

	// The IP address
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// If true, creates a flexible IP with an IPv6 address.
	IsIpv6 pulumi.BoolPtrOutput `pulumi:"isIpv6"`
	// The associated Load Balancer ID if any
	LbId pulumi.StringOutput `pulumi:"lbId"`
	// The organizationId you want to attach the resource to
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// `projectId`) The ID of the Project the IP is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region of the resource
	Region pulumi.StringOutput `pulumi:"region"`
	// The reverse domain associated with this IP.
	Reverse pulumi.StringOutput `pulumi:"reverse"`
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewLbIp registers a new resource with the given unique name, arguments, and options.
func NewLbIp(ctx *pulumi.Context,
	name string, args *LbIpArgs, opts ...pulumi.ResourceOption) (*LbIp, error) {
	if args == nil {
		args = &LbIpArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LbIp
	err := ctx.RegisterResource("scaleway:index/lbIp:LbIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLbIp gets an existing LbIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbIpState, opts ...pulumi.ResourceOption) (*LbIp, error) {
	var resource LbIp
	err := ctx.ReadResource("scaleway:index/lbIp:LbIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LbIp resources.
type lbIpState struct {
	// The IP address
	IpAddress *string `pulumi:"ipAddress"`
	// If true, creates a flexible IP with an IPv6 address.
	IsIpv6 *bool `pulumi:"isIpv6"`
	// The associated Load Balancer ID if any
	LbId *string `pulumi:"lbId"`
	// The organizationId you want to attach the resource to
	OrganizationId *string `pulumi:"organizationId"`
	// `projectId`) The ID of the Project the IP is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The region of the resource
	Region *string `pulumi:"region"`
	// The reverse domain associated with this IP.
	Reverse *string `pulumi:"reverse"`
	// `zone`) The zone in which the IP should be reserved.
	Zone *string `pulumi:"zone"`
}

type LbIpState struct {
	// The IP address
	IpAddress pulumi.StringPtrInput
	// If true, creates a flexible IP with an IPv6 address.
	IsIpv6 pulumi.BoolPtrInput
	// The associated Load Balancer ID if any
	LbId pulumi.StringPtrInput
	// The organizationId you want to attach the resource to
	OrganizationId pulumi.StringPtrInput
	// `projectId`) The ID of the Project the IP is associated with.
	ProjectId pulumi.StringPtrInput
	// The region of the resource
	Region pulumi.StringPtrInput
	// The reverse domain associated with this IP.
	Reverse pulumi.StringPtrInput
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringPtrInput
}

func (LbIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbIpState)(nil)).Elem()
}

type lbIpArgs struct {
	// If true, creates a flexible IP with an IPv6 address.
	IsIpv6 *bool `pulumi:"isIpv6"`
	// `projectId`) The ID of the Project the IP is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The reverse domain associated with this IP.
	Reverse *string `pulumi:"reverse"`
	// `zone`) The zone in which the IP should be reserved.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a LbIp resource.
type LbIpArgs struct {
	// If true, creates a flexible IP with an IPv6 address.
	IsIpv6 pulumi.BoolPtrInput
	// `projectId`) The ID of the Project the IP is associated with.
	ProjectId pulumi.StringPtrInput
	// The reverse domain associated with this IP.
	Reverse pulumi.StringPtrInput
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringPtrInput
}

func (LbIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbIpArgs)(nil)).Elem()
}

type LbIpInput interface {
	pulumi.Input

	ToLbIpOutput() LbIpOutput
	ToLbIpOutputWithContext(ctx context.Context) LbIpOutput
}

func (*LbIp) ElementType() reflect.Type {
	return reflect.TypeOf((**LbIp)(nil)).Elem()
}

func (i *LbIp) ToLbIpOutput() LbIpOutput {
	return i.ToLbIpOutputWithContext(context.Background())
}

func (i *LbIp) ToLbIpOutputWithContext(ctx context.Context) LbIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbIpOutput)
}

// LbIpArrayInput is an input type that accepts LbIpArray and LbIpArrayOutput values.
// You can construct a concrete instance of `LbIpArrayInput` via:
//
//	LbIpArray{ LbIpArgs{...} }
type LbIpArrayInput interface {
	pulumi.Input

	ToLbIpArrayOutput() LbIpArrayOutput
	ToLbIpArrayOutputWithContext(context.Context) LbIpArrayOutput
}

type LbIpArray []LbIpInput

func (LbIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbIp)(nil)).Elem()
}

func (i LbIpArray) ToLbIpArrayOutput() LbIpArrayOutput {
	return i.ToLbIpArrayOutputWithContext(context.Background())
}

func (i LbIpArray) ToLbIpArrayOutputWithContext(ctx context.Context) LbIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbIpArrayOutput)
}

// LbIpMapInput is an input type that accepts LbIpMap and LbIpMapOutput values.
// You can construct a concrete instance of `LbIpMapInput` via:
//
//	LbIpMap{ "key": LbIpArgs{...} }
type LbIpMapInput interface {
	pulumi.Input

	ToLbIpMapOutput() LbIpMapOutput
	ToLbIpMapOutputWithContext(context.Context) LbIpMapOutput
}

type LbIpMap map[string]LbIpInput

func (LbIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbIp)(nil)).Elem()
}

func (i LbIpMap) ToLbIpMapOutput() LbIpMapOutput {
	return i.ToLbIpMapOutputWithContext(context.Background())
}

func (i LbIpMap) ToLbIpMapOutputWithContext(ctx context.Context) LbIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbIpMapOutput)
}

type LbIpOutput struct{ *pulumi.OutputState }

func (LbIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbIp)(nil)).Elem()
}

func (o LbIpOutput) ToLbIpOutput() LbIpOutput {
	return o
}

func (o LbIpOutput) ToLbIpOutputWithContext(ctx context.Context) LbIpOutput {
	return o
}

// The IP address
func (o LbIpOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *LbIp) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// If true, creates a flexible IP with an IPv6 address.
func (o LbIpOutput) IsIpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LbIp) pulumi.BoolPtrOutput { return v.IsIpv6 }).(pulumi.BoolPtrOutput)
}

// The associated Load Balancer ID if any
func (o LbIpOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v *LbIp) pulumi.StringOutput { return v.LbId }).(pulumi.StringOutput)
}

// The organizationId you want to attach the resource to
func (o LbIpOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *LbIp) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// `projectId`) The ID of the Project the IP is associated with.
func (o LbIpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *LbIp) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The region of the resource
func (o LbIpOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *LbIp) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The reverse domain associated with this IP.
func (o LbIpOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v *LbIp) pulumi.StringOutput { return v.Reverse }).(pulumi.StringOutput)
}

// `zone`) The zone in which the IP should be reserved.
func (o LbIpOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *LbIp) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type LbIpArrayOutput struct{ *pulumi.OutputState }

func (LbIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbIp)(nil)).Elem()
}

func (o LbIpArrayOutput) ToLbIpArrayOutput() LbIpArrayOutput {
	return o
}

func (o LbIpArrayOutput) ToLbIpArrayOutputWithContext(ctx context.Context) LbIpArrayOutput {
	return o
}

func (o LbIpArrayOutput) Index(i pulumi.IntInput) LbIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LbIp {
		return vs[0].([]*LbIp)[vs[1].(int)]
	}).(LbIpOutput)
}

type LbIpMapOutput struct{ *pulumi.OutputState }

func (LbIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbIp)(nil)).Elem()
}

func (o LbIpMapOutput) ToLbIpMapOutput() LbIpMapOutput {
	return o
}

func (o LbIpMapOutput) ToLbIpMapOutputWithContext(ctx context.Context) LbIpMapOutput {
	return o
}

func (o LbIpMapOutput) MapIndex(k pulumi.StringInput) LbIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LbIp {
		return vs[0].(map[string]*LbIp)[vs[1].(string)]
	}).(LbIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LbIpInput)(nil)).Elem(), &LbIp{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbIpArrayInput)(nil)).Elem(), LbIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbIpMapInput)(nil)).Elem(), LbIpMap{})
	pulumi.RegisterOutputType(LbIpOutput{})
	pulumi.RegisterOutputType(LbIpArrayOutput{})
	pulumi.RegisterOutputType(LbIpMapOutput{})
}
