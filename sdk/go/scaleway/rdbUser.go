// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages Scaleway Database Users.
// For more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).
//
// ## Examples
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			dbPassword, err := random.NewRandomPassword(ctx, "dbPassword", &random.RandomPasswordArgs{
//				Length:  pulumi.Int(16),
//				Special: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewRdbUser(ctx, "dbAdmin", &scaleway.RdbUserArgs{
//				InstanceId: pulumi.Any(scaleway_rdb_instance.Main.Id),
//				Password:   dbPassword.Result,
//				IsAdmin:    pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Database User can be imported using `{region}/{instance_id}/{user_name}`, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:index/rdbUser:RdbUser admin fr-par/11111111-1111-1111-1111-111111111111/admin
//
// ```
type RdbUser struct {
	pulumi.CustomResourceState

	// UUID of the rdb instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the Database User.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Grant admin permissions to the Database User.
	IsAdmin pulumi.BoolPtrOutput `pulumi:"isAdmin"`
	// Database User name.
	//
	// > **Important:** Updates to `name` will recreate the Database User.
	Name pulumi.StringOutput `pulumi:"name"`
	// Database User password.
	Password pulumi.StringOutput `pulumi:"password"`
	// The Scaleway region this resource resides in.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewRdbUser registers a new resource with the given unique name, arguments, and options.
func NewRdbUser(ctx *pulumi.Context,
	name string, args *RdbUserArgs, opts ...pulumi.ResourceOption) (*RdbUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource RdbUser
	err := ctx.RegisterResource("scaleway:index/rdbUser:RdbUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdbUser gets an existing RdbUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdbUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdbUserState, opts ...pulumi.ResourceOption) (*RdbUser, error) {
	var resource RdbUser
	err := ctx.ReadResource("scaleway:index/rdbUser:RdbUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdbUser resources.
type rdbUserState struct {
	// UUID of the rdb instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the Database User.
	InstanceId *string `pulumi:"instanceId"`
	// Grant admin permissions to the Database User.
	IsAdmin *bool `pulumi:"isAdmin"`
	// Database User name.
	//
	// > **Important:** Updates to `name` will recreate the Database User.
	Name *string `pulumi:"name"`
	// Database User password.
	Password *string `pulumi:"password"`
	// The Scaleway region this resource resides in.
	Region *string `pulumi:"region"`
}

type RdbUserState struct {
	// UUID of the rdb instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the Database User.
	InstanceId pulumi.StringPtrInput
	// Grant admin permissions to the Database User.
	IsAdmin pulumi.BoolPtrInput
	// Database User name.
	//
	// > **Important:** Updates to `name` will recreate the Database User.
	Name pulumi.StringPtrInput
	// Database User password.
	Password pulumi.StringPtrInput
	// The Scaleway region this resource resides in.
	Region pulumi.StringPtrInput
}

func (RdbUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdbUserState)(nil)).Elem()
}

type rdbUserArgs struct {
	// UUID of the rdb instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the Database User.
	InstanceId string `pulumi:"instanceId"`
	// Grant admin permissions to the Database User.
	IsAdmin *bool `pulumi:"isAdmin"`
	// Database User name.
	//
	// > **Important:** Updates to `name` will recreate the Database User.
	Name *string `pulumi:"name"`
	// Database User password.
	Password string `pulumi:"password"`
	// The Scaleway region this resource resides in.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a RdbUser resource.
type RdbUserArgs struct {
	// UUID of the rdb instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the Database User.
	InstanceId pulumi.StringInput
	// Grant admin permissions to the Database User.
	IsAdmin pulumi.BoolPtrInput
	// Database User name.
	//
	// > **Important:** Updates to `name` will recreate the Database User.
	Name pulumi.StringPtrInput
	// Database User password.
	Password pulumi.StringInput
	// The Scaleway region this resource resides in.
	Region pulumi.StringPtrInput
}

func (RdbUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdbUserArgs)(nil)).Elem()
}

type RdbUserInput interface {
	pulumi.Input

	ToRdbUserOutput() RdbUserOutput
	ToRdbUserOutputWithContext(ctx context.Context) RdbUserOutput
}

func (*RdbUser) ElementType() reflect.Type {
	return reflect.TypeOf((**RdbUser)(nil)).Elem()
}

func (i *RdbUser) ToRdbUserOutput() RdbUserOutput {
	return i.ToRdbUserOutputWithContext(context.Background())
}

func (i *RdbUser) ToRdbUserOutputWithContext(ctx context.Context) RdbUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbUserOutput)
}

// RdbUserArrayInput is an input type that accepts RdbUserArray and RdbUserArrayOutput values.
// You can construct a concrete instance of `RdbUserArrayInput` via:
//
//	RdbUserArray{ RdbUserArgs{...} }
type RdbUserArrayInput interface {
	pulumi.Input

	ToRdbUserArrayOutput() RdbUserArrayOutput
	ToRdbUserArrayOutputWithContext(context.Context) RdbUserArrayOutput
}

type RdbUserArray []RdbUserInput

func (RdbUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdbUser)(nil)).Elem()
}

func (i RdbUserArray) ToRdbUserArrayOutput() RdbUserArrayOutput {
	return i.ToRdbUserArrayOutputWithContext(context.Background())
}

func (i RdbUserArray) ToRdbUserArrayOutputWithContext(ctx context.Context) RdbUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbUserArrayOutput)
}

// RdbUserMapInput is an input type that accepts RdbUserMap and RdbUserMapOutput values.
// You can construct a concrete instance of `RdbUserMapInput` via:
//
//	RdbUserMap{ "key": RdbUserArgs{...} }
type RdbUserMapInput interface {
	pulumi.Input

	ToRdbUserMapOutput() RdbUserMapOutput
	ToRdbUserMapOutputWithContext(context.Context) RdbUserMapOutput
}

type RdbUserMap map[string]RdbUserInput

func (RdbUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdbUser)(nil)).Elem()
}

func (i RdbUserMap) ToRdbUserMapOutput() RdbUserMapOutput {
	return i.ToRdbUserMapOutputWithContext(context.Background())
}

func (i RdbUserMap) ToRdbUserMapOutputWithContext(ctx context.Context) RdbUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbUserMapOutput)
}

type RdbUserOutput struct{ *pulumi.OutputState }

func (RdbUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdbUser)(nil)).Elem()
}

func (o RdbUserOutput) ToRdbUserOutput() RdbUserOutput {
	return o
}

func (o RdbUserOutput) ToRdbUserOutputWithContext(ctx context.Context) RdbUserOutput {
	return o
}

// UUID of the rdb instance.
//
// > **Important:** Updates to `instanceId` will recreate the Database User.
func (o RdbUserOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdbUser) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Grant admin permissions to the Database User.
func (o RdbUserOutput) IsAdmin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RdbUser) pulumi.BoolPtrOutput { return v.IsAdmin }).(pulumi.BoolPtrOutput)
}

// Database User name.
//
// > **Important:** Updates to `name` will recreate the Database User.
func (o RdbUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RdbUser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Database User password.
func (o RdbUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *RdbUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The Scaleway region this resource resides in.
func (o RdbUserOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RdbUser) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type RdbUserArrayOutput struct{ *pulumi.OutputState }

func (RdbUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdbUser)(nil)).Elem()
}

func (o RdbUserArrayOutput) ToRdbUserArrayOutput() RdbUserArrayOutput {
	return o
}

func (o RdbUserArrayOutput) ToRdbUserArrayOutputWithContext(ctx context.Context) RdbUserArrayOutput {
	return o
}

func (o RdbUserArrayOutput) Index(i pulumi.IntInput) RdbUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdbUser {
		return vs[0].([]*RdbUser)[vs[1].(int)]
	}).(RdbUserOutput)
}

type RdbUserMapOutput struct{ *pulumi.OutputState }

func (RdbUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdbUser)(nil)).Elem()
}

func (o RdbUserMapOutput) ToRdbUserMapOutput() RdbUserMapOutput {
	return o
}

func (o RdbUserMapOutput) ToRdbUserMapOutputWithContext(ctx context.Context) RdbUserMapOutput {
	return o
}

func (o RdbUserMapOutput) MapIndex(k pulumi.StringInput) RdbUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdbUser {
		return vs[0].(map[string]*RdbUser)[vs[1].(string)]
	}).(RdbUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdbUserInput)(nil)).Elem(), &RdbUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdbUserArrayInput)(nil)).Elem(), RdbUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdbUserMapInput)(nil)).Elem(), RdbUserMap{})
	pulumi.RegisterOutputType(RdbUserOutput{})
	pulumi.RegisterOutputType(RdbUserArrayOutput{})
	pulumi.RegisterOutputType(RdbUserMapOutput{})
}
