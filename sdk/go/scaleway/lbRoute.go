// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages Scaleway Load Balancer routes.
//
// For more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/how-to/create-manage-routes/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-route).
//
// ## Example Usage
//
// ### With SNI for direction to TCP backends
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ip01, err := scaleway.NewLbIp(ctx, "ip01", nil)
//			if err != nil {
//				return err
//			}
//			lb01, err := scaleway.NewLb(ctx, "lb01", &scaleway.LbArgs{
//				IpId: ip01.ID(),
//				Type: pulumi.String("lb-s"),
//			})
//			if err != nil {
//				return err
//			}
//			bkd01, err := scaleway.NewLbBackend(ctx, "bkd01", &scaleway.LbBackendArgs{
//				LbId:            lb01.ID(),
//				ForwardProtocol: pulumi.String("tcp"),
//				ForwardPort:     pulumi.Int(80),
//				ProxyProtocol:   pulumi.String("none"),
//			})
//			if err != nil {
//				return err
//			}
//			frt01, err := scaleway.NewLbFrontend(ctx, "frt01", &scaleway.LbFrontendArgs{
//				LbId:        lb01.ID(),
//				BackendId:   bkd01.ID(),
//				InboundPort: pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewLbRoute(ctx, "rt01", &scaleway.LbRouteArgs{
//				FrontendId: frt01.ID(),
//				BackendId:  bkd01.ID(),
//				MatchSni:   pulumi.String("sni.scaleway.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With host-header for direction to HTTP backends
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ip01, err := scaleway.NewLbIp(ctx, "ip01", nil)
//			if err != nil {
//				return err
//			}
//			lb01, err := scaleway.NewLb(ctx, "lb01", &scaleway.LbArgs{
//				IpId: ip01.ID(),
//				Type: pulumi.String("lb-s"),
//			})
//			if err != nil {
//				return err
//			}
//			bkd01, err := scaleway.NewLbBackend(ctx, "bkd01", &scaleway.LbBackendArgs{
//				LbId:            lb01.ID(),
//				ForwardProtocol: pulumi.String("http"),
//				ForwardPort:     pulumi.Int(80),
//				ProxyProtocol:   pulumi.String("none"),
//			})
//			if err != nil {
//				return err
//			}
//			frt01, err := scaleway.NewLbFrontend(ctx, "frt01", &scaleway.LbFrontendArgs{
//				LbId:        lb01.ID(),
//				BackendId:   bkd01.ID(),
//				InboundPort: pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewLbRoute(ctx, "rt01", &scaleway.LbRouteArgs{
//				FrontendId:      frt01.ID(),
//				BackendId:       bkd01.ID(),
//				MatchHostHeader: pulumi.String("host.scaleway.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With path-begin matching for HTTP backends
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ip, err := scaleway.NewLbIp(ctx, "ip", nil)
//			if err != nil {
//				return err
//			}
//			lb, err := scaleway.NewLb(ctx, "lb", &scaleway.LbArgs{
//				IpId: ip.ID(),
//				Type: pulumi.String("lb-s"),
//			})
//			if err != nil {
//				return err
//			}
//			app, err := scaleway.NewLbBackend(ctx, "app", &scaleway.LbBackendArgs{
//				LbId:            lb.ID(),
//				ForwardProtocol: pulumi.String("http"),
//				ForwardPort:     pulumi.Int(80),
//				ProxyProtocol:   pulumi.String("none"),
//			})
//			if err != nil {
//				return err
//			}
//			admin, err := scaleway.NewLbBackend(ctx, "admin", &scaleway.LbBackendArgs{
//				LbId:            lb.ID(),
//				ForwardProtocol: pulumi.String("http"),
//				ForwardPort:     pulumi.Int(8080),
//				ProxyProtocol:   pulumi.String("none"),
//			})
//			if err != nil {
//				return err
//			}
//			frontend, err := scaleway.NewLbFrontend(ctx, "frontend", &scaleway.LbFrontendArgs{
//				LbId:        lb.ID(),
//				BackendId:   app.ID(),
//				InboundPort: pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewLbRoute(ctx, "adminRoute", &scaleway.LbRouteArgs{
//				FrontendId:     frontend.ID(),
//				BackendId:      admin.ID(),
//				MatchPathBegin: pulumi.String("/admin"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewLbRoute(ctx, "defaultRoute", &scaleway.LbRouteArgs{
//				FrontendId:     frontend.ID(),
//				BackendId:      app.ID(),
//				MatchPathBegin: pulumi.String("/"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Load Balancer frontends can be imported using `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/lbRoute:LbRoute main fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type LbRoute struct {
	pulumi.CustomResourceState

	// The ID of the backend the route is associated with.
	BackendId pulumi.StringOutput `pulumi:"backendId"`
	// The date on which the route was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The ID of the frontend the route is associated with.
	FrontendId pulumi.StringOutput `pulumi:"frontendId"`
	// The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.
	// Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
	//
	// > **Important:** This field should be set for routes on HTTP Load Balancers.
	MatchHostHeader pulumi.StringPtrOutput `pulumi:"matchHostHeader"`
	// The value to match in the URL beginning path from an incoming request.
	// Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
	MatchPathBegin pulumi.StringPtrOutput `pulumi:"matchPathBegin"`
	// The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.
	// Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
	//
	// > **Important:** This field should be set for routes on TCP Load Balancers.
	MatchSni pulumi.StringPtrOutput `pulumi:"matchSni"`
	// If true, all subdomains will match.
	MatchSubdomains pulumi.BoolPtrOutput `pulumi:"matchSubdomains"`
	// The date on which the route was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewLbRoute registers a new resource with the given unique name, arguments, and options.
func NewLbRoute(ctx *pulumi.Context,
	name string, args *LbRouteArgs, opts ...pulumi.ResourceOption) (*LbRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackendId == nil {
		return nil, errors.New("invalid value for required argument 'BackendId'")
	}
	if args.FrontendId == nil {
		return nil, errors.New("invalid value for required argument 'FrontendId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LbRoute
	err := ctx.RegisterResource("scaleway:index/lbRoute:LbRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLbRoute gets an existing LbRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbRouteState, opts ...pulumi.ResourceOption) (*LbRoute, error) {
	var resource LbRoute
	err := ctx.ReadResource("scaleway:index/lbRoute:LbRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LbRoute resources.
type lbRouteState struct {
	// The ID of the backend the route is associated with.
	BackendId *string `pulumi:"backendId"`
	// The date on which the route was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The ID of the frontend the route is associated with.
	FrontendId *string `pulumi:"frontendId"`
	// The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.
	// Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
	//
	// > **Important:** This field should be set for routes on HTTP Load Balancers.
	MatchHostHeader *string `pulumi:"matchHostHeader"`
	// The value to match in the URL beginning path from an incoming request.
	// Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
	MatchPathBegin *string `pulumi:"matchPathBegin"`
	// The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.
	// Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
	//
	// > **Important:** This field should be set for routes on TCP Load Balancers.
	MatchSni *string `pulumi:"matchSni"`
	// If true, all subdomains will match.
	MatchSubdomains *bool `pulumi:"matchSubdomains"`
	// The date on which the route was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type LbRouteState struct {
	// The ID of the backend the route is associated with.
	BackendId pulumi.StringPtrInput
	// The date on which the route was created.
	CreatedAt pulumi.StringPtrInput
	// The ID of the frontend the route is associated with.
	FrontendId pulumi.StringPtrInput
	// The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.
	// Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
	//
	// > **Important:** This field should be set for routes on HTTP Load Balancers.
	MatchHostHeader pulumi.StringPtrInput
	// The value to match in the URL beginning path from an incoming request.
	// Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
	MatchPathBegin pulumi.StringPtrInput
	// The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.
	// Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
	//
	// > **Important:** This field should be set for routes on TCP Load Balancers.
	MatchSni pulumi.StringPtrInput
	// If true, all subdomains will match.
	MatchSubdomains pulumi.BoolPtrInput
	// The date on which the route was last updated.
	UpdatedAt pulumi.StringPtrInput
}

func (LbRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbRouteState)(nil)).Elem()
}

type lbRouteArgs struct {
	// The ID of the backend the route is associated with.
	BackendId string `pulumi:"backendId"`
	// The ID of the frontend the route is associated with.
	FrontendId string `pulumi:"frontendId"`
	// The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.
	// Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
	//
	// > **Important:** This field should be set for routes on HTTP Load Balancers.
	MatchHostHeader *string `pulumi:"matchHostHeader"`
	// The value to match in the URL beginning path from an incoming request.
	// Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
	MatchPathBegin *string `pulumi:"matchPathBegin"`
	// The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.
	// Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
	//
	// > **Important:** This field should be set for routes on TCP Load Balancers.
	MatchSni *string `pulumi:"matchSni"`
	// If true, all subdomains will match.
	MatchSubdomains *bool `pulumi:"matchSubdomains"`
}

// The set of arguments for constructing a LbRoute resource.
type LbRouteArgs struct {
	// The ID of the backend the route is associated with.
	BackendId pulumi.StringInput
	// The ID of the frontend the route is associated with.
	FrontendId pulumi.StringInput
	// The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.
	// Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
	//
	// > **Important:** This field should be set for routes on HTTP Load Balancers.
	MatchHostHeader pulumi.StringPtrInput
	// The value to match in the URL beginning path from an incoming request.
	// Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
	MatchPathBegin pulumi.StringPtrInput
	// The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.
	// Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
	//
	// > **Important:** This field should be set for routes on TCP Load Balancers.
	MatchSni pulumi.StringPtrInput
	// If true, all subdomains will match.
	MatchSubdomains pulumi.BoolPtrInput
}

func (LbRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbRouteArgs)(nil)).Elem()
}

type LbRouteInput interface {
	pulumi.Input

	ToLbRouteOutput() LbRouteOutput
	ToLbRouteOutputWithContext(ctx context.Context) LbRouteOutput
}

func (*LbRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**LbRoute)(nil)).Elem()
}

func (i *LbRoute) ToLbRouteOutput() LbRouteOutput {
	return i.ToLbRouteOutputWithContext(context.Background())
}

func (i *LbRoute) ToLbRouteOutputWithContext(ctx context.Context) LbRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbRouteOutput)
}

// LbRouteArrayInput is an input type that accepts LbRouteArray and LbRouteArrayOutput values.
// You can construct a concrete instance of `LbRouteArrayInput` via:
//
//	LbRouteArray{ LbRouteArgs{...} }
type LbRouteArrayInput interface {
	pulumi.Input

	ToLbRouteArrayOutput() LbRouteArrayOutput
	ToLbRouteArrayOutputWithContext(context.Context) LbRouteArrayOutput
}

type LbRouteArray []LbRouteInput

func (LbRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbRoute)(nil)).Elem()
}

func (i LbRouteArray) ToLbRouteArrayOutput() LbRouteArrayOutput {
	return i.ToLbRouteArrayOutputWithContext(context.Background())
}

func (i LbRouteArray) ToLbRouteArrayOutputWithContext(ctx context.Context) LbRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbRouteArrayOutput)
}

// LbRouteMapInput is an input type that accepts LbRouteMap and LbRouteMapOutput values.
// You can construct a concrete instance of `LbRouteMapInput` via:
//
//	LbRouteMap{ "key": LbRouteArgs{...} }
type LbRouteMapInput interface {
	pulumi.Input

	ToLbRouteMapOutput() LbRouteMapOutput
	ToLbRouteMapOutputWithContext(context.Context) LbRouteMapOutput
}

type LbRouteMap map[string]LbRouteInput

func (LbRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbRoute)(nil)).Elem()
}

func (i LbRouteMap) ToLbRouteMapOutput() LbRouteMapOutput {
	return i.ToLbRouteMapOutputWithContext(context.Background())
}

func (i LbRouteMap) ToLbRouteMapOutputWithContext(ctx context.Context) LbRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbRouteMapOutput)
}

type LbRouteOutput struct{ *pulumi.OutputState }

func (LbRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbRoute)(nil)).Elem()
}

func (o LbRouteOutput) ToLbRouteOutput() LbRouteOutput {
	return o
}

func (o LbRouteOutput) ToLbRouteOutputWithContext(ctx context.Context) LbRouteOutput {
	return o
}

// The ID of the backend the route is associated with.
func (o LbRouteOutput) BackendId() pulumi.StringOutput {
	return o.ApplyT(func(v *LbRoute) pulumi.StringOutput { return v.BackendId }).(pulumi.StringOutput)
}

// The date on which the route was created.
func (o LbRouteOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *LbRoute) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the frontend the route is associated with.
func (o LbRouteOutput) FrontendId() pulumi.StringOutput {
	return o.ApplyT(func(v *LbRoute) pulumi.StringOutput { return v.FrontendId }).(pulumi.StringOutput)
}

// The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.
// Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
//
// > **Important:** This field should be set for routes on HTTP Load Balancers.
func (o LbRouteOutput) MatchHostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbRoute) pulumi.StringPtrOutput { return v.MatchHostHeader }).(pulumi.StringPtrOutput)
}

// The value to match in the URL beginning path from an incoming request.
// Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
func (o LbRouteOutput) MatchPathBegin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbRoute) pulumi.StringPtrOutput { return v.MatchPathBegin }).(pulumi.StringPtrOutput)
}

// The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.
// Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
//
// > **Important:** This field should be set for routes on TCP Load Balancers.
func (o LbRouteOutput) MatchSni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbRoute) pulumi.StringPtrOutput { return v.MatchSni }).(pulumi.StringPtrOutput)
}

// If true, all subdomains will match.
func (o LbRouteOutput) MatchSubdomains() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LbRoute) pulumi.BoolPtrOutput { return v.MatchSubdomains }).(pulumi.BoolPtrOutput)
}

// The date on which the route was last updated.
func (o LbRouteOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *LbRoute) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type LbRouteArrayOutput struct{ *pulumi.OutputState }

func (LbRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbRoute)(nil)).Elem()
}

func (o LbRouteArrayOutput) ToLbRouteArrayOutput() LbRouteArrayOutput {
	return o
}

func (o LbRouteArrayOutput) ToLbRouteArrayOutputWithContext(ctx context.Context) LbRouteArrayOutput {
	return o
}

func (o LbRouteArrayOutput) Index(i pulumi.IntInput) LbRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LbRoute {
		return vs[0].([]*LbRoute)[vs[1].(int)]
	}).(LbRouteOutput)
}

type LbRouteMapOutput struct{ *pulumi.OutputState }

func (LbRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbRoute)(nil)).Elem()
}

func (o LbRouteMapOutput) ToLbRouteMapOutput() LbRouteMapOutput {
	return o
}

func (o LbRouteMapOutput) ToLbRouteMapOutputWithContext(ctx context.Context) LbRouteMapOutput {
	return o
}

func (o LbRouteMapOutput) MapIndex(k pulumi.StringInput) LbRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LbRoute {
		return vs[0].(map[string]*LbRoute)[vs[1].(string)]
	}).(LbRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LbRouteInput)(nil)).Elem(), &LbRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbRouteArrayInput)(nil)).Elem(), LbRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbRouteMapInput)(nil)).Elem(), LbRouteMap{})
	pulumi.RegisterOutputType(LbRouteOutput{})
	pulumi.RegisterOutputType(LbRouteArrayOutput{})
	pulumi.RegisterOutputType(LbRouteMapOutput{})
}
