// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages Scaleway Load Balancers.
//
// For more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/concepts/#load-balancers) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-list-load-balancers).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := scaleway.NewLbIp(ctx, "main", &scaleway.LbIpArgs{
//				Zone: pulumi.String("fr-par-1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewLb(ctx, "base", &scaleway.LbArgs{
//				IpIds: pulumi.StringArray{
//					main.ID(),
//				},
//				Zone: main.Zone,
//				Type: pulumi.String("LB-S"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Private LB
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewLb(ctx, "base", &scaleway.LbArgs{
//				AssignFlexibleIp: pulumi.Bool(false),
//				Type:             pulumi.String("LB-S"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With IPv6
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			v4, err := scaleway.NewLbIp(ctx, "v4", nil)
//			if err != nil {
//				return err
//			}
//			v6, err := scaleway.NewLbIp(ctx, "v6", &scaleway.LbIpArgs{
//				IsIpv6: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewLb(ctx, "main", &scaleway.LbArgs{
//				IpIds: pulumi.StringArray{
//					v4.ID(),
//					v6.ID(),
//				},
//				Type: pulumi.String("LB-S"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Multiple configurations
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// ## IP for Public Gateway
//			mainVpcPublicGatewayIp, err := scaleway.NewVpcPublicGatewayIp(ctx, "mainVpcPublicGatewayIp", nil)
//			if err != nil {
//				return err
//			}
//			// ## Scaleway Private Network
//			mainVpcPrivateNetwork, err := scaleway.NewVpcPrivateNetwork(ctx, "mainVpcPrivateNetwork", nil)
//			if err != nil {
//				return err
//			}
//			// ## VPC Public Gateway Network
//			mainVpcPublicGateway, err := scaleway.NewVpcPublicGateway(ctx, "mainVpcPublicGateway", &scaleway.VpcPublicGatewayArgs{
//				Type: pulumi.String("VPC-GW-S"),
//				IpId: mainVpcPublicGatewayIp.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// ## VPC Public Gateway Network DHCP config
//			mainVpcPublicGatewayDhcp, err := scaleway.NewVpcPublicGatewayDhcp(ctx, "mainVpcPublicGatewayDhcp", &scaleway.VpcPublicGatewayDhcpArgs{
//				Subnet: pulumi.String("10.0.0.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			// ## VPC Gateway Network
//			_, err = scaleway.NewVpcGatewayNetwork(ctx, "mainVpcGatewayNetwork", &scaleway.VpcGatewayNetworkArgs{
//				GatewayId:        mainVpcPublicGateway.ID(),
//				PrivateNetworkId: mainVpcPrivateNetwork.ID(),
//				DhcpId:           mainVpcPublicGatewayDhcp.ID(),
//				CleanupDhcp:      pulumi.Bool(true),
//				EnableMasquerade: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			// ## Scaleway Instance
//			_, err = scaleway.NewInstanceServer(ctx, "mainInstanceServer", &scaleway.InstanceServerArgs{
//				Type:       pulumi.String("DEV1-S"),
//				Image:      pulumi.String("debian_bullseye"),
//				EnableIpv6: pulumi.Bool(false),
//				PrivateNetworks: scaleway.InstanceServerPrivateNetworkArray{
//					&scaleway.InstanceServerPrivateNetworkArgs{
//						PnId: mainVpcPrivateNetwork.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// ## IP for LB IP
//			mainLbIp, err := scaleway.NewLbIp(ctx, "mainLbIp", nil)
//			if err != nil {
//				return err
//			}
//			// ## Scaleway Private Network
//			_, err = scaleway.NewVpcPrivateNetwork(ctx, "mainIndex/vpcPrivateNetworkVpcPrivateNetwork", nil)
//			if err != nil {
//				return err
//			}
//			// ## Scaleway Load Balancer
//			_, err = scaleway.NewLb(ctx, "mainLb", &scaleway.LbArgs{
//				IpId: mainLbIp.ID(),
//				Type: pulumi.String("LB-S"),
//				PrivateNetworks: scaleway.LbPrivateNetworkArray{
//					&scaleway.LbPrivateNetworkArgs{
//						PrivateNetworkId: mainVpcPrivateNetwork.ID(),
//						DhcpConfig:       pulumi.Bool(true),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				mainVpcPublicGateway,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Migration
//
// In order to migrate to other Load Balancer types, you can check upwards or downwards migration via our CLI `scw lb lb-types list`.
// This change will not recreate your Load Balancer.
//
// Please check our [documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-migrate-a-load-balancer) for further details
//
// ## IP ID
//
// Since v1.15.0, `ipId` is a required field. This means that now a separate `LbIp` is required.
// When importing, the IP needs to be imported as well as the Load Balancer.
// When upgrading to v1.15.0, you will need to create a new `LbIp` resource and import it.
//
// For instance, if you had the following:
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewLb(ctx, "main", &scaleway.LbArgs{
//				Type: pulumi.String("LB-S"),
//				Zone: pulumi.String("fr-par-1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// You will need to update it to:
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mainLbIp, err := scaleway.NewLbIp(ctx, "mainLbIp", nil)
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewLb(ctx, "mainLb", &scaleway.LbArgs{
//				IpId:      mainLbIp.ID(),
//				Zone:      pulumi.String("fr-par-1"),
//				Type:      pulumi.String("LB-S"),
//				ReleaseIp: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Load Balancers can be imported using `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/lb:Lb main fr-par-1/11111111-1111-1111-1111-111111111111
// ```
//
// Be aware that you will also need to import the `scaleway_lb_ip` resource.
type Lb struct {
	pulumi.CustomResourceState

	// Defines whether to automatically assign a flexible public IPv4 to the Load Balancer.
	AssignFlexibleIp pulumi.BoolPtrOutput `pulumi:"assignFlexibleIp"`
	// Defines whether to automatically assign a flexible public IPv6 to the Load Balancer.
	AssignFlexibleIpv6 pulumi.BoolPtrOutput `pulumi:"assignFlexibleIpv6"`
	// The description of the Load Balancer.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Load Balancer public IPv4 address.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// The ID of the associated Load Balancer IP. See below.
	//
	// > **Important:** Updates to `ipId` will recreate the Load Balancer.
	//
	// Deprecated: Please use ip_ids
	IpId pulumi.StringOutput `pulumi:"ipId"`
	// The List of IP IDs to attach to the Load Balancer.
	IpIds pulumi.StringArrayOutput `pulumi:"ipIds"`
	// The Load Balancer public IPv6 address.
	Ipv6Address pulumi.StringOutput `pulumi:"ipv6Address"`
	// The name of the Load Balancer.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Organization ID the Load Balancer is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// List of private network to connect with your load balancer
	PrivateNetworks LbPrivateNetworkArrayOutput `pulumi:"privateNetworks"`
	// `projectId`) The ID of the Project the Load Balancer is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region of the resource
	Region pulumi.StringOutput `pulumi:"region"`
	// The `releaseIp` allow the release of the IP address associated with the Load Balancer.
	//
	// Deprecated: The resource ip will be destroyed by it's own resource. Please set this to `false`
	ReleaseIp pulumi.BoolPtrOutput `pulumi:"releaseIp"`
	// Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-create-a-load-balancer).
	SslCompatibilityLevel pulumi.StringPtrOutput `pulumi:"sslCompatibilityLevel"`
	// The tags associated with the Load Balancer.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The type of the Load Balancer. Please check the migration section to upgrade the type.
	Type pulumi.StringOutput `pulumi:"type"`
	// `zone`) The zone of the Load Balancer.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewLb registers a new resource with the given unique name, arguments, and options.
func NewLb(ctx *pulumi.Context,
	name string, args *LbArgs, opts ...pulumi.ResourceOption) (*Lb, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Lb
	err := ctx.RegisterResource("scaleway:index/lb:Lb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLb gets an existing Lb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbState, opts ...pulumi.ResourceOption) (*Lb, error) {
	var resource Lb
	err := ctx.ReadResource("scaleway:index/lb:Lb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Lb resources.
type lbState struct {
	// Defines whether to automatically assign a flexible public IPv4 to the Load Balancer.
	AssignFlexibleIp *bool `pulumi:"assignFlexibleIp"`
	// Defines whether to automatically assign a flexible public IPv6 to the Load Balancer.
	AssignFlexibleIpv6 *bool `pulumi:"assignFlexibleIpv6"`
	// The description of the Load Balancer.
	Description *string `pulumi:"description"`
	// The Load Balancer public IPv4 address.
	IpAddress *string `pulumi:"ipAddress"`
	// The ID of the associated Load Balancer IP. See below.
	//
	// > **Important:** Updates to `ipId` will recreate the Load Balancer.
	//
	// Deprecated: Please use ip_ids
	IpId *string `pulumi:"ipId"`
	// The List of IP IDs to attach to the Load Balancer.
	IpIds []string `pulumi:"ipIds"`
	// The Load Balancer public IPv6 address.
	Ipv6Address *string `pulumi:"ipv6Address"`
	// The name of the Load Balancer.
	Name *string `pulumi:"name"`
	// The ID of the Organization ID the Load Balancer is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// List of private network to connect with your load balancer
	PrivateNetworks []LbPrivateNetwork `pulumi:"privateNetworks"`
	// `projectId`) The ID of the Project the Load Balancer is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The region of the resource
	Region *string `pulumi:"region"`
	// The `releaseIp` allow the release of the IP address associated with the Load Balancer.
	//
	// Deprecated: The resource ip will be destroyed by it's own resource. Please set this to `false`
	ReleaseIp *bool `pulumi:"releaseIp"`
	// Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-create-a-load-balancer).
	SslCompatibilityLevel *string `pulumi:"sslCompatibilityLevel"`
	// The tags associated with the Load Balancer.
	Tags []string `pulumi:"tags"`
	// The type of the Load Balancer. Please check the migration section to upgrade the type.
	Type *string `pulumi:"type"`
	// `zone`) The zone of the Load Balancer.
	Zone *string `pulumi:"zone"`
}

type LbState struct {
	// Defines whether to automatically assign a flexible public IPv4 to the Load Balancer.
	AssignFlexibleIp pulumi.BoolPtrInput
	// Defines whether to automatically assign a flexible public IPv6 to the Load Balancer.
	AssignFlexibleIpv6 pulumi.BoolPtrInput
	// The description of the Load Balancer.
	Description pulumi.StringPtrInput
	// The Load Balancer public IPv4 address.
	IpAddress pulumi.StringPtrInput
	// The ID of the associated Load Balancer IP. See below.
	//
	// > **Important:** Updates to `ipId` will recreate the Load Balancer.
	//
	// Deprecated: Please use ip_ids
	IpId pulumi.StringPtrInput
	// The List of IP IDs to attach to the Load Balancer.
	IpIds pulumi.StringArrayInput
	// The Load Balancer public IPv6 address.
	Ipv6Address pulumi.StringPtrInput
	// The name of the Load Balancer.
	Name pulumi.StringPtrInput
	// The ID of the Organization ID the Load Balancer is associated with.
	OrganizationId pulumi.StringPtrInput
	// List of private network to connect with your load balancer
	PrivateNetworks LbPrivateNetworkArrayInput
	// `projectId`) The ID of the Project the Load Balancer is associated with.
	ProjectId pulumi.StringPtrInput
	// The region of the resource
	Region pulumi.StringPtrInput
	// The `releaseIp` allow the release of the IP address associated with the Load Balancer.
	//
	// Deprecated: The resource ip will be destroyed by it's own resource. Please set this to `false`
	ReleaseIp pulumi.BoolPtrInput
	// Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-create-a-load-balancer).
	SslCompatibilityLevel pulumi.StringPtrInput
	// The tags associated with the Load Balancer.
	Tags pulumi.StringArrayInput
	// The type of the Load Balancer. Please check the migration section to upgrade the type.
	Type pulumi.StringPtrInput
	// `zone`) The zone of the Load Balancer.
	Zone pulumi.StringPtrInput
}

func (LbState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbState)(nil)).Elem()
}

type lbArgs struct {
	// Defines whether to automatically assign a flexible public IPv4 to the Load Balancer.
	AssignFlexibleIp *bool `pulumi:"assignFlexibleIp"`
	// Defines whether to automatically assign a flexible public IPv6 to the Load Balancer.
	AssignFlexibleIpv6 *bool `pulumi:"assignFlexibleIpv6"`
	// The description of the Load Balancer.
	Description *string `pulumi:"description"`
	// The ID of the associated Load Balancer IP. See below.
	//
	// > **Important:** Updates to `ipId` will recreate the Load Balancer.
	//
	// Deprecated: Please use ip_ids
	IpId *string `pulumi:"ipId"`
	// The List of IP IDs to attach to the Load Balancer.
	IpIds []string `pulumi:"ipIds"`
	// The name of the Load Balancer.
	Name *string `pulumi:"name"`
	// List of private network to connect with your load balancer
	PrivateNetworks []LbPrivateNetwork `pulumi:"privateNetworks"`
	// `projectId`) The ID of the Project the Load Balancer is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The `releaseIp` allow the release of the IP address associated with the Load Balancer.
	//
	// Deprecated: The resource ip will be destroyed by it's own resource. Please set this to `false`
	ReleaseIp *bool `pulumi:"releaseIp"`
	// Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-create-a-load-balancer).
	SslCompatibilityLevel *string `pulumi:"sslCompatibilityLevel"`
	// The tags associated with the Load Balancer.
	Tags []string `pulumi:"tags"`
	// The type of the Load Balancer. Please check the migration section to upgrade the type.
	Type string `pulumi:"type"`
	// `zone`) The zone of the Load Balancer.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Lb resource.
type LbArgs struct {
	// Defines whether to automatically assign a flexible public IPv4 to the Load Balancer.
	AssignFlexibleIp pulumi.BoolPtrInput
	// Defines whether to automatically assign a flexible public IPv6 to the Load Balancer.
	AssignFlexibleIpv6 pulumi.BoolPtrInput
	// The description of the Load Balancer.
	Description pulumi.StringPtrInput
	// The ID of the associated Load Balancer IP. See below.
	//
	// > **Important:** Updates to `ipId` will recreate the Load Balancer.
	//
	// Deprecated: Please use ip_ids
	IpId pulumi.StringPtrInput
	// The List of IP IDs to attach to the Load Balancer.
	IpIds pulumi.StringArrayInput
	// The name of the Load Balancer.
	Name pulumi.StringPtrInput
	// List of private network to connect with your load balancer
	PrivateNetworks LbPrivateNetworkArrayInput
	// `projectId`) The ID of the Project the Load Balancer is associated with.
	ProjectId pulumi.StringPtrInput
	// The `releaseIp` allow the release of the IP address associated with the Load Balancer.
	//
	// Deprecated: The resource ip will be destroyed by it's own resource. Please set this to `false`
	ReleaseIp pulumi.BoolPtrInput
	// Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-create-a-load-balancer).
	SslCompatibilityLevel pulumi.StringPtrInput
	// The tags associated with the Load Balancer.
	Tags pulumi.StringArrayInput
	// The type of the Load Balancer. Please check the migration section to upgrade the type.
	Type pulumi.StringInput
	// `zone`) The zone of the Load Balancer.
	Zone pulumi.StringPtrInput
}

func (LbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbArgs)(nil)).Elem()
}

type LbInput interface {
	pulumi.Input

	ToLbOutput() LbOutput
	ToLbOutputWithContext(ctx context.Context) LbOutput
}

func (*Lb) ElementType() reflect.Type {
	return reflect.TypeOf((**Lb)(nil)).Elem()
}

func (i *Lb) ToLbOutput() LbOutput {
	return i.ToLbOutputWithContext(context.Background())
}

func (i *Lb) ToLbOutputWithContext(ctx context.Context) LbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbOutput)
}

// LbArrayInput is an input type that accepts LbArray and LbArrayOutput values.
// You can construct a concrete instance of `LbArrayInput` via:
//
//	LbArray{ LbArgs{...} }
type LbArrayInput interface {
	pulumi.Input

	ToLbArrayOutput() LbArrayOutput
	ToLbArrayOutputWithContext(context.Context) LbArrayOutput
}

type LbArray []LbInput

func (LbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Lb)(nil)).Elem()
}

func (i LbArray) ToLbArrayOutput() LbArrayOutput {
	return i.ToLbArrayOutputWithContext(context.Background())
}

func (i LbArray) ToLbArrayOutputWithContext(ctx context.Context) LbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbArrayOutput)
}

// LbMapInput is an input type that accepts LbMap and LbMapOutput values.
// You can construct a concrete instance of `LbMapInput` via:
//
//	LbMap{ "key": LbArgs{...} }
type LbMapInput interface {
	pulumi.Input

	ToLbMapOutput() LbMapOutput
	ToLbMapOutputWithContext(context.Context) LbMapOutput
}

type LbMap map[string]LbInput

func (LbMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Lb)(nil)).Elem()
}

func (i LbMap) ToLbMapOutput() LbMapOutput {
	return i.ToLbMapOutputWithContext(context.Background())
}

func (i LbMap) ToLbMapOutputWithContext(ctx context.Context) LbMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbMapOutput)
}

type LbOutput struct{ *pulumi.OutputState }

func (LbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Lb)(nil)).Elem()
}

func (o LbOutput) ToLbOutput() LbOutput {
	return o
}

func (o LbOutput) ToLbOutputWithContext(ctx context.Context) LbOutput {
	return o
}

// Defines whether to automatically assign a flexible public IPv4 to the Load Balancer.
func (o LbOutput) AssignFlexibleIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Lb) pulumi.BoolPtrOutput { return v.AssignFlexibleIp }).(pulumi.BoolPtrOutput)
}

// Defines whether to automatically assign a flexible public IPv6 to the Load Balancer.
func (o LbOutput) AssignFlexibleIpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Lb) pulumi.BoolPtrOutput { return v.AssignFlexibleIpv6 }).(pulumi.BoolPtrOutput)
}

// The description of the Load Balancer.
func (o LbOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Load Balancer public IPv4 address.
func (o LbOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// The ID of the associated Load Balancer IP. See below.
//
// > **Important:** Updates to `ipId` will recreate the Load Balancer.
//
// Deprecated: Please use ip_ids
func (o LbOutput) IpId() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.IpId }).(pulumi.StringOutput)
}

// The List of IP IDs to attach to the Load Balancer.
func (o LbOutput) IpIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringArrayOutput { return v.IpIds }).(pulumi.StringArrayOutput)
}

// The Load Balancer public IPv6 address.
func (o LbOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.Ipv6Address }).(pulumi.StringOutput)
}

// The name of the Load Balancer.
func (o LbOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Organization ID the Load Balancer is associated with.
func (o LbOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// List of private network to connect with your load balancer
func (o LbOutput) PrivateNetworks() LbPrivateNetworkArrayOutput {
	return o.ApplyT(func(v *Lb) LbPrivateNetworkArrayOutput { return v.PrivateNetworks }).(LbPrivateNetworkArrayOutput)
}

// `projectId`) The ID of the Project the Load Balancer is associated with.
func (o LbOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The region of the resource
func (o LbOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The `releaseIp` allow the release of the IP address associated with the Load Balancer.
//
// Deprecated: The resource ip will be destroyed by it's own resource. Please set this to `false`
func (o LbOutput) ReleaseIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Lb) pulumi.BoolPtrOutput { return v.ReleaseIp }).(pulumi.BoolPtrOutput)
}

// Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-create-a-load-balancer).
func (o LbOutput) SslCompatibilityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringPtrOutput { return v.SslCompatibilityLevel }).(pulumi.StringPtrOutput)
}

// The tags associated with the Load Balancer.
func (o LbOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The type of the Load Balancer. Please check the migration section to upgrade the type.
func (o LbOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// `zone`) The zone of the Load Balancer.
func (o LbOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type LbArrayOutput struct{ *pulumi.OutputState }

func (LbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Lb)(nil)).Elem()
}

func (o LbArrayOutput) ToLbArrayOutput() LbArrayOutput {
	return o
}

func (o LbArrayOutput) ToLbArrayOutputWithContext(ctx context.Context) LbArrayOutput {
	return o
}

func (o LbArrayOutput) Index(i pulumi.IntInput) LbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Lb {
		return vs[0].([]*Lb)[vs[1].(int)]
	}).(LbOutput)
}

type LbMapOutput struct{ *pulumi.OutputState }

func (LbMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Lb)(nil)).Elem()
}

func (o LbMapOutput) ToLbMapOutput() LbMapOutput {
	return o
}

func (o LbMapOutput) ToLbMapOutputWithContext(ctx context.Context) LbMapOutput {
	return o
}

func (o LbMapOutput) MapIndex(k pulumi.StringInput) LbOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Lb {
		return vs[0].(map[string]*Lb)[vs[1].(string)]
	}).(LbOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LbInput)(nil)).Elem(), &Lb{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbArrayInput)(nil)).Elem(), LbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbMapInput)(nil)).Elem(), LbMap{})
	pulumi.RegisterOutputType(LbOutput{})
	pulumi.RegisterOutputType(LbArrayOutput{})
	pulumi.RegisterOutputType(LbMapOutput{})
}
