// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages blocklisted email addresses for a Scaleway Transactional Email Domain.
// For more information refer to the [API documentation](https://www.scaleway.com/en/developers/api/transactional-email/#post-transactional-email-v1alpha1-regions-region-blocklists).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewTemBlockedList(ctx, "test", &scaleway.TemBlockedListArgs{
//				DomainId: pulumi.String("fr-par/12345678-1234-1234-1234-123456789abc"),
//				Email:    pulumi.String("spam@example.com"),
//				Reason:   pulumi.String("Spam detected"),
//				Region:   pulumi.String("fr-par"),
//				Type:     pulumi.String("mailbox_full"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Blocklists can be imported using the `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/temBlockedList:TemBlockedList test fr-par/11111111-1111-1111-1111-111111111111
// ```
type TemBlockedList struct {
	pulumi.CustomResourceState

	// The ID of the domain affected by the blocklist. Must be in the format `{region}/{domain_id}`.
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// The email address to block.
	Email pulumi.StringOutput `pulumi:"email"`
	// The ID of the project this blocklist belongs to. Defaults to the provider's project ID.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Reason for blocking the email address.
	Reason pulumi.StringPtrOutput `pulumi:"reason"`
	// The region in which the blocklist is created. Defaults to the provider's region.
	Region pulumi.StringOutput `pulumi:"region"`
	// Type of the blocklist. Possible values are:
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewTemBlockedList registers a new resource with the given unique name, arguments, and options.
func NewTemBlockedList(ctx *pulumi.Context,
	name string, args *TemBlockedListArgs, opts ...pulumi.ResourceOption) (*TemBlockedList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainId == nil {
		return nil, errors.New("invalid value for required argument 'DomainId'")
	}
	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TemBlockedList
	err := ctx.RegisterResource("scaleway:index/temBlockedList:TemBlockedList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemBlockedList gets an existing TemBlockedList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemBlockedList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemBlockedListState, opts ...pulumi.ResourceOption) (*TemBlockedList, error) {
	var resource TemBlockedList
	err := ctx.ReadResource("scaleway:index/temBlockedList:TemBlockedList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TemBlockedList resources.
type temBlockedListState struct {
	// The ID of the domain affected by the blocklist. Must be in the format `{region}/{domain_id}`.
	DomainId *string `pulumi:"domainId"`
	// The email address to block.
	Email *string `pulumi:"email"`
	// The ID of the project this blocklist belongs to. Defaults to the provider's project ID.
	ProjectId *string `pulumi:"projectId"`
	// Reason for blocking the email address.
	Reason *string `pulumi:"reason"`
	// The region in which the blocklist is created. Defaults to the provider's region.
	Region *string `pulumi:"region"`
	// Type of the blocklist. Possible values are:
	Type *string `pulumi:"type"`
}

type TemBlockedListState struct {
	// The ID of the domain affected by the blocklist. Must be in the format `{region}/{domain_id}`.
	DomainId pulumi.StringPtrInput
	// The email address to block.
	Email pulumi.StringPtrInput
	// The ID of the project this blocklist belongs to. Defaults to the provider's project ID.
	ProjectId pulumi.StringPtrInput
	// Reason for blocking the email address.
	Reason pulumi.StringPtrInput
	// The region in which the blocklist is created. Defaults to the provider's region.
	Region pulumi.StringPtrInput
	// Type of the blocklist. Possible values are:
	Type pulumi.StringPtrInput
}

func (TemBlockedListState) ElementType() reflect.Type {
	return reflect.TypeOf((*temBlockedListState)(nil)).Elem()
}

type temBlockedListArgs struct {
	// The ID of the domain affected by the blocklist. Must be in the format `{region}/{domain_id}`.
	DomainId string `pulumi:"domainId"`
	// The email address to block.
	Email string `pulumi:"email"`
	// The ID of the project this blocklist belongs to. Defaults to the provider's project ID.
	ProjectId *string `pulumi:"projectId"`
	// Reason for blocking the email address.
	Reason *string `pulumi:"reason"`
	// The region in which the blocklist is created. Defaults to the provider's region.
	Region *string `pulumi:"region"`
	// Type of the blocklist. Possible values are:
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a TemBlockedList resource.
type TemBlockedListArgs struct {
	// The ID of the domain affected by the blocklist. Must be in the format `{region}/{domain_id}`.
	DomainId pulumi.StringInput
	// The email address to block.
	Email pulumi.StringInput
	// The ID of the project this blocklist belongs to. Defaults to the provider's project ID.
	ProjectId pulumi.StringPtrInput
	// Reason for blocking the email address.
	Reason pulumi.StringPtrInput
	// The region in which the blocklist is created. Defaults to the provider's region.
	Region pulumi.StringPtrInput
	// Type of the blocklist. Possible values are:
	Type pulumi.StringInput
}

func (TemBlockedListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*temBlockedListArgs)(nil)).Elem()
}

type TemBlockedListInput interface {
	pulumi.Input

	ToTemBlockedListOutput() TemBlockedListOutput
	ToTemBlockedListOutputWithContext(ctx context.Context) TemBlockedListOutput
}

func (*TemBlockedList) ElementType() reflect.Type {
	return reflect.TypeOf((**TemBlockedList)(nil)).Elem()
}

func (i *TemBlockedList) ToTemBlockedListOutput() TemBlockedListOutput {
	return i.ToTemBlockedListOutputWithContext(context.Background())
}

func (i *TemBlockedList) ToTemBlockedListOutputWithContext(ctx context.Context) TemBlockedListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemBlockedListOutput)
}

// TemBlockedListArrayInput is an input type that accepts TemBlockedListArray and TemBlockedListArrayOutput values.
// You can construct a concrete instance of `TemBlockedListArrayInput` via:
//
//	TemBlockedListArray{ TemBlockedListArgs{...} }
type TemBlockedListArrayInput interface {
	pulumi.Input

	ToTemBlockedListArrayOutput() TemBlockedListArrayOutput
	ToTemBlockedListArrayOutputWithContext(context.Context) TemBlockedListArrayOutput
}

type TemBlockedListArray []TemBlockedListInput

func (TemBlockedListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TemBlockedList)(nil)).Elem()
}

func (i TemBlockedListArray) ToTemBlockedListArrayOutput() TemBlockedListArrayOutput {
	return i.ToTemBlockedListArrayOutputWithContext(context.Background())
}

func (i TemBlockedListArray) ToTemBlockedListArrayOutputWithContext(ctx context.Context) TemBlockedListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemBlockedListArrayOutput)
}

// TemBlockedListMapInput is an input type that accepts TemBlockedListMap and TemBlockedListMapOutput values.
// You can construct a concrete instance of `TemBlockedListMapInput` via:
//
//	TemBlockedListMap{ "key": TemBlockedListArgs{...} }
type TemBlockedListMapInput interface {
	pulumi.Input

	ToTemBlockedListMapOutput() TemBlockedListMapOutput
	ToTemBlockedListMapOutputWithContext(context.Context) TemBlockedListMapOutput
}

type TemBlockedListMap map[string]TemBlockedListInput

func (TemBlockedListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TemBlockedList)(nil)).Elem()
}

func (i TemBlockedListMap) ToTemBlockedListMapOutput() TemBlockedListMapOutput {
	return i.ToTemBlockedListMapOutputWithContext(context.Background())
}

func (i TemBlockedListMap) ToTemBlockedListMapOutputWithContext(ctx context.Context) TemBlockedListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemBlockedListMapOutput)
}

type TemBlockedListOutput struct{ *pulumi.OutputState }

func (TemBlockedListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemBlockedList)(nil)).Elem()
}

func (o TemBlockedListOutput) ToTemBlockedListOutput() TemBlockedListOutput {
	return o
}

func (o TemBlockedListOutput) ToTemBlockedListOutputWithContext(ctx context.Context) TemBlockedListOutput {
	return o
}

// The ID of the domain affected by the blocklist. Must be in the format `{region}/{domain_id}`.
func (o TemBlockedListOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *TemBlockedList) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// The email address to block.
func (o TemBlockedListOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *TemBlockedList) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// The ID of the project this blocklist belongs to. Defaults to the provider's project ID.
func (o TemBlockedListOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *TemBlockedList) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Reason for blocking the email address.
func (o TemBlockedListOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemBlockedList) pulumi.StringPtrOutput { return v.Reason }).(pulumi.StringPtrOutput)
}

// The region in which the blocklist is created. Defaults to the provider's region.
func (o TemBlockedListOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *TemBlockedList) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Type of the blocklist. Possible values are:
func (o TemBlockedListOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *TemBlockedList) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type TemBlockedListArrayOutput struct{ *pulumi.OutputState }

func (TemBlockedListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TemBlockedList)(nil)).Elem()
}

func (o TemBlockedListArrayOutput) ToTemBlockedListArrayOutput() TemBlockedListArrayOutput {
	return o
}

func (o TemBlockedListArrayOutput) ToTemBlockedListArrayOutputWithContext(ctx context.Context) TemBlockedListArrayOutput {
	return o
}

func (o TemBlockedListArrayOutput) Index(i pulumi.IntInput) TemBlockedListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TemBlockedList {
		return vs[0].([]*TemBlockedList)[vs[1].(int)]
	}).(TemBlockedListOutput)
}

type TemBlockedListMapOutput struct{ *pulumi.OutputState }

func (TemBlockedListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TemBlockedList)(nil)).Elem()
}

func (o TemBlockedListMapOutput) ToTemBlockedListMapOutput() TemBlockedListMapOutput {
	return o
}

func (o TemBlockedListMapOutput) ToTemBlockedListMapOutputWithContext(ctx context.Context) TemBlockedListMapOutput {
	return o
}

func (o TemBlockedListMapOutput) MapIndex(k pulumi.StringInput) TemBlockedListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TemBlockedList {
		return vs[0].(map[string]*TemBlockedList)[vs[1].(string)]
	}).(TemBlockedListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TemBlockedListInput)(nil)).Elem(), &TemBlockedList{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemBlockedListArrayInput)(nil)).Elem(), TemBlockedListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemBlockedListMapInput)(nil)).Elem(), TemBlockedListMap{})
	pulumi.RegisterOutputType(TemBlockedListOutput{})
	pulumi.RegisterOutputType(TemBlockedListArrayOutput{})
	pulumi.RegisterOutputType(TemBlockedListMapOutput{})
}
