// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type DocumentDBInstance struct {
	pulumi.CustomResourceState

	// Database's engine version id
	Engine pulumi.StringOutput `pulumi:"engine"`
	// Enable or disable high availability for the database instance
	IsHaCluster pulumi.BoolPtrOutput `pulumi:"isHaCluster"`
	// The document db instance name
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of database instance you want to create
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// Password for the first user of the database instance
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region you want to attach the resource to
	Region pulumi.StringOutput `pulumi:"region"`
	// List of tags ["tag1", "tag2", ...] attached to a database instance
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Enable telemetry to collects basic anonymous usage data and sends them to FerretDB telemetry service
	TelemetryEnabled pulumi.BoolPtrOutput `pulumi:"telemetryEnabled"`
	// Identifier for the first user of the database instance
	UserName pulumi.StringPtrOutput `pulumi:"userName"`
	// Volume size (in GB) when volume_type is not lssd
	VolumeSizeInGb pulumi.IntOutput `pulumi:"volumeSizeInGb"`
	// Type of volume where data are stored
	VolumeType pulumi.StringPtrOutput `pulumi:"volumeType"`
}

// NewDocumentDBInstance registers a new resource with the given unique name, arguments, and options.
func NewDocumentDBInstance(ctx *pulumi.Context,
	name string, args *DocumentDBInstanceArgs, opts ...pulumi.ResourceOption) (*DocumentDBInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Engine == nil {
		return nil, errors.New("invalid value for required argument 'Engine'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DocumentDBInstance
	err := ctx.RegisterResource("scaleway:index/documentDBInstance:DocumentDBInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDocumentDBInstance gets an existing DocumentDBInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocumentDBInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DocumentDBInstanceState, opts ...pulumi.ResourceOption) (*DocumentDBInstance, error) {
	var resource DocumentDBInstance
	err := ctx.ReadResource("scaleway:index/documentDBInstance:DocumentDBInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DocumentDBInstance resources.
type documentDBInstanceState struct {
	// Database's engine version id
	Engine *string `pulumi:"engine"`
	// Enable or disable high availability for the database instance
	IsHaCluster *bool `pulumi:"isHaCluster"`
	// The document db instance name
	Name *string `pulumi:"name"`
	// The type of database instance you want to create
	NodeType *string `pulumi:"nodeType"`
	// Password for the first user of the database instance
	Password *string `pulumi:"password"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// List of tags ["tag1", "tag2", ...] attached to a database instance
	Tags []string `pulumi:"tags"`
	// Enable telemetry to collects basic anonymous usage data and sends them to FerretDB telemetry service
	TelemetryEnabled *bool `pulumi:"telemetryEnabled"`
	// Identifier for the first user of the database instance
	UserName *string `pulumi:"userName"`
	// Volume size (in GB) when volume_type is not lssd
	VolumeSizeInGb *int `pulumi:"volumeSizeInGb"`
	// Type of volume where data are stored
	VolumeType *string `pulumi:"volumeType"`
}

type DocumentDBInstanceState struct {
	// Database's engine version id
	Engine pulumi.StringPtrInput
	// Enable or disable high availability for the database instance
	IsHaCluster pulumi.BoolPtrInput
	// The document db instance name
	Name pulumi.StringPtrInput
	// The type of database instance you want to create
	NodeType pulumi.StringPtrInput
	// Password for the first user of the database instance
	Password pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// List of tags ["tag1", "tag2", ...] attached to a database instance
	Tags pulumi.StringArrayInput
	// Enable telemetry to collects basic anonymous usage data and sends them to FerretDB telemetry service
	TelemetryEnabled pulumi.BoolPtrInput
	// Identifier for the first user of the database instance
	UserName pulumi.StringPtrInput
	// Volume size (in GB) when volume_type is not lssd
	VolumeSizeInGb pulumi.IntPtrInput
	// Type of volume where data are stored
	VolumeType pulumi.StringPtrInput
}

func (DocumentDBInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*documentDBInstanceState)(nil)).Elem()
}

type documentDBInstanceArgs struct {
	// Database's engine version id
	Engine string `pulumi:"engine"`
	// Enable or disable high availability for the database instance
	IsHaCluster *bool `pulumi:"isHaCluster"`
	// The document db instance name
	Name *string `pulumi:"name"`
	// The type of database instance you want to create
	NodeType string `pulumi:"nodeType"`
	// Password for the first user of the database instance
	Password *string `pulumi:"password"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// List of tags ["tag1", "tag2", ...] attached to a database instance
	Tags []string `pulumi:"tags"`
	// Enable telemetry to collects basic anonymous usage data and sends them to FerretDB telemetry service
	TelemetryEnabled *bool `pulumi:"telemetryEnabled"`
	// Identifier for the first user of the database instance
	UserName *string `pulumi:"userName"`
	// Volume size (in GB) when volume_type is not lssd
	VolumeSizeInGb *int `pulumi:"volumeSizeInGb"`
	// Type of volume where data are stored
	VolumeType *string `pulumi:"volumeType"`
}

// The set of arguments for constructing a DocumentDBInstance resource.
type DocumentDBInstanceArgs struct {
	// Database's engine version id
	Engine pulumi.StringInput
	// Enable or disable high availability for the database instance
	IsHaCluster pulumi.BoolPtrInput
	// The document db instance name
	Name pulumi.StringPtrInput
	// The type of database instance you want to create
	NodeType pulumi.StringInput
	// Password for the first user of the database instance
	Password pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// List of tags ["tag1", "tag2", ...] attached to a database instance
	Tags pulumi.StringArrayInput
	// Enable telemetry to collects basic anonymous usage data and sends them to FerretDB telemetry service
	TelemetryEnabled pulumi.BoolPtrInput
	// Identifier for the first user of the database instance
	UserName pulumi.StringPtrInput
	// Volume size (in GB) when volume_type is not lssd
	VolumeSizeInGb pulumi.IntPtrInput
	// Type of volume where data are stored
	VolumeType pulumi.StringPtrInput
}

func (DocumentDBInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*documentDBInstanceArgs)(nil)).Elem()
}

type DocumentDBInstanceInput interface {
	pulumi.Input

	ToDocumentDBInstanceOutput() DocumentDBInstanceOutput
	ToDocumentDBInstanceOutputWithContext(ctx context.Context) DocumentDBInstanceOutput
}

func (*DocumentDBInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentDBInstance)(nil)).Elem()
}

func (i *DocumentDBInstance) ToDocumentDBInstanceOutput() DocumentDBInstanceOutput {
	return i.ToDocumentDBInstanceOutputWithContext(context.Background())
}

func (i *DocumentDBInstance) ToDocumentDBInstanceOutputWithContext(ctx context.Context) DocumentDBInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDBInstanceOutput)
}

func (i *DocumentDBInstance) ToOutput(ctx context.Context) pulumix.Output[*DocumentDBInstance] {
	return pulumix.Output[*DocumentDBInstance]{
		OutputState: i.ToDocumentDBInstanceOutputWithContext(ctx).OutputState,
	}
}

// DocumentDBInstanceArrayInput is an input type that accepts DocumentDBInstanceArray and DocumentDBInstanceArrayOutput values.
// You can construct a concrete instance of `DocumentDBInstanceArrayInput` via:
//
//	DocumentDBInstanceArray{ DocumentDBInstanceArgs{...} }
type DocumentDBInstanceArrayInput interface {
	pulumi.Input

	ToDocumentDBInstanceArrayOutput() DocumentDBInstanceArrayOutput
	ToDocumentDBInstanceArrayOutputWithContext(context.Context) DocumentDBInstanceArrayOutput
}

type DocumentDBInstanceArray []DocumentDBInstanceInput

func (DocumentDBInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DocumentDBInstance)(nil)).Elem()
}

func (i DocumentDBInstanceArray) ToDocumentDBInstanceArrayOutput() DocumentDBInstanceArrayOutput {
	return i.ToDocumentDBInstanceArrayOutputWithContext(context.Background())
}

func (i DocumentDBInstanceArray) ToDocumentDBInstanceArrayOutputWithContext(ctx context.Context) DocumentDBInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDBInstanceArrayOutput)
}

func (i DocumentDBInstanceArray) ToOutput(ctx context.Context) pulumix.Output[[]*DocumentDBInstance] {
	return pulumix.Output[[]*DocumentDBInstance]{
		OutputState: i.ToDocumentDBInstanceArrayOutputWithContext(ctx).OutputState,
	}
}

// DocumentDBInstanceMapInput is an input type that accepts DocumentDBInstanceMap and DocumentDBInstanceMapOutput values.
// You can construct a concrete instance of `DocumentDBInstanceMapInput` via:
//
//	DocumentDBInstanceMap{ "key": DocumentDBInstanceArgs{...} }
type DocumentDBInstanceMapInput interface {
	pulumi.Input

	ToDocumentDBInstanceMapOutput() DocumentDBInstanceMapOutput
	ToDocumentDBInstanceMapOutputWithContext(context.Context) DocumentDBInstanceMapOutput
}

type DocumentDBInstanceMap map[string]DocumentDBInstanceInput

func (DocumentDBInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DocumentDBInstance)(nil)).Elem()
}

func (i DocumentDBInstanceMap) ToDocumentDBInstanceMapOutput() DocumentDBInstanceMapOutput {
	return i.ToDocumentDBInstanceMapOutputWithContext(context.Background())
}

func (i DocumentDBInstanceMap) ToDocumentDBInstanceMapOutputWithContext(ctx context.Context) DocumentDBInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDBInstanceMapOutput)
}

func (i DocumentDBInstanceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DocumentDBInstance] {
	return pulumix.Output[map[string]*DocumentDBInstance]{
		OutputState: i.ToDocumentDBInstanceMapOutputWithContext(ctx).OutputState,
	}
}

type DocumentDBInstanceOutput struct{ *pulumi.OutputState }

func (DocumentDBInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentDBInstance)(nil)).Elem()
}

func (o DocumentDBInstanceOutput) ToDocumentDBInstanceOutput() DocumentDBInstanceOutput {
	return o
}

func (o DocumentDBInstanceOutput) ToDocumentDBInstanceOutputWithContext(ctx context.Context) DocumentDBInstanceOutput {
	return o
}

func (o DocumentDBInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[*DocumentDBInstance] {
	return pulumix.Output[*DocumentDBInstance]{
		OutputState: o.OutputState,
	}
}

// Database's engine version id
func (o DocumentDBInstanceOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentDBInstance) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// Enable or disable high availability for the database instance
func (o DocumentDBInstanceOutput) IsHaCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DocumentDBInstance) pulumi.BoolPtrOutput { return v.IsHaCluster }).(pulumi.BoolPtrOutput)
}

// The document db instance name
func (o DocumentDBInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentDBInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of database instance you want to create
func (o DocumentDBInstanceOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentDBInstance) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// Password for the first user of the database instance
func (o DocumentDBInstanceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDBInstance) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The project_id you want to attach the resource to
func (o DocumentDBInstanceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentDBInstance) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The region you want to attach the resource to
func (o DocumentDBInstanceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentDBInstance) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// List of tags ["tag1", "tag2", ...] attached to a database instance
func (o DocumentDBInstanceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DocumentDBInstance) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Enable telemetry to collects basic anonymous usage data and sends them to FerretDB telemetry service
func (o DocumentDBInstanceOutput) TelemetryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DocumentDBInstance) pulumi.BoolPtrOutput { return v.TelemetryEnabled }).(pulumi.BoolPtrOutput)
}

// Identifier for the first user of the database instance
func (o DocumentDBInstanceOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDBInstance) pulumi.StringPtrOutput { return v.UserName }).(pulumi.StringPtrOutput)
}

// Volume size (in GB) when volume_type is not lssd
func (o DocumentDBInstanceOutput) VolumeSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v *DocumentDBInstance) pulumi.IntOutput { return v.VolumeSizeInGb }).(pulumi.IntOutput)
}

// Type of volume where data are stored
func (o DocumentDBInstanceOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDBInstance) pulumi.StringPtrOutput { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type DocumentDBInstanceArrayOutput struct{ *pulumi.OutputState }

func (DocumentDBInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DocumentDBInstance)(nil)).Elem()
}

func (o DocumentDBInstanceArrayOutput) ToDocumentDBInstanceArrayOutput() DocumentDBInstanceArrayOutput {
	return o
}

func (o DocumentDBInstanceArrayOutput) ToDocumentDBInstanceArrayOutputWithContext(ctx context.Context) DocumentDBInstanceArrayOutput {
	return o
}

func (o DocumentDBInstanceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DocumentDBInstance] {
	return pulumix.Output[[]*DocumentDBInstance]{
		OutputState: o.OutputState,
	}
}

func (o DocumentDBInstanceArrayOutput) Index(i pulumi.IntInput) DocumentDBInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DocumentDBInstance {
		return vs[0].([]*DocumentDBInstance)[vs[1].(int)]
	}).(DocumentDBInstanceOutput)
}

type DocumentDBInstanceMapOutput struct{ *pulumi.OutputState }

func (DocumentDBInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DocumentDBInstance)(nil)).Elem()
}

func (o DocumentDBInstanceMapOutput) ToDocumentDBInstanceMapOutput() DocumentDBInstanceMapOutput {
	return o
}

func (o DocumentDBInstanceMapOutput) ToDocumentDBInstanceMapOutputWithContext(ctx context.Context) DocumentDBInstanceMapOutput {
	return o
}

func (o DocumentDBInstanceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DocumentDBInstance] {
	return pulumix.Output[map[string]*DocumentDBInstance]{
		OutputState: o.OutputState,
	}
}

func (o DocumentDBInstanceMapOutput) MapIndex(k pulumi.StringInput) DocumentDBInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DocumentDBInstance {
		return vs[0].(map[string]*DocumentDBInstance)[vs[1].(string)]
	}).(DocumentDBInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentDBInstanceInput)(nil)).Elem(), &DocumentDBInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentDBInstanceArrayInput)(nil)).Elem(), DocumentDBInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentDBInstanceMapInput)(nil)).Elem(), DocumentDBInstanceMap{})
	pulumi.RegisterOutputType(DocumentDBInstanceOutput{})
	pulumi.RegisterOutputType(DocumentDBInstanceArrayOutput{})
	pulumi.RegisterOutputType(DocumentDBInstanceMapOutput{})
}
