// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages Scaleway Cockpit Alert Managers.
//
// For more information consult the [documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#grafana-users).
//
// ## Import
//
// Alert managers can be imported using the project ID, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/cockpitAlertManager:CockpitAlertManager main fr-par/11111111-1111-1111-1111-111111111111
// ```
type CockpitAlertManager struct {
	pulumi.CustomResourceState

	// Alert manager URL.
	AlertManagerUrl pulumi.StringOutput `pulumi:"alertManagerUrl"`
	// A list of contact points with email addresses for the alert receivers. Each map should contain a single key email.
	ContactPoints CockpitAlertManagerContactPointArrayOutput `pulumi:"contactPoints"`
	// Indicates whether the alert manager should be enabled. Defaults to true.
	EnableManagedAlerts pulumi.BoolPtrOutput `pulumi:"enableManagedAlerts"`
	// `projectId`) The ID of the project the cockpit is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`) The region in which alertManager should be created.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewCockpitAlertManager registers a new resource with the given unique name, arguments, and options.
func NewCockpitAlertManager(ctx *pulumi.Context,
	name string, args *CockpitAlertManagerArgs, opts ...pulumi.ResourceOption) (*CockpitAlertManager, error) {
	if args == nil {
		args = &CockpitAlertManagerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CockpitAlertManager
	err := ctx.RegisterResource("scaleway:index/cockpitAlertManager:CockpitAlertManager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCockpitAlertManager gets an existing CockpitAlertManager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCockpitAlertManager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CockpitAlertManagerState, opts ...pulumi.ResourceOption) (*CockpitAlertManager, error) {
	var resource CockpitAlertManager
	err := ctx.ReadResource("scaleway:index/cockpitAlertManager:CockpitAlertManager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CockpitAlertManager resources.
type cockpitAlertManagerState struct {
	// Alert manager URL.
	AlertManagerUrl *string `pulumi:"alertManagerUrl"`
	// A list of contact points with email addresses for the alert receivers. Each map should contain a single key email.
	ContactPoints []CockpitAlertManagerContactPoint `pulumi:"contactPoints"`
	// Indicates whether the alert manager should be enabled. Defaults to true.
	EnableManagedAlerts *bool `pulumi:"enableManagedAlerts"`
	// `projectId`) The ID of the project the cockpit is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region in which alertManager should be created.
	Region *string `pulumi:"region"`
}

type CockpitAlertManagerState struct {
	// Alert manager URL.
	AlertManagerUrl pulumi.StringPtrInput
	// A list of contact points with email addresses for the alert receivers. Each map should contain a single key email.
	ContactPoints CockpitAlertManagerContactPointArrayInput
	// Indicates whether the alert manager should be enabled. Defaults to true.
	EnableManagedAlerts pulumi.BoolPtrInput
	// `projectId`) The ID of the project the cockpit is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region in which alertManager should be created.
	Region pulumi.StringPtrInput
}

func (CockpitAlertManagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*cockpitAlertManagerState)(nil)).Elem()
}

type cockpitAlertManagerArgs struct {
	// A list of contact points with email addresses for the alert receivers. Each map should contain a single key email.
	ContactPoints []CockpitAlertManagerContactPoint `pulumi:"contactPoints"`
	// Indicates whether the alert manager should be enabled. Defaults to true.
	EnableManagedAlerts *bool `pulumi:"enableManagedAlerts"`
	// `projectId`) The ID of the project the cockpit is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region in which alertManager should be created.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a CockpitAlertManager resource.
type CockpitAlertManagerArgs struct {
	// A list of contact points with email addresses for the alert receivers. Each map should contain a single key email.
	ContactPoints CockpitAlertManagerContactPointArrayInput
	// Indicates whether the alert manager should be enabled. Defaults to true.
	EnableManagedAlerts pulumi.BoolPtrInput
	// `projectId`) The ID of the project the cockpit is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region in which alertManager should be created.
	Region pulumi.StringPtrInput
}

func (CockpitAlertManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cockpitAlertManagerArgs)(nil)).Elem()
}

type CockpitAlertManagerInput interface {
	pulumi.Input

	ToCockpitAlertManagerOutput() CockpitAlertManagerOutput
	ToCockpitAlertManagerOutputWithContext(ctx context.Context) CockpitAlertManagerOutput
}

func (*CockpitAlertManager) ElementType() reflect.Type {
	return reflect.TypeOf((**CockpitAlertManager)(nil)).Elem()
}

func (i *CockpitAlertManager) ToCockpitAlertManagerOutput() CockpitAlertManagerOutput {
	return i.ToCockpitAlertManagerOutputWithContext(context.Background())
}

func (i *CockpitAlertManager) ToCockpitAlertManagerOutputWithContext(ctx context.Context) CockpitAlertManagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitAlertManagerOutput)
}

// CockpitAlertManagerArrayInput is an input type that accepts CockpitAlertManagerArray and CockpitAlertManagerArrayOutput values.
// You can construct a concrete instance of `CockpitAlertManagerArrayInput` via:
//
//	CockpitAlertManagerArray{ CockpitAlertManagerArgs{...} }
type CockpitAlertManagerArrayInput interface {
	pulumi.Input

	ToCockpitAlertManagerArrayOutput() CockpitAlertManagerArrayOutput
	ToCockpitAlertManagerArrayOutputWithContext(context.Context) CockpitAlertManagerArrayOutput
}

type CockpitAlertManagerArray []CockpitAlertManagerInput

func (CockpitAlertManagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CockpitAlertManager)(nil)).Elem()
}

func (i CockpitAlertManagerArray) ToCockpitAlertManagerArrayOutput() CockpitAlertManagerArrayOutput {
	return i.ToCockpitAlertManagerArrayOutputWithContext(context.Background())
}

func (i CockpitAlertManagerArray) ToCockpitAlertManagerArrayOutputWithContext(ctx context.Context) CockpitAlertManagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitAlertManagerArrayOutput)
}

// CockpitAlertManagerMapInput is an input type that accepts CockpitAlertManagerMap and CockpitAlertManagerMapOutput values.
// You can construct a concrete instance of `CockpitAlertManagerMapInput` via:
//
//	CockpitAlertManagerMap{ "key": CockpitAlertManagerArgs{...} }
type CockpitAlertManagerMapInput interface {
	pulumi.Input

	ToCockpitAlertManagerMapOutput() CockpitAlertManagerMapOutput
	ToCockpitAlertManagerMapOutputWithContext(context.Context) CockpitAlertManagerMapOutput
}

type CockpitAlertManagerMap map[string]CockpitAlertManagerInput

func (CockpitAlertManagerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CockpitAlertManager)(nil)).Elem()
}

func (i CockpitAlertManagerMap) ToCockpitAlertManagerMapOutput() CockpitAlertManagerMapOutput {
	return i.ToCockpitAlertManagerMapOutputWithContext(context.Background())
}

func (i CockpitAlertManagerMap) ToCockpitAlertManagerMapOutputWithContext(ctx context.Context) CockpitAlertManagerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitAlertManagerMapOutput)
}

type CockpitAlertManagerOutput struct{ *pulumi.OutputState }

func (CockpitAlertManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CockpitAlertManager)(nil)).Elem()
}

func (o CockpitAlertManagerOutput) ToCockpitAlertManagerOutput() CockpitAlertManagerOutput {
	return o
}

func (o CockpitAlertManagerOutput) ToCockpitAlertManagerOutputWithContext(ctx context.Context) CockpitAlertManagerOutput {
	return o
}

// Alert manager URL.
func (o CockpitAlertManagerOutput) AlertManagerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *CockpitAlertManager) pulumi.StringOutput { return v.AlertManagerUrl }).(pulumi.StringOutput)
}

// A list of contact points with email addresses for the alert receivers. Each map should contain a single key email.
func (o CockpitAlertManagerOutput) ContactPoints() CockpitAlertManagerContactPointArrayOutput {
	return o.ApplyT(func(v *CockpitAlertManager) CockpitAlertManagerContactPointArrayOutput { return v.ContactPoints }).(CockpitAlertManagerContactPointArrayOutput)
}

// Indicates whether the alert manager should be enabled. Defaults to true.
func (o CockpitAlertManagerOutput) EnableManagedAlerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CockpitAlertManager) pulumi.BoolPtrOutput { return v.EnableManagedAlerts }).(pulumi.BoolPtrOutput)
}

// `projectId`) The ID of the project the cockpit is associated with.
func (o CockpitAlertManagerOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *CockpitAlertManager) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`) The region in which alertManager should be created.
func (o CockpitAlertManagerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *CockpitAlertManager) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type CockpitAlertManagerArrayOutput struct{ *pulumi.OutputState }

func (CockpitAlertManagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CockpitAlertManager)(nil)).Elem()
}

func (o CockpitAlertManagerArrayOutput) ToCockpitAlertManagerArrayOutput() CockpitAlertManagerArrayOutput {
	return o
}

func (o CockpitAlertManagerArrayOutput) ToCockpitAlertManagerArrayOutputWithContext(ctx context.Context) CockpitAlertManagerArrayOutput {
	return o
}

func (o CockpitAlertManagerArrayOutput) Index(i pulumi.IntInput) CockpitAlertManagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CockpitAlertManager {
		return vs[0].([]*CockpitAlertManager)[vs[1].(int)]
	}).(CockpitAlertManagerOutput)
}

type CockpitAlertManagerMapOutput struct{ *pulumi.OutputState }

func (CockpitAlertManagerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CockpitAlertManager)(nil)).Elem()
}

func (o CockpitAlertManagerMapOutput) ToCockpitAlertManagerMapOutput() CockpitAlertManagerMapOutput {
	return o
}

func (o CockpitAlertManagerMapOutput) ToCockpitAlertManagerMapOutputWithContext(ctx context.Context) CockpitAlertManagerMapOutput {
	return o
}

func (o CockpitAlertManagerMapOutput) MapIndex(k pulumi.StringInput) CockpitAlertManagerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CockpitAlertManager {
		return vs[0].(map[string]*CockpitAlertManager)[vs[1].(string)]
	}).(CockpitAlertManagerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitAlertManagerInput)(nil)).Elem(), &CockpitAlertManager{})
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitAlertManagerArrayInput)(nil)).Elem(), CockpitAlertManagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitAlertManagerMapInput)(nil)).Elem(), CockpitAlertManagerMap{})
	pulumi.RegisterOutputType(CockpitAlertManagerOutput{})
	pulumi.RegisterOutputType(CockpitAlertManagerArrayOutput{})
	pulumi.RegisterOutputType(CockpitAlertManagerMapOutput{})
}
