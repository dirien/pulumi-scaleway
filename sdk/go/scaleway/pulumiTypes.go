// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type BaremetalServerIp struct {
	// The address of the IPv6.
	Address *string `pulumi:"address"`
	// The id of the private network to attach.
	Id *string `pulumi:"id"`
	// The reverse of the IPv6.
	Reverse *string `pulumi:"reverse"`
	// The type of the IPv6.
	Version *string `pulumi:"version"`
}

// BaremetalServerIpInput is an input type that accepts BaremetalServerIpArgs and BaremetalServerIpOutput values.
// You can construct a concrete instance of `BaremetalServerIpInput` via:
//
//	BaremetalServerIpArgs{...}
type BaremetalServerIpInput interface {
	pulumi.Input

	ToBaremetalServerIpOutput() BaremetalServerIpOutput
	ToBaremetalServerIpOutputWithContext(context.Context) BaremetalServerIpOutput
}

type BaremetalServerIpArgs struct {
	// The address of the IPv6.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The id of the private network to attach.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The reverse of the IPv6.
	Reverse pulumi.StringPtrInput `pulumi:"reverse"`
	// The type of the IPv6.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (BaremetalServerIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BaremetalServerIp)(nil)).Elem()
}

func (i BaremetalServerIpArgs) ToBaremetalServerIpOutput() BaremetalServerIpOutput {
	return i.ToBaremetalServerIpOutputWithContext(context.Background())
}

func (i BaremetalServerIpArgs) ToBaremetalServerIpOutputWithContext(ctx context.Context) BaremetalServerIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaremetalServerIpOutput)
}

func (i BaremetalServerIpArgs) ToOutput(ctx context.Context) pulumix.Output[BaremetalServerIp] {
	return pulumix.Output[BaremetalServerIp]{
		OutputState: i.ToBaremetalServerIpOutputWithContext(ctx).OutputState,
	}
}

// BaremetalServerIpArrayInput is an input type that accepts BaremetalServerIpArray and BaremetalServerIpArrayOutput values.
// You can construct a concrete instance of `BaremetalServerIpArrayInput` via:
//
//	BaremetalServerIpArray{ BaremetalServerIpArgs{...} }
type BaremetalServerIpArrayInput interface {
	pulumi.Input

	ToBaremetalServerIpArrayOutput() BaremetalServerIpArrayOutput
	ToBaremetalServerIpArrayOutputWithContext(context.Context) BaremetalServerIpArrayOutput
}

type BaremetalServerIpArray []BaremetalServerIpInput

func (BaremetalServerIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BaremetalServerIp)(nil)).Elem()
}

func (i BaremetalServerIpArray) ToBaremetalServerIpArrayOutput() BaremetalServerIpArrayOutput {
	return i.ToBaremetalServerIpArrayOutputWithContext(context.Background())
}

func (i BaremetalServerIpArray) ToBaremetalServerIpArrayOutputWithContext(ctx context.Context) BaremetalServerIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaremetalServerIpArrayOutput)
}

func (i BaremetalServerIpArray) ToOutput(ctx context.Context) pulumix.Output[[]BaremetalServerIp] {
	return pulumix.Output[[]BaremetalServerIp]{
		OutputState: i.ToBaremetalServerIpArrayOutputWithContext(ctx).OutputState,
	}
}

type BaremetalServerIpOutput struct{ *pulumi.OutputState }

func (BaremetalServerIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BaremetalServerIp)(nil)).Elem()
}

func (o BaremetalServerIpOutput) ToBaremetalServerIpOutput() BaremetalServerIpOutput {
	return o
}

func (o BaremetalServerIpOutput) ToBaremetalServerIpOutputWithContext(ctx context.Context) BaremetalServerIpOutput {
	return o
}

func (o BaremetalServerIpOutput) ToOutput(ctx context.Context) pulumix.Output[BaremetalServerIp] {
	return pulumix.Output[BaremetalServerIp]{
		OutputState: o.OutputState,
	}
}

// The address of the IPv6.
func (o BaremetalServerIpOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaremetalServerIp) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The id of the private network to attach.
func (o BaremetalServerIpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaremetalServerIp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The reverse of the IPv6.
func (o BaremetalServerIpOutput) Reverse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaremetalServerIp) *string { return v.Reverse }).(pulumi.StringPtrOutput)
}

// The type of the IPv6.
func (o BaremetalServerIpOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaremetalServerIp) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type BaremetalServerIpArrayOutput struct{ *pulumi.OutputState }

func (BaremetalServerIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BaremetalServerIp)(nil)).Elem()
}

func (o BaremetalServerIpArrayOutput) ToBaremetalServerIpArrayOutput() BaremetalServerIpArrayOutput {
	return o
}

func (o BaremetalServerIpArrayOutput) ToBaremetalServerIpArrayOutputWithContext(ctx context.Context) BaremetalServerIpArrayOutput {
	return o
}

func (o BaremetalServerIpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BaremetalServerIp] {
	return pulumix.Output[[]BaremetalServerIp]{
		OutputState: o.OutputState,
	}
}

func (o BaremetalServerIpArrayOutput) Index(i pulumi.IntInput) BaremetalServerIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BaremetalServerIp {
		return vs[0].([]BaremetalServerIp)[vs[1].(int)]
	}).(BaremetalServerIpOutput)
}

type BaremetalServerIpv4 struct {
	// The address of the IPv6.
	Address *string `pulumi:"address"`
	// The id of the private network to attach.
	Id *string `pulumi:"id"`
	// The reverse of the IPv6.
	Reverse *string `pulumi:"reverse"`
	// The type of the IPv6.
	Version *string `pulumi:"version"`
}

// BaremetalServerIpv4Input is an input type that accepts BaremetalServerIpv4Args and BaremetalServerIpv4Output values.
// You can construct a concrete instance of `BaremetalServerIpv4Input` via:
//
//	BaremetalServerIpv4Args{...}
type BaremetalServerIpv4Input interface {
	pulumi.Input

	ToBaremetalServerIpv4Output() BaremetalServerIpv4Output
	ToBaremetalServerIpv4OutputWithContext(context.Context) BaremetalServerIpv4Output
}

type BaremetalServerIpv4Args struct {
	// The address of the IPv6.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The id of the private network to attach.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The reverse of the IPv6.
	Reverse pulumi.StringPtrInput `pulumi:"reverse"`
	// The type of the IPv6.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (BaremetalServerIpv4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*BaremetalServerIpv4)(nil)).Elem()
}

func (i BaremetalServerIpv4Args) ToBaremetalServerIpv4Output() BaremetalServerIpv4Output {
	return i.ToBaremetalServerIpv4OutputWithContext(context.Background())
}

func (i BaremetalServerIpv4Args) ToBaremetalServerIpv4OutputWithContext(ctx context.Context) BaremetalServerIpv4Output {
	return pulumi.ToOutputWithContext(ctx, i).(BaremetalServerIpv4Output)
}

func (i BaremetalServerIpv4Args) ToOutput(ctx context.Context) pulumix.Output[BaremetalServerIpv4] {
	return pulumix.Output[BaremetalServerIpv4]{
		OutputState: i.ToBaremetalServerIpv4OutputWithContext(ctx).OutputState,
	}
}

// BaremetalServerIpv4ArrayInput is an input type that accepts BaremetalServerIpv4Array and BaremetalServerIpv4ArrayOutput values.
// You can construct a concrete instance of `BaremetalServerIpv4ArrayInput` via:
//
//	BaremetalServerIpv4Array{ BaremetalServerIpv4Args{...} }
type BaremetalServerIpv4ArrayInput interface {
	pulumi.Input

	ToBaremetalServerIpv4ArrayOutput() BaremetalServerIpv4ArrayOutput
	ToBaremetalServerIpv4ArrayOutputWithContext(context.Context) BaremetalServerIpv4ArrayOutput
}

type BaremetalServerIpv4Array []BaremetalServerIpv4Input

func (BaremetalServerIpv4Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BaremetalServerIpv4)(nil)).Elem()
}

func (i BaremetalServerIpv4Array) ToBaremetalServerIpv4ArrayOutput() BaremetalServerIpv4ArrayOutput {
	return i.ToBaremetalServerIpv4ArrayOutputWithContext(context.Background())
}

func (i BaremetalServerIpv4Array) ToBaremetalServerIpv4ArrayOutputWithContext(ctx context.Context) BaremetalServerIpv4ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaremetalServerIpv4ArrayOutput)
}

func (i BaremetalServerIpv4Array) ToOutput(ctx context.Context) pulumix.Output[[]BaremetalServerIpv4] {
	return pulumix.Output[[]BaremetalServerIpv4]{
		OutputState: i.ToBaremetalServerIpv4ArrayOutputWithContext(ctx).OutputState,
	}
}

type BaremetalServerIpv4Output struct{ *pulumi.OutputState }

func (BaremetalServerIpv4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*BaremetalServerIpv4)(nil)).Elem()
}

func (o BaremetalServerIpv4Output) ToBaremetalServerIpv4Output() BaremetalServerIpv4Output {
	return o
}

func (o BaremetalServerIpv4Output) ToBaremetalServerIpv4OutputWithContext(ctx context.Context) BaremetalServerIpv4Output {
	return o
}

func (o BaremetalServerIpv4Output) ToOutput(ctx context.Context) pulumix.Output[BaremetalServerIpv4] {
	return pulumix.Output[BaremetalServerIpv4]{
		OutputState: o.OutputState,
	}
}

// The address of the IPv6.
func (o BaremetalServerIpv4Output) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaremetalServerIpv4) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The id of the private network to attach.
func (o BaremetalServerIpv4Output) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaremetalServerIpv4) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The reverse of the IPv6.
func (o BaremetalServerIpv4Output) Reverse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaremetalServerIpv4) *string { return v.Reverse }).(pulumi.StringPtrOutput)
}

// The type of the IPv6.
func (o BaremetalServerIpv4Output) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaremetalServerIpv4) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type BaremetalServerIpv4ArrayOutput struct{ *pulumi.OutputState }

func (BaremetalServerIpv4ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BaremetalServerIpv4)(nil)).Elem()
}

func (o BaremetalServerIpv4ArrayOutput) ToBaremetalServerIpv4ArrayOutput() BaremetalServerIpv4ArrayOutput {
	return o
}

func (o BaremetalServerIpv4ArrayOutput) ToBaremetalServerIpv4ArrayOutputWithContext(ctx context.Context) BaremetalServerIpv4ArrayOutput {
	return o
}

func (o BaremetalServerIpv4ArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BaremetalServerIpv4] {
	return pulumix.Output[[]BaremetalServerIpv4]{
		OutputState: o.OutputState,
	}
}

func (o BaremetalServerIpv4ArrayOutput) Index(i pulumi.IntInput) BaremetalServerIpv4Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BaremetalServerIpv4 {
		return vs[0].([]BaremetalServerIpv4)[vs[1].(int)]
	}).(BaremetalServerIpv4Output)
}

type BaremetalServerIpv6 struct {
	// The address of the IPv6.
	Address *string `pulumi:"address"`
	// The id of the private network to attach.
	Id *string `pulumi:"id"`
	// The reverse of the IPv6.
	Reverse *string `pulumi:"reverse"`
	// The type of the IPv6.
	Version *string `pulumi:"version"`
}

// BaremetalServerIpv6Input is an input type that accepts BaremetalServerIpv6Args and BaremetalServerIpv6Output values.
// You can construct a concrete instance of `BaremetalServerIpv6Input` via:
//
//	BaremetalServerIpv6Args{...}
type BaremetalServerIpv6Input interface {
	pulumi.Input

	ToBaremetalServerIpv6Output() BaremetalServerIpv6Output
	ToBaremetalServerIpv6OutputWithContext(context.Context) BaremetalServerIpv6Output
}

type BaremetalServerIpv6Args struct {
	// The address of the IPv6.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The id of the private network to attach.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The reverse of the IPv6.
	Reverse pulumi.StringPtrInput `pulumi:"reverse"`
	// The type of the IPv6.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (BaremetalServerIpv6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*BaremetalServerIpv6)(nil)).Elem()
}

func (i BaremetalServerIpv6Args) ToBaremetalServerIpv6Output() BaremetalServerIpv6Output {
	return i.ToBaremetalServerIpv6OutputWithContext(context.Background())
}

func (i BaremetalServerIpv6Args) ToBaremetalServerIpv6OutputWithContext(ctx context.Context) BaremetalServerIpv6Output {
	return pulumi.ToOutputWithContext(ctx, i).(BaremetalServerIpv6Output)
}

func (i BaremetalServerIpv6Args) ToOutput(ctx context.Context) pulumix.Output[BaremetalServerIpv6] {
	return pulumix.Output[BaremetalServerIpv6]{
		OutputState: i.ToBaremetalServerIpv6OutputWithContext(ctx).OutputState,
	}
}

// BaremetalServerIpv6ArrayInput is an input type that accepts BaremetalServerIpv6Array and BaremetalServerIpv6ArrayOutput values.
// You can construct a concrete instance of `BaremetalServerIpv6ArrayInput` via:
//
//	BaremetalServerIpv6Array{ BaremetalServerIpv6Args{...} }
type BaremetalServerIpv6ArrayInput interface {
	pulumi.Input

	ToBaremetalServerIpv6ArrayOutput() BaremetalServerIpv6ArrayOutput
	ToBaremetalServerIpv6ArrayOutputWithContext(context.Context) BaremetalServerIpv6ArrayOutput
}

type BaremetalServerIpv6Array []BaremetalServerIpv6Input

func (BaremetalServerIpv6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BaremetalServerIpv6)(nil)).Elem()
}

func (i BaremetalServerIpv6Array) ToBaremetalServerIpv6ArrayOutput() BaremetalServerIpv6ArrayOutput {
	return i.ToBaremetalServerIpv6ArrayOutputWithContext(context.Background())
}

func (i BaremetalServerIpv6Array) ToBaremetalServerIpv6ArrayOutputWithContext(ctx context.Context) BaremetalServerIpv6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaremetalServerIpv6ArrayOutput)
}

func (i BaremetalServerIpv6Array) ToOutput(ctx context.Context) pulumix.Output[[]BaremetalServerIpv6] {
	return pulumix.Output[[]BaremetalServerIpv6]{
		OutputState: i.ToBaremetalServerIpv6ArrayOutputWithContext(ctx).OutputState,
	}
}

type BaremetalServerIpv6Output struct{ *pulumi.OutputState }

func (BaremetalServerIpv6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*BaremetalServerIpv6)(nil)).Elem()
}

func (o BaremetalServerIpv6Output) ToBaremetalServerIpv6Output() BaremetalServerIpv6Output {
	return o
}

func (o BaremetalServerIpv6Output) ToBaremetalServerIpv6OutputWithContext(ctx context.Context) BaremetalServerIpv6Output {
	return o
}

func (o BaremetalServerIpv6Output) ToOutput(ctx context.Context) pulumix.Output[BaremetalServerIpv6] {
	return pulumix.Output[BaremetalServerIpv6]{
		OutputState: o.OutputState,
	}
}

// The address of the IPv6.
func (o BaremetalServerIpv6Output) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaremetalServerIpv6) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The id of the private network to attach.
func (o BaremetalServerIpv6Output) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaremetalServerIpv6) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The reverse of the IPv6.
func (o BaremetalServerIpv6Output) Reverse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaremetalServerIpv6) *string { return v.Reverse }).(pulumi.StringPtrOutput)
}

// The type of the IPv6.
func (o BaremetalServerIpv6Output) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaremetalServerIpv6) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type BaremetalServerIpv6ArrayOutput struct{ *pulumi.OutputState }

func (BaremetalServerIpv6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BaremetalServerIpv6)(nil)).Elem()
}

func (o BaremetalServerIpv6ArrayOutput) ToBaremetalServerIpv6ArrayOutput() BaremetalServerIpv6ArrayOutput {
	return o
}

func (o BaremetalServerIpv6ArrayOutput) ToBaremetalServerIpv6ArrayOutputWithContext(ctx context.Context) BaremetalServerIpv6ArrayOutput {
	return o
}

func (o BaremetalServerIpv6ArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BaremetalServerIpv6] {
	return pulumix.Output[[]BaremetalServerIpv6]{
		OutputState: o.OutputState,
	}
}

func (o BaremetalServerIpv6ArrayOutput) Index(i pulumi.IntInput) BaremetalServerIpv6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BaremetalServerIpv6 {
		return vs[0].([]BaremetalServerIpv6)[vs[1].(int)]
	}).(BaremetalServerIpv6Output)
}

type BaremetalServerOption struct {
	// The auto expiration date for compatible options
	ExpiresAt *string `pulumi:"expiresAt"`
	// The id of the private network to attach.
	Id string `pulumi:"id"`
	// The name of the server.
	Name *string `pulumi:"name"`
}

// BaremetalServerOptionInput is an input type that accepts BaremetalServerOptionArgs and BaremetalServerOptionOutput values.
// You can construct a concrete instance of `BaremetalServerOptionInput` via:
//
//	BaremetalServerOptionArgs{...}
type BaremetalServerOptionInput interface {
	pulumi.Input

	ToBaremetalServerOptionOutput() BaremetalServerOptionOutput
	ToBaremetalServerOptionOutputWithContext(context.Context) BaremetalServerOptionOutput
}

type BaremetalServerOptionArgs struct {
	// The auto expiration date for compatible options
	ExpiresAt pulumi.StringPtrInput `pulumi:"expiresAt"`
	// The id of the private network to attach.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the server.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (BaremetalServerOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BaremetalServerOption)(nil)).Elem()
}

func (i BaremetalServerOptionArgs) ToBaremetalServerOptionOutput() BaremetalServerOptionOutput {
	return i.ToBaremetalServerOptionOutputWithContext(context.Background())
}

func (i BaremetalServerOptionArgs) ToBaremetalServerOptionOutputWithContext(ctx context.Context) BaremetalServerOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaremetalServerOptionOutput)
}

func (i BaremetalServerOptionArgs) ToOutput(ctx context.Context) pulumix.Output[BaremetalServerOption] {
	return pulumix.Output[BaremetalServerOption]{
		OutputState: i.ToBaremetalServerOptionOutputWithContext(ctx).OutputState,
	}
}

// BaremetalServerOptionArrayInput is an input type that accepts BaremetalServerOptionArray and BaremetalServerOptionArrayOutput values.
// You can construct a concrete instance of `BaremetalServerOptionArrayInput` via:
//
//	BaremetalServerOptionArray{ BaremetalServerOptionArgs{...} }
type BaremetalServerOptionArrayInput interface {
	pulumi.Input

	ToBaremetalServerOptionArrayOutput() BaremetalServerOptionArrayOutput
	ToBaremetalServerOptionArrayOutputWithContext(context.Context) BaremetalServerOptionArrayOutput
}

type BaremetalServerOptionArray []BaremetalServerOptionInput

func (BaremetalServerOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BaremetalServerOption)(nil)).Elem()
}

func (i BaremetalServerOptionArray) ToBaremetalServerOptionArrayOutput() BaremetalServerOptionArrayOutput {
	return i.ToBaremetalServerOptionArrayOutputWithContext(context.Background())
}

func (i BaremetalServerOptionArray) ToBaremetalServerOptionArrayOutputWithContext(ctx context.Context) BaremetalServerOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaremetalServerOptionArrayOutput)
}

func (i BaremetalServerOptionArray) ToOutput(ctx context.Context) pulumix.Output[[]BaremetalServerOption] {
	return pulumix.Output[[]BaremetalServerOption]{
		OutputState: i.ToBaremetalServerOptionArrayOutputWithContext(ctx).OutputState,
	}
}

type BaremetalServerOptionOutput struct{ *pulumi.OutputState }

func (BaremetalServerOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BaremetalServerOption)(nil)).Elem()
}

func (o BaremetalServerOptionOutput) ToBaremetalServerOptionOutput() BaremetalServerOptionOutput {
	return o
}

func (o BaremetalServerOptionOutput) ToBaremetalServerOptionOutputWithContext(ctx context.Context) BaremetalServerOptionOutput {
	return o
}

func (o BaremetalServerOptionOutput) ToOutput(ctx context.Context) pulumix.Output[BaremetalServerOption] {
	return pulumix.Output[BaremetalServerOption]{
		OutputState: o.OutputState,
	}
}

// The auto expiration date for compatible options
func (o BaremetalServerOptionOutput) ExpiresAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaremetalServerOption) *string { return v.ExpiresAt }).(pulumi.StringPtrOutput)
}

// The id of the private network to attach.
func (o BaremetalServerOptionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v BaremetalServerOption) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the server.
func (o BaremetalServerOptionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaremetalServerOption) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type BaremetalServerOptionArrayOutput struct{ *pulumi.OutputState }

func (BaremetalServerOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BaremetalServerOption)(nil)).Elem()
}

func (o BaremetalServerOptionArrayOutput) ToBaremetalServerOptionArrayOutput() BaremetalServerOptionArrayOutput {
	return o
}

func (o BaremetalServerOptionArrayOutput) ToBaremetalServerOptionArrayOutputWithContext(ctx context.Context) BaremetalServerOptionArrayOutput {
	return o
}

func (o BaremetalServerOptionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BaremetalServerOption] {
	return pulumix.Output[[]BaremetalServerOption]{
		OutputState: o.OutputState,
	}
}

func (o BaremetalServerOptionArrayOutput) Index(i pulumi.IntInput) BaremetalServerOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BaremetalServerOption {
		return vs[0].([]BaremetalServerOption)[vs[1].(int)]
	}).(BaremetalServerOptionOutput)
}

type BaremetalServerPrivateNetwork struct {
	// The date and time of the creation of the private network.
	CreatedAt *string `pulumi:"createdAt"`
	// The id of the private network to attach.
	Id string `pulumi:"id"`
	// The private network status.
	Status *string `pulumi:"status"`
	// The date and time of the last update of the private network.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The VLAN ID associated to the private network.
	Vlan *int `pulumi:"vlan"`
}

// BaremetalServerPrivateNetworkInput is an input type that accepts BaremetalServerPrivateNetworkArgs and BaremetalServerPrivateNetworkOutput values.
// You can construct a concrete instance of `BaremetalServerPrivateNetworkInput` via:
//
//	BaremetalServerPrivateNetworkArgs{...}
type BaremetalServerPrivateNetworkInput interface {
	pulumi.Input

	ToBaremetalServerPrivateNetworkOutput() BaremetalServerPrivateNetworkOutput
	ToBaremetalServerPrivateNetworkOutputWithContext(context.Context) BaremetalServerPrivateNetworkOutput
}

type BaremetalServerPrivateNetworkArgs struct {
	// The date and time of the creation of the private network.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// The id of the private network to attach.
	Id pulumi.StringInput `pulumi:"id"`
	// The private network status.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The date and time of the last update of the private network.
	UpdatedAt pulumi.StringPtrInput `pulumi:"updatedAt"`
	// The VLAN ID associated to the private network.
	Vlan pulumi.IntPtrInput `pulumi:"vlan"`
}

func (BaremetalServerPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BaremetalServerPrivateNetwork)(nil)).Elem()
}

func (i BaremetalServerPrivateNetworkArgs) ToBaremetalServerPrivateNetworkOutput() BaremetalServerPrivateNetworkOutput {
	return i.ToBaremetalServerPrivateNetworkOutputWithContext(context.Background())
}

func (i BaremetalServerPrivateNetworkArgs) ToBaremetalServerPrivateNetworkOutputWithContext(ctx context.Context) BaremetalServerPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaremetalServerPrivateNetworkOutput)
}

func (i BaremetalServerPrivateNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[BaremetalServerPrivateNetwork] {
	return pulumix.Output[BaremetalServerPrivateNetwork]{
		OutputState: i.ToBaremetalServerPrivateNetworkOutputWithContext(ctx).OutputState,
	}
}

// BaremetalServerPrivateNetworkArrayInput is an input type that accepts BaremetalServerPrivateNetworkArray and BaremetalServerPrivateNetworkArrayOutput values.
// You can construct a concrete instance of `BaremetalServerPrivateNetworkArrayInput` via:
//
//	BaremetalServerPrivateNetworkArray{ BaremetalServerPrivateNetworkArgs{...} }
type BaremetalServerPrivateNetworkArrayInput interface {
	pulumi.Input

	ToBaremetalServerPrivateNetworkArrayOutput() BaremetalServerPrivateNetworkArrayOutput
	ToBaremetalServerPrivateNetworkArrayOutputWithContext(context.Context) BaremetalServerPrivateNetworkArrayOutput
}

type BaremetalServerPrivateNetworkArray []BaremetalServerPrivateNetworkInput

func (BaremetalServerPrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BaremetalServerPrivateNetwork)(nil)).Elem()
}

func (i BaremetalServerPrivateNetworkArray) ToBaremetalServerPrivateNetworkArrayOutput() BaremetalServerPrivateNetworkArrayOutput {
	return i.ToBaremetalServerPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i BaremetalServerPrivateNetworkArray) ToBaremetalServerPrivateNetworkArrayOutputWithContext(ctx context.Context) BaremetalServerPrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaremetalServerPrivateNetworkArrayOutput)
}

func (i BaremetalServerPrivateNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]BaremetalServerPrivateNetwork] {
	return pulumix.Output[[]BaremetalServerPrivateNetwork]{
		OutputState: i.ToBaremetalServerPrivateNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type BaremetalServerPrivateNetworkOutput struct{ *pulumi.OutputState }

func (BaremetalServerPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BaremetalServerPrivateNetwork)(nil)).Elem()
}

func (o BaremetalServerPrivateNetworkOutput) ToBaremetalServerPrivateNetworkOutput() BaremetalServerPrivateNetworkOutput {
	return o
}

func (o BaremetalServerPrivateNetworkOutput) ToBaremetalServerPrivateNetworkOutputWithContext(ctx context.Context) BaremetalServerPrivateNetworkOutput {
	return o
}

func (o BaremetalServerPrivateNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[BaremetalServerPrivateNetwork] {
	return pulumix.Output[BaremetalServerPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

// The date and time of the creation of the private network.
func (o BaremetalServerPrivateNetworkOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaremetalServerPrivateNetwork) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The id of the private network to attach.
func (o BaremetalServerPrivateNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v BaremetalServerPrivateNetwork) string { return v.Id }).(pulumi.StringOutput)
}

// The private network status.
func (o BaremetalServerPrivateNetworkOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaremetalServerPrivateNetwork) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The date and time of the last update of the private network.
func (o BaremetalServerPrivateNetworkOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaremetalServerPrivateNetwork) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

// The VLAN ID associated to the private network.
func (o BaremetalServerPrivateNetworkOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BaremetalServerPrivateNetwork) *int { return v.Vlan }).(pulumi.IntPtrOutput)
}

type BaremetalServerPrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (BaremetalServerPrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BaremetalServerPrivateNetwork)(nil)).Elem()
}

func (o BaremetalServerPrivateNetworkArrayOutput) ToBaremetalServerPrivateNetworkArrayOutput() BaremetalServerPrivateNetworkArrayOutput {
	return o
}

func (o BaremetalServerPrivateNetworkArrayOutput) ToBaremetalServerPrivateNetworkArrayOutputWithContext(ctx context.Context) BaremetalServerPrivateNetworkArrayOutput {
	return o
}

func (o BaremetalServerPrivateNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BaremetalServerPrivateNetwork] {
	return pulumix.Output[[]BaremetalServerPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o BaremetalServerPrivateNetworkArrayOutput) Index(i pulumi.IntInput) BaremetalServerPrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BaremetalServerPrivateNetwork {
		return vs[0].([]BaremetalServerPrivateNetwork)[vs[1].(int)]
	}).(BaremetalServerPrivateNetworkOutput)
}

type CockpitEndpoint struct {
	// The alertmanager URL
	AlertmanagerUrl *string `pulumi:"alertmanagerUrl"`
	// The grafana URL
	GrafanaUrl *string `pulumi:"grafanaUrl"`
	// The logs URL
	LogsUrl *string `pulumi:"logsUrl"`
	// The metrics URL
	MetricsUrl *string `pulumi:"metricsUrl"`
}

// CockpitEndpointInput is an input type that accepts CockpitEndpointArgs and CockpitEndpointOutput values.
// You can construct a concrete instance of `CockpitEndpointInput` via:
//
//	CockpitEndpointArgs{...}
type CockpitEndpointInput interface {
	pulumi.Input

	ToCockpitEndpointOutput() CockpitEndpointOutput
	ToCockpitEndpointOutputWithContext(context.Context) CockpitEndpointOutput
}

type CockpitEndpointArgs struct {
	// The alertmanager URL
	AlertmanagerUrl pulumi.StringPtrInput `pulumi:"alertmanagerUrl"`
	// The grafana URL
	GrafanaUrl pulumi.StringPtrInput `pulumi:"grafanaUrl"`
	// The logs URL
	LogsUrl pulumi.StringPtrInput `pulumi:"logsUrl"`
	// The metrics URL
	MetricsUrl pulumi.StringPtrInput `pulumi:"metricsUrl"`
}

func (CockpitEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CockpitEndpoint)(nil)).Elem()
}

func (i CockpitEndpointArgs) ToCockpitEndpointOutput() CockpitEndpointOutput {
	return i.ToCockpitEndpointOutputWithContext(context.Background())
}

func (i CockpitEndpointArgs) ToCockpitEndpointOutputWithContext(ctx context.Context) CockpitEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitEndpointOutput)
}

func (i CockpitEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[CockpitEndpoint] {
	return pulumix.Output[CockpitEndpoint]{
		OutputState: i.ToCockpitEndpointOutputWithContext(ctx).OutputState,
	}
}

// CockpitEndpointArrayInput is an input type that accepts CockpitEndpointArray and CockpitEndpointArrayOutput values.
// You can construct a concrete instance of `CockpitEndpointArrayInput` via:
//
//	CockpitEndpointArray{ CockpitEndpointArgs{...} }
type CockpitEndpointArrayInput interface {
	pulumi.Input

	ToCockpitEndpointArrayOutput() CockpitEndpointArrayOutput
	ToCockpitEndpointArrayOutputWithContext(context.Context) CockpitEndpointArrayOutput
}

type CockpitEndpointArray []CockpitEndpointInput

func (CockpitEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CockpitEndpoint)(nil)).Elem()
}

func (i CockpitEndpointArray) ToCockpitEndpointArrayOutput() CockpitEndpointArrayOutput {
	return i.ToCockpitEndpointArrayOutputWithContext(context.Background())
}

func (i CockpitEndpointArray) ToCockpitEndpointArrayOutputWithContext(ctx context.Context) CockpitEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitEndpointArrayOutput)
}

func (i CockpitEndpointArray) ToOutput(ctx context.Context) pulumix.Output[[]CockpitEndpoint] {
	return pulumix.Output[[]CockpitEndpoint]{
		OutputState: i.ToCockpitEndpointArrayOutputWithContext(ctx).OutputState,
	}
}

type CockpitEndpointOutput struct{ *pulumi.OutputState }

func (CockpitEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CockpitEndpoint)(nil)).Elem()
}

func (o CockpitEndpointOutput) ToCockpitEndpointOutput() CockpitEndpointOutput {
	return o
}

func (o CockpitEndpointOutput) ToCockpitEndpointOutputWithContext(ctx context.Context) CockpitEndpointOutput {
	return o
}

func (o CockpitEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[CockpitEndpoint] {
	return pulumix.Output[CockpitEndpoint]{
		OutputState: o.OutputState,
	}
}

// The alertmanager URL
func (o CockpitEndpointOutput) AlertmanagerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CockpitEndpoint) *string { return v.AlertmanagerUrl }).(pulumi.StringPtrOutput)
}

// The grafana URL
func (o CockpitEndpointOutput) GrafanaUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CockpitEndpoint) *string { return v.GrafanaUrl }).(pulumi.StringPtrOutput)
}

// The logs URL
func (o CockpitEndpointOutput) LogsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CockpitEndpoint) *string { return v.LogsUrl }).(pulumi.StringPtrOutput)
}

// The metrics URL
func (o CockpitEndpointOutput) MetricsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CockpitEndpoint) *string { return v.MetricsUrl }).(pulumi.StringPtrOutput)
}

type CockpitEndpointArrayOutput struct{ *pulumi.OutputState }

func (CockpitEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CockpitEndpoint)(nil)).Elem()
}

func (o CockpitEndpointArrayOutput) ToCockpitEndpointArrayOutput() CockpitEndpointArrayOutput {
	return o
}

func (o CockpitEndpointArrayOutput) ToCockpitEndpointArrayOutputWithContext(ctx context.Context) CockpitEndpointArrayOutput {
	return o
}

func (o CockpitEndpointArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CockpitEndpoint] {
	return pulumix.Output[[]CockpitEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o CockpitEndpointArrayOutput) Index(i pulumi.IntInput) CockpitEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CockpitEndpoint {
		return vs[0].([]CockpitEndpoint)[vs[1].(int)]
	}).(CockpitEndpointOutput)
}

type CockpitTokenScopes struct {
	// Query logs
	QueryLogs *bool `pulumi:"queryLogs"`
	// Query metrics
	QueryMetrics *bool `pulumi:"queryMetrics"`
	// Setup alerts
	SetupAlerts *bool `pulumi:"setupAlerts"`
	// Setup logs rules
	SetupLogsRules *bool `pulumi:"setupLogsRules"`
	// Setup metrics rules
	SetupMetricsRules *bool `pulumi:"setupMetricsRules"`
	// Write logs
	WriteLogs *bool `pulumi:"writeLogs"`
	// Write metrics
	WriteMetrics *bool `pulumi:"writeMetrics"`
}

// CockpitTokenScopesInput is an input type that accepts CockpitTokenScopesArgs and CockpitTokenScopesOutput values.
// You can construct a concrete instance of `CockpitTokenScopesInput` via:
//
//	CockpitTokenScopesArgs{...}
type CockpitTokenScopesInput interface {
	pulumi.Input

	ToCockpitTokenScopesOutput() CockpitTokenScopesOutput
	ToCockpitTokenScopesOutputWithContext(context.Context) CockpitTokenScopesOutput
}

type CockpitTokenScopesArgs struct {
	// Query logs
	QueryLogs pulumi.BoolPtrInput `pulumi:"queryLogs"`
	// Query metrics
	QueryMetrics pulumi.BoolPtrInput `pulumi:"queryMetrics"`
	// Setup alerts
	SetupAlerts pulumi.BoolPtrInput `pulumi:"setupAlerts"`
	// Setup logs rules
	SetupLogsRules pulumi.BoolPtrInput `pulumi:"setupLogsRules"`
	// Setup metrics rules
	SetupMetricsRules pulumi.BoolPtrInput `pulumi:"setupMetricsRules"`
	// Write logs
	WriteLogs pulumi.BoolPtrInput `pulumi:"writeLogs"`
	// Write metrics
	WriteMetrics pulumi.BoolPtrInput `pulumi:"writeMetrics"`
}

func (CockpitTokenScopesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CockpitTokenScopes)(nil)).Elem()
}

func (i CockpitTokenScopesArgs) ToCockpitTokenScopesOutput() CockpitTokenScopesOutput {
	return i.ToCockpitTokenScopesOutputWithContext(context.Background())
}

func (i CockpitTokenScopesArgs) ToCockpitTokenScopesOutputWithContext(ctx context.Context) CockpitTokenScopesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitTokenScopesOutput)
}

func (i CockpitTokenScopesArgs) ToOutput(ctx context.Context) pulumix.Output[CockpitTokenScopes] {
	return pulumix.Output[CockpitTokenScopes]{
		OutputState: i.ToCockpitTokenScopesOutputWithContext(ctx).OutputState,
	}
}

func (i CockpitTokenScopesArgs) ToCockpitTokenScopesPtrOutput() CockpitTokenScopesPtrOutput {
	return i.ToCockpitTokenScopesPtrOutputWithContext(context.Background())
}

func (i CockpitTokenScopesArgs) ToCockpitTokenScopesPtrOutputWithContext(ctx context.Context) CockpitTokenScopesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitTokenScopesOutput).ToCockpitTokenScopesPtrOutputWithContext(ctx)
}

// CockpitTokenScopesPtrInput is an input type that accepts CockpitTokenScopesArgs, CockpitTokenScopesPtr and CockpitTokenScopesPtrOutput values.
// You can construct a concrete instance of `CockpitTokenScopesPtrInput` via:
//
//	        CockpitTokenScopesArgs{...}
//
//	or:
//
//	        nil
type CockpitTokenScopesPtrInput interface {
	pulumi.Input

	ToCockpitTokenScopesPtrOutput() CockpitTokenScopesPtrOutput
	ToCockpitTokenScopesPtrOutputWithContext(context.Context) CockpitTokenScopesPtrOutput
}

type cockpitTokenScopesPtrType CockpitTokenScopesArgs

func CockpitTokenScopesPtr(v *CockpitTokenScopesArgs) CockpitTokenScopesPtrInput {
	return (*cockpitTokenScopesPtrType)(v)
}

func (*cockpitTokenScopesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CockpitTokenScopes)(nil)).Elem()
}

func (i *cockpitTokenScopesPtrType) ToCockpitTokenScopesPtrOutput() CockpitTokenScopesPtrOutput {
	return i.ToCockpitTokenScopesPtrOutputWithContext(context.Background())
}

func (i *cockpitTokenScopesPtrType) ToCockpitTokenScopesPtrOutputWithContext(ctx context.Context) CockpitTokenScopesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitTokenScopesPtrOutput)
}

func (i *cockpitTokenScopesPtrType) ToOutput(ctx context.Context) pulumix.Output[*CockpitTokenScopes] {
	return pulumix.Output[*CockpitTokenScopes]{
		OutputState: i.ToCockpitTokenScopesPtrOutputWithContext(ctx).OutputState,
	}
}

type CockpitTokenScopesOutput struct{ *pulumi.OutputState }

func (CockpitTokenScopesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CockpitTokenScopes)(nil)).Elem()
}

func (o CockpitTokenScopesOutput) ToCockpitTokenScopesOutput() CockpitTokenScopesOutput {
	return o
}

func (o CockpitTokenScopesOutput) ToCockpitTokenScopesOutputWithContext(ctx context.Context) CockpitTokenScopesOutput {
	return o
}

func (o CockpitTokenScopesOutput) ToCockpitTokenScopesPtrOutput() CockpitTokenScopesPtrOutput {
	return o.ToCockpitTokenScopesPtrOutputWithContext(context.Background())
}

func (o CockpitTokenScopesOutput) ToCockpitTokenScopesPtrOutputWithContext(ctx context.Context) CockpitTokenScopesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CockpitTokenScopes) *CockpitTokenScopes {
		return &v
	}).(CockpitTokenScopesPtrOutput)
}

func (o CockpitTokenScopesOutput) ToOutput(ctx context.Context) pulumix.Output[CockpitTokenScopes] {
	return pulumix.Output[CockpitTokenScopes]{
		OutputState: o.OutputState,
	}
}

// Query logs
func (o CockpitTokenScopesOutput) QueryLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CockpitTokenScopes) *bool { return v.QueryLogs }).(pulumi.BoolPtrOutput)
}

// Query metrics
func (o CockpitTokenScopesOutput) QueryMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CockpitTokenScopes) *bool { return v.QueryMetrics }).(pulumi.BoolPtrOutput)
}

// Setup alerts
func (o CockpitTokenScopesOutput) SetupAlerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CockpitTokenScopes) *bool { return v.SetupAlerts }).(pulumi.BoolPtrOutput)
}

// Setup logs rules
func (o CockpitTokenScopesOutput) SetupLogsRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CockpitTokenScopes) *bool { return v.SetupLogsRules }).(pulumi.BoolPtrOutput)
}

// Setup metrics rules
func (o CockpitTokenScopesOutput) SetupMetricsRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CockpitTokenScopes) *bool { return v.SetupMetricsRules }).(pulumi.BoolPtrOutput)
}

// Write logs
func (o CockpitTokenScopesOutput) WriteLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CockpitTokenScopes) *bool { return v.WriteLogs }).(pulumi.BoolPtrOutput)
}

// Write metrics
func (o CockpitTokenScopesOutput) WriteMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CockpitTokenScopes) *bool { return v.WriteMetrics }).(pulumi.BoolPtrOutput)
}

type CockpitTokenScopesPtrOutput struct{ *pulumi.OutputState }

func (CockpitTokenScopesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CockpitTokenScopes)(nil)).Elem()
}

func (o CockpitTokenScopesPtrOutput) ToCockpitTokenScopesPtrOutput() CockpitTokenScopesPtrOutput {
	return o
}

func (o CockpitTokenScopesPtrOutput) ToCockpitTokenScopesPtrOutputWithContext(ctx context.Context) CockpitTokenScopesPtrOutput {
	return o
}

func (o CockpitTokenScopesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CockpitTokenScopes] {
	return pulumix.Output[*CockpitTokenScopes]{
		OutputState: o.OutputState,
	}
}

func (o CockpitTokenScopesPtrOutput) Elem() CockpitTokenScopesOutput {
	return o.ApplyT(func(v *CockpitTokenScopes) CockpitTokenScopes {
		if v != nil {
			return *v
		}
		var ret CockpitTokenScopes
		return ret
	}).(CockpitTokenScopesOutput)
}

// Query logs
func (o CockpitTokenScopesPtrOutput) QueryLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CockpitTokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.QueryLogs
	}).(pulumi.BoolPtrOutput)
}

// Query metrics
func (o CockpitTokenScopesPtrOutput) QueryMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CockpitTokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.QueryMetrics
	}).(pulumi.BoolPtrOutput)
}

// Setup alerts
func (o CockpitTokenScopesPtrOutput) SetupAlerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CockpitTokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.SetupAlerts
	}).(pulumi.BoolPtrOutput)
}

// Setup logs rules
func (o CockpitTokenScopesPtrOutput) SetupLogsRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CockpitTokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.SetupLogsRules
	}).(pulumi.BoolPtrOutput)
}

// Setup metrics rules
func (o CockpitTokenScopesPtrOutput) SetupMetricsRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CockpitTokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.SetupMetricsRules
	}).(pulumi.BoolPtrOutput)
}

// Write logs
func (o CockpitTokenScopesPtrOutput) WriteLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CockpitTokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.WriteLogs
	}).(pulumi.BoolPtrOutput)
}

// Write metrics
func (o CockpitTokenScopesPtrOutput) WriteMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CockpitTokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.WriteMetrics
	}).(pulumi.BoolPtrOutput)
}

type ContainerTriggerSqs struct {
	// ID of the mnq namespace
	NamespaceId string `pulumi:"namespaceId"`
	// ID of the project that contain the mnq namespace, defaults to provider's project
	ProjectId *string `pulumi:"projectId"`
	// Name of the queue
	Queue string `pulumi:"queue"`
	// `region`). The region in which the namespace should be created.
	Region *string `pulumi:"region"`
}

// ContainerTriggerSqsInput is an input type that accepts ContainerTriggerSqsArgs and ContainerTriggerSqsOutput values.
// You can construct a concrete instance of `ContainerTriggerSqsInput` via:
//
//	ContainerTriggerSqsArgs{...}
type ContainerTriggerSqsInput interface {
	pulumi.Input

	ToContainerTriggerSqsOutput() ContainerTriggerSqsOutput
	ToContainerTriggerSqsOutputWithContext(context.Context) ContainerTriggerSqsOutput
}

type ContainerTriggerSqsArgs struct {
	// ID of the mnq namespace
	NamespaceId pulumi.StringInput `pulumi:"namespaceId"`
	// ID of the project that contain the mnq namespace, defaults to provider's project
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Name of the queue
	Queue pulumi.StringInput `pulumi:"queue"`
	// `region`). The region in which the namespace should be created.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (ContainerTriggerSqsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerTriggerSqs)(nil)).Elem()
}

func (i ContainerTriggerSqsArgs) ToContainerTriggerSqsOutput() ContainerTriggerSqsOutput {
	return i.ToContainerTriggerSqsOutputWithContext(context.Background())
}

func (i ContainerTriggerSqsArgs) ToContainerTriggerSqsOutputWithContext(ctx context.Context) ContainerTriggerSqsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerTriggerSqsOutput)
}

func (i ContainerTriggerSqsArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerTriggerSqs] {
	return pulumix.Output[ContainerTriggerSqs]{
		OutputState: i.ToContainerTriggerSqsOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerTriggerSqsArgs) ToContainerTriggerSqsPtrOutput() ContainerTriggerSqsPtrOutput {
	return i.ToContainerTriggerSqsPtrOutputWithContext(context.Background())
}

func (i ContainerTriggerSqsArgs) ToContainerTriggerSqsPtrOutputWithContext(ctx context.Context) ContainerTriggerSqsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerTriggerSqsOutput).ToContainerTriggerSqsPtrOutputWithContext(ctx)
}

// ContainerTriggerSqsPtrInput is an input type that accepts ContainerTriggerSqsArgs, ContainerTriggerSqsPtr and ContainerTriggerSqsPtrOutput values.
// You can construct a concrete instance of `ContainerTriggerSqsPtrInput` via:
//
//	        ContainerTriggerSqsArgs{...}
//
//	or:
//
//	        nil
type ContainerTriggerSqsPtrInput interface {
	pulumi.Input

	ToContainerTriggerSqsPtrOutput() ContainerTriggerSqsPtrOutput
	ToContainerTriggerSqsPtrOutputWithContext(context.Context) ContainerTriggerSqsPtrOutput
}

type containerTriggerSqsPtrType ContainerTriggerSqsArgs

func ContainerTriggerSqsPtr(v *ContainerTriggerSqsArgs) ContainerTriggerSqsPtrInput {
	return (*containerTriggerSqsPtrType)(v)
}

func (*containerTriggerSqsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerTriggerSqs)(nil)).Elem()
}

func (i *containerTriggerSqsPtrType) ToContainerTriggerSqsPtrOutput() ContainerTriggerSqsPtrOutput {
	return i.ToContainerTriggerSqsPtrOutputWithContext(context.Background())
}

func (i *containerTriggerSqsPtrType) ToContainerTriggerSqsPtrOutputWithContext(ctx context.Context) ContainerTriggerSqsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerTriggerSqsPtrOutput)
}

func (i *containerTriggerSqsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerTriggerSqs] {
	return pulumix.Output[*ContainerTriggerSqs]{
		OutputState: i.ToContainerTriggerSqsPtrOutputWithContext(ctx).OutputState,
	}
}

type ContainerTriggerSqsOutput struct{ *pulumi.OutputState }

func (ContainerTriggerSqsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerTriggerSqs)(nil)).Elem()
}

func (o ContainerTriggerSqsOutput) ToContainerTriggerSqsOutput() ContainerTriggerSqsOutput {
	return o
}

func (o ContainerTriggerSqsOutput) ToContainerTriggerSqsOutputWithContext(ctx context.Context) ContainerTriggerSqsOutput {
	return o
}

func (o ContainerTriggerSqsOutput) ToContainerTriggerSqsPtrOutput() ContainerTriggerSqsPtrOutput {
	return o.ToContainerTriggerSqsPtrOutputWithContext(context.Background())
}

func (o ContainerTriggerSqsOutput) ToContainerTriggerSqsPtrOutputWithContext(ctx context.Context) ContainerTriggerSqsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerTriggerSqs) *ContainerTriggerSqs {
		return &v
	}).(ContainerTriggerSqsPtrOutput)
}

func (o ContainerTriggerSqsOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerTriggerSqs] {
	return pulumix.Output[ContainerTriggerSqs]{
		OutputState: o.OutputState,
	}
}

// ID of the mnq namespace
func (o ContainerTriggerSqsOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerTriggerSqs) string { return v.NamespaceId }).(pulumi.StringOutput)
}

// ID of the project that contain the mnq namespace, defaults to provider's project
func (o ContainerTriggerSqsOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerTriggerSqs) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Name of the queue
func (o ContainerTriggerSqsOutput) Queue() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerTriggerSqs) string { return v.Queue }).(pulumi.StringOutput)
}

// `region`). The region in which the namespace should be created.
func (o ContainerTriggerSqsOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerTriggerSqs) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type ContainerTriggerSqsPtrOutput struct{ *pulumi.OutputState }

func (ContainerTriggerSqsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerTriggerSqs)(nil)).Elem()
}

func (o ContainerTriggerSqsPtrOutput) ToContainerTriggerSqsPtrOutput() ContainerTriggerSqsPtrOutput {
	return o
}

func (o ContainerTriggerSqsPtrOutput) ToContainerTriggerSqsPtrOutputWithContext(ctx context.Context) ContainerTriggerSqsPtrOutput {
	return o
}

func (o ContainerTriggerSqsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerTriggerSqs] {
	return pulumix.Output[*ContainerTriggerSqs]{
		OutputState: o.OutputState,
	}
}

func (o ContainerTriggerSqsPtrOutput) Elem() ContainerTriggerSqsOutput {
	return o.ApplyT(func(v *ContainerTriggerSqs) ContainerTriggerSqs {
		if v != nil {
			return *v
		}
		var ret ContainerTriggerSqs
		return ret
	}).(ContainerTriggerSqsOutput)
}

// ID of the mnq namespace
func (o ContainerTriggerSqsPtrOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerTriggerSqs) *string {
		if v == nil {
			return nil
		}
		return &v.NamespaceId
	}).(pulumi.StringPtrOutput)
}

// ID of the project that contain the mnq namespace, defaults to provider's project
func (o ContainerTriggerSqsPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerTriggerSqs) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Name of the queue
func (o ContainerTriggerSqsPtrOutput) Queue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerTriggerSqs) *string {
		if v == nil {
			return nil
		}
		return &v.Queue
	}).(pulumi.StringPtrOutput)
}

// `region`). The region in which the namespace should be created.
func (o ContainerTriggerSqsPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerTriggerSqs) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

type DocumentDBReadReplicaDirectAccess struct {
	EndpointId *string `pulumi:"endpointId"`
	Hostname   *string `pulumi:"hostname"`
	Ip         *string `pulumi:"ip"`
	Name       *string `pulumi:"name"`
	Port       *int    `pulumi:"port"`
}

// DocumentDBReadReplicaDirectAccessInput is an input type that accepts DocumentDBReadReplicaDirectAccessArgs and DocumentDBReadReplicaDirectAccessOutput values.
// You can construct a concrete instance of `DocumentDBReadReplicaDirectAccessInput` via:
//
//	DocumentDBReadReplicaDirectAccessArgs{...}
type DocumentDBReadReplicaDirectAccessInput interface {
	pulumi.Input

	ToDocumentDBReadReplicaDirectAccessOutput() DocumentDBReadReplicaDirectAccessOutput
	ToDocumentDBReadReplicaDirectAccessOutputWithContext(context.Context) DocumentDBReadReplicaDirectAccessOutput
}

type DocumentDBReadReplicaDirectAccessArgs struct {
	EndpointId pulumi.StringPtrInput `pulumi:"endpointId"`
	Hostname   pulumi.StringPtrInput `pulumi:"hostname"`
	Ip         pulumi.StringPtrInput `pulumi:"ip"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	Port       pulumi.IntPtrInput    `pulumi:"port"`
}

func (DocumentDBReadReplicaDirectAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDBReadReplicaDirectAccess)(nil)).Elem()
}

func (i DocumentDBReadReplicaDirectAccessArgs) ToDocumentDBReadReplicaDirectAccessOutput() DocumentDBReadReplicaDirectAccessOutput {
	return i.ToDocumentDBReadReplicaDirectAccessOutputWithContext(context.Background())
}

func (i DocumentDBReadReplicaDirectAccessArgs) ToDocumentDBReadReplicaDirectAccessOutputWithContext(ctx context.Context) DocumentDBReadReplicaDirectAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDBReadReplicaDirectAccessOutput)
}

func (i DocumentDBReadReplicaDirectAccessArgs) ToOutput(ctx context.Context) pulumix.Output[DocumentDBReadReplicaDirectAccess] {
	return pulumix.Output[DocumentDBReadReplicaDirectAccess]{
		OutputState: i.ToDocumentDBReadReplicaDirectAccessOutputWithContext(ctx).OutputState,
	}
}

func (i DocumentDBReadReplicaDirectAccessArgs) ToDocumentDBReadReplicaDirectAccessPtrOutput() DocumentDBReadReplicaDirectAccessPtrOutput {
	return i.ToDocumentDBReadReplicaDirectAccessPtrOutputWithContext(context.Background())
}

func (i DocumentDBReadReplicaDirectAccessArgs) ToDocumentDBReadReplicaDirectAccessPtrOutputWithContext(ctx context.Context) DocumentDBReadReplicaDirectAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDBReadReplicaDirectAccessOutput).ToDocumentDBReadReplicaDirectAccessPtrOutputWithContext(ctx)
}

// DocumentDBReadReplicaDirectAccessPtrInput is an input type that accepts DocumentDBReadReplicaDirectAccessArgs, DocumentDBReadReplicaDirectAccessPtr and DocumentDBReadReplicaDirectAccessPtrOutput values.
// You can construct a concrete instance of `DocumentDBReadReplicaDirectAccessPtrInput` via:
//
//	        DocumentDBReadReplicaDirectAccessArgs{...}
//
//	or:
//
//	        nil
type DocumentDBReadReplicaDirectAccessPtrInput interface {
	pulumi.Input

	ToDocumentDBReadReplicaDirectAccessPtrOutput() DocumentDBReadReplicaDirectAccessPtrOutput
	ToDocumentDBReadReplicaDirectAccessPtrOutputWithContext(context.Context) DocumentDBReadReplicaDirectAccessPtrOutput
}

type documentDBReadReplicaDirectAccessPtrType DocumentDBReadReplicaDirectAccessArgs

func DocumentDBReadReplicaDirectAccessPtr(v *DocumentDBReadReplicaDirectAccessArgs) DocumentDBReadReplicaDirectAccessPtrInput {
	return (*documentDBReadReplicaDirectAccessPtrType)(v)
}

func (*documentDBReadReplicaDirectAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentDBReadReplicaDirectAccess)(nil)).Elem()
}

func (i *documentDBReadReplicaDirectAccessPtrType) ToDocumentDBReadReplicaDirectAccessPtrOutput() DocumentDBReadReplicaDirectAccessPtrOutput {
	return i.ToDocumentDBReadReplicaDirectAccessPtrOutputWithContext(context.Background())
}

func (i *documentDBReadReplicaDirectAccessPtrType) ToDocumentDBReadReplicaDirectAccessPtrOutputWithContext(ctx context.Context) DocumentDBReadReplicaDirectAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDBReadReplicaDirectAccessPtrOutput)
}

func (i *documentDBReadReplicaDirectAccessPtrType) ToOutput(ctx context.Context) pulumix.Output[*DocumentDBReadReplicaDirectAccess] {
	return pulumix.Output[*DocumentDBReadReplicaDirectAccess]{
		OutputState: i.ToDocumentDBReadReplicaDirectAccessPtrOutputWithContext(ctx).OutputState,
	}
}

type DocumentDBReadReplicaDirectAccessOutput struct{ *pulumi.OutputState }

func (DocumentDBReadReplicaDirectAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDBReadReplicaDirectAccess)(nil)).Elem()
}

func (o DocumentDBReadReplicaDirectAccessOutput) ToDocumentDBReadReplicaDirectAccessOutput() DocumentDBReadReplicaDirectAccessOutput {
	return o
}

func (o DocumentDBReadReplicaDirectAccessOutput) ToDocumentDBReadReplicaDirectAccessOutputWithContext(ctx context.Context) DocumentDBReadReplicaDirectAccessOutput {
	return o
}

func (o DocumentDBReadReplicaDirectAccessOutput) ToDocumentDBReadReplicaDirectAccessPtrOutput() DocumentDBReadReplicaDirectAccessPtrOutput {
	return o.ToDocumentDBReadReplicaDirectAccessPtrOutputWithContext(context.Background())
}

func (o DocumentDBReadReplicaDirectAccessOutput) ToDocumentDBReadReplicaDirectAccessPtrOutputWithContext(ctx context.Context) DocumentDBReadReplicaDirectAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DocumentDBReadReplicaDirectAccess) *DocumentDBReadReplicaDirectAccess {
		return &v
	}).(DocumentDBReadReplicaDirectAccessPtrOutput)
}

func (o DocumentDBReadReplicaDirectAccessOutput) ToOutput(ctx context.Context) pulumix.Output[DocumentDBReadReplicaDirectAccess] {
	return pulumix.Output[DocumentDBReadReplicaDirectAccess]{
		OutputState: o.OutputState,
	}
}

func (o DocumentDBReadReplicaDirectAccessOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDBReadReplicaDirectAccess) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaDirectAccessOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDBReadReplicaDirectAccess) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaDirectAccessOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDBReadReplicaDirectAccess) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaDirectAccessOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDBReadReplicaDirectAccess) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaDirectAccessOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DocumentDBReadReplicaDirectAccess) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type DocumentDBReadReplicaDirectAccessPtrOutput struct{ *pulumi.OutputState }

func (DocumentDBReadReplicaDirectAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentDBReadReplicaDirectAccess)(nil)).Elem()
}

func (o DocumentDBReadReplicaDirectAccessPtrOutput) ToDocumentDBReadReplicaDirectAccessPtrOutput() DocumentDBReadReplicaDirectAccessPtrOutput {
	return o
}

func (o DocumentDBReadReplicaDirectAccessPtrOutput) ToDocumentDBReadReplicaDirectAccessPtrOutputWithContext(ctx context.Context) DocumentDBReadReplicaDirectAccessPtrOutput {
	return o
}

func (o DocumentDBReadReplicaDirectAccessPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DocumentDBReadReplicaDirectAccess] {
	return pulumix.Output[*DocumentDBReadReplicaDirectAccess]{
		OutputState: o.OutputState,
	}
}

func (o DocumentDBReadReplicaDirectAccessPtrOutput) Elem() DocumentDBReadReplicaDirectAccessOutput {
	return o.ApplyT(func(v *DocumentDBReadReplicaDirectAccess) DocumentDBReadReplicaDirectAccess {
		if v != nil {
			return *v
		}
		var ret DocumentDBReadReplicaDirectAccess
		return ret
	}).(DocumentDBReadReplicaDirectAccessOutput)
}

func (o DocumentDBReadReplicaDirectAccessPtrOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDBReadReplicaDirectAccess) *string {
		if v == nil {
			return nil
		}
		return v.EndpointId
	}).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaDirectAccessPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDBReadReplicaDirectAccess) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaDirectAccessPtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDBReadReplicaDirectAccess) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaDirectAccessPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDBReadReplicaDirectAccess) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaDirectAccessPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DocumentDBReadReplicaDirectAccess) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

type DocumentDBReadReplicaPrivateNetwork struct {
	EndpointId       *string `pulumi:"endpointId"`
	Hostname         *string `pulumi:"hostname"`
	Ip               *string `pulumi:"ip"`
	Name             *string `pulumi:"name"`
	Port             *int    `pulumi:"port"`
	PrivateNetworkId string  `pulumi:"privateNetworkId"`
	ServiceIp        *string `pulumi:"serviceIp"`
	Zone             *string `pulumi:"zone"`
}

// DocumentDBReadReplicaPrivateNetworkInput is an input type that accepts DocumentDBReadReplicaPrivateNetworkArgs and DocumentDBReadReplicaPrivateNetworkOutput values.
// You can construct a concrete instance of `DocumentDBReadReplicaPrivateNetworkInput` via:
//
//	DocumentDBReadReplicaPrivateNetworkArgs{...}
type DocumentDBReadReplicaPrivateNetworkInput interface {
	pulumi.Input

	ToDocumentDBReadReplicaPrivateNetworkOutput() DocumentDBReadReplicaPrivateNetworkOutput
	ToDocumentDBReadReplicaPrivateNetworkOutputWithContext(context.Context) DocumentDBReadReplicaPrivateNetworkOutput
}

type DocumentDBReadReplicaPrivateNetworkArgs struct {
	EndpointId       pulumi.StringPtrInput `pulumi:"endpointId"`
	Hostname         pulumi.StringPtrInput `pulumi:"hostname"`
	Ip               pulumi.StringPtrInput `pulumi:"ip"`
	Name             pulumi.StringPtrInput `pulumi:"name"`
	Port             pulumi.IntPtrInput    `pulumi:"port"`
	PrivateNetworkId pulumi.StringInput    `pulumi:"privateNetworkId"`
	ServiceIp        pulumi.StringPtrInput `pulumi:"serviceIp"`
	Zone             pulumi.StringPtrInput `pulumi:"zone"`
}

func (DocumentDBReadReplicaPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDBReadReplicaPrivateNetwork)(nil)).Elem()
}

func (i DocumentDBReadReplicaPrivateNetworkArgs) ToDocumentDBReadReplicaPrivateNetworkOutput() DocumentDBReadReplicaPrivateNetworkOutput {
	return i.ToDocumentDBReadReplicaPrivateNetworkOutputWithContext(context.Background())
}

func (i DocumentDBReadReplicaPrivateNetworkArgs) ToDocumentDBReadReplicaPrivateNetworkOutputWithContext(ctx context.Context) DocumentDBReadReplicaPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDBReadReplicaPrivateNetworkOutput)
}

func (i DocumentDBReadReplicaPrivateNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[DocumentDBReadReplicaPrivateNetwork] {
	return pulumix.Output[DocumentDBReadReplicaPrivateNetwork]{
		OutputState: i.ToDocumentDBReadReplicaPrivateNetworkOutputWithContext(ctx).OutputState,
	}
}

func (i DocumentDBReadReplicaPrivateNetworkArgs) ToDocumentDBReadReplicaPrivateNetworkPtrOutput() DocumentDBReadReplicaPrivateNetworkPtrOutput {
	return i.ToDocumentDBReadReplicaPrivateNetworkPtrOutputWithContext(context.Background())
}

func (i DocumentDBReadReplicaPrivateNetworkArgs) ToDocumentDBReadReplicaPrivateNetworkPtrOutputWithContext(ctx context.Context) DocumentDBReadReplicaPrivateNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDBReadReplicaPrivateNetworkOutput).ToDocumentDBReadReplicaPrivateNetworkPtrOutputWithContext(ctx)
}

// DocumentDBReadReplicaPrivateNetworkPtrInput is an input type that accepts DocumentDBReadReplicaPrivateNetworkArgs, DocumentDBReadReplicaPrivateNetworkPtr and DocumentDBReadReplicaPrivateNetworkPtrOutput values.
// You can construct a concrete instance of `DocumentDBReadReplicaPrivateNetworkPtrInput` via:
//
//	        DocumentDBReadReplicaPrivateNetworkArgs{...}
//
//	or:
//
//	        nil
type DocumentDBReadReplicaPrivateNetworkPtrInput interface {
	pulumi.Input

	ToDocumentDBReadReplicaPrivateNetworkPtrOutput() DocumentDBReadReplicaPrivateNetworkPtrOutput
	ToDocumentDBReadReplicaPrivateNetworkPtrOutputWithContext(context.Context) DocumentDBReadReplicaPrivateNetworkPtrOutput
}

type documentDBReadReplicaPrivateNetworkPtrType DocumentDBReadReplicaPrivateNetworkArgs

func DocumentDBReadReplicaPrivateNetworkPtr(v *DocumentDBReadReplicaPrivateNetworkArgs) DocumentDBReadReplicaPrivateNetworkPtrInput {
	return (*documentDBReadReplicaPrivateNetworkPtrType)(v)
}

func (*documentDBReadReplicaPrivateNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentDBReadReplicaPrivateNetwork)(nil)).Elem()
}

func (i *documentDBReadReplicaPrivateNetworkPtrType) ToDocumentDBReadReplicaPrivateNetworkPtrOutput() DocumentDBReadReplicaPrivateNetworkPtrOutput {
	return i.ToDocumentDBReadReplicaPrivateNetworkPtrOutputWithContext(context.Background())
}

func (i *documentDBReadReplicaPrivateNetworkPtrType) ToDocumentDBReadReplicaPrivateNetworkPtrOutputWithContext(ctx context.Context) DocumentDBReadReplicaPrivateNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDBReadReplicaPrivateNetworkPtrOutput)
}

func (i *documentDBReadReplicaPrivateNetworkPtrType) ToOutput(ctx context.Context) pulumix.Output[*DocumentDBReadReplicaPrivateNetwork] {
	return pulumix.Output[*DocumentDBReadReplicaPrivateNetwork]{
		OutputState: i.ToDocumentDBReadReplicaPrivateNetworkPtrOutputWithContext(ctx).OutputState,
	}
}

type DocumentDBReadReplicaPrivateNetworkOutput struct{ *pulumi.OutputState }

func (DocumentDBReadReplicaPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDBReadReplicaPrivateNetwork)(nil)).Elem()
}

func (o DocumentDBReadReplicaPrivateNetworkOutput) ToDocumentDBReadReplicaPrivateNetworkOutput() DocumentDBReadReplicaPrivateNetworkOutput {
	return o
}

func (o DocumentDBReadReplicaPrivateNetworkOutput) ToDocumentDBReadReplicaPrivateNetworkOutputWithContext(ctx context.Context) DocumentDBReadReplicaPrivateNetworkOutput {
	return o
}

func (o DocumentDBReadReplicaPrivateNetworkOutput) ToDocumentDBReadReplicaPrivateNetworkPtrOutput() DocumentDBReadReplicaPrivateNetworkPtrOutput {
	return o.ToDocumentDBReadReplicaPrivateNetworkPtrOutputWithContext(context.Background())
}

func (o DocumentDBReadReplicaPrivateNetworkOutput) ToDocumentDBReadReplicaPrivateNetworkPtrOutputWithContext(ctx context.Context) DocumentDBReadReplicaPrivateNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DocumentDBReadReplicaPrivateNetwork) *DocumentDBReadReplicaPrivateNetwork {
		return &v
	}).(DocumentDBReadReplicaPrivateNetworkPtrOutput)
}

func (o DocumentDBReadReplicaPrivateNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[DocumentDBReadReplicaPrivateNetwork] {
	return pulumix.Output[DocumentDBReadReplicaPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o DocumentDBReadReplicaPrivateNetworkOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDBReadReplicaPrivateNetwork) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaPrivateNetworkOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDBReadReplicaPrivateNetwork) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaPrivateNetworkOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDBReadReplicaPrivateNetwork) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaPrivateNetworkOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDBReadReplicaPrivateNetwork) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaPrivateNetworkOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DocumentDBReadReplicaPrivateNetwork) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o DocumentDBReadReplicaPrivateNetworkOutput) PrivateNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentDBReadReplicaPrivateNetwork) string { return v.PrivateNetworkId }).(pulumi.StringOutput)
}

func (o DocumentDBReadReplicaPrivateNetworkOutput) ServiceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDBReadReplicaPrivateNetwork) *string { return v.ServiceIp }).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaPrivateNetworkOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDBReadReplicaPrivateNetwork) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type DocumentDBReadReplicaPrivateNetworkPtrOutput struct{ *pulumi.OutputState }

func (DocumentDBReadReplicaPrivateNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentDBReadReplicaPrivateNetwork)(nil)).Elem()
}

func (o DocumentDBReadReplicaPrivateNetworkPtrOutput) ToDocumentDBReadReplicaPrivateNetworkPtrOutput() DocumentDBReadReplicaPrivateNetworkPtrOutput {
	return o
}

func (o DocumentDBReadReplicaPrivateNetworkPtrOutput) ToDocumentDBReadReplicaPrivateNetworkPtrOutputWithContext(ctx context.Context) DocumentDBReadReplicaPrivateNetworkPtrOutput {
	return o
}

func (o DocumentDBReadReplicaPrivateNetworkPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DocumentDBReadReplicaPrivateNetwork] {
	return pulumix.Output[*DocumentDBReadReplicaPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o DocumentDBReadReplicaPrivateNetworkPtrOutput) Elem() DocumentDBReadReplicaPrivateNetworkOutput {
	return o.ApplyT(func(v *DocumentDBReadReplicaPrivateNetwork) DocumentDBReadReplicaPrivateNetwork {
		if v != nil {
			return *v
		}
		var ret DocumentDBReadReplicaPrivateNetwork
		return ret
	}).(DocumentDBReadReplicaPrivateNetworkOutput)
}

func (o DocumentDBReadReplicaPrivateNetworkPtrOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDBReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.EndpointId
	}).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaPrivateNetworkPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDBReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaPrivateNetworkPtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDBReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaPrivateNetworkPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDBReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaPrivateNetworkPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DocumentDBReadReplicaPrivateNetwork) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

func (o DocumentDBReadReplicaPrivateNetworkPtrOutput) PrivateNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDBReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateNetworkId
	}).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaPrivateNetworkPtrOutput) ServiceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDBReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.ServiceIp
	}).(pulumi.StringPtrOutput)
}

func (o DocumentDBReadReplicaPrivateNetworkPtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDBReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Zone
	}).(pulumi.StringPtrOutput)
}

type DomainRecordGeoIp struct {
	// The list of matches. *(Can be more than 1)*
	Matches []DomainRecordGeoIpMatch `pulumi:"matches"`
}

// DomainRecordGeoIpInput is an input type that accepts DomainRecordGeoIpArgs and DomainRecordGeoIpOutput values.
// You can construct a concrete instance of `DomainRecordGeoIpInput` via:
//
//	DomainRecordGeoIpArgs{...}
type DomainRecordGeoIpInput interface {
	pulumi.Input

	ToDomainRecordGeoIpOutput() DomainRecordGeoIpOutput
	ToDomainRecordGeoIpOutputWithContext(context.Context) DomainRecordGeoIpOutput
}

type DomainRecordGeoIpArgs struct {
	// The list of matches. *(Can be more than 1)*
	Matches DomainRecordGeoIpMatchArrayInput `pulumi:"matches"`
}

func (DomainRecordGeoIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRecordGeoIp)(nil)).Elem()
}

func (i DomainRecordGeoIpArgs) ToDomainRecordGeoIpOutput() DomainRecordGeoIpOutput {
	return i.ToDomainRecordGeoIpOutputWithContext(context.Background())
}

func (i DomainRecordGeoIpArgs) ToDomainRecordGeoIpOutputWithContext(ctx context.Context) DomainRecordGeoIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordGeoIpOutput)
}

func (i DomainRecordGeoIpArgs) ToOutput(ctx context.Context) pulumix.Output[DomainRecordGeoIp] {
	return pulumix.Output[DomainRecordGeoIp]{
		OutputState: i.ToDomainRecordGeoIpOutputWithContext(ctx).OutputState,
	}
}

func (i DomainRecordGeoIpArgs) ToDomainRecordGeoIpPtrOutput() DomainRecordGeoIpPtrOutput {
	return i.ToDomainRecordGeoIpPtrOutputWithContext(context.Background())
}

func (i DomainRecordGeoIpArgs) ToDomainRecordGeoIpPtrOutputWithContext(ctx context.Context) DomainRecordGeoIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordGeoIpOutput).ToDomainRecordGeoIpPtrOutputWithContext(ctx)
}

// DomainRecordGeoIpPtrInput is an input type that accepts DomainRecordGeoIpArgs, DomainRecordGeoIpPtr and DomainRecordGeoIpPtrOutput values.
// You can construct a concrete instance of `DomainRecordGeoIpPtrInput` via:
//
//	        DomainRecordGeoIpArgs{...}
//
//	or:
//
//	        nil
type DomainRecordGeoIpPtrInput interface {
	pulumi.Input

	ToDomainRecordGeoIpPtrOutput() DomainRecordGeoIpPtrOutput
	ToDomainRecordGeoIpPtrOutputWithContext(context.Context) DomainRecordGeoIpPtrOutput
}

type domainRecordGeoIpPtrType DomainRecordGeoIpArgs

func DomainRecordGeoIpPtr(v *DomainRecordGeoIpArgs) DomainRecordGeoIpPtrInput {
	return (*domainRecordGeoIpPtrType)(v)
}

func (*domainRecordGeoIpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRecordGeoIp)(nil)).Elem()
}

func (i *domainRecordGeoIpPtrType) ToDomainRecordGeoIpPtrOutput() DomainRecordGeoIpPtrOutput {
	return i.ToDomainRecordGeoIpPtrOutputWithContext(context.Background())
}

func (i *domainRecordGeoIpPtrType) ToDomainRecordGeoIpPtrOutputWithContext(ctx context.Context) DomainRecordGeoIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordGeoIpPtrOutput)
}

func (i *domainRecordGeoIpPtrType) ToOutput(ctx context.Context) pulumix.Output[*DomainRecordGeoIp] {
	return pulumix.Output[*DomainRecordGeoIp]{
		OutputState: i.ToDomainRecordGeoIpPtrOutputWithContext(ctx).OutputState,
	}
}

type DomainRecordGeoIpOutput struct{ *pulumi.OutputState }

func (DomainRecordGeoIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRecordGeoIp)(nil)).Elem()
}

func (o DomainRecordGeoIpOutput) ToDomainRecordGeoIpOutput() DomainRecordGeoIpOutput {
	return o
}

func (o DomainRecordGeoIpOutput) ToDomainRecordGeoIpOutputWithContext(ctx context.Context) DomainRecordGeoIpOutput {
	return o
}

func (o DomainRecordGeoIpOutput) ToDomainRecordGeoIpPtrOutput() DomainRecordGeoIpPtrOutput {
	return o.ToDomainRecordGeoIpPtrOutputWithContext(context.Background())
}

func (o DomainRecordGeoIpOutput) ToDomainRecordGeoIpPtrOutputWithContext(ctx context.Context) DomainRecordGeoIpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainRecordGeoIp) *DomainRecordGeoIp {
		return &v
	}).(DomainRecordGeoIpPtrOutput)
}

func (o DomainRecordGeoIpOutput) ToOutput(ctx context.Context) pulumix.Output[DomainRecordGeoIp] {
	return pulumix.Output[DomainRecordGeoIp]{
		OutputState: o.OutputState,
	}
}

// The list of matches. *(Can be more than 1)*
func (o DomainRecordGeoIpOutput) Matches() DomainRecordGeoIpMatchArrayOutput {
	return o.ApplyT(func(v DomainRecordGeoIp) []DomainRecordGeoIpMatch { return v.Matches }).(DomainRecordGeoIpMatchArrayOutput)
}

type DomainRecordGeoIpPtrOutput struct{ *pulumi.OutputState }

func (DomainRecordGeoIpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRecordGeoIp)(nil)).Elem()
}

func (o DomainRecordGeoIpPtrOutput) ToDomainRecordGeoIpPtrOutput() DomainRecordGeoIpPtrOutput {
	return o
}

func (o DomainRecordGeoIpPtrOutput) ToDomainRecordGeoIpPtrOutputWithContext(ctx context.Context) DomainRecordGeoIpPtrOutput {
	return o
}

func (o DomainRecordGeoIpPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainRecordGeoIp] {
	return pulumix.Output[*DomainRecordGeoIp]{
		OutputState: o.OutputState,
	}
}

func (o DomainRecordGeoIpPtrOutput) Elem() DomainRecordGeoIpOutput {
	return o.ApplyT(func(v *DomainRecordGeoIp) DomainRecordGeoIp {
		if v != nil {
			return *v
		}
		var ret DomainRecordGeoIp
		return ret
	}).(DomainRecordGeoIpOutput)
}

// The list of matches. *(Can be more than 1)*
func (o DomainRecordGeoIpPtrOutput) Matches() DomainRecordGeoIpMatchArrayOutput {
	return o.ApplyT(func(v *DomainRecordGeoIp) []DomainRecordGeoIpMatch {
		if v == nil {
			return nil
		}
		return v.Matches
	}).(DomainRecordGeoIpMatchArrayOutput)
}

type DomainRecordGeoIpMatch struct {
	// List of continents (eg: `EU` for Europe, `NA` for North America, `AS` for Asia...). [List of all continents code](https://api.scaleway.com/domain-private/v2beta1/continents)
	Continents []string `pulumi:"continents"`
	// List of countries (eg: `FR` for France, `US` for the United States, `GB` for Great Britain...). [List of all countries code](https://api.scaleway.com/domain-private/v2beta1/countries)
	Countries []string `pulumi:"countries"`
	// The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
	Data string `pulumi:"data"`
}

// DomainRecordGeoIpMatchInput is an input type that accepts DomainRecordGeoIpMatchArgs and DomainRecordGeoIpMatchOutput values.
// You can construct a concrete instance of `DomainRecordGeoIpMatchInput` via:
//
//	DomainRecordGeoIpMatchArgs{...}
type DomainRecordGeoIpMatchInput interface {
	pulumi.Input

	ToDomainRecordGeoIpMatchOutput() DomainRecordGeoIpMatchOutput
	ToDomainRecordGeoIpMatchOutputWithContext(context.Context) DomainRecordGeoIpMatchOutput
}

type DomainRecordGeoIpMatchArgs struct {
	// List of continents (eg: `EU` for Europe, `NA` for North America, `AS` for Asia...). [List of all continents code](https://api.scaleway.com/domain-private/v2beta1/continents)
	Continents pulumi.StringArrayInput `pulumi:"continents"`
	// List of countries (eg: `FR` for France, `US` for the United States, `GB` for Great Britain...). [List of all countries code](https://api.scaleway.com/domain-private/v2beta1/countries)
	Countries pulumi.StringArrayInput `pulumi:"countries"`
	// The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
	Data pulumi.StringInput `pulumi:"data"`
}

func (DomainRecordGeoIpMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRecordGeoIpMatch)(nil)).Elem()
}

func (i DomainRecordGeoIpMatchArgs) ToDomainRecordGeoIpMatchOutput() DomainRecordGeoIpMatchOutput {
	return i.ToDomainRecordGeoIpMatchOutputWithContext(context.Background())
}

func (i DomainRecordGeoIpMatchArgs) ToDomainRecordGeoIpMatchOutputWithContext(ctx context.Context) DomainRecordGeoIpMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordGeoIpMatchOutput)
}

func (i DomainRecordGeoIpMatchArgs) ToOutput(ctx context.Context) pulumix.Output[DomainRecordGeoIpMatch] {
	return pulumix.Output[DomainRecordGeoIpMatch]{
		OutputState: i.ToDomainRecordGeoIpMatchOutputWithContext(ctx).OutputState,
	}
}

// DomainRecordGeoIpMatchArrayInput is an input type that accepts DomainRecordGeoIpMatchArray and DomainRecordGeoIpMatchArrayOutput values.
// You can construct a concrete instance of `DomainRecordGeoIpMatchArrayInput` via:
//
//	DomainRecordGeoIpMatchArray{ DomainRecordGeoIpMatchArgs{...} }
type DomainRecordGeoIpMatchArrayInput interface {
	pulumi.Input

	ToDomainRecordGeoIpMatchArrayOutput() DomainRecordGeoIpMatchArrayOutput
	ToDomainRecordGeoIpMatchArrayOutputWithContext(context.Context) DomainRecordGeoIpMatchArrayOutput
}

type DomainRecordGeoIpMatchArray []DomainRecordGeoIpMatchInput

func (DomainRecordGeoIpMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainRecordGeoIpMatch)(nil)).Elem()
}

func (i DomainRecordGeoIpMatchArray) ToDomainRecordGeoIpMatchArrayOutput() DomainRecordGeoIpMatchArrayOutput {
	return i.ToDomainRecordGeoIpMatchArrayOutputWithContext(context.Background())
}

func (i DomainRecordGeoIpMatchArray) ToDomainRecordGeoIpMatchArrayOutputWithContext(ctx context.Context) DomainRecordGeoIpMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordGeoIpMatchArrayOutput)
}

func (i DomainRecordGeoIpMatchArray) ToOutput(ctx context.Context) pulumix.Output[[]DomainRecordGeoIpMatch] {
	return pulumix.Output[[]DomainRecordGeoIpMatch]{
		OutputState: i.ToDomainRecordGeoIpMatchArrayOutputWithContext(ctx).OutputState,
	}
}

type DomainRecordGeoIpMatchOutput struct{ *pulumi.OutputState }

func (DomainRecordGeoIpMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRecordGeoIpMatch)(nil)).Elem()
}

func (o DomainRecordGeoIpMatchOutput) ToDomainRecordGeoIpMatchOutput() DomainRecordGeoIpMatchOutput {
	return o
}

func (o DomainRecordGeoIpMatchOutput) ToDomainRecordGeoIpMatchOutputWithContext(ctx context.Context) DomainRecordGeoIpMatchOutput {
	return o
}

func (o DomainRecordGeoIpMatchOutput) ToOutput(ctx context.Context) pulumix.Output[DomainRecordGeoIpMatch] {
	return pulumix.Output[DomainRecordGeoIpMatch]{
		OutputState: o.OutputState,
	}
}

// List of continents (eg: `EU` for Europe, `NA` for North America, `AS` for Asia...). [List of all continents code](https://api.scaleway.com/domain-private/v2beta1/continents)
func (o DomainRecordGeoIpMatchOutput) Continents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainRecordGeoIpMatch) []string { return v.Continents }).(pulumi.StringArrayOutput)
}

// List of countries (eg: `FR` for France, `US` for the United States, `GB` for Great Britain...). [List of all countries code](https://api.scaleway.com/domain-private/v2beta1/countries)
func (o DomainRecordGeoIpMatchOutput) Countries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainRecordGeoIpMatch) []string { return v.Countries }).(pulumi.StringArrayOutput)
}

// The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
func (o DomainRecordGeoIpMatchOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v DomainRecordGeoIpMatch) string { return v.Data }).(pulumi.StringOutput)
}

type DomainRecordGeoIpMatchArrayOutput struct{ *pulumi.OutputState }

func (DomainRecordGeoIpMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainRecordGeoIpMatch)(nil)).Elem()
}

func (o DomainRecordGeoIpMatchArrayOutput) ToDomainRecordGeoIpMatchArrayOutput() DomainRecordGeoIpMatchArrayOutput {
	return o
}

func (o DomainRecordGeoIpMatchArrayOutput) ToDomainRecordGeoIpMatchArrayOutputWithContext(ctx context.Context) DomainRecordGeoIpMatchArrayOutput {
	return o
}

func (o DomainRecordGeoIpMatchArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DomainRecordGeoIpMatch] {
	return pulumix.Output[[]DomainRecordGeoIpMatch]{
		OutputState: o.OutputState,
	}
}

func (o DomainRecordGeoIpMatchArrayOutput) Index(i pulumi.IntInput) DomainRecordGeoIpMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainRecordGeoIpMatch {
		return vs[0].([]DomainRecordGeoIpMatch)[vs[1].(int)]
	}).(DomainRecordGeoIpMatchOutput)
}

type DomainRecordHttpService struct {
	// List of IPs to check
	Ips []string `pulumi:"ips"`
	// Text to search
	MustContain string `pulumi:"mustContain"`
	// Strategy to return an IP from the IPs list. Can be `random`, `hashed` or `all`
	Strategy string `pulumi:"strategy"`
	// URL to match the `mustContain` text to validate an IP
	Url string `pulumi:"url"`
	// User-agent used when checking the URL
	UserAgent *string `pulumi:"userAgent"`
}

// DomainRecordHttpServiceInput is an input type that accepts DomainRecordHttpServiceArgs and DomainRecordHttpServiceOutput values.
// You can construct a concrete instance of `DomainRecordHttpServiceInput` via:
//
//	DomainRecordHttpServiceArgs{...}
type DomainRecordHttpServiceInput interface {
	pulumi.Input

	ToDomainRecordHttpServiceOutput() DomainRecordHttpServiceOutput
	ToDomainRecordHttpServiceOutputWithContext(context.Context) DomainRecordHttpServiceOutput
}

type DomainRecordHttpServiceArgs struct {
	// List of IPs to check
	Ips pulumi.StringArrayInput `pulumi:"ips"`
	// Text to search
	MustContain pulumi.StringInput `pulumi:"mustContain"`
	// Strategy to return an IP from the IPs list. Can be `random`, `hashed` or `all`
	Strategy pulumi.StringInput `pulumi:"strategy"`
	// URL to match the `mustContain` text to validate an IP
	Url pulumi.StringInput `pulumi:"url"`
	// User-agent used when checking the URL
	UserAgent pulumi.StringPtrInput `pulumi:"userAgent"`
}

func (DomainRecordHttpServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRecordHttpService)(nil)).Elem()
}

func (i DomainRecordHttpServiceArgs) ToDomainRecordHttpServiceOutput() DomainRecordHttpServiceOutput {
	return i.ToDomainRecordHttpServiceOutputWithContext(context.Background())
}

func (i DomainRecordHttpServiceArgs) ToDomainRecordHttpServiceOutputWithContext(ctx context.Context) DomainRecordHttpServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordHttpServiceOutput)
}

func (i DomainRecordHttpServiceArgs) ToOutput(ctx context.Context) pulumix.Output[DomainRecordHttpService] {
	return pulumix.Output[DomainRecordHttpService]{
		OutputState: i.ToDomainRecordHttpServiceOutputWithContext(ctx).OutputState,
	}
}

func (i DomainRecordHttpServiceArgs) ToDomainRecordHttpServicePtrOutput() DomainRecordHttpServicePtrOutput {
	return i.ToDomainRecordHttpServicePtrOutputWithContext(context.Background())
}

func (i DomainRecordHttpServiceArgs) ToDomainRecordHttpServicePtrOutputWithContext(ctx context.Context) DomainRecordHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordHttpServiceOutput).ToDomainRecordHttpServicePtrOutputWithContext(ctx)
}

// DomainRecordHttpServicePtrInput is an input type that accepts DomainRecordHttpServiceArgs, DomainRecordHttpServicePtr and DomainRecordHttpServicePtrOutput values.
// You can construct a concrete instance of `DomainRecordHttpServicePtrInput` via:
//
//	        DomainRecordHttpServiceArgs{...}
//
//	or:
//
//	        nil
type DomainRecordHttpServicePtrInput interface {
	pulumi.Input

	ToDomainRecordHttpServicePtrOutput() DomainRecordHttpServicePtrOutput
	ToDomainRecordHttpServicePtrOutputWithContext(context.Context) DomainRecordHttpServicePtrOutput
}

type domainRecordHttpServicePtrType DomainRecordHttpServiceArgs

func DomainRecordHttpServicePtr(v *DomainRecordHttpServiceArgs) DomainRecordHttpServicePtrInput {
	return (*domainRecordHttpServicePtrType)(v)
}

func (*domainRecordHttpServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRecordHttpService)(nil)).Elem()
}

func (i *domainRecordHttpServicePtrType) ToDomainRecordHttpServicePtrOutput() DomainRecordHttpServicePtrOutput {
	return i.ToDomainRecordHttpServicePtrOutputWithContext(context.Background())
}

func (i *domainRecordHttpServicePtrType) ToDomainRecordHttpServicePtrOutputWithContext(ctx context.Context) DomainRecordHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordHttpServicePtrOutput)
}

func (i *domainRecordHttpServicePtrType) ToOutput(ctx context.Context) pulumix.Output[*DomainRecordHttpService] {
	return pulumix.Output[*DomainRecordHttpService]{
		OutputState: i.ToDomainRecordHttpServicePtrOutputWithContext(ctx).OutputState,
	}
}

type DomainRecordHttpServiceOutput struct{ *pulumi.OutputState }

func (DomainRecordHttpServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRecordHttpService)(nil)).Elem()
}

func (o DomainRecordHttpServiceOutput) ToDomainRecordHttpServiceOutput() DomainRecordHttpServiceOutput {
	return o
}

func (o DomainRecordHttpServiceOutput) ToDomainRecordHttpServiceOutputWithContext(ctx context.Context) DomainRecordHttpServiceOutput {
	return o
}

func (o DomainRecordHttpServiceOutput) ToDomainRecordHttpServicePtrOutput() DomainRecordHttpServicePtrOutput {
	return o.ToDomainRecordHttpServicePtrOutputWithContext(context.Background())
}

func (o DomainRecordHttpServiceOutput) ToDomainRecordHttpServicePtrOutputWithContext(ctx context.Context) DomainRecordHttpServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainRecordHttpService) *DomainRecordHttpService {
		return &v
	}).(DomainRecordHttpServicePtrOutput)
}

func (o DomainRecordHttpServiceOutput) ToOutput(ctx context.Context) pulumix.Output[DomainRecordHttpService] {
	return pulumix.Output[DomainRecordHttpService]{
		OutputState: o.OutputState,
	}
}

// List of IPs to check
func (o DomainRecordHttpServiceOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainRecordHttpService) []string { return v.Ips }).(pulumi.StringArrayOutput)
}

// Text to search
func (o DomainRecordHttpServiceOutput) MustContain() pulumi.StringOutput {
	return o.ApplyT(func(v DomainRecordHttpService) string { return v.MustContain }).(pulumi.StringOutput)
}

// Strategy to return an IP from the IPs list. Can be `random`, `hashed` or `all`
func (o DomainRecordHttpServiceOutput) Strategy() pulumi.StringOutput {
	return o.ApplyT(func(v DomainRecordHttpService) string { return v.Strategy }).(pulumi.StringOutput)
}

// URL to match the `mustContain` text to validate an IP
func (o DomainRecordHttpServiceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v DomainRecordHttpService) string { return v.Url }).(pulumi.StringOutput)
}

// User-agent used when checking the URL
func (o DomainRecordHttpServiceOutput) UserAgent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainRecordHttpService) *string { return v.UserAgent }).(pulumi.StringPtrOutput)
}

type DomainRecordHttpServicePtrOutput struct{ *pulumi.OutputState }

func (DomainRecordHttpServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRecordHttpService)(nil)).Elem()
}

func (o DomainRecordHttpServicePtrOutput) ToDomainRecordHttpServicePtrOutput() DomainRecordHttpServicePtrOutput {
	return o
}

func (o DomainRecordHttpServicePtrOutput) ToDomainRecordHttpServicePtrOutputWithContext(ctx context.Context) DomainRecordHttpServicePtrOutput {
	return o
}

func (o DomainRecordHttpServicePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainRecordHttpService] {
	return pulumix.Output[*DomainRecordHttpService]{
		OutputState: o.OutputState,
	}
}

func (o DomainRecordHttpServicePtrOutput) Elem() DomainRecordHttpServiceOutput {
	return o.ApplyT(func(v *DomainRecordHttpService) DomainRecordHttpService {
		if v != nil {
			return *v
		}
		var ret DomainRecordHttpService
		return ret
	}).(DomainRecordHttpServiceOutput)
}

// List of IPs to check
func (o DomainRecordHttpServicePtrOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainRecordHttpService) []string {
		if v == nil {
			return nil
		}
		return v.Ips
	}).(pulumi.StringArrayOutput)
}

// Text to search
func (o DomainRecordHttpServicePtrOutput) MustContain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainRecordHttpService) *string {
		if v == nil {
			return nil
		}
		return &v.MustContain
	}).(pulumi.StringPtrOutput)
}

// Strategy to return an IP from the IPs list. Can be `random`, `hashed` or `all`
func (o DomainRecordHttpServicePtrOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainRecordHttpService) *string {
		if v == nil {
			return nil
		}
		return &v.Strategy
	}).(pulumi.StringPtrOutput)
}

// URL to match the `mustContain` text to validate an IP
func (o DomainRecordHttpServicePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainRecordHttpService) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// User-agent used when checking the URL
func (o DomainRecordHttpServicePtrOutput) UserAgent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainRecordHttpService) *string {
		if v == nil {
			return nil
		}
		return v.UserAgent
	}).(pulumi.StringPtrOutput)
}

type DomainRecordView struct {
	// The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
	Data string `pulumi:"data"`
	// The subnet of the view
	Subnet string `pulumi:"subnet"`
}

// DomainRecordViewInput is an input type that accepts DomainRecordViewArgs and DomainRecordViewOutput values.
// You can construct a concrete instance of `DomainRecordViewInput` via:
//
//	DomainRecordViewArgs{...}
type DomainRecordViewInput interface {
	pulumi.Input

	ToDomainRecordViewOutput() DomainRecordViewOutput
	ToDomainRecordViewOutputWithContext(context.Context) DomainRecordViewOutput
}

type DomainRecordViewArgs struct {
	// The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
	Data pulumi.StringInput `pulumi:"data"`
	// The subnet of the view
	Subnet pulumi.StringInput `pulumi:"subnet"`
}

func (DomainRecordViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRecordView)(nil)).Elem()
}

func (i DomainRecordViewArgs) ToDomainRecordViewOutput() DomainRecordViewOutput {
	return i.ToDomainRecordViewOutputWithContext(context.Background())
}

func (i DomainRecordViewArgs) ToDomainRecordViewOutputWithContext(ctx context.Context) DomainRecordViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordViewOutput)
}

func (i DomainRecordViewArgs) ToOutput(ctx context.Context) pulumix.Output[DomainRecordView] {
	return pulumix.Output[DomainRecordView]{
		OutputState: i.ToDomainRecordViewOutputWithContext(ctx).OutputState,
	}
}

// DomainRecordViewArrayInput is an input type that accepts DomainRecordViewArray and DomainRecordViewArrayOutput values.
// You can construct a concrete instance of `DomainRecordViewArrayInput` via:
//
//	DomainRecordViewArray{ DomainRecordViewArgs{...} }
type DomainRecordViewArrayInput interface {
	pulumi.Input

	ToDomainRecordViewArrayOutput() DomainRecordViewArrayOutput
	ToDomainRecordViewArrayOutputWithContext(context.Context) DomainRecordViewArrayOutput
}

type DomainRecordViewArray []DomainRecordViewInput

func (DomainRecordViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainRecordView)(nil)).Elem()
}

func (i DomainRecordViewArray) ToDomainRecordViewArrayOutput() DomainRecordViewArrayOutput {
	return i.ToDomainRecordViewArrayOutputWithContext(context.Background())
}

func (i DomainRecordViewArray) ToDomainRecordViewArrayOutputWithContext(ctx context.Context) DomainRecordViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordViewArrayOutput)
}

func (i DomainRecordViewArray) ToOutput(ctx context.Context) pulumix.Output[[]DomainRecordView] {
	return pulumix.Output[[]DomainRecordView]{
		OutputState: i.ToDomainRecordViewArrayOutputWithContext(ctx).OutputState,
	}
}

type DomainRecordViewOutput struct{ *pulumi.OutputState }

func (DomainRecordViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRecordView)(nil)).Elem()
}

func (o DomainRecordViewOutput) ToDomainRecordViewOutput() DomainRecordViewOutput {
	return o
}

func (o DomainRecordViewOutput) ToDomainRecordViewOutputWithContext(ctx context.Context) DomainRecordViewOutput {
	return o
}

func (o DomainRecordViewOutput) ToOutput(ctx context.Context) pulumix.Output[DomainRecordView] {
	return pulumix.Output[DomainRecordView]{
		OutputState: o.OutputState,
	}
}

// The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
func (o DomainRecordViewOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v DomainRecordView) string { return v.Data }).(pulumi.StringOutput)
}

// The subnet of the view
func (o DomainRecordViewOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v DomainRecordView) string { return v.Subnet }).(pulumi.StringOutput)
}

type DomainRecordViewArrayOutput struct{ *pulumi.OutputState }

func (DomainRecordViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainRecordView)(nil)).Elem()
}

func (o DomainRecordViewArrayOutput) ToDomainRecordViewArrayOutput() DomainRecordViewArrayOutput {
	return o
}

func (o DomainRecordViewArrayOutput) ToDomainRecordViewArrayOutputWithContext(ctx context.Context) DomainRecordViewArrayOutput {
	return o
}

func (o DomainRecordViewArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DomainRecordView] {
	return pulumix.Output[[]DomainRecordView]{
		OutputState: o.OutputState,
	}
}

func (o DomainRecordViewArrayOutput) Index(i pulumi.IntInput) DomainRecordViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainRecordView {
		return vs[0].([]DomainRecordView)[vs[1].(int)]
	}).(DomainRecordViewOutput)
}

type DomainRecordWeighted struct {
	// The weighted IP
	Ip string `pulumi:"ip"`
	// The weight of the IP as an integer UInt32.
	Weight int `pulumi:"weight"`
}

// DomainRecordWeightedInput is an input type that accepts DomainRecordWeightedArgs and DomainRecordWeightedOutput values.
// You can construct a concrete instance of `DomainRecordWeightedInput` via:
//
//	DomainRecordWeightedArgs{...}
type DomainRecordWeightedInput interface {
	pulumi.Input

	ToDomainRecordWeightedOutput() DomainRecordWeightedOutput
	ToDomainRecordWeightedOutputWithContext(context.Context) DomainRecordWeightedOutput
}

type DomainRecordWeightedArgs struct {
	// The weighted IP
	Ip pulumi.StringInput `pulumi:"ip"`
	// The weight of the IP as an integer UInt32.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (DomainRecordWeightedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRecordWeighted)(nil)).Elem()
}

func (i DomainRecordWeightedArgs) ToDomainRecordWeightedOutput() DomainRecordWeightedOutput {
	return i.ToDomainRecordWeightedOutputWithContext(context.Background())
}

func (i DomainRecordWeightedArgs) ToDomainRecordWeightedOutputWithContext(ctx context.Context) DomainRecordWeightedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordWeightedOutput)
}

func (i DomainRecordWeightedArgs) ToOutput(ctx context.Context) pulumix.Output[DomainRecordWeighted] {
	return pulumix.Output[DomainRecordWeighted]{
		OutputState: i.ToDomainRecordWeightedOutputWithContext(ctx).OutputState,
	}
}

// DomainRecordWeightedArrayInput is an input type that accepts DomainRecordWeightedArray and DomainRecordWeightedArrayOutput values.
// You can construct a concrete instance of `DomainRecordWeightedArrayInput` via:
//
//	DomainRecordWeightedArray{ DomainRecordWeightedArgs{...} }
type DomainRecordWeightedArrayInput interface {
	pulumi.Input

	ToDomainRecordWeightedArrayOutput() DomainRecordWeightedArrayOutput
	ToDomainRecordWeightedArrayOutputWithContext(context.Context) DomainRecordWeightedArrayOutput
}

type DomainRecordWeightedArray []DomainRecordWeightedInput

func (DomainRecordWeightedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainRecordWeighted)(nil)).Elem()
}

func (i DomainRecordWeightedArray) ToDomainRecordWeightedArrayOutput() DomainRecordWeightedArrayOutput {
	return i.ToDomainRecordWeightedArrayOutputWithContext(context.Background())
}

func (i DomainRecordWeightedArray) ToDomainRecordWeightedArrayOutputWithContext(ctx context.Context) DomainRecordWeightedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordWeightedArrayOutput)
}

func (i DomainRecordWeightedArray) ToOutput(ctx context.Context) pulumix.Output[[]DomainRecordWeighted] {
	return pulumix.Output[[]DomainRecordWeighted]{
		OutputState: i.ToDomainRecordWeightedArrayOutputWithContext(ctx).OutputState,
	}
}

type DomainRecordWeightedOutput struct{ *pulumi.OutputState }

func (DomainRecordWeightedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRecordWeighted)(nil)).Elem()
}

func (o DomainRecordWeightedOutput) ToDomainRecordWeightedOutput() DomainRecordWeightedOutput {
	return o
}

func (o DomainRecordWeightedOutput) ToDomainRecordWeightedOutputWithContext(ctx context.Context) DomainRecordWeightedOutput {
	return o
}

func (o DomainRecordWeightedOutput) ToOutput(ctx context.Context) pulumix.Output[DomainRecordWeighted] {
	return pulumix.Output[DomainRecordWeighted]{
		OutputState: o.OutputState,
	}
}

// The weighted IP
func (o DomainRecordWeightedOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v DomainRecordWeighted) string { return v.Ip }).(pulumi.StringOutput)
}

// The weight of the IP as an integer UInt32.
func (o DomainRecordWeightedOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v DomainRecordWeighted) int { return v.Weight }).(pulumi.IntOutput)
}

type DomainRecordWeightedArrayOutput struct{ *pulumi.OutputState }

func (DomainRecordWeightedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainRecordWeighted)(nil)).Elem()
}

func (o DomainRecordWeightedArrayOutput) ToDomainRecordWeightedArrayOutput() DomainRecordWeightedArrayOutput {
	return o
}

func (o DomainRecordWeightedArrayOutput) ToDomainRecordWeightedArrayOutputWithContext(ctx context.Context) DomainRecordWeightedArrayOutput {
	return o
}

func (o DomainRecordWeightedArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DomainRecordWeighted] {
	return pulumix.Output[[]DomainRecordWeighted]{
		OutputState: o.OutputState,
	}
}

func (o DomainRecordWeightedArrayOutput) Index(i pulumi.IntInput) DomainRecordWeightedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainRecordWeighted {
		return vs[0].([]DomainRecordWeighted)[vs[1].(int)]
	}).(DomainRecordWeightedOutput)
}

type FunctionTriggerSqs struct {
	// ID of the mnq namespace
	NamespaceId string `pulumi:"namespaceId"`
	// ID of the project that contain the mnq namespace, defaults to provider's project
	ProjectId *string `pulumi:"projectId"`
	// Name of the queue
	Queue string `pulumi:"queue"`
	// `region`). The region in which the namespace should be created.
	Region *string `pulumi:"region"`
}

// FunctionTriggerSqsInput is an input type that accepts FunctionTriggerSqsArgs and FunctionTriggerSqsOutput values.
// You can construct a concrete instance of `FunctionTriggerSqsInput` via:
//
//	FunctionTriggerSqsArgs{...}
type FunctionTriggerSqsInput interface {
	pulumi.Input

	ToFunctionTriggerSqsOutput() FunctionTriggerSqsOutput
	ToFunctionTriggerSqsOutputWithContext(context.Context) FunctionTriggerSqsOutput
}

type FunctionTriggerSqsArgs struct {
	// ID of the mnq namespace
	NamespaceId pulumi.StringInput `pulumi:"namespaceId"`
	// ID of the project that contain the mnq namespace, defaults to provider's project
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Name of the queue
	Queue pulumi.StringInput `pulumi:"queue"`
	// `region`). The region in which the namespace should be created.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (FunctionTriggerSqsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTriggerSqs)(nil)).Elem()
}

func (i FunctionTriggerSqsArgs) ToFunctionTriggerSqsOutput() FunctionTriggerSqsOutput {
	return i.ToFunctionTriggerSqsOutputWithContext(context.Background())
}

func (i FunctionTriggerSqsArgs) ToFunctionTriggerSqsOutputWithContext(ctx context.Context) FunctionTriggerSqsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTriggerSqsOutput)
}

func (i FunctionTriggerSqsArgs) ToOutput(ctx context.Context) pulumix.Output[FunctionTriggerSqs] {
	return pulumix.Output[FunctionTriggerSqs]{
		OutputState: i.ToFunctionTriggerSqsOutputWithContext(ctx).OutputState,
	}
}

func (i FunctionTriggerSqsArgs) ToFunctionTriggerSqsPtrOutput() FunctionTriggerSqsPtrOutput {
	return i.ToFunctionTriggerSqsPtrOutputWithContext(context.Background())
}

func (i FunctionTriggerSqsArgs) ToFunctionTriggerSqsPtrOutputWithContext(ctx context.Context) FunctionTriggerSqsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTriggerSqsOutput).ToFunctionTriggerSqsPtrOutputWithContext(ctx)
}

// FunctionTriggerSqsPtrInput is an input type that accepts FunctionTriggerSqsArgs, FunctionTriggerSqsPtr and FunctionTriggerSqsPtrOutput values.
// You can construct a concrete instance of `FunctionTriggerSqsPtrInput` via:
//
//	        FunctionTriggerSqsArgs{...}
//
//	or:
//
//	        nil
type FunctionTriggerSqsPtrInput interface {
	pulumi.Input

	ToFunctionTriggerSqsPtrOutput() FunctionTriggerSqsPtrOutput
	ToFunctionTriggerSqsPtrOutputWithContext(context.Context) FunctionTriggerSqsPtrOutput
}

type functionTriggerSqsPtrType FunctionTriggerSqsArgs

func FunctionTriggerSqsPtr(v *FunctionTriggerSqsArgs) FunctionTriggerSqsPtrInput {
	return (*functionTriggerSqsPtrType)(v)
}

func (*functionTriggerSqsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionTriggerSqs)(nil)).Elem()
}

func (i *functionTriggerSqsPtrType) ToFunctionTriggerSqsPtrOutput() FunctionTriggerSqsPtrOutput {
	return i.ToFunctionTriggerSqsPtrOutputWithContext(context.Background())
}

func (i *functionTriggerSqsPtrType) ToFunctionTriggerSqsPtrOutputWithContext(ctx context.Context) FunctionTriggerSqsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTriggerSqsPtrOutput)
}

func (i *functionTriggerSqsPtrType) ToOutput(ctx context.Context) pulumix.Output[*FunctionTriggerSqs] {
	return pulumix.Output[*FunctionTriggerSqs]{
		OutputState: i.ToFunctionTriggerSqsPtrOutputWithContext(ctx).OutputState,
	}
}

type FunctionTriggerSqsOutput struct{ *pulumi.OutputState }

func (FunctionTriggerSqsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTriggerSqs)(nil)).Elem()
}

func (o FunctionTriggerSqsOutput) ToFunctionTriggerSqsOutput() FunctionTriggerSqsOutput {
	return o
}

func (o FunctionTriggerSqsOutput) ToFunctionTriggerSqsOutputWithContext(ctx context.Context) FunctionTriggerSqsOutput {
	return o
}

func (o FunctionTriggerSqsOutput) ToFunctionTriggerSqsPtrOutput() FunctionTriggerSqsPtrOutput {
	return o.ToFunctionTriggerSqsPtrOutputWithContext(context.Background())
}

func (o FunctionTriggerSqsOutput) ToFunctionTriggerSqsPtrOutputWithContext(ctx context.Context) FunctionTriggerSqsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionTriggerSqs) *FunctionTriggerSqs {
		return &v
	}).(FunctionTriggerSqsPtrOutput)
}

func (o FunctionTriggerSqsOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionTriggerSqs] {
	return pulumix.Output[FunctionTriggerSqs]{
		OutputState: o.OutputState,
	}
}

// ID of the mnq namespace
func (o FunctionTriggerSqsOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionTriggerSqs) string { return v.NamespaceId }).(pulumi.StringOutput)
}

// ID of the project that contain the mnq namespace, defaults to provider's project
func (o FunctionTriggerSqsOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTriggerSqs) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Name of the queue
func (o FunctionTriggerSqsOutput) Queue() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionTriggerSqs) string { return v.Queue }).(pulumi.StringOutput)
}

// `region`). The region in which the namespace should be created.
func (o FunctionTriggerSqsOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTriggerSqs) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type FunctionTriggerSqsPtrOutput struct{ *pulumi.OutputState }

func (FunctionTriggerSqsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionTriggerSqs)(nil)).Elem()
}

func (o FunctionTriggerSqsPtrOutput) ToFunctionTriggerSqsPtrOutput() FunctionTriggerSqsPtrOutput {
	return o
}

func (o FunctionTriggerSqsPtrOutput) ToFunctionTriggerSqsPtrOutputWithContext(ctx context.Context) FunctionTriggerSqsPtrOutput {
	return o
}

func (o FunctionTriggerSqsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FunctionTriggerSqs] {
	return pulumix.Output[*FunctionTriggerSqs]{
		OutputState: o.OutputState,
	}
}

func (o FunctionTriggerSqsPtrOutput) Elem() FunctionTriggerSqsOutput {
	return o.ApplyT(func(v *FunctionTriggerSqs) FunctionTriggerSqs {
		if v != nil {
			return *v
		}
		var ret FunctionTriggerSqs
		return ret
	}).(FunctionTriggerSqsOutput)
}

// ID of the mnq namespace
func (o FunctionTriggerSqsPtrOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionTriggerSqs) *string {
		if v == nil {
			return nil
		}
		return &v.NamespaceId
	}).(pulumi.StringPtrOutput)
}

// ID of the project that contain the mnq namespace, defaults to provider's project
func (o FunctionTriggerSqsPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionTriggerSqs) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Name of the queue
func (o FunctionTriggerSqsPtrOutput) Queue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionTriggerSqs) *string {
		if v == nil {
			return nil
		}
		return &v.Queue
	}).(pulumi.StringPtrOutput)
}

// `region`). The region in which the namespace should be created.
func (o FunctionTriggerSqsPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionTriggerSqs) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

type IamPolicyRule struct {
	// ID of organization scoped to the rule.
	OrganizationId *string `pulumi:"organizationId"`
	// Names of permission sets bound to the rule.
	//
	// **_TIP:_**  You can use the Scaleway CLI to list the permissions details. e.g:
	PermissionSetNames []string `pulumi:"permissionSetNames"`
	// List of project IDs scoped to the rule.
	//
	// > **Important** One of `organizationId` or `projectIds`  must be set per rule.
	ProjectIds []string `pulumi:"projectIds"`
}

// IamPolicyRuleInput is an input type that accepts IamPolicyRuleArgs and IamPolicyRuleOutput values.
// You can construct a concrete instance of `IamPolicyRuleInput` via:
//
//	IamPolicyRuleArgs{...}
type IamPolicyRuleInput interface {
	pulumi.Input

	ToIamPolicyRuleOutput() IamPolicyRuleOutput
	ToIamPolicyRuleOutputWithContext(context.Context) IamPolicyRuleOutput
}

type IamPolicyRuleArgs struct {
	// ID of organization scoped to the rule.
	OrganizationId pulumi.StringPtrInput `pulumi:"organizationId"`
	// Names of permission sets bound to the rule.
	//
	// **_TIP:_**  You can use the Scaleway CLI to list the permissions details. e.g:
	PermissionSetNames pulumi.StringArrayInput `pulumi:"permissionSetNames"`
	// List of project IDs scoped to the rule.
	//
	// > **Important** One of `organizationId` or `projectIds`  must be set per rule.
	ProjectIds pulumi.StringArrayInput `pulumi:"projectIds"`
}

func (IamPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IamPolicyRule)(nil)).Elem()
}

func (i IamPolicyRuleArgs) ToIamPolicyRuleOutput() IamPolicyRuleOutput {
	return i.ToIamPolicyRuleOutputWithContext(context.Background())
}

func (i IamPolicyRuleArgs) ToIamPolicyRuleOutputWithContext(ctx context.Context) IamPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyRuleOutput)
}

func (i IamPolicyRuleArgs) ToOutput(ctx context.Context) pulumix.Output[IamPolicyRule] {
	return pulumix.Output[IamPolicyRule]{
		OutputState: i.ToIamPolicyRuleOutputWithContext(ctx).OutputState,
	}
}

// IamPolicyRuleArrayInput is an input type that accepts IamPolicyRuleArray and IamPolicyRuleArrayOutput values.
// You can construct a concrete instance of `IamPolicyRuleArrayInput` via:
//
//	IamPolicyRuleArray{ IamPolicyRuleArgs{...} }
type IamPolicyRuleArrayInput interface {
	pulumi.Input

	ToIamPolicyRuleArrayOutput() IamPolicyRuleArrayOutput
	ToIamPolicyRuleArrayOutputWithContext(context.Context) IamPolicyRuleArrayOutput
}

type IamPolicyRuleArray []IamPolicyRuleInput

func (IamPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IamPolicyRule)(nil)).Elem()
}

func (i IamPolicyRuleArray) ToIamPolicyRuleArrayOutput() IamPolicyRuleArrayOutput {
	return i.ToIamPolicyRuleArrayOutputWithContext(context.Background())
}

func (i IamPolicyRuleArray) ToIamPolicyRuleArrayOutputWithContext(ctx context.Context) IamPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyRuleArrayOutput)
}

func (i IamPolicyRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]IamPolicyRule] {
	return pulumix.Output[[]IamPolicyRule]{
		OutputState: i.ToIamPolicyRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type IamPolicyRuleOutput struct{ *pulumi.OutputState }

func (IamPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IamPolicyRule)(nil)).Elem()
}

func (o IamPolicyRuleOutput) ToIamPolicyRuleOutput() IamPolicyRuleOutput {
	return o
}

func (o IamPolicyRuleOutput) ToIamPolicyRuleOutputWithContext(ctx context.Context) IamPolicyRuleOutput {
	return o
}

func (o IamPolicyRuleOutput) ToOutput(ctx context.Context) pulumix.Output[IamPolicyRule] {
	return pulumix.Output[IamPolicyRule]{
		OutputState: o.OutputState,
	}
}

// ID of organization scoped to the rule.
func (o IamPolicyRuleOutput) OrganizationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IamPolicyRule) *string { return v.OrganizationId }).(pulumi.StringPtrOutput)
}

// Names of permission sets bound to the rule.
//
// **_TIP:_**  You can use the Scaleway CLI to list the permissions details. e.g:
func (o IamPolicyRuleOutput) PermissionSetNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IamPolicyRule) []string { return v.PermissionSetNames }).(pulumi.StringArrayOutput)
}

// List of project IDs scoped to the rule.
//
// > **Important** One of `organizationId` or `projectIds`  must be set per rule.
func (o IamPolicyRuleOutput) ProjectIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IamPolicyRule) []string { return v.ProjectIds }).(pulumi.StringArrayOutput)
}

type IamPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (IamPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IamPolicyRule)(nil)).Elem()
}

func (o IamPolicyRuleArrayOutput) ToIamPolicyRuleArrayOutput() IamPolicyRuleArrayOutput {
	return o
}

func (o IamPolicyRuleArrayOutput) ToIamPolicyRuleArrayOutputWithContext(ctx context.Context) IamPolicyRuleArrayOutput {
	return o
}

func (o IamPolicyRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IamPolicyRule] {
	return pulumix.Output[[]IamPolicyRule]{
		OutputState: o.OutputState,
	}
}

func (o IamPolicyRuleArrayOutput) Index(i pulumi.IntInput) IamPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IamPolicyRule {
		return vs[0].([]IamPolicyRule)[vs[1].(int)]
	}).(IamPolicyRuleOutput)
}

type InstanceImageAdditionalVolume struct {
	// Date of the volume creation.
	CreationDate *string `pulumi:"creationDate"`
	// The export URI of the volume.
	ExportUri *string `pulumi:"exportUri"`
	// ID of the server containing the volume.
	Id *string `pulumi:"id"`
	// Date of volume latest update.
	ModificationDate *string `pulumi:"modificationDate"`
	// The name of the image. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// The organization ID the volume is associated with.
	Organization *string `pulumi:"organization"`
	// ID of the project the volume is associated with
	Project *string `pulumi:"project"`
	// Description of the server containing the volume (in case the image is a backup from a server).
	Server map[string]string `pulumi:"server"`
	// The size of the volume.
	Size *int `pulumi:"size"`
	// State of the volume.
	State *string `pulumi:"state"`
	// A list of tags to apply to the image.
	Tags []string `pulumi:"tags"`
	// The type of volume, possible values are `lSsd` and `bSsd`.
	VolumeType *string `pulumi:"volumeType"`
	// The zone in which the image should be created.
	Zone *string `pulumi:"zone"`
}

// InstanceImageAdditionalVolumeInput is an input type that accepts InstanceImageAdditionalVolumeArgs and InstanceImageAdditionalVolumeOutput values.
// You can construct a concrete instance of `InstanceImageAdditionalVolumeInput` via:
//
//	InstanceImageAdditionalVolumeArgs{...}
type InstanceImageAdditionalVolumeInput interface {
	pulumi.Input

	ToInstanceImageAdditionalVolumeOutput() InstanceImageAdditionalVolumeOutput
	ToInstanceImageAdditionalVolumeOutputWithContext(context.Context) InstanceImageAdditionalVolumeOutput
}

type InstanceImageAdditionalVolumeArgs struct {
	// Date of the volume creation.
	CreationDate pulumi.StringPtrInput `pulumi:"creationDate"`
	// The export URI of the volume.
	ExportUri pulumi.StringPtrInput `pulumi:"exportUri"`
	// ID of the server containing the volume.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Date of volume latest update.
	ModificationDate pulumi.StringPtrInput `pulumi:"modificationDate"`
	// The name of the image. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The organization ID the volume is associated with.
	Organization pulumi.StringPtrInput `pulumi:"organization"`
	// ID of the project the volume is associated with
	Project pulumi.StringPtrInput `pulumi:"project"`
	// Description of the server containing the volume (in case the image is a backup from a server).
	Server pulumi.StringMapInput `pulumi:"server"`
	// The size of the volume.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// State of the volume.
	State pulumi.StringPtrInput `pulumi:"state"`
	// A list of tags to apply to the image.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The type of volume, possible values are `lSsd` and `bSsd`.
	VolumeType pulumi.StringPtrInput `pulumi:"volumeType"`
	// The zone in which the image should be created.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (InstanceImageAdditionalVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceImageAdditionalVolume)(nil)).Elem()
}

func (i InstanceImageAdditionalVolumeArgs) ToInstanceImageAdditionalVolumeOutput() InstanceImageAdditionalVolumeOutput {
	return i.ToInstanceImageAdditionalVolumeOutputWithContext(context.Background())
}

func (i InstanceImageAdditionalVolumeArgs) ToInstanceImageAdditionalVolumeOutputWithContext(ctx context.Context) InstanceImageAdditionalVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceImageAdditionalVolumeOutput)
}

func (i InstanceImageAdditionalVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[InstanceImageAdditionalVolume] {
	return pulumix.Output[InstanceImageAdditionalVolume]{
		OutputState: i.ToInstanceImageAdditionalVolumeOutputWithContext(ctx).OutputState,
	}
}

// InstanceImageAdditionalVolumeArrayInput is an input type that accepts InstanceImageAdditionalVolumeArray and InstanceImageAdditionalVolumeArrayOutput values.
// You can construct a concrete instance of `InstanceImageAdditionalVolumeArrayInput` via:
//
//	InstanceImageAdditionalVolumeArray{ InstanceImageAdditionalVolumeArgs{...} }
type InstanceImageAdditionalVolumeArrayInput interface {
	pulumi.Input

	ToInstanceImageAdditionalVolumeArrayOutput() InstanceImageAdditionalVolumeArrayOutput
	ToInstanceImageAdditionalVolumeArrayOutputWithContext(context.Context) InstanceImageAdditionalVolumeArrayOutput
}

type InstanceImageAdditionalVolumeArray []InstanceImageAdditionalVolumeInput

func (InstanceImageAdditionalVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceImageAdditionalVolume)(nil)).Elem()
}

func (i InstanceImageAdditionalVolumeArray) ToInstanceImageAdditionalVolumeArrayOutput() InstanceImageAdditionalVolumeArrayOutput {
	return i.ToInstanceImageAdditionalVolumeArrayOutputWithContext(context.Background())
}

func (i InstanceImageAdditionalVolumeArray) ToInstanceImageAdditionalVolumeArrayOutputWithContext(ctx context.Context) InstanceImageAdditionalVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceImageAdditionalVolumeArrayOutput)
}

func (i InstanceImageAdditionalVolumeArray) ToOutput(ctx context.Context) pulumix.Output[[]InstanceImageAdditionalVolume] {
	return pulumix.Output[[]InstanceImageAdditionalVolume]{
		OutputState: i.ToInstanceImageAdditionalVolumeArrayOutputWithContext(ctx).OutputState,
	}
}

type InstanceImageAdditionalVolumeOutput struct{ *pulumi.OutputState }

func (InstanceImageAdditionalVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceImageAdditionalVolume)(nil)).Elem()
}

func (o InstanceImageAdditionalVolumeOutput) ToInstanceImageAdditionalVolumeOutput() InstanceImageAdditionalVolumeOutput {
	return o
}

func (o InstanceImageAdditionalVolumeOutput) ToInstanceImageAdditionalVolumeOutputWithContext(ctx context.Context) InstanceImageAdditionalVolumeOutput {
	return o
}

func (o InstanceImageAdditionalVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceImageAdditionalVolume] {
	return pulumix.Output[InstanceImageAdditionalVolume]{
		OutputState: o.OutputState,
	}
}

// Date of the volume creation.
func (o InstanceImageAdditionalVolumeOutput) CreationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceImageAdditionalVolume) *string { return v.CreationDate }).(pulumi.StringPtrOutput)
}

// The export URI of the volume.
func (o InstanceImageAdditionalVolumeOutput) ExportUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceImageAdditionalVolume) *string { return v.ExportUri }).(pulumi.StringPtrOutput)
}

// ID of the server containing the volume.
func (o InstanceImageAdditionalVolumeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceImageAdditionalVolume) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Date of volume latest update.
func (o InstanceImageAdditionalVolumeOutput) ModificationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceImageAdditionalVolume) *string { return v.ModificationDate }).(pulumi.StringPtrOutput)
}

// The name of the image. If not provided it will be randomly generated.
func (o InstanceImageAdditionalVolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceImageAdditionalVolume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The organization ID the volume is associated with.
func (o InstanceImageAdditionalVolumeOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceImageAdditionalVolume) *string { return v.Organization }).(pulumi.StringPtrOutput)
}

// ID of the project the volume is associated with
func (o InstanceImageAdditionalVolumeOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceImageAdditionalVolume) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// Description of the server containing the volume (in case the image is a backup from a server).
func (o InstanceImageAdditionalVolumeOutput) Server() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstanceImageAdditionalVolume) map[string]string { return v.Server }).(pulumi.StringMapOutput)
}

// The size of the volume.
func (o InstanceImageAdditionalVolumeOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceImageAdditionalVolume) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// State of the volume.
func (o InstanceImageAdditionalVolumeOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceImageAdditionalVolume) *string { return v.State }).(pulumi.StringPtrOutput)
}

// A list of tags to apply to the image.
func (o InstanceImageAdditionalVolumeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceImageAdditionalVolume) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The type of volume, possible values are `lSsd` and `bSsd`.
func (o InstanceImageAdditionalVolumeOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceImageAdditionalVolume) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

// The zone in which the image should be created.
func (o InstanceImageAdditionalVolumeOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceImageAdditionalVolume) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type InstanceImageAdditionalVolumeArrayOutput struct{ *pulumi.OutputState }

func (InstanceImageAdditionalVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceImageAdditionalVolume)(nil)).Elem()
}

func (o InstanceImageAdditionalVolumeArrayOutput) ToInstanceImageAdditionalVolumeArrayOutput() InstanceImageAdditionalVolumeArrayOutput {
	return o
}

func (o InstanceImageAdditionalVolumeArrayOutput) ToInstanceImageAdditionalVolumeArrayOutputWithContext(ctx context.Context) InstanceImageAdditionalVolumeArrayOutput {
	return o
}

func (o InstanceImageAdditionalVolumeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InstanceImageAdditionalVolume] {
	return pulumix.Output[[]InstanceImageAdditionalVolume]{
		OutputState: o.OutputState,
	}
}

func (o InstanceImageAdditionalVolumeArrayOutput) Index(i pulumi.IntInput) InstanceImageAdditionalVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceImageAdditionalVolume {
		return vs[0].([]InstanceImageAdditionalVolume)[vs[1].(int)]
	}).(InstanceImageAdditionalVolumeOutput)
}

type InstanceSecurityGroupInboundRule struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action string `pulumi:"action"`
	// The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	//
	// Deprecated: Ip address is deprecated. Please use ip_range instead
	Ip *string `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	IpRange *string `pulumi:"ipRange"`
	// The port this rule applies to. If no `port` nor `portRange` are specified, the rule will apply to all port. Only one of `port` and `portRange` should be specified.
	Port      *int    `pulumi:"port"`
	PortRange *string `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol *string `pulumi:"protocol"`
}

// InstanceSecurityGroupInboundRuleInput is an input type that accepts InstanceSecurityGroupInboundRuleArgs and InstanceSecurityGroupInboundRuleOutput values.
// You can construct a concrete instance of `InstanceSecurityGroupInboundRuleInput` via:
//
//	InstanceSecurityGroupInboundRuleArgs{...}
type InstanceSecurityGroupInboundRuleInput interface {
	pulumi.Input

	ToInstanceSecurityGroupInboundRuleOutput() InstanceSecurityGroupInboundRuleOutput
	ToInstanceSecurityGroupInboundRuleOutputWithContext(context.Context) InstanceSecurityGroupInboundRuleOutput
}

type InstanceSecurityGroupInboundRuleArgs struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action pulumi.StringInput `pulumi:"action"`
	// The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	//
	// Deprecated: Ip address is deprecated. Please use ip_range instead
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	IpRange pulumi.StringPtrInput `pulumi:"ipRange"`
	// The port this rule applies to. If no `port` nor `portRange` are specified, the rule will apply to all port. Only one of `port` and `portRange` should be specified.
	Port      pulumi.IntPtrInput    `pulumi:"port"`
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (InstanceSecurityGroupInboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSecurityGroupInboundRule)(nil)).Elem()
}

func (i InstanceSecurityGroupInboundRuleArgs) ToInstanceSecurityGroupInboundRuleOutput() InstanceSecurityGroupInboundRuleOutput {
	return i.ToInstanceSecurityGroupInboundRuleOutputWithContext(context.Background())
}

func (i InstanceSecurityGroupInboundRuleArgs) ToInstanceSecurityGroupInboundRuleOutputWithContext(ctx context.Context) InstanceSecurityGroupInboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSecurityGroupInboundRuleOutput)
}

func (i InstanceSecurityGroupInboundRuleArgs) ToOutput(ctx context.Context) pulumix.Output[InstanceSecurityGroupInboundRule] {
	return pulumix.Output[InstanceSecurityGroupInboundRule]{
		OutputState: i.ToInstanceSecurityGroupInboundRuleOutputWithContext(ctx).OutputState,
	}
}

// InstanceSecurityGroupInboundRuleArrayInput is an input type that accepts InstanceSecurityGroupInboundRuleArray and InstanceSecurityGroupInboundRuleArrayOutput values.
// You can construct a concrete instance of `InstanceSecurityGroupInboundRuleArrayInput` via:
//
//	InstanceSecurityGroupInboundRuleArray{ InstanceSecurityGroupInboundRuleArgs{...} }
type InstanceSecurityGroupInboundRuleArrayInput interface {
	pulumi.Input

	ToInstanceSecurityGroupInboundRuleArrayOutput() InstanceSecurityGroupInboundRuleArrayOutput
	ToInstanceSecurityGroupInboundRuleArrayOutputWithContext(context.Context) InstanceSecurityGroupInboundRuleArrayOutput
}

type InstanceSecurityGroupInboundRuleArray []InstanceSecurityGroupInboundRuleInput

func (InstanceSecurityGroupInboundRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSecurityGroupInboundRule)(nil)).Elem()
}

func (i InstanceSecurityGroupInboundRuleArray) ToInstanceSecurityGroupInboundRuleArrayOutput() InstanceSecurityGroupInboundRuleArrayOutput {
	return i.ToInstanceSecurityGroupInboundRuleArrayOutputWithContext(context.Background())
}

func (i InstanceSecurityGroupInboundRuleArray) ToInstanceSecurityGroupInboundRuleArrayOutputWithContext(ctx context.Context) InstanceSecurityGroupInboundRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSecurityGroupInboundRuleArrayOutput)
}

func (i InstanceSecurityGroupInboundRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]InstanceSecurityGroupInboundRule] {
	return pulumix.Output[[]InstanceSecurityGroupInboundRule]{
		OutputState: i.ToInstanceSecurityGroupInboundRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type InstanceSecurityGroupInboundRuleOutput struct{ *pulumi.OutputState }

func (InstanceSecurityGroupInboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSecurityGroupInboundRule)(nil)).Elem()
}

func (o InstanceSecurityGroupInboundRuleOutput) ToInstanceSecurityGroupInboundRuleOutput() InstanceSecurityGroupInboundRuleOutput {
	return o
}

func (o InstanceSecurityGroupInboundRuleOutput) ToInstanceSecurityGroupInboundRuleOutputWithContext(ctx context.Context) InstanceSecurityGroupInboundRuleOutput {
	return o
}

func (o InstanceSecurityGroupInboundRuleOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceSecurityGroupInboundRule] {
	return pulumix.Output[InstanceSecurityGroupInboundRule]{
		OutputState: o.OutputState,
	}
}

// The action to take when rule match. Possible values are: `accept` or `drop`.
func (o InstanceSecurityGroupInboundRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSecurityGroupInboundRule) string { return v.Action }).(pulumi.StringOutput)
}

// The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
//
// Deprecated: Ip address is deprecated. Please use ip_range instead
func (o InstanceSecurityGroupInboundRuleOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupInboundRule) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
func (o InstanceSecurityGroupInboundRuleOutput) IpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupInboundRule) *string { return v.IpRange }).(pulumi.StringPtrOutput)
}

// The port this rule applies to. If no `port` nor `portRange` are specified, the rule will apply to all port. Only one of `port` and `portRange` should be specified.
func (o InstanceSecurityGroupInboundRuleOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupInboundRule) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o InstanceSecurityGroupInboundRuleOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupInboundRule) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
func (o InstanceSecurityGroupInboundRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupInboundRule) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type InstanceSecurityGroupInboundRuleArrayOutput struct{ *pulumi.OutputState }

func (InstanceSecurityGroupInboundRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSecurityGroupInboundRule)(nil)).Elem()
}

func (o InstanceSecurityGroupInboundRuleArrayOutput) ToInstanceSecurityGroupInboundRuleArrayOutput() InstanceSecurityGroupInboundRuleArrayOutput {
	return o
}

func (o InstanceSecurityGroupInboundRuleArrayOutput) ToInstanceSecurityGroupInboundRuleArrayOutputWithContext(ctx context.Context) InstanceSecurityGroupInboundRuleArrayOutput {
	return o
}

func (o InstanceSecurityGroupInboundRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InstanceSecurityGroupInboundRule] {
	return pulumix.Output[[]InstanceSecurityGroupInboundRule]{
		OutputState: o.OutputState,
	}
}

func (o InstanceSecurityGroupInboundRuleArrayOutput) Index(i pulumi.IntInput) InstanceSecurityGroupInboundRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceSecurityGroupInboundRule {
		return vs[0].([]InstanceSecurityGroupInboundRule)[vs[1].(int)]
	}).(InstanceSecurityGroupInboundRuleOutput)
}

type InstanceSecurityGroupOutboundRule struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action string `pulumi:"action"`
	// The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	//
	// Deprecated: Ip address is deprecated. Please use ip_range instead
	Ip *string `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	IpRange *string `pulumi:"ipRange"`
	// The port this rule applies to. If no `port` nor `portRange` are specified, the rule will apply to all port. Only one of `port` and `portRange` should be specified.
	Port      *int    `pulumi:"port"`
	PortRange *string `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol *string `pulumi:"protocol"`
}

// InstanceSecurityGroupOutboundRuleInput is an input type that accepts InstanceSecurityGroupOutboundRuleArgs and InstanceSecurityGroupOutboundRuleOutput values.
// You can construct a concrete instance of `InstanceSecurityGroupOutboundRuleInput` via:
//
//	InstanceSecurityGroupOutboundRuleArgs{...}
type InstanceSecurityGroupOutboundRuleInput interface {
	pulumi.Input

	ToInstanceSecurityGroupOutboundRuleOutput() InstanceSecurityGroupOutboundRuleOutput
	ToInstanceSecurityGroupOutboundRuleOutputWithContext(context.Context) InstanceSecurityGroupOutboundRuleOutput
}

type InstanceSecurityGroupOutboundRuleArgs struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action pulumi.StringInput `pulumi:"action"`
	// The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	//
	// Deprecated: Ip address is deprecated. Please use ip_range instead
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	IpRange pulumi.StringPtrInput `pulumi:"ipRange"`
	// The port this rule applies to. If no `port` nor `portRange` are specified, the rule will apply to all port. Only one of `port` and `portRange` should be specified.
	Port      pulumi.IntPtrInput    `pulumi:"port"`
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (InstanceSecurityGroupOutboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSecurityGroupOutboundRule)(nil)).Elem()
}

func (i InstanceSecurityGroupOutboundRuleArgs) ToInstanceSecurityGroupOutboundRuleOutput() InstanceSecurityGroupOutboundRuleOutput {
	return i.ToInstanceSecurityGroupOutboundRuleOutputWithContext(context.Background())
}

func (i InstanceSecurityGroupOutboundRuleArgs) ToInstanceSecurityGroupOutboundRuleOutputWithContext(ctx context.Context) InstanceSecurityGroupOutboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSecurityGroupOutboundRuleOutput)
}

func (i InstanceSecurityGroupOutboundRuleArgs) ToOutput(ctx context.Context) pulumix.Output[InstanceSecurityGroupOutboundRule] {
	return pulumix.Output[InstanceSecurityGroupOutboundRule]{
		OutputState: i.ToInstanceSecurityGroupOutboundRuleOutputWithContext(ctx).OutputState,
	}
}

// InstanceSecurityGroupOutboundRuleArrayInput is an input type that accepts InstanceSecurityGroupOutboundRuleArray and InstanceSecurityGroupOutboundRuleArrayOutput values.
// You can construct a concrete instance of `InstanceSecurityGroupOutboundRuleArrayInput` via:
//
//	InstanceSecurityGroupOutboundRuleArray{ InstanceSecurityGroupOutboundRuleArgs{...} }
type InstanceSecurityGroupOutboundRuleArrayInput interface {
	pulumi.Input

	ToInstanceSecurityGroupOutboundRuleArrayOutput() InstanceSecurityGroupOutboundRuleArrayOutput
	ToInstanceSecurityGroupOutboundRuleArrayOutputWithContext(context.Context) InstanceSecurityGroupOutboundRuleArrayOutput
}

type InstanceSecurityGroupOutboundRuleArray []InstanceSecurityGroupOutboundRuleInput

func (InstanceSecurityGroupOutboundRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSecurityGroupOutboundRule)(nil)).Elem()
}

func (i InstanceSecurityGroupOutboundRuleArray) ToInstanceSecurityGroupOutboundRuleArrayOutput() InstanceSecurityGroupOutboundRuleArrayOutput {
	return i.ToInstanceSecurityGroupOutboundRuleArrayOutputWithContext(context.Background())
}

func (i InstanceSecurityGroupOutboundRuleArray) ToInstanceSecurityGroupOutboundRuleArrayOutputWithContext(ctx context.Context) InstanceSecurityGroupOutboundRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSecurityGroupOutboundRuleArrayOutput)
}

func (i InstanceSecurityGroupOutboundRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]InstanceSecurityGroupOutboundRule] {
	return pulumix.Output[[]InstanceSecurityGroupOutboundRule]{
		OutputState: i.ToInstanceSecurityGroupOutboundRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type InstanceSecurityGroupOutboundRuleOutput struct{ *pulumi.OutputState }

func (InstanceSecurityGroupOutboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSecurityGroupOutboundRule)(nil)).Elem()
}

func (o InstanceSecurityGroupOutboundRuleOutput) ToInstanceSecurityGroupOutboundRuleOutput() InstanceSecurityGroupOutboundRuleOutput {
	return o
}

func (o InstanceSecurityGroupOutboundRuleOutput) ToInstanceSecurityGroupOutboundRuleOutputWithContext(ctx context.Context) InstanceSecurityGroupOutboundRuleOutput {
	return o
}

func (o InstanceSecurityGroupOutboundRuleOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceSecurityGroupOutboundRule] {
	return pulumix.Output[InstanceSecurityGroupOutboundRule]{
		OutputState: o.OutputState,
	}
}

// The action to take when rule match. Possible values are: `accept` or `drop`.
func (o InstanceSecurityGroupOutboundRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSecurityGroupOutboundRule) string { return v.Action }).(pulumi.StringOutput)
}

// The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
//
// Deprecated: Ip address is deprecated. Please use ip_range instead
func (o InstanceSecurityGroupOutboundRuleOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupOutboundRule) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
func (o InstanceSecurityGroupOutboundRuleOutput) IpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupOutboundRule) *string { return v.IpRange }).(pulumi.StringPtrOutput)
}

// The port this rule applies to. If no `port` nor `portRange` are specified, the rule will apply to all port. Only one of `port` and `portRange` should be specified.
func (o InstanceSecurityGroupOutboundRuleOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupOutboundRule) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o InstanceSecurityGroupOutboundRuleOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupOutboundRule) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
func (o InstanceSecurityGroupOutboundRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupOutboundRule) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type InstanceSecurityGroupOutboundRuleArrayOutput struct{ *pulumi.OutputState }

func (InstanceSecurityGroupOutboundRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSecurityGroupOutboundRule)(nil)).Elem()
}

func (o InstanceSecurityGroupOutboundRuleArrayOutput) ToInstanceSecurityGroupOutboundRuleArrayOutput() InstanceSecurityGroupOutboundRuleArrayOutput {
	return o
}

func (o InstanceSecurityGroupOutboundRuleArrayOutput) ToInstanceSecurityGroupOutboundRuleArrayOutputWithContext(ctx context.Context) InstanceSecurityGroupOutboundRuleArrayOutput {
	return o
}

func (o InstanceSecurityGroupOutboundRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InstanceSecurityGroupOutboundRule] {
	return pulumix.Output[[]InstanceSecurityGroupOutboundRule]{
		OutputState: o.OutputState,
	}
}

func (o InstanceSecurityGroupOutboundRuleArrayOutput) Index(i pulumi.IntInput) InstanceSecurityGroupOutboundRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceSecurityGroupOutboundRule {
		return vs[0].([]InstanceSecurityGroupOutboundRule)[vs[1].(int)]
	}).(InstanceSecurityGroupOutboundRuleOutput)
}

type InstanceSecurityGroupRulesInboundRule struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action string `pulumi:"action"`
	// The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	//
	// Deprecated: Ip address is deprecated. Please use ip_range instead
	Ip *string `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	IpRange *string `pulumi:"ipRange"`
	// The port this rule apply to. If no port is specified, rule will apply to all port.
	Port      *int    `pulumi:"port"`
	PortRange *string `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol *string `pulumi:"protocol"`
}

// InstanceSecurityGroupRulesInboundRuleInput is an input type that accepts InstanceSecurityGroupRulesInboundRuleArgs and InstanceSecurityGroupRulesInboundRuleOutput values.
// You can construct a concrete instance of `InstanceSecurityGroupRulesInboundRuleInput` via:
//
//	InstanceSecurityGroupRulesInboundRuleArgs{...}
type InstanceSecurityGroupRulesInboundRuleInput interface {
	pulumi.Input

	ToInstanceSecurityGroupRulesInboundRuleOutput() InstanceSecurityGroupRulesInboundRuleOutput
	ToInstanceSecurityGroupRulesInboundRuleOutputWithContext(context.Context) InstanceSecurityGroupRulesInboundRuleOutput
}

type InstanceSecurityGroupRulesInboundRuleArgs struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action pulumi.StringInput `pulumi:"action"`
	// The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	//
	// Deprecated: Ip address is deprecated. Please use ip_range instead
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	IpRange pulumi.StringPtrInput `pulumi:"ipRange"`
	// The port this rule apply to. If no port is specified, rule will apply to all port.
	Port      pulumi.IntPtrInput    `pulumi:"port"`
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (InstanceSecurityGroupRulesInboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSecurityGroupRulesInboundRule)(nil)).Elem()
}

func (i InstanceSecurityGroupRulesInboundRuleArgs) ToInstanceSecurityGroupRulesInboundRuleOutput() InstanceSecurityGroupRulesInboundRuleOutput {
	return i.ToInstanceSecurityGroupRulesInboundRuleOutputWithContext(context.Background())
}

func (i InstanceSecurityGroupRulesInboundRuleArgs) ToInstanceSecurityGroupRulesInboundRuleOutputWithContext(ctx context.Context) InstanceSecurityGroupRulesInboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSecurityGroupRulesInboundRuleOutput)
}

func (i InstanceSecurityGroupRulesInboundRuleArgs) ToOutput(ctx context.Context) pulumix.Output[InstanceSecurityGroupRulesInboundRule] {
	return pulumix.Output[InstanceSecurityGroupRulesInboundRule]{
		OutputState: i.ToInstanceSecurityGroupRulesInboundRuleOutputWithContext(ctx).OutputState,
	}
}

// InstanceSecurityGroupRulesInboundRuleArrayInput is an input type that accepts InstanceSecurityGroupRulesInboundRuleArray and InstanceSecurityGroupRulesInboundRuleArrayOutput values.
// You can construct a concrete instance of `InstanceSecurityGroupRulesInboundRuleArrayInput` via:
//
//	InstanceSecurityGroupRulesInboundRuleArray{ InstanceSecurityGroupRulesInboundRuleArgs{...} }
type InstanceSecurityGroupRulesInboundRuleArrayInput interface {
	pulumi.Input

	ToInstanceSecurityGroupRulesInboundRuleArrayOutput() InstanceSecurityGroupRulesInboundRuleArrayOutput
	ToInstanceSecurityGroupRulesInboundRuleArrayOutputWithContext(context.Context) InstanceSecurityGroupRulesInboundRuleArrayOutput
}

type InstanceSecurityGroupRulesInboundRuleArray []InstanceSecurityGroupRulesInboundRuleInput

func (InstanceSecurityGroupRulesInboundRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSecurityGroupRulesInboundRule)(nil)).Elem()
}

func (i InstanceSecurityGroupRulesInboundRuleArray) ToInstanceSecurityGroupRulesInboundRuleArrayOutput() InstanceSecurityGroupRulesInboundRuleArrayOutput {
	return i.ToInstanceSecurityGroupRulesInboundRuleArrayOutputWithContext(context.Background())
}

func (i InstanceSecurityGroupRulesInboundRuleArray) ToInstanceSecurityGroupRulesInboundRuleArrayOutputWithContext(ctx context.Context) InstanceSecurityGroupRulesInboundRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSecurityGroupRulesInboundRuleArrayOutput)
}

func (i InstanceSecurityGroupRulesInboundRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]InstanceSecurityGroupRulesInboundRule] {
	return pulumix.Output[[]InstanceSecurityGroupRulesInboundRule]{
		OutputState: i.ToInstanceSecurityGroupRulesInboundRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type InstanceSecurityGroupRulesInboundRuleOutput struct{ *pulumi.OutputState }

func (InstanceSecurityGroupRulesInboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSecurityGroupRulesInboundRule)(nil)).Elem()
}

func (o InstanceSecurityGroupRulesInboundRuleOutput) ToInstanceSecurityGroupRulesInboundRuleOutput() InstanceSecurityGroupRulesInboundRuleOutput {
	return o
}

func (o InstanceSecurityGroupRulesInboundRuleOutput) ToInstanceSecurityGroupRulesInboundRuleOutputWithContext(ctx context.Context) InstanceSecurityGroupRulesInboundRuleOutput {
	return o
}

func (o InstanceSecurityGroupRulesInboundRuleOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceSecurityGroupRulesInboundRule] {
	return pulumix.Output[InstanceSecurityGroupRulesInboundRule]{
		OutputState: o.OutputState,
	}
}

// The action to take when rule match. Possible values are: `accept` or `drop`.
func (o InstanceSecurityGroupRulesInboundRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSecurityGroupRulesInboundRule) string { return v.Action }).(pulumi.StringOutput)
}

// The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
//
// Deprecated: Ip address is deprecated. Please use ip_range instead
func (o InstanceSecurityGroupRulesInboundRuleOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupRulesInboundRule) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
func (o InstanceSecurityGroupRulesInboundRuleOutput) IpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupRulesInboundRule) *string { return v.IpRange }).(pulumi.StringPtrOutput)
}

// The port this rule apply to. If no port is specified, rule will apply to all port.
func (o InstanceSecurityGroupRulesInboundRuleOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupRulesInboundRule) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o InstanceSecurityGroupRulesInboundRuleOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupRulesInboundRule) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
func (o InstanceSecurityGroupRulesInboundRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupRulesInboundRule) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type InstanceSecurityGroupRulesInboundRuleArrayOutput struct{ *pulumi.OutputState }

func (InstanceSecurityGroupRulesInboundRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSecurityGroupRulesInboundRule)(nil)).Elem()
}

func (o InstanceSecurityGroupRulesInboundRuleArrayOutput) ToInstanceSecurityGroupRulesInboundRuleArrayOutput() InstanceSecurityGroupRulesInboundRuleArrayOutput {
	return o
}

func (o InstanceSecurityGroupRulesInboundRuleArrayOutput) ToInstanceSecurityGroupRulesInboundRuleArrayOutputWithContext(ctx context.Context) InstanceSecurityGroupRulesInboundRuleArrayOutput {
	return o
}

func (o InstanceSecurityGroupRulesInboundRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InstanceSecurityGroupRulesInboundRule] {
	return pulumix.Output[[]InstanceSecurityGroupRulesInboundRule]{
		OutputState: o.OutputState,
	}
}

func (o InstanceSecurityGroupRulesInboundRuleArrayOutput) Index(i pulumi.IntInput) InstanceSecurityGroupRulesInboundRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceSecurityGroupRulesInboundRule {
		return vs[0].([]InstanceSecurityGroupRulesInboundRule)[vs[1].(int)]
	}).(InstanceSecurityGroupRulesInboundRuleOutput)
}

type InstanceSecurityGroupRulesOutboundRule struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action string `pulumi:"action"`
	// The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	//
	// Deprecated: Ip address is deprecated. Please use ip_range instead
	Ip *string `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	IpRange *string `pulumi:"ipRange"`
	// The port this rule apply to. If no port is specified, rule will apply to all port.
	Port      *int    `pulumi:"port"`
	PortRange *string `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol *string `pulumi:"protocol"`
}

// InstanceSecurityGroupRulesOutboundRuleInput is an input type that accepts InstanceSecurityGroupRulesOutboundRuleArgs and InstanceSecurityGroupRulesOutboundRuleOutput values.
// You can construct a concrete instance of `InstanceSecurityGroupRulesOutboundRuleInput` via:
//
//	InstanceSecurityGroupRulesOutboundRuleArgs{...}
type InstanceSecurityGroupRulesOutboundRuleInput interface {
	pulumi.Input

	ToInstanceSecurityGroupRulesOutboundRuleOutput() InstanceSecurityGroupRulesOutboundRuleOutput
	ToInstanceSecurityGroupRulesOutboundRuleOutputWithContext(context.Context) InstanceSecurityGroupRulesOutboundRuleOutput
}

type InstanceSecurityGroupRulesOutboundRuleArgs struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action pulumi.StringInput `pulumi:"action"`
	// The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	//
	// Deprecated: Ip address is deprecated. Please use ip_range instead
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	IpRange pulumi.StringPtrInput `pulumi:"ipRange"`
	// The port this rule apply to. If no port is specified, rule will apply to all port.
	Port      pulumi.IntPtrInput    `pulumi:"port"`
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (InstanceSecurityGroupRulesOutboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSecurityGroupRulesOutboundRule)(nil)).Elem()
}

func (i InstanceSecurityGroupRulesOutboundRuleArgs) ToInstanceSecurityGroupRulesOutboundRuleOutput() InstanceSecurityGroupRulesOutboundRuleOutput {
	return i.ToInstanceSecurityGroupRulesOutboundRuleOutputWithContext(context.Background())
}

func (i InstanceSecurityGroupRulesOutboundRuleArgs) ToInstanceSecurityGroupRulesOutboundRuleOutputWithContext(ctx context.Context) InstanceSecurityGroupRulesOutboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSecurityGroupRulesOutboundRuleOutput)
}

func (i InstanceSecurityGroupRulesOutboundRuleArgs) ToOutput(ctx context.Context) pulumix.Output[InstanceSecurityGroupRulesOutboundRule] {
	return pulumix.Output[InstanceSecurityGroupRulesOutboundRule]{
		OutputState: i.ToInstanceSecurityGroupRulesOutboundRuleOutputWithContext(ctx).OutputState,
	}
}

// InstanceSecurityGroupRulesOutboundRuleArrayInput is an input type that accepts InstanceSecurityGroupRulesOutboundRuleArray and InstanceSecurityGroupRulesOutboundRuleArrayOutput values.
// You can construct a concrete instance of `InstanceSecurityGroupRulesOutboundRuleArrayInput` via:
//
//	InstanceSecurityGroupRulesOutboundRuleArray{ InstanceSecurityGroupRulesOutboundRuleArgs{...} }
type InstanceSecurityGroupRulesOutboundRuleArrayInput interface {
	pulumi.Input

	ToInstanceSecurityGroupRulesOutboundRuleArrayOutput() InstanceSecurityGroupRulesOutboundRuleArrayOutput
	ToInstanceSecurityGroupRulesOutboundRuleArrayOutputWithContext(context.Context) InstanceSecurityGroupRulesOutboundRuleArrayOutput
}

type InstanceSecurityGroupRulesOutboundRuleArray []InstanceSecurityGroupRulesOutboundRuleInput

func (InstanceSecurityGroupRulesOutboundRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSecurityGroupRulesOutboundRule)(nil)).Elem()
}

func (i InstanceSecurityGroupRulesOutboundRuleArray) ToInstanceSecurityGroupRulesOutboundRuleArrayOutput() InstanceSecurityGroupRulesOutboundRuleArrayOutput {
	return i.ToInstanceSecurityGroupRulesOutboundRuleArrayOutputWithContext(context.Background())
}

func (i InstanceSecurityGroupRulesOutboundRuleArray) ToInstanceSecurityGroupRulesOutboundRuleArrayOutputWithContext(ctx context.Context) InstanceSecurityGroupRulesOutboundRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSecurityGroupRulesOutboundRuleArrayOutput)
}

func (i InstanceSecurityGroupRulesOutboundRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]InstanceSecurityGroupRulesOutboundRule] {
	return pulumix.Output[[]InstanceSecurityGroupRulesOutboundRule]{
		OutputState: i.ToInstanceSecurityGroupRulesOutboundRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type InstanceSecurityGroupRulesOutboundRuleOutput struct{ *pulumi.OutputState }

func (InstanceSecurityGroupRulesOutboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSecurityGroupRulesOutboundRule)(nil)).Elem()
}

func (o InstanceSecurityGroupRulesOutboundRuleOutput) ToInstanceSecurityGroupRulesOutboundRuleOutput() InstanceSecurityGroupRulesOutboundRuleOutput {
	return o
}

func (o InstanceSecurityGroupRulesOutboundRuleOutput) ToInstanceSecurityGroupRulesOutboundRuleOutputWithContext(ctx context.Context) InstanceSecurityGroupRulesOutboundRuleOutput {
	return o
}

func (o InstanceSecurityGroupRulesOutboundRuleOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceSecurityGroupRulesOutboundRule] {
	return pulumix.Output[InstanceSecurityGroupRulesOutboundRule]{
		OutputState: o.OutputState,
	}
}

// The action to take when rule match. Possible values are: `accept` or `drop`.
func (o InstanceSecurityGroupRulesOutboundRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSecurityGroupRulesOutboundRule) string { return v.Action }).(pulumi.StringOutput)
}

// The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
//
// Deprecated: Ip address is deprecated. Please use ip_range instead
func (o InstanceSecurityGroupRulesOutboundRuleOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupRulesOutboundRule) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
func (o InstanceSecurityGroupRulesOutboundRuleOutput) IpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupRulesOutboundRule) *string { return v.IpRange }).(pulumi.StringPtrOutput)
}

// The port this rule apply to. If no port is specified, rule will apply to all port.
func (o InstanceSecurityGroupRulesOutboundRuleOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupRulesOutboundRule) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o InstanceSecurityGroupRulesOutboundRuleOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupRulesOutboundRule) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
func (o InstanceSecurityGroupRulesOutboundRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSecurityGroupRulesOutboundRule) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type InstanceSecurityGroupRulesOutboundRuleArrayOutput struct{ *pulumi.OutputState }

func (InstanceSecurityGroupRulesOutboundRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSecurityGroupRulesOutboundRule)(nil)).Elem()
}

func (o InstanceSecurityGroupRulesOutboundRuleArrayOutput) ToInstanceSecurityGroupRulesOutboundRuleArrayOutput() InstanceSecurityGroupRulesOutboundRuleArrayOutput {
	return o
}

func (o InstanceSecurityGroupRulesOutboundRuleArrayOutput) ToInstanceSecurityGroupRulesOutboundRuleArrayOutputWithContext(ctx context.Context) InstanceSecurityGroupRulesOutboundRuleArrayOutput {
	return o
}

func (o InstanceSecurityGroupRulesOutboundRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InstanceSecurityGroupRulesOutboundRule] {
	return pulumix.Output[[]InstanceSecurityGroupRulesOutboundRule]{
		OutputState: o.OutputState,
	}
}

func (o InstanceSecurityGroupRulesOutboundRuleArrayOutput) Index(i pulumi.IntInput) InstanceSecurityGroupRulesOutboundRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceSecurityGroupRulesOutboundRule {
		return vs[0].([]InstanceSecurityGroupRulesOutboundRule)[vs[1].(int)]
	}).(InstanceSecurityGroupRulesOutboundRuleOutput)
}

type InstanceServerPrivateNetwork struct {
	MacAddress *string `pulumi:"macAddress"`
	PnId       string  `pulumi:"pnId"`
	Status     *string `pulumi:"status"`
	// `zone`) The zone in which the server should be created.
	Zone *string `pulumi:"zone"`
}

// InstanceServerPrivateNetworkInput is an input type that accepts InstanceServerPrivateNetworkArgs and InstanceServerPrivateNetworkOutput values.
// You can construct a concrete instance of `InstanceServerPrivateNetworkInput` via:
//
//	InstanceServerPrivateNetworkArgs{...}
type InstanceServerPrivateNetworkInput interface {
	pulumi.Input

	ToInstanceServerPrivateNetworkOutput() InstanceServerPrivateNetworkOutput
	ToInstanceServerPrivateNetworkOutputWithContext(context.Context) InstanceServerPrivateNetworkOutput
}

type InstanceServerPrivateNetworkArgs struct {
	MacAddress pulumi.StringPtrInput `pulumi:"macAddress"`
	PnId       pulumi.StringInput    `pulumi:"pnId"`
	Status     pulumi.StringPtrInput `pulumi:"status"`
	// `zone`) The zone in which the server should be created.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (InstanceServerPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceServerPrivateNetwork)(nil)).Elem()
}

func (i InstanceServerPrivateNetworkArgs) ToInstanceServerPrivateNetworkOutput() InstanceServerPrivateNetworkOutput {
	return i.ToInstanceServerPrivateNetworkOutputWithContext(context.Background())
}

func (i InstanceServerPrivateNetworkArgs) ToInstanceServerPrivateNetworkOutputWithContext(ctx context.Context) InstanceServerPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceServerPrivateNetworkOutput)
}

func (i InstanceServerPrivateNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[InstanceServerPrivateNetwork] {
	return pulumix.Output[InstanceServerPrivateNetwork]{
		OutputState: i.ToInstanceServerPrivateNetworkOutputWithContext(ctx).OutputState,
	}
}

// InstanceServerPrivateNetworkArrayInput is an input type that accepts InstanceServerPrivateNetworkArray and InstanceServerPrivateNetworkArrayOutput values.
// You can construct a concrete instance of `InstanceServerPrivateNetworkArrayInput` via:
//
//	InstanceServerPrivateNetworkArray{ InstanceServerPrivateNetworkArgs{...} }
type InstanceServerPrivateNetworkArrayInput interface {
	pulumi.Input

	ToInstanceServerPrivateNetworkArrayOutput() InstanceServerPrivateNetworkArrayOutput
	ToInstanceServerPrivateNetworkArrayOutputWithContext(context.Context) InstanceServerPrivateNetworkArrayOutput
}

type InstanceServerPrivateNetworkArray []InstanceServerPrivateNetworkInput

func (InstanceServerPrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceServerPrivateNetwork)(nil)).Elem()
}

func (i InstanceServerPrivateNetworkArray) ToInstanceServerPrivateNetworkArrayOutput() InstanceServerPrivateNetworkArrayOutput {
	return i.ToInstanceServerPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i InstanceServerPrivateNetworkArray) ToInstanceServerPrivateNetworkArrayOutputWithContext(ctx context.Context) InstanceServerPrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceServerPrivateNetworkArrayOutput)
}

func (i InstanceServerPrivateNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]InstanceServerPrivateNetwork] {
	return pulumix.Output[[]InstanceServerPrivateNetwork]{
		OutputState: i.ToInstanceServerPrivateNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type InstanceServerPrivateNetworkOutput struct{ *pulumi.OutputState }

func (InstanceServerPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceServerPrivateNetwork)(nil)).Elem()
}

func (o InstanceServerPrivateNetworkOutput) ToInstanceServerPrivateNetworkOutput() InstanceServerPrivateNetworkOutput {
	return o
}

func (o InstanceServerPrivateNetworkOutput) ToInstanceServerPrivateNetworkOutputWithContext(ctx context.Context) InstanceServerPrivateNetworkOutput {
	return o
}

func (o InstanceServerPrivateNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceServerPrivateNetwork] {
	return pulumix.Output[InstanceServerPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o InstanceServerPrivateNetworkOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceServerPrivateNetwork) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

func (o InstanceServerPrivateNetworkOutput) PnId() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceServerPrivateNetwork) string { return v.PnId }).(pulumi.StringOutput)
}

func (o InstanceServerPrivateNetworkOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceServerPrivateNetwork) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// `zone`) The zone in which the server should be created.
func (o InstanceServerPrivateNetworkOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceServerPrivateNetwork) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type InstanceServerPrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (InstanceServerPrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceServerPrivateNetwork)(nil)).Elem()
}

func (o InstanceServerPrivateNetworkArrayOutput) ToInstanceServerPrivateNetworkArrayOutput() InstanceServerPrivateNetworkArrayOutput {
	return o
}

func (o InstanceServerPrivateNetworkArrayOutput) ToInstanceServerPrivateNetworkArrayOutputWithContext(ctx context.Context) InstanceServerPrivateNetworkArrayOutput {
	return o
}

func (o InstanceServerPrivateNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InstanceServerPrivateNetwork] {
	return pulumix.Output[[]InstanceServerPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o InstanceServerPrivateNetworkArrayOutput) Index(i pulumi.IntInput) InstanceServerPrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceServerPrivateNetwork {
		return vs[0].([]InstanceServerPrivateNetwork)[vs[1].(int)]
	}).(InstanceServerPrivateNetworkOutput)
}

type InstanceServerPublicIp struct {
	// The address of the IP
	Address *string `pulumi:"address"`
	// The ID of the IP
	Id *string `pulumi:"id"`
}

// InstanceServerPublicIpInput is an input type that accepts InstanceServerPublicIpArgs and InstanceServerPublicIpOutput values.
// You can construct a concrete instance of `InstanceServerPublicIpInput` via:
//
//	InstanceServerPublicIpArgs{...}
type InstanceServerPublicIpInput interface {
	pulumi.Input

	ToInstanceServerPublicIpOutput() InstanceServerPublicIpOutput
	ToInstanceServerPublicIpOutputWithContext(context.Context) InstanceServerPublicIpOutput
}

type InstanceServerPublicIpArgs struct {
	// The address of the IP
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The ID of the IP
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (InstanceServerPublicIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceServerPublicIp)(nil)).Elem()
}

func (i InstanceServerPublicIpArgs) ToInstanceServerPublicIpOutput() InstanceServerPublicIpOutput {
	return i.ToInstanceServerPublicIpOutputWithContext(context.Background())
}

func (i InstanceServerPublicIpArgs) ToInstanceServerPublicIpOutputWithContext(ctx context.Context) InstanceServerPublicIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceServerPublicIpOutput)
}

func (i InstanceServerPublicIpArgs) ToOutput(ctx context.Context) pulumix.Output[InstanceServerPublicIp] {
	return pulumix.Output[InstanceServerPublicIp]{
		OutputState: i.ToInstanceServerPublicIpOutputWithContext(ctx).OutputState,
	}
}

// InstanceServerPublicIpArrayInput is an input type that accepts InstanceServerPublicIpArray and InstanceServerPublicIpArrayOutput values.
// You can construct a concrete instance of `InstanceServerPublicIpArrayInput` via:
//
//	InstanceServerPublicIpArray{ InstanceServerPublicIpArgs{...} }
type InstanceServerPublicIpArrayInput interface {
	pulumi.Input

	ToInstanceServerPublicIpArrayOutput() InstanceServerPublicIpArrayOutput
	ToInstanceServerPublicIpArrayOutputWithContext(context.Context) InstanceServerPublicIpArrayOutput
}

type InstanceServerPublicIpArray []InstanceServerPublicIpInput

func (InstanceServerPublicIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceServerPublicIp)(nil)).Elem()
}

func (i InstanceServerPublicIpArray) ToInstanceServerPublicIpArrayOutput() InstanceServerPublicIpArrayOutput {
	return i.ToInstanceServerPublicIpArrayOutputWithContext(context.Background())
}

func (i InstanceServerPublicIpArray) ToInstanceServerPublicIpArrayOutputWithContext(ctx context.Context) InstanceServerPublicIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceServerPublicIpArrayOutput)
}

func (i InstanceServerPublicIpArray) ToOutput(ctx context.Context) pulumix.Output[[]InstanceServerPublicIp] {
	return pulumix.Output[[]InstanceServerPublicIp]{
		OutputState: i.ToInstanceServerPublicIpArrayOutputWithContext(ctx).OutputState,
	}
}

type InstanceServerPublicIpOutput struct{ *pulumi.OutputState }

func (InstanceServerPublicIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceServerPublicIp)(nil)).Elem()
}

func (o InstanceServerPublicIpOutput) ToInstanceServerPublicIpOutput() InstanceServerPublicIpOutput {
	return o
}

func (o InstanceServerPublicIpOutput) ToInstanceServerPublicIpOutputWithContext(ctx context.Context) InstanceServerPublicIpOutput {
	return o
}

func (o InstanceServerPublicIpOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceServerPublicIp] {
	return pulumix.Output[InstanceServerPublicIp]{
		OutputState: o.OutputState,
	}
}

// The address of the IP
func (o InstanceServerPublicIpOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceServerPublicIp) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The ID of the IP
func (o InstanceServerPublicIpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceServerPublicIp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type InstanceServerPublicIpArrayOutput struct{ *pulumi.OutputState }

func (InstanceServerPublicIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceServerPublicIp)(nil)).Elem()
}

func (o InstanceServerPublicIpArrayOutput) ToInstanceServerPublicIpArrayOutput() InstanceServerPublicIpArrayOutput {
	return o
}

func (o InstanceServerPublicIpArrayOutput) ToInstanceServerPublicIpArrayOutputWithContext(ctx context.Context) InstanceServerPublicIpArrayOutput {
	return o
}

func (o InstanceServerPublicIpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InstanceServerPublicIp] {
	return pulumix.Output[[]InstanceServerPublicIp]{
		OutputState: o.OutputState,
	}
}

func (o InstanceServerPublicIpArrayOutput) Index(i pulumi.IntInput) InstanceServerPublicIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceServerPublicIp {
		return vs[0].([]InstanceServerPublicIp)[vs[1].(int)]
	}).(InstanceServerPublicIpOutput)
}

type InstanceServerRootVolume struct {
	Boot *bool `pulumi:"boot"`
	// Forces deletion of the root volume on instance termination.
	//
	// > **Important:** Updates to `root_volume.size_in_gb` will be ignored after the creation of the server.
	DeleteOnTermination *bool `pulumi:"deleteOnTermination"`
	// The name of the server.
	Name *string `pulumi:"name"`
	// Size of the root volume in gigabytes.
	// To find the right size use [this endpoint](https://api.scaleway.com/instance/v1/zones/fr-par-1/products/servers) and
	// check the `volumes_constraint.{min|max}_size` (in bytes) for your `commercialType`.
	// Updates to this field will recreate a new resource.
	SizeInGb *int `pulumi:"sizeInGb"`
	// The volume ID of the root volume of the server, allows you to create server with an existing volume. If empty, will be computed to a created volume ID.
	VolumeId *string `pulumi:"volumeId"`
	// Volume type of root volume, can be `bSsd` or `lSsd`, default value depends on server type
	VolumeType *string `pulumi:"volumeType"`
}

// InstanceServerRootVolumeInput is an input type that accepts InstanceServerRootVolumeArgs and InstanceServerRootVolumeOutput values.
// You can construct a concrete instance of `InstanceServerRootVolumeInput` via:
//
//	InstanceServerRootVolumeArgs{...}
type InstanceServerRootVolumeInput interface {
	pulumi.Input

	ToInstanceServerRootVolumeOutput() InstanceServerRootVolumeOutput
	ToInstanceServerRootVolumeOutputWithContext(context.Context) InstanceServerRootVolumeOutput
}

type InstanceServerRootVolumeArgs struct {
	Boot pulumi.BoolPtrInput `pulumi:"boot"`
	// Forces deletion of the root volume on instance termination.
	//
	// > **Important:** Updates to `root_volume.size_in_gb` will be ignored after the creation of the server.
	DeleteOnTermination pulumi.BoolPtrInput `pulumi:"deleteOnTermination"`
	// The name of the server.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Size of the root volume in gigabytes.
	// To find the right size use [this endpoint](https://api.scaleway.com/instance/v1/zones/fr-par-1/products/servers) and
	// check the `volumes_constraint.{min|max}_size` (in bytes) for your `commercialType`.
	// Updates to this field will recreate a new resource.
	SizeInGb pulumi.IntPtrInput `pulumi:"sizeInGb"`
	// The volume ID of the root volume of the server, allows you to create server with an existing volume. If empty, will be computed to a created volume ID.
	VolumeId pulumi.StringPtrInput `pulumi:"volumeId"`
	// Volume type of root volume, can be `bSsd` or `lSsd`, default value depends on server type
	VolumeType pulumi.StringPtrInput `pulumi:"volumeType"`
}

func (InstanceServerRootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceServerRootVolume)(nil)).Elem()
}

func (i InstanceServerRootVolumeArgs) ToInstanceServerRootVolumeOutput() InstanceServerRootVolumeOutput {
	return i.ToInstanceServerRootVolumeOutputWithContext(context.Background())
}

func (i InstanceServerRootVolumeArgs) ToInstanceServerRootVolumeOutputWithContext(ctx context.Context) InstanceServerRootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceServerRootVolumeOutput)
}

func (i InstanceServerRootVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[InstanceServerRootVolume] {
	return pulumix.Output[InstanceServerRootVolume]{
		OutputState: i.ToInstanceServerRootVolumeOutputWithContext(ctx).OutputState,
	}
}

func (i InstanceServerRootVolumeArgs) ToInstanceServerRootVolumePtrOutput() InstanceServerRootVolumePtrOutput {
	return i.ToInstanceServerRootVolumePtrOutputWithContext(context.Background())
}

func (i InstanceServerRootVolumeArgs) ToInstanceServerRootVolumePtrOutputWithContext(ctx context.Context) InstanceServerRootVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceServerRootVolumeOutput).ToInstanceServerRootVolumePtrOutputWithContext(ctx)
}

// InstanceServerRootVolumePtrInput is an input type that accepts InstanceServerRootVolumeArgs, InstanceServerRootVolumePtr and InstanceServerRootVolumePtrOutput values.
// You can construct a concrete instance of `InstanceServerRootVolumePtrInput` via:
//
//	        InstanceServerRootVolumeArgs{...}
//
//	or:
//
//	        nil
type InstanceServerRootVolumePtrInput interface {
	pulumi.Input

	ToInstanceServerRootVolumePtrOutput() InstanceServerRootVolumePtrOutput
	ToInstanceServerRootVolumePtrOutputWithContext(context.Context) InstanceServerRootVolumePtrOutput
}

type instanceServerRootVolumePtrType InstanceServerRootVolumeArgs

func InstanceServerRootVolumePtr(v *InstanceServerRootVolumeArgs) InstanceServerRootVolumePtrInput {
	return (*instanceServerRootVolumePtrType)(v)
}

func (*instanceServerRootVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceServerRootVolume)(nil)).Elem()
}

func (i *instanceServerRootVolumePtrType) ToInstanceServerRootVolumePtrOutput() InstanceServerRootVolumePtrOutput {
	return i.ToInstanceServerRootVolumePtrOutputWithContext(context.Background())
}

func (i *instanceServerRootVolumePtrType) ToInstanceServerRootVolumePtrOutputWithContext(ctx context.Context) InstanceServerRootVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceServerRootVolumePtrOutput)
}

func (i *instanceServerRootVolumePtrType) ToOutput(ctx context.Context) pulumix.Output[*InstanceServerRootVolume] {
	return pulumix.Output[*InstanceServerRootVolume]{
		OutputState: i.ToInstanceServerRootVolumePtrOutputWithContext(ctx).OutputState,
	}
}

type InstanceServerRootVolumeOutput struct{ *pulumi.OutputState }

func (InstanceServerRootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceServerRootVolume)(nil)).Elem()
}

func (o InstanceServerRootVolumeOutput) ToInstanceServerRootVolumeOutput() InstanceServerRootVolumeOutput {
	return o
}

func (o InstanceServerRootVolumeOutput) ToInstanceServerRootVolumeOutputWithContext(ctx context.Context) InstanceServerRootVolumeOutput {
	return o
}

func (o InstanceServerRootVolumeOutput) ToInstanceServerRootVolumePtrOutput() InstanceServerRootVolumePtrOutput {
	return o.ToInstanceServerRootVolumePtrOutputWithContext(context.Background())
}

func (o InstanceServerRootVolumeOutput) ToInstanceServerRootVolumePtrOutputWithContext(ctx context.Context) InstanceServerRootVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceServerRootVolume) *InstanceServerRootVolume {
		return &v
	}).(InstanceServerRootVolumePtrOutput)
}

func (o InstanceServerRootVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceServerRootVolume] {
	return pulumix.Output[InstanceServerRootVolume]{
		OutputState: o.OutputState,
	}
}

func (o InstanceServerRootVolumeOutput) Boot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceServerRootVolume) *bool { return v.Boot }).(pulumi.BoolPtrOutput)
}

// Forces deletion of the root volume on instance termination.
//
// > **Important:** Updates to `root_volume.size_in_gb` will be ignored after the creation of the server.
func (o InstanceServerRootVolumeOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceServerRootVolume) *bool { return v.DeleteOnTermination }).(pulumi.BoolPtrOutput)
}

// The name of the server.
func (o InstanceServerRootVolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceServerRootVolume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Size of the root volume in gigabytes.
// To find the right size use [this endpoint](https://api.scaleway.com/instance/v1/zones/fr-par-1/products/servers) and
// check the `volumes_constraint.{min|max}_size` (in bytes) for your `commercialType`.
// Updates to this field will recreate a new resource.
func (o InstanceServerRootVolumeOutput) SizeInGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceServerRootVolume) *int { return v.SizeInGb }).(pulumi.IntPtrOutput)
}

// The volume ID of the root volume of the server, allows you to create server with an existing volume. If empty, will be computed to a created volume ID.
func (o InstanceServerRootVolumeOutput) VolumeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceServerRootVolume) *string { return v.VolumeId }).(pulumi.StringPtrOutput)
}

// Volume type of root volume, can be `bSsd` or `lSsd`, default value depends on server type
func (o InstanceServerRootVolumeOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceServerRootVolume) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type InstanceServerRootVolumePtrOutput struct{ *pulumi.OutputState }

func (InstanceServerRootVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceServerRootVolume)(nil)).Elem()
}

func (o InstanceServerRootVolumePtrOutput) ToInstanceServerRootVolumePtrOutput() InstanceServerRootVolumePtrOutput {
	return o
}

func (o InstanceServerRootVolumePtrOutput) ToInstanceServerRootVolumePtrOutputWithContext(ctx context.Context) InstanceServerRootVolumePtrOutput {
	return o
}

func (o InstanceServerRootVolumePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*InstanceServerRootVolume] {
	return pulumix.Output[*InstanceServerRootVolume]{
		OutputState: o.OutputState,
	}
}

func (o InstanceServerRootVolumePtrOutput) Elem() InstanceServerRootVolumeOutput {
	return o.ApplyT(func(v *InstanceServerRootVolume) InstanceServerRootVolume {
		if v != nil {
			return *v
		}
		var ret InstanceServerRootVolume
		return ret
	}).(InstanceServerRootVolumeOutput)
}

func (o InstanceServerRootVolumePtrOutput) Boot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceServerRootVolume) *bool {
		if v == nil {
			return nil
		}
		return v.Boot
	}).(pulumi.BoolPtrOutput)
}

// Forces deletion of the root volume on instance termination.
//
// > **Important:** Updates to `root_volume.size_in_gb` will be ignored after the creation of the server.
func (o InstanceServerRootVolumePtrOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceServerRootVolume) *bool {
		if v == nil {
			return nil
		}
		return v.DeleteOnTermination
	}).(pulumi.BoolPtrOutput)
}

// The name of the server.
func (o InstanceServerRootVolumePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceServerRootVolume) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Size of the root volume in gigabytes.
// To find the right size use [this endpoint](https://api.scaleway.com/instance/v1/zones/fr-par-1/products/servers) and
// check the `volumes_constraint.{min|max}_size` (in bytes) for your `commercialType`.
// Updates to this field will recreate a new resource.
func (o InstanceServerRootVolumePtrOutput) SizeInGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceServerRootVolume) *int {
		if v == nil {
			return nil
		}
		return v.SizeInGb
	}).(pulumi.IntPtrOutput)
}

// The volume ID of the root volume of the server, allows you to create server with an existing volume. If empty, will be computed to a created volume ID.
func (o InstanceServerRootVolumePtrOutput) VolumeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceServerRootVolume) *string {
		if v == nil {
			return nil
		}
		return v.VolumeId
	}).(pulumi.StringPtrOutput)
}

// Volume type of root volume, can be `bSsd` or `lSsd`, default value depends on server type
func (o InstanceServerRootVolumePtrOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceServerRootVolume) *string {
		if v == nil {
			return nil
		}
		return v.VolumeType
	}).(pulumi.StringPtrOutput)
}

type InstanceSnapshotImport struct {
	// Bucket name containing [qcow2](https://en.wikipedia.org/wiki/Qcow) to import
	Bucket string `pulumi:"bucket"`
	// Key of the object to import
	//
	// > **Note:** The type `unified` could be instantiated on both `lSsd` and `bSsd` volumes.
	Key string `pulumi:"key"`
}

// InstanceSnapshotImportInput is an input type that accepts InstanceSnapshotImportArgs and InstanceSnapshotImportOutput values.
// You can construct a concrete instance of `InstanceSnapshotImportInput` via:
//
//	InstanceSnapshotImportArgs{...}
type InstanceSnapshotImportInput interface {
	pulumi.Input

	ToInstanceSnapshotImportOutput() InstanceSnapshotImportOutput
	ToInstanceSnapshotImportOutputWithContext(context.Context) InstanceSnapshotImportOutput
}

type InstanceSnapshotImportArgs struct {
	// Bucket name containing [qcow2](https://en.wikipedia.org/wiki/Qcow) to import
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// Key of the object to import
	//
	// > **Note:** The type `unified` could be instantiated on both `lSsd` and `bSsd` volumes.
	Key pulumi.StringInput `pulumi:"key"`
}

func (InstanceSnapshotImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSnapshotImport)(nil)).Elem()
}

func (i InstanceSnapshotImportArgs) ToInstanceSnapshotImportOutput() InstanceSnapshotImportOutput {
	return i.ToInstanceSnapshotImportOutputWithContext(context.Background())
}

func (i InstanceSnapshotImportArgs) ToInstanceSnapshotImportOutputWithContext(ctx context.Context) InstanceSnapshotImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSnapshotImportOutput)
}

func (i InstanceSnapshotImportArgs) ToOutput(ctx context.Context) pulumix.Output[InstanceSnapshotImport] {
	return pulumix.Output[InstanceSnapshotImport]{
		OutputState: i.ToInstanceSnapshotImportOutputWithContext(ctx).OutputState,
	}
}

func (i InstanceSnapshotImportArgs) ToInstanceSnapshotImportPtrOutput() InstanceSnapshotImportPtrOutput {
	return i.ToInstanceSnapshotImportPtrOutputWithContext(context.Background())
}

func (i InstanceSnapshotImportArgs) ToInstanceSnapshotImportPtrOutputWithContext(ctx context.Context) InstanceSnapshotImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSnapshotImportOutput).ToInstanceSnapshotImportPtrOutputWithContext(ctx)
}

// InstanceSnapshotImportPtrInput is an input type that accepts InstanceSnapshotImportArgs, InstanceSnapshotImportPtr and InstanceSnapshotImportPtrOutput values.
// You can construct a concrete instance of `InstanceSnapshotImportPtrInput` via:
//
//	        InstanceSnapshotImportArgs{...}
//
//	or:
//
//	        nil
type InstanceSnapshotImportPtrInput interface {
	pulumi.Input

	ToInstanceSnapshotImportPtrOutput() InstanceSnapshotImportPtrOutput
	ToInstanceSnapshotImportPtrOutputWithContext(context.Context) InstanceSnapshotImportPtrOutput
}

type instanceSnapshotImportPtrType InstanceSnapshotImportArgs

func InstanceSnapshotImportPtr(v *InstanceSnapshotImportArgs) InstanceSnapshotImportPtrInput {
	return (*instanceSnapshotImportPtrType)(v)
}

func (*instanceSnapshotImportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceSnapshotImport)(nil)).Elem()
}

func (i *instanceSnapshotImportPtrType) ToInstanceSnapshotImportPtrOutput() InstanceSnapshotImportPtrOutput {
	return i.ToInstanceSnapshotImportPtrOutputWithContext(context.Background())
}

func (i *instanceSnapshotImportPtrType) ToInstanceSnapshotImportPtrOutputWithContext(ctx context.Context) InstanceSnapshotImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSnapshotImportPtrOutput)
}

func (i *instanceSnapshotImportPtrType) ToOutput(ctx context.Context) pulumix.Output[*InstanceSnapshotImport] {
	return pulumix.Output[*InstanceSnapshotImport]{
		OutputState: i.ToInstanceSnapshotImportPtrOutputWithContext(ctx).OutputState,
	}
}

type InstanceSnapshotImportOutput struct{ *pulumi.OutputState }

func (InstanceSnapshotImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSnapshotImport)(nil)).Elem()
}

func (o InstanceSnapshotImportOutput) ToInstanceSnapshotImportOutput() InstanceSnapshotImportOutput {
	return o
}

func (o InstanceSnapshotImportOutput) ToInstanceSnapshotImportOutputWithContext(ctx context.Context) InstanceSnapshotImportOutput {
	return o
}

func (o InstanceSnapshotImportOutput) ToInstanceSnapshotImportPtrOutput() InstanceSnapshotImportPtrOutput {
	return o.ToInstanceSnapshotImportPtrOutputWithContext(context.Background())
}

func (o InstanceSnapshotImportOutput) ToInstanceSnapshotImportPtrOutputWithContext(ctx context.Context) InstanceSnapshotImportPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceSnapshotImport) *InstanceSnapshotImport {
		return &v
	}).(InstanceSnapshotImportPtrOutput)
}

func (o InstanceSnapshotImportOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceSnapshotImport] {
	return pulumix.Output[InstanceSnapshotImport]{
		OutputState: o.OutputState,
	}
}

// Bucket name containing [qcow2](https://en.wikipedia.org/wiki/Qcow) to import
func (o InstanceSnapshotImportOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSnapshotImport) string { return v.Bucket }).(pulumi.StringOutput)
}

// Key of the object to import
//
// > **Note:** The type `unified` could be instantiated on both `lSsd` and `bSsd` volumes.
func (o InstanceSnapshotImportOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSnapshotImport) string { return v.Key }).(pulumi.StringOutput)
}

type InstanceSnapshotImportPtrOutput struct{ *pulumi.OutputState }

func (InstanceSnapshotImportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceSnapshotImport)(nil)).Elem()
}

func (o InstanceSnapshotImportPtrOutput) ToInstanceSnapshotImportPtrOutput() InstanceSnapshotImportPtrOutput {
	return o
}

func (o InstanceSnapshotImportPtrOutput) ToInstanceSnapshotImportPtrOutputWithContext(ctx context.Context) InstanceSnapshotImportPtrOutput {
	return o
}

func (o InstanceSnapshotImportPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*InstanceSnapshotImport] {
	return pulumix.Output[*InstanceSnapshotImport]{
		OutputState: o.OutputState,
	}
}

func (o InstanceSnapshotImportPtrOutput) Elem() InstanceSnapshotImportOutput {
	return o.ApplyT(func(v *InstanceSnapshotImport) InstanceSnapshotImport {
		if v != nil {
			return *v
		}
		var ret InstanceSnapshotImport
		return ret
	}).(InstanceSnapshotImportOutput)
}

// Bucket name containing [qcow2](https://en.wikipedia.org/wiki/Qcow) to import
func (o InstanceSnapshotImportPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceSnapshotImport) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Key of the object to import
//
// > **Note:** The type `unified` could be instantiated on both `lSsd` and `bSsd` volumes.
func (o InstanceSnapshotImportPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceSnapshotImport) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

type IotDeviceCertificate struct {
	Crt *string `pulumi:"crt"`
	// The private key of the device, in case it is generated by Scaleway.
	Key *string `pulumi:"key"`
}

// IotDeviceCertificateInput is an input type that accepts IotDeviceCertificateArgs and IotDeviceCertificateOutput values.
// You can construct a concrete instance of `IotDeviceCertificateInput` via:
//
//	IotDeviceCertificateArgs{...}
type IotDeviceCertificateInput interface {
	pulumi.Input

	ToIotDeviceCertificateOutput() IotDeviceCertificateOutput
	ToIotDeviceCertificateOutputWithContext(context.Context) IotDeviceCertificateOutput
}

type IotDeviceCertificateArgs struct {
	Crt pulumi.StringPtrInput `pulumi:"crt"`
	// The private key of the device, in case it is generated by Scaleway.
	Key pulumi.StringPtrInput `pulumi:"key"`
}

func (IotDeviceCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IotDeviceCertificate)(nil)).Elem()
}

func (i IotDeviceCertificateArgs) ToIotDeviceCertificateOutput() IotDeviceCertificateOutput {
	return i.ToIotDeviceCertificateOutputWithContext(context.Background())
}

func (i IotDeviceCertificateArgs) ToIotDeviceCertificateOutputWithContext(ctx context.Context) IotDeviceCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotDeviceCertificateOutput)
}

func (i IotDeviceCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[IotDeviceCertificate] {
	return pulumix.Output[IotDeviceCertificate]{
		OutputState: i.ToIotDeviceCertificateOutputWithContext(ctx).OutputState,
	}
}

func (i IotDeviceCertificateArgs) ToIotDeviceCertificatePtrOutput() IotDeviceCertificatePtrOutput {
	return i.ToIotDeviceCertificatePtrOutputWithContext(context.Background())
}

func (i IotDeviceCertificateArgs) ToIotDeviceCertificatePtrOutputWithContext(ctx context.Context) IotDeviceCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotDeviceCertificateOutput).ToIotDeviceCertificatePtrOutputWithContext(ctx)
}

// IotDeviceCertificatePtrInput is an input type that accepts IotDeviceCertificateArgs, IotDeviceCertificatePtr and IotDeviceCertificatePtrOutput values.
// You can construct a concrete instance of `IotDeviceCertificatePtrInput` via:
//
//	        IotDeviceCertificateArgs{...}
//
//	or:
//
//	        nil
type IotDeviceCertificatePtrInput interface {
	pulumi.Input

	ToIotDeviceCertificatePtrOutput() IotDeviceCertificatePtrOutput
	ToIotDeviceCertificatePtrOutputWithContext(context.Context) IotDeviceCertificatePtrOutput
}

type iotDeviceCertificatePtrType IotDeviceCertificateArgs

func IotDeviceCertificatePtr(v *IotDeviceCertificateArgs) IotDeviceCertificatePtrInput {
	return (*iotDeviceCertificatePtrType)(v)
}

func (*iotDeviceCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IotDeviceCertificate)(nil)).Elem()
}

func (i *iotDeviceCertificatePtrType) ToIotDeviceCertificatePtrOutput() IotDeviceCertificatePtrOutput {
	return i.ToIotDeviceCertificatePtrOutputWithContext(context.Background())
}

func (i *iotDeviceCertificatePtrType) ToIotDeviceCertificatePtrOutputWithContext(ctx context.Context) IotDeviceCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotDeviceCertificatePtrOutput)
}

func (i *iotDeviceCertificatePtrType) ToOutput(ctx context.Context) pulumix.Output[*IotDeviceCertificate] {
	return pulumix.Output[*IotDeviceCertificate]{
		OutputState: i.ToIotDeviceCertificatePtrOutputWithContext(ctx).OutputState,
	}
}

type IotDeviceCertificateOutput struct{ *pulumi.OutputState }

func (IotDeviceCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IotDeviceCertificate)(nil)).Elem()
}

func (o IotDeviceCertificateOutput) ToIotDeviceCertificateOutput() IotDeviceCertificateOutput {
	return o
}

func (o IotDeviceCertificateOutput) ToIotDeviceCertificateOutputWithContext(ctx context.Context) IotDeviceCertificateOutput {
	return o
}

func (o IotDeviceCertificateOutput) ToIotDeviceCertificatePtrOutput() IotDeviceCertificatePtrOutput {
	return o.ToIotDeviceCertificatePtrOutputWithContext(context.Background())
}

func (o IotDeviceCertificateOutput) ToIotDeviceCertificatePtrOutputWithContext(ctx context.Context) IotDeviceCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IotDeviceCertificate) *IotDeviceCertificate {
		return &v
	}).(IotDeviceCertificatePtrOutput)
}

func (o IotDeviceCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[IotDeviceCertificate] {
	return pulumix.Output[IotDeviceCertificate]{
		OutputState: o.OutputState,
	}
}

func (o IotDeviceCertificateOutput) Crt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IotDeviceCertificate) *string { return v.Crt }).(pulumi.StringPtrOutput)
}

// The private key of the device, in case it is generated by Scaleway.
func (o IotDeviceCertificateOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IotDeviceCertificate) *string { return v.Key }).(pulumi.StringPtrOutput)
}

type IotDeviceCertificatePtrOutput struct{ *pulumi.OutputState }

func (IotDeviceCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IotDeviceCertificate)(nil)).Elem()
}

func (o IotDeviceCertificatePtrOutput) ToIotDeviceCertificatePtrOutput() IotDeviceCertificatePtrOutput {
	return o
}

func (o IotDeviceCertificatePtrOutput) ToIotDeviceCertificatePtrOutputWithContext(ctx context.Context) IotDeviceCertificatePtrOutput {
	return o
}

func (o IotDeviceCertificatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IotDeviceCertificate] {
	return pulumix.Output[*IotDeviceCertificate]{
		OutputState: o.OutputState,
	}
}

func (o IotDeviceCertificatePtrOutput) Elem() IotDeviceCertificateOutput {
	return o.ApplyT(func(v *IotDeviceCertificate) IotDeviceCertificate {
		if v != nil {
			return *v
		}
		var ret IotDeviceCertificate
		return ret
	}).(IotDeviceCertificateOutput)
}

func (o IotDeviceCertificatePtrOutput) Crt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotDeviceCertificate) *string {
		if v == nil {
			return nil
		}
		return v.Crt
	}).(pulumi.StringPtrOutput)
}

// The private key of the device, in case it is generated by Scaleway.
func (o IotDeviceCertificatePtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotDeviceCertificate) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

type IotDeviceMessageFilters struct {
	// Rules used to restrict topics the device can publish to.
	Publish *IotDeviceMessageFiltersPublish `pulumi:"publish"`
	// Rules used to restrict topics the device can subscribe to.
	Subscribe *IotDeviceMessageFiltersSubscribe `pulumi:"subscribe"`
}

// IotDeviceMessageFiltersInput is an input type that accepts IotDeviceMessageFiltersArgs and IotDeviceMessageFiltersOutput values.
// You can construct a concrete instance of `IotDeviceMessageFiltersInput` via:
//
//	IotDeviceMessageFiltersArgs{...}
type IotDeviceMessageFiltersInput interface {
	pulumi.Input

	ToIotDeviceMessageFiltersOutput() IotDeviceMessageFiltersOutput
	ToIotDeviceMessageFiltersOutputWithContext(context.Context) IotDeviceMessageFiltersOutput
}

type IotDeviceMessageFiltersArgs struct {
	// Rules used to restrict topics the device can publish to.
	Publish IotDeviceMessageFiltersPublishPtrInput `pulumi:"publish"`
	// Rules used to restrict topics the device can subscribe to.
	Subscribe IotDeviceMessageFiltersSubscribePtrInput `pulumi:"subscribe"`
}

func (IotDeviceMessageFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IotDeviceMessageFilters)(nil)).Elem()
}

func (i IotDeviceMessageFiltersArgs) ToIotDeviceMessageFiltersOutput() IotDeviceMessageFiltersOutput {
	return i.ToIotDeviceMessageFiltersOutputWithContext(context.Background())
}

func (i IotDeviceMessageFiltersArgs) ToIotDeviceMessageFiltersOutputWithContext(ctx context.Context) IotDeviceMessageFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotDeviceMessageFiltersOutput)
}

func (i IotDeviceMessageFiltersArgs) ToOutput(ctx context.Context) pulumix.Output[IotDeviceMessageFilters] {
	return pulumix.Output[IotDeviceMessageFilters]{
		OutputState: i.ToIotDeviceMessageFiltersOutputWithContext(ctx).OutputState,
	}
}

func (i IotDeviceMessageFiltersArgs) ToIotDeviceMessageFiltersPtrOutput() IotDeviceMessageFiltersPtrOutput {
	return i.ToIotDeviceMessageFiltersPtrOutputWithContext(context.Background())
}

func (i IotDeviceMessageFiltersArgs) ToIotDeviceMessageFiltersPtrOutputWithContext(ctx context.Context) IotDeviceMessageFiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotDeviceMessageFiltersOutput).ToIotDeviceMessageFiltersPtrOutputWithContext(ctx)
}

// IotDeviceMessageFiltersPtrInput is an input type that accepts IotDeviceMessageFiltersArgs, IotDeviceMessageFiltersPtr and IotDeviceMessageFiltersPtrOutput values.
// You can construct a concrete instance of `IotDeviceMessageFiltersPtrInput` via:
//
//	        IotDeviceMessageFiltersArgs{...}
//
//	or:
//
//	        nil
type IotDeviceMessageFiltersPtrInput interface {
	pulumi.Input

	ToIotDeviceMessageFiltersPtrOutput() IotDeviceMessageFiltersPtrOutput
	ToIotDeviceMessageFiltersPtrOutputWithContext(context.Context) IotDeviceMessageFiltersPtrOutput
}

type iotDeviceMessageFiltersPtrType IotDeviceMessageFiltersArgs

func IotDeviceMessageFiltersPtr(v *IotDeviceMessageFiltersArgs) IotDeviceMessageFiltersPtrInput {
	return (*iotDeviceMessageFiltersPtrType)(v)
}

func (*iotDeviceMessageFiltersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IotDeviceMessageFilters)(nil)).Elem()
}

func (i *iotDeviceMessageFiltersPtrType) ToIotDeviceMessageFiltersPtrOutput() IotDeviceMessageFiltersPtrOutput {
	return i.ToIotDeviceMessageFiltersPtrOutputWithContext(context.Background())
}

func (i *iotDeviceMessageFiltersPtrType) ToIotDeviceMessageFiltersPtrOutputWithContext(ctx context.Context) IotDeviceMessageFiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotDeviceMessageFiltersPtrOutput)
}

func (i *iotDeviceMessageFiltersPtrType) ToOutput(ctx context.Context) pulumix.Output[*IotDeviceMessageFilters] {
	return pulumix.Output[*IotDeviceMessageFilters]{
		OutputState: i.ToIotDeviceMessageFiltersPtrOutputWithContext(ctx).OutputState,
	}
}

type IotDeviceMessageFiltersOutput struct{ *pulumi.OutputState }

func (IotDeviceMessageFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IotDeviceMessageFilters)(nil)).Elem()
}

func (o IotDeviceMessageFiltersOutput) ToIotDeviceMessageFiltersOutput() IotDeviceMessageFiltersOutput {
	return o
}

func (o IotDeviceMessageFiltersOutput) ToIotDeviceMessageFiltersOutputWithContext(ctx context.Context) IotDeviceMessageFiltersOutput {
	return o
}

func (o IotDeviceMessageFiltersOutput) ToIotDeviceMessageFiltersPtrOutput() IotDeviceMessageFiltersPtrOutput {
	return o.ToIotDeviceMessageFiltersPtrOutputWithContext(context.Background())
}

func (o IotDeviceMessageFiltersOutput) ToIotDeviceMessageFiltersPtrOutputWithContext(ctx context.Context) IotDeviceMessageFiltersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IotDeviceMessageFilters) *IotDeviceMessageFilters {
		return &v
	}).(IotDeviceMessageFiltersPtrOutput)
}

func (o IotDeviceMessageFiltersOutput) ToOutput(ctx context.Context) pulumix.Output[IotDeviceMessageFilters] {
	return pulumix.Output[IotDeviceMessageFilters]{
		OutputState: o.OutputState,
	}
}

// Rules used to restrict topics the device can publish to.
func (o IotDeviceMessageFiltersOutput) Publish() IotDeviceMessageFiltersPublishPtrOutput {
	return o.ApplyT(func(v IotDeviceMessageFilters) *IotDeviceMessageFiltersPublish { return v.Publish }).(IotDeviceMessageFiltersPublishPtrOutput)
}

// Rules used to restrict topics the device can subscribe to.
func (o IotDeviceMessageFiltersOutput) Subscribe() IotDeviceMessageFiltersSubscribePtrOutput {
	return o.ApplyT(func(v IotDeviceMessageFilters) *IotDeviceMessageFiltersSubscribe { return v.Subscribe }).(IotDeviceMessageFiltersSubscribePtrOutput)
}

type IotDeviceMessageFiltersPtrOutput struct{ *pulumi.OutputState }

func (IotDeviceMessageFiltersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IotDeviceMessageFilters)(nil)).Elem()
}

func (o IotDeviceMessageFiltersPtrOutput) ToIotDeviceMessageFiltersPtrOutput() IotDeviceMessageFiltersPtrOutput {
	return o
}

func (o IotDeviceMessageFiltersPtrOutput) ToIotDeviceMessageFiltersPtrOutputWithContext(ctx context.Context) IotDeviceMessageFiltersPtrOutput {
	return o
}

func (o IotDeviceMessageFiltersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IotDeviceMessageFilters] {
	return pulumix.Output[*IotDeviceMessageFilters]{
		OutputState: o.OutputState,
	}
}

func (o IotDeviceMessageFiltersPtrOutput) Elem() IotDeviceMessageFiltersOutput {
	return o.ApplyT(func(v *IotDeviceMessageFilters) IotDeviceMessageFilters {
		if v != nil {
			return *v
		}
		var ret IotDeviceMessageFilters
		return ret
	}).(IotDeviceMessageFiltersOutput)
}

// Rules used to restrict topics the device can publish to.
func (o IotDeviceMessageFiltersPtrOutput) Publish() IotDeviceMessageFiltersPublishPtrOutput {
	return o.ApplyT(func(v *IotDeviceMessageFilters) *IotDeviceMessageFiltersPublish {
		if v == nil {
			return nil
		}
		return v.Publish
	}).(IotDeviceMessageFiltersPublishPtrOutput)
}

// Rules used to restrict topics the device can subscribe to.
func (o IotDeviceMessageFiltersPtrOutput) Subscribe() IotDeviceMessageFiltersSubscribePtrOutput {
	return o.ApplyT(func(v *IotDeviceMessageFilters) *IotDeviceMessageFiltersSubscribe {
		if v == nil {
			return nil
		}
		return v.Subscribe
	}).(IotDeviceMessageFiltersSubscribePtrOutput)
}

type IotDeviceMessageFiltersPublish struct {
	// Same as publish rules.
	Policy *string `pulumi:"policy"`
	// Same as publish rules.
	//
	// - `certificate.crt` - (Optional) The certificate of the device, either generated by Scaleway or provided.
	//
	// > **Important:** Updates to `certificate.crt` will disconnect connected devices and the previous certificate will be deleted and won't be recoverable.
	Topics []string `pulumi:"topics"`
}

// IotDeviceMessageFiltersPublishInput is an input type that accepts IotDeviceMessageFiltersPublishArgs and IotDeviceMessageFiltersPublishOutput values.
// You can construct a concrete instance of `IotDeviceMessageFiltersPublishInput` via:
//
//	IotDeviceMessageFiltersPublishArgs{...}
type IotDeviceMessageFiltersPublishInput interface {
	pulumi.Input

	ToIotDeviceMessageFiltersPublishOutput() IotDeviceMessageFiltersPublishOutput
	ToIotDeviceMessageFiltersPublishOutputWithContext(context.Context) IotDeviceMessageFiltersPublishOutput
}

type IotDeviceMessageFiltersPublishArgs struct {
	// Same as publish rules.
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// Same as publish rules.
	//
	// - `certificate.crt` - (Optional) The certificate of the device, either generated by Scaleway or provided.
	//
	// > **Important:** Updates to `certificate.crt` will disconnect connected devices and the previous certificate will be deleted and won't be recoverable.
	Topics pulumi.StringArrayInput `pulumi:"topics"`
}

func (IotDeviceMessageFiltersPublishArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IotDeviceMessageFiltersPublish)(nil)).Elem()
}

func (i IotDeviceMessageFiltersPublishArgs) ToIotDeviceMessageFiltersPublishOutput() IotDeviceMessageFiltersPublishOutput {
	return i.ToIotDeviceMessageFiltersPublishOutputWithContext(context.Background())
}

func (i IotDeviceMessageFiltersPublishArgs) ToIotDeviceMessageFiltersPublishOutputWithContext(ctx context.Context) IotDeviceMessageFiltersPublishOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotDeviceMessageFiltersPublishOutput)
}

func (i IotDeviceMessageFiltersPublishArgs) ToOutput(ctx context.Context) pulumix.Output[IotDeviceMessageFiltersPublish] {
	return pulumix.Output[IotDeviceMessageFiltersPublish]{
		OutputState: i.ToIotDeviceMessageFiltersPublishOutputWithContext(ctx).OutputState,
	}
}

func (i IotDeviceMessageFiltersPublishArgs) ToIotDeviceMessageFiltersPublishPtrOutput() IotDeviceMessageFiltersPublishPtrOutput {
	return i.ToIotDeviceMessageFiltersPublishPtrOutputWithContext(context.Background())
}

func (i IotDeviceMessageFiltersPublishArgs) ToIotDeviceMessageFiltersPublishPtrOutputWithContext(ctx context.Context) IotDeviceMessageFiltersPublishPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotDeviceMessageFiltersPublishOutput).ToIotDeviceMessageFiltersPublishPtrOutputWithContext(ctx)
}

// IotDeviceMessageFiltersPublishPtrInput is an input type that accepts IotDeviceMessageFiltersPublishArgs, IotDeviceMessageFiltersPublishPtr and IotDeviceMessageFiltersPublishPtrOutput values.
// You can construct a concrete instance of `IotDeviceMessageFiltersPublishPtrInput` via:
//
//	        IotDeviceMessageFiltersPublishArgs{...}
//
//	or:
//
//	        nil
type IotDeviceMessageFiltersPublishPtrInput interface {
	pulumi.Input

	ToIotDeviceMessageFiltersPublishPtrOutput() IotDeviceMessageFiltersPublishPtrOutput
	ToIotDeviceMessageFiltersPublishPtrOutputWithContext(context.Context) IotDeviceMessageFiltersPublishPtrOutput
}

type iotDeviceMessageFiltersPublishPtrType IotDeviceMessageFiltersPublishArgs

func IotDeviceMessageFiltersPublishPtr(v *IotDeviceMessageFiltersPublishArgs) IotDeviceMessageFiltersPublishPtrInput {
	return (*iotDeviceMessageFiltersPublishPtrType)(v)
}

func (*iotDeviceMessageFiltersPublishPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IotDeviceMessageFiltersPublish)(nil)).Elem()
}

func (i *iotDeviceMessageFiltersPublishPtrType) ToIotDeviceMessageFiltersPublishPtrOutput() IotDeviceMessageFiltersPublishPtrOutput {
	return i.ToIotDeviceMessageFiltersPublishPtrOutputWithContext(context.Background())
}

func (i *iotDeviceMessageFiltersPublishPtrType) ToIotDeviceMessageFiltersPublishPtrOutputWithContext(ctx context.Context) IotDeviceMessageFiltersPublishPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotDeviceMessageFiltersPublishPtrOutput)
}

func (i *iotDeviceMessageFiltersPublishPtrType) ToOutput(ctx context.Context) pulumix.Output[*IotDeviceMessageFiltersPublish] {
	return pulumix.Output[*IotDeviceMessageFiltersPublish]{
		OutputState: i.ToIotDeviceMessageFiltersPublishPtrOutputWithContext(ctx).OutputState,
	}
}

type IotDeviceMessageFiltersPublishOutput struct{ *pulumi.OutputState }

func (IotDeviceMessageFiltersPublishOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IotDeviceMessageFiltersPublish)(nil)).Elem()
}

func (o IotDeviceMessageFiltersPublishOutput) ToIotDeviceMessageFiltersPublishOutput() IotDeviceMessageFiltersPublishOutput {
	return o
}

func (o IotDeviceMessageFiltersPublishOutput) ToIotDeviceMessageFiltersPublishOutputWithContext(ctx context.Context) IotDeviceMessageFiltersPublishOutput {
	return o
}

func (o IotDeviceMessageFiltersPublishOutput) ToIotDeviceMessageFiltersPublishPtrOutput() IotDeviceMessageFiltersPublishPtrOutput {
	return o.ToIotDeviceMessageFiltersPublishPtrOutputWithContext(context.Background())
}

func (o IotDeviceMessageFiltersPublishOutput) ToIotDeviceMessageFiltersPublishPtrOutputWithContext(ctx context.Context) IotDeviceMessageFiltersPublishPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IotDeviceMessageFiltersPublish) *IotDeviceMessageFiltersPublish {
		return &v
	}).(IotDeviceMessageFiltersPublishPtrOutput)
}

func (o IotDeviceMessageFiltersPublishOutput) ToOutput(ctx context.Context) pulumix.Output[IotDeviceMessageFiltersPublish] {
	return pulumix.Output[IotDeviceMessageFiltersPublish]{
		OutputState: o.OutputState,
	}
}

// Same as publish rules.
func (o IotDeviceMessageFiltersPublishOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IotDeviceMessageFiltersPublish) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// Same as publish rules.
//
// - `certificate.crt` - (Optional) The certificate of the device, either generated by Scaleway or provided.
//
// > **Important:** Updates to `certificate.crt` will disconnect connected devices and the previous certificate will be deleted and won't be recoverable.
func (o IotDeviceMessageFiltersPublishOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IotDeviceMessageFiltersPublish) []string { return v.Topics }).(pulumi.StringArrayOutput)
}

type IotDeviceMessageFiltersPublishPtrOutput struct{ *pulumi.OutputState }

func (IotDeviceMessageFiltersPublishPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IotDeviceMessageFiltersPublish)(nil)).Elem()
}

func (o IotDeviceMessageFiltersPublishPtrOutput) ToIotDeviceMessageFiltersPublishPtrOutput() IotDeviceMessageFiltersPublishPtrOutput {
	return o
}

func (o IotDeviceMessageFiltersPublishPtrOutput) ToIotDeviceMessageFiltersPublishPtrOutputWithContext(ctx context.Context) IotDeviceMessageFiltersPublishPtrOutput {
	return o
}

func (o IotDeviceMessageFiltersPublishPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IotDeviceMessageFiltersPublish] {
	return pulumix.Output[*IotDeviceMessageFiltersPublish]{
		OutputState: o.OutputState,
	}
}

func (o IotDeviceMessageFiltersPublishPtrOutput) Elem() IotDeviceMessageFiltersPublishOutput {
	return o.ApplyT(func(v *IotDeviceMessageFiltersPublish) IotDeviceMessageFiltersPublish {
		if v != nil {
			return *v
		}
		var ret IotDeviceMessageFiltersPublish
		return ret
	}).(IotDeviceMessageFiltersPublishOutput)
}

// Same as publish rules.
func (o IotDeviceMessageFiltersPublishPtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotDeviceMessageFiltersPublish) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

// Same as publish rules.
//
// - `certificate.crt` - (Optional) The certificate of the device, either generated by Scaleway or provided.
//
// > **Important:** Updates to `certificate.crt` will disconnect connected devices and the previous certificate will be deleted and won't be recoverable.
func (o IotDeviceMessageFiltersPublishPtrOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IotDeviceMessageFiltersPublish) []string {
		if v == nil {
			return nil
		}
		return v.Topics
	}).(pulumi.StringArrayOutput)
}

type IotDeviceMessageFiltersSubscribe struct {
	// Same as publish rules.
	Policy *string `pulumi:"policy"`
	// Same as publish rules.
	//
	// - `certificate.crt` - (Optional) The certificate of the device, either generated by Scaleway or provided.
	//
	// > **Important:** Updates to `certificate.crt` will disconnect connected devices and the previous certificate will be deleted and won't be recoverable.
	Topics []string `pulumi:"topics"`
}

// IotDeviceMessageFiltersSubscribeInput is an input type that accepts IotDeviceMessageFiltersSubscribeArgs and IotDeviceMessageFiltersSubscribeOutput values.
// You can construct a concrete instance of `IotDeviceMessageFiltersSubscribeInput` via:
//
//	IotDeviceMessageFiltersSubscribeArgs{...}
type IotDeviceMessageFiltersSubscribeInput interface {
	pulumi.Input

	ToIotDeviceMessageFiltersSubscribeOutput() IotDeviceMessageFiltersSubscribeOutput
	ToIotDeviceMessageFiltersSubscribeOutputWithContext(context.Context) IotDeviceMessageFiltersSubscribeOutput
}

type IotDeviceMessageFiltersSubscribeArgs struct {
	// Same as publish rules.
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// Same as publish rules.
	//
	// - `certificate.crt` - (Optional) The certificate of the device, either generated by Scaleway or provided.
	//
	// > **Important:** Updates to `certificate.crt` will disconnect connected devices and the previous certificate will be deleted and won't be recoverable.
	Topics pulumi.StringArrayInput `pulumi:"topics"`
}

func (IotDeviceMessageFiltersSubscribeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IotDeviceMessageFiltersSubscribe)(nil)).Elem()
}

func (i IotDeviceMessageFiltersSubscribeArgs) ToIotDeviceMessageFiltersSubscribeOutput() IotDeviceMessageFiltersSubscribeOutput {
	return i.ToIotDeviceMessageFiltersSubscribeOutputWithContext(context.Background())
}

func (i IotDeviceMessageFiltersSubscribeArgs) ToIotDeviceMessageFiltersSubscribeOutputWithContext(ctx context.Context) IotDeviceMessageFiltersSubscribeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotDeviceMessageFiltersSubscribeOutput)
}

func (i IotDeviceMessageFiltersSubscribeArgs) ToOutput(ctx context.Context) pulumix.Output[IotDeviceMessageFiltersSubscribe] {
	return pulumix.Output[IotDeviceMessageFiltersSubscribe]{
		OutputState: i.ToIotDeviceMessageFiltersSubscribeOutputWithContext(ctx).OutputState,
	}
}

func (i IotDeviceMessageFiltersSubscribeArgs) ToIotDeviceMessageFiltersSubscribePtrOutput() IotDeviceMessageFiltersSubscribePtrOutput {
	return i.ToIotDeviceMessageFiltersSubscribePtrOutputWithContext(context.Background())
}

func (i IotDeviceMessageFiltersSubscribeArgs) ToIotDeviceMessageFiltersSubscribePtrOutputWithContext(ctx context.Context) IotDeviceMessageFiltersSubscribePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotDeviceMessageFiltersSubscribeOutput).ToIotDeviceMessageFiltersSubscribePtrOutputWithContext(ctx)
}

// IotDeviceMessageFiltersSubscribePtrInput is an input type that accepts IotDeviceMessageFiltersSubscribeArgs, IotDeviceMessageFiltersSubscribePtr and IotDeviceMessageFiltersSubscribePtrOutput values.
// You can construct a concrete instance of `IotDeviceMessageFiltersSubscribePtrInput` via:
//
//	        IotDeviceMessageFiltersSubscribeArgs{...}
//
//	or:
//
//	        nil
type IotDeviceMessageFiltersSubscribePtrInput interface {
	pulumi.Input

	ToIotDeviceMessageFiltersSubscribePtrOutput() IotDeviceMessageFiltersSubscribePtrOutput
	ToIotDeviceMessageFiltersSubscribePtrOutputWithContext(context.Context) IotDeviceMessageFiltersSubscribePtrOutput
}

type iotDeviceMessageFiltersSubscribePtrType IotDeviceMessageFiltersSubscribeArgs

func IotDeviceMessageFiltersSubscribePtr(v *IotDeviceMessageFiltersSubscribeArgs) IotDeviceMessageFiltersSubscribePtrInput {
	return (*iotDeviceMessageFiltersSubscribePtrType)(v)
}

func (*iotDeviceMessageFiltersSubscribePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IotDeviceMessageFiltersSubscribe)(nil)).Elem()
}

func (i *iotDeviceMessageFiltersSubscribePtrType) ToIotDeviceMessageFiltersSubscribePtrOutput() IotDeviceMessageFiltersSubscribePtrOutput {
	return i.ToIotDeviceMessageFiltersSubscribePtrOutputWithContext(context.Background())
}

func (i *iotDeviceMessageFiltersSubscribePtrType) ToIotDeviceMessageFiltersSubscribePtrOutputWithContext(ctx context.Context) IotDeviceMessageFiltersSubscribePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotDeviceMessageFiltersSubscribePtrOutput)
}

func (i *iotDeviceMessageFiltersSubscribePtrType) ToOutput(ctx context.Context) pulumix.Output[*IotDeviceMessageFiltersSubscribe] {
	return pulumix.Output[*IotDeviceMessageFiltersSubscribe]{
		OutputState: i.ToIotDeviceMessageFiltersSubscribePtrOutputWithContext(ctx).OutputState,
	}
}

type IotDeviceMessageFiltersSubscribeOutput struct{ *pulumi.OutputState }

func (IotDeviceMessageFiltersSubscribeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IotDeviceMessageFiltersSubscribe)(nil)).Elem()
}

func (o IotDeviceMessageFiltersSubscribeOutput) ToIotDeviceMessageFiltersSubscribeOutput() IotDeviceMessageFiltersSubscribeOutput {
	return o
}

func (o IotDeviceMessageFiltersSubscribeOutput) ToIotDeviceMessageFiltersSubscribeOutputWithContext(ctx context.Context) IotDeviceMessageFiltersSubscribeOutput {
	return o
}

func (o IotDeviceMessageFiltersSubscribeOutput) ToIotDeviceMessageFiltersSubscribePtrOutput() IotDeviceMessageFiltersSubscribePtrOutput {
	return o.ToIotDeviceMessageFiltersSubscribePtrOutputWithContext(context.Background())
}

func (o IotDeviceMessageFiltersSubscribeOutput) ToIotDeviceMessageFiltersSubscribePtrOutputWithContext(ctx context.Context) IotDeviceMessageFiltersSubscribePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IotDeviceMessageFiltersSubscribe) *IotDeviceMessageFiltersSubscribe {
		return &v
	}).(IotDeviceMessageFiltersSubscribePtrOutput)
}

func (o IotDeviceMessageFiltersSubscribeOutput) ToOutput(ctx context.Context) pulumix.Output[IotDeviceMessageFiltersSubscribe] {
	return pulumix.Output[IotDeviceMessageFiltersSubscribe]{
		OutputState: o.OutputState,
	}
}

// Same as publish rules.
func (o IotDeviceMessageFiltersSubscribeOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IotDeviceMessageFiltersSubscribe) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// Same as publish rules.
//
// - `certificate.crt` - (Optional) The certificate of the device, either generated by Scaleway or provided.
//
// > **Important:** Updates to `certificate.crt` will disconnect connected devices and the previous certificate will be deleted and won't be recoverable.
func (o IotDeviceMessageFiltersSubscribeOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IotDeviceMessageFiltersSubscribe) []string { return v.Topics }).(pulumi.StringArrayOutput)
}

type IotDeviceMessageFiltersSubscribePtrOutput struct{ *pulumi.OutputState }

func (IotDeviceMessageFiltersSubscribePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IotDeviceMessageFiltersSubscribe)(nil)).Elem()
}

func (o IotDeviceMessageFiltersSubscribePtrOutput) ToIotDeviceMessageFiltersSubscribePtrOutput() IotDeviceMessageFiltersSubscribePtrOutput {
	return o
}

func (o IotDeviceMessageFiltersSubscribePtrOutput) ToIotDeviceMessageFiltersSubscribePtrOutputWithContext(ctx context.Context) IotDeviceMessageFiltersSubscribePtrOutput {
	return o
}

func (o IotDeviceMessageFiltersSubscribePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IotDeviceMessageFiltersSubscribe] {
	return pulumix.Output[*IotDeviceMessageFiltersSubscribe]{
		OutputState: o.OutputState,
	}
}

func (o IotDeviceMessageFiltersSubscribePtrOutput) Elem() IotDeviceMessageFiltersSubscribeOutput {
	return o.ApplyT(func(v *IotDeviceMessageFiltersSubscribe) IotDeviceMessageFiltersSubscribe {
		if v != nil {
			return *v
		}
		var ret IotDeviceMessageFiltersSubscribe
		return ret
	}).(IotDeviceMessageFiltersSubscribeOutput)
}

// Same as publish rules.
func (o IotDeviceMessageFiltersSubscribePtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotDeviceMessageFiltersSubscribe) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

// Same as publish rules.
//
// - `certificate.crt` - (Optional) The certificate of the device, either generated by Scaleway or provided.
//
// > **Important:** Updates to `certificate.crt` will disconnect connected devices and the previous certificate will be deleted and won't be recoverable.
func (o IotDeviceMessageFiltersSubscribePtrOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IotDeviceMessageFiltersSubscribe) []string {
		if v == nil {
			return nil
		}
		return v.Topics
	}).(pulumi.StringArrayOutput)
}

type IotRouteDatabase struct {
	Dbname   string `pulumi:"dbname"`
	Host     string `pulumi:"host"`
	Password string `pulumi:"password"`
	Port     int    `pulumi:"port"`
	Query    string `pulumi:"query"`
	Username string `pulumi:"username"`
}

// IotRouteDatabaseInput is an input type that accepts IotRouteDatabaseArgs and IotRouteDatabaseOutput values.
// You can construct a concrete instance of `IotRouteDatabaseInput` via:
//
//	IotRouteDatabaseArgs{...}
type IotRouteDatabaseInput interface {
	pulumi.Input

	ToIotRouteDatabaseOutput() IotRouteDatabaseOutput
	ToIotRouteDatabaseOutputWithContext(context.Context) IotRouteDatabaseOutput
}

type IotRouteDatabaseArgs struct {
	Dbname   pulumi.StringInput `pulumi:"dbname"`
	Host     pulumi.StringInput `pulumi:"host"`
	Password pulumi.StringInput `pulumi:"password"`
	Port     pulumi.IntInput    `pulumi:"port"`
	Query    pulumi.StringInput `pulumi:"query"`
	Username pulumi.StringInput `pulumi:"username"`
}

func (IotRouteDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IotRouteDatabase)(nil)).Elem()
}

func (i IotRouteDatabaseArgs) ToIotRouteDatabaseOutput() IotRouteDatabaseOutput {
	return i.ToIotRouteDatabaseOutputWithContext(context.Background())
}

func (i IotRouteDatabaseArgs) ToIotRouteDatabaseOutputWithContext(ctx context.Context) IotRouteDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotRouteDatabaseOutput)
}

func (i IotRouteDatabaseArgs) ToOutput(ctx context.Context) pulumix.Output[IotRouteDatabase] {
	return pulumix.Output[IotRouteDatabase]{
		OutputState: i.ToIotRouteDatabaseOutputWithContext(ctx).OutputState,
	}
}

func (i IotRouteDatabaseArgs) ToIotRouteDatabasePtrOutput() IotRouteDatabasePtrOutput {
	return i.ToIotRouteDatabasePtrOutputWithContext(context.Background())
}

func (i IotRouteDatabaseArgs) ToIotRouteDatabasePtrOutputWithContext(ctx context.Context) IotRouteDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotRouteDatabaseOutput).ToIotRouteDatabasePtrOutputWithContext(ctx)
}

// IotRouteDatabasePtrInput is an input type that accepts IotRouteDatabaseArgs, IotRouteDatabasePtr and IotRouteDatabasePtrOutput values.
// You can construct a concrete instance of `IotRouteDatabasePtrInput` via:
//
//	        IotRouteDatabaseArgs{...}
//
//	or:
//
//	        nil
type IotRouteDatabasePtrInput interface {
	pulumi.Input

	ToIotRouteDatabasePtrOutput() IotRouteDatabasePtrOutput
	ToIotRouteDatabasePtrOutputWithContext(context.Context) IotRouteDatabasePtrOutput
}

type iotRouteDatabasePtrType IotRouteDatabaseArgs

func IotRouteDatabasePtr(v *IotRouteDatabaseArgs) IotRouteDatabasePtrInput {
	return (*iotRouteDatabasePtrType)(v)
}

func (*iotRouteDatabasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IotRouteDatabase)(nil)).Elem()
}

func (i *iotRouteDatabasePtrType) ToIotRouteDatabasePtrOutput() IotRouteDatabasePtrOutput {
	return i.ToIotRouteDatabasePtrOutputWithContext(context.Background())
}

func (i *iotRouteDatabasePtrType) ToIotRouteDatabasePtrOutputWithContext(ctx context.Context) IotRouteDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotRouteDatabasePtrOutput)
}

func (i *iotRouteDatabasePtrType) ToOutput(ctx context.Context) pulumix.Output[*IotRouteDatabase] {
	return pulumix.Output[*IotRouteDatabase]{
		OutputState: i.ToIotRouteDatabasePtrOutputWithContext(ctx).OutputState,
	}
}

type IotRouteDatabaseOutput struct{ *pulumi.OutputState }

func (IotRouteDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IotRouteDatabase)(nil)).Elem()
}

func (o IotRouteDatabaseOutput) ToIotRouteDatabaseOutput() IotRouteDatabaseOutput {
	return o
}

func (o IotRouteDatabaseOutput) ToIotRouteDatabaseOutputWithContext(ctx context.Context) IotRouteDatabaseOutput {
	return o
}

func (o IotRouteDatabaseOutput) ToIotRouteDatabasePtrOutput() IotRouteDatabasePtrOutput {
	return o.ToIotRouteDatabasePtrOutputWithContext(context.Background())
}

func (o IotRouteDatabaseOutput) ToIotRouteDatabasePtrOutputWithContext(ctx context.Context) IotRouteDatabasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IotRouteDatabase) *IotRouteDatabase {
		return &v
	}).(IotRouteDatabasePtrOutput)
}

func (o IotRouteDatabaseOutput) ToOutput(ctx context.Context) pulumix.Output[IotRouteDatabase] {
	return pulumix.Output[IotRouteDatabase]{
		OutputState: o.OutputState,
	}
}

func (o IotRouteDatabaseOutput) Dbname() pulumi.StringOutput {
	return o.ApplyT(func(v IotRouteDatabase) string { return v.Dbname }).(pulumi.StringOutput)
}

func (o IotRouteDatabaseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v IotRouteDatabase) string { return v.Host }).(pulumi.StringOutput)
}

func (o IotRouteDatabaseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v IotRouteDatabase) string { return v.Password }).(pulumi.StringOutput)
}

func (o IotRouteDatabaseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v IotRouteDatabase) int { return v.Port }).(pulumi.IntOutput)
}

func (o IotRouteDatabaseOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v IotRouteDatabase) string { return v.Query }).(pulumi.StringOutput)
}

func (o IotRouteDatabaseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v IotRouteDatabase) string { return v.Username }).(pulumi.StringOutput)
}

type IotRouteDatabasePtrOutput struct{ *pulumi.OutputState }

func (IotRouteDatabasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IotRouteDatabase)(nil)).Elem()
}

func (o IotRouteDatabasePtrOutput) ToIotRouteDatabasePtrOutput() IotRouteDatabasePtrOutput {
	return o
}

func (o IotRouteDatabasePtrOutput) ToIotRouteDatabasePtrOutputWithContext(ctx context.Context) IotRouteDatabasePtrOutput {
	return o
}

func (o IotRouteDatabasePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IotRouteDatabase] {
	return pulumix.Output[*IotRouteDatabase]{
		OutputState: o.OutputState,
	}
}

func (o IotRouteDatabasePtrOutput) Elem() IotRouteDatabaseOutput {
	return o.ApplyT(func(v *IotRouteDatabase) IotRouteDatabase {
		if v != nil {
			return *v
		}
		var ret IotRouteDatabase
		return ret
	}).(IotRouteDatabaseOutput)
}

func (o IotRouteDatabasePtrOutput) Dbname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotRouteDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Dbname
	}).(pulumi.StringPtrOutput)
}

func (o IotRouteDatabasePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotRouteDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

func (o IotRouteDatabasePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotRouteDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

func (o IotRouteDatabasePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IotRouteDatabase) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

func (o IotRouteDatabasePtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotRouteDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Query
	}).(pulumi.StringPtrOutput)
}

func (o IotRouteDatabasePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotRouteDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type IotRouteRest struct {
	Headers map[string]string `pulumi:"headers"`
	Uri     string            `pulumi:"uri"`
	Verb    string            `pulumi:"verb"`
}

// IotRouteRestInput is an input type that accepts IotRouteRestArgs and IotRouteRestOutput values.
// You can construct a concrete instance of `IotRouteRestInput` via:
//
//	IotRouteRestArgs{...}
type IotRouteRestInput interface {
	pulumi.Input

	ToIotRouteRestOutput() IotRouteRestOutput
	ToIotRouteRestOutputWithContext(context.Context) IotRouteRestOutput
}

type IotRouteRestArgs struct {
	Headers pulumi.StringMapInput `pulumi:"headers"`
	Uri     pulumi.StringInput    `pulumi:"uri"`
	Verb    pulumi.StringInput    `pulumi:"verb"`
}

func (IotRouteRestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IotRouteRest)(nil)).Elem()
}

func (i IotRouteRestArgs) ToIotRouteRestOutput() IotRouteRestOutput {
	return i.ToIotRouteRestOutputWithContext(context.Background())
}

func (i IotRouteRestArgs) ToIotRouteRestOutputWithContext(ctx context.Context) IotRouteRestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotRouteRestOutput)
}

func (i IotRouteRestArgs) ToOutput(ctx context.Context) pulumix.Output[IotRouteRest] {
	return pulumix.Output[IotRouteRest]{
		OutputState: i.ToIotRouteRestOutputWithContext(ctx).OutputState,
	}
}

func (i IotRouteRestArgs) ToIotRouteRestPtrOutput() IotRouteRestPtrOutput {
	return i.ToIotRouteRestPtrOutputWithContext(context.Background())
}

func (i IotRouteRestArgs) ToIotRouteRestPtrOutputWithContext(ctx context.Context) IotRouteRestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotRouteRestOutput).ToIotRouteRestPtrOutputWithContext(ctx)
}

// IotRouteRestPtrInput is an input type that accepts IotRouteRestArgs, IotRouteRestPtr and IotRouteRestPtrOutput values.
// You can construct a concrete instance of `IotRouteRestPtrInput` via:
//
//	        IotRouteRestArgs{...}
//
//	or:
//
//	        nil
type IotRouteRestPtrInput interface {
	pulumi.Input

	ToIotRouteRestPtrOutput() IotRouteRestPtrOutput
	ToIotRouteRestPtrOutputWithContext(context.Context) IotRouteRestPtrOutput
}

type iotRouteRestPtrType IotRouteRestArgs

func IotRouteRestPtr(v *IotRouteRestArgs) IotRouteRestPtrInput {
	return (*iotRouteRestPtrType)(v)
}

func (*iotRouteRestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IotRouteRest)(nil)).Elem()
}

func (i *iotRouteRestPtrType) ToIotRouteRestPtrOutput() IotRouteRestPtrOutput {
	return i.ToIotRouteRestPtrOutputWithContext(context.Background())
}

func (i *iotRouteRestPtrType) ToIotRouteRestPtrOutputWithContext(ctx context.Context) IotRouteRestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotRouteRestPtrOutput)
}

func (i *iotRouteRestPtrType) ToOutput(ctx context.Context) pulumix.Output[*IotRouteRest] {
	return pulumix.Output[*IotRouteRest]{
		OutputState: i.ToIotRouteRestPtrOutputWithContext(ctx).OutputState,
	}
}

type IotRouteRestOutput struct{ *pulumi.OutputState }

func (IotRouteRestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IotRouteRest)(nil)).Elem()
}

func (o IotRouteRestOutput) ToIotRouteRestOutput() IotRouteRestOutput {
	return o
}

func (o IotRouteRestOutput) ToIotRouteRestOutputWithContext(ctx context.Context) IotRouteRestOutput {
	return o
}

func (o IotRouteRestOutput) ToIotRouteRestPtrOutput() IotRouteRestPtrOutput {
	return o.ToIotRouteRestPtrOutputWithContext(context.Background())
}

func (o IotRouteRestOutput) ToIotRouteRestPtrOutputWithContext(ctx context.Context) IotRouteRestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IotRouteRest) *IotRouteRest {
		return &v
	}).(IotRouteRestPtrOutput)
}

func (o IotRouteRestOutput) ToOutput(ctx context.Context) pulumix.Output[IotRouteRest] {
	return pulumix.Output[IotRouteRest]{
		OutputState: o.OutputState,
	}
}

func (o IotRouteRestOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v IotRouteRest) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

func (o IotRouteRestOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v IotRouteRest) string { return v.Uri }).(pulumi.StringOutput)
}

func (o IotRouteRestOutput) Verb() pulumi.StringOutput {
	return o.ApplyT(func(v IotRouteRest) string { return v.Verb }).(pulumi.StringOutput)
}

type IotRouteRestPtrOutput struct{ *pulumi.OutputState }

func (IotRouteRestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IotRouteRest)(nil)).Elem()
}

func (o IotRouteRestPtrOutput) ToIotRouteRestPtrOutput() IotRouteRestPtrOutput {
	return o
}

func (o IotRouteRestPtrOutput) ToIotRouteRestPtrOutputWithContext(ctx context.Context) IotRouteRestPtrOutput {
	return o
}

func (o IotRouteRestPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IotRouteRest] {
	return pulumix.Output[*IotRouteRest]{
		OutputState: o.OutputState,
	}
}

func (o IotRouteRestPtrOutput) Elem() IotRouteRestOutput {
	return o.ApplyT(func(v *IotRouteRest) IotRouteRest {
		if v != nil {
			return *v
		}
		var ret IotRouteRest
		return ret
	}).(IotRouteRestOutput)
}

func (o IotRouteRestPtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IotRouteRest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

func (o IotRouteRestPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotRouteRest) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

func (o IotRouteRestPtrOutput) Verb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotRouteRest) *string {
		if v == nil {
			return nil
		}
		return &v.Verb
	}).(pulumi.StringPtrOutput)
}

type IotRouteS3 struct {
	BucketName   string  `pulumi:"bucketName"`
	BucketRegion string  `pulumi:"bucketRegion"`
	ObjectPrefix *string `pulumi:"objectPrefix"`
	Strategy     string  `pulumi:"strategy"`
}

// IotRouteS3Input is an input type that accepts IotRouteS3Args and IotRouteS3Output values.
// You can construct a concrete instance of `IotRouteS3Input` via:
//
//	IotRouteS3Args{...}
type IotRouteS3Input interface {
	pulumi.Input

	ToIotRouteS3Output() IotRouteS3Output
	ToIotRouteS3OutputWithContext(context.Context) IotRouteS3Output
}

type IotRouteS3Args struct {
	BucketName   pulumi.StringInput    `pulumi:"bucketName"`
	BucketRegion pulumi.StringInput    `pulumi:"bucketRegion"`
	ObjectPrefix pulumi.StringPtrInput `pulumi:"objectPrefix"`
	Strategy     pulumi.StringInput    `pulumi:"strategy"`
}

func (IotRouteS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*IotRouteS3)(nil)).Elem()
}

func (i IotRouteS3Args) ToIotRouteS3Output() IotRouteS3Output {
	return i.ToIotRouteS3OutputWithContext(context.Background())
}

func (i IotRouteS3Args) ToIotRouteS3OutputWithContext(ctx context.Context) IotRouteS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(IotRouteS3Output)
}

func (i IotRouteS3Args) ToOutput(ctx context.Context) pulumix.Output[IotRouteS3] {
	return pulumix.Output[IotRouteS3]{
		OutputState: i.ToIotRouteS3OutputWithContext(ctx).OutputState,
	}
}

func (i IotRouteS3Args) ToIotRouteS3PtrOutput() IotRouteS3PtrOutput {
	return i.ToIotRouteS3PtrOutputWithContext(context.Background())
}

func (i IotRouteS3Args) ToIotRouteS3PtrOutputWithContext(ctx context.Context) IotRouteS3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotRouteS3Output).ToIotRouteS3PtrOutputWithContext(ctx)
}

// IotRouteS3PtrInput is an input type that accepts IotRouteS3Args, IotRouteS3Ptr and IotRouteS3PtrOutput values.
// You can construct a concrete instance of `IotRouteS3PtrInput` via:
//
//	        IotRouteS3Args{...}
//
//	or:
//
//	        nil
type IotRouteS3PtrInput interface {
	pulumi.Input

	ToIotRouteS3PtrOutput() IotRouteS3PtrOutput
	ToIotRouteS3PtrOutputWithContext(context.Context) IotRouteS3PtrOutput
}

type iotRouteS3PtrType IotRouteS3Args

func IotRouteS3Ptr(v *IotRouteS3Args) IotRouteS3PtrInput {
	return (*iotRouteS3PtrType)(v)
}

func (*iotRouteS3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IotRouteS3)(nil)).Elem()
}

func (i *iotRouteS3PtrType) ToIotRouteS3PtrOutput() IotRouteS3PtrOutput {
	return i.ToIotRouteS3PtrOutputWithContext(context.Background())
}

func (i *iotRouteS3PtrType) ToIotRouteS3PtrOutputWithContext(ctx context.Context) IotRouteS3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotRouteS3PtrOutput)
}

func (i *iotRouteS3PtrType) ToOutput(ctx context.Context) pulumix.Output[*IotRouteS3] {
	return pulumix.Output[*IotRouteS3]{
		OutputState: i.ToIotRouteS3PtrOutputWithContext(ctx).OutputState,
	}
}

type IotRouteS3Output struct{ *pulumi.OutputState }

func (IotRouteS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*IotRouteS3)(nil)).Elem()
}

func (o IotRouteS3Output) ToIotRouteS3Output() IotRouteS3Output {
	return o
}

func (o IotRouteS3Output) ToIotRouteS3OutputWithContext(ctx context.Context) IotRouteS3Output {
	return o
}

func (o IotRouteS3Output) ToIotRouteS3PtrOutput() IotRouteS3PtrOutput {
	return o.ToIotRouteS3PtrOutputWithContext(context.Background())
}

func (o IotRouteS3Output) ToIotRouteS3PtrOutputWithContext(ctx context.Context) IotRouteS3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IotRouteS3) *IotRouteS3 {
		return &v
	}).(IotRouteS3PtrOutput)
}

func (o IotRouteS3Output) ToOutput(ctx context.Context) pulumix.Output[IotRouteS3] {
	return pulumix.Output[IotRouteS3]{
		OutputState: o.OutputState,
	}
}

func (o IotRouteS3Output) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v IotRouteS3) string { return v.BucketName }).(pulumi.StringOutput)
}

func (o IotRouteS3Output) BucketRegion() pulumi.StringOutput {
	return o.ApplyT(func(v IotRouteS3) string { return v.BucketRegion }).(pulumi.StringOutput)
}

func (o IotRouteS3Output) ObjectPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IotRouteS3) *string { return v.ObjectPrefix }).(pulumi.StringPtrOutput)
}

func (o IotRouteS3Output) Strategy() pulumi.StringOutput {
	return o.ApplyT(func(v IotRouteS3) string { return v.Strategy }).(pulumi.StringOutput)
}

type IotRouteS3PtrOutput struct{ *pulumi.OutputState }

func (IotRouteS3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IotRouteS3)(nil)).Elem()
}

func (o IotRouteS3PtrOutput) ToIotRouteS3PtrOutput() IotRouteS3PtrOutput {
	return o
}

func (o IotRouteS3PtrOutput) ToIotRouteS3PtrOutputWithContext(ctx context.Context) IotRouteS3PtrOutput {
	return o
}

func (o IotRouteS3PtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IotRouteS3] {
	return pulumix.Output[*IotRouteS3]{
		OutputState: o.OutputState,
	}
}

func (o IotRouteS3PtrOutput) Elem() IotRouteS3Output {
	return o.ApplyT(func(v *IotRouteS3) IotRouteS3 {
		if v != nil {
			return *v
		}
		var ret IotRouteS3
		return ret
	}).(IotRouteS3Output)
}

func (o IotRouteS3PtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotRouteS3) *string {
		if v == nil {
			return nil
		}
		return &v.BucketName
	}).(pulumi.StringPtrOutput)
}

func (o IotRouteS3PtrOutput) BucketRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotRouteS3) *string {
		if v == nil {
			return nil
		}
		return &v.BucketRegion
	}).(pulumi.StringPtrOutput)
}

func (o IotRouteS3PtrOutput) ObjectPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotRouteS3) *string {
		if v == nil {
			return nil
		}
		return v.ObjectPrefix
	}).(pulumi.StringPtrOutput)
}

func (o IotRouteS3PtrOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotRouteS3) *string {
		if v == nil {
			return nil
		}
		return &v.Strategy
	}).(pulumi.StringPtrOutput)
}

type K8sClusterAutoUpgrade struct {
	// Set to `true` to enable Kubernetes patch version auto upgrades.
	// > **Important:** When enabling auto upgrades, the `version` field take a minor version like x.y (ie 1.18).
	Enable bool `pulumi:"enable"`
	// The day of the auto upgrade maintenance window (`monday` to `sunday`, or `any`).
	MaintenanceWindowDay string `pulumi:"maintenanceWindowDay"`
	// The start hour (UTC) of the 2-hour auto upgrade maintenance window (0 to 23).
	MaintenanceWindowStartHour int `pulumi:"maintenanceWindowStartHour"`
}

// K8sClusterAutoUpgradeInput is an input type that accepts K8sClusterAutoUpgradeArgs and K8sClusterAutoUpgradeOutput values.
// You can construct a concrete instance of `K8sClusterAutoUpgradeInput` via:
//
//	K8sClusterAutoUpgradeArgs{...}
type K8sClusterAutoUpgradeInput interface {
	pulumi.Input

	ToK8sClusterAutoUpgradeOutput() K8sClusterAutoUpgradeOutput
	ToK8sClusterAutoUpgradeOutputWithContext(context.Context) K8sClusterAutoUpgradeOutput
}

type K8sClusterAutoUpgradeArgs struct {
	// Set to `true` to enable Kubernetes patch version auto upgrades.
	// > **Important:** When enabling auto upgrades, the `version` field take a minor version like x.y (ie 1.18).
	Enable pulumi.BoolInput `pulumi:"enable"`
	// The day of the auto upgrade maintenance window (`monday` to `sunday`, or `any`).
	MaintenanceWindowDay pulumi.StringInput `pulumi:"maintenanceWindowDay"`
	// The start hour (UTC) of the 2-hour auto upgrade maintenance window (0 to 23).
	MaintenanceWindowStartHour pulumi.IntInput `pulumi:"maintenanceWindowStartHour"`
}

func (K8sClusterAutoUpgradeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sClusterAutoUpgrade)(nil)).Elem()
}

func (i K8sClusterAutoUpgradeArgs) ToK8sClusterAutoUpgradeOutput() K8sClusterAutoUpgradeOutput {
	return i.ToK8sClusterAutoUpgradeOutputWithContext(context.Background())
}

func (i K8sClusterAutoUpgradeArgs) ToK8sClusterAutoUpgradeOutputWithContext(ctx context.Context) K8sClusterAutoUpgradeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sClusterAutoUpgradeOutput)
}

func (i K8sClusterAutoUpgradeArgs) ToOutput(ctx context.Context) pulumix.Output[K8sClusterAutoUpgrade] {
	return pulumix.Output[K8sClusterAutoUpgrade]{
		OutputState: i.ToK8sClusterAutoUpgradeOutputWithContext(ctx).OutputState,
	}
}

func (i K8sClusterAutoUpgradeArgs) ToK8sClusterAutoUpgradePtrOutput() K8sClusterAutoUpgradePtrOutput {
	return i.ToK8sClusterAutoUpgradePtrOutputWithContext(context.Background())
}

func (i K8sClusterAutoUpgradeArgs) ToK8sClusterAutoUpgradePtrOutputWithContext(ctx context.Context) K8sClusterAutoUpgradePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sClusterAutoUpgradeOutput).ToK8sClusterAutoUpgradePtrOutputWithContext(ctx)
}

// K8sClusterAutoUpgradePtrInput is an input type that accepts K8sClusterAutoUpgradeArgs, K8sClusterAutoUpgradePtr and K8sClusterAutoUpgradePtrOutput values.
// You can construct a concrete instance of `K8sClusterAutoUpgradePtrInput` via:
//
//	        K8sClusterAutoUpgradeArgs{...}
//
//	or:
//
//	        nil
type K8sClusterAutoUpgradePtrInput interface {
	pulumi.Input

	ToK8sClusterAutoUpgradePtrOutput() K8sClusterAutoUpgradePtrOutput
	ToK8sClusterAutoUpgradePtrOutputWithContext(context.Context) K8sClusterAutoUpgradePtrOutput
}

type k8sClusterAutoUpgradePtrType K8sClusterAutoUpgradeArgs

func K8sClusterAutoUpgradePtr(v *K8sClusterAutoUpgradeArgs) K8sClusterAutoUpgradePtrInput {
	return (*k8sClusterAutoUpgradePtrType)(v)
}

func (*k8sClusterAutoUpgradePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sClusterAutoUpgrade)(nil)).Elem()
}

func (i *k8sClusterAutoUpgradePtrType) ToK8sClusterAutoUpgradePtrOutput() K8sClusterAutoUpgradePtrOutput {
	return i.ToK8sClusterAutoUpgradePtrOutputWithContext(context.Background())
}

func (i *k8sClusterAutoUpgradePtrType) ToK8sClusterAutoUpgradePtrOutputWithContext(ctx context.Context) K8sClusterAutoUpgradePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sClusterAutoUpgradePtrOutput)
}

func (i *k8sClusterAutoUpgradePtrType) ToOutput(ctx context.Context) pulumix.Output[*K8sClusterAutoUpgrade] {
	return pulumix.Output[*K8sClusterAutoUpgrade]{
		OutputState: i.ToK8sClusterAutoUpgradePtrOutputWithContext(ctx).OutputState,
	}
}

type K8sClusterAutoUpgradeOutput struct{ *pulumi.OutputState }

func (K8sClusterAutoUpgradeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sClusterAutoUpgrade)(nil)).Elem()
}

func (o K8sClusterAutoUpgradeOutput) ToK8sClusterAutoUpgradeOutput() K8sClusterAutoUpgradeOutput {
	return o
}

func (o K8sClusterAutoUpgradeOutput) ToK8sClusterAutoUpgradeOutputWithContext(ctx context.Context) K8sClusterAutoUpgradeOutput {
	return o
}

func (o K8sClusterAutoUpgradeOutput) ToK8sClusterAutoUpgradePtrOutput() K8sClusterAutoUpgradePtrOutput {
	return o.ToK8sClusterAutoUpgradePtrOutputWithContext(context.Background())
}

func (o K8sClusterAutoUpgradeOutput) ToK8sClusterAutoUpgradePtrOutputWithContext(ctx context.Context) K8sClusterAutoUpgradePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K8sClusterAutoUpgrade) *K8sClusterAutoUpgrade {
		return &v
	}).(K8sClusterAutoUpgradePtrOutput)
}

func (o K8sClusterAutoUpgradeOutput) ToOutput(ctx context.Context) pulumix.Output[K8sClusterAutoUpgrade] {
	return pulumix.Output[K8sClusterAutoUpgrade]{
		OutputState: o.OutputState,
	}
}

// Set to `true` to enable Kubernetes patch version auto upgrades.
// > **Important:** When enabling auto upgrades, the `version` field take a minor version like x.y (ie 1.18).
func (o K8sClusterAutoUpgradeOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v K8sClusterAutoUpgrade) bool { return v.Enable }).(pulumi.BoolOutput)
}

// The day of the auto upgrade maintenance window (`monday` to `sunday`, or `any`).
func (o K8sClusterAutoUpgradeOutput) MaintenanceWindowDay() pulumi.StringOutput {
	return o.ApplyT(func(v K8sClusterAutoUpgrade) string { return v.MaintenanceWindowDay }).(pulumi.StringOutput)
}

// The start hour (UTC) of the 2-hour auto upgrade maintenance window (0 to 23).
func (o K8sClusterAutoUpgradeOutput) MaintenanceWindowStartHour() pulumi.IntOutput {
	return o.ApplyT(func(v K8sClusterAutoUpgrade) int { return v.MaintenanceWindowStartHour }).(pulumi.IntOutput)
}

type K8sClusterAutoUpgradePtrOutput struct{ *pulumi.OutputState }

func (K8sClusterAutoUpgradePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sClusterAutoUpgrade)(nil)).Elem()
}

func (o K8sClusterAutoUpgradePtrOutput) ToK8sClusterAutoUpgradePtrOutput() K8sClusterAutoUpgradePtrOutput {
	return o
}

func (o K8sClusterAutoUpgradePtrOutput) ToK8sClusterAutoUpgradePtrOutputWithContext(ctx context.Context) K8sClusterAutoUpgradePtrOutput {
	return o
}

func (o K8sClusterAutoUpgradePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*K8sClusterAutoUpgrade] {
	return pulumix.Output[*K8sClusterAutoUpgrade]{
		OutputState: o.OutputState,
	}
}

func (o K8sClusterAutoUpgradePtrOutput) Elem() K8sClusterAutoUpgradeOutput {
	return o.ApplyT(func(v *K8sClusterAutoUpgrade) K8sClusterAutoUpgrade {
		if v != nil {
			return *v
		}
		var ret K8sClusterAutoUpgrade
		return ret
	}).(K8sClusterAutoUpgradeOutput)
}

// Set to `true` to enable Kubernetes patch version auto upgrades.
// > **Important:** When enabling auto upgrades, the `version` field take a minor version like x.y (ie 1.18).
func (o K8sClusterAutoUpgradePtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K8sClusterAutoUpgrade) *bool {
		if v == nil {
			return nil
		}
		return &v.Enable
	}).(pulumi.BoolPtrOutput)
}

// The day of the auto upgrade maintenance window (`monday` to `sunday`, or `any`).
func (o K8sClusterAutoUpgradePtrOutput) MaintenanceWindowDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8sClusterAutoUpgrade) *string {
		if v == nil {
			return nil
		}
		return &v.MaintenanceWindowDay
	}).(pulumi.StringPtrOutput)
}

// The start hour (UTC) of the 2-hour auto upgrade maintenance window (0 to 23).
func (o K8sClusterAutoUpgradePtrOutput) MaintenanceWindowStartHour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *K8sClusterAutoUpgrade) *int {
		if v == nil {
			return nil
		}
		return &v.MaintenanceWindowStartHour
	}).(pulumi.IntPtrOutput)
}

type K8sClusterAutoscalerConfig struct {
	// Detect similar node groups and balance the number of nodes between them.
	BalanceSimilarNodeGroups *bool `pulumi:"balanceSimilarNodeGroups"`
	// Disables the scale down feature of the autoscaler.
	DisableScaleDown *bool `pulumi:"disableScaleDown"`
	// Type of resource estimator to be used in scale up.
	Estimator *string `pulumi:"estimator"`
	// Type of node group expander to be used in scale up.
	Expander *string `pulumi:"expander"`
	// Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don't cause scale up. Pods with null priority (PodPriority disabled) are non expendable.
	ExpendablePodsPriorityCutoff *int `pulumi:"expendablePodsPriorityCutoff"`
	// Ignore DaemonSet pods when calculating resource utilization for scaling down.
	IgnoreDaemonsetsUtilization *bool `pulumi:"ignoreDaemonsetsUtilization"`
	// Maximum number of seconds the cluster autoscaler waits for pod termination when trying to scale down a node
	MaxGracefulTerminationSec *int `pulumi:"maxGracefulTerminationSec"`
	// How long after scale up that scale down evaluation resumes.
	ScaleDownDelayAfterAdd *string `pulumi:"scaleDownDelayAfterAdd"`
	// How long a node should be unneeded before it is eligible for scale down.
	ScaleDownUnneededTime *string `pulumi:"scaleDownUnneededTime"`
	// Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down
	ScaleDownUtilizationThreshold *float64 `pulumi:"scaleDownUtilizationThreshold"`
}

// K8sClusterAutoscalerConfigInput is an input type that accepts K8sClusterAutoscalerConfigArgs and K8sClusterAutoscalerConfigOutput values.
// You can construct a concrete instance of `K8sClusterAutoscalerConfigInput` via:
//
//	K8sClusterAutoscalerConfigArgs{...}
type K8sClusterAutoscalerConfigInput interface {
	pulumi.Input

	ToK8sClusterAutoscalerConfigOutput() K8sClusterAutoscalerConfigOutput
	ToK8sClusterAutoscalerConfigOutputWithContext(context.Context) K8sClusterAutoscalerConfigOutput
}

type K8sClusterAutoscalerConfigArgs struct {
	// Detect similar node groups and balance the number of nodes between them.
	BalanceSimilarNodeGroups pulumi.BoolPtrInput `pulumi:"balanceSimilarNodeGroups"`
	// Disables the scale down feature of the autoscaler.
	DisableScaleDown pulumi.BoolPtrInput `pulumi:"disableScaleDown"`
	// Type of resource estimator to be used in scale up.
	Estimator pulumi.StringPtrInput `pulumi:"estimator"`
	// Type of node group expander to be used in scale up.
	Expander pulumi.StringPtrInput `pulumi:"expander"`
	// Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don't cause scale up. Pods with null priority (PodPriority disabled) are non expendable.
	ExpendablePodsPriorityCutoff pulumi.IntPtrInput `pulumi:"expendablePodsPriorityCutoff"`
	// Ignore DaemonSet pods when calculating resource utilization for scaling down.
	IgnoreDaemonsetsUtilization pulumi.BoolPtrInput `pulumi:"ignoreDaemonsetsUtilization"`
	// Maximum number of seconds the cluster autoscaler waits for pod termination when trying to scale down a node
	MaxGracefulTerminationSec pulumi.IntPtrInput `pulumi:"maxGracefulTerminationSec"`
	// How long after scale up that scale down evaluation resumes.
	ScaleDownDelayAfterAdd pulumi.StringPtrInput `pulumi:"scaleDownDelayAfterAdd"`
	// How long a node should be unneeded before it is eligible for scale down.
	ScaleDownUnneededTime pulumi.StringPtrInput `pulumi:"scaleDownUnneededTime"`
	// Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down
	ScaleDownUtilizationThreshold pulumi.Float64PtrInput `pulumi:"scaleDownUtilizationThreshold"`
}

func (K8sClusterAutoscalerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sClusterAutoscalerConfig)(nil)).Elem()
}

func (i K8sClusterAutoscalerConfigArgs) ToK8sClusterAutoscalerConfigOutput() K8sClusterAutoscalerConfigOutput {
	return i.ToK8sClusterAutoscalerConfigOutputWithContext(context.Background())
}

func (i K8sClusterAutoscalerConfigArgs) ToK8sClusterAutoscalerConfigOutputWithContext(ctx context.Context) K8sClusterAutoscalerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sClusterAutoscalerConfigOutput)
}

func (i K8sClusterAutoscalerConfigArgs) ToOutput(ctx context.Context) pulumix.Output[K8sClusterAutoscalerConfig] {
	return pulumix.Output[K8sClusterAutoscalerConfig]{
		OutputState: i.ToK8sClusterAutoscalerConfigOutputWithContext(ctx).OutputState,
	}
}

func (i K8sClusterAutoscalerConfigArgs) ToK8sClusterAutoscalerConfigPtrOutput() K8sClusterAutoscalerConfigPtrOutput {
	return i.ToK8sClusterAutoscalerConfigPtrOutputWithContext(context.Background())
}

func (i K8sClusterAutoscalerConfigArgs) ToK8sClusterAutoscalerConfigPtrOutputWithContext(ctx context.Context) K8sClusterAutoscalerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sClusterAutoscalerConfigOutput).ToK8sClusterAutoscalerConfigPtrOutputWithContext(ctx)
}

// K8sClusterAutoscalerConfigPtrInput is an input type that accepts K8sClusterAutoscalerConfigArgs, K8sClusterAutoscalerConfigPtr and K8sClusterAutoscalerConfigPtrOutput values.
// You can construct a concrete instance of `K8sClusterAutoscalerConfigPtrInput` via:
//
//	        K8sClusterAutoscalerConfigArgs{...}
//
//	or:
//
//	        nil
type K8sClusterAutoscalerConfigPtrInput interface {
	pulumi.Input

	ToK8sClusterAutoscalerConfigPtrOutput() K8sClusterAutoscalerConfigPtrOutput
	ToK8sClusterAutoscalerConfigPtrOutputWithContext(context.Context) K8sClusterAutoscalerConfigPtrOutput
}

type k8sClusterAutoscalerConfigPtrType K8sClusterAutoscalerConfigArgs

func K8sClusterAutoscalerConfigPtr(v *K8sClusterAutoscalerConfigArgs) K8sClusterAutoscalerConfigPtrInput {
	return (*k8sClusterAutoscalerConfigPtrType)(v)
}

func (*k8sClusterAutoscalerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sClusterAutoscalerConfig)(nil)).Elem()
}

func (i *k8sClusterAutoscalerConfigPtrType) ToK8sClusterAutoscalerConfigPtrOutput() K8sClusterAutoscalerConfigPtrOutput {
	return i.ToK8sClusterAutoscalerConfigPtrOutputWithContext(context.Background())
}

func (i *k8sClusterAutoscalerConfigPtrType) ToK8sClusterAutoscalerConfigPtrOutputWithContext(ctx context.Context) K8sClusterAutoscalerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sClusterAutoscalerConfigPtrOutput)
}

func (i *k8sClusterAutoscalerConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*K8sClusterAutoscalerConfig] {
	return pulumix.Output[*K8sClusterAutoscalerConfig]{
		OutputState: i.ToK8sClusterAutoscalerConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type K8sClusterAutoscalerConfigOutput struct{ *pulumi.OutputState }

func (K8sClusterAutoscalerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sClusterAutoscalerConfig)(nil)).Elem()
}

func (o K8sClusterAutoscalerConfigOutput) ToK8sClusterAutoscalerConfigOutput() K8sClusterAutoscalerConfigOutput {
	return o
}

func (o K8sClusterAutoscalerConfigOutput) ToK8sClusterAutoscalerConfigOutputWithContext(ctx context.Context) K8sClusterAutoscalerConfigOutput {
	return o
}

func (o K8sClusterAutoscalerConfigOutput) ToK8sClusterAutoscalerConfigPtrOutput() K8sClusterAutoscalerConfigPtrOutput {
	return o.ToK8sClusterAutoscalerConfigPtrOutputWithContext(context.Background())
}

func (o K8sClusterAutoscalerConfigOutput) ToK8sClusterAutoscalerConfigPtrOutputWithContext(ctx context.Context) K8sClusterAutoscalerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K8sClusterAutoscalerConfig) *K8sClusterAutoscalerConfig {
		return &v
	}).(K8sClusterAutoscalerConfigPtrOutput)
}

func (o K8sClusterAutoscalerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[K8sClusterAutoscalerConfig] {
	return pulumix.Output[K8sClusterAutoscalerConfig]{
		OutputState: o.OutputState,
	}
}

// Detect similar node groups and balance the number of nodes between them.
func (o K8sClusterAutoscalerConfigOutput) BalanceSimilarNodeGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v K8sClusterAutoscalerConfig) *bool { return v.BalanceSimilarNodeGroups }).(pulumi.BoolPtrOutput)
}

// Disables the scale down feature of the autoscaler.
func (o K8sClusterAutoscalerConfigOutput) DisableScaleDown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v K8sClusterAutoscalerConfig) *bool { return v.DisableScaleDown }).(pulumi.BoolPtrOutput)
}

// Type of resource estimator to be used in scale up.
func (o K8sClusterAutoscalerConfigOutput) Estimator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K8sClusterAutoscalerConfig) *string { return v.Estimator }).(pulumi.StringPtrOutput)
}

// Type of node group expander to be used in scale up.
func (o K8sClusterAutoscalerConfigOutput) Expander() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K8sClusterAutoscalerConfig) *string { return v.Expander }).(pulumi.StringPtrOutput)
}

// Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don't cause scale up. Pods with null priority (PodPriority disabled) are non expendable.
func (o K8sClusterAutoscalerConfigOutput) ExpendablePodsPriorityCutoff() pulumi.IntPtrOutput {
	return o.ApplyT(func(v K8sClusterAutoscalerConfig) *int { return v.ExpendablePodsPriorityCutoff }).(pulumi.IntPtrOutput)
}

// Ignore DaemonSet pods when calculating resource utilization for scaling down.
func (o K8sClusterAutoscalerConfigOutput) IgnoreDaemonsetsUtilization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v K8sClusterAutoscalerConfig) *bool { return v.IgnoreDaemonsetsUtilization }).(pulumi.BoolPtrOutput)
}

// Maximum number of seconds the cluster autoscaler waits for pod termination when trying to scale down a node
func (o K8sClusterAutoscalerConfigOutput) MaxGracefulTerminationSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v K8sClusterAutoscalerConfig) *int { return v.MaxGracefulTerminationSec }).(pulumi.IntPtrOutput)
}

// How long after scale up that scale down evaluation resumes.
func (o K8sClusterAutoscalerConfigOutput) ScaleDownDelayAfterAdd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K8sClusterAutoscalerConfig) *string { return v.ScaleDownDelayAfterAdd }).(pulumi.StringPtrOutput)
}

// How long a node should be unneeded before it is eligible for scale down.
func (o K8sClusterAutoscalerConfigOutput) ScaleDownUnneededTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K8sClusterAutoscalerConfig) *string { return v.ScaleDownUnneededTime }).(pulumi.StringPtrOutput)
}

// Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down
func (o K8sClusterAutoscalerConfigOutput) ScaleDownUtilizationThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v K8sClusterAutoscalerConfig) *float64 { return v.ScaleDownUtilizationThreshold }).(pulumi.Float64PtrOutput)
}

type K8sClusterAutoscalerConfigPtrOutput struct{ *pulumi.OutputState }

func (K8sClusterAutoscalerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sClusterAutoscalerConfig)(nil)).Elem()
}

func (o K8sClusterAutoscalerConfigPtrOutput) ToK8sClusterAutoscalerConfigPtrOutput() K8sClusterAutoscalerConfigPtrOutput {
	return o
}

func (o K8sClusterAutoscalerConfigPtrOutput) ToK8sClusterAutoscalerConfigPtrOutputWithContext(ctx context.Context) K8sClusterAutoscalerConfigPtrOutput {
	return o
}

func (o K8sClusterAutoscalerConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*K8sClusterAutoscalerConfig] {
	return pulumix.Output[*K8sClusterAutoscalerConfig]{
		OutputState: o.OutputState,
	}
}

func (o K8sClusterAutoscalerConfigPtrOutput) Elem() K8sClusterAutoscalerConfigOutput {
	return o.ApplyT(func(v *K8sClusterAutoscalerConfig) K8sClusterAutoscalerConfig {
		if v != nil {
			return *v
		}
		var ret K8sClusterAutoscalerConfig
		return ret
	}).(K8sClusterAutoscalerConfigOutput)
}

// Detect similar node groups and balance the number of nodes between them.
func (o K8sClusterAutoscalerConfigPtrOutput) BalanceSimilarNodeGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K8sClusterAutoscalerConfig) *bool {
		if v == nil {
			return nil
		}
		return v.BalanceSimilarNodeGroups
	}).(pulumi.BoolPtrOutput)
}

// Disables the scale down feature of the autoscaler.
func (o K8sClusterAutoscalerConfigPtrOutput) DisableScaleDown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K8sClusterAutoscalerConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DisableScaleDown
	}).(pulumi.BoolPtrOutput)
}

// Type of resource estimator to be used in scale up.
func (o K8sClusterAutoscalerConfigPtrOutput) Estimator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8sClusterAutoscalerConfig) *string {
		if v == nil {
			return nil
		}
		return v.Estimator
	}).(pulumi.StringPtrOutput)
}

// Type of node group expander to be used in scale up.
func (o K8sClusterAutoscalerConfigPtrOutput) Expander() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8sClusterAutoscalerConfig) *string {
		if v == nil {
			return nil
		}
		return v.Expander
	}).(pulumi.StringPtrOutput)
}

// Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don't cause scale up. Pods with null priority (PodPriority disabled) are non expendable.
func (o K8sClusterAutoscalerConfigPtrOutput) ExpendablePodsPriorityCutoff() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *K8sClusterAutoscalerConfig) *int {
		if v == nil {
			return nil
		}
		return v.ExpendablePodsPriorityCutoff
	}).(pulumi.IntPtrOutput)
}

// Ignore DaemonSet pods when calculating resource utilization for scaling down.
func (o K8sClusterAutoscalerConfigPtrOutput) IgnoreDaemonsetsUtilization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K8sClusterAutoscalerConfig) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreDaemonsetsUtilization
	}).(pulumi.BoolPtrOutput)
}

// Maximum number of seconds the cluster autoscaler waits for pod termination when trying to scale down a node
func (o K8sClusterAutoscalerConfigPtrOutput) MaxGracefulTerminationSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *K8sClusterAutoscalerConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxGracefulTerminationSec
	}).(pulumi.IntPtrOutput)
}

// How long after scale up that scale down evaluation resumes.
func (o K8sClusterAutoscalerConfigPtrOutput) ScaleDownDelayAfterAdd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8sClusterAutoscalerConfig) *string {
		if v == nil {
			return nil
		}
		return v.ScaleDownDelayAfterAdd
	}).(pulumi.StringPtrOutput)
}

// How long a node should be unneeded before it is eligible for scale down.
func (o K8sClusterAutoscalerConfigPtrOutput) ScaleDownUnneededTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8sClusterAutoscalerConfig) *string {
		if v == nil {
			return nil
		}
		return v.ScaleDownUnneededTime
	}).(pulumi.StringPtrOutput)
}

// Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down
func (o K8sClusterAutoscalerConfigPtrOutput) ScaleDownUtilizationThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *K8sClusterAutoscalerConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.ScaleDownUtilizationThreshold
	}).(pulumi.Float64PtrOutput)
}

type K8sClusterKubeconfig struct {
	// The CA certificate of the Kubernetes API server.
	ClusterCaCertificate *string `pulumi:"clusterCaCertificate"`
	// The raw kubeconfig file.
	ConfigFile *string `pulumi:"configFile"`
	// The URL of the Kubernetes API server.
	Host *string `pulumi:"host"`
	// The token to connect to the Kubernetes API server.
	Token *string `pulumi:"token"`
}

// K8sClusterKubeconfigInput is an input type that accepts K8sClusterKubeconfigArgs and K8sClusterKubeconfigOutput values.
// You can construct a concrete instance of `K8sClusterKubeconfigInput` via:
//
//	K8sClusterKubeconfigArgs{...}
type K8sClusterKubeconfigInput interface {
	pulumi.Input

	ToK8sClusterKubeconfigOutput() K8sClusterKubeconfigOutput
	ToK8sClusterKubeconfigOutputWithContext(context.Context) K8sClusterKubeconfigOutput
}

type K8sClusterKubeconfigArgs struct {
	// The CA certificate of the Kubernetes API server.
	ClusterCaCertificate pulumi.StringPtrInput `pulumi:"clusterCaCertificate"`
	// The raw kubeconfig file.
	ConfigFile pulumi.StringPtrInput `pulumi:"configFile"`
	// The URL of the Kubernetes API server.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The token to connect to the Kubernetes API server.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (K8sClusterKubeconfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sClusterKubeconfig)(nil)).Elem()
}

func (i K8sClusterKubeconfigArgs) ToK8sClusterKubeconfigOutput() K8sClusterKubeconfigOutput {
	return i.ToK8sClusterKubeconfigOutputWithContext(context.Background())
}

func (i K8sClusterKubeconfigArgs) ToK8sClusterKubeconfigOutputWithContext(ctx context.Context) K8sClusterKubeconfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sClusterKubeconfigOutput)
}

func (i K8sClusterKubeconfigArgs) ToOutput(ctx context.Context) pulumix.Output[K8sClusterKubeconfig] {
	return pulumix.Output[K8sClusterKubeconfig]{
		OutputState: i.ToK8sClusterKubeconfigOutputWithContext(ctx).OutputState,
	}
}

// K8sClusterKubeconfigArrayInput is an input type that accepts K8sClusterKubeconfigArray and K8sClusterKubeconfigArrayOutput values.
// You can construct a concrete instance of `K8sClusterKubeconfigArrayInput` via:
//
//	K8sClusterKubeconfigArray{ K8sClusterKubeconfigArgs{...} }
type K8sClusterKubeconfigArrayInput interface {
	pulumi.Input

	ToK8sClusterKubeconfigArrayOutput() K8sClusterKubeconfigArrayOutput
	ToK8sClusterKubeconfigArrayOutputWithContext(context.Context) K8sClusterKubeconfigArrayOutput
}

type K8sClusterKubeconfigArray []K8sClusterKubeconfigInput

func (K8sClusterKubeconfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]K8sClusterKubeconfig)(nil)).Elem()
}

func (i K8sClusterKubeconfigArray) ToK8sClusterKubeconfigArrayOutput() K8sClusterKubeconfigArrayOutput {
	return i.ToK8sClusterKubeconfigArrayOutputWithContext(context.Background())
}

func (i K8sClusterKubeconfigArray) ToK8sClusterKubeconfigArrayOutputWithContext(ctx context.Context) K8sClusterKubeconfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sClusterKubeconfigArrayOutput)
}

func (i K8sClusterKubeconfigArray) ToOutput(ctx context.Context) pulumix.Output[[]K8sClusterKubeconfig] {
	return pulumix.Output[[]K8sClusterKubeconfig]{
		OutputState: i.ToK8sClusterKubeconfigArrayOutputWithContext(ctx).OutputState,
	}
}

type K8sClusterKubeconfigOutput struct{ *pulumi.OutputState }

func (K8sClusterKubeconfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sClusterKubeconfig)(nil)).Elem()
}

func (o K8sClusterKubeconfigOutput) ToK8sClusterKubeconfigOutput() K8sClusterKubeconfigOutput {
	return o
}

func (o K8sClusterKubeconfigOutput) ToK8sClusterKubeconfigOutputWithContext(ctx context.Context) K8sClusterKubeconfigOutput {
	return o
}

func (o K8sClusterKubeconfigOutput) ToOutput(ctx context.Context) pulumix.Output[K8sClusterKubeconfig] {
	return pulumix.Output[K8sClusterKubeconfig]{
		OutputState: o.OutputState,
	}
}

// The CA certificate of the Kubernetes API server.
func (o K8sClusterKubeconfigOutput) ClusterCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K8sClusterKubeconfig) *string { return v.ClusterCaCertificate }).(pulumi.StringPtrOutput)
}

// The raw kubeconfig file.
func (o K8sClusterKubeconfigOutput) ConfigFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K8sClusterKubeconfig) *string { return v.ConfigFile }).(pulumi.StringPtrOutput)
}

// The URL of the Kubernetes API server.
func (o K8sClusterKubeconfigOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K8sClusterKubeconfig) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The token to connect to the Kubernetes API server.
func (o K8sClusterKubeconfigOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K8sClusterKubeconfig) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type K8sClusterKubeconfigArrayOutput struct{ *pulumi.OutputState }

func (K8sClusterKubeconfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]K8sClusterKubeconfig)(nil)).Elem()
}

func (o K8sClusterKubeconfigArrayOutput) ToK8sClusterKubeconfigArrayOutput() K8sClusterKubeconfigArrayOutput {
	return o
}

func (o K8sClusterKubeconfigArrayOutput) ToK8sClusterKubeconfigArrayOutputWithContext(ctx context.Context) K8sClusterKubeconfigArrayOutput {
	return o
}

func (o K8sClusterKubeconfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]K8sClusterKubeconfig] {
	return pulumix.Output[[]K8sClusterKubeconfig]{
		OutputState: o.OutputState,
	}
}

func (o K8sClusterKubeconfigArrayOutput) Index(i pulumi.IntInput) K8sClusterKubeconfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) K8sClusterKubeconfig {
		return vs[0].([]K8sClusterKubeconfig)[vs[1].(int)]
	}).(K8sClusterKubeconfigOutput)
}

type K8sClusterOpenIdConnectConfig struct {
	// A client id that all tokens must be issued for
	ClientId string `pulumi:"clientId"`
	// JWT claim to use as the user's group
	GroupsClaims []string `pulumi:"groupsClaims"`
	// Prefix prepended to group claims
	GroupsPrefix *string `pulumi:"groupsPrefix"`
	// URL of the provider which allows the API server to discover public signing keys
	IssuerUrl string `pulumi:"issuerUrl"`
	// Multiple key=value pairs that describes a required claim in the ID Token
	RequiredClaims []string `pulumi:"requiredClaims"`
	// JWT claim to use as the user name
	UsernameClaim *string `pulumi:"usernameClaim"`
	// Prefix prepended to username
	UsernamePrefix *string `pulumi:"usernamePrefix"`
}

// K8sClusterOpenIdConnectConfigInput is an input type that accepts K8sClusterOpenIdConnectConfigArgs and K8sClusterOpenIdConnectConfigOutput values.
// You can construct a concrete instance of `K8sClusterOpenIdConnectConfigInput` via:
//
//	K8sClusterOpenIdConnectConfigArgs{...}
type K8sClusterOpenIdConnectConfigInput interface {
	pulumi.Input

	ToK8sClusterOpenIdConnectConfigOutput() K8sClusterOpenIdConnectConfigOutput
	ToK8sClusterOpenIdConnectConfigOutputWithContext(context.Context) K8sClusterOpenIdConnectConfigOutput
}

type K8sClusterOpenIdConnectConfigArgs struct {
	// A client id that all tokens must be issued for
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// JWT claim to use as the user's group
	GroupsClaims pulumi.StringArrayInput `pulumi:"groupsClaims"`
	// Prefix prepended to group claims
	GroupsPrefix pulumi.StringPtrInput `pulumi:"groupsPrefix"`
	// URL of the provider which allows the API server to discover public signing keys
	IssuerUrl pulumi.StringInput `pulumi:"issuerUrl"`
	// Multiple key=value pairs that describes a required claim in the ID Token
	RequiredClaims pulumi.StringArrayInput `pulumi:"requiredClaims"`
	// JWT claim to use as the user name
	UsernameClaim pulumi.StringPtrInput `pulumi:"usernameClaim"`
	// Prefix prepended to username
	UsernamePrefix pulumi.StringPtrInput `pulumi:"usernamePrefix"`
}

func (K8sClusterOpenIdConnectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sClusterOpenIdConnectConfig)(nil)).Elem()
}

func (i K8sClusterOpenIdConnectConfigArgs) ToK8sClusterOpenIdConnectConfigOutput() K8sClusterOpenIdConnectConfigOutput {
	return i.ToK8sClusterOpenIdConnectConfigOutputWithContext(context.Background())
}

func (i K8sClusterOpenIdConnectConfigArgs) ToK8sClusterOpenIdConnectConfigOutputWithContext(ctx context.Context) K8sClusterOpenIdConnectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sClusterOpenIdConnectConfigOutput)
}

func (i K8sClusterOpenIdConnectConfigArgs) ToOutput(ctx context.Context) pulumix.Output[K8sClusterOpenIdConnectConfig] {
	return pulumix.Output[K8sClusterOpenIdConnectConfig]{
		OutputState: i.ToK8sClusterOpenIdConnectConfigOutputWithContext(ctx).OutputState,
	}
}

func (i K8sClusterOpenIdConnectConfigArgs) ToK8sClusterOpenIdConnectConfigPtrOutput() K8sClusterOpenIdConnectConfigPtrOutput {
	return i.ToK8sClusterOpenIdConnectConfigPtrOutputWithContext(context.Background())
}

func (i K8sClusterOpenIdConnectConfigArgs) ToK8sClusterOpenIdConnectConfigPtrOutputWithContext(ctx context.Context) K8sClusterOpenIdConnectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sClusterOpenIdConnectConfigOutput).ToK8sClusterOpenIdConnectConfigPtrOutputWithContext(ctx)
}

// K8sClusterOpenIdConnectConfigPtrInput is an input type that accepts K8sClusterOpenIdConnectConfigArgs, K8sClusterOpenIdConnectConfigPtr and K8sClusterOpenIdConnectConfigPtrOutput values.
// You can construct a concrete instance of `K8sClusterOpenIdConnectConfigPtrInput` via:
//
//	        K8sClusterOpenIdConnectConfigArgs{...}
//
//	or:
//
//	        nil
type K8sClusterOpenIdConnectConfigPtrInput interface {
	pulumi.Input

	ToK8sClusterOpenIdConnectConfigPtrOutput() K8sClusterOpenIdConnectConfigPtrOutput
	ToK8sClusterOpenIdConnectConfigPtrOutputWithContext(context.Context) K8sClusterOpenIdConnectConfigPtrOutput
}

type k8sClusterOpenIdConnectConfigPtrType K8sClusterOpenIdConnectConfigArgs

func K8sClusterOpenIdConnectConfigPtr(v *K8sClusterOpenIdConnectConfigArgs) K8sClusterOpenIdConnectConfigPtrInput {
	return (*k8sClusterOpenIdConnectConfigPtrType)(v)
}

func (*k8sClusterOpenIdConnectConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sClusterOpenIdConnectConfig)(nil)).Elem()
}

func (i *k8sClusterOpenIdConnectConfigPtrType) ToK8sClusterOpenIdConnectConfigPtrOutput() K8sClusterOpenIdConnectConfigPtrOutput {
	return i.ToK8sClusterOpenIdConnectConfigPtrOutputWithContext(context.Background())
}

func (i *k8sClusterOpenIdConnectConfigPtrType) ToK8sClusterOpenIdConnectConfigPtrOutputWithContext(ctx context.Context) K8sClusterOpenIdConnectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sClusterOpenIdConnectConfigPtrOutput)
}

func (i *k8sClusterOpenIdConnectConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*K8sClusterOpenIdConnectConfig] {
	return pulumix.Output[*K8sClusterOpenIdConnectConfig]{
		OutputState: i.ToK8sClusterOpenIdConnectConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type K8sClusterOpenIdConnectConfigOutput struct{ *pulumi.OutputState }

func (K8sClusterOpenIdConnectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sClusterOpenIdConnectConfig)(nil)).Elem()
}

func (o K8sClusterOpenIdConnectConfigOutput) ToK8sClusterOpenIdConnectConfigOutput() K8sClusterOpenIdConnectConfigOutput {
	return o
}

func (o K8sClusterOpenIdConnectConfigOutput) ToK8sClusterOpenIdConnectConfigOutputWithContext(ctx context.Context) K8sClusterOpenIdConnectConfigOutput {
	return o
}

func (o K8sClusterOpenIdConnectConfigOutput) ToK8sClusterOpenIdConnectConfigPtrOutput() K8sClusterOpenIdConnectConfigPtrOutput {
	return o.ToK8sClusterOpenIdConnectConfigPtrOutputWithContext(context.Background())
}

func (o K8sClusterOpenIdConnectConfigOutput) ToK8sClusterOpenIdConnectConfigPtrOutputWithContext(ctx context.Context) K8sClusterOpenIdConnectConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K8sClusterOpenIdConnectConfig) *K8sClusterOpenIdConnectConfig {
		return &v
	}).(K8sClusterOpenIdConnectConfigPtrOutput)
}

func (o K8sClusterOpenIdConnectConfigOutput) ToOutput(ctx context.Context) pulumix.Output[K8sClusterOpenIdConnectConfig] {
	return pulumix.Output[K8sClusterOpenIdConnectConfig]{
		OutputState: o.OutputState,
	}
}

// A client id that all tokens must be issued for
func (o K8sClusterOpenIdConnectConfigOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v K8sClusterOpenIdConnectConfig) string { return v.ClientId }).(pulumi.StringOutput)
}

// JWT claim to use as the user's group
func (o K8sClusterOpenIdConnectConfigOutput) GroupsClaims() pulumi.StringArrayOutput {
	return o.ApplyT(func(v K8sClusterOpenIdConnectConfig) []string { return v.GroupsClaims }).(pulumi.StringArrayOutput)
}

// Prefix prepended to group claims
func (o K8sClusterOpenIdConnectConfigOutput) GroupsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K8sClusterOpenIdConnectConfig) *string { return v.GroupsPrefix }).(pulumi.StringPtrOutput)
}

// URL of the provider which allows the API server to discover public signing keys
func (o K8sClusterOpenIdConnectConfigOutput) IssuerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v K8sClusterOpenIdConnectConfig) string { return v.IssuerUrl }).(pulumi.StringOutput)
}

// Multiple key=value pairs that describes a required claim in the ID Token
func (o K8sClusterOpenIdConnectConfigOutput) RequiredClaims() pulumi.StringArrayOutput {
	return o.ApplyT(func(v K8sClusterOpenIdConnectConfig) []string { return v.RequiredClaims }).(pulumi.StringArrayOutput)
}

// JWT claim to use as the user name
func (o K8sClusterOpenIdConnectConfigOutput) UsernameClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K8sClusterOpenIdConnectConfig) *string { return v.UsernameClaim }).(pulumi.StringPtrOutput)
}

// Prefix prepended to username
func (o K8sClusterOpenIdConnectConfigOutput) UsernamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K8sClusterOpenIdConnectConfig) *string { return v.UsernamePrefix }).(pulumi.StringPtrOutput)
}

type K8sClusterOpenIdConnectConfigPtrOutput struct{ *pulumi.OutputState }

func (K8sClusterOpenIdConnectConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sClusterOpenIdConnectConfig)(nil)).Elem()
}

func (o K8sClusterOpenIdConnectConfigPtrOutput) ToK8sClusterOpenIdConnectConfigPtrOutput() K8sClusterOpenIdConnectConfigPtrOutput {
	return o
}

func (o K8sClusterOpenIdConnectConfigPtrOutput) ToK8sClusterOpenIdConnectConfigPtrOutputWithContext(ctx context.Context) K8sClusterOpenIdConnectConfigPtrOutput {
	return o
}

func (o K8sClusterOpenIdConnectConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*K8sClusterOpenIdConnectConfig] {
	return pulumix.Output[*K8sClusterOpenIdConnectConfig]{
		OutputState: o.OutputState,
	}
}

func (o K8sClusterOpenIdConnectConfigPtrOutput) Elem() K8sClusterOpenIdConnectConfigOutput {
	return o.ApplyT(func(v *K8sClusterOpenIdConnectConfig) K8sClusterOpenIdConnectConfig {
		if v != nil {
			return *v
		}
		var ret K8sClusterOpenIdConnectConfig
		return ret
	}).(K8sClusterOpenIdConnectConfigOutput)
}

// A client id that all tokens must be issued for
func (o K8sClusterOpenIdConnectConfigPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8sClusterOpenIdConnectConfig) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// JWT claim to use as the user's group
func (o K8sClusterOpenIdConnectConfigPtrOutput) GroupsClaims() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *K8sClusterOpenIdConnectConfig) []string {
		if v == nil {
			return nil
		}
		return v.GroupsClaims
	}).(pulumi.StringArrayOutput)
}

// Prefix prepended to group claims
func (o K8sClusterOpenIdConnectConfigPtrOutput) GroupsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8sClusterOpenIdConnectConfig) *string {
		if v == nil {
			return nil
		}
		return v.GroupsPrefix
	}).(pulumi.StringPtrOutput)
}

// URL of the provider which allows the API server to discover public signing keys
func (o K8sClusterOpenIdConnectConfigPtrOutput) IssuerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8sClusterOpenIdConnectConfig) *string {
		if v == nil {
			return nil
		}
		return &v.IssuerUrl
	}).(pulumi.StringPtrOutput)
}

// Multiple key=value pairs that describes a required claim in the ID Token
func (o K8sClusterOpenIdConnectConfigPtrOutput) RequiredClaims() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *K8sClusterOpenIdConnectConfig) []string {
		if v == nil {
			return nil
		}
		return v.RequiredClaims
	}).(pulumi.StringArrayOutput)
}

// JWT claim to use as the user name
func (o K8sClusterOpenIdConnectConfigPtrOutput) UsernameClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8sClusterOpenIdConnectConfig) *string {
		if v == nil {
			return nil
		}
		return v.UsernameClaim
	}).(pulumi.StringPtrOutput)
}

// Prefix prepended to username
func (o K8sClusterOpenIdConnectConfigPtrOutput) UsernamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8sClusterOpenIdConnectConfig) *string {
		if v == nil {
			return nil
		}
		return v.UsernamePrefix
	}).(pulumi.StringPtrOutput)
}

type K8sPoolNode struct {
	// The name for the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	Name *string `pulumi:"name"`
	// The public IPv4.
	PublicIp *string `pulumi:"publicIp"`
	// The public IPv6.
	PublicIpV6 *string `pulumi:"publicIpV6"`
	// The status of the node.
	Status *string `pulumi:"status"`
}

// K8sPoolNodeInput is an input type that accepts K8sPoolNodeArgs and K8sPoolNodeOutput values.
// You can construct a concrete instance of `K8sPoolNodeInput` via:
//
//	K8sPoolNodeArgs{...}
type K8sPoolNodeInput interface {
	pulumi.Input

	ToK8sPoolNodeOutput() K8sPoolNodeOutput
	ToK8sPoolNodeOutputWithContext(context.Context) K8sPoolNodeOutput
}

type K8sPoolNodeArgs struct {
	// The name for the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The public IPv4.
	PublicIp pulumi.StringPtrInput `pulumi:"publicIp"`
	// The public IPv6.
	PublicIpV6 pulumi.StringPtrInput `pulumi:"publicIpV6"`
	// The status of the node.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (K8sPoolNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sPoolNode)(nil)).Elem()
}

func (i K8sPoolNodeArgs) ToK8sPoolNodeOutput() K8sPoolNodeOutput {
	return i.ToK8sPoolNodeOutputWithContext(context.Background())
}

func (i K8sPoolNodeArgs) ToK8sPoolNodeOutputWithContext(ctx context.Context) K8sPoolNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sPoolNodeOutput)
}

func (i K8sPoolNodeArgs) ToOutput(ctx context.Context) pulumix.Output[K8sPoolNode] {
	return pulumix.Output[K8sPoolNode]{
		OutputState: i.ToK8sPoolNodeOutputWithContext(ctx).OutputState,
	}
}

// K8sPoolNodeArrayInput is an input type that accepts K8sPoolNodeArray and K8sPoolNodeArrayOutput values.
// You can construct a concrete instance of `K8sPoolNodeArrayInput` via:
//
//	K8sPoolNodeArray{ K8sPoolNodeArgs{...} }
type K8sPoolNodeArrayInput interface {
	pulumi.Input

	ToK8sPoolNodeArrayOutput() K8sPoolNodeArrayOutput
	ToK8sPoolNodeArrayOutputWithContext(context.Context) K8sPoolNodeArrayOutput
}

type K8sPoolNodeArray []K8sPoolNodeInput

func (K8sPoolNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]K8sPoolNode)(nil)).Elem()
}

func (i K8sPoolNodeArray) ToK8sPoolNodeArrayOutput() K8sPoolNodeArrayOutput {
	return i.ToK8sPoolNodeArrayOutputWithContext(context.Background())
}

func (i K8sPoolNodeArray) ToK8sPoolNodeArrayOutputWithContext(ctx context.Context) K8sPoolNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sPoolNodeArrayOutput)
}

func (i K8sPoolNodeArray) ToOutput(ctx context.Context) pulumix.Output[[]K8sPoolNode] {
	return pulumix.Output[[]K8sPoolNode]{
		OutputState: i.ToK8sPoolNodeArrayOutputWithContext(ctx).OutputState,
	}
}

type K8sPoolNodeOutput struct{ *pulumi.OutputState }

func (K8sPoolNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sPoolNode)(nil)).Elem()
}

func (o K8sPoolNodeOutput) ToK8sPoolNodeOutput() K8sPoolNodeOutput {
	return o
}

func (o K8sPoolNodeOutput) ToK8sPoolNodeOutputWithContext(ctx context.Context) K8sPoolNodeOutput {
	return o
}

func (o K8sPoolNodeOutput) ToOutput(ctx context.Context) pulumix.Output[K8sPoolNode] {
	return pulumix.Output[K8sPoolNode]{
		OutputState: o.OutputState,
	}
}

// The name for the pool.
// > **Important:** Updates to this field will recreate a new resource.
func (o K8sPoolNodeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K8sPoolNode) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The public IPv4.
func (o K8sPoolNodeOutput) PublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K8sPoolNode) *string { return v.PublicIp }).(pulumi.StringPtrOutput)
}

// The public IPv6.
func (o K8sPoolNodeOutput) PublicIpV6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K8sPoolNode) *string { return v.PublicIpV6 }).(pulumi.StringPtrOutput)
}

// The status of the node.
func (o K8sPoolNodeOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K8sPoolNode) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type K8sPoolNodeArrayOutput struct{ *pulumi.OutputState }

func (K8sPoolNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]K8sPoolNode)(nil)).Elem()
}

func (o K8sPoolNodeArrayOutput) ToK8sPoolNodeArrayOutput() K8sPoolNodeArrayOutput {
	return o
}

func (o K8sPoolNodeArrayOutput) ToK8sPoolNodeArrayOutputWithContext(ctx context.Context) K8sPoolNodeArrayOutput {
	return o
}

func (o K8sPoolNodeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]K8sPoolNode] {
	return pulumix.Output[[]K8sPoolNode]{
		OutputState: o.OutputState,
	}
}

func (o K8sPoolNodeArrayOutput) Index(i pulumi.IntInput) K8sPoolNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) K8sPoolNode {
		return vs[0].([]K8sPoolNode)[vs[1].(int)]
	}).(K8sPoolNodeOutput)
}

type K8sPoolUpgradePolicy struct {
	// The maximum number of nodes to be created during the upgrade
	MaxSurge *int `pulumi:"maxSurge"`
	// The maximum number of nodes that can be not ready at the same time
	MaxUnavailable *int `pulumi:"maxUnavailable"`
}

// K8sPoolUpgradePolicyInput is an input type that accepts K8sPoolUpgradePolicyArgs and K8sPoolUpgradePolicyOutput values.
// You can construct a concrete instance of `K8sPoolUpgradePolicyInput` via:
//
//	K8sPoolUpgradePolicyArgs{...}
type K8sPoolUpgradePolicyInput interface {
	pulumi.Input

	ToK8sPoolUpgradePolicyOutput() K8sPoolUpgradePolicyOutput
	ToK8sPoolUpgradePolicyOutputWithContext(context.Context) K8sPoolUpgradePolicyOutput
}

type K8sPoolUpgradePolicyArgs struct {
	// The maximum number of nodes to be created during the upgrade
	MaxSurge pulumi.IntPtrInput `pulumi:"maxSurge"`
	// The maximum number of nodes that can be not ready at the same time
	MaxUnavailable pulumi.IntPtrInput `pulumi:"maxUnavailable"`
}

func (K8sPoolUpgradePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sPoolUpgradePolicy)(nil)).Elem()
}

func (i K8sPoolUpgradePolicyArgs) ToK8sPoolUpgradePolicyOutput() K8sPoolUpgradePolicyOutput {
	return i.ToK8sPoolUpgradePolicyOutputWithContext(context.Background())
}

func (i K8sPoolUpgradePolicyArgs) ToK8sPoolUpgradePolicyOutputWithContext(ctx context.Context) K8sPoolUpgradePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sPoolUpgradePolicyOutput)
}

func (i K8sPoolUpgradePolicyArgs) ToOutput(ctx context.Context) pulumix.Output[K8sPoolUpgradePolicy] {
	return pulumix.Output[K8sPoolUpgradePolicy]{
		OutputState: i.ToK8sPoolUpgradePolicyOutputWithContext(ctx).OutputState,
	}
}

func (i K8sPoolUpgradePolicyArgs) ToK8sPoolUpgradePolicyPtrOutput() K8sPoolUpgradePolicyPtrOutput {
	return i.ToK8sPoolUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i K8sPoolUpgradePolicyArgs) ToK8sPoolUpgradePolicyPtrOutputWithContext(ctx context.Context) K8sPoolUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sPoolUpgradePolicyOutput).ToK8sPoolUpgradePolicyPtrOutputWithContext(ctx)
}

// K8sPoolUpgradePolicyPtrInput is an input type that accepts K8sPoolUpgradePolicyArgs, K8sPoolUpgradePolicyPtr and K8sPoolUpgradePolicyPtrOutput values.
// You can construct a concrete instance of `K8sPoolUpgradePolicyPtrInput` via:
//
//	        K8sPoolUpgradePolicyArgs{...}
//
//	or:
//
//	        nil
type K8sPoolUpgradePolicyPtrInput interface {
	pulumi.Input

	ToK8sPoolUpgradePolicyPtrOutput() K8sPoolUpgradePolicyPtrOutput
	ToK8sPoolUpgradePolicyPtrOutputWithContext(context.Context) K8sPoolUpgradePolicyPtrOutput
}

type k8sPoolUpgradePolicyPtrType K8sPoolUpgradePolicyArgs

func K8sPoolUpgradePolicyPtr(v *K8sPoolUpgradePolicyArgs) K8sPoolUpgradePolicyPtrInput {
	return (*k8sPoolUpgradePolicyPtrType)(v)
}

func (*k8sPoolUpgradePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sPoolUpgradePolicy)(nil)).Elem()
}

func (i *k8sPoolUpgradePolicyPtrType) ToK8sPoolUpgradePolicyPtrOutput() K8sPoolUpgradePolicyPtrOutput {
	return i.ToK8sPoolUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i *k8sPoolUpgradePolicyPtrType) ToK8sPoolUpgradePolicyPtrOutputWithContext(ctx context.Context) K8sPoolUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sPoolUpgradePolicyPtrOutput)
}

func (i *k8sPoolUpgradePolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*K8sPoolUpgradePolicy] {
	return pulumix.Output[*K8sPoolUpgradePolicy]{
		OutputState: i.ToK8sPoolUpgradePolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type K8sPoolUpgradePolicyOutput struct{ *pulumi.OutputState }

func (K8sPoolUpgradePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sPoolUpgradePolicy)(nil)).Elem()
}

func (o K8sPoolUpgradePolicyOutput) ToK8sPoolUpgradePolicyOutput() K8sPoolUpgradePolicyOutput {
	return o
}

func (o K8sPoolUpgradePolicyOutput) ToK8sPoolUpgradePolicyOutputWithContext(ctx context.Context) K8sPoolUpgradePolicyOutput {
	return o
}

func (o K8sPoolUpgradePolicyOutput) ToK8sPoolUpgradePolicyPtrOutput() K8sPoolUpgradePolicyPtrOutput {
	return o.ToK8sPoolUpgradePolicyPtrOutputWithContext(context.Background())
}

func (o K8sPoolUpgradePolicyOutput) ToK8sPoolUpgradePolicyPtrOutputWithContext(ctx context.Context) K8sPoolUpgradePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K8sPoolUpgradePolicy) *K8sPoolUpgradePolicy {
		return &v
	}).(K8sPoolUpgradePolicyPtrOutput)
}

func (o K8sPoolUpgradePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[K8sPoolUpgradePolicy] {
	return pulumix.Output[K8sPoolUpgradePolicy]{
		OutputState: o.OutputState,
	}
}

// The maximum number of nodes to be created during the upgrade
func (o K8sPoolUpgradePolicyOutput) MaxSurge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v K8sPoolUpgradePolicy) *int { return v.MaxSurge }).(pulumi.IntPtrOutput)
}

// The maximum number of nodes that can be not ready at the same time
func (o K8sPoolUpgradePolicyOutput) MaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v K8sPoolUpgradePolicy) *int { return v.MaxUnavailable }).(pulumi.IntPtrOutput)
}

type K8sPoolUpgradePolicyPtrOutput struct{ *pulumi.OutputState }

func (K8sPoolUpgradePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sPoolUpgradePolicy)(nil)).Elem()
}

func (o K8sPoolUpgradePolicyPtrOutput) ToK8sPoolUpgradePolicyPtrOutput() K8sPoolUpgradePolicyPtrOutput {
	return o
}

func (o K8sPoolUpgradePolicyPtrOutput) ToK8sPoolUpgradePolicyPtrOutputWithContext(ctx context.Context) K8sPoolUpgradePolicyPtrOutput {
	return o
}

func (o K8sPoolUpgradePolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*K8sPoolUpgradePolicy] {
	return pulumix.Output[*K8sPoolUpgradePolicy]{
		OutputState: o.OutputState,
	}
}

func (o K8sPoolUpgradePolicyPtrOutput) Elem() K8sPoolUpgradePolicyOutput {
	return o.ApplyT(func(v *K8sPoolUpgradePolicy) K8sPoolUpgradePolicy {
		if v != nil {
			return *v
		}
		var ret K8sPoolUpgradePolicy
		return ret
	}).(K8sPoolUpgradePolicyOutput)
}

// The maximum number of nodes to be created during the upgrade
func (o K8sPoolUpgradePolicyPtrOutput) MaxSurge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *K8sPoolUpgradePolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.IntPtrOutput)
}

// The maximum number of nodes that can be not ready at the same time
func (o K8sPoolUpgradePolicyPtrOutput) MaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *K8sPoolUpgradePolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(pulumi.IntPtrOutput)
}

type LbAclAction struct {
	// Redirect parameters when using an ACL with `redirect` action.
	Redirects []LbAclActionRedirect `pulumi:"redirects"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type string `pulumi:"type"`
}

// LbAclActionInput is an input type that accepts LbAclActionArgs and LbAclActionOutput values.
// You can construct a concrete instance of `LbAclActionInput` via:
//
//	LbAclActionArgs{...}
type LbAclActionInput interface {
	pulumi.Input

	ToLbAclActionOutput() LbAclActionOutput
	ToLbAclActionOutputWithContext(context.Context) LbAclActionOutput
}

type LbAclActionArgs struct {
	// Redirect parameters when using an ACL with `redirect` action.
	Redirects LbAclActionRedirectArrayInput `pulumi:"redirects"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LbAclActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LbAclAction)(nil)).Elem()
}

func (i LbAclActionArgs) ToLbAclActionOutput() LbAclActionOutput {
	return i.ToLbAclActionOutputWithContext(context.Background())
}

func (i LbAclActionArgs) ToLbAclActionOutputWithContext(ctx context.Context) LbAclActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbAclActionOutput)
}

func (i LbAclActionArgs) ToOutput(ctx context.Context) pulumix.Output[LbAclAction] {
	return pulumix.Output[LbAclAction]{
		OutputState: i.ToLbAclActionOutputWithContext(ctx).OutputState,
	}
}

func (i LbAclActionArgs) ToLbAclActionPtrOutput() LbAclActionPtrOutput {
	return i.ToLbAclActionPtrOutputWithContext(context.Background())
}

func (i LbAclActionArgs) ToLbAclActionPtrOutputWithContext(ctx context.Context) LbAclActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbAclActionOutput).ToLbAclActionPtrOutputWithContext(ctx)
}

// LbAclActionPtrInput is an input type that accepts LbAclActionArgs, LbAclActionPtr and LbAclActionPtrOutput values.
// You can construct a concrete instance of `LbAclActionPtrInput` via:
//
//	        LbAclActionArgs{...}
//
//	or:
//
//	        nil
type LbAclActionPtrInput interface {
	pulumi.Input

	ToLbAclActionPtrOutput() LbAclActionPtrOutput
	ToLbAclActionPtrOutputWithContext(context.Context) LbAclActionPtrOutput
}

type lbAclActionPtrType LbAclActionArgs

func LbAclActionPtr(v *LbAclActionArgs) LbAclActionPtrInput {
	return (*lbAclActionPtrType)(v)
}

func (*lbAclActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LbAclAction)(nil)).Elem()
}

func (i *lbAclActionPtrType) ToLbAclActionPtrOutput() LbAclActionPtrOutput {
	return i.ToLbAclActionPtrOutputWithContext(context.Background())
}

func (i *lbAclActionPtrType) ToLbAclActionPtrOutputWithContext(ctx context.Context) LbAclActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbAclActionPtrOutput)
}

func (i *lbAclActionPtrType) ToOutput(ctx context.Context) pulumix.Output[*LbAclAction] {
	return pulumix.Output[*LbAclAction]{
		OutputState: i.ToLbAclActionPtrOutputWithContext(ctx).OutputState,
	}
}

type LbAclActionOutput struct{ *pulumi.OutputState }

func (LbAclActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LbAclAction)(nil)).Elem()
}

func (o LbAclActionOutput) ToLbAclActionOutput() LbAclActionOutput {
	return o
}

func (o LbAclActionOutput) ToLbAclActionOutputWithContext(ctx context.Context) LbAclActionOutput {
	return o
}

func (o LbAclActionOutput) ToLbAclActionPtrOutput() LbAclActionPtrOutput {
	return o.ToLbAclActionPtrOutputWithContext(context.Background())
}

func (o LbAclActionOutput) ToLbAclActionPtrOutputWithContext(ctx context.Context) LbAclActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LbAclAction) *LbAclAction {
		return &v
	}).(LbAclActionPtrOutput)
}

func (o LbAclActionOutput) ToOutput(ctx context.Context) pulumix.Output[LbAclAction] {
	return pulumix.Output[LbAclAction]{
		OutputState: o.OutputState,
	}
}

// Redirect parameters when using an ACL with `redirect` action.
func (o LbAclActionOutput) Redirects() LbAclActionRedirectArrayOutput {
	return o.ApplyT(func(v LbAclAction) []LbAclActionRedirect { return v.Redirects }).(LbAclActionRedirectArrayOutput)
}

// The redirect type. Possible values are: `location` or `scheme`.
func (o LbAclActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LbAclAction) string { return v.Type }).(pulumi.StringOutput)
}

type LbAclActionPtrOutput struct{ *pulumi.OutputState }

func (LbAclActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbAclAction)(nil)).Elem()
}

func (o LbAclActionPtrOutput) ToLbAclActionPtrOutput() LbAclActionPtrOutput {
	return o
}

func (o LbAclActionPtrOutput) ToLbAclActionPtrOutputWithContext(ctx context.Context) LbAclActionPtrOutput {
	return o
}

func (o LbAclActionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LbAclAction] {
	return pulumix.Output[*LbAclAction]{
		OutputState: o.OutputState,
	}
}

func (o LbAclActionPtrOutput) Elem() LbAclActionOutput {
	return o.ApplyT(func(v *LbAclAction) LbAclAction {
		if v != nil {
			return *v
		}
		var ret LbAclAction
		return ret
	}).(LbAclActionOutput)
}

// Redirect parameters when using an ACL with `redirect` action.
func (o LbAclActionPtrOutput) Redirects() LbAclActionRedirectArrayOutput {
	return o.ApplyT(func(v *LbAclAction) []LbAclActionRedirect {
		if v == nil {
			return nil
		}
		return v.Redirects
	}).(LbAclActionRedirectArrayOutput)
}

// The redirect type. Possible values are: `location` or `scheme`.
func (o LbAclActionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbAclAction) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type LbAclActionRedirect struct {
	// The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.
	Code *int `pulumi:"code"`
	// An URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.
	Target *string `pulumi:"target"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type *string `pulumi:"type"`
}

// LbAclActionRedirectInput is an input type that accepts LbAclActionRedirectArgs and LbAclActionRedirectOutput values.
// You can construct a concrete instance of `LbAclActionRedirectInput` via:
//
//	LbAclActionRedirectArgs{...}
type LbAclActionRedirectInput interface {
	pulumi.Input

	ToLbAclActionRedirectOutput() LbAclActionRedirectOutput
	ToLbAclActionRedirectOutputWithContext(context.Context) LbAclActionRedirectOutput
}

type LbAclActionRedirectArgs struct {
	// The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// An URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LbAclActionRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LbAclActionRedirect)(nil)).Elem()
}

func (i LbAclActionRedirectArgs) ToLbAclActionRedirectOutput() LbAclActionRedirectOutput {
	return i.ToLbAclActionRedirectOutputWithContext(context.Background())
}

func (i LbAclActionRedirectArgs) ToLbAclActionRedirectOutputWithContext(ctx context.Context) LbAclActionRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbAclActionRedirectOutput)
}

func (i LbAclActionRedirectArgs) ToOutput(ctx context.Context) pulumix.Output[LbAclActionRedirect] {
	return pulumix.Output[LbAclActionRedirect]{
		OutputState: i.ToLbAclActionRedirectOutputWithContext(ctx).OutputState,
	}
}

// LbAclActionRedirectArrayInput is an input type that accepts LbAclActionRedirectArray and LbAclActionRedirectArrayOutput values.
// You can construct a concrete instance of `LbAclActionRedirectArrayInput` via:
//
//	LbAclActionRedirectArray{ LbAclActionRedirectArgs{...} }
type LbAclActionRedirectArrayInput interface {
	pulumi.Input

	ToLbAclActionRedirectArrayOutput() LbAclActionRedirectArrayOutput
	ToLbAclActionRedirectArrayOutputWithContext(context.Context) LbAclActionRedirectArrayOutput
}

type LbAclActionRedirectArray []LbAclActionRedirectInput

func (LbAclActionRedirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LbAclActionRedirect)(nil)).Elem()
}

func (i LbAclActionRedirectArray) ToLbAclActionRedirectArrayOutput() LbAclActionRedirectArrayOutput {
	return i.ToLbAclActionRedirectArrayOutputWithContext(context.Background())
}

func (i LbAclActionRedirectArray) ToLbAclActionRedirectArrayOutputWithContext(ctx context.Context) LbAclActionRedirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbAclActionRedirectArrayOutput)
}

func (i LbAclActionRedirectArray) ToOutput(ctx context.Context) pulumix.Output[[]LbAclActionRedirect] {
	return pulumix.Output[[]LbAclActionRedirect]{
		OutputState: i.ToLbAclActionRedirectArrayOutputWithContext(ctx).OutputState,
	}
}

type LbAclActionRedirectOutput struct{ *pulumi.OutputState }

func (LbAclActionRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LbAclActionRedirect)(nil)).Elem()
}

func (o LbAclActionRedirectOutput) ToLbAclActionRedirectOutput() LbAclActionRedirectOutput {
	return o
}

func (o LbAclActionRedirectOutput) ToLbAclActionRedirectOutputWithContext(ctx context.Context) LbAclActionRedirectOutput {
	return o
}

func (o LbAclActionRedirectOutput) ToOutput(ctx context.Context) pulumix.Output[LbAclActionRedirect] {
	return pulumix.Output[LbAclActionRedirect]{
		OutputState: o.OutputState,
	}
}

// The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.
func (o LbAclActionRedirectOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LbAclActionRedirect) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// An URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.
func (o LbAclActionRedirectOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbAclActionRedirect) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The redirect type. Possible values are: `location` or `scheme`.
func (o LbAclActionRedirectOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbAclActionRedirect) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type LbAclActionRedirectArrayOutput struct{ *pulumi.OutputState }

func (LbAclActionRedirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LbAclActionRedirect)(nil)).Elem()
}

func (o LbAclActionRedirectArrayOutput) ToLbAclActionRedirectArrayOutput() LbAclActionRedirectArrayOutput {
	return o
}

func (o LbAclActionRedirectArrayOutput) ToLbAclActionRedirectArrayOutputWithContext(ctx context.Context) LbAclActionRedirectArrayOutput {
	return o
}

func (o LbAclActionRedirectArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LbAclActionRedirect] {
	return pulumix.Output[[]LbAclActionRedirect]{
		OutputState: o.OutputState,
	}
}

func (o LbAclActionRedirectArrayOutput) Index(i pulumi.IntInput) LbAclActionRedirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LbAclActionRedirect {
		return vs[0].([]LbAclActionRedirect)[vs[1].(int)]
	}).(LbAclActionRedirectOutput)
}

type LbAclMatch struct {
	// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
	// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
	// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
	HttpFilter       *string `pulumi:"httpFilter"`
	HttpFilterOption *string `pulumi:"httpFilterOption"`
	// A list of possible values to match for the given HTTP filter.
	// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case-insensitive.
	HttpFilterValues []string `pulumi:"httpFilterValues"`
	// If set to `true`, the condition will be of type "unless".
	Invert *bool `pulumi:"invert"`
	// A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
	IpSubnets []string `pulumi:"ipSubnets"`
}

// LbAclMatchInput is an input type that accepts LbAclMatchArgs and LbAclMatchOutput values.
// You can construct a concrete instance of `LbAclMatchInput` via:
//
//	LbAclMatchArgs{...}
type LbAclMatchInput interface {
	pulumi.Input

	ToLbAclMatchOutput() LbAclMatchOutput
	ToLbAclMatchOutputWithContext(context.Context) LbAclMatchOutput
}

type LbAclMatchArgs struct {
	// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
	// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
	// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
	HttpFilter       pulumi.StringPtrInput `pulumi:"httpFilter"`
	HttpFilterOption pulumi.StringPtrInput `pulumi:"httpFilterOption"`
	// A list of possible values to match for the given HTTP filter.
	// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case-insensitive.
	HttpFilterValues pulumi.StringArrayInput `pulumi:"httpFilterValues"`
	// If set to `true`, the condition will be of type "unless".
	Invert pulumi.BoolPtrInput `pulumi:"invert"`
	// A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
	IpSubnets pulumi.StringArrayInput `pulumi:"ipSubnets"`
}

func (LbAclMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LbAclMatch)(nil)).Elem()
}

func (i LbAclMatchArgs) ToLbAclMatchOutput() LbAclMatchOutput {
	return i.ToLbAclMatchOutputWithContext(context.Background())
}

func (i LbAclMatchArgs) ToLbAclMatchOutputWithContext(ctx context.Context) LbAclMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbAclMatchOutput)
}

func (i LbAclMatchArgs) ToOutput(ctx context.Context) pulumix.Output[LbAclMatch] {
	return pulumix.Output[LbAclMatch]{
		OutputState: i.ToLbAclMatchOutputWithContext(ctx).OutputState,
	}
}

func (i LbAclMatchArgs) ToLbAclMatchPtrOutput() LbAclMatchPtrOutput {
	return i.ToLbAclMatchPtrOutputWithContext(context.Background())
}

func (i LbAclMatchArgs) ToLbAclMatchPtrOutputWithContext(ctx context.Context) LbAclMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbAclMatchOutput).ToLbAclMatchPtrOutputWithContext(ctx)
}

// LbAclMatchPtrInput is an input type that accepts LbAclMatchArgs, LbAclMatchPtr and LbAclMatchPtrOutput values.
// You can construct a concrete instance of `LbAclMatchPtrInput` via:
//
//	        LbAclMatchArgs{...}
//
//	or:
//
//	        nil
type LbAclMatchPtrInput interface {
	pulumi.Input

	ToLbAclMatchPtrOutput() LbAclMatchPtrOutput
	ToLbAclMatchPtrOutputWithContext(context.Context) LbAclMatchPtrOutput
}

type lbAclMatchPtrType LbAclMatchArgs

func LbAclMatchPtr(v *LbAclMatchArgs) LbAclMatchPtrInput {
	return (*lbAclMatchPtrType)(v)
}

func (*lbAclMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LbAclMatch)(nil)).Elem()
}

func (i *lbAclMatchPtrType) ToLbAclMatchPtrOutput() LbAclMatchPtrOutput {
	return i.ToLbAclMatchPtrOutputWithContext(context.Background())
}

func (i *lbAclMatchPtrType) ToLbAclMatchPtrOutputWithContext(ctx context.Context) LbAclMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbAclMatchPtrOutput)
}

func (i *lbAclMatchPtrType) ToOutput(ctx context.Context) pulumix.Output[*LbAclMatch] {
	return pulumix.Output[*LbAclMatch]{
		OutputState: i.ToLbAclMatchPtrOutputWithContext(ctx).OutputState,
	}
}

type LbAclMatchOutput struct{ *pulumi.OutputState }

func (LbAclMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LbAclMatch)(nil)).Elem()
}

func (o LbAclMatchOutput) ToLbAclMatchOutput() LbAclMatchOutput {
	return o
}

func (o LbAclMatchOutput) ToLbAclMatchOutputWithContext(ctx context.Context) LbAclMatchOutput {
	return o
}

func (o LbAclMatchOutput) ToLbAclMatchPtrOutput() LbAclMatchPtrOutput {
	return o.ToLbAclMatchPtrOutputWithContext(context.Background())
}

func (o LbAclMatchOutput) ToLbAclMatchPtrOutputWithContext(ctx context.Context) LbAclMatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LbAclMatch) *LbAclMatch {
		return &v
	}).(LbAclMatchPtrOutput)
}

func (o LbAclMatchOutput) ToOutput(ctx context.Context) pulumix.Output[LbAclMatch] {
	return pulumix.Output[LbAclMatch]{
		OutputState: o.OutputState,
	}
}

// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
func (o LbAclMatchOutput) HttpFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbAclMatch) *string { return v.HttpFilter }).(pulumi.StringPtrOutput)
}

func (o LbAclMatchOutput) HttpFilterOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbAclMatch) *string { return v.HttpFilterOption }).(pulumi.StringPtrOutput)
}

// A list of possible values to match for the given HTTP filter.
// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case-insensitive.
func (o LbAclMatchOutput) HttpFilterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LbAclMatch) []string { return v.HttpFilterValues }).(pulumi.StringArrayOutput)
}

// If set to `true`, the condition will be of type "unless".
func (o LbAclMatchOutput) Invert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LbAclMatch) *bool { return v.Invert }).(pulumi.BoolPtrOutput)
}

// A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
func (o LbAclMatchOutput) IpSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LbAclMatch) []string { return v.IpSubnets }).(pulumi.StringArrayOutput)
}

type LbAclMatchPtrOutput struct{ *pulumi.OutputState }

func (LbAclMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbAclMatch)(nil)).Elem()
}

func (o LbAclMatchPtrOutput) ToLbAclMatchPtrOutput() LbAclMatchPtrOutput {
	return o
}

func (o LbAclMatchPtrOutput) ToLbAclMatchPtrOutputWithContext(ctx context.Context) LbAclMatchPtrOutput {
	return o
}

func (o LbAclMatchPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LbAclMatch] {
	return pulumix.Output[*LbAclMatch]{
		OutputState: o.OutputState,
	}
}

func (o LbAclMatchPtrOutput) Elem() LbAclMatchOutput {
	return o.ApplyT(func(v *LbAclMatch) LbAclMatch {
		if v != nil {
			return *v
		}
		var ret LbAclMatch
		return ret
	}).(LbAclMatchOutput)
}

// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
func (o LbAclMatchPtrOutput) HttpFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbAclMatch) *string {
		if v == nil {
			return nil
		}
		return v.HttpFilter
	}).(pulumi.StringPtrOutput)
}

func (o LbAclMatchPtrOutput) HttpFilterOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbAclMatch) *string {
		if v == nil {
			return nil
		}
		return v.HttpFilterOption
	}).(pulumi.StringPtrOutput)
}

// A list of possible values to match for the given HTTP filter.
// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case-insensitive.
func (o LbAclMatchPtrOutput) HttpFilterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LbAclMatch) []string {
		if v == nil {
			return nil
		}
		return v.HttpFilterValues
	}).(pulumi.StringArrayOutput)
}

// If set to `true`, the condition will be of type "unless".
func (o LbAclMatchPtrOutput) Invert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LbAclMatch) *bool {
		if v == nil {
			return nil
		}
		return v.Invert
	}).(pulumi.BoolPtrOutput)
}

// A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
func (o LbAclMatchPtrOutput) IpSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LbAclMatch) []string {
		if v == nil {
			return nil
		}
		return v.IpSubnets
	}).(pulumi.StringArrayOutput)
}

type LbBackendHealthCheckHttp struct {
	// The expected HTTP status code.
	Code *int `pulumi:"code"`
	// The HTTP host header to use for HC requests.
	HostHeader *string `pulumi:"hostHeader"`
	// The HTTP method to use for HC requests.
	Method *string `pulumi:"method"`
	// The HTTPS endpoint URL to call for HC requests.
	Uri string `pulumi:"uri"`
}

// LbBackendHealthCheckHttpInput is an input type that accepts LbBackendHealthCheckHttpArgs and LbBackendHealthCheckHttpOutput values.
// You can construct a concrete instance of `LbBackendHealthCheckHttpInput` via:
//
//	LbBackendHealthCheckHttpArgs{...}
type LbBackendHealthCheckHttpInput interface {
	pulumi.Input

	ToLbBackendHealthCheckHttpOutput() LbBackendHealthCheckHttpOutput
	ToLbBackendHealthCheckHttpOutputWithContext(context.Context) LbBackendHealthCheckHttpOutput
}

type LbBackendHealthCheckHttpArgs struct {
	// The expected HTTP status code.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// The HTTP host header to use for HC requests.
	HostHeader pulumi.StringPtrInput `pulumi:"hostHeader"`
	// The HTTP method to use for HC requests.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// The HTTPS endpoint URL to call for HC requests.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (LbBackendHealthCheckHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LbBackendHealthCheckHttp)(nil)).Elem()
}

func (i LbBackendHealthCheckHttpArgs) ToLbBackendHealthCheckHttpOutput() LbBackendHealthCheckHttpOutput {
	return i.ToLbBackendHealthCheckHttpOutputWithContext(context.Background())
}

func (i LbBackendHealthCheckHttpArgs) ToLbBackendHealthCheckHttpOutputWithContext(ctx context.Context) LbBackendHealthCheckHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbBackendHealthCheckHttpOutput)
}

func (i LbBackendHealthCheckHttpArgs) ToOutput(ctx context.Context) pulumix.Output[LbBackendHealthCheckHttp] {
	return pulumix.Output[LbBackendHealthCheckHttp]{
		OutputState: i.ToLbBackendHealthCheckHttpOutputWithContext(ctx).OutputState,
	}
}

func (i LbBackendHealthCheckHttpArgs) ToLbBackendHealthCheckHttpPtrOutput() LbBackendHealthCheckHttpPtrOutput {
	return i.ToLbBackendHealthCheckHttpPtrOutputWithContext(context.Background())
}

func (i LbBackendHealthCheckHttpArgs) ToLbBackendHealthCheckHttpPtrOutputWithContext(ctx context.Context) LbBackendHealthCheckHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbBackendHealthCheckHttpOutput).ToLbBackendHealthCheckHttpPtrOutputWithContext(ctx)
}

// LbBackendHealthCheckHttpPtrInput is an input type that accepts LbBackendHealthCheckHttpArgs, LbBackendHealthCheckHttpPtr and LbBackendHealthCheckHttpPtrOutput values.
// You can construct a concrete instance of `LbBackendHealthCheckHttpPtrInput` via:
//
//	        LbBackendHealthCheckHttpArgs{...}
//
//	or:
//
//	        nil
type LbBackendHealthCheckHttpPtrInput interface {
	pulumi.Input

	ToLbBackendHealthCheckHttpPtrOutput() LbBackendHealthCheckHttpPtrOutput
	ToLbBackendHealthCheckHttpPtrOutputWithContext(context.Context) LbBackendHealthCheckHttpPtrOutput
}

type lbBackendHealthCheckHttpPtrType LbBackendHealthCheckHttpArgs

func LbBackendHealthCheckHttpPtr(v *LbBackendHealthCheckHttpArgs) LbBackendHealthCheckHttpPtrInput {
	return (*lbBackendHealthCheckHttpPtrType)(v)
}

func (*lbBackendHealthCheckHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LbBackendHealthCheckHttp)(nil)).Elem()
}

func (i *lbBackendHealthCheckHttpPtrType) ToLbBackendHealthCheckHttpPtrOutput() LbBackendHealthCheckHttpPtrOutput {
	return i.ToLbBackendHealthCheckHttpPtrOutputWithContext(context.Background())
}

func (i *lbBackendHealthCheckHttpPtrType) ToLbBackendHealthCheckHttpPtrOutputWithContext(ctx context.Context) LbBackendHealthCheckHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbBackendHealthCheckHttpPtrOutput)
}

func (i *lbBackendHealthCheckHttpPtrType) ToOutput(ctx context.Context) pulumix.Output[*LbBackendHealthCheckHttp] {
	return pulumix.Output[*LbBackendHealthCheckHttp]{
		OutputState: i.ToLbBackendHealthCheckHttpPtrOutputWithContext(ctx).OutputState,
	}
}

type LbBackendHealthCheckHttpOutput struct{ *pulumi.OutputState }

func (LbBackendHealthCheckHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LbBackendHealthCheckHttp)(nil)).Elem()
}

func (o LbBackendHealthCheckHttpOutput) ToLbBackendHealthCheckHttpOutput() LbBackendHealthCheckHttpOutput {
	return o
}

func (o LbBackendHealthCheckHttpOutput) ToLbBackendHealthCheckHttpOutputWithContext(ctx context.Context) LbBackendHealthCheckHttpOutput {
	return o
}

func (o LbBackendHealthCheckHttpOutput) ToLbBackendHealthCheckHttpPtrOutput() LbBackendHealthCheckHttpPtrOutput {
	return o.ToLbBackendHealthCheckHttpPtrOutputWithContext(context.Background())
}

func (o LbBackendHealthCheckHttpOutput) ToLbBackendHealthCheckHttpPtrOutputWithContext(ctx context.Context) LbBackendHealthCheckHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LbBackendHealthCheckHttp) *LbBackendHealthCheckHttp {
		return &v
	}).(LbBackendHealthCheckHttpPtrOutput)
}

func (o LbBackendHealthCheckHttpOutput) ToOutput(ctx context.Context) pulumix.Output[LbBackendHealthCheckHttp] {
	return pulumix.Output[LbBackendHealthCheckHttp]{
		OutputState: o.OutputState,
	}
}

// The expected HTTP status code.
func (o LbBackendHealthCheckHttpOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LbBackendHealthCheckHttp) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// The HTTP host header to use for HC requests.
func (o LbBackendHealthCheckHttpOutput) HostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbBackendHealthCheckHttp) *string { return v.HostHeader }).(pulumi.StringPtrOutput)
}

// The HTTP method to use for HC requests.
func (o LbBackendHealthCheckHttpOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbBackendHealthCheckHttp) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The HTTPS endpoint URL to call for HC requests.
func (o LbBackendHealthCheckHttpOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v LbBackendHealthCheckHttp) string { return v.Uri }).(pulumi.StringOutput)
}

type LbBackendHealthCheckHttpPtrOutput struct{ *pulumi.OutputState }

func (LbBackendHealthCheckHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbBackendHealthCheckHttp)(nil)).Elem()
}

func (o LbBackendHealthCheckHttpPtrOutput) ToLbBackendHealthCheckHttpPtrOutput() LbBackendHealthCheckHttpPtrOutput {
	return o
}

func (o LbBackendHealthCheckHttpPtrOutput) ToLbBackendHealthCheckHttpPtrOutputWithContext(ctx context.Context) LbBackendHealthCheckHttpPtrOutput {
	return o
}

func (o LbBackendHealthCheckHttpPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LbBackendHealthCheckHttp] {
	return pulumix.Output[*LbBackendHealthCheckHttp]{
		OutputState: o.OutputState,
	}
}

func (o LbBackendHealthCheckHttpPtrOutput) Elem() LbBackendHealthCheckHttpOutput {
	return o.ApplyT(func(v *LbBackendHealthCheckHttp) LbBackendHealthCheckHttp {
		if v != nil {
			return *v
		}
		var ret LbBackendHealthCheckHttp
		return ret
	}).(LbBackendHealthCheckHttpOutput)
}

// The expected HTTP status code.
func (o LbBackendHealthCheckHttpPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LbBackendHealthCheckHttp) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// The HTTP host header to use for HC requests.
func (o LbBackendHealthCheckHttpPtrOutput) HostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackendHealthCheckHttp) *string {
		if v == nil {
			return nil
		}
		return v.HostHeader
	}).(pulumi.StringPtrOutput)
}

// The HTTP method to use for HC requests.
func (o LbBackendHealthCheckHttpPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackendHealthCheckHttp) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// The HTTPS endpoint URL to call for HC requests.
func (o LbBackendHealthCheckHttpPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackendHealthCheckHttp) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type LbBackendHealthCheckHttps struct {
	// The expected HTTP status code.
	Code *int `pulumi:"code"`
	// The HTTP host header to use for HC requests.
	HostHeader *string `pulumi:"hostHeader"`
	// The HTTP method to use for HC requests.
	Method *string `pulumi:"method"`
	// The SNI to use for HC requests over SSL.
	Sni *string `pulumi:"sni"`
	// The HTTPS endpoint URL to call for HC requests.
	Uri string `pulumi:"uri"`
}

// LbBackendHealthCheckHttpsInput is an input type that accepts LbBackendHealthCheckHttpsArgs and LbBackendHealthCheckHttpsOutput values.
// You can construct a concrete instance of `LbBackendHealthCheckHttpsInput` via:
//
//	LbBackendHealthCheckHttpsArgs{...}
type LbBackendHealthCheckHttpsInput interface {
	pulumi.Input

	ToLbBackendHealthCheckHttpsOutput() LbBackendHealthCheckHttpsOutput
	ToLbBackendHealthCheckHttpsOutputWithContext(context.Context) LbBackendHealthCheckHttpsOutput
}

type LbBackendHealthCheckHttpsArgs struct {
	// The expected HTTP status code.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// The HTTP host header to use for HC requests.
	HostHeader pulumi.StringPtrInput `pulumi:"hostHeader"`
	// The HTTP method to use for HC requests.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// The SNI to use for HC requests over SSL.
	Sni pulumi.StringPtrInput `pulumi:"sni"`
	// The HTTPS endpoint URL to call for HC requests.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (LbBackendHealthCheckHttpsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LbBackendHealthCheckHttps)(nil)).Elem()
}

func (i LbBackendHealthCheckHttpsArgs) ToLbBackendHealthCheckHttpsOutput() LbBackendHealthCheckHttpsOutput {
	return i.ToLbBackendHealthCheckHttpsOutputWithContext(context.Background())
}

func (i LbBackendHealthCheckHttpsArgs) ToLbBackendHealthCheckHttpsOutputWithContext(ctx context.Context) LbBackendHealthCheckHttpsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbBackendHealthCheckHttpsOutput)
}

func (i LbBackendHealthCheckHttpsArgs) ToOutput(ctx context.Context) pulumix.Output[LbBackendHealthCheckHttps] {
	return pulumix.Output[LbBackendHealthCheckHttps]{
		OutputState: i.ToLbBackendHealthCheckHttpsOutputWithContext(ctx).OutputState,
	}
}

func (i LbBackendHealthCheckHttpsArgs) ToLbBackendHealthCheckHttpsPtrOutput() LbBackendHealthCheckHttpsPtrOutput {
	return i.ToLbBackendHealthCheckHttpsPtrOutputWithContext(context.Background())
}

func (i LbBackendHealthCheckHttpsArgs) ToLbBackendHealthCheckHttpsPtrOutputWithContext(ctx context.Context) LbBackendHealthCheckHttpsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbBackendHealthCheckHttpsOutput).ToLbBackendHealthCheckHttpsPtrOutputWithContext(ctx)
}

// LbBackendHealthCheckHttpsPtrInput is an input type that accepts LbBackendHealthCheckHttpsArgs, LbBackendHealthCheckHttpsPtr and LbBackendHealthCheckHttpsPtrOutput values.
// You can construct a concrete instance of `LbBackendHealthCheckHttpsPtrInput` via:
//
//	        LbBackendHealthCheckHttpsArgs{...}
//
//	or:
//
//	        nil
type LbBackendHealthCheckHttpsPtrInput interface {
	pulumi.Input

	ToLbBackendHealthCheckHttpsPtrOutput() LbBackendHealthCheckHttpsPtrOutput
	ToLbBackendHealthCheckHttpsPtrOutputWithContext(context.Context) LbBackendHealthCheckHttpsPtrOutput
}

type lbBackendHealthCheckHttpsPtrType LbBackendHealthCheckHttpsArgs

func LbBackendHealthCheckHttpsPtr(v *LbBackendHealthCheckHttpsArgs) LbBackendHealthCheckHttpsPtrInput {
	return (*lbBackendHealthCheckHttpsPtrType)(v)
}

func (*lbBackendHealthCheckHttpsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LbBackendHealthCheckHttps)(nil)).Elem()
}

func (i *lbBackendHealthCheckHttpsPtrType) ToLbBackendHealthCheckHttpsPtrOutput() LbBackendHealthCheckHttpsPtrOutput {
	return i.ToLbBackendHealthCheckHttpsPtrOutputWithContext(context.Background())
}

func (i *lbBackendHealthCheckHttpsPtrType) ToLbBackendHealthCheckHttpsPtrOutputWithContext(ctx context.Context) LbBackendHealthCheckHttpsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbBackendHealthCheckHttpsPtrOutput)
}

func (i *lbBackendHealthCheckHttpsPtrType) ToOutput(ctx context.Context) pulumix.Output[*LbBackendHealthCheckHttps] {
	return pulumix.Output[*LbBackendHealthCheckHttps]{
		OutputState: i.ToLbBackendHealthCheckHttpsPtrOutputWithContext(ctx).OutputState,
	}
}

type LbBackendHealthCheckHttpsOutput struct{ *pulumi.OutputState }

func (LbBackendHealthCheckHttpsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LbBackendHealthCheckHttps)(nil)).Elem()
}

func (o LbBackendHealthCheckHttpsOutput) ToLbBackendHealthCheckHttpsOutput() LbBackendHealthCheckHttpsOutput {
	return o
}

func (o LbBackendHealthCheckHttpsOutput) ToLbBackendHealthCheckHttpsOutputWithContext(ctx context.Context) LbBackendHealthCheckHttpsOutput {
	return o
}

func (o LbBackendHealthCheckHttpsOutput) ToLbBackendHealthCheckHttpsPtrOutput() LbBackendHealthCheckHttpsPtrOutput {
	return o.ToLbBackendHealthCheckHttpsPtrOutputWithContext(context.Background())
}

func (o LbBackendHealthCheckHttpsOutput) ToLbBackendHealthCheckHttpsPtrOutputWithContext(ctx context.Context) LbBackendHealthCheckHttpsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LbBackendHealthCheckHttps) *LbBackendHealthCheckHttps {
		return &v
	}).(LbBackendHealthCheckHttpsPtrOutput)
}

func (o LbBackendHealthCheckHttpsOutput) ToOutput(ctx context.Context) pulumix.Output[LbBackendHealthCheckHttps] {
	return pulumix.Output[LbBackendHealthCheckHttps]{
		OutputState: o.OutputState,
	}
}

// The expected HTTP status code.
func (o LbBackendHealthCheckHttpsOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LbBackendHealthCheckHttps) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// The HTTP host header to use for HC requests.
func (o LbBackendHealthCheckHttpsOutput) HostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbBackendHealthCheckHttps) *string { return v.HostHeader }).(pulumi.StringPtrOutput)
}

// The HTTP method to use for HC requests.
func (o LbBackendHealthCheckHttpsOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbBackendHealthCheckHttps) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The SNI to use for HC requests over SSL.
func (o LbBackendHealthCheckHttpsOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbBackendHealthCheckHttps) *string { return v.Sni }).(pulumi.StringPtrOutput)
}

// The HTTPS endpoint URL to call for HC requests.
func (o LbBackendHealthCheckHttpsOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v LbBackendHealthCheckHttps) string { return v.Uri }).(pulumi.StringOutput)
}

type LbBackendHealthCheckHttpsPtrOutput struct{ *pulumi.OutputState }

func (LbBackendHealthCheckHttpsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbBackendHealthCheckHttps)(nil)).Elem()
}

func (o LbBackendHealthCheckHttpsPtrOutput) ToLbBackendHealthCheckHttpsPtrOutput() LbBackendHealthCheckHttpsPtrOutput {
	return o
}

func (o LbBackendHealthCheckHttpsPtrOutput) ToLbBackendHealthCheckHttpsPtrOutputWithContext(ctx context.Context) LbBackendHealthCheckHttpsPtrOutput {
	return o
}

func (o LbBackendHealthCheckHttpsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LbBackendHealthCheckHttps] {
	return pulumix.Output[*LbBackendHealthCheckHttps]{
		OutputState: o.OutputState,
	}
}

func (o LbBackendHealthCheckHttpsPtrOutput) Elem() LbBackendHealthCheckHttpsOutput {
	return o.ApplyT(func(v *LbBackendHealthCheckHttps) LbBackendHealthCheckHttps {
		if v != nil {
			return *v
		}
		var ret LbBackendHealthCheckHttps
		return ret
	}).(LbBackendHealthCheckHttpsOutput)
}

// The expected HTTP status code.
func (o LbBackendHealthCheckHttpsPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LbBackendHealthCheckHttps) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// The HTTP host header to use for HC requests.
func (o LbBackendHealthCheckHttpsPtrOutput) HostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackendHealthCheckHttps) *string {
		if v == nil {
			return nil
		}
		return v.HostHeader
	}).(pulumi.StringPtrOutput)
}

// The HTTP method to use for HC requests.
func (o LbBackendHealthCheckHttpsPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackendHealthCheckHttps) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// The SNI to use for HC requests over SSL.
func (o LbBackendHealthCheckHttpsPtrOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackendHealthCheckHttps) *string {
		if v == nil {
			return nil
		}
		return v.Sni
	}).(pulumi.StringPtrOutput)
}

// The HTTPS endpoint URL to call for HC requests.
func (o LbBackendHealthCheckHttpsPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackendHealthCheckHttps) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type LbBackendHealthCheckTcp struct {
}

// LbBackendHealthCheckTcpInput is an input type that accepts LbBackendHealthCheckTcpArgs and LbBackendHealthCheckTcpOutput values.
// You can construct a concrete instance of `LbBackendHealthCheckTcpInput` via:
//
//	LbBackendHealthCheckTcpArgs{...}
type LbBackendHealthCheckTcpInput interface {
	pulumi.Input

	ToLbBackendHealthCheckTcpOutput() LbBackendHealthCheckTcpOutput
	ToLbBackendHealthCheckTcpOutputWithContext(context.Context) LbBackendHealthCheckTcpOutput
}

type LbBackendHealthCheckTcpArgs struct {
}

func (LbBackendHealthCheckTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LbBackendHealthCheckTcp)(nil)).Elem()
}

func (i LbBackendHealthCheckTcpArgs) ToLbBackendHealthCheckTcpOutput() LbBackendHealthCheckTcpOutput {
	return i.ToLbBackendHealthCheckTcpOutputWithContext(context.Background())
}

func (i LbBackendHealthCheckTcpArgs) ToLbBackendHealthCheckTcpOutputWithContext(ctx context.Context) LbBackendHealthCheckTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbBackendHealthCheckTcpOutput)
}

func (i LbBackendHealthCheckTcpArgs) ToOutput(ctx context.Context) pulumix.Output[LbBackendHealthCheckTcp] {
	return pulumix.Output[LbBackendHealthCheckTcp]{
		OutputState: i.ToLbBackendHealthCheckTcpOutputWithContext(ctx).OutputState,
	}
}

func (i LbBackendHealthCheckTcpArgs) ToLbBackendHealthCheckTcpPtrOutput() LbBackendHealthCheckTcpPtrOutput {
	return i.ToLbBackendHealthCheckTcpPtrOutputWithContext(context.Background())
}

func (i LbBackendHealthCheckTcpArgs) ToLbBackendHealthCheckTcpPtrOutputWithContext(ctx context.Context) LbBackendHealthCheckTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbBackendHealthCheckTcpOutput).ToLbBackendHealthCheckTcpPtrOutputWithContext(ctx)
}

// LbBackendHealthCheckTcpPtrInput is an input type that accepts LbBackendHealthCheckTcpArgs, LbBackendHealthCheckTcpPtr and LbBackendHealthCheckTcpPtrOutput values.
// You can construct a concrete instance of `LbBackendHealthCheckTcpPtrInput` via:
//
//	        LbBackendHealthCheckTcpArgs{...}
//
//	or:
//
//	        nil
type LbBackendHealthCheckTcpPtrInput interface {
	pulumi.Input

	ToLbBackendHealthCheckTcpPtrOutput() LbBackendHealthCheckTcpPtrOutput
	ToLbBackendHealthCheckTcpPtrOutputWithContext(context.Context) LbBackendHealthCheckTcpPtrOutput
}

type lbBackendHealthCheckTcpPtrType LbBackendHealthCheckTcpArgs

func LbBackendHealthCheckTcpPtr(v *LbBackendHealthCheckTcpArgs) LbBackendHealthCheckTcpPtrInput {
	return (*lbBackendHealthCheckTcpPtrType)(v)
}

func (*lbBackendHealthCheckTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LbBackendHealthCheckTcp)(nil)).Elem()
}

func (i *lbBackendHealthCheckTcpPtrType) ToLbBackendHealthCheckTcpPtrOutput() LbBackendHealthCheckTcpPtrOutput {
	return i.ToLbBackendHealthCheckTcpPtrOutputWithContext(context.Background())
}

func (i *lbBackendHealthCheckTcpPtrType) ToLbBackendHealthCheckTcpPtrOutputWithContext(ctx context.Context) LbBackendHealthCheckTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbBackendHealthCheckTcpPtrOutput)
}

func (i *lbBackendHealthCheckTcpPtrType) ToOutput(ctx context.Context) pulumix.Output[*LbBackendHealthCheckTcp] {
	return pulumix.Output[*LbBackendHealthCheckTcp]{
		OutputState: i.ToLbBackendHealthCheckTcpPtrOutputWithContext(ctx).OutputState,
	}
}

type LbBackendHealthCheckTcpOutput struct{ *pulumi.OutputState }

func (LbBackendHealthCheckTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LbBackendHealthCheckTcp)(nil)).Elem()
}

func (o LbBackendHealthCheckTcpOutput) ToLbBackendHealthCheckTcpOutput() LbBackendHealthCheckTcpOutput {
	return o
}

func (o LbBackendHealthCheckTcpOutput) ToLbBackendHealthCheckTcpOutputWithContext(ctx context.Context) LbBackendHealthCheckTcpOutput {
	return o
}

func (o LbBackendHealthCheckTcpOutput) ToLbBackendHealthCheckTcpPtrOutput() LbBackendHealthCheckTcpPtrOutput {
	return o.ToLbBackendHealthCheckTcpPtrOutputWithContext(context.Background())
}

func (o LbBackendHealthCheckTcpOutput) ToLbBackendHealthCheckTcpPtrOutputWithContext(ctx context.Context) LbBackendHealthCheckTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LbBackendHealthCheckTcp) *LbBackendHealthCheckTcp {
		return &v
	}).(LbBackendHealthCheckTcpPtrOutput)
}

func (o LbBackendHealthCheckTcpOutput) ToOutput(ctx context.Context) pulumix.Output[LbBackendHealthCheckTcp] {
	return pulumix.Output[LbBackendHealthCheckTcp]{
		OutputState: o.OutputState,
	}
}

type LbBackendHealthCheckTcpPtrOutput struct{ *pulumi.OutputState }

func (LbBackendHealthCheckTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbBackendHealthCheckTcp)(nil)).Elem()
}

func (o LbBackendHealthCheckTcpPtrOutput) ToLbBackendHealthCheckTcpPtrOutput() LbBackendHealthCheckTcpPtrOutput {
	return o
}

func (o LbBackendHealthCheckTcpPtrOutput) ToLbBackendHealthCheckTcpPtrOutputWithContext(ctx context.Context) LbBackendHealthCheckTcpPtrOutput {
	return o
}

func (o LbBackendHealthCheckTcpPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LbBackendHealthCheckTcp] {
	return pulumix.Output[*LbBackendHealthCheckTcp]{
		OutputState: o.OutputState,
	}
}

func (o LbBackendHealthCheckTcpPtrOutput) Elem() LbBackendHealthCheckTcpOutput {
	return o.ApplyT(func(v *LbBackendHealthCheckTcp) LbBackendHealthCheckTcp {
		if v != nil {
			return *v
		}
		var ret LbBackendHealthCheckTcp
		return ret
	}).(LbBackendHealthCheckTcpOutput)
}

type LbCertificateCustomCertificate struct {
	// Full PEM-formatted certificate chain.
	//
	// > **Important:** Updates to `customCertificate` will recreate the load-balancer certificate.
	CertificateChain string `pulumi:"certificateChain"`
}

// LbCertificateCustomCertificateInput is an input type that accepts LbCertificateCustomCertificateArgs and LbCertificateCustomCertificateOutput values.
// You can construct a concrete instance of `LbCertificateCustomCertificateInput` via:
//
//	LbCertificateCustomCertificateArgs{...}
type LbCertificateCustomCertificateInput interface {
	pulumi.Input

	ToLbCertificateCustomCertificateOutput() LbCertificateCustomCertificateOutput
	ToLbCertificateCustomCertificateOutputWithContext(context.Context) LbCertificateCustomCertificateOutput
}

type LbCertificateCustomCertificateArgs struct {
	// Full PEM-formatted certificate chain.
	//
	// > **Important:** Updates to `customCertificate` will recreate the load-balancer certificate.
	CertificateChain pulumi.StringInput `pulumi:"certificateChain"`
}

func (LbCertificateCustomCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LbCertificateCustomCertificate)(nil)).Elem()
}

func (i LbCertificateCustomCertificateArgs) ToLbCertificateCustomCertificateOutput() LbCertificateCustomCertificateOutput {
	return i.ToLbCertificateCustomCertificateOutputWithContext(context.Background())
}

func (i LbCertificateCustomCertificateArgs) ToLbCertificateCustomCertificateOutputWithContext(ctx context.Context) LbCertificateCustomCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbCertificateCustomCertificateOutput)
}

func (i LbCertificateCustomCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[LbCertificateCustomCertificate] {
	return pulumix.Output[LbCertificateCustomCertificate]{
		OutputState: i.ToLbCertificateCustomCertificateOutputWithContext(ctx).OutputState,
	}
}

func (i LbCertificateCustomCertificateArgs) ToLbCertificateCustomCertificatePtrOutput() LbCertificateCustomCertificatePtrOutput {
	return i.ToLbCertificateCustomCertificatePtrOutputWithContext(context.Background())
}

func (i LbCertificateCustomCertificateArgs) ToLbCertificateCustomCertificatePtrOutputWithContext(ctx context.Context) LbCertificateCustomCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbCertificateCustomCertificateOutput).ToLbCertificateCustomCertificatePtrOutputWithContext(ctx)
}

// LbCertificateCustomCertificatePtrInput is an input type that accepts LbCertificateCustomCertificateArgs, LbCertificateCustomCertificatePtr and LbCertificateCustomCertificatePtrOutput values.
// You can construct a concrete instance of `LbCertificateCustomCertificatePtrInput` via:
//
//	        LbCertificateCustomCertificateArgs{...}
//
//	or:
//
//	        nil
type LbCertificateCustomCertificatePtrInput interface {
	pulumi.Input

	ToLbCertificateCustomCertificatePtrOutput() LbCertificateCustomCertificatePtrOutput
	ToLbCertificateCustomCertificatePtrOutputWithContext(context.Context) LbCertificateCustomCertificatePtrOutput
}

type lbCertificateCustomCertificatePtrType LbCertificateCustomCertificateArgs

func LbCertificateCustomCertificatePtr(v *LbCertificateCustomCertificateArgs) LbCertificateCustomCertificatePtrInput {
	return (*lbCertificateCustomCertificatePtrType)(v)
}

func (*lbCertificateCustomCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LbCertificateCustomCertificate)(nil)).Elem()
}

func (i *lbCertificateCustomCertificatePtrType) ToLbCertificateCustomCertificatePtrOutput() LbCertificateCustomCertificatePtrOutput {
	return i.ToLbCertificateCustomCertificatePtrOutputWithContext(context.Background())
}

func (i *lbCertificateCustomCertificatePtrType) ToLbCertificateCustomCertificatePtrOutputWithContext(ctx context.Context) LbCertificateCustomCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbCertificateCustomCertificatePtrOutput)
}

func (i *lbCertificateCustomCertificatePtrType) ToOutput(ctx context.Context) pulumix.Output[*LbCertificateCustomCertificate] {
	return pulumix.Output[*LbCertificateCustomCertificate]{
		OutputState: i.ToLbCertificateCustomCertificatePtrOutputWithContext(ctx).OutputState,
	}
}

type LbCertificateCustomCertificateOutput struct{ *pulumi.OutputState }

func (LbCertificateCustomCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LbCertificateCustomCertificate)(nil)).Elem()
}

func (o LbCertificateCustomCertificateOutput) ToLbCertificateCustomCertificateOutput() LbCertificateCustomCertificateOutput {
	return o
}

func (o LbCertificateCustomCertificateOutput) ToLbCertificateCustomCertificateOutputWithContext(ctx context.Context) LbCertificateCustomCertificateOutput {
	return o
}

func (o LbCertificateCustomCertificateOutput) ToLbCertificateCustomCertificatePtrOutput() LbCertificateCustomCertificatePtrOutput {
	return o.ToLbCertificateCustomCertificatePtrOutputWithContext(context.Background())
}

func (o LbCertificateCustomCertificateOutput) ToLbCertificateCustomCertificatePtrOutputWithContext(ctx context.Context) LbCertificateCustomCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LbCertificateCustomCertificate) *LbCertificateCustomCertificate {
		return &v
	}).(LbCertificateCustomCertificatePtrOutput)
}

func (o LbCertificateCustomCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[LbCertificateCustomCertificate] {
	return pulumix.Output[LbCertificateCustomCertificate]{
		OutputState: o.OutputState,
	}
}

// Full PEM-formatted certificate chain.
//
// > **Important:** Updates to `customCertificate` will recreate the load-balancer certificate.
func (o LbCertificateCustomCertificateOutput) CertificateChain() pulumi.StringOutput {
	return o.ApplyT(func(v LbCertificateCustomCertificate) string { return v.CertificateChain }).(pulumi.StringOutput)
}

type LbCertificateCustomCertificatePtrOutput struct{ *pulumi.OutputState }

func (LbCertificateCustomCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbCertificateCustomCertificate)(nil)).Elem()
}

func (o LbCertificateCustomCertificatePtrOutput) ToLbCertificateCustomCertificatePtrOutput() LbCertificateCustomCertificatePtrOutput {
	return o
}

func (o LbCertificateCustomCertificatePtrOutput) ToLbCertificateCustomCertificatePtrOutputWithContext(ctx context.Context) LbCertificateCustomCertificatePtrOutput {
	return o
}

func (o LbCertificateCustomCertificatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LbCertificateCustomCertificate] {
	return pulumix.Output[*LbCertificateCustomCertificate]{
		OutputState: o.OutputState,
	}
}

func (o LbCertificateCustomCertificatePtrOutput) Elem() LbCertificateCustomCertificateOutput {
	return o.ApplyT(func(v *LbCertificateCustomCertificate) LbCertificateCustomCertificate {
		if v != nil {
			return *v
		}
		var ret LbCertificateCustomCertificate
		return ret
	}).(LbCertificateCustomCertificateOutput)
}

// Full PEM-formatted certificate chain.
//
// > **Important:** Updates to `customCertificate` will recreate the load-balancer certificate.
func (o LbCertificateCustomCertificatePtrOutput) CertificateChain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbCertificateCustomCertificate) *string {
		if v == nil {
			return nil
		}
		return &v.CertificateChain
	}).(pulumi.StringPtrOutput)
}

type LbCertificateLetsencrypt struct {
	// Main domain of the certificate. A new certificate will be created if this field is changed.
	CommonName string `pulumi:"commonName"`
	// Array of alternative domain names.  A new certificate will be created if this field is changed.
	//
	// > **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
}

// LbCertificateLetsencryptInput is an input type that accepts LbCertificateLetsencryptArgs and LbCertificateLetsencryptOutput values.
// You can construct a concrete instance of `LbCertificateLetsencryptInput` via:
//
//	LbCertificateLetsencryptArgs{...}
type LbCertificateLetsencryptInput interface {
	pulumi.Input

	ToLbCertificateLetsencryptOutput() LbCertificateLetsencryptOutput
	ToLbCertificateLetsencryptOutputWithContext(context.Context) LbCertificateLetsencryptOutput
}

type LbCertificateLetsencryptArgs struct {
	// Main domain of the certificate. A new certificate will be created if this field is changed.
	CommonName pulumi.StringInput `pulumi:"commonName"`
	// Array of alternative domain names.  A new certificate will be created if this field is changed.
	//
	// > **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.
	SubjectAlternativeNames pulumi.StringArrayInput `pulumi:"subjectAlternativeNames"`
}

func (LbCertificateLetsencryptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LbCertificateLetsencrypt)(nil)).Elem()
}

func (i LbCertificateLetsencryptArgs) ToLbCertificateLetsencryptOutput() LbCertificateLetsencryptOutput {
	return i.ToLbCertificateLetsencryptOutputWithContext(context.Background())
}

func (i LbCertificateLetsencryptArgs) ToLbCertificateLetsencryptOutputWithContext(ctx context.Context) LbCertificateLetsencryptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbCertificateLetsencryptOutput)
}

func (i LbCertificateLetsencryptArgs) ToOutput(ctx context.Context) pulumix.Output[LbCertificateLetsencrypt] {
	return pulumix.Output[LbCertificateLetsencrypt]{
		OutputState: i.ToLbCertificateLetsencryptOutputWithContext(ctx).OutputState,
	}
}

func (i LbCertificateLetsencryptArgs) ToLbCertificateLetsencryptPtrOutput() LbCertificateLetsencryptPtrOutput {
	return i.ToLbCertificateLetsencryptPtrOutputWithContext(context.Background())
}

func (i LbCertificateLetsencryptArgs) ToLbCertificateLetsencryptPtrOutputWithContext(ctx context.Context) LbCertificateLetsencryptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbCertificateLetsencryptOutput).ToLbCertificateLetsencryptPtrOutputWithContext(ctx)
}

// LbCertificateLetsencryptPtrInput is an input type that accepts LbCertificateLetsencryptArgs, LbCertificateLetsencryptPtr and LbCertificateLetsencryptPtrOutput values.
// You can construct a concrete instance of `LbCertificateLetsencryptPtrInput` via:
//
//	        LbCertificateLetsencryptArgs{...}
//
//	or:
//
//	        nil
type LbCertificateLetsencryptPtrInput interface {
	pulumi.Input

	ToLbCertificateLetsencryptPtrOutput() LbCertificateLetsencryptPtrOutput
	ToLbCertificateLetsencryptPtrOutputWithContext(context.Context) LbCertificateLetsencryptPtrOutput
}

type lbCertificateLetsencryptPtrType LbCertificateLetsencryptArgs

func LbCertificateLetsencryptPtr(v *LbCertificateLetsencryptArgs) LbCertificateLetsencryptPtrInput {
	return (*lbCertificateLetsencryptPtrType)(v)
}

func (*lbCertificateLetsencryptPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LbCertificateLetsencrypt)(nil)).Elem()
}

func (i *lbCertificateLetsencryptPtrType) ToLbCertificateLetsencryptPtrOutput() LbCertificateLetsencryptPtrOutput {
	return i.ToLbCertificateLetsencryptPtrOutputWithContext(context.Background())
}

func (i *lbCertificateLetsencryptPtrType) ToLbCertificateLetsencryptPtrOutputWithContext(ctx context.Context) LbCertificateLetsencryptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbCertificateLetsencryptPtrOutput)
}

func (i *lbCertificateLetsencryptPtrType) ToOutput(ctx context.Context) pulumix.Output[*LbCertificateLetsencrypt] {
	return pulumix.Output[*LbCertificateLetsencrypt]{
		OutputState: i.ToLbCertificateLetsencryptPtrOutputWithContext(ctx).OutputState,
	}
}

type LbCertificateLetsencryptOutput struct{ *pulumi.OutputState }

func (LbCertificateLetsencryptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LbCertificateLetsencrypt)(nil)).Elem()
}

func (o LbCertificateLetsencryptOutput) ToLbCertificateLetsencryptOutput() LbCertificateLetsencryptOutput {
	return o
}

func (o LbCertificateLetsencryptOutput) ToLbCertificateLetsencryptOutputWithContext(ctx context.Context) LbCertificateLetsencryptOutput {
	return o
}

func (o LbCertificateLetsencryptOutput) ToLbCertificateLetsencryptPtrOutput() LbCertificateLetsencryptPtrOutput {
	return o.ToLbCertificateLetsencryptPtrOutputWithContext(context.Background())
}

func (o LbCertificateLetsencryptOutput) ToLbCertificateLetsencryptPtrOutputWithContext(ctx context.Context) LbCertificateLetsencryptPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LbCertificateLetsencrypt) *LbCertificateLetsencrypt {
		return &v
	}).(LbCertificateLetsencryptPtrOutput)
}

func (o LbCertificateLetsencryptOutput) ToOutput(ctx context.Context) pulumix.Output[LbCertificateLetsencrypt] {
	return pulumix.Output[LbCertificateLetsencrypt]{
		OutputState: o.OutputState,
	}
}

// Main domain of the certificate. A new certificate will be created if this field is changed.
func (o LbCertificateLetsencryptOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v LbCertificateLetsencrypt) string { return v.CommonName }).(pulumi.StringOutput)
}

// Array of alternative domain names.  A new certificate will be created if this field is changed.
//
// > **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.
func (o LbCertificateLetsencryptOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LbCertificateLetsencrypt) []string { return v.SubjectAlternativeNames }).(pulumi.StringArrayOutput)
}

type LbCertificateLetsencryptPtrOutput struct{ *pulumi.OutputState }

func (LbCertificateLetsencryptPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbCertificateLetsencrypt)(nil)).Elem()
}

func (o LbCertificateLetsencryptPtrOutput) ToLbCertificateLetsencryptPtrOutput() LbCertificateLetsencryptPtrOutput {
	return o
}

func (o LbCertificateLetsencryptPtrOutput) ToLbCertificateLetsencryptPtrOutputWithContext(ctx context.Context) LbCertificateLetsencryptPtrOutput {
	return o
}

func (o LbCertificateLetsencryptPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LbCertificateLetsencrypt] {
	return pulumix.Output[*LbCertificateLetsencrypt]{
		OutputState: o.OutputState,
	}
}

func (o LbCertificateLetsencryptPtrOutput) Elem() LbCertificateLetsencryptOutput {
	return o.ApplyT(func(v *LbCertificateLetsencrypt) LbCertificateLetsencrypt {
		if v != nil {
			return *v
		}
		var ret LbCertificateLetsencrypt
		return ret
	}).(LbCertificateLetsencryptOutput)
}

// Main domain of the certificate. A new certificate will be created if this field is changed.
func (o LbCertificateLetsencryptPtrOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbCertificateLetsencrypt) *string {
		if v == nil {
			return nil
		}
		return &v.CommonName
	}).(pulumi.StringPtrOutput)
}

// Array of alternative domain names.  A new certificate will be created if this field is changed.
//
// > **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.
func (o LbCertificateLetsencryptPtrOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LbCertificateLetsencrypt) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAlternativeNames
	}).(pulumi.StringArrayOutput)
}

type LbFrontendAcl struct {
	// Action to undertake when an ACL filter matches.
	Action      LbFrontendAclAction `pulumi:"action"`
	CreatedAt   *string             `pulumi:"createdAt"`
	Description *string             `pulumi:"description"`
	// The ACL match rule. At least `ipSubnet` or `httpFilter` and `httpFilterValue` are required.
	Match LbFrontendAclMatch `pulumi:"match"`
	// The ACL name. If not provided it will be randomly generated.
	Name      *string `pulumi:"name"`
	UpdatedAt *string `pulumi:"updatedAt"`
}

// LbFrontendAclInput is an input type that accepts LbFrontendAclArgs and LbFrontendAclOutput values.
// You can construct a concrete instance of `LbFrontendAclInput` via:
//
//	LbFrontendAclArgs{...}
type LbFrontendAclInput interface {
	pulumi.Input

	ToLbFrontendAclOutput() LbFrontendAclOutput
	ToLbFrontendAclOutputWithContext(context.Context) LbFrontendAclOutput
}

type LbFrontendAclArgs struct {
	// Action to undertake when an ACL filter matches.
	Action      LbFrontendAclActionInput `pulumi:"action"`
	CreatedAt   pulumi.StringPtrInput    `pulumi:"createdAt"`
	Description pulumi.StringPtrInput    `pulumi:"description"`
	// The ACL match rule. At least `ipSubnet` or `httpFilter` and `httpFilterValue` are required.
	Match LbFrontendAclMatchInput `pulumi:"match"`
	// The ACL name. If not provided it will be randomly generated.
	Name      pulumi.StringPtrInput `pulumi:"name"`
	UpdatedAt pulumi.StringPtrInput `pulumi:"updatedAt"`
}

func (LbFrontendAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LbFrontendAcl)(nil)).Elem()
}

func (i LbFrontendAclArgs) ToLbFrontendAclOutput() LbFrontendAclOutput {
	return i.ToLbFrontendAclOutputWithContext(context.Background())
}

func (i LbFrontendAclArgs) ToLbFrontendAclOutputWithContext(ctx context.Context) LbFrontendAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbFrontendAclOutput)
}

func (i LbFrontendAclArgs) ToOutput(ctx context.Context) pulumix.Output[LbFrontendAcl] {
	return pulumix.Output[LbFrontendAcl]{
		OutputState: i.ToLbFrontendAclOutputWithContext(ctx).OutputState,
	}
}

// LbFrontendAclArrayInput is an input type that accepts LbFrontendAclArray and LbFrontendAclArrayOutput values.
// You can construct a concrete instance of `LbFrontendAclArrayInput` via:
//
//	LbFrontendAclArray{ LbFrontendAclArgs{...} }
type LbFrontendAclArrayInput interface {
	pulumi.Input

	ToLbFrontendAclArrayOutput() LbFrontendAclArrayOutput
	ToLbFrontendAclArrayOutputWithContext(context.Context) LbFrontendAclArrayOutput
}

type LbFrontendAclArray []LbFrontendAclInput

func (LbFrontendAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LbFrontendAcl)(nil)).Elem()
}

func (i LbFrontendAclArray) ToLbFrontendAclArrayOutput() LbFrontendAclArrayOutput {
	return i.ToLbFrontendAclArrayOutputWithContext(context.Background())
}

func (i LbFrontendAclArray) ToLbFrontendAclArrayOutputWithContext(ctx context.Context) LbFrontendAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbFrontendAclArrayOutput)
}

func (i LbFrontendAclArray) ToOutput(ctx context.Context) pulumix.Output[[]LbFrontendAcl] {
	return pulumix.Output[[]LbFrontendAcl]{
		OutputState: i.ToLbFrontendAclArrayOutputWithContext(ctx).OutputState,
	}
}

type LbFrontendAclOutput struct{ *pulumi.OutputState }

func (LbFrontendAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LbFrontendAcl)(nil)).Elem()
}

func (o LbFrontendAclOutput) ToLbFrontendAclOutput() LbFrontendAclOutput {
	return o
}

func (o LbFrontendAclOutput) ToLbFrontendAclOutputWithContext(ctx context.Context) LbFrontendAclOutput {
	return o
}

func (o LbFrontendAclOutput) ToOutput(ctx context.Context) pulumix.Output[LbFrontendAcl] {
	return pulumix.Output[LbFrontendAcl]{
		OutputState: o.OutputState,
	}
}

// Action to undertake when an ACL filter matches.
func (o LbFrontendAclOutput) Action() LbFrontendAclActionOutput {
	return o.ApplyT(func(v LbFrontendAcl) LbFrontendAclAction { return v.Action }).(LbFrontendAclActionOutput)
}

func (o LbFrontendAclOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbFrontendAcl) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o LbFrontendAclOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbFrontendAcl) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The ACL match rule. At least `ipSubnet` or `httpFilter` and `httpFilterValue` are required.
func (o LbFrontendAclOutput) Match() LbFrontendAclMatchOutput {
	return o.ApplyT(func(v LbFrontendAcl) LbFrontendAclMatch { return v.Match }).(LbFrontendAclMatchOutput)
}

// The ACL name. If not provided it will be randomly generated.
func (o LbFrontendAclOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbFrontendAcl) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LbFrontendAclOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbFrontendAcl) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type LbFrontendAclArrayOutput struct{ *pulumi.OutputState }

func (LbFrontendAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LbFrontendAcl)(nil)).Elem()
}

func (o LbFrontendAclArrayOutput) ToLbFrontendAclArrayOutput() LbFrontendAclArrayOutput {
	return o
}

func (o LbFrontendAclArrayOutput) ToLbFrontendAclArrayOutputWithContext(ctx context.Context) LbFrontendAclArrayOutput {
	return o
}

func (o LbFrontendAclArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LbFrontendAcl] {
	return pulumix.Output[[]LbFrontendAcl]{
		OutputState: o.OutputState,
	}
}

func (o LbFrontendAclArrayOutput) Index(i pulumi.IntInput) LbFrontendAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LbFrontendAcl {
		return vs[0].([]LbFrontendAcl)[vs[1].(int)]
	}).(LbFrontendAclOutput)
}

type LbFrontendAclAction struct {
	// Redirect parameters when using an ACL with `redirect` action.
	Redirects []LbFrontendAclActionRedirect `pulumi:"redirects"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type string `pulumi:"type"`
}

// LbFrontendAclActionInput is an input type that accepts LbFrontendAclActionArgs and LbFrontendAclActionOutput values.
// You can construct a concrete instance of `LbFrontendAclActionInput` via:
//
//	LbFrontendAclActionArgs{...}
type LbFrontendAclActionInput interface {
	pulumi.Input

	ToLbFrontendAclActionOutput() LbFrontendAclActionOutput
	ToLbFrontendAclActionOutputWithContext(context.Context) LbFrontendAclActionOutput
}

type LbFrontendAclActionArgs struct {
	// Redirect parameters when using an ACL with `redirect` action.
	Redirects LbFrontendAclActionRedirectArrayInput `pulumi:"redirects"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LbFrontendAclActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LbFrontendAclAction)(nil)).Elem()
}

func (i LbFrontendAclActionArgs) ToLbFrontendAclActionOutput() LbFrontendAclActionOutput {
	return i.ToLbFrontendAclActionOutputWithContext(context.Background())
}

func (i LbFrontendAclActionArgs) ToLbFrontendAclActionOutputWithContext(ctx context.Context) LbFrontendAclActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbFrontendAclActionOutput)
}

func (i LbFrontendAclActionArgs) ToOutput(ctx context.Context) pulumix.Output[LbFrontendAclAction] {
	return pulumix.Output[LbFrontendAclAction]{
		OutputState: i.ToLbFrontendAclActionOutputWithContext(ctx).OutputState,
	}
}

type LbFrontendAclActionOutput struct{ *pulumi.OutputState }

func (LbFrontendAclActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LbFrontendAclAction)(nil)).Elem()
}

func (o LbFrontendAclActionOutput) ToLbFrontendAclActionOutput() LbFrontendAclActionOutput {
	return o
}

func (o LbFrontendAclActionOutput) ToLbFrontendAclActionOutputWithContext(ctx context.Context) LbFrontendAclActionOutput {
	return o
}

func (o LbFrontendAclActionOutput) ToOutput(ctx context.Context) pulumix.Output[LbFrontendAclAction] {
	return pulumix.Output[LbFrontendAclAction]{
		OutputState: o.OutputState,
	}
}

// Redirect parameters when using an ACL with `redirect` action.
func (o LbFrontendAclActionOutput) Redirects() LbFrontendAclActionRedirectArrayOutput {
	return o.ApplyT(func(v LbFrontendAclAction) []LbFrontendAclActionRedirect { return v.Redirects }).(LbFrontendAclActionRedirectArrayOutput)
}

// The redirect type. Possible values are: `location` or `scheme`.
func (o LbFrontendAclActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LbFrontendAclAction) string { return v.Type }).(pulumi.StringOutput)
}

type LbFrontendAclActionRedirect struct {
	// The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.
	Code *int `pulumi:"code"`
	// An URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.
	Target *string `pulumi:"target"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type *string `pulumi:"type"`
}

// LbFrontendAclActionRedirectInput is an input type that accepts LbFrontendAclActionRedirectArgs and LbFrontendAclActionRedirectOutput values.
// You can construct a concrete instance of `LbFrontendAclActionRedirectInput` via:
//
//	LbFrontendAclActionRedirectArgs{...}
type LbFrontendAclActionRedirectInput interface {
	pulumi.Input

	ToLbFrontendAclActionRedirectOutput() LbFrontendAclActionRedirectOutput
	ToLbFrontendAclActionRedirectOutputWithContext(context.Context) LbFrontendAclActionRedirectOutput
}

type LbFrontendAclActionRedirectArgs struct {
	// The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// An URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LbFrontendAclActionRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LbFrontendAclActionRedirect)(nil)).Elem()
}

func (i LbFrontendAclActionRedirectArgs) ToLbFrontendAclActionRedirectOutput() LbFrontendAclActionRedirectOutput {
	return i.ToLbFrontendAclActionRedirectOutputWithContext(context.Background())
}

func (i LbFrontendAclActionRedirectArgs) ToLbFrontendAclActionRedirectOutputWithContext(ctx context.Context) LbFrontendAclActionRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbFrontendAclActionRedirectOutput)
}

func (i LbFrontendAclActionRedirectArgs) ToOutput(ctx context.Context) pulumix.Output[LbFrontendAclActionRedirect] {
	return pulumix.Output[LbFrontendAclActionRedirect]{
		OutputState: i.ToLbFrontendAclActionRedirectOutputWithContext(ctx).OutputState,
	}
}

// LbFrontendAclActionRedirectArrayInput is an input type that accepts LbFrontendAclActionRedirectArray and LbFrontendAclActionRedirectArrayOutput values.
// You can construct a concrete instance of `LbFrontendAclActionRedirectArrayInput` via:
//
//	LbFrontendAclActionRedirectArray{ LbFrontendAclActionRedirectArgs{...} }
type LbFrontendAclActionRedirectArrayInput interface {
	pulumi.Input

	ToLbFrontendAclActionRedirectArrayOutput() LbFrontendAclActionRedirectArrayOutput
	ToLbFrontendAclActionRedirectArrayOutputWithContext(context.Context) LbFrontendAclActionRedirectArrayOutput
}

type LbFrontendAclActionRedirectArray []LbFrontendAclActionRedirectInput

func (LbFrontendAclActionRedirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LbFrontendAclActionRedirect)(nil)).Elem()
}

func (i LbFrontendAclActionRedirectArray) ToLbFrontendAclActionRedirectArrayOutput() LbFrontendAclActionRedirectArrayOutput {
	return i.ToLbFrontendAclActionRedirectArrayOutputWithContext(context.Background())
}

func (i LbFrontendAclActionRedirectArray) ToLbFrontendAclActionRedirectArrayOutputWithContext(ctx context.Context) LbFrontendAclActionRedirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbFrontendAclActionRedirectArrayOutput)
}

func (i LbFrontendAclActionRedirectArray) ToOutput(ctx context.Context) pulumix.Output[[]LbFrontendAclActionRedirect] {
	return pulumix.Output[[]LbFrontendAclActionRedirect]{
		OutputState: i.ToLbFrontendAclActionRedirectArrayOutputWithContext(ctx).OutputState,
	}
}

type LbFrontendAclActionRedirectOutput struct{ *pulumi.OutputState }

func (LbFrontendAclActionRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LbFrontendAclActionRedirect)(nil)).Elem()
}

func (o LbFrontendAclActionRedirectOutput) ToLbFrontendAclActionRedirectOutput() LbFrontendAclActionRedirectOutput {
	return o
}

func (o LbFrontendAclActionRedirectOutput) ToLbFrontendAclActionRedirectOutputWithContext(ctx context.Context) LbFrontendAclActionRedirectOutput {
	return o
}

func (o LbFrontendAclActionRedirectOutput) ToOutput(ctx context.Context) pulumix.Output[LbFrontendAclActionRedirect] {
	return pulumix.Output[LbFrontendAclActionRedirect]{
		OutputState: o.OutputState,
	}
}

// The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.
func (o LbFrontendAclActionRedirectOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LbFrontendAclActionRedirect) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// An URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.
func (o LbFrontendAclActionRedirectOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbFrontendAclActionRedirect) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The redirect type. Possible values are: `location` or `scheme`.
func (o LbFrontendAclActionRedirectOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbFrontendAclActionRedirect) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type LbFrontendAclActionRedirectArrayOutput struct{ *pulumi.OutputState }

func (LbFrontendAclActionRedirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LbFrontendAclActionRedirect)(nil)).Elem()
}

func (o LbFrontendAclActionRedirectArrayOutput) ToLbFrontendAclActionRedirectArrayOutput() LbFrontendAclActionRedirectArrayOutput {
	return o
}

func (o LbFrontendAclActionRedirectArrayOutput) ToLbFrontendAclActionRedirectArrayOutputWithContext(ctx context.Context) LbFrontendAclActionRedirectArrayOutput {
	return o
}

func (o LbFrontendAclActionRedirectArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LbFrontendAclActionRedirect] {
	return pulumix.Output[[]LbFrontendAclActionRedirect]{
		OutputState: o.OutputState,
	}
}

func (o LbFrontendAclActionRedirectArrayOutput) Index(i pulumi.IntInput) LbFrontendAclActionRedirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LbFrontendAclActionRedirect {
		return vs[0].([]LbFrontendAclActionRedirect)[vs[1].(int)]
	}).(LbFrontendAclActionRedirectOutput)
}

type LbFrontendAclMatch struct {
	// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
	// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
	// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
	HttpFilter       *string `pulumi:"httpFilter"`
	HttpFilterOption *string `pulumi:"httpFilterOption"`
	// A list of possible values to match for the given HTTP filter.
	// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case-insensitive.
	HttpFilterValues []string `pulumi:"httpFilterValues"`
	// If set to `true`, the condition will be of type "unless".
	Invert *bool `pulumi:"invert"`
	// A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
	IpSubnets []string `pulumi:"ipSubnets"`
}

// LbFrontendAclMatchInput is an input type that accepts LbFrontendAclMatchArgs and LbFrontendAclMatchOutput values.
// You can construct a concrete instance of `LbFrontendAclMatchInput` via:
//
//	LbFrontendAclMatchArgs{...}
type LbFrontendAclMatchInput interface {
	pulumi.Input

	ToLbFrontendAclMatchOutput() LbFrontendAclMatchOutput
	ToLbFrontendAclMatchOutputWithContext(context.Context) LbFrontendAclMatchOutput
}

type LbFrontendAclMatchArgs struct {
	// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
	// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
	// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
	HttpFilter       pulumi.StringPtrInput `pulumi:"httpFilter"`
	HttpFilterOption pulumi.StringPtrInput `pulumi:"httpFilterOption"`
	// A list of possible values to match for the given HTTP filter.
	// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case-insensitive.
	HttpFilterValues pulumi.StringArrayInput `pulumi:"httpFilterValues"`
	// If set to `true`, the condition will be of type "unless".
	Invert pulumi.BoolPtrInput `pulumi:"invert"`
	// A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
	IpSubnets pulumi.StringArrayInput `pulumi:"ipSubnets"`
}

func (LbFrontendAclMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LbFrontendAclMatch)(nil)).Elem()
}

func (i LbFrontendAclMatchArgs) ToLbFrontendAclMatchOutput() LbFrontendAclMatchOutput {
	return i.ToLbFrontendAclMatchOutputWithContext(context.Background())
}

func (i LbFrontendAclMatchArgs) ToLbFrontendAclMatchOutputWithContext(ctx context.Context) LbFrontendAclMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbFrontendAclMatchOutput)
}

func (i LbFrontendAclMatchArgs) ToOutput(ctx context.Context) pulumix.Output[LbFrontendAclMatch] {
	return pulumix.Output[LbFrontendAclMatch]{
		OutputState: i.ToLbFrontendAclMatchOutputWithContext(ctx).OutputState,
	}
}

type LbFrontendAclMatchOutput struct{ *pulumi.OutputState }

func (LbFrontendAclMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LbFrontendAclMatch)(nil)).Elem()
}

func (o LbFrontendAclMatchOutput) ToLbFrontendAclMatchOutput() LbFrontendAclMatchOutput {
	return o
}

func (o LbFrontendAclMatchOutput) ToLbFrontendAclMatchOutputWithContext(ctx context.Context) LbFrontendAclMatchOutput {
	return o
}

func (o LbFrontendAclMatchOutput) ToOutput(ctx context.Context) pulumix.Output[LbFrontendAclMatch] {
	return pulumix.Output[LbFrontendAclMatch]{
		OutputState: o.OutputState,
	}
}

// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
func (o LbFrontendAclMatchOutput) HttpFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbFrontendAclMatch) *string { return v.HttpFilter }).(pulumi.StringPtrOutput)
}

func (o LbFrontendAclMatchOutput) HttpFilterOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbFrontendAclMatch) *string { return v.HttpFilterOption }).(pulumi.StringPtrOutput)
}

// A list of possible values to match for the given HTTP filter.
// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case-insensitive.
func (o LbFrontendAclMatchOutput) HttpFilterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LbFrontendAclMatch) []string { return v.HttpFilterValues }).(pulumi.StringArrayOutput)
}

// If set to `true`, the condition will be of type "unless".
func (o LbFrontendAclMatchOutput) Invert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LbFrontendAclMatch) *bool { return v.Invert }).(pulumi.BoolPtrOutput)
}

// A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
func (o LbFrontendAclMatchOutput) IpSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LbFrontendAclMatch) []string { return v.IpSubnets }).(pulumi.StringArrayOutput)
}

type LbPrivateNetwork struct {
	// (Optional) Set to true if you want to let DHCP assign IP addresses. See below.
	DhcpConfig *bool `pulumi:"dhcpConfig"`
	// (Required) The ID of the Private Network to associate.
	PrivateNetworkId string `pulumi:"privateNetworkId"`
	// (Optional) Define a local ip address of your choice for the load balancer instance. See below.
	StaticConfig *string `pulumi:"staticConfig"`
	Status       *string `pulumi:"status"`
	// `zone`) The zone of the load-balancer.
	Zone *string `pulumi:"zone"`
}

// LbPrivateNetworkInput is an input type that accepts LbPrivateNetworkArgs and LbPrivateNetworkOutput values.
// You can construct a concrete instance of `LbPrivateNetworkInput` via:
//
//	LbPrivateNetworkArgs{...}
type LbPrivateNetworkInput interface {
	pulumi.Input

	ToLbPrivateNetworkOutput() LbPrivateNetworkOutput
	ToLbPrivateNetworkOutputWithContext(context.Context) LbPrivateNetworkOutput
}

type LbPrivateNetworkArgs struct {
	// (Optional) Set to true if you want to let DHCP assign IP addresses. See below.
	DhcpConfig pulumi.BoolPtrInput `pulumi:"dhcpConfig"`
	// (Required) The ID of the Private Network to associate.
	PrivateNetworkId pulumi.StringInput `pulumi:"privateNetworkId"`
	// (Optional) Define a local ip address of your choice for the load balancer instance. See below.
	StaticConfig pulumi.StringPtrInput `pulumi:"staticConfig"`
	Status       pulumi.StringPtrInput `pulumi:"status"`
	// `zone`) The zone of the load-balancer.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (LbPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LbPrivateNetwork)(nil)).Elem()
}

func (i LbPrivateNetworkArgs) ToLbPrivateNetworkOutput() LbPrivateNetworkOutput {
	return i.ToLbPrivateNetworkOutputWithContext(context.Background())
}

func (i LbPrivateNetworkArgs) ToLbPrivateNetworkOutputWithContext(ctx context.Context) LbPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbPrivateNetworkOutput)
}

func (i LbPrivateNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[LbPrivateNetwork] {
	return pulumix.Output[LbPrivateNetwork]{
		OutputState: i.ToLbPrivateNetworkOutputWithContext(ctx).OutputState,
	}
}

// LbPrivateNetworkArrayInput is an input type that accepts LbPrivateNetworkArray and LbPrivateNetworkArrayOutput values.
// You can construct a concrete instance of `LbPrivateNetworkArrayInput` via:
//
//	LbPrivateNetworkArray{ LbPrivateNetworkArgs{...} }
type LbPrivateNetworkArrayInput interface {
	pulumi.Input

	ToLbPrivateNetworkArrayOutput() LbPrivateNetworkArrayOutput
	ToLbPrivateNetworkArrayOutputWithContext(context.Context) LbPrivateNetworkArrayOutput
}

type LbPrivateNetworkArray []LbPrivateNetworkInput

func (LbPrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LbPrivateNetwork)(nil)).Elem()
}

func (i LbPrivateNetworkArray) ToLbPrivateNetworkArrayOutput() LbPrivateNetworkArrayOutput {
	return i.ToLbPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i LbPrivateNetworkArray) ToLbPrivateNetworkArrayOutputWithContext(ctx context.Context) LbPrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbPrivateNetworkArrayOutput)
}

func (i LbPrivateNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]LbPrivateNetwork] {
	return pulumix.Output[[]LbPrivateNetwork]{
		OutputState: i.ToLbPrivateNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type LbPrivateNetworkOutput struct{ *pulumi.OutputState }

func (LbPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LbPrivateNetwork)(nil)).Elem()
}

func (o LbPrivateNetworkOutput) ToLbPrivateNetworkOutput() LbPrivateNetworkOutput {
	return o
}

func (o LbPrivateNetworkOutput) ToLbPrivateNetworkOutputWithContext(ctx context.Context) LbPrivateNetworkOutput {
	return o
}

func (o LbPrivateNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[LbPrivateNetwork] {
	return pulumix.Output[LbPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

// (Optional) Set to true if you want to let DHCP assign IP addresses. See below.
func (o LbPrivateNetworkOutput) DhcpConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LbPrivateNetwork) *bool { return v.DhcpConfig }).(pulumi.BoolPtrOutput)
}

// (Required) The ID of the Private Network to associate.
func (o LbPrivateNetworkOutput) PrivateNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LbPrivateNetwork) string { return v.PrivateNetworkId }).(pulumi.StringOutput)
}

// (Optional) Define a local ip address of your choice for the load balancer instance. See below.
func (o LbPrivateNetworkOutput) StaticConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbPrivateNetwork) *string { return v.StaticConfig }).(pulumi.StringPtrOutput)
}

func (o LbPrivateNetworkOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbPrivateNetwork) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// `zone`) The zone of the load-balancer.
func (o LbPrivateNetworkOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LbPrivateNetwork) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type LbPrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (LbPrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LbPrivateNetwork)(nil)).Elem()
}

func (o LbPrivateNetworkArrayOutput) ToLbPrivateNetworkArrayOutput() LbPrivateNetworkArrayOutput {
	return o
}

func (o LbPrivateNetworkArrayOutput) ToLbPrivateNetworkArrayOutputWithContext(ctx context.Context) LbPrivateNetworkArrayOutput {
	return o
}

func (o LbPrivateNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LbPrivateNetwork] {
	return pulumix.Output[[]LbPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o LbPrivateNetworkArrayOutput) Index(i pulumi.IntInput) LbPrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LbPrivateNetwork {
		return vs[0].([]LbPrivateNetwork)[vs[1].(int)]
	}).(LbPrivateNetworkOutput)
}

type MnqCredentialNatsCredentials struct {
	// Raw content of the NATS credentials file.
	Content *string `pulumi:"content"`
}

// MnqCredentialNatsCredentialsInput is an input type that accepts MnqCredentialNatsCredentialsArgs and MnqCredentialNatsCredentialsOutput values.
// You can construct a concrete instance of `MnqCredentialNatsCredentialsInput` via:
//
//	MnqCredentialNatsCredentialsArgs{...}
type MnqCredentialNatsCredentialsInput interface {
	pulumi.Input

	ToMnqCredentialNatsCredentialsOutput() MnqCredentialNatsCredentialsOutput
	ToMnqCredentialNatsCredentialsOutputWithContext(context.Context) MnqCredentialNatsCredentialsOutput
}

type MnqCredentialNatsCredentialsArgs struct {
	// Raw content of the NATS credentials file.
	Content pulumi.StringPtrInput `pulumi:"content"`
}

func (MnqCredentialNatsCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MnqCredentialNatsCredentials)(nil)).Elem()
}

func (i MnqCredentialNatsCredentialsArgs) ToMnqCredentialNatsCredentialsOutput() MnqCredentialNatsCredentialsOutput {
	return i.ToMnqCredentialNatsCredentialsOutputWithContext(context.Background())
}

func (i MnqCredentialNatsCredentialsArgs) ToMnqCredentialNatsCredentialsOutputWithContext(ctx context.Context) MnqCredentialNatsCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqCredentialNatsCredentialsOutput)
}

func (i MnqCredentialNatsCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[MnqCredentialNatsCredentials] {
	return pulumix.Output[MnqCredentialNatsCredentials]{
		OutputState: i.ToMnqCredentialNatsCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i MnqCredentialNatsCredentialsArgs) ToMnqCredentialNatsCredentialsPtrOutput() MnqCredentialNatsCredentialsPtrOutput {
	return i.ToMnqCredentialNatsCredentialsPtrOutputWithContext(context.Background())
}

func (i MnqCredentialNatsCredentialsArgs) ToMnqCredentialNatsCredentialsPtrOutputWithContext(ctx context.Context) MnqCredentialNatsCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqCredentialNatsCredentialsOutput).ToMnqCredentialNatsCredentialsPtrOutputWithContext(ctx)
}

// MnqCredentialNatsCredentialsPtrInput is an input type that accepts MnqCredentialNatsCredentialsArgs, MnqCredentialNatsCredentialsPtr and MnqCredentialNatsCredentialsPtrOutput values.
// You can construct a concrete instance of `MnqCredentialNatsCredentialsPtrInput` via:
//
//	        MnqCredentialNatsCredentialsArgs{...}
//
//	or:
//
//	        nil
type MnqCredentialNatsCredentialsPtrInput interface {
	pulumi.Input

	ToMnqCredentialNatsCredentialsPtrOutput() MnqCredentialNatsCredentialsPtrOutput
	ToMnqCredentialNatsCredentialsPtrOutputWithContext(context.Context) MnqCredentialNatsCredentialsPtrOutput
}

type mnqCredentialNatsCredentialsPtrType MnqCredentialNatsCredentialsArgs

func MnqCredentialNatsCredentialsPtr(v *MnqCredentialNatsCredentialsArgs) MnqCredentialNatsCredentialsPtrInput {
	return (*mnqCredentialNatsCredentialsPtrType)(v)
}

func (*mnqCredentialNatsCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MnqCredentialNatsCredentials)(nil)).Elem()
}

func (i *mnqCredentialNatsCredentialsPtrType) ToMnqCredentialNatsCredentialsPtrOutput() MnqCredentialNatsCredentialsPtrOutput {
	return i.ToMnqCredentialNatsCredentialsPtrOutputWithContext(context.Background())
}

func (i *mnqCredentialNatsCredentialsPtrType) ToMnqCredentialNatsCredentialsPtrOutputWithContext(ctx context.Context) MnqCredentialNatsCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqCredentialNatsCredentialsPtrOutput)
}

func (i *mnqCredentialNatsCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*MnqCredentialNatsCredentials] {
	return pulumix.Output[*MnqCredentialNatsCredentials]{
		OutputState: i.ToMnqCredentialNatsCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type MnqCredentialNatsCredentialsOutput struct{ *pulumi.OutputState }

func (MnqCredentialNatsCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MnqCredentialNatsCredentials)(nil)).Elem()
}

func (o MnqCredentialNatsCredentialsOutput) ToMnqCredentialNatsCredentialsOutput() MnqCredentialNatsCredentialsOutput {
	return o
}

func (o MnqCredentialNatsCredentialsOutput) ToMnqCredentialNatsCredentialsOutputWithContext(ctx context.Context) MnqCredentialNatsCredentialsOutput {
	return o
}

func (o MnqCredentialNatsCredentialsOutput) ToMnqCredentialNatsCredentialsPtrOutput() MnqCredentialNatsCredentialsPtrOutput {
	return o.ToMnqCredentialNatsCredentialsPtrOutputWithContext(context.Background())
}

func (o MnqCredentialNatsCredentialsOutput) ToMnqCredentialNatsCredentialsPtrOutputWithContext(ctx context.Context) MnqCredentialNatsCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MnqCredentialNatsCredentials) *MnqCredentialNatsCredentials {
		return &v
	}).(MnqCredentialNatsCredentialsPtrOutput)
}

func (o MnqCredentialNatsCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[MnqCredentialNatsCredentials] {
	return pulumix.Output[MnqCredentialNatsCredentials]{
		OutputState: o.OutputState,
	}
}

// Raw content of the NATS credentials file.
func (o MnqCredentialNatsCredentialsOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MnqCredentialNatsCredentials) *string { return v.Content }).(pulumi.StringPtrOutput)
}

type MnqCredentialNatsCredentialsPtrOutput struct{ *pulumi.OutputState }

func (MnqCredentialNatsCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MnqCredentialNatsCredentials)(nil)).Elem()
}

func (o MnqCredentialNatsCredentialsPtrOutput) ToMnqCredentialNatsCredentialsPtrOutput() MnqCredentialNatsCredentialsPtrOutput {
	return o
}

func (o MnqCredentialNatsCredentialsPtrOutput) ToMnqCredentialNatsCredentialsPtrOutputWithContext(ctx context.Context) MnqCredentialNatsCredentialsPtrOutput {
	return o
}

func (o MnqCredentialNatsCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MnqCredentialNatsCredentials] {
	return pulumix.Output[*MnqCredentialNatsCredentials]{
		OutputState: o.OutputState,
	}
}

func (o MnqCredentialNatsCredentialsPtrOutput) Elem() MnqCredentialNatsCredentialsOutput {
	return o.ApplyT(func(v *MnqCredentialNatsCredentials) MnqCredentialNatsCredentials {
		if v != nil {
			return *v
		}
		var ret MnqCredentialNatsCredentials
		return ret
	}).(MnqCredentialNatsCredentialsOutput)
}

// Raw content of the NATS credentials file.
func (o MnqCredentialNatsCredentialsPtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MnqCredentialNatsCredentials) *string {
		if v == nil {
			return nil
		}
		return v.Content
	}).(pulumi.StringPtrOutput)
}

type MnqCredentialSqsSnsCredentials struct {
	// The ID of the key.
	AccessKey *string `pulumi:"accessKey"`
	// List of permissions associated to this Credential. Only one of permissions may be set.
	Permissions *MnqCredentialSqsSnsCredentialsPermissions `pulumi:"permissions"`
	// The Secret value of the key.
	SecretKey *string `pulumi:"secretKey"`
}

// MnqCredentialSqsSnsCredentialsInput is an input type that accepts MnqCredentialSqsSnsCredentialsArgs and MnqCredentialSqsSnsCredentialsOutput values.
// You can construct a concrete instance of `MnqCredentialSqsSnsCredentialsInput` via:
//
//	MnqCredentialSqsSnsCredentialsArgs{...}
type MnqCredentialSqsSnsCredentialsInput interface {
	pulumi.Input

	ToMnqCredentialSqsSnsCredentialsOutput() MnqCredentialSqsSnsCredentialsOutput
	ToMnqCredentialSqsSnsCredentialsOutputWithContext(context.Context) MnqCredentialSqsSnsCredentialsOutput
}

type MnqCredentialSqsSnsCredentialsArgs struct {
	// The ID of the key.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// List of permissions associated to this Credential. Only one of permissions may be set.
	Permissions MnqCredentialSqsSnsCredentialsPermissionsPtrInput `pulumi:"permissions"`
	// The Secret value of the key.
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
}

func (MnqCredentialSqsSnsCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MnqCredentialSqsSnsCredentials)(nil)).Elem()
}

func (i MnqCredentialSqsSnsCredentialsArgs) ToMnqCredentialSqsSnsCredentialsOutput() MnqCredentialSqsSnsCredentialsOutput {
	return i.ToMnqCredentialSqsSnsCredentialsOutputWithContext(context.Background())
}

func (i MnqCredentialSqsSnsCredentialsArgs) ToMnqCredentialSqsSnsCredentialsOutputWithContext(ctx context.Context) MnqCredentialSqsSnsCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqCredentialSqsSnsCredentialsOutput)
}

func (i MnqCredentialSqsSnsCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[MnqCredentialSqsSnsCredentials] {
	return pulumix.Output[MnqCredentialSqsSnsCredentials]{
		OutputState: i.ToMnqCredentialSqsSnsCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i MnqCredentialSqsSnsCredentialsArgs) ToMnqCredentialSqsSnsCredentialsPtrOutput() MnqCredentialSqsSnsCredentialsPtrOutput {
	return i.ToMnqCredentialSqsSnsCredentialsPtrOutputWithContext(context.Background())
}

func (i MnqCredentialSqsSnsCredentialsArgs) ToMnqCredentialSqsSnsCredentialsPtrOutputWithContext(ctx context.Context) MnqCredentialSqsSnsCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqCredentialSqsSnsCredentialsOutput).ToMnqCredentialSqsSnsCredentialsPtrOutputWithContext(ctx)
}

// MnqCredentialSqsSnsCredentialsPtrInput is an input type that accepts MnqCredentialSqsSnsCredentialsArgs, MnqCredentialSqsSnsCredentialsPtr and MnqCredentialSqsSnsCredentialsPtrOutput values.
// You can construct a concrete instance of `MnqCredentialSqsSnsCredentialsPtrInput` via:
//
//	        MnqCredentialSqsSnsCredentialsArgs{...}
//
//	or:
//
//	        nil
type MnqCredentialSqsSnsCredentialsPtrInput interface {
	pulumi.Input

	ToMnqCredentialSqsSnsCredentialsPtrOutput() MnqCredentialSqsSnsCredentialsPtrOutput
	ToMnqCredentialSqsSnsCredentialsPtrOutputWithContext(context.Context) MnqCredentialSqsSnsCredentialsPtrOutput
}

type mnqCredentialSqsSnsCredentialsPtrType MnqCredentialSqsSnsCredentialsArgs

func MnqCredentialSqsSnsCredentialsPtr(v *MnqCredentialSqsSnsCredentialsArgs) MnqCredentialSqsSnsCredentialsPtrInput {
	return (*mnqCredentialSqsSnsCredentialsPtrType)(v)
}

func (*mnqCredentialSqsSnsCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MnqCredentialSqsSnsCredentials)(nil)).Elem()
}

func (i *mnqCredentialSqsSnsCredentialsPtrType) ToMnqCredentialSqsSnsCredentialsPtrOutput() MnqCredentialSqsSnsCredentialsPtrOutput {
	return i.ToMnqCredentialSqsSnsCredentialsPtrOutputWithContext(context.Background())
}

func (i *mnqCredentialSqsSnsCredentialsPtrType) ToMnqCredentialSqsSnsCredentialsPtrOutputWithContext(ctx context.Context) MnqCredentialSqsSnsCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqCredentialSqsSnsCredentialsPtrOutput)
}

func (i *mnqCredentialSqsSnsCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*MnqCredentialSqsSnsCredentials] {
	return pulumix.Output[*MnqCredentialSqsSnsCredentials]{
		OutputState: i.ToMnqCredentialSqsSnsCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type MnqCredentialSqsSnsCredentialsOutput struct{ *pulumi.OutputState }

func (MnqCredentialSqsSnsCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MnqCredentialSqsSnsCredentials)(nil)).Elem()
}

func (o MnqCredentialSqsSnsCredentialsOutput) ToMnqCredentialSqsSnsCredentialsOutput() MnqCredentialSqsSnsCredentialsOutput {
	return o
}

func (o MnqCredentialSqsSnsCredentialsOutput) ToMnqCredentialSqsSnsCredentialsOutputWithContext(ctx context.Context) MnqCredentialSqsSnsCredentialsOutput {
	return o
}

func (o MnqCredentialSqsSnsCredentialsOutput) ToMnqCredentialSqsSnsCredentialsPtrOutput() MnqCredentialSqsSnsCredentialsPtrOutput {
	return o.ToMnqCredentialSqsSnsCredentialsPtrOutputWithContext(context.Background())
}

func (o MnqCredentialSqsSnsCredentialsOutput) ToMnqCredentialSqsSnsCredentialsPtrOutputWithContext(ctx context.Context) MnqCredentialSqsSnsCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MnqCredentialSqsSnsCredentials) *MnqCredentialSqsSnsCredentials {
		return &v
	}).(MnqCredentialSqsSnsCredentialsPtrOutput)
}

func (o MnqCredentialSqsSnsCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[MnqCredentialSqsSnsCredentials] {
	return pulumix.Output[MnqCredentialSqsSnsCredentials]{
		OutputState: o.OutputState,
	}
}

// The ID of the key.
func (o MnqCredentialSqsSnsCredentialsOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MnqCredentialSqsSnsCredentials) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// List of permissions associated to this Credential. Only one of permissions may be set.
func (o MnqCredentialSqsSnsCredentialsOutput) Permissions() MnqCredentialSqsSnsCredentialsPermissionsPtrOutput {
	return o.ApplyT(func(v MnqCredentialSqsSnsCredentials) *MnqCredentialSqsSnsCredentialsPermissions {
		return v.Permissions
	}).(MnqCredentialSqsSnsCredentialsPermissionsPtrOutput)
}

// The Secret value of the key.
func (o MnqCredentialSqsSnsCredentialsOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MnqCredentialSqsSnsCredentials) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

type MnqCredentialSqsSnsCredentialsPtrOutput struct{ *pulumi.OutputState }

func (MnqCredentialSqsSnsCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MnqCredentialSqsSnsCredentials)(nil)).Elem()
}

func (o MnqCredentialSqsSnsCredentialsPtrOutput) ToMnqCredentialSqsSnsCredentialsPtrOutput() MnqCredentialSqsSnsCredentialsPtrOutput {
	return o
}

func (o MnqCredentialSqsSnsCredentialsPtrOutput) ToMnqCredentialSqsSnsCredentialsPtrOutputWithContext(ctx context.Context) MnqCredentialSqsSnsCredentialsPtrOutput {
	return o
}

func (o MnqCredentialSqsSnsCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MnqCredentialSqsSnsCredentials] {
	return pulumix.Output[*MnqCredentialSqsSnsCredentials]{
		OutputState: o.OutputState,
	}
}

func (o MnqCredentialSqsSnsCredentialsPtrOutput) Elem() MnqCredentialSqsSnsCredentialsOutput {
	return o.ApplyT(func(v *MnqCredentialSqsSnsCredentials) MnqCredentialSqsSnsCredentials {
		if v != nil {
			return *v
		}
		var ret MnqCredentialSqsSnsCredentials
		return ret
	}).(MnqCredentialSqsSnsCredentialsOutput)
}

// The ID of the key.
func (o MnqCredentialSqsSnsCredentialsPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MnqCredentialSqsSnsCredentials) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

// List of permissions associated to this Credential. Only one of permissions may be set.
func (o MnqCredentialSqsSnsCredentialsPtrOutput) Permissions() MnqCredentialSqsSnsCredentialsPermissionsPtrOutput {
	return o.ApplyT(func(v *MnqCredentialSqsSnsCredentials) *MnqCredentialSqsSnsCredentialsPermissions {
		if v == nil {
			return nil
		}
		return v.Permissions
	}).(MnqCredentialSqsSnsCredentialsPermissionsPtrOutput)
}

// The Secret value of the key.
func (o MnqCredentialSqsSnsCredentialsPtrOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MnqCredentialSqsSnsCredentials) *string {
		if v == nil {
			return nil
		}
		return v.SecretKey
	}).(pulumi.StringPtrOutput)
}

type MnqCredentialSqsSnsCredentialsPermissions struct {
	// . Defines if user can manage the associated resource(s).
	CanManage *bool `pulumi:"canManage"`
	// . Defines if user can publish messages to the service.
	CanPublish *bool `pulumi:"canPublish"`
	// . Defines if user can receive messages from the service.
	CanReceive *bool `pulumi:"canReceive"`
}

// MnqCredentialSqsSnsCredentialsPermissionsInput is an input type that accepts MnqCredentialSqsSnsCredentialsPermissionsArgs and MnqCredentialSqsSnsCredentialsPermissionsOutput values.
// You can construct a concrete instance of `MnqCredentialSqsSnsCredentialsPermissionsInput` via:
//
//	MnqCredentialSqsSnsCredentialsPermissionsArgs{...}
type MnqCredentialSqsSnsCredentialsPermissionsInput interface {
	pulumi.Input

	ToMnqCredentialSqsSnsCredentialsPermissionsOutput() MnqCredentialSqsSnsCredentialsPermissionsOutput
	ToMnqCredentialSqsSnsCredentialsPermissionsOutputWithContext(context.Context) MnqCredentialSqsSnsCredentialsPermissionsOutput
}

type MnqCredentialSqsSnsCredentialsPermissionsArgs struct {
	// . Defines if user can manage the associated resource(s).
	CanManage pulumi.BoolPtrInput `pulumi:"canManage"`
	// . Defines if user can publish messages to the service.
	CanPublish pulumi.BoolPtrInput `pulumi:"canPublish"`
	// . Defines if user can receive messages from the service.
	CanReceive pulumi.BoolPtrInput `pulumi:"canReceive"`
}

func (MnqCredentialSqsSnsCredentialsPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MnqCredentialSqsSnsCredentialsPermissions)(nil)).Elem()
}

func (i MnqCredentialSqsSnsCredentialsPermissionsArgs) ToMnqCredentialSqsSnsCredentialsPermissionsOutput() MnqCredentialSqsSnsCredentialsPermissionsOutput {
	return i.ToMnqCredentialSqsSnsCredentialsPermissionsOutputWithContext(context.Background())
}

func (i MnqCredentialSqsSnsCredentialsPermissionsArgs) ToMnqCredentialSqsSnsCredentialsPermissionsOutputWithContext(ctx context.Context) MnqCredentialSqsSnsCredentialsPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqCredentialSqsSnsCredentialsPermissionsOutput)
}

func (i MnqCredentialSqsSnsCredentialsPermissionsArgs) ToOutput(ctx context.Context) pulumix.Output[MnqCredentialSqsSnsCredentialsPermissions] {
	return pulumix.Output[MnqCredentialSqsSnsCredentialsPermissions]{
		OutputState: i.ToMnqCredentialSqsSnsCredentialsPermissionsOutputWithContext(ctx).OutputState,
	}
}

func (i MnqCredentialSqsSnsCredentialsPermissionsArgs) ToMnqCredentialSqsSnsCredentialsPermissionsPtrOutput() MnqCredentialSqsSnsCredentialsPermissionsPtrOutput {
	return i.ToMnqCredentialSqsSnsCredentialsPermissionsPtrOutputWithContext(context.Background())
}

func (i MnqCredentialSqsSnsCredentialsPermissionsArgs) ToMnqCredentialSqsSnsCredentialsPermissionsPtrOutputWithContext(ctx context.Context) MnqCredentialSqsSnsCredentialsPermissionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqCredentialSqsSnsCredentialsPermissionsOutput).ToMnqCredentialSqsSnsCredentialsPermissionsPtrOutputWithContext(ctx)
}

// MnqCredentialSqsSnsCredentialsPermissionsPtrInput is an input type that accepts MnqCredentialSqsSnsCredentialsPermissionsArgs, MnqCredentialSqsSnsCredentialsPermissionsPtr and MnqCredentialSqsSnsCredentialsPermissionsPtrOutput values.
// You can construct a concrete instance of `MnqCredentialSqsSnsCredentialsPermissionsPtrInput` via:
//
//	        MnqCredentialSqsSnsCredentialsPermissionsArgs{...}
//
//	or:
//
//	        nil
type MnqCredentialSqsSnsCredentialsPermissionsPtrInput interface {
	pulumi.Input

	ToMnqCredentialSqsSnsCredentialsPermissionsPtrOutput() MnqCredentialSqsSnsCredentialsPermissionsPtrOutput
	ToMnqCredentialSqsSnsCredentialsPermissionsPtrOutputWithContext(context.Context) MnqCredentialSqsSnsCredentialsPermissionsPtrOutput
}

type mnqCredentialSqsSnsCredentialsPermissionsPtrType MnqCredentialSqsSnsCredentialsPermissionsArgs

func MnqCredentialSqsSnsCredentialsPermissionsPtr(v *MnqCredentialSqsSnsCredentialsPermissionsArgs) MnqCredentialSqsSnsCredentialsPermissionsPtrInput {
	return (*mnqCredentialSqsSnsCredentialsPermissionsPtrType)(v)
}

func (*mnqCredentialSqsSnsCredentialsPermissionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MnqCredentialSqsSnsCredentialsPermissions)(nil)).Elem()
}

func (i *mnqCredentialSqsSnsCredentialsPermissionsPtrType) ToMnqCredentialSqsSnsCredentialsPermissionsPtrOutput() MnqCredentialSqsSnsCredentialsPermissionsPtrOutput {
	return i.ToMnqCredentialSqsSnsCredentialsPermissionsPtrOutputWithContext(context.Background())
}

func (i *mnqCredentialSqsSnsCredentialsPermissionsPtrType) ToMnqCredentialSqsSnsCredentialsPermissionsPtrOutputWithContext(ctx context.Context) MnqCredentialSqsSnsCredentialsPermissionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqCredentialSqsSnsCredentialsPermissionsPtrOutput)
}

func (i *mnqCredentialSqsSnsCredentialsPermissionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*MnqCredentialSqsSnsCredentialsPermissions] {
	return pulumix.Output[*MnqCredentialSqsSnsCredentialsPermissions]{
		OutputState: i.ToMnqCredentialSqsSnsCredentialsPermissionsPtrOutputWithContext(ctx).OutputState,
	}
}

type MnqCredentialSqsSnsCredentialsPermissionsOutput struct{ *pulumi.OutputState }

func (MnqCredentialSqsSnsCredentialsPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MnqCredentialSqsSnsCredentialsPermissions)(nil)).Elem()
}

func (o MnqCredentialSqsSnsCredentialsPermissionsOutput) ToMnqCredentialSqsSnsCredentialsPermissionsOutput() MnqCredentialSqsSnsCredentialsPermissionsOutput {
	return o
}

func (o MnqCredentialSqsSnsCredentialsPermissionsOutput) ToMnqCredentialSqsSnsCredentialsPermissionsOutputWithContext(ctx context.Context) MnqCredentialSqsSnsCredentialsPermissionsOutput {
	return o
}

func (o MnqCredentialSqsSnsCredentialsPermissionsOutput) ToMnqCredentialSqsSnsCredentialsPermissionsPtrOutput() MnqCredentialSqsSnsCredentialsPermissionsPtrOutput {
	return o.ToMnqCredentialSqsSnsCredentialsPermissionsPtrOutputWithContext(context.Background())
}

func (o MnqCredentialSqsSnsCredentialsPermissionsOutput) ToMnqCredentialSqsSnsCredentialsPermissionsPtrOutputWithContext(ctx context.Context) MnqCredentialSqsSnsCredentialsPermissionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MnqCredentialSqsSnsCredentialsPermissions) *MnqCredentialSqsSnsCredentialsPermissions {
		return &v
	}).(MnqCredentialSqsSnsCredentialsPermissionsPtrOutput)
}

func (o MnqCredentialSqsSnsCredentialsPermissionsOutput) ToOutput(ctx context.Context) pulumix.Output[MnqCredentialSqsSnsCredentialsPermissions] {
	return pulumix.Output[MnqCredentialSqsSnsCredentialsPermissions]{
		OutputState: o.OutputState,
	}
}

// . Defines if user can manage the associated resource(s).
func (o MnqCredentialSqsSnsCredentialsPermissionsOutput) CanManage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MnqCredentialSqsSnsCredentialsPermissions) *bool { return v.CanManage }).(pulumi.BoolPtrOutput)
}

// . Defines if user can publish messages to the service.
func (o MnqCredentialSqsSnsCredentialsPermissionsOutput) CanPublish() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MnqCredentialSqsSnsCredentialsPermissions) *bool { return v.CanPublish }).(pulumi.BoolPtrOutput)
}

// . Defines if user can receive messages from the service.
func (o MnqCredentialSqsSnsCredentialsPermissionsOutput) CanReceive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MnqCredentialSqsSnsCredentialsPermissions) *bool { return v.CanReceive }).(pulumi.BoolPtrOutput)
}

type MnqCredentialSqsSnsCredentialsPermissionsPtrOutput struct{ *pulumi.OutputState }

func (MnqCredentialSqsSnsCredentialsPermissionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MnqCredentialSqsSnsCredentialsPermissions)(nil)).Elem()
}

func (o MnqCredentialSqsSnsCredentialsPermissionsPtrOutput) ToMnqCredentialSqsSnsCredentialsPermissionsPtrOutput() MnqCredentialSqsSnsCredentialsPermissionsPtrOutput {
	return o
}

func (o MnqCredentialSqsSnsCredentialsPermissionsPtrOutput) ToMnqCredentialSqsSnsCredentialsPermissionsPtrOutputWithContext(ctx context.Context) MnqCredentialSqsSnsCredentialsPermissionsPtrOutput {
	return o
}

func (o MnqCredentialSqsSnsCredentialsPermissionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MnqCredentialSqsSnsCredentialsPermissions] {
	return pulumix.Output[*MnqCredentialSqsSnsCredentialsPermissions]{
		OutputState: o.OutputState,
	}
}

func (o MnqCredentialSqsSnsCredentialsPermissionsPtrOutput) Elem() MnqCredentialSqsSnsCredentialsPermissionsOutput {
	return o.ApplyT(func(v *MnqCredentialSqsSnsCredentialsPermissions) MnqCredentialSqsSnsCredentialsPermissions {
		if v != nil {
			return *v
		}
		var ret MnqCredentialSqsSnsCredentialsPermissions
		return ret
	}).(MnqCredentialSqsSnsCredentialsPermissionsOutput)
}

// . Defines if user can manage the associated resource(s).
func (o MnqCredentialSqsSnsCredentialsPermissionsPtrOutput) CanManage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MnqCredentialSqsSnsCredentialsPermissions) *bool {
		if v == nil {
			return nil
		}
		return v.CanManage
	}).(pulumi.BoolPtrOutput)
}

// . Defines if user can publish messages to the service.
func (o MnqCredentialSqsSnsCredentialsPermissionsPtrOutput) CanPublish() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MnqCredentialSqsSnsCredentialsPermissions) *bool {
		if v == nil {
			return nil
		}
		return v.CanPublish
	}).(pulumi.BoolPtrOutput)
}

// . Defines if user can receive messages from the service.
func (o MnqCredentialSqsSnsCredentialsPermissionsPtrOutput) CanReceive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MnqCredentialSqsSnsCredentialsPermissions) *bool {
		if v == nil {
			return nil
		}
		return v.CanReceive
	}).(pulumi.BoolPtrOutput)
}

type MnqQueueNats struct {
	Credentials     string  `pulumi:"credentials"`
	Endpoint        *string `pulumi:"endpoint"`
	RetentionPolicy *string `pulumi:"retentionPolicy"`
}

// MnqQueueNatsInput is an input type that accepts MnqQueueNatsArgs and MnqQueueNatsOutput values.
// You can construct a concrete instance of `MnqQueueNatsInput` via:
//
//	MnqQueueNatsArgs{...}
type MnqQueueNatsInput interface {
	pulumi.Input

	ToMnqQueueNatsOutput() MnqQueueNatsOutput
	ToMnqQueueNatsOutputWithContext(context.Context) MnqQueueNatsOutput
}

type MnqQueueNatsArgs struct {
	Credentials     pulumi.StringInput    `pulumi:"credentials"`
	Endpoint        pulumi.StringPtrInput `pulumi:"endpoint"`
	RetentionPolicy pulumi.StringPtrInput `pulumi:"retentionPolicy"`
}

func (MnqQueueNatsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MnqQueueNats)(nil)).Elem()
}

func (i MnqQueueNatsArgs) ToMnqQueueNatsOutput() MnqQueueNatsOutput {
	return i.ToMnqQueueNatsOutputWithContext(context.Background())
}

func (i MnqQueueNatsArgs) ToMnqQueueNatsOutputWithContext(ctx context.Context) MnqQueueNatsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqQueueNatsOutput)
}

func (i MnqQueueNatsArgs) ToOutput(ctx context.Context) pulumix.Output[MnqQueueNats] {
	return pulumix.Output[MnqQueueNats]{
		OutputState: i.ToMnqQueueNatsOutputWithContext(ctx).OutputState,
	}
}

func (i MnqQueueNatsArgs) ToMnqQueueNatsPtrOutput() MnqQueueNatsPtrOutput {
	return i.ToMnqQueueNatsPtrOutputWithContext(context.Background())
}

func (i MnqQueueNatsArgs) ToMnqQueueNatsPtrOutputWithContext(ctx context.Context) MnqQueueNatsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqQueueNatsOutput).ToMnqQueueNatsPtrOutputWithContext(ctx)
}

// MnqQueueNatsPtrInput is an input type that accepts MnqQueueNatsArgs, MnqQueueNatsPtr and MnqQueueNatsPtrOutput values.
// You can construct a concrete instance of `MnqQueueNatsPtrInput` via:
//
//	        MnqQueueNatsArgs{...}
//
//	or:
//
//	        nil
type MnqQueueNatsPtrInput interface {
	pulumi.Input

	ToMnqQueueNatsPtrOutput() MnqQueueNatsPtrOutput
	ToMnqQueueNatsPtrOutputWithContext(context.Context) MnqQueueNatsPtrOutput
}

type mnqQueueNatsPtrType MnqQueueNatsArgs

func MnqQueueNatsPtr(v *MnqQueueNatsArgs) MnqQueueNatsPtrInput {
	return (*mnqQueueNatsPtrType)(v)
}

func (*mnqQueueNatsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MnqQueueNats)(nil)).Elem()
}

func (i *mnqQueueNatsPtrType) ToMnqQueueNatsPtrOutput() MnqQueueNatsPtrOutput {
	return i.ToMnqQueueNatsPtrOutputWithContext(context.Background())
}

func (i *mnqQueueNatsPtrType) ToMnqQueueNatsPtrOutputWithContext(ctx context.Context) MnqQueueNatsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqQueueNatsPtrOutput)
}

func (i *mnqQueueNatsPtrType) ToOutput(ctx context.Context) pulumix.Output[*MnqQueueNats] {
	return pulumix.Output[*MnqQueueNats]{
		OutputState: i.ToMnqQueueNatsPtrOutputWithContext(ctx).OutputState,
	}
}

type MnqQueueNatsOutput struct{ *pulumi.OutputState }

func (MnqQueueNatsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MnqQueueNats)(nil)).Elem()
}

func (o MnqQueueNatsOutput) ToMnqQueueNatsOutput() MnqQueueNatsOutput {
	return o
}

func (o MnqQueueNatsOutput) ToMnqQueueNatsOutputWithContext(ctx context.Context) MnqQueueNatsOutput {
	return o
}

func (o MnqQueueNatsOutput) ToMnqQueueNatsPtrOutput() MnqQueueNatsPtrOutput {
	return o.ToMnqQueueNatsPtrOutputWithContext(context.Background())
}

func (o MnqQueueNatsOutput) ToMnqQueueNatsPtrOutputWithContext(ctx context.Context) MnqQueueNatsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MnqQueueNats) *MnqQueueNats {
		return &v
	}).(MnqQueueNatsPtrOutput)
}

func (o MnqQueueNatsOutput) ToOutput(ctx context.Context) pulumix.Output[MnqQueueNats] {
	return pulumix.Output[MnqQueueNats]{
		OutputState: o.OutputState,
	}
}

func (o MnqQueueNatsOutput) Credentials() pulumi.StringOutput {
	return o.ApplyT(func(v MnqQueueNats) string { return v.Credentials }).(pulumi.StringOutput)
}

func (o MnqQueueNatsOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MnqQueueNats) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

func (o MnqQueueNatsOutput) RetentionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MnqQueueNats) *string { return v.RetentionPolicy }).(pulumi.StringPtrOutput)
}

type MnqQueueNatsPtrOutput struct{ *pulumi.OutputState }

func (MnqQueueNatsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MnqQueueNats)(nil)).Elem()
}

func (o MnqQueueNatsPtrOutput) ToMnqQueueNatsPtrOutput() MnqQueueNatsPtrOutput {
	return o
}

func (o MnqQueueNatsPtrOutput) ToMnqQueueNatsPtrOutputWithContext(ctx context.Context) MnqQueueNatsPtrOutput {
	return o
}

func (o MnqQueueNatsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MnqQueueNats] {
	return pulumix.Output[*MnqQueueNats]{
		OutputState: o.OutputState,
	}
}

func (o MnqQueueNatsPtrOutput) Elem() MnqQueueNatsOutput {
	return o.ApplyT(func(v *MnqQueueNats) MnqQueueNats {
		if v != nil {
			return *v
		}
		var ret MnqQueueNats
		return ret
	}).(MnqQueueNatsOutput)
}

func (o MnqQueueNatsPtrOutput) Credentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MnqQueueNats) *string {
		if v == nil {
			return nil
		}
		return &v.Credentials
	}).(pulumi.StringPtrOutput)
}

func (o MnqQueueNatsPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MnqQueueNats) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

func (o MnqQueueNatsPtrOutput) RetentionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MnqQueueNats) *string {
		if v == nil {
			return nil
		}
		return v.RetentionPolicy
	}).(pulumi.StringPtrOutput)
}

type MnqQueueSqs struct {
	AccessKey                 string  `pulumi:"accessKey"`
	ContentBasedDeduplication *bool   `pulumi:"contentBasedDeduplication"`
	Endpoint                  *string `pulumi:"endpoint"`
	FifoQueue                 *bool   `pulumi:"fifoQueue"`
	ReceiveWaitTimeSeconds    *int    `pulumi:"receiveWaitTimeSeconds"`
	SecretKey                 string  `pulumi:"secretKey"`
	Url                       *string `pulumi:"url"`
	VisibilityTimeoutSeconds  *int    `pulumi:"visibilityTimeoutSeconds"`
}

// MnqQueueSqsInput is an input type that accepts MnqQueueSqsArgs and MnqQueueSqsOutput values.
// You can construct a concrete instance of `MnqQueueSqsInput` via:
//
//	MnqQueueSqsArgs{...}
type MnqQueueSqsInput interface {
	pulumi.Input

	ToMnqQueueSqsOutput() MnqQueueSqsOutput
	ToMnqQueueSqsOutputWithContext(context.Context) MnqQueueSqsOutput
}

type MnqQueueSqsArgs struct {
	AccessKey                 pulumi.StringInput    `pulumi:"accessKey"`
	ContentBasedDeduplication pulumi.BoolPtrInput   `pulumi:"contentBasedDeduplication"`
	Endpoint                  pulumi.StringPtrInput `pulumi:"endpoint"`
	FifoQueue                 pulumi.BoolPtrInput   `pulumi:"fifoQueue"`
	ReceiveWaitTimeSeconds    pulumi.IntPtrInput    `pulumi:"receiveWaitTimeSeconds"`
	SecretKey                 pulumi.StringInput    `pulumi:"secretKey"`
	Url                       pulumi.StringPtrInput `pulumi:"url"`
	VisibilityTimeoutSeconds  pulumi.IntPtrInput    `pulumi:"visibilityTimeoutSeconds"`
}

func (MnqQueueSqsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MnqQueueSqs)(nil)).Elem()
}

func (i MnqQueueSqsArgs) ToMnqQueueSqsOutput() MnqQueueSqsOutput {
	return i.ToMnqQueueSqsOutputWithContext(context.Background())
}

func (i MnqQueueSqsArgs) ToMnqQueueSqsOutputWithContext(ctx context.Context) MnqQueueSqsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqQueueSqsOutput)
}

func (i MnqQueueSqsArgs) ToOutput(ctx context.Context) pulumix.Output[MnqQueueSqs] {
	return pulumix.Output[MnqQueueSqs]{
		OutputState: i.ToMnqQueueSqsOutputWithContext(ctx).OutputState,
	}
}

func (i MnqQueueSqsArgs) ToMnqQueueSqsPtrOutput() MnqQueueSqsPtrOutput {
	return i.ToMnqQueueSqsPtrOutputWithContext(context.Background())
}

func (i MnqQueueSqsArgs) ToMnqQueueSqsPtrOutputWithContext(ctx context.Context) MnqQueueSqsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqQueueSqsOutput).ToMnqQueueSqsPtrOutputWithContext(ctx)
}

// MnqQueueSqsPtrInput is an input type that accepts MnqQueueSqsArgs, MnqQueueSqsPtr and MnqQueueSqsPtrOutput values.
// You can construct a concrete instance of `MnqQueueSqsPtrInput` via:
//
//	        MnqQueueSqsArgs{...}
//
//	or:
//
//	        nil
type MnqQueueSqsPtrInput interface {
	pulumi.Input

	ToMnqQueueSqsPtrOutput() MnqQueueSqsPtrOutput
	ToMnqQueueSqsPtrOutputWithContext(context.Context) MnqQueueSqsPtrOutput
}

type mnqQueueSqsPtrType MnqQueueSqsArgs

func MnqQueueSqsPtr(v *MnqQueueSqsArgs) MnqQueueSqsPtrInput {
	return (*mnqQueueSqsPtrType)(v)
}

func (*mnqQueueSqsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MnqQueueSqs)(nil)).Elem()
}

func (i *mnqQueueSqsPtrType) ToMnqQueueSqsPtrOutput() MnqQueueSqsPtrOutput {
	return i.ToMnqQueueSqsPtrOutputWithContext(context.Background())
}

func (i *mnqQueueSqsPtrType) ToMnqQueueSqsPtrOutputWithContext(ctx context.Context) MnqQueueSqsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqQueueSqsPtrOutput)
}

func (i *mnqQueueSqsPtrType) ToOutput(ctx context.Context) pulumix.Output[*MnqQueueSqs] {
	return pulumix.Output[*MnqQueueSqs]{
		OutputState: i.ToMnqQueueSqsPtrOutputWithContext(ctx).OutputState,
	}
}

type MnqQueueSqsOutput struct{ *pulumi.OutputState }

func (MnqQueueSqsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MnqQueueSqs)(nil)).Elem()
}

func (o MnqQueueSqsOutput) ToMnqQueueSqsOutput() MnqQueueSqsOutput {
	return o
}

func (o MnqQueueSqsOutput) ToMnqQueueSqsOutputWithContext(ctx context.Context) MnqQueueSqsOutput {
	return o
}

func (o MnqQueueSqsOutput) ToMnqQueueSqsPtrOutput() MnqQueueSqsPtrOutput {
	return o.ToMnqQueueSqsPtrOutputWithContext(context.Background())
}

func (o MnqQueueSqsOutput) ToMnqQueueSqsPtrOutputWithContext(ctx context.Context) MnqQueueSqsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MnqQueueSqs) *MnqQueueSqs {
		return &v
	}).(MnqQueueSqsPtrOutput)
}

func (o MnqQueueSqsOutput) ToOutput(ctx context.Context) pulumix.Output[MnqQueueSqs] {
	return pulumix.Output[MnqQueueSqs]{
		OutputState: o.OutputState,
	}
}

func (o MnqQueueSqsOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v MnqQueueSqs) string { return v.AccessKey }).(pulumi.StringOutput)
}

func (o MnqQueueSqsOutput) ContentBasedDeduplication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MnqQueueSqs) *bool { return v.ContentBasedDeduplication }).(pulumi.BoolPtrOutput)
}

func (o MnqQueueSqsOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MnqQueueSqs) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

func (o MnqQueueSqsOutput) FifoQueue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MnqQueueSqs) *bool { return v.FifoQueue }).(pulumi.BoolPtrOutput)
}

func (o MnqQueueSqsOutput) ReceiveWaitTimeSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MnqQueueSqs) *int { return v.ReceiveWaitTimeSeconds }).(pulumi.IntPtrOutput)
}

func (o MnqQueueSqsOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v MnqQueueSqs) string { return v.SecretKey }).(pulumi.StringOutput)
}

func (o MnqQueueSqsOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MnqQueueSqs) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o MnqQueueSqsOutput) VisibilityTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MnqQueueSqs) *int { return v.VisibilityTimeoutSeconds }).(pulumi.IntPtrOutput)
}

type MnqQueueSqsPtrOutput struct{ *pulumi.OutputState }

func (MnqQueueSqsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MnqQueueSqs)(nil)).Elem()
}

func (o MnqQueueSqsPtrOutput) ToMnqQueueSqsPtrOutput() MnqQueueSqsPtrOutput {
	return o
}

func (o MnqQueueSqsPtrOutput) ToMnqQueueSqsPtrOutputWithContext(ctx context.Context) MnqQueueSqsPtrOutput {
	return o
}

func (o MnqQueueSqsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MnqQueueSqs] {
	return pulumix.Output[*MnqQueueSqs]{
		OutputState: o.OutputState,
	}
}

func (o MnqQueueSqsPtrOutput) Elem() MnqQueueSqsOutput {
	return o.ApplyT(func(v *MnqQueueSqs) MnqQueueSqs {
		if v != nil {
			return *v
		}
		var ret MnqQueueSqs
		return ret
	}).(MnqQueueSqsOutput)
}

func (o MnqQueueSqsPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MnqQueueSqs) *string {
		if v == nil {
			return nil
		}
		return &v.AccessKey
	}).(pulumi.StringPtrOutput)
}

func (o MnqQueueSqsPtrOutput) ContentBasedDeduplication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MnqQueueSqs) *bool {
		if v == nil {
			return nil
		}
		return v.ContentBasedDeduplication
	}).(pulumi.BoolPtrOutput)
}

func (o MnqQueueSqsPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MnqQueueSqs) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

func (o MnqQueueSqsPtrOutput) FifoQueue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MnqQueueSqs) *bool {
		if v == nil {
			return nil
		}
		return v.FifoQueue
	}).(pulumi.BoolPtrOutput)
}

func (o MnqQueueSqsPtrOutput) ReceiveWaitTimeSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MnqQueueSqs) *int {
		if v == nil {
			return nil
		}
		return v.ReceiveWaitTimeSeconds
	}).(pulumi.IntPtrOutput)
}

func (o MnqQueueSqsPtrOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MnqQueueSqs) *string {
		if v == nil {
			return nil
		}
		return &v.SecretKey
	}).(pulumi.StringPtrOutput)
}

func (o MnqQueueSqsPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MnqQueueSqs) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

func (o MnqQueueSqsPtrOutput) VisibilityTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MnqQueueSqs) *int {
		if v == nil {
			return nil
		}
		return v.VisibilityTimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

type ObjectBucketAclAccessControlPolicy struct {
	Grants []ObjectBucketAclAccessControlPolicyGrant `pulumi:"grants"`
	Owner  ObjectBucketAclAccessControlPolicyOwner   `pulumi:"owner"`
}

// ObjectBucketAclAccessControlPolicyInput is an input type that accepts ObjectBucketAclAccessControlPolicyArgs and ObjectBucketAclAccessControlPolicyOutput values.
// You can construct a concrete instance of `ObjectBucketAclAccessControlPolicyInput` via:
//
//	ObjectBucketAclAccessControlPolicyArgs{...}
type ObjectBucketAclAccessControlPolicyInput interface {
	pulumi.Input

	ToObjectBucketAclAccessControlPolicyOutput() ObjectBucketAclAccessControlPolicyOutput
	ToObjectBucketAclAccessControlPolicyOutputWithContext(context.Context) ObjectBucketAclAccessControlPolicyOutput
}

type ObjectBucketAclAccessControlPolicyArgs struct {
	Grants ObjectBucketAclAccessControlPolicyGrantArrayInput `pulumi:"grants"`
	Owner  ObjectBucketAclAccessControlPolicyOwnerInput      `pulumi:"owner"`
}

func (ObjectBucketAclAccessControlPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketAclAccessControlPolicy)(nil)).Elem()
}

func (i ObjectBucketAclAccessControlPolicyArgs) ToObjectBucketAclAccessControlPolicyOutput() ObjectBucketAclAccessControlPolicyOutput {
	return i.ToObjectBucketAclAccessControlPolicyOutputWithContext(context.Background())
}

func (i ObjectBucketAclAccessControlPolicyArgs) ToObjectBucketAclAccessControlPolicyOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketAclAccessControlPolicyOutput)
}

func (i ObjectBucketAclAccessControlPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketAclAccessControlPolicy] {
	return pulumix.Output[ObjectBucketAclAccessControlPolicy]{
		OutputState: i.ToObjectBucketAclAccessControlPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i ObjectBucketAclAccessControlPolicyArgs) ToObjectBucketAclAccessControlPolicyPtrOutput() ObjectBucketAclAccessControlPolicyPtrOutput {
	return i.ToObjectBucketAclAccessControlPolicyPtrOutputWithContext(context.Background())
}

func (i ObjectBucketAclAccessControlPolicyArgs) ToObjectBucketAclAccessControlPolicyPtrOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketAclAccessControlPolicyOutput).ToObjectBucketAclAccessControlPolicyPtrOutputWithContext(ctx)
}

// ObjectBucketAclAccessControlPolicyPtrInput is an input type that accepts ObjectBucketAclAccessControlPolicyArgs, ObjectBucketAclAccessControlPolicyPtr and ObjectBucketAclAccessControlPolicyPtrOutput values.
// You can construct a concrete instance of `ObjectBucketAclAccessControlPolicyPtrInput` via:
//
//	        ObjectBucketAclAccessControlPolicyArgs{...}
//
//	or:
//
//	        nil
type ObjectBucketAclAccessControlPolicyPtrInput interface {
	pulumi.Input

	ToObjectBucketAclAccessControlPolicyPtrOutput() ObjectBucketAclAccessControlPolicyPtrOutput
	ToObjectBucketAclAccessControlPolicyPtrOutputWithContext(context.Context) ObjectBucketAclAccessControlPolicyPtrOutput
}

type objectBucketAclAccessControlPolicyPtrType ObjectBucketAclAccessControlPolicyArgs

func ObjectBucketAclAccessControlPolicyPtr(v *ObjectBucketAclAccessControlPolicyArgs) ObjectBucketAclAccessControlPolicyPtrInput {
	return (*objectBucketAclAccessControlPolicyPtrType)(v)
}

func (*objectBucketAclAccessControlPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectBucketAclAccessControlPolicy)(nil)).Elem()
}

func (i *objectBucketAclAccessControlPolicyPtrType) ToObjectBucketAclAccessControlPolicyPtrOutput() ObjectBucketAclAccessControlPolicyPtrOutput {
	return i.ToObjectBucketAclAccessControlPolicyPtrOutputWithContext(context.Background())
}

func (i *objectBucketAclAccessControlPolicyPtrType) ToObjectBucketAclAccessControlPolicyPtrOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketAclAccessControlPolicyPtrOutput)
}

func (i *objectBucketAclAccessControlPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*ObjectBucketAclAccessControlPolicy] {
	return pulumix.Output[*ObjectBucketAclAccessControlPolicy]{
		OutputState: i.ToObjectBucketAclAccessControlPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type ObjectBucketAclAccessControlPolicyOutput struct{ *pulumi.OutputState }

func (ObjectBucketAclAccessControlPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketAclAccessControlPolicy)(nil)).Elem()
}

func (o ObjectBucketAclAccessControlPolicyOutput) ToObjectBucketAclAccessControlPolicyOutput() ObjectBucketAclAccessControlPolicyOutput {
	return o
}

func (o ObjectBucketAclAccessControlPolicyOutput) ToObjectBucketAclAccessControlPolicyOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyOutput {
	return o
}

func (o ObjectBucketAclAccessControlPolicyOutput) ToObjectBucketAclAccessControlPolicyPtrOutput() ObjectBucketAclAccessControlPolicyPtrOutput {
	return o.ToObjectBucketAclAccessControlPolicyPtrOutputWithContext(context.Background())
}

func (o ObjectBucketAclAccessControlPolicyOutput) ToObjectBucketAclAccessControlPolicyPtrOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectBucketAclAccessControlPolicy) *ObjectBucketAclAccessControlPolicy {
		return &v
	}).(ObjectBucketAclAccessControlPolicyPtrOutput)
}

func (o ObjectBucketAclAccessControlPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketAclAccessControlPolicy] {
	return pulumix.Output[ObjectBucketAclAccessControlPolicy]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketAclAccessControlPolicyOutput) Grants() ObjectBucketAclAccessControlPolicyGrantArrayOutput {
	return o.ApplyT(func(v ObjectBucketAclAccessControlPolicy) []ObjectBucketAclAccessControlPolicyGrant { return v.Grants }).(ObjectBucketAclAccessControlPolicyGrantArrayOutput)
}

func (o ObjectBucketAclAccessControlPolicyOutput) Owner() ObjectBucketAclAccessControlPolicyOwnerOutput {
	return o.ApplyT(func(v ObjectBucketAclAccessControlPolicy) ObjectBucketAclAccessControlPolicyOwner { return v.Owner }).(ObjectBucketAclAccessControlPolicyOwnerOutput)
}

type ObjectBucketAclAccessControlPolicyPtrOutput struct{ *pulumi.OutputState }

func (ObjectBucketAclAccessControlPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectBucketAclAccessControlPolicy)(nil)).Elem()
}

func (o ObjectBucketAclAccessControlPolicyPtrOutput) ToObjectBucketAclAccessControlPolicyPtrOutput() ObjectBucketAclAccessControlPolicyPtrOutput {
	return o
}

func (o ObjectBucketAclAccessControlPolicyPtrOutput) ToObjectBucketAclAccessControlPolicyPtrOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyPtrOutput {
	return o
}

func (o ObjectBucketAclAccessControlPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ObjectBucketAclAccessControlPolicy] {
	return pulumix.Output[*ObjectBucketAclAccessControlPolicy]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketAclAccessControlPolicyPtrOutput) Elem() ObjectBucketAclAccessControlPolicyOutput {
	return o.ApplyT(func(v *ObjectBucketAclAccessControlPolicy) ObjectBucketAclAccessControlPolicy {
		if v != nil {
			return *v
		}
		var ret ObjectBucketAclAccessControlPolicy
		return ret
	}).(ObjectBucketAclAccessControlPolicyOutput)
}

func (o ObjectBucketAclAccessControlPolicyPtrOutput) Grants() ObjectBucketAclAccessControlPolicyGrantArrayOutput {
	return o.ApplyT(func(v *ObjectBucketAclAccessControlPolicy) []ObjectBucketAclAccessControlPolicyGrant {
		if v == nil {
			return nil
		}
		return v.Grants
	}).(ObjectBucketAclAccessControlPolicyGrantArrayOutput)
}

func (o ObjectBucketAclAccessControlPolicyPtrOutput) Owner() ObjectBucketAclAccessControlPolicyOwnerPtrOutput {
	return o.ApplyT(func(v *ObjectBucketAclAccessControlPolicy) *ObjectBucketAclAccessControlPolicyOwner {
		if v == nil {
			return nil
		}
		return &v.Owner
	}).(ObjectBucketAclAccessControlPolicyOwnerPtrOutput)
}

type ObjectBucketAclAccessControlPolicyGrant struct {
	Grantee    *ObjectBucketAclAccessControlPolicyGrantGrantee `pulumi:"grantee"`
	Permission string                                          `pulumi:"permission"`
}

// ObjectBucketAclAccessControlPolicyGrantInput is an input type that accepts ObjectBucketAclAccessControlPolicyGrantArgs and ObjectBucketAclAccessControlPolicyGrantOutput values.
// You can construct a concrete instance of `ObjectBucketAclAccessControlPolicyGrantInput` via:
//
//	ObjectBucketAclAccessControlPolicyGrantArgs{...}
type ObjectBucketAclAccessControlPolicyGrantInput interface {
	pulumi.Input

	ToObjectBucketAclAccessControlPolicyGrantOutput() ObjectBucketAclAccessControlPolicyGrantOutput
	ToObjectBucketAclAccessControlPolicyGrantOutputWithContext(context.Context) ObjectBucketAclAccessControlPolicyGrantOutput
}

type ObjectBucketAclAccessControlPolicyGrantArgs struct {
	Grantee    ObjectBucketAclAccessControlPolicyGrantGranteePtrInput `pulumi:"grantee"`
	Permission pulumi.StringInput                                     `pulumi:"permission"`
}

func (ObjectBucketAclAccessControlPolicyGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketAclAccessControlPolicyGrant)(nil)).Elem()
}

func (i ObjectBucketAclAccessControlPolicyGrantArgs) ToObjectBucketAclAccessControlPolicyGrantOutput() ObjectBucketAclAccessControlPolicyGrantOutput {
	return i.ToObjectBucketAclAccessControlPolicyGrantOutputWithContext(context.Background())
}

func (i ObjectBucketAclAccessControlPolicyGrantArgs) ToObjectBucketAclAccessControlPolicyGrantOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketAclAccessControlPolicyGrantOutput)
}

func (i ObjectBucketAclAccessControlPolicyGrantArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketAclAccessControlPolicyGrant] {
	return pulumix.Output[ObjectBucketAclAccessControlPolicyGrant]{
		OutputState: i.ToObjectBucketAclAccessControlPolicyGrantOutputWithContext(ctx).OutputState,
	}
}

// ObjectBucketAclAccessControlPolicyGrantArrayInput is an input type that accepts ObjectBucketAclAccessControlPolicyGrantArray and ObjectBucketAclAccessControlPolicyGrantArrayOutput values.
// You can construct a concrete instance of `ObjectBucketAclAccessControlPolicyGrantArrayInput` via:
//
//	ObjectBucketAclAccessControlPolicyGrantArray{ ObjectBucketAclAccessControlPolicyGrantArgs{...} }
type ObjectBucketAclAccessControlPolicyGrantArrayInput interface {
	pulumi.Input

	ToObjectBucketAclAccessControlPolicyGrantArrayOutput() ObjectBucketAclAccessControlPolicyGrantArrayOutput
	ToObjectBucketAclAccessControlPolicyGrantArrayOutputWithContext(context.Context) ObjectBucketAclAccessControlPolicyGrantArrayOutput
}

type ObjectBucketAclAccessControlPolicyGrantArray []ObjectBucketAclAccessControlPolicyGrantInput

func (ObjectBucketAclAccessControlPolicyGrantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectBucketAclAccessControlPolicyGrant)(nil)).Elem()
}

func (i ObjectBucketAclAccessControlPolicyGrantArray) ToObjectBucketAclAccessControlPolicyGrantArrayOutput() ObjectBucketAclAccessControlPolicyGrantArrayOutput {
	return i.ToObjectBucketAclAccessControlPolicyGrantArrayOutputWithContext(context.Background())
}

func (i ObjectBucketAclAccessControlPolicyGrantArray) ToObjectBucketAclAccessControlPolicyGrantArrayOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyGrantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketAclAccessControlPolicyGrantArrayOutput)
}

func (i ObjectBucketAclAccessControlPolicyGrantArray) ToOutput(ctx context.Context) pulumix.Output[[]ObjectBucketAclAccessControlPolicyGrant] {
	return pulumix.Output[[]ObjectBucketAclAccessControlPolicyGrant]{
		OutputState: i.ToObjectBucketAclAccessControlPolicyGrantArrayOutputWithContext(ctx).OutputState,
	}
}

type ObjectBucketAclAccessControlPolicyGrantOutput struct{ *pulumi.OutputState }

func (ObjectBucketAclAccessControlPolicyGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketAclAccessControlPolicyGrant)(nil)).Elem()
}

func (o ObjectBucketAclAccessControlPolicyGrantOutput) ToObjectBucketAclAccessControlPolicyGrantOutput() ObjectBucketAclAccessControlPolicyGrantOutput {
	return o
}

func (o ObjectBucketAclAccessControlPolicyGrantOutput) ToObjectBucketAclAccessControlPolicyGrantOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyGrantOutput {
	return o
}

func (o ObjectBucketAclAccessControlPolicyGrantOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketAclAccessControlPolicyGrant] {
	return pulumix.Output[ObjectBucketAclAccessControlPolicyGrant]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketAclAccessControlPolicyGrantOutput) Grantee() ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput {
	return o.ApplyT(func(v ObjectBucketAclAccessControlPolicyGrant) *ObjectBucketAclAccessControlPolicyGrantGrantee {
		return v.Grantee
	}).(ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput)
}

func (o ObjectBucketAclAccessControlPolicyGrantOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectBucketAclAccessControlPolicyGrant) string { return v.Permission }).(pulumi.StringOutput)
}

type ObjectBucketAclAccessControlPolicyGrantArrayOutput struct{ *pulumi.OutputState }

func (ObjectBucketAclAccessControlPolicyGrantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectBucketAclAccessControlPolicyGrant)(nil)).Elem()
}

func (o ObjectBucketAclAccessControlPolicyGrantArrayOutput) ToObjectBucketAclAccessControlPolicyGrantArrayOutput() ObjectBucketAclAccessControlPolicyGrantArrayOutput {
	return o
}

func (o ObjectBucketAclAccessControlPolicyGrantArrayOutput) ToObjectBucketAclAccessControlPolicyGrantArrayOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyGrantArrayOutput {
	return o
}

func (o ObjectBucketAclAccessControlPolicyGrantArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ObjectBucketAclAccessControlPolicyGrant] {
	return pulumix.Output[[]ObjectBucketAclAccessControlPolicyGrant]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketAclAccessControlPolicyGrantArrayOutput) Index(i pulumi.IntInput) ObjectBucketAclAccessControlPolicyGrantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObjectBucketAclAccessControlPolicyGrant {
		return vs[0].([]ObjectBucketAclAccessControlPolicyGrant)[vs[1].(int)]
	}).(ObjectBucketAclAccessControlPolicyGrantOutput)
}

type ObjectBucketAclAccessControlPolicyGrantGrantee struct {
	DisplayName *string `pulumi:"displayName"`
	// The `region`,`bucket` and `acl` separated by (`/`).
	Id   string `pulumi:"id"`
	Type string `pulumi:"type"`
}

// ObjectBucketAclAccessControlPolicyGrantGranteeInput is an input type that accepts ObjectBucketAclAccessControlPolicyGrantGranteeArgs and ObjectBucketAclAccessControlPolicyGrantGranteeOutput values.
// You can construct a concrete instance of `ObjectBucketAclAccessControlPolicyGrantGranteeInput` via:
//
//	ObjectBucketAclAccessControlPolicyGrantGranteeArgs{...}
type ObjectBucketAclAccessControlPolicyGrantGranteeInput interface {
	pulumi.Input

	ToObjectBucketAclAccessControlPolicyGrantGranteeOutput() ObjectBucketAclAccessControlPolicyGrantGranteeOutput
	ToObjectBucketAclAccessControlPolicyGrantGranteeOutputWithContext(context.Context) ObjectBucketAclAccessControlPolicyGrantGranteeOutput
}

type ObjectBucketAclAccessControlPolicyGrantGranteeArgs struct {
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The `region`,`bucket` and `acl` separated by (`/`).
	Id   pulumi.StringInput `pulumi:"id"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (ObjectBucketAclAccessControlPolicyGrantGranteeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketAclAccessControlPolicyGrantGrantee)(nil)).Elem()
}

func (i ObjectBucketAclAccessControlPolicyGrantGranteeArgs) ToObjectBucketAclAccessControlPolicyGrantGranteeOutput() ObjectBucketAclAccessControlPolicyGrantGranteeOutput {
	return i.ToObjectBucketAclAccessControlPolicyGrantGranteeOutputWithContext(context.Background())
}

func (i ObjectBucketAclAccessControlPolicyGrantGranteeArgs) ToObjectBucketAclAccessControlPolicyGrantGranteeOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyGrantGranteeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketAclAccessControlPolicyGrantGranteeOutput)
}

func (i ObjectBucketAclAccessControlPolicyGrantGranteeArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketAclAccessControlPolicyGrantGrantee] {
	return pulumix.Output[ObjectBucketAclAccessControlPolicyGrantGrantee]{
		OutputState: i.ToObjectBucketAclAccessControlPolicyGrantGranteeOutputWithContext(ctx).OutputState,
	}
}

func (i ObjectBucketAclAccessControlPolicyGrantGranteeArgs) ToObjectBucketAclAccessControlPolicyGrantGranteePtrOutput() ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput {
	return i.ToObjectBucketAclAccessControlPolicyGrantGranteePtrOutputWithContext(context.Background())
}

func (i ObjectBucketAclAccessControlPolicyGrantGranteeArgs) ToObjectBucketAclAccessControlPolicyGrantGranteePtrOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketAclAccessControlPolicyGrantGranteeOutput).ToObjectBucketAclAccessControlPolicyGrantGranteePtrOutputWithContext(ctx)
}

// ObjectBucketAclAccessControlPolicyGrantGranteePtrInput is an input type that accepts ObjectBucketAclAccessControlPolicyGrantGranteeArgs, ObjectBucketAclAccessControlPolicyGrantGranteePtr and ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput values.
// You can construct a concrete instance of `ObjectBucketAclAccessControlPolicyGrantGranteePtrInput` via:
//
//	        ObjectBucketAclAccessControlPolicyGrantGranteeArgs{...}
//
//	or:
//
//	        nil
type ObjectBucketAclAccessControlPolicyGrantGranteePtrInput interface {
	pulumi.Input

	ToObjectBucketAclAccessControlPolicyGrantGranteePtrOutput() ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput
	ToObjectBucketAclAccessControlPolicyGrantGranteePtrOutputWithContext(context.Context) ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput
}

type objectBucketAclAccessControlPolicyGrantGranteePtrType ObjectBucketAclAccessControlPolicyGrantGranteeArgs

func ObjectBucketAclAccessControlPolicyGrantGranteePtr(v *ObjectBucketAclAccessControlPolicyGrantGranteeArgs) ObjectBucketAclAccessControlPolicyGrantGranteePtrInput {
	return (*objectBucketAclAccessControlPolicyGrantGranteePtrType)(v)
}

func (*objectBucketAclAccessControlPolicyGrantGranteePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectBucketAclAccessControlPolicyGrantGrantee)(nil)).Elem()
}

func (i *objectBucketAclAccessControlPolicyGrantGranteePtrType) ToObjectBucketAclAccessControlPolicyGrantGranteePtrOutput() ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput {
	return i.ToObjectBucketAclAccessControlPolicyGrantGranteePtrOutputWithContext(context.Background())
}

func (i *objectBucketAclAccessControlPolicyGrantGranteePtrType) ToObjectBucketAclAccessControlPolicyGrantGranteePtrOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput)
}

func (i *objectBucketAclAccessControlPolicyGrantGranteePtrType) ToOutput(ctx context.Context) pulumix.Output[*ObjectBucketAclAccessControlPolicyGrantGrantee] {
	return pulumix.Output[*ObjectBucketAclAccessControlPolicyGrantGrantee]{
		OutputState: i.ToObjectBucketAclAccessControlPolicyGrantGranteePtrOutputWithContext(ctx).OutputState,
	}
}

type ObjectBucketAclAccessControlPolicyGrantGranteeOutput struct{ *pulumi.OutputState }

func (ObjectBucketAclAccessControlPolicyGrantGranteeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketAclAccessControlPolicyGrantGrantee)(nil)).Elem()
}

func (o ObjectBucketAclAccessControlPolicyGrantGranteeOutput) ToObjectBucketAclAccessControlPolicyGrantGranteeOutput() ObjectBucketAclAccessControlPolicyGrantGranteeOutput {
	return o
}

func (o ObjectBucketAclAccessControlPolicyGrantGranteeOutput) ToObjectBucketAclAccessControlPolicyGrantGranteeOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyGrantGranteeOutput {
	return o
}

func (o ObjectBucketAclAccessControlPolicyGrantGranteeOutput) ToObjectBucketAclAccessControlPolicyGrantGranteePtrOutput() ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput {
	return o.ToObjectBucketAclAccessControlPolicyGrantGranteePtrOutputWithContext(context.Background())
}

func (o ObjectBucketAclAccessControlPolicyGrantGranteeOutput) ToObjectBucketAclAccessControlPolicyGrantGranteePtrOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectBucketAclAccessControlPolicyGrantGrantee) *ObjectBucketAclAccessControlPolicyGrantGrantee {
		return &v
	}).(ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput)
}

func (o ObjectBucketAclAccessControlPolicyGrantGranteeOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketAclAccessControlPolicyGrantGrantee] {
	return pulumix.Output[ObjectBucketAclAccessControlPolicyGrantGrantee]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketAclAccessControlPolicyGrantGranteeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectBucketAclAccessControlPolicyGrantGrantee) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The `region`,`bucket` and `acl` separated by (`/`).
func (o ObjectBucketAclAccessControlPolicyGrantGranteeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectBucketAclAccessControlPolicyGrantGrantee) string { return v.Id }).(pulumi.StringOutput)
}

func (o ObjectBucketAclAccessControlPolicyGrantGranteeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectBucketAclAccessControlPolicyGrantGrantee) string { return v.Type }).(pulumi.StringOutput)
}

type ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput struct{ *pulumi.OutputState }

func (ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectBucketAclAccessControlPolicyGrantGrantee)(nil)).Elem()
}

func (o ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput) ToObjectBucketAclAccessControlPolicyGrantGranteePtrOutput() ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput {
	return o
}

func (o ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput) ToObjectBucketAclAccessControlPolicyGrantGranteePtrOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput {
	return o
}

func (o ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ObjectBucketAclAccessControlPolicyGrantGrantee] {
	return pulumix.Output[*ObjectBucketAclAccessControlPolicyGrantGrantee]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput) Elem() ObjectBucketAclAccessControlPolicyGrantGranteeOutput {
	return o.ApplyT(func(v *ObjectBucketAclAccessControlPolicyGrantGrantee) ObjectBucketAclAccessControlPolicyGrantGrantee {
		if v != nil {
			return *v
		}
		var ret ObjectBucketAclAccessControlPolicyGrantGrantee
		return ret
	}).(ObjectBucketAclAccessControlPolicyGrantGranteeOutput)
}

func (o ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectBucketAclAccessControlPolicyGrantGrantee) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The `region`,`bucket` and `acl` separated by (`/`).
func (o ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectBucketAclAccessControlPolicyGrantGrantee) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

func (o ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectBucketAclAccessControlPolicyGrantGrantee) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ObjectBucketAclAccessControlPolicyOwner struct {
	DisplayName *string `pulumi:"displayName"`
	// The `region`,`bucket` and `acl` separated by (`/`).
	Id string `pulumi:"id"`
}

// ObjectBucketAclAccessControlPolicyOwnerInput is an input type that accepts ObjectBucketAclAccessControlPolicyOwnerArgs and ObjectBucketAclAccessControlPolicyOwnerOutput values.
// You can construct a concrete instance of `ObjectBucketAclAccessControlPolicyOwnerInput` via:
//
//	ObjectBucketAclAccessControlPolicyOwnerArgs{...}
type ObjectBucketAclAccessControlPolicyOwnerInput interface {
	pulumi.Input

	ToObjectBucketAclAccessControlPolicyOwnerOutput() ObjectBucketAclAccessControlPolicyOwnerOutput
	ToObjectBucketAclAccessControlPolicyOwnerOutputWithContext(context.Context) ObjectBucketAclAccessControlPolicyOwnerOutput
}

type ObjectBucketAclAccessControlPolicyOwnerArgs struct {
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The `region`,`bucket` and `acl` separated by (`/`).
	Id pulumi.StringInput `pulumi:"id"`
}

func (ObjectBucketAclAccessControlPolicyOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketAclAccessControlPolicyOwner)(nil)).Elem()
}

func (i ObjectBucketAclAccessControlPolicyOwnerArgs) ToObjectBucketAclAccessControlPolicyOwnerOutput() ObjectBucketAclAccessControlPolicyOwnerOutput {
	return i.ToObjectBucketAclAccessControlPolicyOwnerOutputWithContext(context.Background())
}

func (i ObjectBucketAclAccessControlPolicyOwnerArgs) ToObjectBucketAclAccessControlPolicyOwnerOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketAclAccessControlPolicyOwnerOutput)
}

func (i ObjectBucketAclAccessControlPolicyOwnerArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketAclAccessControlPolicyOwner] {
	return pulumix.Output[ObjectBucketAclAccessControlPolicyOwner]{
		OutputState: i.ToObjectBucketAclAccessControlPolicyOwnerOutputWithContext(ctx).OutputState,
	}
}

func (i ObjectBucketAclAccessControlPolicyOwnerArgs) ToObjectBucketAclAccessControlPolicyOwnerPtrOutput() ObjectBucketAclAccessControlPolicyOwnerPtrOutput {
	return i.ToObjectBucketAclAccessControlPolicyOwnerPtrOutputWithContext(context.Background())
}

func (i ObjectBucketAclAccessControlPolicyOwnerArgs) ToObjectBucketAclAccessControlPolicyOwnerPtrOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketAclAccessControlPolicyOwnerOutput).ToObjectBucketAclAccessControlPolicyOwnerPtrOutputWithContext(ctx)
}

// ObjectBucketAclAccessControlPolicyOwnerPtrInput is an input type that accepts ObjectBucketAclAccessControlPolicyOwnerArgs, ObjectBucketAclAccessControlPolicyOwnerPtr and ObjectBucketAclAccessControlPolicyOwnerPtrOutput values.
// You can construct a concrete instance of `ObjectBucketAclAccessControlPolicyOwnerPtrInput` via:
//
//	        ObjectBucketAclAccessControlPolicyOwnerArgs{...}
//
//	or:
//
//	        nil
type ObjectBucketAclAccessControlPolicyOwnerPtrInput interface {
	pulumi.Input

	ToObjectBucketAclAccessControlPolicyOwnerPtrOutput() ObjectBucketAclAccessControlPolicyOwnerPtrOutput
	ToObjectBucketAclAccessControlPolicyOwnerPtrOutputWithContext(context.Context) ObjectBucketAclAccessControlPolicyOwnerPtrOutput
}

type objectBucketAclAccessControlPolicyOwnerPtrType ObjectBucketAclAccessControlPolicyOwnerArgs

func ObjectBucketAclAccessControlPolicyOwnerPtr(v *ObjectBucketAclAccessControlPolicyOwnerArgs) ObjectBucketAclAccessControlPolicyOwnerPtrInput {
	return (*objectBucketAclAccessControlPolicyOwnerPtrType)(v)
}

func (*objectBucketAclAccessControlPolicyOwnerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectBucketAclAccessControlPolicyOwner)(nil)).Elem()
}

func (i *objectBucketAclAccessControlPolicyOwnerPtrType) ToObjectBucketAclAccessControlPolicyOwnerPtrOutput() ObjectBucketAclAccessControlPolicyOwnerPtrOutput {
	return i.ToObjectBucketAclAccessControlPolicyOwnerPtrOutputWithContext(context.Background())
}

func (i *objectBucketAclAccessControlPolicyOwnerPtrType) ToObjectBucketAclAccessControlPolicyOwnerPtrOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketAclAccessControlPolicyOwnerPtrOutput)
}

func (i *objectBucketAclAccessControlPolicyOwnerPtrType) ToOutput(ctx context.Context) pulumix.Output[*ObjectBucketAclAccessControlPolicyOwner] {
	return pulumix.Output[*ObjectBucketAclAccessControlPolicyOwner]{
		OutputState: i.ToObjectBucketAclAccessControlPolicyOwnerPtrOutputWithContext(ctx).OutputState,
	}
}

type ObjectBucketAclAccessControlPolicyOwnerOutput struct{ *pulumi.OutputState }

func (ObjectBucketAclAccessControlPolicyOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketAclAccessControlPolicyOwner)(nil)).Elem()
}

func (o ObjectBucketAclAccessControlPolicyOwnerOutput) ToObjectBucketAclAccessControlPolicyOwnerOutput() ObjectBucketAclAccessControlPolicyOwnerOutput {
	return o
}

func (o ObjectBucketAclAccessControlPolicyOwnerOutput) ToObjectBucketAclAccessControlPolicyOwnerOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyOwnerOutput {
	return o
}

func (o ObjectBucketAclAccessControlPolicyOwnerOutput) ToObjectBucketAclAccessControlPolicyOwnerPtrOutput() ObjectBucketAclAccessControlPolicyOwnerPtrOutput {
	return o.ToObjectBucketAclAccessControlPolicyOwnerPtrOutputWithContext(context.Background())
}

func (o ObjectBucketAclAccessControlPolicyOwnerOutput) ToObjectBucketAclAccessControlPolicyOwnerPtrOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyOwnerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectBucketAclAccessControlPolicyOwner) *ObjectBucketAclAccessControlPolicyOwner {
		return &v
	}).(ObjectBucketAclAccessControlPolicyOwnerPtrOutput)
}

func (o ObjectBucketAclAccessControlPolicyOwnerOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketAclAccessControlPolicyOwner] {
	return pulumix.Output[ObjectBucketAclAccessControlPolicyOwner]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketAclAccessControlPolicyOwnerOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectBucketAclAccessControlPolicyOwner) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The `region`,`bucket` and `acl` separated by (`/`).
func (o ObjectBucketAclAccessControlPolicyOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectBucketAclAccessControlPolicyOwner) string { return v.Id }).(pulumi.StringOutput)
}

type ObjectBucketAclAccessControlPolicyOwnerPtrOutput struct{ *pulumi.OutputState }

func (ObjectBucketAclAccessControlPolicyOwnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectBucketAclAccessControlPolicyOwner)(nil)).Elem()
}

func (o ObjectBucketAclAccessControlPolicyOwnerPtrOutput) ToObjectBucketAclAccessControlPolicyOwnerPtrOutput() ObjectBucketAclAccessControlPolicyOwnerPtrOutput {
	return o
}

func (o ObjectBucketAclAccessControlPolicyOwnerPtrOutput) ToObjectBucketAclAccessControlPolicyOwnerPtrOutputWithContext(ctx context.Context) ObjectBucketAclAccessControlPolicyOwnerPtrOutput {
	return o
}

func (o ObjectBucketAclAccessControlPolicyOwnerPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ObjectBucketAclAccessControlPolicyOwner] {
	return pulumix.Output[*ObjectBucketAclAccessControlPolicyOwner]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketAclAccessControlPolicyOwnerPtrOutput) Elem() ObjectBucketAclAccessControlPolicyOwnerOutput {
	return o.ApplyT(func(v *ObjectBucketAclAccessControlPolicyOwner) ObjectBucketAclAccessControlPolicyOwner {
		if v != nil {
			return *v
		}
		var ret ObjectBucketAclAccessControlPolicyOwner
		return ret
	}).(ObjectBucketAclAccessControlPolicyOwnerOutput)
}

func (o ObjectBucketAclAccessControlPolicyOwnerPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectBucketAclAccessControlPolicyOwner) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The `region`,`bucket` and `acl` separated by (`/`).
func (o ObjectBucketAclAccessControlPolicyOwnerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectBucketAclAccessControlPolicyOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type ObjectBucketCorsRule struct {
	// Specifies which headers are allowed.
	AllowedHeaders []string `pulumi:"allowedHeaders"`
	// Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
	AllowedMethods []string `pulumi:"allowedMethods"`
	// Specifies which origins are allowed.
	AllowedOrigins []string `pulumi:"allowedOrigins"`
	// Specifies expose header in the response.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Specifies time in seconds that browser can cache the response for a preflight request.
	MaxAgeSeconds *int `pulumi:"maxAgeSeconds"`
}

// ObjectBucketCorsRuleInput is an input type that accepts ObjectBucketCorsRuleArgs and ObjectBucketCorsRuleOutput values.
// You can construct a concrete instance of `ObjectBucketCorsRuleInput` via:
//
//	ObjectBucketCorsRuleArgs{...}
type ObjectBucketCorsRuleInput interface {
	pulumi.Input

	ToObjectBucketCorsRuleOutput() ObjectBucketCorsRuleOutput
	ToObjectBucketCorsRuleOutputWithContext(context.Context) ObjectBucketCorsRuleOutput
}

type ObjectBucketCorsRuleArgs struct {
	// Specifies which headers are allowed.
	AllowedHeaders pulumi.StringArrayInput `pulumi:"allowedHeaders"`
	// Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
	AllowedMethods pulumi.StringArrayInput `pulumi:"allowedMethods"`
	// Specifies which origins are allowed.
	AllowedOrigins pulumi.StringArrayInput `pulumi:"allowedOrigins"`
	// Specifies expose header in the response.
	ExposeHeaders pulumi.StringArrayInput `pulumi:"exposeHeaders"`
	// Specifies time in seconds that browser can cache the response for a preflight request.
	MaxAgeSeconds pulumi.IntPtrInput `pulumi:"maxAgeSeconds"`
}

func (ObjectBucketCorsRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketCorsRule)(nil)).Elem()
}

func (i ObjectBucketCorsRuleArgs) ToObjectBucketCorsRuleOutput() ObjectBucketCorsRuleOutput {
	return i.ToObjectBucketCorsRuleOutputWithContext(context.Background())
}

func (i ObjectBucketCorsRuleArgs) ToObjectBucketCorsRuleOutputWithContext(ctx context.Context) ObjectBucketCorsRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketCorsRuleOutput)
}

func (i ObjectBucketCorsRuleArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketCorsRule] {
	return pulumix.Output[ObjectBucketCorsRule]{
		OutputState: i.ToObjectBucketCorsRuleOutputWithContext(ctx).OutputState,
	}
}

// ObjectBucketCorsRuleArrayInput is an input type that accepts ObjectBucketCorsRuleArray and ObjectBucketCorsRuleArrayOutput values.
// You can construct a concrete instance of `ObjectBucketCorsRuleArrayInput` via:
//
//	ObjectBucketCorsRuleArray{ ObjectBucketCorsRuleArgs{...} }
type ObjectBucketCorsRuleArrayInput interface {
	pulumi.Input

	ToObjectBucketCorsRuleArrayOutput() ObjectBucketCorsRuleArrayOutput
	ToObjectBucketCorsRuleArrayOutputWithContext(context.Context) ObjectBucketCorsRuleArrayOutput
}

type ObjectBucketCorsRuleArray []ObjectBucketCorsRuleInput

func (ObjectBucketCorsRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectBucketCorsRule)(nil)).Elem()
}

func (i ObjectBucketCorsRuleArray) ToObjectBucketCorsRuleArrayOutput() ObjectBucketCorsRuleArrayOutput {
	return i.ToObjectBucketCorsRuleArrayOutputWithContext(context.Background())
}

func (i ObjectBucketCorsRuleArray) ToObjectBucketCorsRuleArrayOutputWithContext(ctx context.Context) ObjectBucketCorsRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketCorsRuleArrayOutput)
}

func (i ObjectBucketCorsRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]ObjectBucketCorsRule] {
	return pulumix.Output[[]ObjectBucketCorsRule]{
		OutputState: i.ToObjectBucketCorsRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type ObjectBucketCorsRuleOutput struct{ *pulumi.OutputState }

func (ObjectBucketCorsRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketCorsRule)(nil)).Elem()
}

func (o ObjectBucketCorsRuleOutput) ToObjectBucketCorsRuleOutput() ObjectBucketCorsRuleOutput {
	return o
}

func (o ObjectBucketCorsRuleOutput) ToObjectBucketCorsRuleOutputWithContext(ctx context.Context) ObjectBucketCorsRuleOutput {
	return o
}

func (o ObjectBucketCorsRuleOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketCorsRule] {
	return pulumix.Output[ObjectBucketCorsRule]{
		OutputState: o.OutputState,
	}
}

// Specifies which headers are allowed.
func (o ObjectBucketCorsRuleOutput) AllowedHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ObjectBucketCorsRule) []string { return v.AllowedHeaders }).(pulumi.StringArrayOutput)
}

// Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
func (o ObjectBucketCorsRuleOutput) AllowedMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ObjectBucketCorsRule) []string { return v.AllowedMethods }).(pulumi.StringArrayOutput)
}

// Specifies which origins are allowed.
func (o ObjectBucketCorsRuleOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ObjectBucketCorsRule) []string { return v.AllowedOrigins }).(pulumi.StringArrayOutput)
}

// Specifies expose header in the response.
func (o ObjectBucketCorsRuleOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ObjectBucketCorsRule) []string { return v.ExposeHeaders }).(pulumi.StringArrayOutput)
}

// Specifies time in seconds that browser can cache the response for a preflight request.
func (o ObjectBucketCorsRuleOutput) MaxAgeSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ObjectBucketCorsRule) *int { return v.MaxAgeSeconds }).(pulumi.IntPtrOutput)
}

type ObjectBucketCorsRuleArrayOutput struct{ *pulumi.OutputState }

func (ObjectBucketCorsRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectBucketCorsRule)(nil)).Elem()
}

func (o ObjectBucketCorsRuleArrayOutput) ToObjectBucketCorsRuleArrayOutput() ObjectBucketCorsRuleArrayOutput {
	return o
}

func (o ObjectBucketCorsRuleArrayOutput) ToObjectBucketCorsRuleArrayOutputWithContext(ctx context.Context) ObjectBucketCorsRuleArrayOutput {
	return o
}

func (o ObjectBucketCorsRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ObjectBucketCorsRule] {
	return pulumix.Output[[]ObjectBucketCorsRule]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketCorsRuleArrayOutput) Index(i pulumi.IntInput) ObjectBucketCorsRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObjectBucketCorsRule {
		return vs[0].([]ObjectBucketCorsRule)[vs[1].(int)]
	}).(ObjectBucketCorsRuleOutput)
}

type ObjectBucketLifecycleRule struct {
	// Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
	//
	// * > **Important:** It's not recommended using `prefix` for `AbortIncompleteMultipartUpload` as any incomplete multipart upload will be billed
	AbortIncompleteMultipartUploadDays *int `pulumi:"abortIncompleteMultipartUploadDays"`
	// The element value can be either Enabled or Disabled. If a rule is disabled, Scaleway S3 doesn't perform any of the actions defined in the rule.
	Enabled bool `pulumi:"enabled"`
	// Specifies a period in the object's expire (documented below).
	Expiration *ObjectBucketLifecycleRuleExpiration `pulumi:"expiration"`
	// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
	Id *string `pulumi:"id"`
	// Object key prefix identifying one or more objects to which the rule applies.
	Prefix *string `pulumi:"prefix"`
	// Specifies object tags key and value.
	Tags map[string]string `pulumi:"tags"`
	// Specifies a period in the object's transitions (documented below).
	//
	// At least one of `abortIncompleteMultipartUploadDays`, `expiration`, `transition` must be specified.
	Transitions []ObjectBucketLifecycleRuleTransition `pulumi:"transitions"`
}

// ObjectBucketLifecycleRuleInput is an input type that accepts ObjectBucketLifecycleRuleArgs and ObjectBucketLifecycleRuleOutput values.
// You can construct a concrete instance of `ObjectBucketLifecycleRuleInput` via:
//
//	ObjectBucketLifecycleRuleArgs{...}
type ObjectBucketLifecycleRuleInput interface {
	pulumi.Input

	ToObjectBucketLifecycleRuleOutput() ObjectBucketLifecycleRuleOutput
	ToObjectBucketLifecycleRuleOutputWithContext(context.Context) ObjectBucketLifecycleRuleOutput
}

type ObjectBucketLifecycleRuleArgs struct {
	// Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
	//
	// * > **Important:** It's not recommended using `prefix` for `AbortIncompleteMultipartUpload` as any incomplete multipart upload will be billed
	AbortIncompleteMultipartUploadDays pulumi.IntPtrInput `pulumi:"abortIncompleteMultipartUploadDays"`
	// The element value can be either Enabled or Disabled. If a rule is disabled, Scaleway S3 doesn't perform any of the actions defined in the rule.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Specifies a period in the object's expire (documented below).
	Expiration ObjectBucketLifecycleRuleExpirationPtrInput `pulumi:"expiration"`
	// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Object key prefix identifying one or more objects to which the rule applies.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// Specifies object tags key and value.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Specifies a period in the object's transitions (documented below).
	//
	// At least one of `abortIncompleteMultipartUploadDays`, `expiration`, `transition` must be specified.
	Transitions ObjectBucketLifecycleRuleTransitionArrayInput `pulumi:"transitions"`
}

func (ObjectBucketLifecycleRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketLifecycleRule)(nil)).Elem()
}

func (i ObjectBucketLifecycleRuleArgs) ToObjectBucketLifecycleRuleOutput() ObjectBucketLifecycleRuleOutput {
	return i.ToObjectBucketLifecycleRuleOutputWithContext(context.Background())
}

func (i ObjectBucketLifecycleRuleArgs) ToObjectBucketLifecycleRuleOutputWithContext(ctx context.Context) ObjectBucketLifecycleRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketLifecycleRuleOutput)
}

func (i ObjectBucketLifecycleRuleArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketLifecycleRule] {
	return pulumix.Output[ObjectBucketLifecycleRule]{
		OutputState: i.ToObjectBucketLifecycleRuleOutputWithContext(ctx).OutputState,
	}
}

// ObjectBucketLifecycleRuleArrayInput is an input type that accepts ObjectBucketLifecycleRuleArray and ObjectBucketLifecycleRuleArrayOutput values.
// You can construct a concrete instance of `ObjectBucketLifecycleRuleArrayInput` via:
//
//	ObjectBucketLifecycleRuleArray{ ObjectBucketLifecycleRuleArgs{...} }
type ObjectBucketLifecycleRuleArrayInput interface {
	pulumi.Input

	ToObjectBucketLifecycleRuleArrayOutput() ObjectBucketLifecycleRuleArrayOutput
	ToObjectBucketLifecycleRuleArrayOutputWithContext(context.Context) ObjectBucketLifecycleRuleArrayOutput
}

type ObjectBucketLifecycleRuleArray []ObjectBucketLifecycleRuleInput

func (ObjectBucketLifecycleRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectBucketLifecycleRule)(nil)).Elem()
}

func (i ObjectBucketLifecycleRuleArray) ToObjectBucketLifecycleRuleArrayOutput() ObjectBucketLifecycleRuleArrayOutput {
	return i.ToObjectBucketLifecycleRuleArrayOutputWithContext(context.Background())
}

func (i ObjectBucketLifecycleRuleArray) ToObjectBucketLifecycleRuleArrayOutputWithContext(ctx context.Context) ObjectBucketLifecycleRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketLifecycleRuleArrayOutput)
}

func (i ObjectBucketLifecycleRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]ObjectBucketLifecycleRule] {
	return pulumix.Output[[]ObjectBucketLifecycleRule]{
		OutputState: i.ToObjectBucketLifecycleRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type ObjectBucketLifecycleRuleOutput struct{ *pulumi.OutputState }

func (ObjectBucketLifecycleRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketLifecycleRule)(nil)).Elem()
}

func (o ObjectBucketLifecycleRuleOutput) ToObjectBucketLifecycleRuleOutput() ObjectBucketLifecycleRuleOutput {
	return o
}

func (o ObjectBucketLifecycleRuleOutput) ToObjectBucketLifecycleRuleOutputWithContext(ctx context.Context) ObjectBucketLifecycleRuleOutput {
	return o
}

func (o ObjectBucketLifecycleRuleOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketLifecycleRule] {
	return pulumix.Output[ObjectBucketLifecycleRule]{
		OutputState: o.OutputState,
	}
}

// Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
//
// * > **Important:** It's not recommended using `prefix` for `AbortIncompleteMultipartUpload` as any incomplete multipart upload will be billed
func (o ObjectBucketLifecycleRuleOutput) AbortIncompleteMultipartUploadDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ObjectBucketLifecycleRule) *int { return v.AbortIncompleteMultipartUploadDays }).(pulumi.IntPtrOutput)
}

// The element value can be either Enabled or Disabled. If a rule is disabled, Scaleway S3 doesn't perform any of the actions defined in the rule.
func (o ObjectBucketLifecycleRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ObjectBucketLifecycleRule) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Specifies a period in the object's expire (documented below).
func (o ObjectBucketLifecycleRuleOutput) Expiration() ObjectBucketLifecycleRuleExpirationPtrOutput {
	return o.ApplyT(func(v ObjectBucketLifecycleRule) *ObjectBucketLifecycleRuleExpiration { return v.Expiration }).(ObjectBucketLifecycleRuleExpirationPtrOutput)
}

// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
func (o ObjectBucketLifecycleRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectBucketLifecycleRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Object key prefix identifying one or more objects to which the rule applies.
func (o ObjectBucketLifecycleRuleOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectBucketLifecycleRule) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// Specifies object tags key and value.
func (o ObjectBucketLifecycleRuleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObjectBucketLifecycleRule) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies a period in the object's transitions (documented below).
//
// At least one of `abortIncompleteMultipartUploadDays`, `expiration`, `transition` must be specified.
func (o ObjectBucketLifecycleRuleOutput) Transitions() ObjectBucketLifecycleRuleTransitionArrayOutput {
	return o.ApplyT(func(v ObjectBucketLifecycleRule) []ObjectBucketLifecycleRuleTransition { return v.Transitions }).(ObjectBucketLifecycleRuleTransitionArrayOutput)
}

type ObjectBucketLifecycleRuleArrayOutput struct{ *pulumi.OutputState }

func (ObjectBucketLifecycleRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectBucketLifecycleRule)(nil)).Elem()
}

func (o ObjectBucketLifecycleRuleArrayOutput) ToObjectBucketLifecycleRuleArrayOutput() ObjectBucketLifecycleRuleArrayOutput {
	return o
}

func (o ObjectBucketLifecycleRuleArrayOutput) ToObjectBucketLifecycleRuleArrayOutputWithContext(ctx context.Context) ObjectBucketLifecycleRuleArrayOutput {
	return o
}

func (o ObjectBucketLifecycleRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ObjectBucketLifecycleRule] {
	return pulumix.Output[[]ObjectBucketLifecycleRule]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketLifecycleRuleArrayOutput) Index(i pulumi.IntInput) ObjectBucketLifecycleRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObjectBucketLifecycleRule {
		return vs[0].([]ObjectBucketLifecycleRule)[vs[1].(int)]
	}).(ObjectBucketLifecycleRuleOutput)
}

type ObjectBucketLifecycleRuleExpiration struct {
	// Specifies the number of days after object creation when the specific rule action takes effect.
	//
	// > **Important:**  If versioning is enabled, this rule only deletes the current version of an object.
	Days int `pulumi:"days"`
}

// ObjectBucketLifecycleRuleExpirationInput is an input type that accepts ObjectBucketLifecycleRuleExpirationArgs and ObjectBucketLifecycleRuleExpirationOutput values.
// You can construct a concrete instance of `ObjectBucketLifecycleRuleExpirationInput` via:
//
//	ObjectBucketLifecycleRuleExpirationArgs{...}
type ObjectBucketLifecycleRuleExpirationInput interface {
	pulumi.Input

	ToObjectBucketLifecycleRuleExpirationOutput() ObjectBucketLifecycleRuleExpirationOutput
	ToObjectBucketLifecycleRuleExpirationOutputWithContext(context.Context) ObjectBucketLifecycleRuleExpirationOutput
}

type ObjectBucketLifecycleRuleExpirationArgs struct {
	// Specifies the number of days after object creation when the specific rule action takes effect.
	//
	// > **Important:**  If versioning is enabled, this rule only deletes the current version of an object.
	Days pulumi.IntInput `pulumi:"days"`
}

func (ObjectBucketLifecycleRuleExpirationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketLifecycleRuleExpiration)(nil)).Elem()
}

func (i ObjectBucketLifecycleRuleExpirationArgs) ToObjectBucketLifecycleRuleExpirationOutput() ObjectBucketLifecycleRuleExpirationOutput {
	return i.ToObjectBucketLifecycleRuleExpirationOutputWithContext(context.Background())
}

func (i ObjectBucketLifecycleRuleExpirationArgs) ToObjectBucketLifecycleRuleExpirationOutputWithContext(ctx context.Context) ObjectBucketLifecycleRuleExpirationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketLifecycleRuleExpirationOutput)
}

func (i ObjectBucketLifecycleRuleExpirationArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketLifecycleRuleExpiration] {
	return pulumix.Output[ObjectBucketLifecycleRuleExpiration]{
		OutputState: i.ToObjectBucketLifecycleRuleExpirationOutputWithContext(ctx).OutputState,
	}
}

func (i ObjectBucketLifecycleRuleExpirationArgs) ToObjectBucketLifecycleRuleExpirationPtrOutput() ObjectBucketLifecycleRuleExpirationPtrOutput {
	return i.ToObjectBucketLifecycleRuleExpirationPtrOutputWithContext(context.Background())
}

func (i ObjectBucketLifecycleRuleExpirationArgs) ToObjectBucketLifecycleRuleExpirationPtrOutputWithContext(ctx context.Context) ObjectBucketLifecycleRuleExpirationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketLifecycleRuleExpirationOutput).ToObjectBucketLifecycleRuleExpirationPtrOutputWithContext(ctx)
}

// ObjectBucketLifecycleRuleExpirationPtrInput is an input type that accepts ObjectBucketLifecycleRuleExpirationArgs, ObjectBucketLifecycleRuleExpirationPtr and ObjectBucketLifecycleRuleExpirationPtrOutput values.
// You can construct a concrete instance of `ObjectBucketLifecycleRuleExpirationPtrInput` via:
//
//	        ObjectBucketLifecycleRuleExpirationArgs{...}
//
//	or:
//
//	        nil
type ObjectBucketLifecycleRuleExpirationPtrInput interface {
	pulumi.Input

	ToObjectBucketLifecycleRuleExpirationPtrOutput() ObjectBucketLifecycleRuleExpirationPtrOutput
	ToObjectBucketLifecycleRuleExpirationPtrOutputWithContext(context.Context) ObjectBucketLifecycleRuleExpirationPtrOutput
}

type objectBucketLifecycleRuleExpirationPtrType ObjectBucketLifecycleRuleExpirationArgs

func ObjectBucketLifecycleRuleExpirationPtr(v *ObjectBucketLifecycleRuleExpirationArgs) ObjectBucketLifecycleRuleExpirationPtrInput {
	return (*objectBucketLifecycleRuleExpirationPtrType)(v)
}

func (*objectBucketLifecycleRuleExpirationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectBucketLifecycleRuleExpiration)(nil)).Elem()
}

func (i *objectBucketLifecycleRuleExpirationPtrType) ToObjectBucketLifecycleRuleExpirationPtrOutput() ObjectBucketLifecycleRuleExpirationPtrOutput {
	return i.ToObjectBucketLifecycleRuleExpirationPtrOutputWithContext(context.Background())
}

func (i *objectBucketLifecycleRuleExpirationPtrType) ToObjectBucketLifecycleRuleExpirationPtrOutputWithContext(ctx context.Context) ObjectBucketLifecycleRuleExpirationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketLifecycleRuleExpirationPtrOutput)
}

func (i *objectBucketLifecycleRuleExpirationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ObjectBucketLifecycleRuleExpiration] {
	return pulumix.Output[*ObjectBucketLifecycleRuleExpiration]{
		OutputState: i.ToObjectBucketLifecycleRuleExpirationPtrOutputWithContext(ctx).OutputState,
	}
}

type ObjectBucketLifecycleRuleExpirationOutput struct{ *pulumi.OutputState }

func (ObjectBucketLifecycleRuleExpirationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketLifecycleRuleExpiration)(nil)).Elem()
}

func (o ObjectBucketLifecycleRuleExpirationOutput) ToObjectBucketLifecycleRuleExpirationOutput() ObjectBucketLifecycleRuleExpirationOutput {
	return o
}

func (o ObjectBucketLifecycleRuleExpirationOutput) ToObjectBucketLifecycleRuleExpirationOutputWithContext(ctx context.Context) ObjectBucketLifecycleRuleExpirationOutput {
	return o
}

func (o ObjectBucketLifecycleRuleExpirationOutput) ToObjectBucketLifecycleRuleExpirationPtrOutput() ObjectBucketLifecycleRuleExpirationPtrOutput {
	return o.ToObjectBucketLifecycleRuleExpirationPtrOutputWithContext(context.Background())
}

func (o ObjectBucketLifecycleRuleExpirationOutput) ToObjectBucketLifecycleRuleExpirationPtrOutputWithContext(ctx context.Context) ObjectBucketLifecycleRuleExpirationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectBucketLifecycleRuleExpiration) *ObjectBucketLifecycleRuleExpiration {
		return &v
	}).(ObjectBucketLifecycleRuleExpirationPtrOutput)
}

func (o ObjectBucketLifecycleRuleExpirationOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketLifecycleRuleExpiration] {
	return pulumix.Output[ObjectBucketLifecycleRuleExpiration]{
		OutputState: o.OutputState,
	}
}

// Specifies the number of days after object creation when the specific rule action takes effect.
//
// > **Important:**  If versioning is enabled, this rule only deletes the current version of an object.
func (o ObjectBucketLifecycleRuleExpirationOutput) Days() pulumi.IntOutput {
	return o.ApplyT(func(v ObjectBucketLifecycleRuleExpiration) int { return v.Days }).(pulumi.IntOutput)
}

type ObjectBucketLifecycleRuleExpirationPtrOutput struct{ *pulumi.OutputState }

func (ObjectBucketLifecycleRuleExpirationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectBucketLifecycleRuleExpiration)(nil)).Elem()
}

func (o ObjectBucketLifecycleRuleExpirationPtrOutput) ToObjectBucketLifecycleRuleExpirationPtrOutput() ObjectBucketLifecycleRuleExpirationPtrOutput {
	return o
}

func (o ObjectBucketLifecycleRuleExpirationPtrOutput) ToObjectBucketLifecycleRuleExpirationPtrOutputWithContext(ctx context.Context) ObjectBucketLifecycleRuleExpirationPtrOutput {
	return o
}

func (o ObjectBucketLifecycleRuleExpirationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ObjectBucketLifecycleRuleExpiration] {
	return pulumix.Output[*ObjectBucketLifecycleRuleExpiration]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketLifecycleRuleExpirationPtrOutput) Elem() ObjectBucketLifecycleRuleExpirationOutput {
	return o.ApplyT(func(v *ObjectBucketLifecycleRuleExpiration) ObjectBucketLifecycleRuleExpiration {
		if v != nil {
			return *v
		}
		var ret ObjectBucketLifecycleRuleExpiration
		return ret
	}).(ObjectBucketLifecycleRuleExpirationOutput)
}

// Specifies the number of days after object creation when the specific rule action takes effect.
//
// > **Important:**  If versioning is enabled, this rule only deletes the current version of an object.
func (o ObjectBucketLifecycleRuleExpirationPtrOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ObjectBucketLifecycleRuleExpiration) *int {
		if v == nil {
			return nil
		}
		return &v.Days
	}).(pulumi.IntPtrOutput)
}

type ObjectBucketLifecycleRuleTransition struct {
	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days *int `pulumi:"days"`
	// Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/storage/object/concepts/#storage-class) `STANDARD`, `GLACIER`, `ONEZONE_IA`  to which you want the object to transition.
	//
	// > **Important:**  `ONEZONE_IA` is only available in `fr-par` region. The storage class `GLACIER` is not available in `pl-waw` region.
	StorageClass string `pulumi:"storageClass"`
}

// ObjectBucketLifecycleRuleTransitionInput is an input type that accepts ObjectBucketLifecycleRuleTransitionArgs and ObjectBucketLifecycleRuleTransitionOutput values.
// You can construct a concrete instance of `ObjectBucketLifecycleRuleTransitionInput` via:
//
//	ObjectBucketLifecycleRuleTransitionArgs{...}
type ObjectBucketLifecycleRuleTransitionInput interface {
	pulumi.Input

	ToObjectBucketLifecycleRuleTransitionOutput() ObjectBucketLifecycleRuleTransitionOutput
	ToObjectBucketLifecycleRuleTransitionOutputWithContext(context.Context) ObjectBucketLifecycleRuleTransitionOutput
}

type ObjectBucketLifecycleRuleTransitionArgs struct {
	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days pulumi.IntPtrInput `pulumi:"days"`
	// Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/storage/object/concepts/#storage-class) `STANDARD`, `GLACIER`, `ONEZONE_IA`  to which you want the object to transition.
	//
	// > **Important:**  `ONEZONE_IA` is only available in `fr-par` region. The storage class `GLACIER` is not available in `pl-waw` region.
	StorageClass pulumi.StringInput `pulumi:"storageClass"`
}

func (ObjectBucketLifecycleRuleTransitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketLifecycleRuleTransition)(nil)).Elem()
}

func (i ObjectBucketLifecycleRuleTransitionArgs) ToObjectBucketLifecycleRuleTransitionOutput() ObjectBucketLifecycleRuleTransitionOutput {
	return i.ToObjectBucketLifecycleRuleTransitionOutputWithContext(context.Background())
}

func (i ObjectBucketLifecycleRuleTransitionArgs) ToObjectBucketLifecycleRuleTransitionOutputWithContext(ctx context.Context) ObjectBucketLifecycleRuleTransitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketLifecycleRuleTransitionOutput)
}

func (i ObjectBucketLifecycleRuleTransitionArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketLifecycleRuleTransition] {
	return pulumix.Output[ObjectBucketLifecycleRuleTransition]{
		OutputState: i.ToObjectBucketLifecycleRuleTransitionOutputWithContext(ctx).OutputState,
	}
}

// ObjectBucketLifecycleRuleTransitionArrayInput is an input type that accepts ObjectBucketLifecycleRuleTransitionArray and ObjectBucketLifecycleRuleTransitionArrayOutput values.
// You can construct a concrete instance of `ObjectBucketLifecycleRuleTransitionArrayInput` via:
//
//	ObjectBucketLifecycleRuleTransitionArray{ ObjectBucketLifecycleRuleTransitionArgs{...} }
type ObjectBucketLifecycleRuleTransitionArrayInput interface {
	pulumi.Input

	ToObjectBucketLifecycleRuleTransitionArrayOutput() ObjectBucketLifecycleRuleTransitionArrayOutput
	ToObjectBucketLifecycleRuleTransitionArrayOutputWithContext(context.Context) ObjectBucketLifecycleRuleTransitionArrayOutput
}

type ObjectBucketLifecycleRuleTransitionArray []ObjectBucketLifecycleRuleTransitionInput

func (ObjectBucketLifecycleRuleTransitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectBucketLifecycleRuleTransition)(nil)).Elem()
}

func (i ObjectBucketLifecycleRuleTransitionArray) ToObjectBucketLifecycleRuleTransitionArrayOutput() ObjectBucketLifecycleRuleTransitionArrayOutput {
	return i.ToObjectBucketLifecycleRuleTransitionArrayOutputWithContext(context.Background())
}

func (i ObjectBucketLifecycleRuleTransitionArray) ToObjectBucketLifecycleRuleTransitionArrayOutputWithContext(ctx context.Context) ObjectBucketLifecycleRuleTransitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketLifecycleRuleTransitionArrayOutput)
}

func (i ObjectBucketLifecycleRuleTransitionArray) ToOutput(ctx context.Context) pulumix.Output[[]ObjectBucketLifecycleRuleTransition] {
	return pulumix.Output[[]ObjectBucketLifecycleRuleTransition]{
		OutputState: i.ToObjectBucketLifecycleRuleTransitionArrayOutputWithContext(ctx).OutputState,
	}
}

type ObjectBucketLifecycleRuleTransitionOutput struct{ *pulumi.OutputState }

func (ObjectBucketLifecycleRuleTransitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketLifecycleRuleTransition)(nil)).Elem()
}

func (o ObjectBucketLifecycleRuleTransitionOutput) ToObjectBucketLifecycleRuleTransitionOutput() ObjectBucketLifecycleRuleTransitionOutput {
	return o
}

func (o ObjectBucketLifecycleRuleTransitionOutput) ToObjectBucketLifecycleRuleTransitionOutputWithContext(ctx context.Context) ObjectBucketLifecycleRuleTransitionOutput {
	return o
}

func (o ObjectBucketLifecycleRuleTransitionOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketLifecycleRuleTransition] {
	return pulumix.Output[ObjectBucketLifecycleRuleTransition]{
		OutputState: o.OutputState,
	}
}

// Specifies the number of days after object creation when the specific rule action takes effect.
func (o ObjectBucketLifecycleRuleTransitionOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ObjectBucketLifecycleRuleTransition) *int { return v.Days }).(pulumi.IntPtrOutput)
}

// Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/storage/object/concepts/#storage-class) `STANDARD`, `GLACIER`, `ONEZONE_IA`  to which you want the object to transition.
//
// > **Important:**  `ONEZONE_IA` is only available in `fr-par` region. The storage class `GLACIER` is not available in `pl-waw` region.
func (o ObjectBucketLifecycleRuleTransitionOutput) StorageClass() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectBucketLifecycleRuleTransition) string { return v.StorageClass }).(pulumi.StringOutput)
}

type ObjectBucketLifecycleRuleTransitionArrayOutput struct{ *pulumi.OutputState }

func (ObjectBucketLifecycleRuleTransitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectBucketLifecycleRuleTransition)(nil)).Elem()
}

func (o ObjectBucketLifecycleRuleTransitionArrayOutput) ToObjectBucketLifecycleRuleTransitionArrayOutput() ObjectBucketLifecycleRuleTransitionArrayOutput {
	return o
}

func (o ObjectBucketLifecycleRuleTransitionArrayOutput) ToObjectBucketLifecycleRuleTransitionArrayOutputWithContext(ctx context.Context) ObjectBucketLifecycleRuleTransitionArrayOutput {
	return o
}

func (o ObjectBucketLifecycleRuleTransitionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ObjectBucketLifecycleRuleTransition] {
	return pulumix.Output[[]ObjectBucketLifecycleRuleTransition]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketLifecycleRuleTransitionArrayOutput) Index(i pulumi.IntInput) ObjectBucketLifecycleRuleTransitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObjectBucketLifecycleRuleTransition {
		return vs[0].([]ObjectBucketLifecycleRuleTransition)[vs[1].(int)]
	}).(ObjectBucketLifecycleRuleTransitionOutput)
}

type ObjectBucketLockConfigurationRule struct {
	DefaultRetention ObjectBucketLockConfigurationRuleDefaultRetention `pulumi:"defaultRetention"`
}

// ObjectBucketLockConfigurationRuleInput is an input type that accepts ObjectBucketLockConfigurationRuleArgs and ObjectBucketLockConfigurationRuleOutput values.
// You can construct a concrete instance of `ObjectBucketLockConfigurationRuleInput` via:
//
//	ObjectBucketLockConfigurationRuleArgs{...}
type ObjectBucketLockConfigurationRuleInput interface {
	pulumi.Input

	ToObjectBucketLockConfigurationRuleOutput() ObjectBucketLockConfigurationRuleOutput
	ToObjectBucketLockConfigurationRuleOutputWithContext(context.Context) ObjectBucketLockConfigurationRuleOutput
}

type ObjectBucketLockConfigurationRuleArgs struct {
	DefaultRetention ObjectBucketLockConfigurationRuleDefaultRetentionInput `pulumi:"defaultRetention"`
}

func (ObjectBucketLockConfigurationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketLockConfigurationRule)(nil)).Elem()
}

func (i ObjectBucketLockConfigurationRuleArgs) ToObjectBucketLockConfigurationRuleOutput() ObjectBucketLockConfigurationRuleOutput {
	return i.ToObjectBucketLockConfigurationRuleOutputWithContext(context.Background())
}

func (i ObjectBucketLockConfigurationRuleArgs) ToObjectBucketLockConfigurationRuleOutputWithContext(ctx context.Context) ObjectBucketLockConfigurationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketLockConfigurationRuleOutput)
}

func (i ObjectBucketLockConfigurationRuleArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketLockConfigurationRule] {
	return pulumix.Output[ObjectBucketLockConfigurationRule]{
		OutputState: i.ToObjectBucketLockConfigurationRuleOutputWithContext(ctx).OutputState,
	}
}

func (i ObjectBucketLockConfigurationRuleArgs) ToObjectBucketLockConfigurationRulePtrOutput() ObjectBucketLockConfigurationRulePtrOutput {
	return i.ToObjectBucketLockConfigurationRulePtrOutputWithContext(context.Background())
}

func (i ObjectBucketLockConfigurationRuleArgs) ToObjectBucketLockConfigurationRulePtrOutputWithContext(ctx context.Context) ObjectBucketLockConfigurationRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketLockConfigurationRuleOutput).ToObjectBucketLockConfigurationRulePtrOutputWithContext(ctx)
}

// ObjectBucketLockConfigurationRulePtrInput is an input type that accepts ObjectBucketLockConfigurationRuleArgs, ObjectBucketLockConfigurationRulePtr and ObjectBucketLockConfigurationRulePtrOutput values.
// You can construct a concrete instance of `ObjectBucketLockConfigurationRulePtrInput` via:
//
//	        ObjectBucketLockConfigurationRuleArgs{...}
//
//	or:
//
//	        nil
type ObjectBucketLockConfigurationRulePtrInput interface {
	pulumi.Input

	ToObjectBucketLockConfigurationRulePtrOutput() ObjectBucketLockConfigurationRulePtrOutput
	ToObjectBucketLockConfigurationRulePtrOutputWithContext(context.Context) ObjectBucketLockConfigurationRulePtrOutput
}

type objectBucketLockConfigurationRulePtrType ObjectBucketLockConfigurationRuleArgs

func ObjectBucketLockConfigurationRulePtr(v *ObjectBucketLockConfigurationRuleArgs) ObjectBucketLockConfigurationRulePtrInput {
	return (*objectBucketLockConfigurationRulePtrType)(v)
}

func (*objectBucketLockConfigurationRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectBucketLockConfigurationRule)(nil)).Elem()
}

func (i *objectBucketLockConfigurationRulePtrType) ToObjectBucketLockConfigurationRulePtrOutput() ObjectBucketLockConfigurationRulePtrOutput {
	return i.ToObjectBucketLockConfigurationRulePtrOutputWithContext(context.Background())
}

func (i *objectBucketLockConfigurationRulePtrType) ToObjectBucketLockConfigurationRulePtrOutputWithContext(ctx context.Context) ObjectBucketLockConfigurationRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketLockConfigurationRulePtrOutput)
}

func (i *objectBucketLockConfigurationRulePtrType) ToOutput(ctx context.Context) pulumix.Output[*ObjectBucketLockConfigurationRule] {
	return pulumix.Output[*ObjectBucketLockConfigurationRule]{
		OutputState: i.ToObjectBucketLockConfigurationRulePtrOutputWithContext(ctx).OutputState,
	}
}

type ObjectBucketLockConfigurationRuleOutput struct{ *pulumi.OutputState }

func (ObjectBucketLockConfigurationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketLockConfigurationRule)(nil)).Elem()
}

func (o ObjectBucketLockConfigurationRuleOutput) ToObjectBucketLockConfigurationRuleOutput() ObjectBucketLockConfigurationRuleOutput {
	return o
}

func (o ObjectBucketLockConfigurationRuleOutput) ToObjectBucketLockConfigurationRuleOutputWithContext(ctx context.Context) ObjectBucketLockConfigurationRuleOutput {
	return o
}

func (o ObjectBucketLockConfigurationRuleOutput) ToObjectBucketLockConfigurationRulePtrOutput() ObjectBucketLockConfigurationRulePtrOutput {
	return o.ToObjectBucketLockConfigurationRulePtrOutputWithContext(context.Background())
}

func (o ObjectBucketLockConfigurationRuleOutput) ToObjectBucketLockConfigurationRulePtrOutputWithContext(ctx context.Context) ObjectBucketLockConfigurationRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectBucketLockConfigurationRule) *ObjectBucketLockConfigurationRule {
		return &v
	}).(ObjectBucketLockConfigurationRulePtrOutput)
}

func (o ObjectBucketLockConfigurationRuleOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketLockConfigurationRule] {
	return pulumix.Output[ObjectBucketLockConfigurationRule]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketLockConfigurationRuleOutput) DefaultRetention() ObjectBucketLockConfigurationRuleDefaultRetentionOutput {
	return o.ApplyT(func(v ObjectBucketLockConfigurationRule) ObjectBucketLockConfigurationRuleDefaultRetention {
		return v.DefaultRetention
	}).(ObjectBucketLockConfigurationRuleDefaultRetentionOutput)
}

type ObjectBucketLockConfigurationRulePtrOutput struct{ *pulumi.OutputState }

func (ObjectBucketLockConfigurationRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectBucketLockConfigurationRule)(nil)).Elem()
}

func (o ObjectBucketLockConfigurationRulePtrOutput) ToObjectBucketLockConfigurationRulePtrOutput() ObjectBucketLockConfigurationRulePtrOutput {
	return o
}

func (o ObjectBucketLockConfigurationRulePtrOutput) ToObjectBucketLockConfigurationRulePtrOutputWithContext(ctx context.Context) ObjectBucketLockConfigurationRulePtrOutput {
	return o
}

func (o ObjectBucketLockConfigurationRulePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ObjectBucketLockConfigurationRule] {
	return pulumix.Output[*ObjectBucketLockConfigurationRule]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketLockConfigurationRulePtrOutput) Elem() ObjectBucketLockConfigurationRuleOutput {
	return o.ApplyT(func(v *ObjectBucketLockConfigurationRule) ObjectBucketLockConfigurationRule {
		if v != nil {
			return *v
		}
		var ret ObjectBucketLockConfigurationRule
		return ret
	}).(ObjectBucketLockConfigurationRuleOutput)
}

func (o ObjectBucketLockConfigurationRulePtrOutput) DefaultRetention() ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput {
	return o.ApplyT(func(v *ObjectBucketLockConfigurationRule) *ObjectBucketLockConfigurationRuleDefaultRetention {
		if v == nil {
			return nil
		}
		return &v.DefaultRetention
	}).(ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput)
}

type ObjectBucketLockConfigurationRuleDefaultRetention struct {
	Days  *int   `pulumi:"days"`
	Mode  string `pulumi:"mode"`
	Years *int   `pulumi:"years"`
}

// ObjectBucketLockConfigurationRuleDefaultRetentionInput is an input type that accepts ObjectBucketLockConfigurationRuleDefaultRetentionArgs and ObjectBucketLockConfigurationRuleDefaultRetentionOutput values.
// You can construct a concrete instance of `ObjectBucketLockConfigurationRuleDefaultRetentionInput` via:
//
//	ObjectBucketLockConfigurationRuleDefaultRetentionArgs{...}
type ObjectBucketLockConfigurationRuleDefaultRetentionInput interface {
	pulumi.Input

	ToObjectBucketLockConfigurationRuleDefaultRetentionOutput() ObjectBucketLockConfigurationRuleDefaultRetentionOutput
	ToObjectBucketLockConfigurationRuleDefaultRetentionOutputWithContext(context.Context) ObjectBucketLockConfigurationRuleDefaultRetentionOutput
}

type ObjectBucketLockConfigurationRuleDefaultRetentionArgs struct {
	Days  pulumi.IntPtrInput `pulumi:"days"`
	Mode  pulumi.StringInput `pulumi:"mode"`
	Years pulumi.IntPtrInput `pulumi:"years"`
}

func (ObjectBucketLockConfigurationRuleDefaultRetentionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketLockConfigurationRuleDefaultRetention)(nil)).Elem()
}

func (i ObjectBucketLockConfigurationRuleDefaultRetentionArgs) ToObjectBucketLockConfigurationRuleDefaultRetentionOutput() ObjectBucketLockConfigurationRuleDefaultRetentionOutput {
	return i.ToObjectBucketLockConfigurationRuleDefaultRetentionOutputWithContext(context.Background())
}

func (i ObjectBucketLockConfigurationRuleDefaultRetentionArgs) ToObjectBucketLockConfigurationRuleDefaultRetentionOutputWithContext(ctx context.Context) ObjectBucketLockConfigurationRuleDefaultRetentionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketLockConfigurationRuleDefaultRetentionOutput)
}

func (i ObjectBucketLockConfigurationRuleDefaultRetentionArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketLockConfigurationRuleDefaultRetention] {
	return pulumix.Output[ObjectBucketLockConfigurationRuleDefaultRetention]{
		OutputState: i.ToObjectBucketLockConfigurationRuleDefaultRetentionOutputWithContext(ctx).OutputState,
	}
}

func (i ObjectBucketLockConfigurationRuleDefaultRetentionArgs) ToObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput() ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput {
	return i.ToObjectBucketLockConfigurationRuleDefaultRetentionPtrOutputWithContext(context.Background())
}

func (i ObjectBucketLockConfigurationRuleDefaultRetentionArgs) ToObjectBucketLockConfigurationRuleDefaultRetentionPtrOutputWithContext(ctx context.Context) ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketLockConfigurationRuleDefaultRetentionOutput).ToObjectBucketLockConfigurationRuleDefaultRetentionPtrOutputWithContext(ctx)
}

// ObjectBucketLockConfigurationRuleDefaultRetentionPtrInput is an input type that accepts ObjectBucketLockConfigurationRuleDefaultRetentionArgs, ObjectBucketLockConfigurationRuleDefaultRetentionPtr and ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput values.
// You can construct a concrete instance of `ObjectBucketLockConfigurationRuleDefaultRetentionPtrInput` via:
//
//	        ObjectBucketLockConfigurationRuleDefaultRetentionArgs{...}
//
//	or:
//
//	        nil
type ObjectBucketLockConfigurationRuleDefaultRetentionPtrInput interface {
	pulumi.Input

	ToObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput() ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput
	ToObjectBucketLockConfigurationRuleDefaultRetentionPtrOutputWithContext(context.Context) ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput
}

type objectBucketLockConfigurationRuleDefaultRetentionPtrType ObjectBucketLockConfigurationRuleDefaultRetentionArgs

func ObjectBucketLockConfigurationRuleDefaultRetentionPtr(v *ObjectBucketLockConfigurationRuleDefaultRetentionArgs) ObjectBucketLockConfigurationRuleDefaultRetentionPtrInput {
	return (*objectBucketLockConfigurationRuleDefaultRetentionPtrType)(v)
}

func (*objectBucketLockConfigurationRuleDefaultRetentionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectBucketLockConfigurationRuleDefaultRetention)(nil)).Elem()
}

func (i *objectBucketLockConfigurationRuleDefaultRetentionPtrType) ToObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput() ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput {
	return i.ToObjectBucketLockConfigurationRuleDefaultRetentionPtrOutputWithContext(context.Background())
}

func (i *objectBucketLockConfigurationRuleDefaultRetentionPtrType) ToObjectBucketLockConfigurationRuleDefaultRetentionPtrOutputWithContext(ctx context.Context) ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput)
}

func (i *objectBucketLockConfigurationRuleDefaultRetentionPtrType) ToOutput(ctx context.Context) pulumix.Output[*ObjectBucketLockConfigurationRuleDefaultRetention] {
	return pulumix.Output[*ObjectBucketLockConfigurationRuleDefaultRetention]{
		OutputState: i.ToObjectBucketLockConfigurationRuleDefaultRetentionPtrOutputWithContext(ctx).OutputState,
	}
}

type ObjectBucketLockConfigurationRuleDefaultRetentionOutput struct{ *pulumi.OutputState }

func (ObjectBucketLockConfigurationRuleDefaultRetentionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketLockConfigurationRuleDefaultRetention)(nil)).Elem()
}

func (o ObjectBucketLockConfigurationRuleDefaultRetentionOutput) ToObjectBucketLockConfigurationRuleDefaultRetentionOutput() ObjectBucketLockConfigurationRuleDefaultRetentionOutput {
	return o
}

func (o ObjectBucketLockConfigurationRuleDefaultRetentionOutput) ToObjectBucketLockConfigurationRuleDefaultRetentionOutputWithContext(ctx context.Context) ObjectBucketLockConfigurationRuleDefaultRetentionOutput {
	return o
}

func (o ObjectBucketLockConfigurationRuleDefaultRetentionOutput) ToObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput() ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput {
	return o.ToObjectBucketLockConfigurationRuleDefaultRetentionPtrOutputWithContext(context.Background())
}

func (o ObjectBucketLockConfigurationRuleDefaultRetentionOutput) ToObjectBucketLockConfigurationRuleDefaultRetentionPtrOutputWithContext(ctx context.Context) ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectBucketLockConfigurationRuleDefaultRetention) *ObjectBucketLockConfigurationRuleDefaultRetention {
		return &v
	}).(ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput)
}

func (o ObjectBucketLockConfigurationRuleDefaultRetentionOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketLockConfigurationRuleDefaultRetention] {
	return pulumix.Output[ObjectBucketLockConfigurationRuleDefaultRetention]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketLockConfigurationRuleDefaultRetentionOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ObjectBucketLockConfigurationRuleDefaultRetention) *int { return v.Days }).(pulumi.IntPtrOutput)
}

func (o ObjectBucketLockConfigurationRuleDefaultRetentionOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectBucketLockConfigurationRuleDefaultRetention) string { return v.Mode }).(pulumi.StringOutput)
}

func (o ObjectBucketLockConfigurationRuleDefaultRetentionOutput) Years() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ObjectBucketLockConfigurationRuleDefaultRetention) *int { return v.Years }).(pulumi.IntPtrOutput)
}

type ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput struct{ *pulumi.OutputState }

func (ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectBucketLockConfigurationRuleDefaultRetention)(nil)).Elem()
}

func (o ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput) ToObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput() ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput {
	return o
}

func (o ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput) ToObjectBucketLockConfigurationRuleDefaultRetentionPtrOutputWithContext(ctx context.Context) ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput {
	return o
}

func (o ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ObjectBucketLockConfigurationRuleDefaultRetention] {
	return pulumix.Output[*ObjectBucketLockConfigurationRuleDefaultRetention]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput) Elem() ObjectBucketLockConfigurationRuleDefaultRetentionOutput {
	return o.ApplyT(func(v *ObjectBucketLockConfigurationRuleDefaultRetention) ObjectBucketLockConfigurationRuleDefaultRetention {
		if v != nil {
			return *v
		}
		var ret ObjectBucketLockConfigurationRuleDefaultRetention
		return ret
	}).(ObjectBucketLockConfigurationRuleDefaultRetentionOutput)
}

func (o ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ObjectBucketLockConfigurationRuleDefaultRetention) *int {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.IntPtrOutput)
}

func (o ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectBucketLockConfigurationRuleDefaultRetention) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

func (o ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput) Years() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ObjectBucketLockConfigurationRuleDefaultRetention) *int {
		if v == nil {
			return nil
		}
		return v.Years
	}).(pulumi.IntPtrOutput)
}

type ObjectBucketVersioning struct {
	// Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
	Enabled *bool `pulumi:"enabled"`
}

// ObjectBucketVersioningInput is an input type that accepts ObjectBucketVersioningArgs and ObjectBucketVersioningOutput values.
// You can construct a concrete instance of `ObjectBucketVersioningInput` via:
//
//	ObjectBucketVersioningArgs{...}
type ObjectBucketVersioningInput interface {
	pulumi.Input

	ToObjectBucketVersioningOutput() ObjectBucketVersioningOutput
	ToObjectBucketVersioningOutputWithContext(context.Context) ObjectBucketVersioningOutput
}

type ObjectBucketVersioningArgs struct {
	// Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ObjectBucketVersioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketVersioning)(nil)).Elem()
}

func (i ObjectBucketVersioningArgs) ToObjectBucketVersioningOutput() ObjectBucketVersioningOutput {
	return i.ToObjectBucketVersioningOutputWithContext(context.Background())
}

func (i ObjectBucketVersioningArgs) ToObjectBucketVersioningOutputWithContext(ctx context.Context) ObjectBucketVersioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketVersioningOutput)
}

func (i ObjectBucketVersioningArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketVersioning] {
	return pulumix.Output[ObjectBucketVersioning]{
		OutputState: i.ToObjectBucketVersioningOutputWithContext(ctx).OutputState,
	}
}

func (i ObjectBucketVersioningArgs) ToObjectBucketVersioningPtrOutput() ObjectBucketVersioningPtrOutput {
	return i.ToObjectBucketVersioningPtrOutputWithContext(context.Background())
}

func (i ObjectBucketVersioningArgs) ToObjectBucketVersioningPtrOutputWithContext(ctx context.Context) ObjectBucketVersioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketVersioningOutput).ToObjectBucketVersioningPtrOutputWithContext(ctx)
}

// ObjectBucketVersioningPtrInput is an input type that accepts ObjectBucketVersioningArgs, ObjectBucketVersioningPtr and ObjectBucketVersioningPtrOutput values.
// You can construct a concrete instance of `ObjectBucketVersioningPtrInput` via:
//
//	        ObjectBucketVersioningArgs{...}
//
//	or:
//
//	        nil
type ObjectBucketVersioningPtrInput interface {
	pulumi.Input

	ToObjectBucketVersioningPtrOutput() ObjectBucketVersioningPtrOutput
	ToObjectBucketVersioningPtrOutputWithContext(context.Context) ObjectBucketVersioningPtrOutput
}

type objectBucketVersioningPtrType ObjectBucketVersioningArgs

func ObjectBucketVersioningPtr(v *ObjectBucketVersioningArgs) ObjectBucketVersioningPtrInput {
	return (*objectBucketVersioningPtrType)(v)
}

func (*objectBucketVersioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectBucketVersioning)(nil)).Elem()
}

func (i *objectBucketVersioningPtrType) ToObjectBucketVersioningPtrOutput() ObjectBucketVersioningPtrOutput {
	return i.ToObjectBucketVersioningPtrOutputWithContext(context.Background())
}

func (i *objectBucketVersioningPtrType) ToObjectBucketVersioningPtrOutputWithContext(ctx context.Context) ObjectBucketVersioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketVersioningPtrOutput)
}

func (i *objectBucketVersioningPtrType) ToOutput(ctx context.Context) pulumix.Output[*ObjectBucketVersioning] {
	return pulumix.Output[*ObjectBucketVersioning]{
		OutputState: i.ToObjectBucketVersioningPtrOutputWithContext(ctx).OutputState,
	}
}

type ObjectBucketVersioningOutput struct{ *pulumi.OutputState }

func (ObjectBucketVersioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketVersioning)(nil)).Elem()
}

func (o ObjectBucketVersioningOutput) ToObjectBucketVersioningOutput() ObjectBucketVersioningOutput {
	return o
}

func (o ObjectBucketVersioningOutput) ToObjectBucketVersioningOutputWithContext(ctx context.Context) ObjectBucketVersioningOutput {
	return o
}

func (o ObjectBucketVersioningOutput) ToObjectBucketVersioningPtrOutput() ObjectBucketVersioningPtrOutput {
	return o.ToObjectBucketVersioningPtrOutputWithContext(context.Background())
}

func (o ObjectBucketVersioningOutput) ToObjectBucketVersioningPtrOutputWithContext(ctx context.Context) ObjectBucketVersioningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectBucketVersioning) *ObjectBucketVersioning {
		return &v
	}).(ObjectBucketVersioningPtrOutput)
}

func (o ObjectBucketVersioningOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketVersioning] {
	return pulumix.Output[ObjectBucketVersioning]{
		OutputState: o.OutputState,
	}
}

// Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
func (o ObjectBucketVersioningOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ObjectBucketVersioning) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ObjectBucketVersioningPtrOutput struct{ *pulumi.OutputState }

func (ObjectBucketVersioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectBucketVersioning)(nil)).Elem()
}

func (o ObjectBucketVersioningPtrOutput) ToObjectBucketVersioningPtrOutput() ObjectBucketVersioningPtrOutput {
	return o
}

func (o ObjectBucketVersioningPtrOutput) ToObjectBucketVersioningPtrOutputWithContext(ctx context.Context) ObjectBucketVersioningPtrOutput {
	return o
}

func (o ObjectBucketVersioningPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ObjectBucketVersioning] {
	return pulumix.Output[*ObjectBucketVersioning]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketVersioningPtrOutput) Elem() ObjectBucketVersioningOutput {
	return o.ApplyT(func(v *ObjectBucketVersioning) ObjectBucketVersioning {
		if v != nil {
			return *v
		}
		var ret ObjectBucketVersioning
		return ret
	}).(ObjectBucketVersioningOutput)
}

// Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
func (o ObjectBucketVersioningPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ObjectBucketVersioning) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type ObjectBucketWebsiteConfigurationErrorDocument struct {
	Key string `pulumi:"key"`
}

// ObjectBucketWebsiteConfigurationErrorDocumentInput is an input type that accepts ObjectBucketWebsiteConfigurationErrorDocumentArgs and ObjectBucketWebsiteConfigurationErrorDocumentOutput values.
// You can construct a concrete instance of `ObjectBucketWebsiteConfigurationErrorDocumentInput` via:
//
//	ObjectBucketWebsiteConfigurationErrorDocumentArgs{...}
type ObjectBucketWebsiteConfigurationErrorDocumentInput interface {
	pulumi.Input

	ToObjectBucketWebsiteConfigurationErrorDocumentOutput() ObjectBucketWebsiteConfigurationErrorDocumentOutput
	ToObjectBucketWebsiteConfigurationErrorDocumentOutputWithContext(context.Context) ObjectBucketWebsiteConfigurationErrorDocumentOutput
}

type ObjectBucketWebsiteConfigurationErrorDocumentArgs struct {
	Key pulumi.StringInput `pulumi:"key"`
}

func (ObjectBucketWebsiteConfigurationErrorDocumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketWebsiteConfigurationErrorDocument)(nil)).Elem()
}

func (i ObjectBucketWebsiteConfigurationErrorDocumentArgs) ToObjectBucketWebsiteConfigurationErrorDocumentOutput() ObjectBucketWebsiteConfigurationErrorDocumentOutput {
	return i.ToObjectBucketWebsiteConfigurationErrorDocumentOutputWithContext(context.Background())
}

func (i ObjectBucketWebsiteConfigurationErrorDocumentArgs) ToObjectBucketWebsiteConfigurationErrorDocumentOutputWithContext(ctx context.Context) ObjectBucketWebsiteConfigurationErrorDocumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketWebsiteConfigurationErrorDocumentOutput)
}

func (i ObjectBucketWebsiteConfigurationErrorDocumentArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketWebsiteConfigurationErrorDocument] {
	return pulumix.Output[ObjectBucketWebsiteConfigurationErrorDocument]{
		OutputState: i.ToObjectBucketWebsiteConfigurationErrorDocumentOutputWithContext(ctx).OutputState,
	}
}

func (i ObjectBucketWebsiteConfigurationErrorDocumentArgs) ToObjectBucketWebsiteConfigurationErrorDocumentPtrOutput() ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput {
	return i.ToObjectBucketWebsiteConfigurationErrorDocumentPtrOutputWithContext(context.Background())
}

func (i ObjectBucketWebsiteConfigurationErrorDocumentArgs) ToObjectBucketWebsiteConfigurationErrorDocumentPtrOutputWithContext(ctx context.Context) ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketWebsiteConfigurationErrorDocumentOutput).ToObjectBucketWebsiteConfigurationErrorDocumentPtrOutputWithContext(ctx)
}

// ObjectBucketWebsiteConfigurationErrorDocumentPtrInput is an input type that accepts ObjectBucketWebsiteConfigurationErrorDocumentArgs, ObjectBucketWebsiteConfigurationErrorDocumentPtr and ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput values.
// You can construct a concrete instance of `ObjectBucketWebsiteConfigurationErrorDocumentPtrInput` via:
//
//	        ObjectBucketWebsiteConfigurationErrorDocumentArgs{...}
//
//	or:
//
//	        nil
type ObjectBucketWebsiteConfigurationErrorDocumentPtrInput interface {
	pulumi.Input

	ToObjectBucketWebsiteConfigurationErrorDocumentPtrOutput() ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput
	ToObjectBucketWebsiteConfigurationErrorDocumentPtrOutputWithContext(context.Context) ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput
}

type objectBucketWebsiteConfigurationErrorDocumentPtrType ObjectBucketWebsiteConfigurationErrorDocumentArgs

func ObjectBucketWebsiteConfigurationErrorDocumentPtr(v *ObjectBucketWebsiteConfigurationErrorDocumentArgs) ObjectBucketWebsiteConfigurationErrorDocumentPtrInput {
	return (*objectBucketWebsiteConfigurationErrorDocumentPtrType)(v)
}

func (*objectBucketWebsiteConfigurationErrorDocumentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectBucketWebsiteConfigurationErrorDocument)(nil)).Elem()
}

func (i *objectBucketWebsiteConfigurationErrorDocumentPtrType) ToObjectBucketWebsiteConfigurationErrorDocumentPtrOutput() ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput {
	return i.ToObjectBucketWebsiteConfigurationErrorDocumentPtrOutputWithContext(context.Background())
}

func (i *objectBucketWebsiteConfigurationErrorDocumentPtrType) ToObjectBucketWebsiteConfigurationErrorDocumentPtrOutputWithContext(ctx context.Context) ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput)
}

func (i *objectBucketWebsiteConfigurationErrorDocumentPtrType) ToOutput(ctx context.Context) pulumix.Output[*ObjectBucketWebsiteConfigurationErrorDocument] {
	return pulumix.Output[*ObjectBucketWebsiteConfigurationErrorDocument]{
		OutputState: i.ToObjectBucketWebsiteConfigurationErrorDocumentPtrOutputWithContext(ctx).OutputState,
	}
}

type ObjectBucketWebsiteConfigurationErrorDocumentOutput struct{ *pulumi.OutputState }

func (ObjectBucketWebsiteConfigurationErrorDocumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketWebsiteConfigurationErrorDocument)(nil)).Elem()
}

func (o ObjectBucketWebsiteConfigurationErrorDocumentOutput) ToObjectBucketWebsiteConfigurationErrorDocumentOutput() ObjectBucketWebsiteConfigurationErrorDocumentOutput {
	return o
}

func (o ObjectBucketWebsiteConfigurationErrorDocumentOutput) ToObjectBucketWebsiteConfigurationErrorDocumentOutputWithContext(ctx context.Context) ObjectBucketWebsiteConfigurationErrorDocumentOutput {
	return o
}

func (o ObjectBucketWebsiteConfigurationErrorDocumentOutput) ToObjectBucketWebsiteConfigurationErrorDocumentPtrOutput() ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput {
	return o.ToObjectBucketWebsiteConfigurationErrorDocumentPtrOutputWithContext(context.Background())
}

func (o ObjectBucketWebsiteConfigurationErrorDocumentOutput) ToObjectBucketWebsiteConfigurationErrorDocumentPtrOutputWithContext(ctx context.Context) ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectBucketWebsiteConfigurationErrorDocument) *ObjectBucketWebsiteConfigurationErrorDocument {
		return &v
	}).(ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput)
}

func (o ObjectBucketWebsiteConfigurationErrorDocumentOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketWebsiteConfigurationErrorDocument] {
	return pulumix.Output[ObjectBucketWebsiteConfigurationErrorDocument]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketWebsiteConfigurationErrorDocumentOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectBucketWebsiteConfigurationErrorDocument) string { return v.Key }).(pulumi.StringOutput)
}

type ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput struct{ *pulumi.OutputState }

func (ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectBucketWebsiteConfigurationErrorDocument)(nil)).Elem()
}

func (o ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput) ToObjectBucketWebsiteConfigurationErrorDocumentPtrOutput() ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput {
	return o
}

func (o ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput) ToObjectBucketWebsiteConfigurationErrorDocumentPtrOutputWithContext(ctx context.Context) ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput {
	return o
}

func (o ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ObjectBucketWebsiteConfigurationErrorDocument] {
	return pulumix.Output[*ObjectBucketWebsiteConfigurationErrorDocument]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput) Elem() ObjectBucketWebsiteConfigurationErrorDocumentOutput {
	return o.ApplyT(func(v *ObjectBucketWebsiteConfigurationErrorDocument) ObjectBucketWebsiteConfigurationErrorDocument {
		if v != nil {
			return *v
		}
		var ret ObjectBucketWebsiteConfigurationErrorDocument
		return ret
	}).(ObjectBucketWebsiteConfigurationErrorDocumentOutput)
}

func (o ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectBucketWebsiteConfigurationErrorDocument) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

type ObjectBucketWebsiteConfigurationIndexDocument struct {
	Suffix string `pulumi:"suffix"`
}

// ObjectBucketWebsiteConfigurationIndexDocumentInput is an input type that accepts ObjectBucketWebsiteConfigurationIndexDocumentArgs and ObjectBucketWebsiteConfigurationIndexDocumentOutput values.
// You can construct a concrete instance of `ObjectBucketWebsiteConfigurationIndexDocumentInput` via:
//
//	ObjectBucketWebsiteConfigurationIndexDocumentArgs{...}
type ObjectBucketWebsiteConfigurationIndexDocumentInput interface {
	pulumi.Input

	ToObjectBucketWebsiteConfigurationIndexDocumentOutput() ObjectBucketWebsiteConfigurationIndexDocumentOutput
	ToObjectBucketWebsiteConfigurationIndexDocumentOutputWithContext(context.Context) ObjectBucketWebsiteConfigurationIndexDocumentOutput
}

type ObjectBucketWebsiteConfigurationIndexDocumentArgs struct {
	Suffix pulumi.StringInput `pulumi:"suffix"`
}

func (ObjectBucketWebsiteConfigurationIndexDocumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketWebsiteConfigurationIndexDocument)(nil)).Elem()
}

func (i ObjectBucketWebsiteConfigurationIndexDocumentArgs) ToObjectBucketWebsiteConfigurationIndexDocumentOutput() ObjectBucketWebsiteConfigurationIndexDocumentOutput {
	return i.ToObjectBucketWebsiteConfigurationIndexDocumentOutputWithContext(context.Background())
}

func (i ObjectBucketWebsiteConfigurationIndexDocumentArgs) ToObjectBucketWebsiteConfigurationIndexDocumentOutputWithContext(ctx context.Context) ObjectBucketWebsiteConfigurationIndexDocumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketWebsiteConfigurationIndexDocumentOutput)
}

func (i ObjectBucketWebsiteConfigurationIndexDocumentArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketWebsiteConfigurationIndexDocument] {
	return pulumix.Output[ObjectBucketWebsiteConfigurationIndexDocument]{
		OutputState: i.ToObjectBucketWebsiteConfigurationIndexDocumentOutputWithContext(ctx).OutputState,
	}
}

func (i ObjectBucketWebsiteConfigurationIndexDocumentArgs) ToObjectBucketWebsiteConfigurationIndexDocumentPtrOutput() ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput {
	return i.ToObjectBucketWebsiteConfigurationIndexDocumentPtrOutputWithContext(context.Background())
}

func (i ObjectBucketWebsiteConfigurationIndexDocumentArgs) ToObjectBucketWebsiteConfigurationIndexDocumentPtrOutputWithContext(ctx context.Context) ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketWebsiteConfigurationIndexDocumentOutput).ToObjectBucketWebsiteConfigurationIndexDocumentPtrOutputWithContext(ctx)
}

// ObjectBucketWebsiteConfigurationIndexDocumentPtrInput is an input type that accepts ObjectBucketWebsiteConfigurationIndexDocumentArgs, ObjectBucketWebsiteConfigurationIndexDocumentPtr and ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput values.
// You can construct a concrete instance of `ObjectBucketWebsiteConfigurationIndexDocumentPtrInput` via:
//
//	        ObjectBucketWebsiteConfigurationIndexDocumentArgs{...}
//
//	or:
//
//	        nil
type ObjectBucketWebsiteConfigurationIndexDocumentPtrInput interface {
	pulumi.Input

	ToObjectBucketWebsiteConfigurationIndexDocumentPtrOutput() ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput
	ToObjectBucketWebsiteConfigurationIndexDocumentPtrOutputWithContext(context.Context) ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput
}

type objectBucketWebsiteConfigurationIndexDocumentPtrType ObjectBucketWebsiteConfigurationIndexDocumentArgs

func ObjectBucketWebsiteConfigurationIndexDocumentPtr(v *ObjectBucketWebsiteConfigurationIndexDocumentArgs) ObjectBucketWebsiteConfigurationIndexDocumentPtrInput {
	return (*objectBucketWebsiteConfigurationIndexDocumentPtrType)(v)
}

func (*objectBucketWebsiteConfigurationIndexDocumentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectBucketWebsiteConfigurationIndexDocument)(nil)).Elem()
}

func (i *objectBucketWebsiteConfigurationIndexDocumentPtrType) ToObjectBucketWebsiteConfigurationIndexDocumentPtrOutput() ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput {
	return i.ToObjectBucketWebsiteConfigurationIndexDocumentPtrOutputWithContext(context.Background())
}

func (i *objectBucketWebsiteConfigurationIndexDocumentPtrType) ToObjectBucketWebsiteConfigurationIndexDocumentPtrOutputWithContext(ctx context.Context) ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput)
}

func (i *objectBucketWebsiteConfigurationIndexDocumentPtrType) ToOutput(ctx context.Context) pulumix.Output[*ObjectBucketWebsiteConfigurationIndexDocument] {
	return pulumix.Output[*ObjectBucketWebsiteConfigurationIndexDocument]{
		OutputState: i.ToObjectBucketWebsiteConfigurationIndexDocumentPtrOutputWithContext(ctx).OutputState,
	}
}

type ObjectBucketWebsiteConfigurationIndexDocumentOutput struct{ *pulumi.OutputState }

func (ObjectBucketWebsiteConfigurationIndexDocumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectBucketWebsiteConfigurationIndexDocument)(nil)).Elem()
}

func (o ObjectBucketWebsiteConfigurationIndexDocumentOutput) ToObjectBucketWebsiteConfigurationIndexDocumentOutput() ObjectBucketWebsiteConfigurationIndexDocumentOutput {
	return o
}

func (o ObjectBucketWebsiteConfigurationIndexDocumentOutput) ToObjectBucketWebsiteConfigurationIndexDocumentOutputWithContext(ctx context.Context) ObjectBucketWebsiteConfigurationIndexDocumentOutput {
	return o
}

func (o ObjectBucketWebsiteConfigurationIndexDocumentOutput) ToObjectBucketWebsiteConfigurationIndexDocumentPtrOutput() ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput {
	return o.ToObjectBucketWebsiteConfigurationIndexDocumentPtrOutputWithContext(context.Background())
}

func (o ObjectBucketWebsiteConfigurationIndexDocumentOutput) ToObjectBucketWebsiteConfigurationIndexDocumentPtrOutputWithContext(ctx context.Context) ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectBucketWebsiteConfigurationIndexDocument) *ObjectBucketWebsiteConfigurationIndexDocument {
		return &v
	}).(ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput)
}

func (o ObjectBucketWebsiteConfigurationIndexDocumentOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectBucketWebsiteConfigurationIndexDocument] {
	return pulumix.Output[ObjectBucketWebsiteConfigurationIndexDocument]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketWebsiteConfigurationIndexDocumentOutput) Suffix() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectBucketWebsiteConfigurationIndexDocument) string { return v.Suffix }).(pulumi.StringOutput)
}

type ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput struct{ *pulumi.OutputState }

func (ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectBucketWebsiteConfigurationIndexDocument)(nil)).Elem()
}

func (o ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput) ToObjectBucketWebsiteConfigurationIndexDocumentPtrOutput() ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput {
	return o
}

func (o ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput) ToObjectBucketWebsiteConfigurationIndexDocumentPtrOutputWithContext(ctx context.Context) ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput {
	return o
}

func (o ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ObjectBucketWebsiteConfigurationIndexDocument] {
	return pulumix.Output[*ObjectBucketWebsiteConfigurationIndexDocument]{
		OutputState: o.OutputState,
	}
}

func (o ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput) Elem() ObjectBucketWebsiteConfigurationIndexDocumentOutput {
	return o.ApplyT(func(v *ObjectBucketWebsiteConfigurationIndexDocument) ObjectBucketWebsiteConfigurationIndexDocument {
		if v != nil {
			return *v
		}
		var ret ObjectBucketWebsiteConfigurationIndexDocument
		return ret
	}).(ObjectBucketWebsiteConfigurationIndexDocumentOutput)
}

func (o ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectBucketWebsiteConfigurationIndexDocument) *string {
		if v == nil {
			return nil
		}
		return &v.Suffix
	}).(pulumi.StringPtrOutput)
}

type RdbAclAclRule struct {
	// A text describing this rule. Default description: `IP allowed`
	Description *string `pulumi:"description"`
	// The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
	Ip string `pulumi:"ip"`
}

// RdbAclAclRuleInput is an input type that accepts RdbAclAclRuleArgs and RdbAclAclRuleOutput values.
// You can construct a concrete instance of `RdbAclAclRuleInput` via:
//
//	RdbAclAclRuleArgs{...}
type RdbAclAclRuleInput interface {
	pulumi.Input

	ToRdbAclAclRuleOutput() RdbAclAclRuleOutput
	ToRdbAclAclRuleOutputWithContext(context.Context) RdbAclAclRuleOutput
}

type RdbAclAclRuleArgs struct {
	// A text describing this rule. Default description: `IP allowed`
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (RdbAclAclRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RdbAclAclRule)(nil)).Elem()
}

func (i RdbAclAclRuleArgs) ToRdbAclAclRuleOutput() RdbAclAclRuleOutput {
	return i.ToRdbAclAclRuleOutputWithContext(context.Background())
}

func (i RdbAclAclRuleArgs) ToRdbAclAclRuleOutputWithContext(ctx context.Context) RdbAclAclRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbAclAclRuleOutput)
}

func (i RdbAclAclRuleArgs) ToOutput(ctx context.Context) pulumix.Output[RdbAclAclRule] {
	return pulumix.Output[RdbAclAclRule]{
		OutputState: i.ToRdbAclAclRuleOutputWithContext(ctx).OutputState,
	}
}

// RdbAclAclRuleArrayInput is an input type that accepts RdbAclAclRuleArray and RdbAclAclRuleArrayOutput values.
// You can construct a concrete instance of `RdbAclAclRuleArrayInput` via:
//
//	RdbAclAclRuleArray{ RdbAclAclRuleArgs{...} }
type RdbAclAclRuleArrayInput interface {
	pulumi.Input

	ToRdbAclAclRuleArrayOutput() RdbAclAclRuleArrayOutput
	ToRdbAclAclRuleArrayOutputWithContext(context.Context) RdbAclAclRuleArrayOutput
}

type RdbAclAclRuleArray []RdbAclAclRuleInput

func (RdbAclAclRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdbAclAclRule)(nil)).Elem()
}

func (i RdbAclAclRuleArray) ToRdbAclAclRuleArrayOutput() RdbAclAclRuleArrayOutput {
	return i.ToRdbAclAclRuleArrayOutputWithContext(context.Background())
}

func (i RdbAclAclRuleArray) ToRdbAclAclRuleArrayOutputWithContext(ctx context.Context) RdbAclAclRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbAclAclRuleArrayOutput)
}

func (i RdbAclAclRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]RdbAclAclRule] {
	return pulumix.Output[[]RdbAclAclRule]{
		OutputState: i.ToRdbAclAclRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type RdbAclAclRuleOutput struct{ *pulumi.OutputState }

func (RdbAclAclRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RdbAclAclRule)(nil)).Elem()
}

func (o RdbAclAclRuleOutput) ToRdbAclAclRuleOutput() RdbAclAclRuleOutput {
	return o
}

func (o RdbAclAclRuleOutput) ToRdbAclAclRuleOutputWithContext(ctx context.Context) RdbAclAclRuleOutput {
	return o
}

func (o RdbAclAclRuleOutput) ToOutput(ctx context.Context) pulumix.Output[RdbAclAclRule] {
	return pulumix.Output[RdbAclAclRule]{
		OutputState: o.OutputState,
	}
}

// A text describing this rule. Default description: `IP allowed`
func (o RdbAclAclRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbAclAclRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
func (o RdbAclAclRuleOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v RdbAclAclRule) string { return v.Ip }).(pulumi.StringOutput)
}

type RdbAclAclRuleArrayOutput struct{ *pulumi.OutputState }

func (RdbAclAclRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdbAclAclRule)(nil)).Elem()
}

func (o RdbAclAclRuleArrayOutput) ToRdbAclAclRuleArrayOutput() RdbAclAclRuleArrayOutput {
	return o
}

func (o RdbAclAclRuleArrayOutput) ToRdbAclAclRuleArrayOutputWithContext(ctx context.Context) RdbAclAclRuleArrayOutput {
	return o
}

func (o RdbAclAclRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RdbAclAclRule] {
	return pulumix.Output[[]RdbAclAclRule]{
		OutputState: o.OutputState,
	}
}

func (o RdbAclAclRuleArrayOutput) Index(i pulumi.IntInput) RdbAclAclRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RdbAclAclRule {
		return vs[0].([]RdbAclAclRule)[vs[1].(int)]
	}).(RdbAclAclRuleOutput)
}

type RdbInstanceLoadBalancer struct {
	// The ID of the endpoint.
	EndpointId *string `pulumi:"endpointId"`
	// Hostname of the endpoint.
	Hostname *string `pulumi:"hostname"`
	// IPv4 address on the network.
	Ip *string `pulumi:"ip"`
	// The name of the Database Instance.
	Name *string `pulumi:"name"`
	// Port in the Private Network.
	Port *int `pulumi:"port"`
}

// RdbInstanceLoadBalancerInput is an input type that accepts RdbInstanceLoadBalancerArgs and RdbInstanceLoadBalancerOutput values.
// You can construct a concrete instance of `RdbInstanceLoadBalancerInput` via:
//
//	RdbInstanceLoadBalancerArgs{...}
type RdbInstanceLoadBalancerInput interface {
	pulumi.Input

	ToRdbInstanceLoadBalancerOutput() RdbInstanceLoadBalancerOutput
	ToRdbInstanceLoadBalancerOutputWithContext(context.Context) RdbInstanceLoadBalancerOutput
}

type RdbInstanceLoadBalancerArgs struct {
	// The ID of the endpoint.
	EndpointId pulumi.StringPtrInput `pulumi:"endpointId"`
	// Hostname of the endpoint.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// IPv4 address on the network.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The name of the Database Instance.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Port in the Private Network.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (RdbInstanceLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RdbInstanceLoadBalancer)(nil)).Elem()
}

func (i RdbInstanceLoadBalancerArgs) ToRdbInstanceLoadBalancerOutput() RdbInstanceLoadBalancerOutput {
	return i.ToRdbInstanceLoadBalancerOutputWithContext(context.Background())
}

func (i RdbInstanceLoadBalancerArgs) ToRdbInstanceLoadBalancerOutputWithContext(ctx context.Context) RdbInstanceLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbInstanceLoadBalancerOutput)
}

func (i RdbInstanceLoadBalancerArgs) ToOutput(ctx context.Context) pulumix.Output[RdbInstanceLoadBalancer] {
	return pulumix.Output[RdbInstanceLoadBalancer]{
		OutputState: i.ToRdbInstanceLoadBalancerOutputWithContext(ctx).OutputState,
	}
}

// RdbInstanceLoadBalancerArrayInput is an input type that accepts RdbInstanceLoadBalancerArray and RdbInstanceLoadBalancerArrayOutput values.
// You can construct a concrete instance of `RdbInstanceLoadBalancerArrayInput` via:
//
//	RdbInstanceLoadBalancerArray{ RdbInstanceLoadBalancerArgs{...} }
type RdbInstanceLoadBalancerArrayInput interface {
	pulumi.Input

	ToRdbInstanceLoadBalancerArrayOutput() RdbInstanceLoadBalancerArrayOutput
	ToRdbInstanceLoadBalancerArrayOutputWithContext(context.Context) RdbInstanceLoadBalancerArrayOutput
}

type RdbInstanceLoadBalancerArray []RdbInstanceLoadBalancerInput

func (RdbInstanceLoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdbInstanceLoadBalancer)(nil)).Elem()
}

func (i RdbInstanceLoadBalancerArray) ToRdbInstanceLoadBalancerArrayOutput() RdbInstanceLoadBalancerArrayOutput {
	return i.ToRdbInstanceLoadBalancerArrayOutputWithContext(context.Background())
}

func (i RdbInstanceLoadBalancerArray) ToRdbInstanceLoadBalancerArrayOutputWithContext(ctx context.Context) RdbInstanceLoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbInstanceLoadBalancerArrayOutput)
}

func (i RdbInstanceLoadBalancerArray) ToOutput(ctx context.Context) pulumix.Output[[]RdbInstanceLoadBalancer] {
	return pulumix.Output[[]RdbInstanceLoadBalancer]{
		OutputState: i.ToRdbInstanceLoadBalancerArrayOutputWithContext(ctx).OutputState,
	}
}

type RdbInstanceLoadBalancerOutput struct{ *pulumi.OutputState }

func (RdbInstanceLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RdbInstanceLoadBalancer)(nil)).Elem()
}

func (o RdbInstanceLoadBalancerOutput) ToRdbInstanceLoadBalancerOutput() RdbInstanceLoadBalancerOutput {
	return o
}

func (o RdbInstanceLoadBalancerOutput) ToRdbInstanceLoadBalancerOutputWithContext(ctx context.Context) RdbInstanceLoadBalancerOutput {
	return o
}

func (o RdbInstanceLoadBalancerOutput) ToOutput(ctx context.Context) pulumix.Output[RdbInstanceLoadBalancer] {
	return pulumix.Output[RdbInstanceLoadBalancer]{
		OutputState: o.OutputState,
	}
}

// The ID of the endpoint.
func (o RdbInstanceLoadBalancerOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbInstanceLoadBalancer) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

// Hostname of the endpoint.
func (o RdbInstanceLoadBalancerOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbInstanceLoadBalancer) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// IPv4 address on the network.
func (o RdbInstanceLoadBalancerOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbInstanceLoadBalancer) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The name of the Database Instance.
func (o RdbInstanceLoadBalancerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbInstanceLoadBalancer) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Port in the Private Network.
func (o RdbInstanceLoadBalancerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RdbInstanceLoadBalancer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type RdbInstanceLoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (RdbInstanceLoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdbInstanceLoadBalancer)(nil)).Elem()
}

func (o RdbInstanceLoadBalancerArrayOutput) ToRdbInstanceLoadBalancerArrayOutput() RdbInstanceLoadBalancerArrayOutput {
	return o
}

func (o RdbInstanceLoadBalancerArrayOutput) ToRdbInstanceLoadBalancerArrayOutputWithContext(ctx context.Context) RdbInstanceLoadBalancerArrayOutput {
	return o
}

func (o RdbInstanceLoadBalancerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RdbInstanceLoadBalancer] {
	return pulumix.Output[[]RdbInstanceLoadBalancer]{
		OutputState: o.OutputState,
	}
}

func (o RdbInstanceLoadBalancerArrayOutput) Index(i pulumi.IntInput) RdbInstanceLoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RdbInstanceLoadBalancer {
		return vs[0].([]RdbInstanceLoadBalancer)[vs[1].(int)]
	}).(RdbInstanceLoadBalancerOutput)
}

type RdbInstancePrivateNetwork struct {
	// The ID of the endpoint.
	EndpointId *string `pulumi:"endpointId"`
	// Hostname of the endpoint.
	Hostname *string `pulumi:"hostname"`
	// IPv4 address on the network.
	Ip    *string `pulumi:"ip"`
	IpNet *string `pulumi:"ipNet"`
	// The name of the Database Instance.
	Name *string `pulumi:"name"`
	PnId string  `pulumi:"pnId"`
	// Port in the Private Network.
	Port *int    `pulumi:"port"`
	Zone *string `pulumi:"zone"`
}

// RdbInstancePrivateNetworkInput is an input type that accepts RdbInstancePrivateNetworkArgs and RdbInstancePrivateNetworkOutput values.
// You can construct a concrete instance of `RdbInstancePrivateNetworkInput` via:
//
//	RdbInstancePrivateNetworkArgs{...}
type RdbInstancePrivateNetworkInput interface {
	pulumi.Input

	ToRdbInstancePrivateNetworkOutput() RdbInstancePrivateNetworkOutput
	ToRdbInstancePrivateNetworkOutputWithContext(context.Context) RdbInstancePrivateNetworkOutput
}

type RdbInstancePrivateNetworkArgs struct {
	// The ID of the endpoint.
	EndpointId pulumi.StringPtrInput `pulumi:"endpointId"`
	// Hostname of the endpoint.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// IPv4 address on the network.
	Ip    pulumi.StringPtrInput `pulumi:"ip"`
	IpNet pulumi.StringPtrInput `pulumi:"ipNet"`
	// The name of the Database Instance.
	Name pulumi.StringPtrInput `pulumi:"name"`
	PnId pulumi.StringInput    `pulumi:"pnId"`
	// Port in the Private Network.
	Port pulumi.IntPtrInput    `pulumi:"port"`
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (RdbInstancePrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RdbInstancePrivateNetwork)(nil)).Elem()
}

func (i RdbInstancePrivateNetworkArgs) ToRdbInstancePrivateNetworkOutput() RdbInstancePrivateNetworkOutput {
	return i.ToRdbInstancePrivateNetworkOutputWithContext(context.Background())
}

func (i RdbInstancePrivateNetworkArgs) ToRdbInstancePrivateNetworkOutputWithContext(ctx context.Context) RdbInstancePrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbInstancePrivateNetworkOutput)
}

func (i RdbInstancePrivateNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[RdbInstancePrivateNetwork] {
	return pulumix.Output[RdbInstancePrivateNetwork]{
		OutputState: i.ToRdbInstancePrivateNetworkOutputWithContext(ctx).OutputState,
	}
}

func (i RdbInstancePrivateNetworkArgs) ToRdbInstancePrivateNetworkPtrOutput() RdbInstancePrivateNetworkPtrOutput {
	return i.ToRdbInstancePrivateNetworkPtrOutputWithContext(context.Background())
}

func (i RdbInstancePrivateNetworkArgs) ToRdbInstancePrivateNetworkPtrOutputWithContext(ctx context.Context) RdbInstancePrivateNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbInstancePrivateNetworkOutput).ToRdbInstancePrivateNetworkPtrOutputWithContext(ctx)
}

// RdbInstancePrivateNetworkPtrInput is an input type that accepts RdbInstancePrivateNetworkArgs, RdbInstancePrivateNetworkPtr and RdbInstancePrivateNetworkPtrOutput values.
// You can construct a concrete instance of `RdbInstancePrivateNetworkPtrInput` via:
//
//	        RdbInstancePrivateNetworkArgs{...}
//
//	or:
//
//	        nil
type RdbInstancePrivateNetworkPtrInput interface {
	pulumi.Input

	ToRdbInstancePrivateNetworkPtrOutput() RdbInstancePrivateNetworkPtrOutput
	ToRdbInstancePrivateNetworkPtrOutputWithContext(context.Context) RdbInstancePrivateNetworkPtrOutput
}

type rdbInstancePrivateNetworkPtrType RdbInstancePrivateNetworkArgs

func RdbInstancePrivateNetworkPtr(v *RdbInstancePrivateNetworkArgs) RdbInstancePrivateNetworkPtrInput {
	return (*rdbInstancePrivateNetworkPtrType)(v)
}

func (*rdbInstancePrivateNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RdbInstancePrivateNetwork)(nil)).Elem()
}

func (i *rdbInstancePrivateNetworkPtrType) ToRdbInstancePrivateNetworkPtrOutput() RdbInstancePrivateNetworkPtrOutput {
	return i.ToRdbInstancePrivateNetworkPtrOutputWithContext(context.Background())
}

func (i *rdbInstancePrivateNetworkPtrType) ToRdbInstancePrivateNetworkPtrOutputWithContext(ctx context.Context) RdbInstancePrivateNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbInstancePrivateNetworkPtrOutput)
}

func (i *rdbInstancePrivateNetworkPtrType) ToOutput(ctx context.Context) pulumix.Output[*RdbInstancePrivateNetwork] {
	return pulumix.Output[*RdbInstancePrivateNetwork]{
		OutputState: i.ToRdbInstancePrivateNetworkPtrOutputWithContext(ctx).OutputState,
	}
}

type RdbInstancePrivateNetworkOutput struct{ *pulumi.OutputState }

func (RdbInstancePrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RdbInstancePrivateNetwork)(nil)).Elem()
}

func (o RdbInstancePrivateNetworkOutput) ToRdbInstancePrivateNetworkOutput() RdbInstancePrivateNetworkOutput {
	return o
}

func (o RdbInstancePrivateNetworkOutput) ToRdbInstancePrivateNetworkOutputWithContext(ctx context.Context) RdbInstancePrivateNetworkOutput {
	return o
}

func (o RdbInstancePrivateNetworkOutput) ToRdbInstancePrivateNetworkPtrOutput() RdbInstancePrivateNetworkPtrOutput {
	return o.ToRdbInstancePrivateNetworkPtrOutputWithContext(context.Background())
}

func (o RdbInstancePrivateNetworkOutput) ToRdbInstancePrivateNetworkPtrOutputWithContext(ctx context.Context) RdbInstancePrivateNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RdbInstancePrivateNetwork) *RdbInstancePrivateNetwork {
		return &v
	}).(RdbInstancePrivateNetworkPtrOutput)
}

func (o RdbInstancePrivateNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[RdbInstancePrivateNetwork] {
	return pulumix.Output[RdbInstancePrivateNetwork]{
		OutputState: o.OutputState,
	}
}

// The ID of the endpoint.
func (o RdbInstancePrivateNetworkOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbInstancePrivateNetwork) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

// Hostname of the endpoint.
func (o RdbInstancePrivateNetworkOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbInstancePrivateNetwork) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// IPv4 address on the network.
func (o RdbInstancePrivateNetworkOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbInstancePrivateNetwork) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o RdbInstancePrivateNetworkOutput) IpNet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbInstancePrivateNetwork) *string { return v.IpNet }).(pulumi.StringPtrOutput)
}

// The name of the Database Instance.
func (o RdbInstancePrivateNetworkOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbInstancePrivateNetwork) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o RdbInstancePrivateNetworkOutput) PnId() pulumi.StringOutput {
	return o.ApplyT(func(v RdbInstancePrivateNetwork) string { return v.PnId }).(pulumi.StringOutput)
}

// Port in the Private Network.
func (o RdbInstancePrivateNetworkOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RdbInstancePrivateNetwork) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o RdbInstancePrivateNetworkOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbInstancePrivateNetwork) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type RdbInstancePrivateNetworkPtrOutput struct{ *pulumi.OutputState }

func (RdbInstancePrivateNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdbInstancePrivateNetwork)(nil)).Elem()
}

func (o RdbInstancePrivateNetworkPtrOutput) ToRdbInstancePrivateNetworkPtrOutput() RdbInstancePrivateNetworkPtrOutput {
	return o
}

func (o RdbInstancePrivateNetworkPtrOutput) ToRdbInstancePrivateNetworkPtrOutputWithContext(ctx context.Context) RdbInstancePrivateNetworkPtrOutput {
	return o
}

func (o RdbInstancePrivateNetworkPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RdbInstancePrivateNetwork] {
	return pulumix.Output[*RdbInstancePrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o RdbInstancePrivateNetworkPtrOutput) Elem() RdbInstancePrivateNetworkOutput {
	return o.ApplyT(func(v *RdbInstancePrivateNetwork) RdbInstancePrivateNetwork {
		if v != nil {
			return *v
		}
		var ret RdbInstancePrivateNetwork
		return ret
	}).(RdbInstancePrivateNetworkOutput)
}

// The ID of the endpoint.
func (o RdbInstancePrivateNetworkPtrOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdbInstancePrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.EndpointId
	}).(pulumi.StringPtrOutput)
}

// Hostname of the endpoint.
func (o RdbInstancePrivateNetworkPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdbInstancePrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// IPv4 address on the network.
func (o RdbInstancePrivateNetworkPtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdbInstancePrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

func (o RdbInstancePrivateNetworkPtrOutput) IpNet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdbInstancePrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.IpNet
	}).(pulumi.StringPtrOutput)
}

// The name of the Database Instance.
func (o RdbInstancePrivateNetworkPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdbInstancePrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o RdbInstancePrivateNetworkPtrOutput) PnId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdbInstancePrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.PnId
	}).(pulumi.StringPtrOutput)
}

// Port in the Private Network.
func (o RdbInstancePrivateNetworkPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RdbInstancePrivateNetwork) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

func (o RdbInstancePrivateNetworkPtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdbInstancePrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Zone
	}).(pulumi.StringPtrOutput)
}

type RdbInstanceReadReplica struct {
	// IPv4 address on the network.
	Ip *string `pulumi:"ip"`
	// The name of the Database Instance.
	Name *string `pulumi:"name"`
	// Port in the Private Network.
	Port *int `pulumi:"port"`
}

// RdbInstanceReadReplicaInput is an input type that accepts RdbInstanceReadReplicaArgs and RdbInstanceReadReplicaOutput values.
// You can construct a concrete instance of `RdbInstanceReadReplicaInput` via:
//
//	RdbInstanceReadReplicaArgs{...}
type RdbInstanceReadReplicaInput interface {
	pulumi.Input

	ToRdbInstanceReadReplicaOutput() RdbInstanceReadReplicaOutput
	ToRdbInstanceReadReplicaOutputWithContext(context.Context) RdbInstanceReadReplicaOutput
}

type RdbInstanceReadReplicaArgs struct {
	// IPv4 address on the network.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The name of the Database Instance.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Port in the Private Network.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (RdbInstanceReadReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RdbInstanceReadReplica)(nil)).Elem()
}

func (i RdbInstanceReadReplicaArgs) ToRdbInstanceReadReplicaOutput() RdbInstanceReadReplicaOutput {
	return i.ToRdbInstanceReadReplicaOutputWithContext(context.Background())
}

func (i RdbInstanceReadReplicaArgs) ToRdbInstanceReadReplicaOutputWithContext(ctx context.Context) RdbInstanceReadReplicaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbInstanceReadReplicaOutput)
}

func (i RdbInstanceReadReplicaArgs) ToOutput(ctx context.Context) pulumix.Output[RdbInstanceReadReplica] {
	return pulumix.Output[RdbInstanceReadReplica]{
		OutputState: i.ToRdbInstanceReadReplicaOutputWithContext(ctx).OutputState,
	}
}

// RdbInstanceReadReplicaArrayInput is an input type that accepts RdbInstanceReadReplicaArray and RdbInstanceReadReplicaArrayOutput values.
// You can construct a concrete instance of `RdbInstanceReadReplicaArrayInput` via:
//
//	RdbInstanceReadReplicaArray{ RdbInstanceReadReplicaArgs{...} }
type RdbInstanceReadReplicaArrayInput interface {
	pulumi.Input

	ToRdbInstanceReadReplicaArrayOutput() RdbInstanceReadReplicaArrayOutput
	ToRdbInstanceReadReplicaArrayOutputWithContext(context.Context) RdbInstanceReadReplicaArrayOutput
}

type RdbInstanceReadReplicaArray []RdbInstanceReadReplicaInput

func (RdbInstanceReadReplicaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdbInstanceReadReplica)(nil)).Elem()
}

func (i RdbInstanceReadReplicaArray) ToRdbInstanceReadReplicaArrayOutput() RdbInstanceReadReplicaArrayOutput {
	return i.ToRdbInstanceReadReplicaArrayOutputWithContext(context.Background())
}

func (i RdbInstanceReadReplicaArray) ToRdbInstanceReadReplicaArrayOutputWithContext(ctx context.Context) RdbInstanceReadReplicaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbInstanceReadReplicaArrayOutput)
}

func (i RdbInstanceReadReplicaArray) ToOutput(ctx context.Context) pulumix.Output[[]RdbInstanceReadReplica] {
	return pulumix.Output[[]RdbInstanceReadReplica]{
		OutputState: i.ToRdbInstanceReadReplicaArrayOutputWithContext(ctx).OutputState,
	}
}

type RdbInstanceReadReplicaOutput struct{ *pulumi.OutputState }

func (RdbInstanceReadReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RdbInstanceReadReplica)(nil)).Elem()
}

func (o RdbInstanceReadReplicaOutput) ToRdbInstanceReadReplicaOutput() RdbInstanceReadReplicaOutput {
	return o
}

func (o RdbInstanceReadReplicaOutput) ToRdbInstanceReadReplicaOutputWithContext(ctx context.Context) RdbInstanceReadReplicaOutput {
	return o
}

func (o RdbInstanceReadReplicaOutput) ToOutput(ctx context.Context) pulumix.Output[RdbInstanceReadReplica] {
	return pulumix.Output[RdbInstanceReadReplica]{
		OutputState: o.OutputState,
	}
}

// IPv4 address on the network.
func (o RdbInstanceReadReplicaOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbInstanceReadReplica) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The name of the Database Instance.
func (o RdbInstanceReadReplicaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbInstanceReadReplica) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Port in the Private Network.
func (o RdbInstanceReadReplicaOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RdbInstanceReadReplica) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type RdbInstanceReadReplicaArrayOutput struct{ *pulumi.OutputState }

func (RdbInstanceReadReplicaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdbInstanceReadReplica)(nil)).Elem()
}

func (o RdbInstanceReadReplicaArrayOutput) ToRdbInstanceReadReplicaArrayOutput() RdbInstanceReadReplicaArrayOutput {
	return o
}

func (o RdbInstanceReadReplicaArrayOutput) ToRdbInstanceReadReplicaArrayOutputWithContext(ctx context.Context) RdbInstanceReadReplicaArrayOutput {
	return o
}

func (o RdbInstanceReadReplicaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RdbInstanceReadReplica] {
	return pulumix.Output[[]RdbInstanceReadReplica]{
		OutputState: o.OutputState,
	}
}

func (o RdbInstanceReadReplicaArrayOutput) Index(i pulumi.IntInput) RdbInstanceReadReplicaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RdbInstanceReadReplica {
		return vs[0].([]RdbInstanceReadReplica)[vs[1].(int)]
	}).(RdbInstanceReadReplicaOutput)
}

type RdbReadReplicaDirectAccess struct {
	// The ID of the endpoint of the read replica.
	EndpointId *string `pulumi:"endpointId"`
	// Hostname of the endpoint. Only one of ip and hostname may be set.
	Hostname *string `pulumi:"hostname"`
	// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
	Ip *string `pulumi:"ip"`
	// Name of the endpoint.
	Name *string `pulumi:"name"`
	// TCP port of the endpoint.
	Port *int `pulumi:"port"`
}

// RdbReadReplicaDirectAccessInput is an input type that accepts RdbReadReplicaDirectAccessArgs and RdbReadReplicaDirectAccessOutput values.
// You can construct a concrete instance of `RdbReadReplicaDirectAccessInput` via:
//
//	RdbReadReplicaDirectAccessArgs{...}
type RdbReadReplicaDirectAccessInput interface {
	pulumi.Input

	ToRdbReadReplicaDirectAccessOutput() RdbReadReplicaDirectAccessOutput
	ToRdbReadReplicaDirectAccessOutputWithContext(context.Context) RdbReadReplicaDirectAccessOutput
}

type RdbReadReplicaDirectAccessArgs struct {
	// The ID of the endpoint of the read replica.
	EndpointId pulumi.StringPtrInput `pulumi:"endpointId"`
	// Hostname of the endpoint. Only one of ip and hostname may be set.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Name of the endpoint.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// TCP port of the endpoint.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (RdbReadReplicaDirectAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RdbReadReplicaDirectAccess)(nil)).Elem()
}

func (i RdbReadReplicaDirectAccessArgs) ToRdbReadReplicaDirectAccessOutput() RdbReadReplicaDirectAccessOutput {
	return i.ToRdbReadReplicaDirectAccessOutputWithContext(context.Background())
}

func (i RdbReadReplicaDirectAccessArgs) ToRdbReadReplicaDirectAccessOutputWithContext(ctx context.Context) RdbReadReplicaDirectAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbReadReplicaDirectAccessOutput)
}

func (i RdbReadReplicaDirectAccessArgs) ToOutput(ctx context.Context) pulumix.Output[RdbReadReplicaDirectAccess] {
	return pulumix.Output[RdbReadReplicaDirectAccess]{
		OutputState: i.ToRdbReadReplicaDirectAccessOutputWithContext(ctx).OutputState,
	}
}

func (i RdbReadReplicaDirectAccessArgs) ToRdbReadReplicaDirectAccessPtrOutput() RdbReadReplicaDirectAccessPtrOutput {
	return i.ToRdbReadReplicaDirectAccessPtrOutputWithContext(context.Background())
}

func (i RdbReadReplicaDirectAccessArgs) ToRdbReadReplicaDirectAccessPtrOutputWithContext(ctx context.Context) RdbReadReplicaDirectAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbReadReplicaDirectAccessOutput).ToRdbReadReplicaDirectAccessPtrOutputWithContext(ctx)
}

// RdbReadReplicaDirectAccessPtrInput is an input type that accepts RdbReadReplicaDirectAccessArgs, RdbReadReplicaDirectAccessPtr and RdbReadReplicaDirectAccessPtrOutput values.
// You can construct a concrete instance of `RdbReadReplicaDirectAccessPtrInput` via:
//
//	        RdbReadReplicaDirectAccessArgs{...}
//
//	or:
//
//	        nil
type RdbReadReplicaDirectAccessPtrInput interface {
	pulumi.Input

	ToRdbReadReplicaDirectAccessPtrOutput() RdbReadReplicaDirectAccessPtrOutput
	ToRdbReadReplicaDirectAccessPtrOutputWithContext(context.Context) RdbReadReplicaDirectAccessPtrOutput
}

type rdbReadReplicaDirectAccessPtrType RdbReadReplicaDirectAccessArgs

func RdbReadReplicaDirectAccessPtr(v *RdbReadReplicaDirectAccessArgs) RdbReadReplicaDirectAccessPtrInput {
	return (*rdbReadReplicaDirectAccessPtrType)(v)
}

func (*rdbReadReplicaDirectAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RdbReadReplicaDirectAccess)(nil)).Elem()
}

func (i *rdbReadReplicaDirectAccessPtrType) ToRdbReadReplicaDirectAccessPtrOutput() RdbReadReplicaDirectAccessPtrOutput {
	return i.ToRdbReadReplicaDirectAccessPtrOutputWithContext(context.Background())
}

func (i *rdbReadReplicaDirectAccessPtrType) ToRdbReadReplicaDirectAccessPtrOutputWithContext(ctx context.Context) RdbReadReplicaDirectAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbReadReplicaDirectAccessPtrOutput)
}

func (i *rdbReadReplicaDirectAccessPtrType) ToOutput(ctx context.Context) pulumix.Output[*RdbReadReplicaDirectAccess] {
	return pulumix.Output[*RdbReadReplicaDirectAccess]{
		OutputState: i.ToRdbReadReplicaDirectAccessPtrOutputWithContext(ctx).OutputState,
	}
}

type RdbReadReplicaDirectAccessOutput struct{ *pulumi.OutputState }

func (RdbReadReplicaDirectAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RdbReadReplicaDirectAccess)(nil)).Elem()
}

func (o RdbReadReplicaDirectAccessOutput) ToRdbReadReplicaDirectAccessOutput() RdbReadReplicaDirectAccessOutput {
	return o
}

func (o RdbReadReplicaDirectAccessOutput) ToRdbReadReplicaDirectAccessOutputWithContext(ctx context.Context) RdbReadReplicaDirectAccessOutput {
	return o
}

func (o RdbReadReplicaDirectAccessOutput) ToRdbReadReplicaDirectAccessPtrOutput() RdbReadReplicaDirectAccessPtrOutput {
	return o.ToRdbReadReplicaDirectAccessPtrOutputWithContext(context.Background())
}

func (o RdbReadReplicaDirectAccessOutput) ToRdbReadReplicaDirectAccessPtrOutputWithContext(ctx context.Context) RdbReadReplicaDirectAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RdbReadReplicaDirectAccess) *RdbReadReplicaDirectAccess {
		return &v
	}).(RdbReadReplicaDirectAccessPtrOutput)
}

func (o RdbReadReplicaDirectAccessOutput) ToOutput(ctx context.Context) pulumix.Output[RdbReadReplicaDirectAccess] {
	return pulumix.Output[RdbReadReplicaDirectAccess]{
		OutputState: o.OutputState,
	}
}

// The ID of the endpoint of the read replica.
func (o RdbReadReplicaDirectAccessOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbReadReplicaDirectAccess) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

// Hostname of the endpoint. Only one of ip and hostname may be set.
func (o RdbReadReplicaDirectAccessOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbReadReplicaDirectAccess) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
func (o RdbReadReplicaDirectAccessOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbReadReplicaDirectAccess) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Name of the endpoint.
func (o RdbReadReplicaDirectAccessOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbReadReplicaDirectAccess) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// TCP port of the endpoint.
func (o RdbReadReplicaDirectAccessOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RdbReadReplicaDirectAccess) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type RdbReadReplicaDirectAccessPtrOutput struct{ *pulumi.OutputState }

func (RdbReadReplicaDirectAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdbReadReplicaDirectAccess)(nil)).Elem()
}

func (o RdbReadReplicaDirectAccessPtrOutput) ToRdbReadReplicaDirectAccessPtrOutput() RdbReadReplicaDirectAccessPtrOutput {
	return o
}

func (o RdbReadReplicaDirectAccessPtrOutput) ToRdbReadReplicaDirectAccessPtrOutputWithContext(ctx context.Context) RdbReadReplicaDirectAccessPtrOutput {
	return o
}

func (o RdbReadReplicaDirectAccessPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RdbReadReplicaDirectAccess] {
	return pulumix.Output[*RdbReadReplicaDirectAccess]{
		OutputState: o.OutputState,
	}
}

func (o RdbReadReplicaDirectAccessPtrOutput) Elem() RdbReadReplicaDirectAccessOutput {
	return o.ApplyT(func(v *RdbReadReplicaDirectAccess) RdbReadReplicaDirectAccess {
		if v != nil {
			return *v
		}
		var ret RdbReadReplicaDirectAccess
		return ret
	}).(RdbReadReplicaDirectAccessOutput)
}

// The ID of the endpoint of the read replica.
func (o RdbReadReplicaDirectAccessPtrOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdbReadReplicaDirectAccess) *string {
		if v == nil {
			return nil
		}
		return v.EndpointId
	}).(pulumi.StringPtrOutput)
}

// Hostname of the endpoint. Only one of ip and hostname may be set.
func (o RdbReadReplicaDirectAccessPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdbReadReplicaDirectAccess) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
func (o RdbReadReplicaDirectAccessPtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdbReadReplicaDirectAccess) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// Name of the endpoint.
func (o RdbReadReplicaDirectAccessPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdbReadReplicaDirectAccess) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// TCP port of the endpoint.
func (o RdbReadReplicaDirectAccessPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RdbReadReplicaDirectAccess) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

type RdbReadReplicaPrivateNetwork struct {
	// The ID of the endpoint of the read replica.
	EndpointId *string `pulumi:"endpointId"`
	// Hostname of the endpoint. Only one of ip and hostname may be set.
	Hostname *string `pulumi:"hostname"`
	// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
	Ip *string `pulumi:"ip"`
	// Name of the endpoint.
	Name *string `pulumi:"name"`
	// TCP port of the endpoint.
	Port *int `pulumi:"port"`
	// UUID of the private network to be connected to the read replica.
	PrivateNetworkId string `pulumi:"privateNetworkId"`
	// The IP network address within the private subnet. This must be an IPv4 address with a
	// CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
	// service if not set.
	ServiceIp *string `pulumi:"serviceIp"`
	Zone      *string `pulumi:"zone"`
}

// RdbReadReplicaPrivateNetworkInput is an input type that accepts RdbReadReplicaPrivateNetworkArgs and RdbReadReplicaPrivateNetworkOutput values.
// You can construct a concrete instance of `RdbReadReplicaPrivateNetworkInput` via:
//
//	RdbReadReplicaPrivateNetworkArgs{...}
type RdbReadReplicaPrivateNetworkInput interface {
	pulumi.Input

	ToRdbReadReplicaPrivateNetworkOutput() RdbReadReplicaPrivateNetworkOutput
	ToRdbReadReplicaPrivateNetworkOutputWithContext(context.Context) RdbReadReplicaPrivateNetworkOutput
}

type RdbReadReplicaPrivateNetworkArgs struct {
	// The ID of the endpoint of the read replica.
	EndpointId pulumi.StringPtrInput `pulumi:"endpointId"`
	// Hostname of the endpoint. Only one of ip and hostname may be set.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Name of the endpoint.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// TCP port of the endpoint.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// UUID of the private network to be connected to the read replica.
	PrivateNetworkId pulumi.StringInput `pulumi:"privateNetworkId"`
	// The IP network address within the private subnet. This must be an IPv4 address with a
	// CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
	// service if not set.
	ServiceIp pulumi.StringPtrInput `pulumi:"serviceIp"`
	Zone      pulumi.StringPtrInput `pulumi:"zone"`
}

func (RdbReadReplicaPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RdbReadReplicaPrivateNetwork)(nil)).Elem()
}

func (i RdbReadReplicaPrivateNetworkArgs) ToRdbReadReplicaPrivateNetworkOutput() RdbReadReplicaPrivateNetworkOutput {
	return i.ToRdbReadReplicaPrivateNetworkOutputWithContext(context.Background())
}

func (i RdbReadReplicaPrivateNetworkArgs) ToRdbReadReplicaPrivateNetworkOutputWithContext(ctx context.Context) RdbReadReplicaPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbReadReplicaPrivateNetworkOutput)
}

func (i RdbReadReplicaPrivateNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[RdbReadReplicaPrivateNetwork] {
	return pulumix.Output[RdbReadReplicaPrivateNetwork]{
		OutputState: i.ToRdbReadReplicaPrivateNetworkOutputWithContext(ctx).OutputState,
	}
}

func (i RdbReadReplicaPrivateNetworkArgs) ToRdbReadReplicaPrivateNetworkPtrOutput() RdbReadReplicaPrivateNetworkPtrOutput {
	return i.ToRdbReadReplicaPrivateNetworkPtrOutputWithContext(context.Background())
}

func (i RdbReadReplicaPrivateNetworkArgs) ToRdbReadReplicaPrivateNetworkPtrOutputWithContext(ctx context.Context) RdbReadReplicaPrivateNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbReadReplicaPrivateNetworkOutput).ToRdbReadReplicaPrivateNetworkPtrOutputWithContext(ctx)
}

// RdbReadReplicaPrivateNetworkPtrInput is an input type that accepts RdbReadReplicaPrivateNetworkArgs, RdbReadReplicaPrivateNetworkPtr and RdbReadReplicaPrivateNetworkPtrOutput values.
// You can construct a concrete instance of `RdbReadReplicaPrivateNetworkPtrInput` via:
//
//	        RdbReadReplicaPrivateNetworkArgs{...}
//
//	or:
//
//	        nil
type RdbReadReplicaPrivateNetworkPtrInput interface {
	pulumi.Input

	ToRdbReadReplicaPrivateNetworkPtrOutput() RdbReadReplicaPrivateNetworkPtrOutput
	ToRdbReadReplicaPrivateNetworkPtrOutputWithContext(context.Context) RdbReadReplicaPrivateNetworkPtrOutput
}

type rdbReadReplicaPrivateNetworkPtrType RdbReadReplicaPrivateNetworkArgs

func RdbReadReplicaPrivateNetworkPtr(v *RdbReadReplicaPrivateNetworkArgs) RdbReadReplicaPrivateNetworkPtrInput {
	return (*rdbReadReplicaPrivateNetworkPtrType)(v)
}

func (*rdbReadReplicaPrivateNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RdbReadReplicaPrivateNetwork)(nil)).Elem()
}

func (i *rdbReadReplicaPrivateNetworkPtrType) ToRdbReadReplicaPrivateNetworkPtrOutput() RdbReadReplicaPrivateNetworkPtrOutput {
	return i.ToRdbReadReplicaPrivateNetworkPtrOutputWithContext(context.Background())
}

func (i *rdbReadReplicaPrivateNetworkPtrType) ToRdbReadReplicaPrivateNetworkPtrOutputWithContext(ctx context.Context) RdbReadReplicaPrivateNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbReadReplicaPrivateNetworkPtrOutput)
}

func (i *rdbReadReplicaPrivateNetworkPtrType) ToOutput(ctx context.Context) pulumix.Output[*RdbReadReplicaPrivateNetwork] {
	return pulumix.Output[*RdbReadReplicaPrivateNetwork]{
		OutputState: i.ToRdbReadReplicaPrivateNetworkPtrOutputWithContext(ctx).OutputState,
	}
}

type RdbReadReplicaPrivateNetworkOutput struct{ *pulumi.OutputState }

func (RdbReadReplicaPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RdbReadReplicaPrivateNetwork)(nil)).Elem()
}

func (o RdbReadReplicaPrivateNetworkOutput) ToRdbReadReplicaPrivateNetworkOutput() RdbReadReplicaPrivateNetworkOutput {
	return o
}

func (o RdbReadReplicaPrivateNetworkOutput) ToRdbReadReplicaPrivateNetworkOutputWithContext(ctx context.Context) RdbReadReplicaPrivateNetworkOutput {
	return o
}

func (o RdbReadReplicaPrivateNetworkOutput) ToRdbReadReplicaPrivateNetworkPtrOutput() RdbReadReplicaPrivateNetworkPtrOutput {
	return o.ToRdbReadReplicaPrivateNetworkPtrOutputWithContext(context.Background())
}

func (o RdbReadReplicaPrivateNetworkOutput) ToRdbReadReplicaPrivateNetworkPtrOutputWithContext(ctx context.Context) RdbReadReplicaPrivateNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RdbReadReplicaPrivateNetwork) *RdbReadReplicaPrivateNetwork {
		return &v
	}).(RdbReadReplicaPrivateNetworkPtrOutput)
}

func (o RdbReadReplicaPrivateNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[RdbReadReplicaPrivateNetwork] {
	return pulumix.Output[RdbReadReplicaPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

// The ID of the endpoint of the read replica.
func (o RdbReadReplicaPrivateNetworkOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbReadReplicaPrivateNetwork) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

// Hostname of the endpoint. Only one of ip and hostname may be set.
func (o RdbReadReplicaPrivateNetworkOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbReadReplicaPrivateNetwork) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
func (o RdbReadReplicaPrivateNetworkOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbReadReplicaPrivateNetwork) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Name of the endpoint.
func (o RdbReadReplicaPrivateNetworkOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbReadReplicaPrivateNetwork) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// TCP port of the endpoint.
func (o RdbReadReplicaPrivateNetworkOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RdbReadReplicaPrivateNetwork) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// UUID of the private network to be connected to the read replica.
func (o RdbReadReplicaPrivateNetworkOutput) PrivateNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v RdbReadReplicaPrivateNetwork) string { return v.PrivateNetworkId }).(pulumi.StringOutput)
}

// The IP network address within the private subnet. This must be an IPv4 address with a
// CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
// service if not set.
func (o RdbReadReplicaPrivateNetworkOutput) ServiceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbReadReplicaPrivateNetwork) *string { return v.ServiceIp }).(pulumi.StringPtrOutput)
}

func (o RdbReadReplicaPrivateNetworkOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdbReadReplicaPrivateNetwork) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type RdbReadReplicaPrivateNetworkPtrOutput struct{ *pulumi.OutputState }

func (RdbReadReplicaPrivateNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdbReadReplicaPrivateNetwork)(nil)).Elem()
}

func (o RdbReadReplicaPrivateNetworkPtrOutput) ToRdbReadReplicaPrivateNetworkPtrOutput() RdbReadReplicaPrivateNetworkPtrOutput {
	return o
}

func (o RdbReadReplicaPrivateNetworkPtrOutput) ToRdbReadReplicaPrivateNetworkPtrOutputWithContext(ctx context.Context) RdbReadReplicaPrivateNetworkPtrOutput {
	return o
}

func (o RdbReadReplicaPrivateNetworkPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RdbReadReplicaPrivateNetwork] {
	return pulumix.Output[*RdbReadReplicaPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o RdbReadReplicaPrivateNetworkPtrOutput) Elem() RdbReadReplicaPrivateNetworkOutput {
	return o.ApplyT(func(v *RdbReadReplicaPrivateNetwork) RdbReadReplicaPrivateNetwork {
		if v != nil {
			return *v
		}
		var ret RdbReadReplicaPrivateNetwork
		return ret
	}).(RdbReadReplicaPrivateNetworkOutput)
}

// The ID of the endpoint of the read replica.
func (o RdbReadReplicaPrivateNetworkPtrOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdbReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.EndpointId
	}).(pulumi.StringPtrOutput)
}

// Hostname of the endpoint. Only one of ip and hostname may be set.
func (o RdbReadReplicaPrivateNetworkPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdbReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
func (o RdbReadReplicaPrivateNetworkPtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdbReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// Name of the endpoint.
func (o RdbReadReplicaPrivateNetworkPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdbReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// TCP port of the endpoint.
func (o RdbReadReplicaPrivateNetworkPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RdbReadReplicaPrivateNetwork) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// UUID of the private network to be connected to the read replica.
func (o RdbReadReplicaPrivateNetworkPtrOutput) PrivateNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdbReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateNetworkId
	}).(pulumi.StringPtrOutput)
}

// The IP network address within the private subnet. This must be an IPv4 address with a
// CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
// service if not set.
func (o RdbReadReplicaPrivateNetworkPtrOutput) ServiceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdbReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.ServiceIp
	}).(pulumi.StringPtrOutput)
}

func (o RdbReadReplicaPrivateNetworkPtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdbReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Zone
	}).(pulumi.StringPtrOutput)
}

type RedisClusterAcl struct {
	// A text describing this rule. Default description: `Allow IP`
	//
	// > The `acl` conflict with `privateNetwork`. Only one should be specified.
	Description *string `pulumi:"description"`
	// The UUID of the private network resource.
	Id *string `pulumi:"id"`
	// The ip range to whitelist
	// in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
	Ip string `pulumi:"ip"`
}

// RedisClusterAclInput is an input type that accepts RedisClusterAclArgs and RedisClusterAclOutput values.
// You can construct a concrete instance of `RedisClusterAclInput` via:
//
//	RedisClusterAclArgs{...}
type RedisClusterAclInput interface {
	pulumi.Input

	ToRedisClusterAclOutput() RedisClusterAclOutput
	ToRedisClusterAclOutputWithContext(context.Context) RedisClusterAclOutput
}

type RedisClusterAclArgs struct {
	// A text describing this rule. Default description: `Allow IP`
	//
	// > The `acl` conflict with `privateNetwork`. Only one should be specified.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The UUID of the private network resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The ip range to whitelist
	// in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (RedisClusterAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterAcl)(nil)).Elem()
}

func (i RedisClusterAclArgs) ToRedisClusterAclOutput() RedisClusterAclOutput {
	return i.ToRedisClusterAclOutputWithContext(context.Background())
}

func (i RedisClusterAclArgs) ToRedisClusterAclOutputWithContext(ctx context.Context) RedisClusterAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterAclOutput)
}

func (i RedisClusterAclArgs) ToOutput(ctx context.Context) pulumix.Output[RedisClusterAcl] {
	return pulumix.Output[RedisClusterAcl]{
		OutputState: i.ToRedisClusterAclOutputWithContext(ctx).OutputState,
	}
}

// RedisClusterAclArrayInput is an input type that accepts RedisClusterAclArray and RedisClusterAclArrayOutput values.
// You can construct a concrete instance of `RedisClusterAclArrayInput` via:
//
//	RedisClusterAclArray{ RedisClusterAclArgs{...} }
type RedisClusterAclArrayInput interface {
	pulumi.Input

	ToRedisClusterAclArrayOutput() RedisClusterAclArrayOutput
	ToRedisClusterAclArrayOutputWithContext(context.Context) RedisClusterAclArrayOutput
}

type RedisClusterAclArray []RedisClusterAclInput

func (RedisClusterAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisClusterAcl)(nil)).Elem()
}

func (i RedisClusterAclArray) ToRedisClusterAclArrayOutput() RedisClusterAclArrayOutput {
	return i.ToRedisClusterAclArrayOutputWithContext(context.Background())
}

func (i RedisClusterAclArray) ToRedisClusterAclArrayOutputWithContext(ctx context.Context) RedisClusterAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterAclArrayOutput)
}

func (i RedisClusterAclArray) ToOutput(ctx context.Context) pulumix.Output[[]RedisClusterAcl] {
	return pulumix.Output[[]RedisClusterAcl]{
		OutputState: i.ToRedisClusterAclArrayOutputWithContext(ctx).OutputState,
	}
}

type RedisClusterAclOutput struct{ *pulumi.OutputState }

func (RedisClusterAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterAcl)(nil)).Elem()
}

func (o RedisClusterAclOutput) ToRedisClusterAclOutput() RedisClusterAclOutput {
	return o
}

func (o RedisClusterAclOutput) ToRedisClusterAclOutputWithContext(ctx context.Context) RedisClusterAclOutput {
	return o
}

func (o RedisClusterAclOutput) ToOutput(ctx context.Context) pulumix.Output[RedisClusterAcl] {
	return pulumix.Output[RedisClusterAcl]{
		OutputState: o.OutputState,
	}
}

// A text describing this rule. Default description: `Allow IP`
//
// > The `acl` conflict with `privateNetwork`. Only one should be specified.
func (o RedisClusterAclOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterAcl) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The UUID of the private network resource.
func (o RedisClusterAclOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterAcl) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The ip range to whitelist
// in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
func (o RedisClusterAclOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v RedisClusterAcl) string { return v.Ip }).(pulumi.StringOutput)
}

type RedisClusterAclArrayOutput struct{ *pulumi.OutputState }

func (RedisClusterAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisClusterAcl)(nil)).Elem()
}

func (o RedisClusterAclArrayOutput) ToRedisClusterAclArrayOutput() RedisClusterAclArrayOutput {
	return o
}

func (o RedisClusterAclArrayOutput) ToRedisClusterAclArrayOutputWithContext(ctx context.Context) RedisClusterAclArrayOutput {
	return o
}

func (o RedisClusterAclArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RedisClusterAcl] {
	return pulumix.Output[[]RedisClusterAcl]{
		OutputState: o.OutputState,
	}
}

func (o RedisClusterAclArrayOutput) Index(i pulumi.IntInput) RedisClusterAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisClusterAcl {
		return vs[0].([]RedisClusterAcl)[vs[1].(int)]
	}).(RedisClusterAclOutput)
}

type RedisClusterPrivateNetwork struct {
	// The ID of the endpoint.
	EndpointId *string `pulumi:"endpointId"`
	// The UUID of the private network resource.
	Id string `pulumi:"id"`
	// Endpoint IPv4 addresses
	// in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation). You must provide at
	// least one IP per node or The IP network address within the private subnet is determined by the IP Address Management (IPAM)
	// service if not set.
	//
	// > The `privateNetwork` conflict with `acl`. Only one should be specified.
	ServiceIps []string `pulumi:"serviceIps"`
	// `zone`) The zone in which the
	// Redis Cluster should be created.
	Zone *string `pulumi:"zone"`
}

// RedisClusterPrivateNetworkInput is an input type that accepts RedisClusterPrivateNetworkArgs and RedisClusterPrivateNetworkOutput values.
// You can construct a concrete instance of `RedisClusterPrivateNetworkInput` via:
//
//	RedisClusterPrivateNetworkArgs{...}
type RedisClusterPrivateNetworkInput interface {
	pulumi.Input

	ToRedisClusterPrivateNetworkOutput() RedisClusterPrivateNetworkOutput
	ToRedisClusterPrivateNetworkOutputWithContext(context.Context) RedisClusterPrivateNetworkOutput
}

type RedisClusterPrivateNetworkArgs struct {
	// The ID of the endpoint.
	EndpointId pulumi.StringPtrInput `pulumi:"endpointId"`
	// The UUID of the private network resource.
	Id pulumi.StringInput `pulumi:"id"`
	// Endpoint IPv4 addresses
	// in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation). You must provide at
	// least one IP per node or The IP network address within the private subnet is determined by the IP Address Management (IPAM)
	// service if not set.
	//
	// > The `privateNetwork` conflict with `acl`. Only one should be specified.
	ServiceIps pulumi.StringArrayInput `pulumi:"serviceIps"`
	// `zone`) The zone in which the
	// Redis Cluster should be created.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (RedisClusterPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterPrivateNetwork)(nil)).Elem()
}

func (i RedisClusterPrivateNetworkArgs) ToRedisClusterPrivateNetworkOutput() RedisClusterPrivateNetworkOutput {
	return i.ToRedisClusterPrivateNetworkOutputWithContext(context.Background())
}

func (i RedisClusterPrivateNetworkArgs) ToRedisClusterPrivateNetworkOutputWithContext(ctx context.Context) RedisClusterPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterPrivateNetworkOutput)
}

func (i RedisClusterPrivateNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[RedisClusterPrivateNetwork] {
	return pulumix.Output[RedisClusterPrivateNetwork]{
		OutputState: i.ToRedisClusterPrivateNetworkOutputWithContext(ctx).OutputState,
	}
}

// RedisClusterPrivateNetworkArrayInput is an input type that accepts RedisClusterPrivateNetworkArray and RedisClusterPrivateNetworkArrayOutput values.
// You can construct a concrete instance of `RedisClusterPrivateNetworkArrayInput` via:
//
//	RedisClusterPrivateNetworkArray{ RedisClusterPrivateNetworkArgs{...} }
type RedisClusterPrivateNetworkArrayInput interface {
	pulumi.Input

	ToRedisClusterPrivateNetworkArrayOutput() RedisClusterPrivateNetworkArrayOutput
	ToRedisClusterPrivateNetworkArrayOutputWithContext(context.Context) RedisClusterPrivateNetworkArrayOutput
}

type RedisClusterPrivateNetworkArray []RedisClusterPrivateNetworkInput

func (RedisClusterPrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisClusterPrivateNetwork)(nil)).Elem()
}

func (i RedisClusterPrivateNetworkArray) ToRedisClusterPrivateNetworkArrayOutput() RedisClusterPrivateNetworkArrayOutput {
	return i.ToRedisClusterPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i RedisClusterPrivateNetworkArray) ToRedisClusterPrivateNetworkArrayOutputWithContext(ctx context.Context) RedisClusterPrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterPrivateNetworkArrayOutput)
}

func (i RedisClusterPrivateNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]RedisClusterPrivateNetwork] {
	return pulumix.Output[[]RedisClusterPrivateNetwork]{
		OutputState: i.ToRedisClusterPrivateNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type RedisClusterPrivateNetworkOutput struct{ *pulumi.OutputState }

func (RedisClusterPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterPrivateNetwork)(nil)).Elem()
}

func (o RedisClusterPrivateNetworkOutput) ToRedisClusterPrivateNetworkOutput() RedisClusterPrivateNetworkOutput {
	return o
}

func (o RedisClusterPrivateNetworkOutput) ToRedisClusterPrivateNetworkOutputWithContext(ctx context.Context) RedisClusterPrivateNetworkOutput {
	return o
}

func (o RedisClusterPrivateNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[RedisClusterPrivateNetwork] {
	return pulumix.Output[RedisClusterPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

// The ID of the endpoint.
func (o RedisClusterPrivateNetworkOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterPrivateNetwork) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

// The UUID of the private network resource.
func (o RedisClusterPrivateNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RedisClusterPrivateNetwork) string { return v.Id }).(pulumi.StringOutput)
}

// Endpoint IPv4 addresses
// in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation). You must provide at
// least one IP per node or The IP network address within the private subnet is determined by the IP Address Management (IPAM)
// service if not set.
//
// > The `privateNetwork` conflict with `acl`. Only one should be specified.
func (o RedisClusterPrivateNetworkOutput) ServiceIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisClusterPrivateNetwork) []string { return v.ServiceIps }).(pulumi.StringArrayOutput)
}

// `zone`) The zone in which the
// Redis Cluster should be created.
func (o RedisClusterPrivateNetworkOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterPrivateNetwork) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type RedisClusterPrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (RedisClusterPrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisClusterPrivateNetwork)(nil)).Elem()
}

func (o RedisClusterPrivateNetworkArrayOutput) ToRedisClusterPrivateNetworkArrayOutput() RedisClusterPrivateNetworkArrayOutput {
	return o
}

func (o RedisClusterPrivateNetworkArrayOutput) ToRedisClusterPrivateNetworkArrayOutputWithContext(ctx context.Context) RedisClusterPrivateNetworkArrayOutput {
	return o
}

func (o RedisClusterPrivateNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RedisClusterPrivateNetwork] {
	return pulumix.Output[[]RedisClusterPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o RedisClusterPrivateNetworkArrayOutput) Index(i pulumi.IntInput) RedisClusterPrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisClusterPrivateNetwork {
		return vs[0].([]RedisClusterPrivateNetwork)[vs[1].(int)]
	}).(RedisClusterPrivateNetworkOutput)
}

type RedisClusterPublicNetwork struct {
	// The UUID of the private network resource.
	Id *string `pulumi:"id"`
	// Lis of IPv4 address of the endpoint (IP address).
	Ips []string `pulumi:"ips"`
	// TCP port of the endpoint.
	Port *int `pulumi:"port"`
}

// RedisClusterPublicNetworkInput is an input type that accepts RedisClusterPublicNetworkArgs and RedisClusterPublicNetworkOutput values.
// You can construct a concrete instance of `RedisClusterPublicNetworkInput` via:
//
//	RedisClusterPublicNetworkArgs{...}
type RedisClusterPublicNetworkInput interface {
	pulumi.Input

	ToRedisClusterPublicNetworkOutput() RedisClusterPublicNetworkOutput
	ToRedisClusterPublicNetworkOutputWithContext(context.Context) RedisClusterPublicNetworkOutput
}

type RedisClusterPublicNetworkArgs struct {
	// The UUID of the private network resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Lis of IPv4 address of the endpoint (IP address).
	Ips pulumi.StringArrayInput `pulumi:"ips"`
	// TCP port of the endpoint.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (RedisClusterPublicNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterPublicNetwork)(nil)).Elem()
}

func (i RedisClusterPublicNetworkArgs) ToRedisClusterPublicNetworkOutput() RedisClusterPublicNetworkOutput {
	return i.ToRedisClusterPublicNetworkOutputWithContext(context.Background())
}

func (i RedisClusterPublicNetworkArgs) ToRedisClusterPublicNetworkOutputWithContext(ctx context.Context) RedisClusterPublicNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterPublicNetworkOutput)
}

func (i RedisClusterPublicNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[RedisClusterPublicNetwork] {
	return pulumix.Output[RedisClusterPublicNetwork]{
		OutputState: i.ToRedisClusterPublicNetworkOutputWithContext(ctx).OutputState,
	}
}

func (i RedisClusterPublicNetworkArgs) ToRedisClusterPublicNetworkPtrOutput() RedisClusterPublicNetworkPtrOutput {
	return i.ToRedisClusterPublicNetworkPtrOutputWithContext(context.Background())
}

func (i RedisClusterPublicNetworkArgs) ToRedisClusterPublicNetworkPtrOutputWithContext(ctx context.Context) RedisClusterPublicNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterPublicNetworkOutput).ToRedisClusterPublicNetworkPtrOutputWithContext(ctx)
}

// RedisClusterPublicNetworkPtrInput is an input type that accepts RedisClusterPublicNetworkArgs, RedisClusterPublicNetworkPtr and RedisClusterPublicNetworkPtrOutput values.
// You can construct a concrete instance of `RedisClusterPublicNetworkPtrInput` via:
//
//	        RedisClusterPublicNetworkArgs{...}
//
//	or:
//
//	        nil
type RedisClusterPublicNetworkPtrInput interface {
	pulumi.Input

	ToRedisClusterPublicNetworkPtrOutput() RedisClusterPublicNetworkPtrOutput
	ToRedisClusterPublicNetworkPtrOutputWithContext(context.Context) RedisClusterPublicNetworkPtrOutput
}

type redisClusterPublicNetworkPtrType RedisClusterPublicNetworkArgs

func RedisClusterPublicNetworkPtr(v *RedisClusterPublicNetworkArgs) RedisClusterPublicNetworkPtrInput {
	return (*redisClusterPublicNetworkPtrType)(v)
}

func (*redisClusterPublicNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterPublicNetwork)(nil)).Elem()
}

func (i *redisClusterPublicNetworkPtrType) ToRedisClusterPublicNetworkPtrOutput() RedisClusterPublicNetworkPtrOutput {
	return i.ToRedisClusterPublicNetworkPtrOutputWithContext(context.Background())
}

func (i *redisClusterPublicNetworkPtrType) ToRedisClusterPublicNetworkPtrOutputWithContext(ctx context.Context) RedisClusterPublicNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterPublicNetworkPtrOutput)
}

func (i *redisClusterPublicNetworkPtrType) ToOutput(ctx context.Context) pulumix.Output[*RedisClusterPublicNetwork] {
	return pulumix.Output[*RedisClusterPublicNetwork]{
		OutputState: i.ToRedisClusterPublicNetworkPtrOutputWithContext(ctx).OutputState,
	}
}

type RedisClusterPublicNetworkOutput struct{ *pulumi.OutputState }

func (RedisClusterPublicNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterPublicNetwork)(nil)).Elem()
}

func (o RedisClusterPublicNetworkOutput) ToRedisClusterPublicNetworkOutput() RedisClusterPublicNetworkOutput {
	return o
}

func (o RedisClusterPublicNetworkOutput) ToRedisClusterPublicNetworkOutputWithContext(ctx context.Context) RedisClusterPublicNetworkOutput {
	return o
}

func (o RedisClusterPublicNetworkOutput) ToRedisClusterPublicNetworkPtrOutput() RedisClusterPublicNetworkPtrOutput {
	return o.ToRedisClusterPublicNetworkPtrOutputWithContext(context.Background())
}

func (o RedisClusterPublicNetworkOutput) ToRedisClusterPublicNetworkPtrOutputWithContext(ctx context.Context) RedisClusterPublicNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisClusterPublicNetwork) *RedisClusterPublicNetwork {
		return &v
	}).(RedisClusterPublicNetworkPtrOutput)
}

func (o RedisClusterPublicNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[RedisClusterPublicNetwork] {
	return pulumix.Output[RedisClusterPublicNetwork]{
		OutputState: o.OutputState,
	}
}

// The UUID of the private network resource.
func (o RedisClusterPublicNetworkOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterPublicNetwork) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Lis of IPv4 address of the endpoint (IP address).
func (o RedisClusterPublicNetworkOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisClusterPublicNetwork) []string { return v.Ips }).(pulumi.StringArrayOutput)
}

// TCP port of the endpoint.
func (o RedisClusterPublicNetworkOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisClusterPublicNetwork) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type RedisClusterPublicNetworkPtrOutput struct{ *pulumi.OutputState }

func (RedisClusterPublicNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterPublicNetwork)(nil)).Elem()
}

func (o RedisClusterPublicNetworkPtrOutput) ToRedisClusterPublicNetworkPtrOutput() RedisClusterPublicNetworkPtrOutput {
	return o
}

func (o RedisClusterPublicNetworkPtrOutput) ToRedisClusterPublicNetworkPtrOutputWithContext(ctx context.Context) RedisClusterPublicNetworkPtrOutput {
	return o
}

func (o RedisClusterPublicNetworkPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RedisClusterPublicNetwork] {
	return pulumix.Output[*RedisClusterPublicNetwork]{
		OutputState: o.OutputState,
	}
}

func (o RedisClusterPublicNetworkPtrOutput) Elem() RedisClusterPublicNetworkOutput {
	return o.ApplyT(func(v *RedisClusterPublicNetwork) RedisClusterPublicNetwork {
		if v != nil {
			return *v
		}
		var ret RedisClusterPublicNetwork
		return ret
	}).(RedisClusterPublicNetworkOutput)
}

// The UUID of the private network resource.
func (o RedisClusterPublicNetworkPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisClusterPublicNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Lis of IPv4 address of the endpoint (IP address).
func (o RedisClusterPublicNetworkPtrOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisClusterPublicNetwork) []string {
		if v == nil {
			return nil
		}
		return v.Ips
	}).(pulumi.StringArrayOutput)
}

// TCP port of the endpoint.
func (o RedisClusterPublicNetworkPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisClusterPublicNetwork) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

type VpcGatewayNetworkIpamConfig struct {
	// Defines whether the default route is enabled on that Gateway Network. Only one of `dhcpId`, `staticAddress` and `ipamConfig` should be specified.
	PushDefaultRoute *bool `pulumi:"pushDefaultRoute"`
}

// VpcGatewayNetworkIpamConfigInput is an input type that accepts VpcGatewayNetworkIpamConfigArgs and VpcGatewayNetworkIpamConfigOutput values.
// You can construct a concrete instance of `VpcGatewayNetworkIpamConfigInput` via:
//
//	VpcGatewayNetworkIpamConfigArgs{...}
type VpcGatewayNetworkIpamConfigInput interface {
	pulumi.Input

	ToVpcGatewayNetworkIpamConfigOutput() VpcGatewayNetworkIpamConfigOutput
	ToVpcGatewayNetworkIpamConfigOutputWithContext(context.Context) VpcGatewayNetworkIpamConfigOutput
}

type VpcGatewayNetworkIpamConfigArgs struct {
	// Defines whether the default route is enabled on that Gateway Network. Only one of `dhcpId`, `staticAddress` and `ipamConfig` should be specified.
	PushDefaultRoute pulumi.BoolPtrInput `pulumi:"pushDefaultRoute"`
}

func (VpcGatewayNetworkIpamConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcGatewayNetworkIpamConfig)(nil)).Elem()
}

func (i VpcGatewayNetworkIpamConfigArgs) ToVpcGatewayNetworkIpamConfigOutput() VpcGatewayNetworkIpamConfigOutput {
	return i.ToVpcGatewayNetworkIpamConfigOutputWithContext(context.Background())
}

func (i VpcGatewayNetworkIpamConfigArgs) ToVpcGatewayNetworkIpamConfigOutputWithContext(ctx context.Context) VpcGatewayNetworkIpamConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcGatewayNetworkIpamConfigOutput)
}

func (i VpcGatewayNetworkIpamConfigArgs) ToOutput(ctx context.Context) pulumix.Output[VpcGatewayNetworkIpamConfig] {
	return pulumix.Output[VpcGatewayNetworkIpamConfig]{
		OutputState: i.ToVpcGatewayNetworkIpamConfigOutputWithContext(ctx).OutputState,
	}
}

// VpcGatewayNetworkIpamConfigArrayInput is an input type that accepts VpcGatewayNetworkIpamConfigArray and VpcGatewayNetworkIpamConfigArrayOutput values.
// You can construct a concrete instance of `VpcGatewayNetworkIpamConfigArrayInput` via:
//
//	VpcGatewayNetworkIpamConfigArray{ VpcGatewayNetworkIpamConfigArgs{...} }
type VpcGatewayNetworkIpamConfigArrayInput interface {
	pulumi.Input

	ToVpcGatewayNetworkIpamConfigArrayOutput() VpcGatewayNetworkIpamConfigArrayOutput
	ToVpcGatewayNetworkIpamConfigArrayOutputWithContext(context.Context) VpcGatewayNetworkIpamConfigArrayOutput
}

type VpcGatewayNetworkIpamConfigArray []VpcGatewayNetworkIpamConfigInput

func (VpcGatewayNetworkIpamConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcGatewayNetworkIpamConfig)(nil)).Elem()
}

func (i VpcGatewayNetworkIpamConfigArray) ToVpcGatewayNetworkIpamConfigArrayOutput() VpcGatewayNetworkIpamConfigArrayOutput {
	return i.ToVpcGatewayNetworkIpamConfigArrayOutputWithContext(context.Background())
}

func (i VpcGatewayNetworkIpamConfigArray) ToVpcGatewayNetworkIpamConfigArrayOutputWithContext(ctx context.Context) VpcGatewayNetworkIpamConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcGatewayNetworkIpamConfigArrayOutput)
}

func (i VpcGatewayNetworkIpamConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]VpcGatewayNetworkIpamConfig] {
	return pulumix.Output[[]VpcGatewayNetworkIpamConfig]{
		OutputState: i.ToVpcGatewayNetworkIpamConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type VpcGatewayNetworkIpamConfigOutput struct{ *pulumi.OutputState }

func (VpcGatewayNetworkIpamConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcGatewayNetworkIpamConfig)(nil)).Elem()
}

func (o VpcGatewayNetworkIpamConfigOutput) ToVpcGatewayNetworkIpamConfigOutput() VpcGatewayNetworkIpamConfigOutput {
	return o
}

func (o VpcGatewayNetworkIpamConfigOutput) ToVpcGatewayNetworkIpamConfigOutputWithContext(ctx context.Context) VpcGatewayNetworkIpamConfigOutput {
	return o
}

func (o VpcGatewayNetworkIpamConfigOutput) ToOutput(ctx context.Context) pulumix.Output[VpcGatewayNetworkIpamConfig] {
	return pulumix.Output[VpcGatewayNetworkIpamConfig]{
		OutputState: o.OutputState,
	}
}

// Defines whether the default route is enabled on that Gateway Network. Only one of `dhcpId`, `staticAddress` and `ipamConfig` should be specified.
func (o VpcGatewayNetworkIpamConfigOutput) PushDefaultRoute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VpcGatewayNetworkIpamConfig) *bool { return v.PushDefaultRoute }).(pulumi.BoolPtrOutput)
}

type VpcGatewayNetworkIpamConfigArrayOutput struct{ *pulumi.OutputState }

func (VpcGatewayNetworkIpamConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcGatewayNetworkIpamConfig)(nil)).Elem()
}

func (o VpcGatewayNetworkIpamConfigArrayOutput) ToVpcGatewayNetworkIpamConfigArrayOutput() VpcGatewayNetworkIpamConfigArrayOutput {
	return o
}

func (o VpcGatewayNetworkIpamConfigArrayOutput) ToVpcGatewayNetworkIpamConfigArrayOutputWithContext(ctx context.Context) VpcGatewayNetworkIpamConfigArrayOutput {
	return o
}

func (o VpcGatewayNetworkIpamConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VpcGatewayNetworkIpamConfig] {
	return pulumix.Output[[]VpcGatewayNetworkIpamConfig]{
		OutputState: o.OutputState,
	}
}

func (o VpcGatewayNetworkIpamConfigArrayOutput) Index(i pulumi.IntInput) VpcGatewayNetworkIpamConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcGatewayNetworkIpamConfig {
		return vs[0].([]VpcGatewayNetworkIpamConfig)[vs[1].(int)]
	}).(VpcGatewayNetworkIpamConfigOutput)
}

type VpcPrivateNetworkIpv4Subnet struct {
	// The network address of the subnet in dotted decimal notation, e.g., '192.168.0.0' for a '192.168.0.0/24' subnet.
	Address *string `pulumi:"address"`
	// The date and time of the creation of the subnet.
	CreatedAt *string `pulumi:"createdAt"`
	// The subnet ID.
	Id *string `pulumi:"id"`
	// The length of the network prefix, e.g., 24 for a 255.255.255.0 mask.
	PrefixLength *int `pulumi:"prefixLength"`
	// The subnet CIDR.
	Subnet *string `pulumi:"subnet"`
	// The subnet mask expressed in dotted decimal notation, e.g., '255.255.255.0' for a /24 subnet
	SubnetMask *string `pulumi:"subnetMask"`
	// The date and time of the last update of the subnet.
	UpdatedAt *string `pulumi:"updatedAt"`
}

// VpcPrivateNetworkIpv4SubnetInput is an input type that accepts VpcPrivateNetworkIpv4SubnetArgs and VpcPrivateNetworkIpv4SubnetOutput values.
// You can construct a concrete instance of `VpcPrivateNetworkIpv4SubnetInput` via:
//
//	VpcPrivateNetworkIpv4SubnetArgs{...}
type VpcPrivateNetworkIpv4SubnetInput interface {
	pulumi.Input

	ToVpcPrivateNetworkIpv4SubnetOutput() VpcPrivateNetworkIpv4SubnetOutput
	ToVpcPrivateNetworkIpv4SubnetOutputWithContext(context.Context) VpcPrivateNetworkIpv4SubnetOutput
}

type VpcPrivateNetworkIpv4SubnetArgs struct {
	// The network address of the subnet in dotted decimal notation, e.g., '192.168.0.0' for a '192.168.0.0/24' subnet.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The date and time of the creation of the subnet.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// The subnet ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The length of the network prefix, e.g., 24 for a 255.255.255.0 mask.
	PrefixLength pulumi.IntPtrInput `pulumi:"prefixLength"`
	// The subnet CIDR.
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
	// The subnet mask expressed in dotted decimal notation, e.g., '255.255.255.0' for a /24 subnet
	SubnetMask pulumi.StringPtrInput `pulumi:"subnetMask"`
	// The date and time of the last update of the subnet.
	UpdatedAt pulumi.StringPtrInput `pulumi:"updatedAt"`
}

func (VpcPrivateNetworkIpv4SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPrivateNetworkIpv4Subnet)(nil)).Elem()
}

func (i VpcPrivateNetworkIpv4SubnetArgs) ToVpcPrivateNetworkIpv4SubnetOutput() VpcPrivateNetworkIpv4SubnetOutput {
	return i.ToVpcPrivateNetworkIpv4SubnetOutputWithContext(context.Background())
}

func (i VpcPrivateNetworkIpv4SubnetArgs) ToVpcPrivateNetworkIpv4SubnetOutputWithContext(ctx context.Context) VpcPrivateNetworkIpv4SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPrivateNetworkIpv4SubnetOutput)
}

func (i VpcPrivateNetworkIpv4SubnetArgs) ToOutput(ctx context.Context) pulumix.Output[VpcPrivateNetworkIpv4Subnet] {
	return pulumix.Output[VpcPrivateNetworkIpv4Subnet]{
		OutputState: i.ToVpcPrivateNetworkIpv4SubnetOutputWithContext(ctx).OutputState,
	}
}

func (i VpcPrivateNetworkIpv4SubnetArgs) ToVpcPrivateNetworkIpv4SubnetPtrOutput() VpcPrivateNetworkIpv4SubnetPtrOutput {
	return i.ToVpcPrivateNetworkIpv4SubnetPtrOutputWithContext(context.Background())
}

func (i VpcPrivateNetworkIpv4SubnetArgs) ToVpcPrivateNetworkIpv4SubnetPtrOutputWithContext(ctx context.Context) VpcPrivateNetworkIpv4SubnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPrivateNetworkIpv4SubnetOutput).ToVpcPrivateNetworkIpv4SubnetPtrOutputWithContext(ctx)
}

// VpcPrivateNetworkIpv4SubnetPtrInput is an input type that accepts VpcPrivateNetworkIpv4SubnetArgs, VpcPrivateNetworkIpv4SubnetPtr and VpcPrivateNetworkIpv4SubnetPtrOutput values.
// You can construct a concrete instance of `VpcPrivateNetworkIpv4SubnetPtrInput` via:
//
//	        VpcPrivateNetworkIpv4SubnetArgs{...}
//
//	or:
//
//	        nil
type VpcPrivateNetworkIpv4SubnetPtrInput interface {
	pulumi.Input

	ToVpcPrivateNetworkIpv4SubnetPtrOutput() VpcPrivateNetworkIpv4SubnetPtrOutput
	ToVpcPrivateNetworkIpv4SubnetPtrOutputWithContext(context.Context) VpcPrivateNetworkIpv4SubnetPtrOutput
}

type vpcPrivateNetworkIpv4SubnetPtrType VpcPrivateNetworkIpv4SubnetArgs

func VpcPrivateNetworkIpv4SubnetPtr(v *VpcPrivateNetworkIpv4SubnetArgs) VpcPrivateNetworkIpv4SubnetPtrInput {
	return (*vpcPrivateNetworkIpv4SubnetPtrType)(v)
}

func (*vpcPrivateNetworkIpv4SubnetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPrivateNetworkIpv4Subnet)(nil)).Elem()
}

func (i *vpcPrivateNetworkIpv4SubnetPtrType) ToVpcPrivateNetworkIpv4SubnetPtrOutput() VpcPrivateNetworkIpv4SubnetPtrOutput {
	return i.ToVpcPrivateNetworkIpv4SubnetPtrOutputWithContext(context.Background())
}

func (i *vpcPrivateNetworkIpv4SubnetPtrType) ToVpcPrivateNetworkIpv4SubnetPtrOutputWithContext(ctx context.Context) VpcPrivateNetworkIpv4SubnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPrivateNetworkIpv4SubnetPtrOutput)
}

func (i *vpcPrivateNetworkIpv4SubnetPtrType) ToOutput(ctx context.Context) pulumix.Output[*VpcPrivateNetworkIpv4Subnet] {
	return pulumix.Output[*VpcPrivateNetworkIpv4Subnet]{
		OutputState: i.ToVpcPrivateNetworkIpv4SubnetPtrOutputWithContext(ctx).OutputState,
	}
}

type VpcPrivateNetworkIpv4SubnetOutput struct{ *pulumi.OutputState }

func (VpcPrivateNetworkIpv4SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPrivateNetworkIpv4Subnet)(nil)).Elem()
}

func (o VpcPrivateNetworkIpv4SubnetOutput) ToVpcPrivateNetworkIpv4SubnetOutput() VpcPrivateNetworkIpv4SubnetOutput {
	return o
}

func (o VpcPrivateNetworkIpv4SubnetOutput) ToVpcPrivateNetworkIpv4SubnetOutputWithContext(ctx context.Context) VpcPrivateNetworkIpv4SubnetOutput {
	return o
}

func (o VpcPrivateNetworkIpv4SubnetOutput) ToVpcPrivateNetworkIpv4SubnetPtrOutput() VpcPrivateNetworkIpv4SubnetPtrOutput {
	return o.ToVpcPrivateNetworkIpv4SubnetPtrOutputWithContext(context.Background())
}

func (o VpcPrivateNetworkIpv4SubnetOutput) ToVpcPrivateNetworkIpv4SubnetPtrOutputWithContext(ctx context.Context) VpcPrivateNetworkIpv4SubnetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VpcPrivateNetworkIpv4Subnet) *VpcPrivateNetworkIpv4Subnet {
		return &v
	}).(VpcPrivateNetworkIpv4SubnetPtrOutput)
}

func (o VpcPrivateNetworkIpv4SubnetOutput) ToOutput(ctx context.Context) pulumix.Output[VpcPrivateNetworkIpv4Subnet] {
	return pulumix.Output[VpcPrivateNetworkIpv4Subnet]{
		OutputState: o.OutputState,
	}
}

// The network address of the subnet in dotted decimal notation, e.g., '192.168.0.0' for a '192.168.0.0/24' subnet.
func (o VpcPrivateNetworkIpv4SubnetOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPrivateNetworkIpv4Subnet) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The date and time of the creation of the subnet.
func (o VpcPrivateNetworkIpv4SubnetOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPrivateNetworkIpv4Subnet) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The subnet ID.
func (o VpcPrivateNetworkIpv4SubnetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPrivateNetworkIpv4Subnet) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The length of the network prefix, e.g., 24 for a 255.255.255.0 mask.
func (o VpcPrivateNetworkIpv4SubnetOutput) PrefixLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VpcPrivateNetworkIpv4Subnet) *int { return v.PrefixLength }).(pulumi.IntPtrOutput)
}

// The subnet CIDR.
func (o VpcPrivateNetworkIpv4SubnetOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPrivateNetworkIpv4Subnet) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

// The subnet mask expressed in dotted decimal notation, e.g., '255.255.255.0' for a /24 subnet
func (o VpcPrivateNetworkIpv4SubnetOutput) SubnetMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPrivateNetworkIpv4Subnet) *string { return v.SubnetMask }).(pulumi.StringPtrOutput)
}

// The date and time of the last update of the subnet.
func (o VpcPrivateNetworkIpv4SubnetOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPrivateNetworkIpv4Subnet) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type VpcPrivateNetworkIpv4SubnetPtrOutput struct{ *pulumi.OutputState }

func (VpcPrivateNetworkIpv4SubnetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPrivateNetworkIpv4Subnet)(nil)).Elem()
}

func (o VpcPrivateNetworkIpv4SubnetPtrOutput) ToVpcPrivateNetworkIpv4SubnetPtrOutput() VpcPrivateNetworkIpv4SubnetPtrOutput {
	return o
}

func (o VpcPrivateNetworkIpv4SubnetPtrOutput) ToVpcPrivateNetworkIpv4SubnetPtrOutputWithContext(ctx context.Context) VpcPrivateNetworkIpv4SubnetPtrOutput {
	return o
}

func (o VpcPrivateNetworkIpv4SubnetPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VpcPrivateNetworkIpv4Subnet] {
	return pulumix.Output[*VpcPrivateNetworkIpv4Subnet]{
		OutputState: o.OutputState,
	}
}

func (o VpcPrivateNetworkIpv4SubnetPtrOutput) Elem() VpcPrivateNetworkIpv4SubnetOutput {
	return o.ApplyT(func(v *VpcPrivateNetworkIpv4Subnet) VpcPrivateNetworkIpv4Subnet {
		if v != nil {
			return *v
		}
		var ret VpcPrivateNetworkIpv4Subnet
		return ret
	}).(VpcPrivateNetworkIpv4SubnetOutput)
}

// The network address of the subnet in dotted decimal notation, e.g., '192.168.0.0' for a '192.168.0.0/24' subnet.
func (o VpcPrivateNetworkIpv4SubnetPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcPrivateNetworkIpv4Subnet) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// The date and time of the creation of the subnet.
func (o VpcPrivateNetworkIpv4SubnetPtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcPrivateNetworkIpv4Subnet) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// The subnet ID.
func (o VpcPrivateNetworkIpv4SubnetPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcPrivateNetworkIpv4Subnet) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The length of the network prefix, e.g., 24 for a 255.255.255.0 mask.
func (o VpcPrivateNetworkIpv4SubnetPtrOutput) PrefixLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VpcPrivateNetworkIpv4Subnet) *int {
		if v == nil {
			return nil
		}
		return v.PrefixLength
	}).(pulumi.IntPtrOutput)
}

// The subnet CIDR.
func (o VpcPrivateNetworkIpv4SubnetPtrOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcPrivateNetworkIpv4Subnet) *string {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(pulumi.StringPtrOutput)
}

// The subnet mask expressed in dotted decimal notation, e.g., '255.255.255.0' for a /24 subnet
func (o VpcPrivateNetworkIpv4SubnetPtrOutput) SubnetMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcPrivateNetworkIpv4Subnet) *string {
		if v == nil {
			return nil
		}
		return v.SubnetMask
	}).(pulumi.StringPtrOutput)
}

// The date and time of the last update of the subnet.
func (o VpcPrivateNetworkIpv4SubnetPtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcPrivateNetworkIpv4Subnet) *string {
		if v == nil {
			return nil
		}
		return v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

type VpcPrivateNetworkIpv6Subnet struct {
	// The network address of the subnet in dotted decimal notation, e.g., '192.168.0.0' for a '192.168.0.0/24' subnet.
	Address *string `pulumi:"address"`
	// The date and time of the creation of the subnet.
	CreatedAt *string `pulumi:"createdAt"`
	// The subnet ID.
	Id *string `pulumi:"id"`
	// The length of the network prefix, e.g., 24 for a 255.255.255.0 mask.
	PrefixLength *int `pulumi:"prefixLength"`
	// The subnet CIDR.
	Subnet *string `pulumi:"subnet"`
	// The subnet mask expressed in dotted decimal notation, e.g., '255.255.255.0' for a /24 subnet
	SubnetMask *string `pulumi:"subnetMask"`
	// The date and time of the last update of the subnet.
	UpdatedAt *string `pulumi:"updatedAt"`
}

// VpcPrivateNetworkIpv6SubnetInput is an input type that accepts VpcPrivateNetworkIpv6SubnetArgs and VpcPrivateNetworkIpv6SubnetOutput values.
// You can construct a concrete instance of `VpcPrivateNetworkIpv6SubnetInput` via:
//
//	VpcPrivateNetworkIpv6SubnetArgs{...}
type VpcPrivateNetworkIpv6SubnetInput interface {
	pulumi.Input

	ToVpcPrivateNetworkIpv6SubnetOutput() VpcPrivateNetworkIpv6SubnetOutput
	ToVpcPrivateNetworkIpv6SubnetOutputWithContext(context.Context) VpcPrivateNetworkIpv6SubnetOutput
}

type VpcPrivateNetworkIpv6SubnetArgs struct {
	// The network address of the subnet in dotted decimal notation, e.g., '192.168.0.0' for a '192.168.0.0/24' subnet.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The date and time of the creation of the subnet.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// The subnet ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The length of the network prefix, e.g., 24 for a 255.255.255.0 mask.
	PrefixLength pulumi.IntPtrInput `pulumi:"prefixLength"`
	// The subnet CIDR.
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
	// The subnet mask expressed in dotted decimal notation, e.g., '255.255.255.0' for a /24 subnet
	SubnetMask pulumi.StringPtrInput `pulumi:"subnetMask"`
	// The date and time of the last update of the subnet.
	UpdatedAt pulumi.StringPtrInput `pulumi:"updatedAt"`
}

func (VpcPrivateNetworkIpv6SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPrivateNetworkIpv6Subnet)(nil)).Elem()
}

func (i VpcPrivateNetworkIpv6SubnetArgs) ToVpcPrivateNetworkIpv6SubnetOutput() VpcPrivateNetworkIpv6SubnetOutput {
	return i.ToVpcPrivateNetworkIpv6SubnetOutputWithContext(context.Background())
}

func (i VpcPrivateNetworkIpv6SubnetArgs) ToVpcPrivateNetworkIpv6SubnetOutputWithContext(ctx context.Context) VpcPrivateNetworkIpv6SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPrivateNetworkIpv6SubnetOutput)
}

func (i VpcPrivateNetworkIpv6SubnetArgs) ToOutput(ctx context.Context) pulumix.Output[VpcPrivateNetworkIpv6Subnet] {
	return pulumix.Output[VpcPrivateNetworkIpv6Subnet]{
		OutputState: i.ToVpcPrivateNetworkIpv6SubnetOutputWithContext(ctx).OutputState,
	}
}

// VpcPrivateNetworkIpv6SubnetArrayInput is an input type that accepts VpcPrivateNetworkIpv6SubnetArray and VpcPrivateNetworkIpv6SubnetArrayOutput values.
// You can construct a concrete instance of `VpcPrivateNetworkIpv6SubnetArrayInput` via:
//
//	VpcPrivateNetworkIpv6SubnetArray{ VpcPrivateNetworkIpv6SubnetArgs{...} }
type VpcPrivateNetworkIpv6SubnetArrayInput interface {
	pulumi.Input

	ToVpcPrivateNetworkIpv6SubnetArrayOutput() VpcPrivateNetworkIpv6SubnetArrayOutput
	ToVpcPrivateNetworkIpv6SubnetArrayOutputWithContext(context.Context) VpcPrivateNetworkIpv6SubnetArrayOutput
}

type VpcPrivateNetworkIpv6SubnetArray []VpcPrivateNetworkIpv6SubnetInput

func (VpcPrivateNetworkIpv6SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcPrivateNetworkIpv6Subnet)(nil)).Elem()
}

func (i VpcPrivateNetworkIpv6SubnetArray) ToVpcPrivateNetworkIpv6SubnetArrayOutput() VpcPrivateNetworkIpv6SubnetArrayOutput {
	return i.ToVpcPrivateNetworkIpv6SubnetArrayOutputWithContext(context.Background())
}

func (i VpcPrivateNetworkIpv6SubnetArray) ToVpcPrivateNetworkIpv6SubnetArrayOutputWithContext(ctx context.Context) VpcPrivateNetworkIpv6SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPrivateNetworkIpv6SubnetArrayOutput)
}

func (i VpcPrivateNetworkIpv6SubnetArray) ToOutput(ctx context.Context) pulumix.Output[[]VpcPrivateNetworkIpv6Subnet] {
	return pulumix.Output[[]VpcPrivateNetworkIpv6Subnet]{
		OutputState: i.ToVpcPrivateNetworkIpv6SubnetArrayOutputWithContext(ctx).OutputState,
	}
}

type VpcPrivateNetworkIpv6SubnetOutput struct{ *pulumi.OutputState }

func (VpcPrivateNetworkIpv6SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPrivateNetworkIpv6Subnet)(nil)).Elem()
}

func (o VpcPrivateNetworkIpv6SubnetOutput) ToVpcPrivateNetworkIpv6SubnetOutput() VpcPrivateNetworkIpv6SubnetOutput {
	return o
}

func (o VpcPrivateNetworkIpv6SubnetOutput) ToVpcPrivateNetworkIpv6SubnetOutputWithContext(ctx context.Context) VpcPrivateNetworkIpv6SubnetOutput {
	return o
}

func (o VpcPrivateNetworkIpv6SubnetOutput) ToOutput(ctx context.Context) pulumix.Output[VpcPrivateNetworkIpv6Subnet] {
	return pulumix.Output[VpcPrivateNetworkIpv6Subnet]{
		OutputState: o.OutputState,
	}
}

// The network address of the subnet in dotted decimal notation, e.g., '192.168.0.0' for a '192.168.0.0/24' subnet.
func (o VpcPrivateNetworkIpv6SubnetOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPrivateNetworkIpv6Subnet) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The date and time of the creation of the subnet.
func (o VpcPrivateNetworkIpv6SubnetOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPrivateNetworkIpv6Subnet) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The subnet ID.
func (o VpcPrivateNetworkIpv6SubnetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPrivateNetworkIpv6Subnet) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The length of the network prefix, e.g., 24 for a 255.255.255.0 mask.
func (o VpcPrivateNetworkIpv6SubnetOutput) PrefixLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VpcPrivateNetworkIpv6Subnet) *int { return v.PrefixLength }).(pulumi.IntPtrOutput)
}

// The subnet CIDR.
func (o VpcPrivateNetworkIpv6SubnetOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPrivateNetworkIpv6Subnet) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

// The subnet mask expressed in dotted decimal notation, e.g., '255.255.255.0' for a /24 subnet
func (o VpcPrivateNetworkIpv6SubnetOutput) SubnetMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPrivateNetworkIpv6Subnet) *string { return v.SubnetMask }).(pulumi.StringPtrOutput)
}

// The date and time of the last update of the subnet.
func (o VpcPrivateNetworkIpv6SubnetOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPrivateNetworkIpv6Subnet) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type VpcPrivateNetworkIpv6SubnetArrayOutput struct{ *pulumi.OutputState }

func (VpcPrivateNetworkIpv6SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcPrivateNetworkIpv6Subnet)(nil)).Elem()
}

func (o VpcPrivateNetworkIpv6SubnetArrayOutput) ToVpcPrivateNetworkIpv6SubnetArrayOutput() VpcPrivateNetworkIpv6SubnetArrayOutput {
	return o
}

func (o VpcPrivateNetworkIpv6SubnetArrayOutput) ToVpcPrivateNetworkIpv6SubnetArrayOutputWithContext(ctx context.Context) VpcPrivateNetworkIpv6SubnetArrayOutput {
	return o
}

func (o VpcPrivateNetworkIpv6SubnetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VpcPrivateNetworkIpv6Subnet] {
	return pulumix.Output[[]VpcPrivateNetworkIpv6Subnet]{
		OutputState: o.OutputState,
	}
}

func (o VpcPrivateNetworkIpv6SubnetArrayOutput) Index(i pulumi.IntInput) VpcPrivateNetworkIpv6SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcPrivateNetworkIpv6Subnet {
		return vs[0].([]VpcPrivateNetworkIpv6Subnet)[vs[1].(int)]
	}).(VpcPrivateNetworkIpv6SubnetOutput)
}

type WebHostingCpanelUrl struct {
	// The URL of the Dashboard.
	Dashboard *string `pulumi:"dashboard"`
	// The URL of the Webmail interface.
	Webmail *string `pulumi:"webmail"`
}

// WebHostingCpanelUrlInput is an input type that accepts WebHostingCpanelUrlArgs and WebHostingCpanelUrlOutput values.
// You can construct a concrete instance of `WebHostingCpanelUrlInput` via:
//
//	WebHostingCpanelUrlArgs{...}
type WebHostingCpanelUrlInput interface {
	pulumi.Input

	ToWebHostingCpanelUrlOutput() WebHostingCpanelUrlOutput
	ToWebHostingCpanelUrlOutputWithContext(context.Context) WebHostingCpanelUrlOutput
}

type WebHostingCpanelUrlArgs struct {
	// The URL of the Dashboard.
	Dashboard pulumi.StringPtrInput `pulumi:"dashboard"`
	// The URL of the Webmail interface.
	Webmail pulumi.StringPtrInput `pulumi:"webmail"`
}

func (WebHostingCpanelUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebHostingCpanelUrl)(nil)).Elem()
}

func (i WebHostingCpanelUrlArgs) ToWebHostingCpanelUrlOutput() WebHostingCpanelUrlOutput {
	return i.ToWebHostingCpanelUrlOutputWithContext(context.Background())
}

func (i WebHostingCpanelUrlArgs) ToWebHostingCpanelUrlOutputWithContext(ctx context.Context) WebHostingCpanelUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebHostingCpanelUrlOutput)
}

func (i WebHostingCpanelUrlArgs) ToOutput(ctx context.Context) pulumix.Output[WebHostingCpanelUrl] {
	return pulumix.Output[WebHostingCpanelUrl]{
		OutputState: i.ToWebHostingCpanelUrlOutputWithContext(ctx).OutputState,
	}
}

// WebHostingCpanelUrlArrayInput is an input type that accepts WebHostingCpanelUrlArray and WebHostingCpanelUrlArrayOutput values.
// You can construct a concrete instance of `WebHostingCpanelUrlArrayInput` via:
//
//	WebHostingCpanelUrlArray{ WebHostingCpanelUrlArgs{...} }
type WebHostingCpanelUrlArrayInput interface {
	pulumi.Input

	ToWebHostingCpanelUrlArrayOutput() WebHostingCpanelUrlArrayOutput
	ToWebHostingCpanelUrlArrayOutputWithContext(context.Context) WebHostingCpanelUrlArrayOutput
}

type WebHostingCpanelUrlArray []WebHostingCpanelUrlInput

func (WebHostingCpanelUrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebHostingCpanelUrl)(nil)).Elem()
}

func (i WebHostingCpanelUrlArray) ToWebHostingCpanelUrlArrayOutput() WebHostingCpanelUrlArrayOutput {
	return i.ToWebHostingCpanelUrlArrayOutputWithContext(context.Background())
}

func (i WebHostingCpanelUrlArray) ToWebHostingCpanelUrlArrayOutputWithContext(ctx context.Context) WebHostingCpanelUrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebHostingCpanelUrlArrayOutput)
}

func (i WebHostingCpanelUrlArray) ToOutput(ctx context.Context) pulumix.Output[[]WebHostingCpanelUrl] {
	return pulumix.Output[[]WebHostingCpanelUrl]{
		OutputState: i.ToWebHostingCpanelUrlArrayOutputWithContext(ctx).OutputState,
	}
}

type WebHostingCpanelUrlOutput struct{ *pulumi.OutputState }

func (WebHostingCpanelUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebHostingCpanelUrl)(nil)).Elem()
}

func (o WebHostingCpanelUrlOutput) ToWebHostingCpanelUrlOutput() WebHostingCpanelUrlOutput {
	return o
}

func (o WebHostingCpanelUrlOutput) ToWebHostingCpanelUrlOutputWithContext(ctx context.Context) WebHostingCpanelUrlOutput {
	return o
}

func (o WebHostingCpanelUrlOutput) ToOutput(ctx context.Context) pulumix.Output[WebHostingCpanelUrl] {
	return pulumix.Output[WebHostingCpanelUrl]{
		OutputState: o.OutputState,
	}
}

// The URL of the Dashboard.
func (o WebHostingCpanelUrlOutput) Dashboard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHostingCpanelUrl) *string { return v.Dashboard }).(pulumi.StringPtrOutput)
}

// The URL of the Webmail interface.
func (o WebHostingCpanelUrlOutput) Webmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHostingCpanelUrl) *string { return v.Webmail }).(pulumi.StringPtrOutput)
}

type WebHostingCpanelUrlArrayOutput struct{ *pulumi.OutputState }

func (WebHostingCpanelUrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebHostingCpanelUrl)(nil)).Elem()
}

func (o WebHostingCpanelUrlArrayOutput) ToWebHostingCpanelUrlArrayOutput() WebHostingCpanelUrlArrayOutput {
	return o
}

func (o WebHostingCpanelUrlArrayOutput) ToWebHostingCpanelUrlArrayOutputWithContext(ctx context.Context) WebHostingCpanelUrlArrayOutput {
	return o
}

func (o WebHostingCpanelUrlArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]WebHostingCpanelUrl] {
	return pulumix.Output[[]WebHostingCpanelUrl]{
		OutputState: o.OutputState,
	}
}

func (o WebHostingCpanelUrlArrayOutput) Index(i pulumi.IntInput) WebHostingCpanelUrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebHostingCpanelUrl {
		return vs[0].([]WebHostingCpanelUrl)[vs[1].(int)]
	}).(WebHostingCpanelUrlOutput)
}

type WebHostingOption struct {
	// The option ID.
	Id *string `pulumi:"id"`
	// The option name.
	Name *string `pulumi:"name"`
}

// WebHostingOptionInput is an input type that accepts WebHostingOptionArgs and WebHostingOptionOutput values.
// You can construct a concrete instance of `WebHostingOptionInput` via:
//
//	WebHostingOptionArgs{...}
type WebHostingOptionInput interface {
	pulumi.Input

	ToWebHostingOptionOutput() WebHostingOptionOutput
	ToWebHostingOptionOutputWithContext(context.Context) WebHostingOptionOutput
}

type WebHostingOptionArgs struct {
	// The option ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The option name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (WebHostingOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebHostingOption)(nil)).Elem()
}

func (i WebHostingOptionArgs) ToWebHostingOptionOutput() WebHostingOptionOutput {
	return i.ToWebHostingOptionOutputWithContext(context.Background())
}

func (i WebHostingOptionArgs) ToWebHostingOptionOutputWithContext(ctx context.Context) WebHostingOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebHostingOptionOutput)
}

func (i WebHostingOptionArgs) ToOutput(ctx context.Context) pulumix.Output[WebHostingOption] {
	return pulumix.Output[WebHostingOption]{
		OutputState: i.ToWebHostingOptionOutputWithContext(ctx).OutputState,
	}
}

// WebHostingOptionArrayInput is an input type that accepts WebHostingOptionArray and WebHostingOptionArrayOutput values.
// You can construct a concrete instance of `WebHostingOptionArrayInput` via:
//
//	WebHostingOptionArray{ WebHostingOptionArgs{...} }
type WebHostingOptionArrayInput interface {
	pulumi.Input

	ToWebHostingOptionArrayOutput() WebHostingOptionArrayOutput
	ToWebHostingOptionArrayOutputWithContext(context.Context) WebHostingOptionArrayOutput
}

type WebHostingOptionArray []WebHostingOptionInput

func (WebHostingOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebHostingOption)(nil)).Elem()
}

func (i WebHostingOptionArray) ToWebHostingOptionArrayOutput() WebHostingOptionArrayOutput {
	return i.ToWebHostingOptionArrayOutputWithContext(context.Background())
}

func (i WebHostingOptionArray) ToWebHostingOptionArrayOutputWithContext(ctx context.Context) WebHostingOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebHostingOptionArrayOutput)
}

func (i WebHostingOptionArray) ToOutput(ctx context.Context) pulumix.Output[[]WebHostingOption] {
	return pulumix.Output[[]WebHostingOption]{
		OutputState: i.ToWebHostingOptionArrayOutputWithContext(ctx).OutputState,
	}
}

type WebHostingOptionOutput struct{ *pulumi.OutputState }

func (WebHostingOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebHostingOption)(nil)).Elem()
}

func (o WebHostingOptionOutput) ToWebHostingOptionOutput() WebHostingOptionOutput {
	return o
}

func (o WebHostingOptionOutput) ToWebHostingOptionOutputWithContext(ctx context.Context) WebHostingOptionOutput {
	return o
}

func (o WebHostingOptionOutput) ToOutput(ctx context.Context) pulumix.Output[WebHostingOption] {
	return pulumix.Output[WebHostingOption]{
		OutputState: o.OutputState,
	}
}

// The option ID.
func (o WebHostingOptionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHostingOption) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The option name.
func (o WebHostingOptionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHostingOption) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type WebHostingOptionArrayOutput struct{ *pulumi.OutputState }

func (WebHostingOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebHostingOption)(nil)).Elem()
}

func (o WebHostingOptionArrayOutput) ToWebHostingOptionArrayOutput() WebHostingOptionArrayOutput {
	return o
}

func (o WebHostingOptionArrayOutput) ToWebHostingOptionArrayOutputWithContext(ctx context.Context) WebHostingOptionArrayOutput {
	return o
}

func (o WebHostingOptionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]WebHostingOption] {
	return pulumix.Output[[]WebHostingOption]{
		OutputState: o.OutputState,
	}
}

func (o WebHostingOptionArrayOutput) Index(i pulumi.IntInput) WebHostingOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebHostingOption {
		return vs[0].([]WebHostingOption)[vs[1].(int)]
	}).(WebHostingOptionOutput)
}

type GetBaremetalOfferCpus struct {
	// Number of core on this CPU.
	CoreCount int `pulumi:"coreCount"`
	// Frequency of the memory in MHz.
	Frequency int `pulumi:"frequency"`
	// The offer name. Only one of `name` and `offerId` should be specified.
	Name string `pulumi:"name"`
	// Number of thread on this CPU.
	ThreadCount int `pulumi:"threadCount"`
}

// GetBaremetalOfferCpusInput is an input type that accepts GetBaremetalOfferCpusArgs and GetBaremetalOfferCpusOutput values.
// You can construct a concrete instance of `GetBaremetalOfferCpusInput` via:
//
//	GetBaremetalOfferCpusArgs{...}
type GetBaremetalOfferCpusInput interface {
	pulumi.Input

	ToGetBaremetalOfferCpusOutput() GetBaremetalOfferCpusOutput
	ToGetBaremetalOfferCpusOutputWithContext(context.Context) GetBaremetalOfferCpusOutput
}

type GetBaremetalOfferCpusArgs struct {
	// Number of core on this CPU.
	CoreCount pulumi.IntInput `pulumi:"coreCount"`
	// Frequency of the memory in MHz.
	Frequency pulumi.IntInput `pulumi:"frequency"`
	// The offer name. Only one of `name` and `offerId` should be specified.
	Name pulumi.StringInput `pulumi:"name"`
	// Number of thread on this CPU.
	ThreadCount pulumi.IntInput `pulumi:"threadCount"`
}

func (GetBaremetalOfferCpusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBaremetalOfferCpus)(nil)).Elem()
}

func (i GetBaremetalOfferCpusArgs) ToGetBaremetalOfferCpusOutput() GetBaremetalOfferCpusOutput {
	return i.ToGetBaremetalOfferCpusOutputWithContext(context.Background())
}

func (i GetBaremetalOfferCpusArgs) ToGetBaremetalOfferCpusOutputWithContext(ctx context.Context) GetBaremetalOfferCpusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBaremetalOfferCpusOutput)
}

func (i GetBaremetalOfferCpusArgs) ToOutput(ctx context.Context) pulumix.Output[GetBaremetalOfferCpus] {
	return pulumix.Output[GetBaremetalOfferCpus]{
		OutputState: i.ToGetBaremetalOfferCpusOutputWithContext(ctx).OutputState,
	}
}

// GetBaremetalOfferCpusArrayInput is an input type that accepts GetBaremetalOfferCpusArray and GetBaremetalOfferCpusArrayOutput values.
// You can construct a concrete instance of `GetBaremetalOfferCpusArrayInput` via:
//
//	GetBaremetalOfferCpusArray{ GetBaremetalOfferCpusArgs{...} }
type GetBaremetalOfferCpusArrayInput interface {
	pulumi.Input

	ToGetBaremetalOfferCpusArrayOutput() GetBaremetalOfferCpusArrayOutput
	ToGetBaremetalOfferCpusArrayOutputWithContext(context.Context) GetBaremetalOfferCpusArrayOutput
}

type GetBaremetalOfferCpusArray []GetBaremetalOfferCpusInput

func (GetBaremetalOfferCpusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBaremetalOfferCpus)(nil)).Elem()
}

func (i GetBaremetalOfferCpusArray) ToGetBaremetalOfferCpusArrayOutput() GetBaremetalOfferCpusArrayOutput {
	return i.ToGetBaremetalOfferCpusArrayOutputWithContext(context.Background())
}

func (i GetBaremetalOfferCpusArray) ToGetBaremetalOfferCpusArrayOutputWithContext(ctx context.Context) GetBaremetalOfferCpusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBaremetalOfferCpusArrayOutput)
}

func (i GetBaremetalOfferCpusArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBaremetalOfferCpus] {
	return pulumix.Output[[]GetBaremetalOfferCpus]{
		OutputState: i.ToGetBaremetalOfferCpusArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBaremetalOfferCpusOutput struct{ *pulumi.OutputState }

func (GetBaremetalOfferCpusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBaremetalOfferCpus)(nil)).Elem()
}

func (o GetBaremetalOfferCpusOutput) ToGetBaremetalOfferCpusOutput() GetBaremetalOfferCpusOutput {
	return o
}

func (o GetBaremetalOfferCpusOutput) ToGetBaremetalOfferCpusOutputWithContext(ctx context.Context) GetBaremetalOfferCpusOutput {
	return o
}

func (o GetBaremetalOfferCpusOutput) ToOutput(ctx context.Context) pulumix.Output[GetBaremetalOfferCpus] {
	return pulumix.Output[GetBaremetalOfferCpus]{
		OutputState: o.OutputState,
	}
}

// Number of core on this CPU.
func (o GetBaremetalOfferCpusOutput) CoreCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetBaremetalOfferCpus) int { return v.CoreCount }).(pulumi.IntOutput)
}

// Frequency of the memory in MHz.
func (o GetBaremetalOfferCpusOutput) Frequency() pulumi.IntOutput {
	return o.ApplyT(func(v GetBaremetalOfferCpus) int { return v.Frequency }).(pulumi.IntOutput)
}

// The offer name. Only one of `name` and `offerId` should be specified.
func (o GetBaremetalOfferCpusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalOfferCpus) string { return v.Name }).(pulumi.StringOutput)
}

// Number of thread on this CPU.
func (o GetBaremetalOfferCpusOutput) ThreadCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetBaremetalOfferCpus) int { return v.ThreadCount }).(pulumi.IntOutput)
}

type GetBaremetalOfferCpusArrayOutput struct{ *pulumi.OutputState }

func (GetBaremetalOfferCpusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBaremetalOfferCpus)(nil)).Elem()
}

func (o GetBaremetalOfferCpusArrayOutput) ToGetBaremetalOfferCpusArrayOutput() GetBaremetalOfferCpusArrayOutput {
	return o
}

func (o GetBaremetalOfferCpusArrayOutput) ToGetBaremetalOfferCpusArrayOutputWithContext(ctx context.Context) GetBaremetalOfferCpusArrayOutput {
	return o
}

func (o GetBaremetalOfferCpusArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBaremetalOfferCpus] {
	return pulumix.Output[[]GetBaremetalOfferCpus]{
		OutputState: o.OutputState,
	}
}

func (o GetBaremetalOfferCpusArrayOutput) Index(i pulumi.IntInput) GetBaremetalOfferCpusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBaremetalOfferCpus {
		return vs[0].([]GetBaremetalOfferCpus)[vs[1].(int)]
	}).(GetBaremetalOfferCpusOutput)
}

type GetBaremetalOfferDisk struct {
	// Capacity of the memory in GB.
	Capacity int `pulumi:"capacity"`
	// Type of memory.
	Type string `pulumi:"type"`
}

// GetBaremetalOfferDiskInput is an input type that accepts GetBaremetalOfferDiskArgs and GetBaremetalOfferDiskOutput values.
// You can construct a concrete instance of `GetBaremetalOfferDiskInput` via:
//
//	GetBaremetalOfferDiskArgs{...}
type GetBaremetalOfferDiskInput interface {
	pulumi.Input

	ToGetBaremetalOfferDiskOutput() GetBaremetalOfferDiskOutput
	ToGetBaremetalOfferDiskOutputWithContext(context.Context) GetBaremetalOfferDiskOutput
}

type GetBaremetalOfferDiskArgs struct {
	// Capacity of the memory in GB.
	Capacity pulumi.IntInput `pulumi:"capacity"`
	// Type of memory.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetBaremetalOfferDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBaremetalOfferDisk)(nil)).Elem()
}

func (i GetBaremetalOfferDiskArgs) ToGetBaremetalOfferDiskOutput() GetBaremetalOfferDiskOutput {
	return i.ToGetBaremetalOfferDiskOutputWithContext(context.Background())
}

func (i GetBaremetalOfferDiskArgs) ToGetBaremetalOfferDiskOutputWithContext(ctx context.Context) GetBaremetalOfferDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBaremetalOfferDiskOutput)
}

func (i GetBaremetalOfferDiskArgs) ToOutput(ctx context.Context) pulumix.Output[GetBaremetalOfferDisk] {
	return pulumix.Output[GetBaremetalOfferDisk]{
		OutputState: i.ToGetBaremetalOfferDiskOutputWithContext(ctx).OutputState,
	}
}

// GetBaremetalOfferDiskArrayInput is an input type that accepts GetBaremetalOfferDiskArray and GetBaremetalOfferDiskArrayOutput values.
// You can construct a concrete instance of `GetBaremetalOfferDiskArrayInput` via:
//
//	GetBaremetalOfferDiskArray{ GetBaremetalOfferDiskArgs{...} }
type GetBaremetalOfferDiskArrayInput interface {
	pulumi.Input

	ToGetBaremetalOfferDiskArrayOutput() GetBaremetalOfferDiskArrayOutput
	ToGetBaremetalOfferDiskArrayOutputWithContext(context.Context) GetBaremetalOfferDiskArrayOutput
}

type GetBaremetalOfferDiskArray []GetBaremetalOfferDiskInput

func (GetBaremetalOfferDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBaremetalOfferDisk)(nil)).Elem()
}

func (i GetBaremetalOfferDiskArray) ToGetBaremetalOfferDiskArrayOutput() GetBaremetalOfferDiskArrayOutput {
	return i.ToGetBaremetalOfferDiskArrayOutputWithContext(context.Background())
}

func (i GetBaremetalOfferDiskArray) ToGetBaremetalOfferDiskArrayOutputWithContext(ctx context.Context) GetBaremetalOfferDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBaremetalOfferDiskArrayOutput)
}

func (i GetBaremetalOfferDiskArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBaremetalOfferDisk] {
	return pulumix.Output[[]GetBaremetalOfferDisk]{
		OutputState: i.ToGetBaremetalOfferDiskArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBaremetalOfferDiskOutput struct{ *pulumi.OutputState }

func (GetBaremetalOfferDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBaremetalOfferDisk)(nil)).Elem()
}

func (o GetBaremetalOfferDiskOutput) ToGetBaremetalOfferDiskOutput() GetBaremetalOfferDiskOutput {
	return o
}

func (o GetBaremetalOfferDiskOutput) ToGetBaremetalOfferDiskOutputWithContext(ctx context.Context) GetBaremetalOfferDiskOutput {
	return o
}

func (o GetBaremetalOfferDiskOutput) ToOutput(ctx context.Context) pulumix.Output[GetBaremetalOfferDisk] {
	return pulumix.Output[GetBaremetalOfferDisk]{
		OutputState: o.OutputState,
	}
}

// Capacity of the memory in GB.
func (o GetBaremetalOfferDiskOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v GetBaremetalOfferDisk) int { return v.Capacity }).(pulumi.IntOutput)
}

// Type of memory.
func (o GetBaremetalOfferDiskOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalOfferDisk) string { return v.Type }).(pulumi.StringOutput)
}

type GetBaremetalOfferDiskArrayOutput struct{ *pulumi.OutputState }

func (GetBaremetalOfferDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBaremetalOfferDisk)(nil)).Elem()
}

func (o GetBaremetalOfferDiskArrayOutput) ToGetBaremetalOfferDiskArrayOutput() GetBaremetalOfferDiskArrayOutput {
	return o
}

func (o GetBaremetalOfferDiskArrayOutput) ToGetBaremetalOfferDiskArrayOutputWithContext(ctx context.Context) GetBaremetalOfferDiskArrayOutput {
	return o
}

func (o GetBaremetalOfferDiskArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBaremetalOfferDisk] {
	return pulumix.Output[[]GetBaremetalOfferDisk]{
		OutputState: o.OutputState,
	}
}

func (o GetBaremetalOfferDiskArrayOutput) Index(i pulumi.IntInput) GetBaremetalOfferDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBaremetalOfferDisk {
		return vs[0].([]GetBaremetalOfferDisk)[vs[1].(int)]
	}).(GetBaremetalOfferDiskOutput)
}

type GetBaremetalOfferMemory struct {
	// Capacity of the memory in GB.
	Capacity int `pulumi:"capacity"`
	// Frequency of the memory in MHz.
	Frequency int `pulumi:"frequency"`
	// True if error-correcting code is available on this memory.
	IsEcc bool `pulumi:"isEcc"`
	// Type of memory.
	Type string `pulumi:"type"`
}

// GetBaremetalOfferMemoryInput is an input type that accepts GetBaremetalOfferMemoryArgs and GetBaremetalOfferMemoryOutput values.
// You can construct a concrete instance of `GetBaremetalOfferMemoryInput` via:
//
//	GetBaremetalOfferMemoryArgs{...}
type GetBaremetalOfferMemoryInput interface {
	pulumi.Input

	ToGetBaremetalOfferMemoryOutput() GetBaremetalOfferMemoryOutput
	ToGetBaremetalOfferMemoryOutputWithContext(context.Context) GetBaremetalOfferMemoryOutput
}

type GetBaremetalOfferMemoryArgs struct {
	// Capacity of the memory in GB.
	Capacity pulumi.IntInput `pulumi:"capacity"`
	// Frequency of the memory in MHz.
	Frequency pulumi.IntInput `pulumi:"frequency"`
	// True if error-correcting code is available on this memory.
	IsEcc pulumi.BoolInput `pulumi:"isEcc"`
	// Type of memory.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetBaremetalOfferMemoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBaremetalOfferMemory)(nil)).Elem()
}

func (i GetBaremetalOfferMemoryArgs) ToGetBaremetalOfferMemoryOutput() GetBaremetalOfferMemoryOutput {
	return i.ToGetBaremetalOfferMemoryOutputWithContext(context.Background())
}

func (i GetBaremetalOfferMemoryArgs) ToGetBaremetalOfferMemoryOutputWithContext(ctx context.Context) GetBaremetalOfferMemoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBaremetalOfferMemoryOutput)
}

func (i GetBaremetalOfferMemoryArgs) ToOutput(ctx context.Context) pulumix.Output[GetBaremetalOfferMemory] {
	return pulumix.Output[GetBaremetalOfferMemory]{
		OutputState: i.ToGetBaremetalOfferMemoryOutputWithContext(ctx).OutputState,
	}
}

// GetBaremetalOfferMemoryArrayInput is an input type that accepts GetBaremetalOfferMemoryArray and GetBaremetalOfferMemoryArrayOutput values.
// You can construct a concrete instance of `GetBaremetalOfferMemoryArrayInput` via:
//
//	GetBaremetalOfferMemoryArray{ GetBaremetalOfferMemoryArgs{...} }
type GetBaremetalOfferMemoryArrayInput interface {
	pulumi.Input

	ToGetBaremetalOfferMemoryArrayOutput() GetBaremetalOfferMemoryArrayOutput
	ToGetBaremetalOfferMemoryArrayOutputWithContext(context.Context) GetBaremetalOfferMemoryArrayOutput
}

type GetBaremetalOfferMemoryArray []GetBaremetalOfferMemoryInput

func (GetBaremetalOfferMemoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBaremetalOfferMemory)(nil)).Elem()
}

func (i GetBaremetalOfferMemoryArray) ToGetBaremetalOfferMemoryArrayOutput() GetBaremetalOfferMemoryArrayOutput {
	return i.ToGetBaremetalOfferMemoryArrayOutputWithContext(context.Background())
}

func (i GetBaremetalOfferMemoryArray) ToGetBaremetalOfferMemoryArrayOutputWithContext(ctx context.Context) GetBaremetalOfferMemoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBaremetalOfferMemoryArrayOutput)
}

func (i GetBaremetalOfferMemoryArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBaremetalOfferMemory] {
	return pulumix.Output[[]GetBaremetalOfferMemory]{
		OutputState: i.ToGetBaremetalOfferMemoryArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBaremetalOfferMemoryOutput struct{ *pulumi.OutputState }

func (GetBaremetalOfferMemoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBaremetalOfferMemory)(nil)).Elem()
}

func (o GetBaremetalOfferMemoryOutput) ToGetBaremetalOfferMemoryOutput() GetBaremetalOfferMemoryOutput {
	return o
}

func (o GetBaremetalOfferMemoryOutput) ToGetBaremetalOfferMemoryOutputWithContext(ctx context.Context) GetBaremetalOfferMemoryOutput {
	return o
}

func (o GetBaremetalOfferMemoryOutput) ToOutput(ctx context.Context) pulumix.Output[GetBaremetalOfferMemory] {
	return pulumix.Output[GetBaremetalOfferMemory]{
		OutputState: o.OutputState,
	}
}

// Capacity of the memory in GB.
func (o GetBaremetalOfferMemoryOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v GetBaremetalOfferMemory) int { return v.Capacity }).(pulumi.IntOutput)
}

// Frequency of the memory in MHz.
func (o GetBaremetalOfferMemoryOutput) Frequency() pulumi.IntOutput {
	return o.ApplyT(func(v GetBaremetalOfferMemory) int { return v.Frequency }).(pulumi.IntOutput)
}

// True if error-correcting code is available on this memory.
func (o GetBaremetalOfferMemoryOutput) IsEcc() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBaremetalOfferMemory) bool { return v.IsEcc }).(pulumi.BoolOutput)
}

// Type of memory.
func (o GetBaremetalOfferMemoryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalOfferMemory) string { return v.Type }).(pulumi.StringOutput)
}

type GetBaremetalOfferMemoryArrayOutput struct{ *pulumi.OutputState }

func (GetBaremetalOfferMemoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBaremetalOfferMemory)(nil)).Elem()
}

func (o GetBaremetalOfferMemoryArrayOutput) ToGetBaremetalOfferMemoryArrayOutput() GetBaremetalOfferMemoryArrayOutput {
	return o
}

func (o GetBaremetalOfferMemoryArrayOutput) ToGetBaremetalOfferMemoryArrayOutputWithContext(ctx context.Context) GetBaremetalOfferMemoryArrayOutput {
	return o
}

func (o GetBaremetalOfferMemoryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBaremetalOfferMemory] {
	return pulumix.Output[[]GetBaremetalOfferMemory]{
		OutputState: o.OutputState,
	}
}

func (o GetBaremetalOfferMemoryArrayOutput) Index(i pulumi.IntInput) GetBaremetalOfferMemoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBaremetalOfferMemory {
		return vs[0].([]GetBaremetalOfferMemory)[vs[1].(int)]
	}).(GetBaremetalOfferMemoryOutput)
}

type GetBaremetalServerIp struct {
	Address string `pulumi:"address"`
	// The ID of the server.
	Id      string `pulumi:"id"`
	Reverse string `pulumi:"reverse"`
	Version string `pulumi:"version"`
}

// GetBaremetalServerIpInput is an input type that accepts GetBaremetalServerIpArgs and GetBaremetalServerIpOutput values.
// You can construct a concrete instance of `GetBaremetalServerIpInput` via:
//
//	GetBaremetalServerIpArgs{...}
type GetBaremetalServerIpInput interface {
	pulumi.Input

	ToGetBaremetalServerIpOutput() GetBaremetalServerIpOutput
	ToGetBaremetalServerIpOutputWithContext(context.Context) GetBaremetalServerIpOutput
}

type GetBaremetalServerIpArgs struct {
	Address pulumi.StringInput `pulumi:"address"`
	// The ID of the server.
	Id      pulumi.StringInput `pulumi:"id"`
	Reverse pulumi.StringInput `pulumi:"reverse"`
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetBaremetalServerIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBaremetalServerIp)(nil)).Elem()
}

func (i GetBaremetalServerIpArgs) ToGetBaremetalServerIpOutput() GetBaremetalServerIpOutput {
	return i.ToGetBaremetalServerIpOutputWithContext(context.Background())
}

func (i GetBaremetalServerIpArgs) ToGetBaremetalServerIpOutputWithContext(ctx context.Context) GetBaremetalServerIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBaremetalServerIpOutput)
}

func (i GetBaremetalServerIpArgs) ToOutput(ctx context.Context) pulumix.Output[GetBaremetalServerIp] {
	return pulumix.Output[GetBaremetalServerIp]{
		OutputState: i.ToGetBaremetalServerIpOutputWithContext(ctx).OutputState,
	}
}

// GetBaremetalServerIpArrayInput is an input type that accepts GetBaremetalServerIpArray and GetBaremetalServerIpArrayOutput values.
// You can construct a concrete instance of `GetBaremetalServerIpArrayInput` via:
//
//	GetBaremetalServerIpArray{ GetBaremetalServerIpArgs{...} }
type GetBaremetalServerIpArrayInput interface {
	pulumi.Input

	ToGetBaremetalServerIpArrayOutput() GetBaremetalServerIpArrayOutput
	ToGetBaremetalServerIpArrayOutputWithContext(context.Context) GetBaremetalServerIpArrayOutput
}

type GetBaremetalServerIpArray []GetBaremetalServerIpInput

func (GetBaremetalServerIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBaremetalServerIp)(nil)).Elem()
}

func (i GetBaremetalServerIpArray) ToGetBaremetalServerIpArrayOutput() GetBaremetalServerIpArrayOutput {
	return i.ToGetBaremetalServerIpArrayOutputWithContext(context.Background())
}

func (i GetBaremetalServerIpArray) ToGetBaremetalServerIpArrayOutputWithContext(ctx context.Context) GetBaremetalServerIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBaremetalServerIpArrayOutput)
}

func (i GetBaremetalServerIpArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBaremetalServerIp] {
	return pulumix.Output[[]GetBaremetalServerIp]{
		OutputState: i.ToGetBaremetalServerIpArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBaremetalServerIpOutput struct{ *pulumi.OutputState }

func (GetBaremetalServerIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBaremetalServerIp)(nil)).Elem()
}

func (o GetBaremetalServerIpOutput) ToGetBaremetalServerIpOutput() GetBaremetalServerIpOutput {
	return o
}

func (o GetBaremetalServerIpOutput) ToGetBaremetalServerIpOutputWithContext(ctx context.Context) GetBaremetalServerIpOutput {
	return o
}

func (o GetBaremetalServerIpOutput) ToOutput(ctx context.Context) pulumix.Output[GetBaremetalServerIp] {
	return pulumix.Output[GetBaremetalServerIp]{
		OutputState: o.OutputState,
	}
}

func (o GetBaremetalServerIpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerIp) string { return v.Address }).(pulumi.StringOutput)
}

// The ID of the server.
func (o GetBaremetalServerIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerIp) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetBaremetalServerIpOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerIp) string { return v.Reverse }).(pulumi.StringOutput)
}

func (o GetBaremetalServerIpOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerIp) string { return v.Version }).(pulumi.StringOutput)
}

type GetBaremetalServerIpArrayOutput struct{ *pulumi.OutputState }

func (GetBaremetalServerIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBaremetalServerIp)(nil)).Elem()
}

func (o GetBaremetalServerIpArrayOutput) ToGetBaremetalServerIpArrayOutput() GetBaremetalServerIpArrayOutput {
	return o
}

func (o GetBaremetalServerIpArrayOutput) ToGetBaremetalServerIpArrayOutputWithContext(ctx context.Context) GetBaremetalServerIpArrayOutput {
	return o
}

func (o GetBaremetalServerIpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBaremetalServerIp] {
	return pulumix.Output[[]GetBaremetalServerIp]{
		OutputState: o.OutputState,
	}
}

func (o GetBaremetalServerIpArrayOutput) Index(i pulumi.IntInput) GetBaremetalServerIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBaremetalServerIp {
		return vs[0].([]GetBaremetalServerIp)[vs[1].(int)]
	}).(GetBaremetalServerIpOutput)
}

type GetBaremetalServerIpv4 struct {
	Address string `pulumi:"address"`
	// The ID of the server.
	Id      string `pulumi:"id"`
	Reverse string `pulumi:"reverse"`
	Version string `pulumi:"version"`
}

// GetBaremetalServerIpv4Input is an input type that accepts GetBaremetalServerIpv4Args and GetBaremetalServerIpv4Output values.
// You can construct a concrete instance of `GetBaremetalServerIpv4Input` via:
//
//	GetBaremetalServerIpv4Args{...}
type GetBaremetalServerIpv4Input interface {
	pulumi.Input

	ToGetBaremetalServerIpv4Output() GetBaremetalServerIpv4Output
	ToGetBaremetalServerIpv4OutputWithContext(context.Context) GetBaremetalServerIpv4Output
}

type GetBaremetalServerIpv4Args struct {
	Address pulumi.StringInput `pulumi:"address"`
	// The ID of the server.
	Id      pulumi.StringInput `pulumi:"id"`
	Reverse pulumi.StringInput `pulumi:"reverse"`
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetBaremetalServerIpv4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBaremetalServerIpv4)(nil)).Elem()
}

func (i GetBaremetalServerIpv4Args) ToGetBaremetalServerIpv4Output() GetBaremetalServerIpv4Output {
	return i.ToGetBaremetalServerIpv4OutputWithContext(context.Background())
}

func (i GetBaremetalServerIpv4Args) ToGetBaremetalServerIpv4OutputWithContext(ctx context.Context) GetBaremetalServerIpv4Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetBaremetalServerIpv4Output)
}

func (i GetBaremetalServerIpv4Args) ToOutput(ctx context.Context) pulumix.Output[GetBaremetalServerIpv4] {
	return pulumix.Output[GetBaremetalServerIpv4]{
		OutputState: i.ToGetBaremetalServerIpv4OutputWithContext(ctx).OutputState,
	}
}

// GetBaremetalServerIpv4ArrayInput is an input type that accepts GetBaremetalServerIpv4Array and GetBaremetalServerIpv4ArrayOutput values.
// You can construct a concrete instance of `GetBaremetalServerIpv4ArrayInput` via:
//
//	GetBaremetalServerIpv4Array{ GetBaremetalServerIpv4Args{...} }
type GetBaremetalServerIpv4ArrayInput interface {
	pulumi.Input

	ToGetBaremetalServerIpv4ArrayOutput() GetBaremetalServerIpv4ArrayOutput
	ToGetBaremetalServerIpv4ArrayOutputWithContext(context.Context) GetBaremetalServerIpv4ArrayOutput
}

type GetBaremetalServerIpv4Array []GetBaremetalServerIpv4Input

func (GetBaremetalServerIpv4Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBaremetalServerIpv4)(nil)).Elem()
}

func (i GetBaremetalServerIpv4Array) ToGetBaremetalServerIpv4ArrayOutput() GetBaremetalServerIpv4ArrayOutput {
	return i.ToGetBaremetalServerIpv4ArrayOutputWithContext(context.Background())
}

func (i GetBaremetalServerIpv4Array) ToGetBaremetalServerIpv4ArrayOutputWithContext(ctx context.Context) GetBaremetalServerIpv4ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBaremetalServerIpv4ArrayOutput)
}

func (i GetBaremetalServerIpv4Array) ToOutput(ctx context.Context) pulumix.Output[[]GetBaremetalServerIpv4] {
	return pulumix.Output[[]GetBaremetalServerIpv4]{
		OutputState: i.ToGetBaremetalServerIpv4ArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBaremetalServerIpv4Output struct{ *pulumi.OutputState }

func (GetBaremetalServerIpv4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBaremetalServerIpv4)(nil)).Elem()
}

func (o GetBaremetalServerIpv4Output) ToGetBaremetalServerIpv4Output() GetBaremetalServerIpv4Output {
	return o
}

func (o GetBaremetalServerIpv4Output) ToGetBaremetalServerIpv4OutputWithContext(ctx context.Context) GetBaremetalServerIpv4Output {
	return o
}

func (o GetBaremetalServerIpv4Output) ToOutput(ctx context.Context) pulumix.Output[GetBaremetalServerIpv4] {
	return pulumix.Output[GetBaremetalServerIpv4]{
		OutputState: o.OutputState,
	}
}

func (o GetBaremetalServerIpv4Output) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerIpv4) string { return v.Address }).(pulumi.StringOutput)
}

// The ID of the server.
func (o GetBaremetalServerIpv4Output) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerIpv4) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetBaremetalServerIpv4Output) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerIpv4) string { return v.Reverse }).(pulumi.StringOutput)
}

func (o GetBaremetalServerIpv4Output) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerIpv4) string { return v.Version }).(pulumi.StringOutput)
}

type GetBaremetalServerIpv4ArrayOutput struct{ *pulumi.OutputState }

func (GetBaremetalServerIpv4ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBaremetalServerIpv4)(nil)).Elem()
}

func (o GetBaremetalServerIpv4ArrayOutput) ToGetBaremetalServerIpv4ArrayOutput() GetBaremetalServerIpv4ArrayOutput {
	return o
}

func (o GetBaremetalServerIpv4ArrayOutput) ToGetBaremetalServerIpv4ArrayOutputWithContext(ctx context.Context) GetBaremetalServerIpv4ArrayOutput {
	return o
}

func (o GetBaremetalServerIpv4ArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBaremetalServerIpv4] {
	return pulumix.Output[[]GetBaremetalServerIpv4]{
		OutputState: o.OutputState,
	}
}

func (o GetBaremetalServerIpv4ArrayOutput) Index(i pulumi.IntInput) GetBaremetalServerIpv4Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBaremetalServerIpv4 {
		return vs[0].([]GetBaremetalServerIpv4)[vs[1].(int)]
	}).(GetBaremetalServerIpv4Output)
}

type GetBaremetalServerIpv6 struct {
	Address string `pulumi:"address"`
	// The ID of the server.
	Id      string `pulumi:"id"`
	Reverse string `pulumi:"reverse"`
	Version string `pulumi:"version"`
}

// GetBaremetalServerIpv6Input is an input type that accepts GetBaremetalServerIpv6Args and GetBaremetalServerIpv6Output values.
// You can construct a concrete instance of `GetBaremetalServerIpv6Input` via:
//
//	GetBaremetalServerIpv6Args{...}
type GetBaremetalServerIpv6Input interface {
	pulumi.Input

	ToGetBaremetalServerIpv6Output() GetBaremetalServerIpv6Output
	ToGetBaremetalServerIpv6OutputWithContext(context.Context) GetBaremetalServerIpv6Output
}

type GetBaremetalServerIpv6Args struct {
	Address pulumi.StringInput `pulumi:"address"`
	// The ID of the server.
	Id      pulumi.StringInput `pulumi:"id"`
	Reverse pulumi.StringInput `pulumi:"reverse"`
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetBaremetalServerIpv6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBaremetalServerIpv6)(nil)).Elem()
}

func (i GetBaremetalServerIpv6Args) ToGetBaremetalServerIpv6Output() GetBaremetalServerIpv6Output {
	return i.ToGetBaremetalServerIpv6OutputWithContext(context.Background())
}

func (i GetBaremetalServerIpv6Args) ToGetBaremetalServerIpv6OutputWithContext(ctx context.Context) GetBaremetalServerIpv6Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetBaremetalServerIpv6Output)
}

func (i GetBaremetalServerIpv6Args) ToOutput(ctx context.Context) pulumix.Output[GetBaremetalServerIpv6] {
	return pulumix.Output[GetBaremetalServerIpv6]{
		OutputState: i.ToGetBaremetalServerIpv6OutputWithContext(ctx).OutputState,
	}
}

// GetBaremetalServerIpv6ArrayInput is an input type that accepts GetBaremetalServerIpv6Array and GetBaremetalServerIpv6ArrayOutput values.
// You can construct a concrete instance of `GetBaremetalServerIpv6ArrayInput` via:
//
//	GetBaremetalServerIpv6Array{ GetBaremetalServerIpv6Args{...} }
type GetBaremetalServerIpv6ArrayInput interface {
	pulumi.Input

	ToGetBaremetalServerIpv6ArrayOutput() GetBaremetalServerIpv6ArrayOutput
	ToGetBaremetalServerIpv6ArrayOutputWithContext(context.Context) GetBaremetalServerIpv6ArrayOutput
}

type GetBaremetalServerIpv6Array []GetBaremetalServerIpv6Input

func (GetBaremetalServerIpv6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBaremetalServerIpv6)(nil)).Elem()
}

func (i GetBaremetalServerIpv6Array) ToGetBaremetalServerIpv6ArrayOutput() GetBaremetalServerIpv6ArrayOutput {
	return i.ToGetBaremetalServerIpv6ArrayOutputWithContext(context.Background())
}

func (i GetBaremetalServerIpv6Array) ToGetBaremetalServerIpv6ArrayOutputWithContext(ctx context.Context) GetBaremetalServerIpv6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBaremetalServerIpv6ArrayOutput)
}

func (i GetBaremetalServerIpv6Array) ToOutput(ctx context.Context) pulumix.Output[[]GetBaremetalServerIpv6] {
	return pulumix.Output[[]GetBaremetalServerIpv6]{
		OutputState: i.ToGetBaremetalServerIpv6ArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBaremetalServerIpv6Output struct{ *pulumi.OutputState }

func (GetBaremetalServerIpv6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBaremetalServerIpv6)(nil)).Elem()
}

func (o GetBaremetalServerIpv6Output) ToGetBaremetalServerIpv6Output() GetBaremetalServerIpv6Output {
	return o
}

func (o GetBaremetalServerIpv6Output) ToGetBaremetalServerIpv6OutputWithContext(ctx context.Context) GetBaremetalServerIpv6Output {
	return o
}

func (o GetBaremetalServerIpv6Output) ToOutput(ctx context.Context) pulumix.Output[GetBaremetalServerIpv6] {
	return pulumix.Output[GetBaremetalServerIpv6]{
		OutputState: o.OutputState,
	}
}

func (o GetBaremetalServerIpv6Output) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerIpv6) string { return v.Address }).(pulumi.StringOutput)
}

// The ID of the server.
func (o GetBaremetalServerIpv6Output) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerIpv6) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetBaremetalServerIpv6Output) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerIpv6) string { return v.Reverse }).(pulumi.StringOutput)
}

func (o GetBaremetalServerIpv6Output) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerIpv6) string { return v.Version }).(pulumi.StringOutput)
}

type GetBaremetalServerIpv6ArrayOutput struct{ *pulumi.OutputState }

func (GetBaremetalServerIpv6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBaremetalServerIpv6)(nil)).Elem()
}

func (o GetBaremetalServerIpv6ArrayOutput) ToGetBaremetalServerIpv6ArrayOutput() GetBaremetalServerIpv6ArrayOutput {
	return o
}

func (o GetBaremetalServerIpv6ArrayOutput) ToGetBaremetalServerIpv6ArrayOutputWithContext(ctx context.Context) GetBaremetalServerIpv6ArrayOutput {
	return o
}

func (o GetBaremetalServerIpv6ArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBaremetalServerIpv6] {
	return pulumix.Output[[]GetBaremetalServerIpv6]{
		OutputState: o.OutputState,
	}
}

func (o GetBaremetalServerIpv6ArrayOutput) Index(i pulumi.IntInput) GetBaremetalServerIpv6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBaremetalServerIpv6 {
		return vs[0].([]GetBaremetalServerIpv6)[vs[1].(int)]
	}).(GetBaremetalServerIpv6Output)
}

type GetBaremetalServerOption struct {
	ExpiresAt string `pulumi:"expiresAt"`
	// The ID of the server.
	Id string `pulumi:"id"`
	// The server name. Only one of `name` and `serverId` should be specified.
	Name string `pulumi:"name"`
}

// GetBaremetalServerOptionInput is an input type that accepts GetBaremetalServerOptionArgs and GetBaremetalServerOptionOutput values.
// You can construct a concrete instance of `GetBaremetalServerOptionInput` via:
//
//	GetBaremetalServerOptionArgs{...}
type GetBaremetalServerOptionInput interface {
	pulumi.Input

	ToGetBaremetalServerOptionOutput() GetBaremetalServerOptionOutput
	ToGetBaremetalServerOptionOutputWithContext(context.Context) GetBaremetalServerOptionOutput
}

type GetBaremetalServerOptionArgs struct {
	ExpiresAt pulumi.StringInput `pulumi:"expiresAt"`
	// The ID of the server.
	Id pulumi.StringInput `pulumi:"id"`
	// The server name. Only one of `name` and `serverId` should be specified.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetBaremetalServerOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBaremetalServerOption)(nil)).Elem()
}

func (i GetBaremetalServerOptionArgs) ToGetBaremetalServerOptionOutput() GetBaremetalServerOptionOutput {
	return i.ToGetBaremetalServerOptionOutputWithContext(context.Background())
}

func (i GetBaremetalServerOptionArgs) ToGetBaremetalServerOptionOutputWithContext(ctx context.Context) GetBaremetalServerOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBaremetalServerOptionOutput)
}

func (i GetBaremetalServerOptionArgs) ToOutput(ctx context.Context) pulumix.Output[GetBaremetalServerOption] {
	return pulumix.Output[GetBaremetalServerOption]{
		OutputState: i.ToGetBaremetalServerOptionOutputWithContext(ctx).OutputState,
	}
}

// GetBaremetalServerOptionArrayInput is an input type that accepts GetBaremetalServerOptionArray and GetBaremetalServerOptionArrayOutput values.
// You can construct a concrete instance of `GetBaremetalServerOptionArrayInput` via:
//
//	GetBaremetalServerOptionArray{ GetBaremetalServerOptionArgs{...} }
type GetBaremetalServerOptionArrayInput interface {
	pulumi.Input

	ToGetBaremetalServerOptionArrayOutput() GetBaremetalServerOptionArrayOutput
	ToGetBaremetalServerOptionArrayOutputWithContext(context.Context) GetBaremetalServerOptionArrayOutput
}

type GetBaremetalServerOptionArray []GetBaremetalServerOptionInput

func (GetBaremetalServerOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBaremetalServerOption)(nil)).Elem()
}

func (i GetBaremetalServerOptionArray) ToGetBaremetalServerOptionArrayOutput() GetBaremetalServerOptionArrayOutput {
	return i.ToGetBaremetalServerOptionArrayOutputWithContext(context.Background())
}

func (i GetBaremetalServerOptionArray) ToGetBaremetalServerOptionArrayOutputWithContext(ctx context.Context) GetBaremetalServerOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBaremetalServerOptionArrayOutput)
}

func (i GetBaremetalServerOptionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBaremetalServerOption] {
	return pulumix.Output[[]GetBaremetalServerOption]{
		OutputState: i.ToGetBaremetalServerOptionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBaremetalServerOptionOutput struct{ *pulumi.OutputState }

func (GetBaremetalServerOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBaremetalServerOption)(nil)).Elem()
}

func (o GetBaremetalServerOptionOutput) ToGetBaremetalServerOptionOutput() GetBaremetalServerOptionOutput {
	return o
}

func (o GetBaremetalServerOptionOutput) ToGetBaremetalServerOptionOutputWithContext(ctx context.Context) GetBaremetalServerOptionOutput {
	return o
}

func (o GetBaremetalServerOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetBaremetalServerOption] {
	return pulumix.Output[GetBaremetalServerOption]{
		OutputState: o.OutputState,
	}
}

func (o GetBaremetalServerOptionOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerOption) string { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The ID of the server.
func (o GetBaremetalServerOptionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerOption) string { return v.Id }).(pulumi.StringOutput)
}

// The server name. Only one of `name` and `serverId` should be specified.
func (o GetBaremetalServerOptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerOption) string { return v.Name }).(pulumi.StringOutput)
}

type GetBaremetalServerOptionArrayOutput struct{ *pulumi.OutputState }

func (GetBaremetalServerOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBaremetalServerOption)(nil)).Elem()
}

func (o GetBaremetalServerOptionArrayOutput) ToGetBaremetalServerOptionArrayOutput() GetBaremetalServerOptionArrayOutput {
	return o
}

func (o GetBaremetalServerOptionArrayOutput) ToGetBaremetalServerOptionArrayOutputWithContext(ctx context.Context) GetBaremetalServerOptionArrayOutput {
	return o
}

func (o GetBaremetalServerOptionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBaremetalServerOption] {
	return pulumix.Output[[]GetBaremetalServerOption]{
		OutputState: o.OutputState,
	}
}

func (o GetBaremetalServerOptionArrayOutput) Index(i pulumi.IntInput) GetBaremetalServerOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBaremetalServerOption {
		return vs[0].([]GetBaremetalServerOption)[vs[1].(int)]
	}).(GetBaremetalServerOptionOutput)
}

type GetBaremetalServerPrivateNetwork struct {
	CreatedAt string `pulumi:"createdAt"`
	// The ID of the server.
	Id        string `pulumi:"id"`
	Status    string `pulumi:"status"`
	UpdatedAt string `pulumi:"updatedAt"`
	Vlan      int    `pulumi:"vlan"`
}

// GetBaremetalServerPrivateNetworkInput is an input type that accepts GetBaremetalServerPrivateNetworkArgs and GetBaremetalServerPrivateNetworkOutput values.
// You can construct a concrete instance of `GetBaremetalServerPrivateNetworkInput` via:
//
//	GetBaremetalServerPrivateNetworkArgs{...}
type GetBaremetalServerPrivateNetworkInput interface {
	pulumi.Input

	ToGetBaremetalServerPrivateNetworkOutput() GetBaremetalServerPrivateNetworkOutput
	ToGetBaremetalServerPrivateNetworkOutputWithContext(context.Context) GetBaremetalServerPrivateNetworkOutput
}

type GetBaremetalServerPrivateNetworkArgs struct {
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The ID of the server.
	Id        pulumi.StringInput `pulumi:"id"`
	Status    pulumi.StringInput `pulumi:"status"`
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	Vlan      pulumi.IntInput    `pulumi:"vlan"`
}

func (GetBaremetalServerPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBaremetalServerPrivateNetwork)(nil)).Elem()
}

func (i GetBaremetalServerPrivateNetworkArgs) ToGetBaremetalServerPrivateNetworkOutput() GetBaremetalServerPrivateNetworkOutput {
	return i.ToGetBaremetalServerPrivateNetworkOutputWithContext(context.Background())
}

func (i GetBaremetalServerPrivateNetworkArgs) ToGetBaremetalServerPrivateNetworkOutputWithContext(ctx context.Context) GetBaremetalServerPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBaremetalServerPrivateNetworkOutput)
}

func (i GetBaremetalServerPrivateNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetBaremetalServerPrivateNetwork] {
	return pulumix.Output[GetBaremetalServerPrivateNetwork]{
		OutputState: i.ToGetBaremetalServerPrivateNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetBaremetalServerPrivateNetworkArrayInput is an input type that accepts GetBaremetalServerPrivateNetworkArray and GetBaremetalServerPrivateNetworkArrayOutput values.
// You can construct a concrete instance of `GetBaremetalServerPrivateNetworkArrayInput` via:
//
//	GetBaremetalServerPrivateNetworkArray{ GetBaremetalServerPrivateNetworkArgs{...} }
type GetBaremetalServerPrivateNetworkArrayInput interface {
	pulumi.Input

	ToGetBaremetalServerPrivateNetworkArrayOutput() GetBaremetalServerPrivateNetworkArrayOutput
	ToGetBaremetalServerPrivateNetworkArrayOutputWithContext(context.Context) GetBaremetalServerPrivateNetworkArrayOutput
}

type GetBaremetalServerPrivateNetworkArray []GetBaremetalServerPrivateNetworkInput

func (GetBaremetalServerPrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBaremetalServerPrivateNetwork)(nil)).Elem()
}

func (i GetBaremetalServerPrivateNetworkArray) ToGetBaremetalServerPrivateNetworkArrayOutput() GetBaremetalServerPrivateNetworkArrayOutput {
	return i.ToGetBaremetalServerPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i GetBaremetalServerPrivateNetworkArray) ToGetBaremetalServerPrivateNetworkArrayOutputWithContext(ctx context.Context) GetBaremetalServerPrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBaremetalServerPrivateNetworkArrayOutput)
}

func (i GetBaremetalServerPrivateNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBaremetalServerPrivateNetwork] {
	return pulumix.Output[[]GetBaremetalServerPrivateNetwork]{
		OutputState: i.ToGetBaremetalServerPrivateNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBaremetalServerPrivateNetworkOutput struct{ *pulumi.OutputState }

func (GetBaremetalServerPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBaremetalServerPrivateNetwork)(nil)).Elem()
}

func (o GetBaremetalServerPrivateNetworkOutput) ToGetBaremetalServerPrivateNetworkOutput() GetBaremetalServerPrivateNetworkOutput {
	return o
}

func (o GetBaremetalServerPrivateNetworkOutput) ToGetBaremetalServerPrivateNetworkOutputWithContext(ctx context.Context) GetBaremetalServerPrivateNetworkOutput {
	return o
}

func (o GetBaremetalServerPrivateNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetBaremetalServerPrivateNetwork] {
	return pulumix.Output[GetBaremetalServerPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetBaremetalServerPrivateNetworkOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerPrivateNetwork) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the server.
func (o GetBaremetalServerPrivateNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerPrivateNetwork) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetBaremetalServerPrivateNetworkOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerPrivateNetwork) string { return v.Status }).(pulumi.StringOutput)
}

func (o GetBaremetalServerPrivateNetworkOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBaremetalServerPrivateNetwork) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o GetBaremetalServerPrivateNetworkOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v GetBaremetalServerPrivateNetwork) int { return v.Vlan }).(pulumi.IntOutput)
}

type GetBaremetalServerPrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetBaremetalServerPrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBaremetalServerPrivateNetwork)(nil)).Elem()
}

func (o GetBaremetalServerPrivateNetworkArrayOutput) ToGetBaremetalServerPrivateNetworkArrayOutput() GetBaremetalServerPrivateNetworkArrayOutput {
	return o
}

func (o GetBaremetalServerPrivateNetworkArrayOutput) ToGetBaremetalServerPrivateNetworkArrayOutputWithContext(ctx context.Context) GetBaremetalServerPrivateNetworkArrayOutput {
	return o
}

func (o GetBaremetalServerPrivateNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBaremetalServerPrivateNetwork] {
	return pulumix.Output[[]GetBaremetalServerPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetBaremetalServerPrivateNetworkArrayOutput) Index(i pulumi.IntInput) GetBaremetalServerPrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBaremetalServerPrivateNetwork {
		return vs[0].([]GetBaremetalServerPrivateNetwork)[vs[1].(int)]
	}).(GetBaremetalServerPrivateNetworkOutput)
}

type GetCockpitEndpoint struct {
	// The alertmanager URL
	AlertmanagerUrl string `pulumi:"alertmanagerUrl"`
	// The grafana URL
	GrafanaUrl string `pulumi:"grafanaUrl"`
	// The logs URL
	LogsUrl string `pulumi:"logsUrl"`
	// The metrics URL
	MetricsUrl string `pulumi:"metricsUrl"`
}

// GetCockpitEndpointInput is an input type that accepts GetCockpitEndpointArgs and GetCockpitEndpointOutput values.
// You can construct a concrete instance of `GetCockpitEndpointInput` via:
//
//	GetCockpitEndpointArgs{...}
type GetCockpitEndpointInput interface {
	pulumi.Input

	ToGetCockpitEndpointOutput() GetCockpitEndpointOutput
	ToGetCockpitEndpointOutputWithContext(context.Context) GetCockpitEndpointOutput
}

type GetCockpitEndpointArgs struct {
	// The alertmanager URL
	AlertmanagerUrl pulumi.StringInput `pulumi:"alertmanagerUrl"`
	// The grafana URL
	GrafanaUrl pulumi.StringInput `pulumi:"grafanaUrl"`
	// The logs URL
	LogsUrl pulumi.StringInput `pulumi:"logsUrl"`
	// The metrics URL
	MetricsUrl pulumi.StringInput `pulumi:"metricsUrl"`
}

func (GetCockpitEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCockpitEndpoint)(nil)).Elem()
}

func (i GetCockpitEndpointArgs) ToGetCockpitEndpointOutput() GetCockpitEndpointOutput {
	return i.ToGetCockpitEndpointOutputWithContext(context.Background())
}

func (i GetCockpitEndpointArgs) ToGetCockpitEndpointOutputWithContext(ctx context.Context) GetCockpitEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCockpitEndpointOutput)
}

func (i GetCockpitEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[GetCockpitEndpoint] {
	return pulumix.Output[GetCockpitEndpoint]{
		OutputState: i.ToGetCockpitEndpointOutputWithContext(ctx).OutputState,
	}
}

// GetCockpitEndpointArrayInput is an input type that accepts GetCockpitEndpointArray and GetCockpitEndpointArrayOutput values.
// You can construct a concrete instance of `GetCockpitEndpointArrayInput` via:
//
//	GetCockpitEndpointArray{ GetCockpitEndpointArgs{...} }
type GetCockpitEndpointArrayInput interface {
	pulumi.Input

	ToGetCockpitEndpointArrayOutput() GetCockpitEndpointArrayOutput
	ToGetCockpitEndpointArrayOutputWithContext(context.Context) GetCockpitEndpointArrayOutput
}

type GetCockpitEndpointArray []GetCockpitEndpointInput

func (GetCockpitEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCockpitEndpoint)(nil)).Elem()
}

func (i GetCockpitEndpointArray) ToGetCockpitEndpointArrayOutput() GetCockpitEndpointArrayOutput {
	return i.ToGetCockpitEndpointArrayOutputWithContext(context.Background())
}

func (i GetCockpitEndpointArray) ToGetCockpitEndpointArrayOutputWithContext(ctx context.Context) GetCockpitEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCockpitEndpointArrayOutput)
}

func (i GetCockpitEndpointArray) ToOutput(ctx context.Context) pulumix.Output[[]GetCockpitEndpoint] {
	return pulumix.Output[[]GetCockpitEndpoint]{
		OutputState: i.ToGetCockpitEndpointArrayOutputWithContext(ctx).OutputState,
	}
}

type GetCockpitEndpointOutput struct{ *pulumi.OutputState }

func (GetCockpitEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCockpitEndpoint)(nil)).Elem()
}

func (o GetCockpitEndpointOutput) ToGetCockpitEndpointOutput() GetCockpitEndpointOutput {
	return o
}

func (o GetCockpitEndpointOutput) ToGetCockpitEndpointOutputWithContext(ctx context.Context) GetCockpitEndpointOutput {
	return o
}

func (o GetCockpitEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[GetCockpitEndpoint] {
	return pulumix.Output[GetCockpitEndpoint]{
		OutputState: o.OutputState,
	}
}

// The alertmanager URL
func (o GetCockpitEndpointOutput) AlertmanagerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCockpitEndpoint) string { return v.AlertmanagerUrl }).(pulumi.StringOutput)
}

// The grafana URL
func (o GetCockpitEndpointOutput) GrafanaUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCockpitEndpoint) string { return v.GrafanaUrl }).(pulumi.StringOutput)
}

// The logs URL
func (o GetCockpitEndpointOutput) LogsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCockpitEndpoint) string { return v.LogsUrl }).(pulumi.StringOutput)
}

// The metrics URL
func (o GetCockpitEndpointOutput) MetricsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCockpitEndpoint) string { return v.MetricsUrl }).(pulumi.StringOutput)
}

type GetCockpitEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetCockpitEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCockpitEndpoint)(nil)).Elem()
}

func (o GetCockpitEndpointArrayOutput) ToGetCockpitEndpointArrayOutput() GetCockpitEndpointArrayOutput {
	return o
}

func (o GetCockpitEndpointArrayOutput) ToGetCockpitEndpointArrayOutputWithContext(ctx context.Context) GetCockpitEndpointArrayOutput {
	return o
}

func (o GetCockpitEndpointArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetCockpitEndpoint] {
	return pulumix.Output[[]GetCockpitEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o GetCockpitEndpointArrayOutput) Index(i pulumi.IntInput) GetCockpitEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCockpitEndpoint {
		return vs[0].([]GetCockpitEndpoint)[vs[1].(int)]
	}).(GetCockpitEndpointOutput)
}

type GetDomainRecordGeoIp struct {
	Matches []GetDomainRecordGeoIpMatch `pulumi:"matches"`
}

// GetDomainRecordGeoIpInput is an input type that accepts GetDomainRecordGeoIpArgs and GetDomainRecordGeoIpOutput values.
// You can construct a concrete instance of `GetDomainRecordGeoIpInput` via:
//
//	GetDomainRecordGeoIpArgs{...}
type GetDomainRecordGeoIpInput interface {
	pulumi.Input

	ToGetDomainRecordGeoIpOutput() GetDomainRecordGeoIpOutput
	ToGetDomainRecordGeoIpOutputWithContext(context.Context) GetDomainRecordGeoIpOutput
}

type GetDomainRecordGeoIpArgs struct {
	Matches GetDomainRecordGeoIpMatchArrayInput `pulumi:"matches"`
}

func (GetDomainRecordGeoIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainRecordGeoIp)(nil)).Elem()
}

func (i GetDomainRecordGeoIpArgs) ToGetDomainRecordGeoIpOutput() GetDomainRecordGeoIpOutput {
	return i.ToGetDomainRecordGeoIpOutputWithContext(context.Background())
}

func (i GetDomainRecordGeoIpArgs) ToGetDomainRecordGeoIpOutputWithContext(ctx context.Context) GetDomainRecordGeoIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainRecordGeoIpOutput)
}

func (i GetDomainRecordGeoIpArgs) ToOutput(ctx context.Context) pulumix.Output[GetDomainRecordGeoIp] {
	return pulumix.Output[GetDomainRecordGeoIp]{
		OutputState: i.ToGetDomainRecordGeoIpOutputWithContext(ctx).OutputState,
	}
}

// GetDomainRecordGeoIpArrayInput is an input type that accepts GetDomainRecordGeoIpArray and GetDomainRecordGeoIpArrayOutput values.
// You can construct a concrete instance of `GetDomainRecordGeoIpArrayInput` via:
//
//	GetDomainRecordGeoIpArray{ GetDomainRecordGeoIpArgs{...} }
type GetDomainRecordGeoIpArrayInput interface {
	pulumi.Input

	ToGetDomainRecordGeoIpArrayOutput() GetDomainRecordGeoIpArrayOutput
	ToGetDomainRecordGeoIpArrayOutputWithContext(context.Context) GetDomainRecordGeoIpArrayOutput
}

type GetDomainRecordGeoIpArray []GetDomainRecordGeoIpInput

func (GetDomainRecordGeoIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainRecordGeoIp)(nil)).Elem()
}

func (i GetDomainRecordGeoIpArray) ToGetDomainRecordGeoIpArrayOutput() GetDomainRecordGeoIpArrayOutput {
	return i.ToGetDomainRecordGeoIpArrayOutputWithContext(context.Background())
}

func (i GetDomainRecordGeoIpArray) ToGetDomainRecordGeoIpArrayOutputWithContext(ctx context.Context) GetDomainRecordGeoIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainRecordGeoIpArrayOutput)
}

func (i GetDomainRecordGeoIpArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainRecordGeoIp] {
	return pulumix.Output[[]GetDomainRecordGeoIp]{
		OutputState: i.ToGetDomainRecordGeoIpArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDomainRecordGeoIpOutput struct{ *pulumi.OutputState }

func (GetDomainRecordGeoIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainRecordGeoIp)(nil)).Elem()
}

func (o GetDomainRecordGeoIpOutput) ToGetDomainRecordGeoIpOutput() GetDomainRecordGeoIpOutput {
	return o
}

func (o GetDomainRecordGeoIpOutput) ToGetDomainRecordGeoIpOutputWithContext(ctx context.Context) GetDomainRecordGeoIpOutput {
	return o
}

func (o GetDomainRecordGeoIpOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainRecordGeoIp] {
	return pulumix.Output[GetDomainRecordGeoIp]{
		OutputState: o.OutputState,
	}
}

func (o GetDomainRecordGeoIpOutput) Matches() GetDomainRecordGeoIpMatchArrayOutput {
	return o.ApplyT(func(v GetDomainRecordGeoIp) []GetDomainRecordGeoIpMatch { return v.Matches }).(GetDomainRecordGeoIpMatchArrayOutput)
}

type GetDomainRecordGeoIpArrayOutput struct{ *pulumi.OutputState }

func (GetDomainRecordGeoIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainRecordGeoIp)(nil)).Elem()
}

func (o GetDomainRecordGeoIpArrayOutput) ToGetDomainRecordGeoIpArrayOutput() GetDomainRecordGeoIpArrayOutput {
	return o
}

func (o GetDomainRecordGeoIpArrayOutput) ToGetDomainRecordGeoIpArrayOutputWithContext(ctx context.Context) GetDomainRecordGeoIpArrayOutput {
	return o
}

func (o GetDomainRecordGeoIpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainRecordGeoIp] {
	return pulumix.Output[[]GetDomainRecordGeoIp]{
		OutputState: o.OutputState,
	}
}

func (o GetDomainRecordGeoIpArrayOutput) Index(i pulumi.IntInput) GetDomainRecordGeoIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainRecordGeoIp {
		return vs[0].([]GetDomainRecordGeoIp)[vs[1].(int)]
	}).(GetDomainRecordGeoIpOutput)
}

type GetDomainRecordGeoIpMatch struct {
	Continents []string `pulumi:"continents"`
	Countries  []string `pulumi:"countries"`
	// The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
	// Cannot be used with `recordId`.
	Data string `pulumi:"data"`
}

// GetDomainRecordGeoIpMatchInput is an input type that accepts GetDomainRecordGeoIpMatchArgs and GetDomainRecordGeoIpMatchOutput values.
// You can construct a concrete instance of `GetDomainRecordGeoIpMatchInput` via:
//
//	GetDomainRecordGeoIpMatchArgs{...}
type GetDomainRecordGeoIpMatchInput interface {
	pulumi.Input

	ToGetDomainRecordGeoIpMatchOutput() GetDomainRecordGeoIpMatchOutput
	ToGetDomainRecordGeoIpMatchOutputWithContext(context.Context) GetDomainRecordGeoIpMatchOutput
}

type GetDomainRecordGeoIpMatchArgs struct {
	Continents pulumi.StringArrayInput `pulumi:"continents"`
	Countries  pulumi.StringArrayInput `pulumi:"countries"`
	// The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
	// Cannot be used with `recordId`.
	Data pulumi.StringInput `pulumi:"data"`
}

func (GetDomainRecordGeoIpMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainRecordGeoIpMatch)(nil)).Elem()
}

func (i GetDomainRecordGeoIpMatchArgs) ToGetDomainRecordGeoIpMatchOutput() GetDomainRecordGeoIpMatchOutput {
	return i.ToGetDomainRecordGeoIpMatchOutputWithContext(context.Background())
}

func (i GetDomainRecordGeoIpMatchArgs) ToGetDomainRecordGeoIpMatchOutputWithContext(ctx context.Context) GetDomainRecordGeoIpMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainRecordGeoIpMatchOutput)
}

func (i GetDomainRecordGeoIpMatchArgs) ToOutput(ctx context.Context) pulumix.Output[GetDomainRecordGeoIpMatch] {
	return pulumix.Output[GetDomainRecordGeoIpMatch]{
		OutputState: i.ToGetDomainRecordGeoIpMatchOutputWithContext(ctx).OutputState,
	}
}

// GetDomainRecordGeoIpMatchArrayInput is an input type that accepts GetDomainRecordGeoIpMatchArray and GetDomainRecordGeoIpMatchArrayOutput values.
// You can construct a concrete instance of `GetDomainRecordGeoIpMatchArrayInput` via:
//
//	GetDomainRecordGeoIpMatchArray{ GetDomainRecordGeoIpMatchArgs{...} }
type GetDomainRecordGeoIpMatchArrayInput interface {
	pulumi.Input

	ToGetDomainRecordGeoIpMatchArrayOutput() GetDomainRecordGeoIpMatchArrayOutput
	ToGetDomainRecordGeoIpMatchArrayOutputWithContext(context.Context) GetDomainRecordGeoIpMatchArrayOutput
}

type GetDomainRecordGeoIpMatchArray []GetDomainRecordGeoIpMatchInput

func (GetDomainRecordGeoIpMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainRecordGeoIpMatch)(nil)).Elem()
}

func (i GetDomainRecordGeoIpMatchArray) ToGetDomainRecordGeoIpMatchArrayOutput() GetDomainRecordGeoIpMatchArrayOutput {
	return i.ToGetDomainRecordGeoIpMatchArrayOutputWithContext(context.Background())
}

func (i GetDomainRecordGeoIpMatchArray) ToGetDomainRecordGeoIpMatchArrayOutputWithContext(ctx context.Context) GetDomainRecordGeoIpMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainRecordGeoIpMatchArrayOutput)
}

func (i GetDomainRecordGeoIpMatchArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainRecordGeoIpMatch] {
	return pulumix.Output[[]GetDomainRecordGeoIpMatch]{
		OutputState: i.ToGetDomainRecordGeoIpMatchArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDomainRecordGeoIpMatchOutput struct{ *pulumi.OutputState }

func (GetDomainRecordGeoIpMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainRecordGeoIpMatch)(nil)).Elem()
}

func (o GetDomainRecordGeoIpMatchOutput) ToGetDomainRecordGeoIpMatchOutput() GetDomainRecordGeoIpMatchOutput {
	return o
}

func (o GetDomainRecordGeoIpMatchOutput) ToGetDomainRecordGeoIpMatchOutputWithContext(ctx context.Context) GetDomainRecordGeoIpMatchOutput {
	return o
}

func (o GetDomainRecordGeoIpMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainRecordGeoIpMatch] {
	return pulumix.Output[GetDomainRecordGeoIpMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetDomainRecordGeoIpMatchOutput) Continents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainRecordGeoIpMatch) []string { return v.Continents }).(pulumi.StringArrayOutput)
}

func (o GetDomainRecordGeoIpMatchOutput) Countries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainRecordGeoIpMatch) []string { return v.Countries }).(pulumi.StringArrayOutput)
}

// The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
// Cannot be used with `recordId`.
func (o GetDomainRecordGeoIpMatchOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainRecordGeoIpMatch) string { return v.Data }).(pulumi.StringOutput)
}

type GetDomainRecordGeoIpMatchArrayOutput struct{ *pulumi.OutputState }

func (GetDomainRecordGeoIpMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainRecordGeoIpMatch)(nil)).Elem()
}

func (o GetDomainRecordGeoIpMatchArrayOutput) ToGetDomainRecordGeoIpMatchArrayOutput() GetDomainRecordGeoIpMatchArrayOutput {
	return o
}

func (o GetDomainRecordGeoIpMatchArrayOutput) ToGetDomainRecordGeoIpMatchArrayOutputWithContext(ctx context.Context) GetDomainRecordGeoIpMatchArrayOutput {
	return o
}

func (o GetDomainRecordGeoIpMatchArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainRecordGeoIpMatch] {
	return pulumix.Output[[]GetDomainRecordGeoIpMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetDomainRecordGeoIpMatchArrayOutput) Index(i pulumi.IntInput) GetDomainRecordGeoIpMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainRecordGeoIpMatch {
		return vs[0].([]GetDomainRecordGeoIpMatch)[vs[1].(int)]
	}).(GetDomainRecordGeoIpMatchOutput)
}

type GetDomainRecordHttpService struct {
	Ips         []string `pulumi:"ips"`
	MustContain string   `pulumi:"mustContain"`
	Strategy    string   `pulumi:"strategy"`
	Url         string   `pulumi:"url"`
	UserAgent   string   `pulumi:"userAgent"`
}

// GetDomainRecordHttpServiceInput is an input type that accepts GetDomainRecordHttpServiceArgs and GetDomainRecordHttpServiceOutput values.
// You can construct a concrete instance of `GetDomainRecordHttpServiceInput` via:
//
//	GetDomainRecordHttpServiceArgs{...}
type GetDomainRecordHttpServiceInput interface {
	pulumi.Input

	ToGetDomainRecordHttpServiceOutput() GetDomainRecordHttpServiceOutput
	ToGetDomainRecordHttpServiceOutputWithContext(context.Context) GetDomainRecordHttpServiceOutput
}

type GetDomainRecordHttpServiceArgs struct {
	Ips         pulumi.StringArrayInput `pulumi:"ips"`
	MustContain pulumi.StringInput      `pulumi:"mustContain"`
	Strategy    pulumi.StringInput      `pulumi:"strategy"`
	Url         pulumi.StringInput      `pulumi:"url"`
	UserAgent   pulumi.StringInput      `pulumi:"userAgent"`
}

func (GetDomainRecordHttpServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainRecordHttpService)(nil)).Elem()
}

func (i GetDomainRecordHttpServiceArgs) ToGetDomainRecordHttpServiceOutput() GetDomainRecordHttpServiceOutput {
	return i.ToGetDomainRecordHttpServiceOutputWithContext(context.Background())
}

func (i GetDomainRecordHttpServiceArgs) ToGetDomainRecordHttpServiceOutputWithContext(ctx context.Context) GetDomainRecordHttpServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainRecordHttpServiceOutput)
}

func (i GetDomainRecordHttpServiceArgs) ToOutput(ctx context.Context) pulumix.Output[GetDomainRecordHttpService] {
	return pulumix.Output[GetDomainRecordHttpService]{
		OutputState: i.ToGetDomainRecordHttpServiceOutputWithContext(ctx).OutputState,
	}
}

// GetDomainRecordHttpServiceArrayInput is an input type that accepts GetDomainRecordHttpServiceArray and GetDomainRecordHttpServiceArrayOutput values.
// You can construct a concrete instance of `GetDomainRecordHttpServiceArrayInput` via:
//
//	GetDomainRecordHttpServiceArray{ GetDomainRecordHttpServiceArgs{...} }
type GetDomainRecordHttpServiceArrayInput interface {
	pulumi.Input

	ToGetDomainRecordHttpServiceArrayOutput() GetDomainRecordHttpServiceArrayOutput
	ToGetDomainRecordHttpServiceArrayOutputWithContext(context.Context) GetDomainRecordHttpServiceArrayOutput
}

type GetDomainRecordHttpServiceArray []GetDomainRecordHttpServiceInput

func (GetDomainRecordHttpServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainRecordHttpService)(nil)).Elem()
}

func (i GetDomainRecordHttpServiceArray) ToGetDomainRecordHttpServiceArrayOutput() GetDomainRecordHttpServiceArrayOutput {
	return i.ToGetDomainRecordHttpServiceArrayOutputWithContext(context.Background())
}

func (i GetDomainRecordHttpServiceArray) ToGetDomainRecordHttpServiceArrayOutputWithContext(ctx context.Context) GetDomainRecordHttpServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainRecordHttpServiceArrayOutput)
}

func (i GetDomainRecordHttpServiceArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainRecordHttpService] {
	return pulumix.Output[[]GetDomainRecordHttpService]{
		OutputState: i.ToGetDomainRecordHttpServiceArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDomainRecordHttpServiceOutput struct{ *pulumi.OutputState }

func (GetDomainRecordHttpServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainRecordHttpService)(nil)).Elem()
}

func (o GetDomainRecordHttpServiceOutput) ToGetDomainRecordHttpServiceOutput() GetDomainRecordHttpServiceOutput {
	return o
}

func (o GetDomainRecordHttpServiceOutput) ToGetDomainRecordHttpServiceOutputWithContext(ctx context.Context) GetDomainRecordHttpServiceOutput {
	return o
}

func (o GetDomainRecordHttpServiceOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainRecordHttpService] {
	return pulumix.Output[GetDomainRecordHttpService]{
		OutputState: o.OutputState,
	}
}

func (o GetDomainRecordHttpServiceOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainRecordHttpService) []string { return v.Ips }).(pulumi.StringArrayOutput)
}

func (o GetDomainRecordHttpServiceOutput) MustContain() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainRecordHttpService) string { return v.MustContain }).(pulumi.StringOutput)
}

func (o GetDomainRecordHttpServiceOutput) Strategy() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainRecordHttpService) string { return v.Strategy }).(pulumi.StringOutput)
}

func (o GetDomainRecordHttpServiceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainRecordHttpService) string { return v.Url }).(pulumi.StringOutput)
}

func (o GetDomainRecordHttpServiceOutput) UserAgent() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainRecordHttpService) string { return v.UserAgent }).(pulumi.StringOutput)
}

type GetDomainRecordHttpServiceArrayOutput struct{ *pulumi.OutputState }

func (GetDomainRecordHttpServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainRecordHttpService)(nil)).Elem()
}

func (o GetDomainRecordHttpServiceArrayOutput) ToGetDomainRecordHttpServiceArrayOutput() GetDomainRecordHttpServiceArrayOutput {
	return o
}

func (o GetDomainRecordHttpServiceArrayOutput) ToGetDomainRecordHttpServiceArrayOutputWithContext(ctx context.Context) GetDomainRecordHttpServiceArrayOutput {
	return o
}

func (o GetDomainRecordHttpServiceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainRecordHttpService] {
	return pulumix.Output[[]GetDomainRecordHttpService]{
		OutputState: o.OutputState,
	}
}

func (o GetDomainRecordHttpServiceArrayOutput) Index(i pulumi.IntInput) GetDomainRecordHttpServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainRecordHttpService {
		return vs[0].([]GetDomainRecordHttpService)[vs[1].(int)]
	}).(GetDomainRecordHttpServiceOutput)
}

type GetDomainRecordView struct {
	// The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
	// Cannot be used with `recordId`.
	Data   string `pulumi:"data"`
	Subnet string `pulumi:"subnet"`
}

// GetDomainRecordViewInput is an input type that accepts GetDomainRecordViewArgs and GetDomainRecordViewOutput values.
// You can construct a concrete instance of `GetDomainRecordViewInput` via:
//
//	GetDomainRecordViewArgs{...}
type GetDomainRecordViewInput interface {
	pulumi.Input

	ToGetDomainRecordViewOutput() GetDomainRecordViewOutput
	ToGetDomainRecordViewOutputWithContext(context.Context) GetDomainRecordViewOutput
}

type GetDomainRecordViewArgs struct {
	// The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
	// Cannot be used with `recordId`.
	Data   pulumi.StringInput `pulumi:"data"`
	Subnet pulumi.StringInput `pulumi:"subnet"`
}

func (GetDomainRecordViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainRecordView)(nil)).Elem()
}

func (i GetDomainRecordViewArgs) ToGetDomainRecordViewOutput() GetDomainRecordViewOutput {
	return i.ToGetDomainRecordViewOutputWithContext(context.Background())
}

func (i GetDomainRecordViewArgs) ToGetDomainRecordViewOutputWithContext(ctx context.Context) GetDomainRecordViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainRecordViewOutput)
}

func (i GetDomainRecordViewArgs) ToOutput(ctx context.Context) pulumix.Output[GetDomainRecordView] {
	return pulumix.Output[GetDomainRecordView]{
		OutputState: i.ToGetDomainRecordViewOutputWithContext(ctx).OutputState,
	}
}

// GetDomainRecordViewArrayInput is an input type that accepts GetDomainRecordViewArray and GetDomainRecordViewArrayOutput values.
// You can construct a concrete instance of `GetDomainRecordViewArrayInput` via:
//
//	GetDomainRecordViewArray{ GetDomainRecordViewArgs{...} }
type GetDomainRecordViewArrayInput interface {
	pulumi.Input

	ToGetDomainRecordViewArrayOutput() GetDomainRecordViewArrayOutput
	ToGetDomainRecordViewArrayOutputWithContext(context.Context) GetDomainRecordViewArrayOutput
}

type GetDomainRecordViewArray []GetDomainRecordViewInput

func (GetDomainRecordViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainRecordView)(nil)).Elem()
}

func (i GetDomainRecordViewArray) ToGetDomainRecordViewArrayOutput() GetDomainRecordViewArrayOutput {
	return i.ToGetDomainRecordViewArrayOutputWithContext(context.Background())
}

func (i GetDomainRecordViewArray) ToGetDomainRecordViewArrayOutputWithContext(ctx context.Context) GetDomainRecordViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainRecordViewArrayOutput)
}

func (i GetDomainRecordViewArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainRecordView] {
	return pulumix.Output[[]GetDomainRecordView]{
		OutputState: i.ToGetDomainRecordViewArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDomainRecordViewOutput struct{ *pulumi.OutputState }

func (GetDomainRecordViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainRecordView)(nil)).Elem()
}

func (o GetDomainRecordViewOutput) ToGetDomainRecordViewOutput() GetDomainRecordViewOutput {
	return o
}

func (o GetDomainRecordViewOutput) ToGetDomainRecordViewOutputWithContext(ctx context.Context) GetDomainRecordViewOutput {
	return o
}

func (o GetDomainRecordViewOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainRecordView] {
	return pulumix.Output[GetDomainRecordView]{
		OutputState: o.OutputState,
	}
}

// The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
// Cannot be used with `recordId`.
func (o GetDomainRecordViewOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainRecordView) string { return v.Data }).(pulumi.StringOutput)
}

func (o GetDomainRecordViewOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainRecordView) string { return v.Subnet }).(pulumi.StringOutput)
}

type GetDomainRecordViewArrayOutput struct{ *pulumi.OutputState }

func (GetDomainRecordViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainRecordView)(nil)).Elem()
}

func (o GetDomainRecordViewArrayOutput) ToGetDomainRecordViewArrayOutput() GetDomainRecordViewArrayOutput {
	return o
}

func (o GetDomainRecordViewArrayOutput) ToGetDomainRecordViewArrayOutputWithContext(ctx context.Context) GetDomainRecordViewArrayOutput {
	return o
}

func (o GetDomainRecordViewArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainRecordView] {
	return pulumix.Output[[]GetDomainRecordView]{
		OutputState: o.OutputState,
	}
}

func (o GetDomainRecordViewArrayOutput) Index(i pulumi.IntInput) GetDomainRecordViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainRecordView {
		return vs[0].([]GetDomainRecordView)[vs[1].(int)]
	}).(GetDomainRecordViewOutput)
}

type GetDomainRecordWeighted struct {
	Ip     string `pulumi:"ip"`
	Weight int    `pulumi:"weight"`
}

// GetDomainRecordWeightedInput is an input type that accepts GetDomainRecordWeightedArgs and GetDomainRecordWeightedOutput values.
// You can construct a concrete instance of `GetDomainRecordWeightedInput` via:
//
//	GetDomainRecordWeightedArgs{...}
type GetDomainRecordWeightedInput interface {
	pulumi.Input

	ToGetDomainRecordWeightedOutput() GetDomainRecordWeightedOutput
	ToGetDomainRecordWeightedOutputWithContext(context.Context) GetDomainRecordWeightedOutput
}

type GetDomainRecordWeightedArgs struct {
	Ip     pulumi.StringInput `pulumi:"ip"`
	Weight pulumi.IntInput    `pulumi:"weight"`
}

func (GetDomainRecordWeightedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainRecordWeighted)(nil)).Elem()
}

func (i GetDomainRecordWeightedArgs) ToGetDomainRecordWeightedOutput() GetDomainRecordWeightedOutput {
	return i.ToGetDomainRecordWeightedOutputWithContext(context.Background())
}

func (i GetDomainRecordWeightedArgs) ToGetDomainRecordWeightedOutputWithContext(ctx context.Context) GetDomainRecordWeightedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainRecordWeightedOutput)
}

func (i GetDomainRecordWeightedArgs) ToOutput(ctx context.Context) pulumix.Output[GetDomainRecordWeighted] {
	return pulumix.Output[GetDomainRecordWeighted]{
		OutputState: i.ToGetDomainRecordWeightedOutputWithContext(ctx).OutputState,
	}
}

// GetDomainRecordWeightedArrayInput is an input type that accepts GetDomainRecordWeightedArray and GetDomainRecordWeightedArrayOutput values.
// You can construct a concrete instance of `GetDomainRecordWeightedArrayInput` via:
//
//	GetDomainRecordWeightedArray{ GetDomainRecordWeightedArgs{...} }
type GetDomainRecordWeightedArrayInput interface {
	pulumi.Input

	ToGetDomainRecordWeightedArrayOutput() GetDomainRecordWeightedArrayOutput
	ToGetDomainRecordWeightedArrayOutputWithContext(context.Context) GetDomainRecordWeightedArrayOutput
}

type GetDomainRecordWeightedArray []GetDomainRecordWeightedInput

func (GetDomainRecordWeightedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainRecordWeighted)(nil)).Elem()
}

func (i GetDomainRecordWeightedArray) ToGetDomainRecordWeightedArrayOutput() GetDomainRecordWeightedArrayOutput {
	return i.ToGetDomainRecordWeightedArrayOutputWithContext(context.Background())
}

func (i GetDomainRecordWeightedArray) ToGetDomainRecordWeightedArrayOutputWithContext(ctx context.Context) GetDomainRecordWeightedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainRecordWeightedArrayOutput)
}

func (i GetDomainRecordWeightedArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainRecordWeighted] {
	return pulumix.Output[[]GetDomainRecordWeighted]{
		OutputState: i.ToGetDomainRecordWeightedArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDomainRecordWeightedOutput struct{ *pulumi.OutputState }

func (GetDomainRecordWeightedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainRecordWeighted)(nil)).Elem()
}

func (o GetDomainRecordWeightedOutput) ToGetDomainRecordWeightedOutput() GetDomainRecordWeightedOutput {
	return o
}

func (o GetDomainRecordWeightedOutput) ToGetDomainRecordWeightedOutputWithContext(ctx context.Context) GetDomainRecordWeightedOutput {
	return o
}

func (o GetDomainRecordWeightedOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainRecordWeighted] {
	return pulumix.Output[GetDomainRecordWeighted]{
		OutputState: o.OutputState,
	}
}

func (o GetDomainRecordWeightedOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainRecordWeighted) string { return v.Ip }).(pulumi.StringOutput)
}

func (o GetDomainRecordWeightedOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainRecordWeighted) int { return v.Weight }).(pulumi.IntOutput)
}

type GetDomainRecordWeightedArrayOutput struct{ *pulumi.OutputState }

func (GetDomainRecordWeightedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainRecordWeighted)(nil)).Elem()
}

func (o GetDomainRecordWeightedArrayOutput) ToGetDomainRecordWeightedArrayOutput() GetDomainRecordWeightedArrayOutput {
	return o
}

func (o GetDomainRecordWeightedArrayOutput) ToGetDomainRecordWeightedArrayOutputWithContext(ctx context.Context) GetDomainRecordWeightedArrayOutput {
	return o
}

func (o GetDomainRecordWeightedArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainRecordWeighted] {
	return pulumix.Output[[]GetDomainRecordWeighted]{
		OutputState: o.OutputState,
	}
}

func (o GetDomainRecordWeightedArrayOutput) Index(i pulumi.IntInput) GetDomainRecordWeightedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainRecordWeighted {
		return vs[0].([]GetDomainRecordWeighted)[vs[1].(int)]
	}).(GetDomainRecordWeightedOutput)
}

type GetFlexibleIpsIp struct {
	// The date on which the flexible IP was created (RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// The description of the flexible IP.
	Description string `pulumi:"description"`
	// The MAC address ID.
	Id        string `pulumi:"id"`
	IpAddress string `pulumi:"ipAddress"`
	// The MAC address of the Virtual MAC.
	MacAddresses []GetFlexibleIpsIpMacAddress `pulumi:"macAddresses"`
	// (Defaults to provider `organizationId`) The ID of the organization the IP is in.
	OrganizationId string `pulumi:"organizationId"`
	// (Defaults to provider `projectId`) The ID of the project the IP is in.
	ProjectId string `pulumi:"projectId"`
	// The reverse domain associated with this IP.
	Reverse string `pulumi:"reverse"`
	// The status of virtual MAC.
	Status string `pulumi:"status"`
	// List of tags used as filter. IPs with these exact tags are listed.
	Tags []string `pulumi:"tags"`
	// The date on which the flexible IP was last updated (RFC 3339 format).
	UpdatedAt string `pulumi:"updatedAt"`
	// `zone`) The zone in which IPs exist.
	Zone string `pulumi:"zone"`
}

// GetFlexibleIpsIpInput is an input type that accepts GetFlexibleIpsIpArgs and GetFlexibleIpsIpOutput values.
// You can construct a concrete instance of `GetFlexibleIpsIpInput` via:
//
//	GetFlexibleIpsIpArgs{...}
type GetFlexibleIpsIpInput interface {
	pulumi.Input

	ToGetFlexibleIpsIpOutput() GetFlexibleIpsIpOutput
	ToGetFlexibleIpsIpOutputWithContext(context.Context) GetFlexibleIpsIpOutput
}

type GetFlexibleIpsIpArgs struct {
	// The date on which the flexible IP was created (RFC 3339 format).
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the flexible IP.
	Description pulumi.StringInput `pulumi:"description"`
	// The MAC address ID.
	Id        pulumi.StringInput `pulumi:"id"`
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The MAC address of the Virtual MAC.
	MacAddresses GetFlexibleIpsIpMacAddressArrayInput `pulumi:"macAddresses"`
	// (Defaults to provider `organizationId`) The ID of the organization the IP is in.
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
	// (Defaults to provider `projectId`) The ID of the project the IP is in.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The reverse domain associated with this IP.
	Reverse pulumi.StringInput `pulumi:"reverse"`
	// The status of virtual MAC.
	Status pulumi.StringInput `pulumi:"status"`
	// List of tags used as filter. IPs with these exact tags are listed.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The date on which the flexible IP was last updated (RFC 3339 format).
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// `zone`) The zone in which IPs exist.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetFlexibleIpsIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlexibleIpsIp)(nil)).Elem()
}

func (i GetFlexibleIpsIpArgs) ToGetFlexibleIpsIpOutput() GetFlexibleIpsIpOutput {
	return i.ToGetFlexibleIpsIpOutputWithContext(context.Background())
}

func (i GetFlexibleIpsIpArgs) ToGetFlexibleIpsIpOutputWithContext(ctx context.Context) GetFlexibleIpsIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlexibleIpsIpOutput)
}

func (i GetFlexibleIpsIpArgs) ToOutput(ctx context.Context) pulumix.Output[GetFlexibleIpsIp] {
	return pulumix.Output[GetFlexibleIpsIp]{
		OutputState: i.ToGetFlexibleIpsIpOutputWithContext(ctx).OutputState,
	}
}

// GetFlexibleIpsIpArrayInput is an input type that accepts GetFlexibleIpsIpArray and GetFlexibleIpsIpArrayOutput values.
// You can construct a concrete instance of `GetFlexibleIpsIpArrayInput` via:
//
//	GetFlexibleIpsIpArray{ GetFlexibleIpsIpArgs{...} }
type GetFlexibleIpsIpArrayInput interface {
	pulumi.Input

	ToGetFlexibleIpsIpArrayOutput() GetFlexibleIpsIpArrayOutput
	ToGetFlexibleIpsIpArrayOutputWithContext(context.Context) GetFlexibleIpsIpArrayOutput
}

type GetFlexibleIpsIpArray []GetFlexibleIpsIpInput

func (GetFlexibleIpsIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlexibleIpsIp)(nil)).Elem()
}

func (i GetFlexibleIpsIpArray) ToGetFlexibleIpsIpArrayOutput() GetFlexibleIpsIpArrayOutput {
	return i.ToGetFlexibleIpsIpArrayOutputWithContext(context.Background())
}

func (i GetFlexibleIpsIpArray) ToGetFlexibleIpsIpArrayOutputWithContext(ctx context.Context) GetFlexibleIpsIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlexibleIpsIpArrayOutput)
}

func (i GetFlexibleIpsIpArray) ToOutput(ctx context.Context) pulumix.Output[[]GetFlexibleIpsIp] {
	return pulumix.Output[[]GetFlexibleIpsIp]{
		OutputState: i.ToGetFlexibleIpsIpArrayOutputWithContext(ctx).OutputState,
	}
}

type GetFlexibleIpsIpOutput struct{ *pulumi.OutputState }

func (GetFlexibleIpsIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlexibleIpsIp)(nil)).Elem()
}

func (o GetFlexibleIpsIpOutput) ToGetFlexibleIpsIpOutput() GetFlexibleIpsIpOutput {
	return o
}

func (o GetFlexibleIpsIpOutput) ToGetFlexibleIpsIpOutputWithContext(ctx context.Context) GetFlexibleIpsIpOutput {
	return o
}

func (o GetFlexibleIpsIpOutput) ToOutput(ctx context.Context) pulumix.Output[GetFlexibleIpsIp] {
	return pulumix.Output[GetFlexibleIpsIp]{
		OutputState: o.OutputState,
	}
}

// The date on which the flexible IP was created (RFC 3339 format).
func (o GetFlexibleIpsIpOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlexibleIpsIp) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the flexible IP.
func (o GetFlexibleIpsIpOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlexibleIpsIp) string { return v.Description }).(pulumi.StringOutput)
}

// The MAC address ID.
func (o GetFlexibleIpsIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlexibleIpsIp) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetFlexibleIpsIpOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlexibleIpsIp) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The MAC address of the Virtual MAC.
func (o GetFlexibleIpsIpOutput) MacAddresses() GetFlexibleIpsIpMacAddressArrayOutput {
	return o.ApplyT(func(v GetFlexibleIpsIp) []GetFlexibleIpsIpMacAddress { return v.MacAddresses }).(GetFlexibleIpsIpMacAddressArrayOutput)
}

// (Defaults to provider `organizationId`) The ID of the organization the IP is in.
func (o GetFlexibleIpsIpOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlexibleIpsIp) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// (Defaults to provider `projectId`) The ID of the project the IP is in.
func (o GetFlexibleIpsIpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlexibleIpsIp) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The reverse domain associated with this IP.
func (o GetFlexibleIpsIpOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlexibleIpsIp) string { return v.Reverse }).(pulumi.StringOutput)
}

// The status of virtual MAC.
func (o GetFlexibleIpsIpOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlexibleIpsIp) string { return v.Status }).(pulumi.StringOutput)
}

// List of tags used as filter. IPs with these exact tags are listed.
func (o GetFlexibleIpsIpOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFlexibleIpsIp) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The date on which the flexible IP was last updated (RFC 3339 format).
func (o GetFlexibleIpsIpOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlexibleIpsIp) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// `zone`) The zone in which IPs exist.
func (o GetFlexibleIpsIpOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlexibleIpsIp) string { return v.Zone }).(pulumi.StringOutput)
}

type GetFlexibleIpsIpArrayOutput struct{ *pulumi.OutputState }

func (GetFlexibleIpsIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlexibleIpsIp)(nil)).Elem()
}

func (o GetFlexibleIpsIpArrayOutput) ToGetFlexibleIpsIpArrayOutput() GetFlexibleIpsIpArrayOutput {
	return o
}

func (o GetFlexibleIpsIpArrayOutput) ToGetFlexibleIpsIpArrayOutputWithContext(ctx context.Context) GetFlexibleIpsIpArrayOutput {
	return o
}

func (o GetFlexibleIpsIpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetFlexibleIpsIp] {
	return pulumix.Output[[]GetFlexibleIpsIp]{
		OutputState: o.OutputState,
	}
}

func (o GetFlexibleIpsIpArrayOutput) Index(i pulumi.IntInput) GetFlexibleIpsIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFlexibleIpsIp {
		return vs[0].([]GetFlexibleIpsIp)[vs[1].(int)]
	}).(GetFlexibleIpsIpOutput)
}

type GetFlexibleIpsIpMacAddress struct {
	// The date on which the flexible IP was created (RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// The MAC address ID.
	Id string `pulumi:"id"`
	// The MAC address of the Virtual MAC.
	MacAddress string `pulumi:"macAddress"`
	// The type of virtual MAC.
	MacType string `pulumi:"macType"`
	// The status of virtual MAC.
	Status string `pulumi:"status"`
	// The date on which the flexible IP was last updated (RFC 3339 format).
	UpdatedAt string `pulumi:"updatedAt"`
	// `zone`) The zone in which IPs exist.
	Zone string `pulumi:"zone"`
}

// GetFlexibleIpsIpMacAddressInput is an input type that accepts GetFlexibleIpsIpMacAddressArgs and GetFlexibleIpsIpMacAddressOutput values.
// You can construct a concrete instance of `GetFlexibleIpsIpMacAddressInput` via:
//
//	GetFlexibleIpsIpMacAddressArgs{...}
type GetFlexibleIpsIpMacAddressInput interface {
	pulumi.Input

	ToGetFlexibleIpsIpMacAddressOutput() GetFlexibleIpsIpMacAddressOutput
	ToGetFlexibleIpsIpMacAddressOutputWithContext(context.Context) GetFlexibleIpsIpMacAddressOutput
}

type GetFlexibleIpsIpMacAddressArgs struct {
	// The date on which the flexible IP was created (RFC 3339 format).
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The MAC address ID.
	Id pulumi.StringInput `pulumi:"id"`
	// The MAC address of the Virtual MAC.
	MacAddress pulumi.StringInput `pulumi:"macAddress"`
	// The type of virtual MAC.
	MacType pulumi.StringInput `pulumi:"macType"`
	// The status of virtual MAC.
	Status pulumi.StringInput `pulumi:"status"`
	// The date on which the flexible IP was last updated (RFC 3339 format).
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// `zone`) The zone in which IPs exist.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetFlexibleIpsIpMacAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlexibleIpsIpMacAddress)(nil)).Elem()
}

func (i GetFlexibleIpsIpMacAddressArgs) ToGetFlexibleIpsIpMacAddressOutput() GetFlexibleIpsIpMacAddressOutput {
	return i.ToGetFlexibleIpsIpMacAddressOutputWithContext(context.Background())
}

func (i GetFlexibleIpsIpMacAddressArgs) ToGetFlexibleIpsIpMacAddressOutputWithContext(ctx context.Context) GetFlexibleIpsIpMacAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlexibleIpsIpMacAddressOutput)
}

func (i GetFlexibleIpsIpMacAddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetFlexibleIpsIpMacAddress] {
	return pulumix.Output[GetFlexibleIpsIpMacAddress]{
		OutputState: i.ToGetFlexibleIpsIpMacAddressOutputWithContext(ctx).OutputState,
	}
}

// GetFlexibleIpsIpMacAddressArrayInput is an input type that accepts GetFlexibleIpsIpMacAddressArray and GetFlexibleIpsIpMacAddressArrayOutput values.
// You can construct a concrete instance of `GetFlexibleIpsIpMacAddressArrayInput` via:
//
//	GetFlexibleIpsIpMacAddressArray{ GetFlexibleIpsIpMacAddressArgs{...} }
type GetFlexibleIpsIpMacAddressArrayInput interface {
	pulumi.Input

	ToGetFlexibleIpsIpMacAddressArrayOutput() GetFlexibleIpsIpMacAddressArrayOutput
	ToGetFlexibleIpsIpMacAddressArrayOutputWithContext(context.Context) GetFlexibleIpsIpMacAddressArrayOutput
}

type GetFlexibleIpsIpMacAddressArray []GetFlexibleIpsIpMacAddressInput

func (GetFlexibleIpsIpMacAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlexibleIpsIpMacAddress)(nil)).Elem()
}

func (i GetFlexibleIpsIpMacAddressArray) ToGetFlexibleIpsIpMacAddressArrayOutput() GetFlexibleIpsIpMacAddressArrayOutput {
	return i.ToGetFlexibleIpsIpMacAddressArrayOutputWithContext(context.Background())
}

func (i GetFlexibleIpsIpMacAddressArray) ToGetFlexibleIpsIpMacAddressArrayOutputWithContext(ctx context.Context) GetFlexibleIpsIpMacAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlexibleIpsIpMacAddressArrayOutput)
}

func (i GetFlexibleIpsIpMacAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetFlexibleIpsIpMacAddress] {
	return pulumix.Output[[]GetFlexibleIpsIpMacAddress]{
		OutputState: i.ToGetFlexibleIpsIpMacAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetFlexibleIpsIpMacAddressOutput struct{ *pulumi.OutputState }

func (GetFlexibleIpsIpMacAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlexibleIpsIpMacAddress)(nil)).Elem()
}

func (o GetFlexibleIpsIpMacAddressOutput) ToGetFlexibleIpsIpMacAddressOutput() GetFlexibleIpsIpMacAddressOutput {
	return o
}

func (o GetFlexibleIpsIpMacAddressOutput) ToGetFlexibleIpsIpMacAddressOutputWithContext(ctx context.Context) GetFlexibleIpsIpMacAddressOutput {
	return o
}

func (o GetFlexibleIpsIpMacAddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetFlexibleIpsIpMacAddress] {
	return pulumix.Output[GetFlexibleIpsIpMacAddress]{
		OutputState: o.OutputState,
	}
}

// The date on which the flexible IP was created (RFC 3339 format).
func (o GetFlexibleIpsIpMacAddressOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlexibleIpsIpMacAddress) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The MAC address ID.
func (o GetFlexibleIpsIpMacAddressOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlexibleIpsIpMacAddress) string { return v.Id }).(pulumi.StringOutput)
}

// The MAC address of the Virtual MAC.
func (o GetFlexibleIpsIpMacAddressOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlexibleIpsIpMacAddress) string { return v.MacAddress }).(pulumi.StringOutput)
}

// The type of virtual MAC.
func (o GetFlexibleIpsIpMacAddressOutput) MacType() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlexibleIpsIpMacAddress) string { return v.MacType }).(pulumi.StringOutput)
}

// The status of virtual MAC.
func (o GetFlexibleIpsIpMacAddressOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlexibleIpsIpMacAddress) string { return v.Status }).(pulumi.StringOutput)
}

// The date on which the flexible IP was last updated (RFC 3339 format).
func (o GetFlexibleIpsIpMacAddressOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlexibleIpsIpMacAddress) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// `zone`) The zone in which IPs exist.
func (o GetFlexibleIpsIpMacAddressOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlexibleIpsIpMacAddress) string { return v.Zone }).(pulumi.StringOutput)
}

type GetFlexibleIpsIpMacAddressArrayOutput struct{ *pulumi.OutputState }

func (GetFlexibleIpsIpMacAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlexibleIpsIpMacAddress)(nil)).Elem()
}

func (o GetFlexibleIpsIpMacAddressArrayOutput) ToGetFlexibleIpsIpMacAddressArrayOutput() GetFlexibleIpsIpMacAddressArrayOutput {
	return o
}

func (o GetFlexibleIpsIpMacAddressArrayOutput) ToGetFlexibleIpsIpMacAddressArrayOutputWithContext(ctx context.Context) GetFlexibleIpsIpMacAddressArrayOutput {
	return o
}

func (o GetFlexibleIpsIpMacAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetFlexibleIpsIpMacAddress] {
	return pulumix.Output[[]GetFlexibleIpsIpMacAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetFlexibleIpsIpMacAddressArrayOutput) Index(i pulumi.IntInput) GetFlexibleIpsIpMacAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFlexibleIpsIpMacAddress {
		return vs[0].([]GetFlexibleIpsIpMacAddress)[vs[1].(int)]
	}).(GetFlexibleIpsIpMacAddressOutput)
}

type GetInstanceSecurityGroupInboundRule struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action string `pulumi:"action"`
	// The ip this rule apply to.
	Ip string `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule apply to.
	IpRange string `pulumi:"ipRange"`
	// The port this rule apply to. If no port is specified, rule will apply to all port.
	Port      int    `pulumi:"port"`
	PortRange string `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol string `pulumi:"protocol"`
}

// GetInstanceSecurityGroupInboundRuleInput is an input type that accepts GetInstanceSecurityGroupInboundRuleArgs and GetInstanceSecurityGroupInboundRuleOutput values.
// You can construct a concrete instance of `GetInstanceSecurityGroupInboundRuleInput` via:
//
//	GetInstanceSecurityGroupInboundRuleArgs{...}
type GetInstanceSecurityGroupInboundRuleInput interface {
	pulumi.Input

	ToGetInstanceSecurityGroupInboundRuleOutput() GetInstanceSecurityGroupInboundRuleOutput
	ToGetInstanceSecurityGroupInboundRuleOutputWithContext(context.Context) GetInstanceSecurityGroupInboundRuleOutput
}

type GetInstanceSecurityGroupInboundRuleArgs struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action pulumi.StringInput `pulumi:"action"`
	// The ip this rule apply to.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule apply to.
	IpRange pulumi.StringInput `pulumi:"ipRange"`
	// The port this rule apply to. If no port is specified, rule will apply to all port.
	Port      pulumi.IntInput    `pulumi:"port"`
	PortRange pulumi.StringInput `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (GetInstanceSecurityGroupInboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceSecurityGroupInboundRule)(nil)).Elem()
}

func (i GetInstanceSecurityGroupInboundRuleArgs) ToGetInstanceSecurityGroupInboundRuleOutput() GetInstanceSecurityGroupInboundRuleOutput {
	return i.ToGetInstanceSecurityGroupInboundRuleOutputWithContext(context.Background())
}

func (i GetInstanceSecurityGroupInboundRuleArgs) ToGetInstanceSecurityGroupInboundRuleOutputWithContext(ctx context.Context) GetInstanceSecurityGroupInboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceSecurityGroupInboundRuleOutput)
}

func (i GetInstanceSecurityGroupInboundRuleArgs) ToOutput(ctx context.Context) pulumix.Output[GetInstanceSecurityGroupInboundRule] {
	return pulumix.Output[GetInstanceSecurityGroupInboundRule]{
		OutputState: i.ToGetInstanceSecurityGroupInboundRuleOutputWithContext(ctx).OutputState,
	}
}

// GetInstanceSecurityGroupInboundRuleArrayInput is an input type that accepts GetInstanceSecurityGroupInboundRuleArray and GetInstanceSecurityGroupInboundRuleArrayOutput values.
// You can construct a concrete instance of `GetInstanceSecurityGroupInboundRuleArrayInput` via:
//
//	GetInstanceSecurityGroupInboundRuleArray{ GetInstanceSecurityGroupInboundRuleArgs{...} }
type GetInstanceSecurityGroupInboundRuleArrayInput interface {
	pulumi.Input

	ToGetInstanceSecurityGroupInboundRuleArrayOutput() GetInstanceSecurityGroupInboundRuleArrayOutput
	ToGetInstanceSecurityGroupInboundRuleArrayOutputWithContext(context.Context) GetInstanceSecurityGroupInboundRuleArrayOutput
}

type GetInstanceSecurityGroupInboundRuleArray []GetInstanceSecurityGroupInboundRuleInput

func (GetInstanceSecurityGroupInboundRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceSecurityGroupInboundRule)(nil)).Elem()
}

func (i GetInstanceSecurityGroupInboundRuleArray) ToGetInstanceSecurityGroupInboundRuleArrayOutput() GetInstanceSecurityGroupInboundRuleArrayOutput {
	return i.ToGetInstanceSecurityGroupInboundRuleArrayOutputWithContext(context.Background())
}

func (i GetInstanceSecurityGroupInboundRuleArray) ToGetInstanceSecurityGroupInboundRuleArrayOutputWithContext(ctx context.Context) GetInstanceSecurityGroupInboundRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceSecurityGroupInboundRuleArrayOutput)
}

func (i GetInstanceSecurityGroupInboundRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceSecurityGroupInboundRule] {
	return pulumix.Output[[]GetInstanceSecurityGroupInboundRule]{
		OutputState: i.ToGetInstanceSecurityGroupInboundRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInstanceSecurityGroupInboundRuleOutput struct{ *pulumi.OutputState }

func (GetInstanceSecurityGroupInboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceSecurityGroupInboundRule)(nil)).Elem()
}

func (o GetInstanceSecurityGroupInboundRuleOutput) ToGetInstanceSecurityGroupInboundRuleOutput() GetInstanceSecurityGroupInboundRuleOutput {
	return o
}

func (o GetInstanceSecurityGroupInboundRuleOutput) ToGetInstanceSecurityGroupInboundRuleOutputWithContext(ctx context.Context) GetInstanceSecurityGroupInboundRuleOutput {
	return o
}

func (o GetInstanceSecurityGroupInboundRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceSecurityGroupInboundRule] {
	return pulumix.Output[GetInstanceSecurityGroupInboundRule]{
		OutputState: o.OutputState,
	}
}

// The action to take when rule match. Possible values are: `accept` or `drop`.
func (o GetInstanceSecurityGroupInboundRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSecurityGroupInboundRule) string { return v.Action }).(pulumi.StringOutput)
}

// The ip this rule apply to.
func (o GetInstanceSecurityGroupInboundRuleOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSecurityGroupInboundRule) string { return v.Ip }).(pulumi.StringOutput)
}

// The ip range (e.g `192.168.1.0/24`) this rule apply to.
func (o GetInstanceSecurityGroupInboundRuleOutput) IpRange() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSecurityGroupInboundRule) string { return v.IpRange }).(pulumi.StringOutput)
}

// The port this rule apply to. If no port is specified, rule will apply to all port.
func (o GetInstanceSecurityGroupInboundRuleOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceSecurityGroupInboundRule) int { return v.Port }).(pulumi.IntOutput)
}

func (o GetInstanceSecurityGroupInboundRuleOutput) PortRange() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSecurityGroupInboundRule) string { return v.PortRange }).(pulumi.StringOutput)
}

// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
func (o GetInstanceSecurityGroupInboundRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSecurityGroupInboundRule) string { return v.Protocol }).(pulumi.StringOutput)
}

type GetInstanceSecurityGroupInboundRuleArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceSecurityGroupInboundRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceSecurityGroupInboundRule)(nil)).Elem()
}

func (o GetInstanceSecurityGroupInboundRuleArrayOutput) ToGetInstanceSecurityGroupInboundRuleArrayOutput() GetInstanceSecurityGroupInboundRuleArrayOutput {
	return o
}

func (o GetInstanceSecurityGroupInboundRuleArrayOutput) ToGetInstanceSecurityGroupInboundRuleArrayOutputWithContext(ctx context.Context) GetInstanceSecurityGroupInboundRuleArrayOutput {
	return o
}

func (o GetInstanceSecurityGroupInboundRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceSecurityGroupInboundRule] {
	return pulumix.Output[[]GetInstanceSecurityGroupInboundRule]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceSecurityGroupInboundRuleArrayOutput) Index(i pulumi.IntInput) GetInstanceSecurityGroupInboundRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceSecurityGroupInboundRule {
		return vs[0].([]GetInstanceSecurityGroupInboundRule)[vs[1].(int)]
	}).(GetInstanceSecurityGroupInboundRuleOutput)
}

type GetInstanceSecurityGroupOutboundRule struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action string `pulumi:"action"`
	// The ip this rule apply to.
	Ip string `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule apply to.
	IpRange string `pulumi:"ipRange"`
	// The port this rule apply to. If no port is specified, rule will apply to all port.
	Port      int    `pulumi:"port"`
	PortRange string `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol string `pulumi:"protocol"`
}

// GetInstanceSecurityGroupOutboundRuleInput is an input type that accepts GetInstanceSecurityGroupOutboundRuleArgs and GetInstanceSecurityGroupOutboundRuleOutput values.
// You can construct a concrete instance of `GetInstanceSecurityGroupOutboundRuleInput` via:
//
//	GetInstanceSecurityGroupOutboundRuleArgs{...}
type GetInstanceSecurityGroupOutboundRuleInput interface {
	pulumi.Input

	ToGetInstanceSecurityGroupOutboundRuleOutput() GetInstanceSecurityGroupOutboundRuleOutput
	ToGetInstanceSecurityGroupOutboundRuleOutputWithContext(context.Context) GetInstanceSecurityGroupOutboundRuleOutput
}

type GetInstanceSecurityGroupOutboundRuleArgs struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action pulumi.StringInput `pulumi:"action"`
	// The ip this rule apply to.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule apply to.
	IpRange pulumi.StringInput `pulumi:"ipRange"`
	// The port this rule apply to. If no port is specified, rule will apply to all port.
	Port      pulumi.IntInput    `pulumi:"port"`
	PortRange pulumi.StringInput `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (GetInstanceSecurityGroupOutboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceSecurityGroupOutboundRule)(nil)).Elem()
}

func (i GetInstanceSecurityGroupOutboundRuleArgs) ToGetInstanceSecurityGroupOutboundRuleOutput() GetInstanceSecurityGroupOutboundRuleOutput {
	return i.ToGetInstanceSecurityGroupOutboundRuleOutputWithContext(context.Background())
}

func (i GetInstanceSecurityGroupOutboundRuleArgs) ToGetInstanceSecurityGroupOutboundRuleOutputWithContext(ctx context.Context) GetInstanceSecurityGroupOutboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceSecurityGroupOutboundRuleOutput)
}

func (i GetInstanceSecurityGroupOutboundRuleArgs) ToOutput(ctx context.Context) pulumix.Output[GetInstanceSecurityGroupOutboundRule] {
	return pulumix.Output[GetInstanceSecurityGroupOutboundRule]{
		OutputState: i.ToGetInstanceSecurityGroupOutboundRuleOutputWithContext(ctx).OutputState,
	}
}

// GetInstanceSecurityGroupOutboundRuleArrayInput is an input type that accepts GetInstanceSecurityGroupOutboundRuleArray and GetInstanceSecurityGroupOutboundRuleArrayOutput values.
// You can construct a concrete instance of `GetInstanceSecurityGroupOutboundRuleArrayInput` via:
//
//	GetInstanceSecurityGroupOutboundRuleArray{ GetInstanceSecurityGroupOutboundRuleArgs{...} }
type GetInstanceSecurityGroupOutboundRuleArrayInput interface {
	pulumi.Input

	ToGetInstanceSecurityGroupOutboundRuleArrayOutput() GetInstanceSecurityGroupOutboundRuleArrayOutput
	ToGetInstanceSecurityGroupOutboundRuleArrayOutputWithContext(context.Context) GetInstanceSecurityGroupOutboundRuleArrayOutput
}

type GetInstanceSecurityGroupOutboundRuleArray []GetInstanceSecurityGroupOutboundRuleInput

func (GetInstanceSecurityGroupOutboundRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceSecurityGroupOutboundRule)(nil)).Elem()
}

func (i GetInstanceSecurityGroupOutboundRuleArray) ToGetInstanceSecurityGroupOutboundRuleArrayOutput() GetInstanceSecurityGroupOutboundRuleArrayOutput {
	return i.ToGetInstanceSecurityGroupOutboundRuleArrayOutputWithContext(context.Background())
}

func (i GetInstanceSecurityGroupOutboundRuleArray) ToGetInstanceSecurityGroupOutboundRuleArrayOutputWithContext(ctx context.Context) GetInstanceSecurityGroupOutboundRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceSecurityGroupOutboundRuleArrayOutput)
}

func (i GetInstanceSecurityGroupOutboundRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceSecurityGroupOutboundRule] {
	return pulumix.Output[[]GetInstanceSecurityGroupOutboundRule]{
		OutputState: i.ToGetInstanceSecurityGroupOutboundRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInstanceSecurityGroupOutboundRuleOutput struct{ *pulumi.OutputState }

func (GetInstanceSecurityGroupOutboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceSecurityGroupOutboundRule)(nil)).Elem()
}

func (o GetInstanceSecurityGroupOutboundRuleOutput) ToGetInstanceSecurityGroupOutboundRuleOutput() GetInstanceSecurityGroupOutboundRuleOutput {
	return o
}

func (o GetInstanceSecurityGroupOutboundRuleOutput) ToGetInstanceSecurityGroupOutboundRuleOutputWithContext(ctx context.Context) GetInstanceSecurityGroupOutboundRuleOutput {
	return o
}

func (o GetInstanceSecurityGroupOutboundRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceSecurityGroupOutboundRule] {
	return pulumix.Output[GetInstanceSecurityGroupOutboundRule]{
		OutputState: o.OutputState,
	}
}

// The action to take when rule match. Possible values are: `accept` or `drop`.
func (o GetInstanceSecurityGroupOutboundRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSecurityGroupOutboundRule) string { return v.Action }).(pulumi.StringOutput)
}

// The ip this rule apply to.
func (o GetInstanceSecurityGroupOutboundRuleOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSecurityGroupOutboundRule) string { return v.Ip }).(pulumi.StringOutput)
}

// The ip range (e.g `192.168.1.0/24`) this rule apply to.
func (o GetInstanceSecurityGroupOutboundRuleOutput) IpRange() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSecurityGroupOutboundRule) string { return v.IpRange }).(pulumi.StringOutput)
}

// The port this rule apply to. If no port is specified, rule will apply to all port.
func (o GetInstanceSecurityGroupOutboundRuleOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceSecurityGroupOutboundRule) int { return v.Port }).(pulumi.IntOutput)
}

func (o GetInstanceSecurityGroupOutboundRuleOutput) PortRange() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSecurityGroupOutboundRule) string { return v.PortRange }).(pulumi.StringOutput)
}

// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
func (o GetInstanceSecurityGroupOutboundRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSecurityGroupOutboundRule) string { return v.Protocol }).(pulumi.StringOutput)
}

type GetInstanceSecurityGroupOutboundRuleArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceSecurityGroupOutboundRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceSecurityGroupOutboundRule)(nil)).Elem()
}

func (o GetInstanceSecurityGroupOutboundRuleArrayOutput) ToGetInstanceSecurityGroupOutboundRuleArrayOutput() GetInstanceSecurityGroupOutboundRuleArrayOutput {
	return o
}

func (o GetInstanceSecurityGroupOutboundRuleArrayOutput) ToGetInstanceSecurityGroupOutboundRuleArrayOutputWithContext(ctx context.Context) GetInstanceSecurityGroupOutboundRuleArrayOutput {
	return o
}

func (o GetInstanceSecurityGroupOutboundRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceSecurityGroupOutboundRule] {
	return pulumix.Output[[]GetInstanceSecurityGroupOutboundRule]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceSecurityGroupOutboundRuleArrayOutput) Index(i pulumi.IntInput) GetInstanceSecurityGroupOutboundRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceSecurityGroupOutboundRule {
		return vs[0].([]GetInstanceSecurityGroupOutboundRule)[vs[1].(int)]
	}).(GetInstanceSecurityGroupOutboundRuleOutput)
}

type GetInstanceServerPrivateNetwork struct {
	MacAddress string `pulumi:"macAddress"`
	PnId       string `pulumi:"pnId"`
	Status     string `pulumi:"status"`
	// `zone`) The zone in which the server exists.
	Zone string `pulumi:"zone"`
}

// GetInstanceServerPrivateNetworkInput is an input type that accepts GetInstanceServerPrivateNetworkArgs and GetInstanceServerPrivateNetworkOutput values.
// You can construct a concrete instance of `GetInstanceServerPrivateNetworkInput` via:
//
//	GetInstanceServerPrivateNetworkArgs{...}
type GetInstanceServerPrivateNetworkInput interface {
	pulumi.Input

	ToGetInstanceServerPrivateNetworkOutput() GetInstanceServerPrivateNetworkOutput
	ToGetInstanceServerPrivateNetworkOutputWithContext(context.Context) GetInstanceServerPrivateNetworkOutput
}

type GetInstanceServerPrivateNetworkArgs struct {
	MacAddress pulumi.StringInput `pulumi:"macAddress"`
	PnId       pulumi.StringInput `pulumi:"pnId"`
	Status     pulumi.StringInput `pulumi:"status"`
	// `zone`) The zone in which the server exists.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetInstanceServerPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceServerPrivateNetwork)(nil)).Elem()
}

func (i GetInstanceServerPrivateNetworkArgs) ToGetInstanceServerPrivateNetworkOutput() GetInstanceServerPrivateNetworkOutput {
	return i.ToGetInstanceServerPrivateNetworkOutputWithContext(context.Background())
}

func (i GetInstanceServerPrivateNetworkArgs) ToGetInstanceServerPrivateNetworkOutputWithContext(ctx context.Context) GetInstanceServerPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceServerPrivateNetworkOutput)
}

func (i GetInstanceServerPrivateNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetInstanceServerPrivateNetwork] {
	return pulumix.Output[GetInstanceServerPrivateNetwork]{
		OutputState: i.ToGetInstanceServerPrivateNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetInstanceServerPrivateNetworkArrayInput is an input type that accepts GetInstanceServerPrivateNetworkArray and GetInstanceServerPrivateNetworkArrayOutput values.
// You can construct a concrete instance of `GetInstanceServerPrivateNetworkArrayInput` via:
//
//	GetInstanceServerPrivateNetworkArray{ GetInstanceServerPrivateNetworkArgs{...} }
type GetInstanceServerPrivateNetworkArrayInput interface {
	pulumi.Input

	ToGetInstanceServerPrivateNetworkArrayOutput() GetInstanceServerPrivateNetworkArrayOutput
	ToGetInstanceServerPrivateNetworkArrayOutputWithContext(context.Context) GetInstanceServerPrivateNetworkArrayOutput
}

type GetInstanceServerPrivateNetworkArray []GetInstanceServerPrivateNetworkInput

func (GetInstanceServerPrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceServerPrivateNetwork)(nil)).Elem()
}

func (i GetInstanceServerPrivateNetworkArray) ToGetInstanceServerPrivateNetworkArrayOutput() GetInstanceServerPrivateNetworkArrayOutput {
	return i.ToGetInstanceServerPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i GetInstanceServerPrivateNetworkArray) ToGetInstanceServerPrivateNetworkArrayOutputWithContext(ctx context.Context) GetInstanceServerPrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceServerPrivateNetworkArrayOutput)
}

func (i GetInstanceServerPrivateNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceServerPrivateNetwork] {
	return pulumix.Output[[]GetInstanceServerPrivateNetwork]{
		OutputState: i.ToGetInstanceServerPrivateNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInstanceServerPrivateNetworkOutput struct{ *pulumi.OutputState }

func (GetInstanceServerPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceServerPrivateNetwork)(nil)).Elem()
}

func (o GetInstanceServerPrivateNetworkOutput) ToGetInstanceServerPrivateNetworkOutput() GetInstanceServerPrivateNetworkOutput {
	return o
}

func (o GetInstanceServerPrivateNetworkOutput) ToGetInstanceServerPrivateNetworkOutputWithContext(ctx context.Context) GetInstanceServerPrivateNetworkOutput {
	return o
}

func (o GetInstanceServerPrivateNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceServerPrivateNetwork] {
	return pulumix.Output[GetInstanceServerPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceServerPrivateNetworkOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServerPrivateNetwork) string { return v.MacAddress }).(pulumi.StringOutput)
}

func (o GetInstanceServerPrivateNetworkOutput) PnId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServerPrivateNetwork) string { return v.PnId }).(pulumi.StringOutput)
}

func (o GetInstanceServerPrivateNetworkOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServerPrivateNetwork) string { return v.Status }).(pulumi.StringOutput)
}

// `zone`) The zone in which the server exists.
func (o GetInstanceServerPrivateNetworkOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServerPrivateNetwork) string { return v.Zone }).(pulumi.StringOutput)
}

type GetInstanceServerPrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceServerPrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceServerPrivateNetwork)(nil)).Elem()
}

func (o GetInstanceServerPrivateNetworkArrayOutput) ToGetInstanceServerPrivateNetworkArrayOutput() GetInstanceServerPrivateNetworkArrayOutput {
	return o
}

func (o GetInstanceServerPrivateNetworkArrayOutput) ToGetInstanceServerPrivateNetworkArrayOutputWithContext(ctx context.Context) GetInstanceServerPrivateNetworkArrayOutput {
	return o
}

func (o GetInstanceServerPrivateNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceServerPrivateNetwork] {
	return pulumix.Output[[]GetInstanceServerPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceServerPrivateNetworkArrayOutput) Index(i pulumi.IntInput) GetInstanceServerPrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceServerPrivateNetwork {
		return vs[0].([]GetInstanceServerPrivateNetwork)[vs[1].(int)]
	}).(GetInstanceServerPrivateNetworkOutput)
}

type GetInstanceServerPublicIp struct {
	// The address of the IP
	Address string `pulumi:"address"`
	// The ID of the IP
	Id string `pulumi:"id"`
}

// GetInstanceServerPublicIpInput is an input type that accepts GetInstanceServerPublicIpArgs and GetInstanceServerPublicIpOutput values.
// You can construct a concrete instance of `GetInstanceServerPublicIpInput` via:
//
//	GetInstanceServerPublicIpArgs{...}
type GetInstanceServerPublicIpInput interface {
	pulumi.Input

	ToGetInstanceServerPublicIpOutput() GetInstanceServerPublicIpOutput
	ToGetInstanceServerPublicIpOutputWithContext(context.Context) GetInstanceServerPublicIpOutput
}

type GetInstanceServerPublicIpArgs struct {
	// The address of the IP
	Address pulumi.StringInput `pulumi:"address"`
	// The ID of the IP
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetInstanceServerPublicIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceServerPublicIp)(nil)).Elem()
}

func (i GetInstanceServerPublicIpArgs) ToGetInstanceServerPublicIpOutput() GetInstanceServerPublicIpOutput {
	return i.ToGetInstanceServerPublicIpOutputWithContext(context.Background())
}

func (i GetInstanceServerPublicIpArgs) ToGetInstanceServerPublicIpOutputWithContext(ctx context.Context) GetInstanceServerPublicIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceServerPublicIpOutput)
}

func (i GetInstanceServerPublicIpArgs) ToOutput(ctx context.Context) pulumix.Output[GetInstanceServerPublicIp] {
	return pulumix.Output[GetInstanceServerPublicIp]{
		OutputState: i.ToGetInstanceServerPublicIpOutputWithContext(ctx).OutputState,
	}
}

// GetInstanceServerPublicIpArrayInput is an input type that accepts GetInstanceServerPublicIpArray and GetInstanceServerPublicIpArrayOutput values.
// You can construct a concrete instance of `GetInstanceServerPublicIpArrayInput` via:
//
//	GetInstanceServerPublicIpArray{ GetInstanceServerPublicIpArgs{...} }
type GetInstanceServerPublicIpArrayInput interface {
	pulumi.Input

	ToGetInstanceServerPublicIpArrayOutput() GetInstanceServerPublicIpArrayOutput
	ToGetInstanceServerPublicIpArrayOutputWithContext(context.Context) GetInstanceServerPublicIpArrayOutput
}

type GetInstanceServerPublicIpArray []GetInstanceServerPublicIpInput

func (GetInstanceServerPublicIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceServerPublicIp)(nil)).Elem()
}

func (i GetInstanceServerPublicIpArray) ToGetInstanceServerPublicIpArrayOutput() GetInstanceServerPublicIpArrayOutput {
	return i.ToGetInstanceServerPublicIpArrayOutputWithContext(context.Background())
}

func (i GetInstanceServerPublicIpArray) ToGetInstanceServerPublicIpArrayOutputWithContext(ctx context.Context) GetInstanceServerPublicIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceServerPublicIpArrayOutput)
}

func (i GetInstanceServerPublicIpArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceServerPublicIp] {
	return pulumix.Output[[]GetInstanceServerPublicIp]{
		OutputState: i.ToGetInstanceServerPublicIpArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInstanceServerPublicIpOutput struct{ *pulumi.OutputState }

func (GetInstanceServerPublicIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceServerPublicIp)(nil)).Elem()
}

func (o GetInstanceServerPublicIpOutput) ToGetInstanceServerPublicIpOutput() GetInstanceServerPublicIpOutput {
	return o
}

func (o GetInstanceServerPublicIpOutput) ToGetInstanceServerPublicIpOutputWithContext(ctx context.Context) GetInstanceServerPublicIpOutput {
	return o
}

func (o GetInstanceServerPublicIpOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceServerPublicIp] {
	return pulumix.Output[GetInstanceServerPublicIp]{
		OutputState: o.OutputState,
	}
}

// The address of the IP
func (o GetInstanceServerPublicIpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServerPublicIp) string { return v.Address }).(pulumi.StringOutput)
}

// The ID of the IP
func (o GetInstanceServerPublicIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServerPublicIp) string { return v.Id }).(pulumi.StringOutput)
}

type GetInstanceServerPublicIpArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceServerPublicIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceServerPublicIp)(nil)).Elem()
}

func (o GetInstanceServerPublicIpArrayOutput) ToGetInstanceServerPublicIpArrayOutput() GetInstanceServerPublicIpArrayOutput {
	return o
}

func (o GetInstanceServerPublicIpArrayOutput) ToGetInstanceServerPublicIpArrayOutputWithContext(ctx context.Context) GetInstanceServerPublicIpArrayOutput {
	return o
}

func (o GetInstanceServerPublicIpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceServerPublicIp] {
	return pulumix.Output[[]GetInstanceServerPublicIp]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceServerPublicIpArrayOutput) Index(i pulumi.IntInput) GetInstanceServerPublicIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceServerPublicIp {
		return vs[0].([]GetInstanceServerPublicIp)[vs[1].(int)]
	}).(GetInstanceServerPublicIpOutput)
}

type GetInstanceServerRootVolume struct {
	Boot bool `pulumi:"boot"`
	// Forces deletion of the root volume on instance termination.
	DeleteOnTermination bool `pulumi:"deleteOnTermination"`
	// The server name. Only one of `name` and `serverId` should be specified.
	Name string `pulumi:"name"`
	// Size of the root volume in gigabytes.
	SizeInGb int `pulumi:"sizeInGb"`
	// The volume ID of the root volume of the server.
	VolumeId   string `pulumi:"volumeId"`
	VolumeType string `pulumi:"volumeType"`
}

// GetInstanceServerRootVolumeInput is an input type that accepts GetInstanceServerRootVolumeArgs and GetInstanceServerRootVolumeOutput values.
// You can construct a concrete instance of `GetInstanceServerRootVolumeInput` via:
//
//	GetInstanceServerRootVolumeArgs{...}
type GetInstanceServerRootVolumeInput interface {
	pulumi.Input

	ToGetInstanceServerRootVolumeOutput() GetInstanceServerRootVolumeOutput
	ToGetInstanceServerRootVolumeOutputWithContext(context.Context) GetInstanceServerRootVolumeOutput
}

type GetInstanceServerRootVolumeArgs struct {
	Boot pulumi.BoolInput `pulumi:"boot"`
	// Forces deletion of the root volume on instance termination.
	DeleteOnTermination pulumi.BoolInput `pulumi:"deleteOnTermination"`
	// The server name. Only one of `name` and `serverId` should be specified.
	Name pulumi.StringInput `pulumi:"name"`
	// Size of the root volume in gigabytes.
	SizeInGb pulumi.IntInput `pulumi:"sizeInGb"`
	// The volume ID of the root volume of the server.
	VolumeId   pulumi.StringInput `pulumi:"volumeId"`
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (GetInstanceServerRootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceServerRootVolume)(nil)).Elem()
}

func (i GetInstanceServerRootVolumeArgs) ToGetInstanceServerRootVolumeOutput() GetInstanceServerRootVolumeOutput {
	return i.ToGetInstanceServerRootVolumeOutputWithContext(context.Background())
}

func (i GetInstanceServerRootVolumeArgs) ToGetInstanceServerRootVolumeOutputWithContext(ctx context.Context) GetInstanceServerRootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceServerRootVolumeOutput)
}

func (i GetInstanceServerRootVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[GetInstanceServerRootVolume] {
	return pulumix.Output[GetInstanceServerRootVolume]{
		OutputState: i.ToGetInstanceServerRootVolumeOutputWithContext(ctx).OutputState,
	}
}

// GetInstanceServerRootVolumeArrayInput is an input type that accepts GetInstanceServerRootVolumeArray and GetInstanceServerRootVolumeArrayOutput values.
// You can construct a concrete instance of `GetInstanceServerRootVolumeArrayInput` via:
//
//	GetInstanceServerRootVolumeArray{ GetInstanceServerRootVolumeArgs{...} }
type GetInstanceServerRootVolumeArrayInput interface {
	pulumi.Input

	ToGetInstanceServerRootVolumeArrayOutput() GetInstanceServerRootVolumeArrayOutput
	ToGetInstanceServerRootVolumeArrayOutputWithContext(context.Context) GetInstanceServerRootVolumeArrayOutput
}

type GetInstanceServerRootVolumeArray []GetInstanceServerRootVolumeInput

func (GetInstanceServerRootVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceServerRootVolume)(nil)).Elem()
}

func (i GetInstanceServerRootVolumeArray) ToGetInstanceServerRootVolumeArrayOutput() GetInstanceServerRootVolumeArrayOutput {
	return i.ToGetInstanceServerRootVolumeArrayOutputWithContext(context.Background())
}

func (i GetInstanceServerRootVolumeArray) ToGetInstanceServerRootVolumeArrayOutputWithContext(ctx context.Context) GetInstanceServerRootVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceServerRootVolumeArrayOutput)
}

func (i GetInstanceServerRootVolumeArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceServerRootVolume] {
	return pulumix.Output[[]GetInstanceServerRootVolume]{
		OutputState: i.ToGetInstanceServerRootVolumeArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInstanceServerRootVolumeOutput struct{ *pulumi.OutputState }

func (GetInstanceServerRootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceServerRootVolume)(nil)).Elem()
}

func (o GetInstanceServerRootVolumeOutput) ToGetInstanceServerRootVolumeOutput() GetInstanceServerRootVolumeOutput {
	return o
}

func (o GetInstanceServerRootVolumeOutput) ToGetInstanceServerRootVolumeOutputWithContext(ctx context.Context) GetInstanceServerRootVolumeOutput {
	return o
}

func (o GetInstanceServerRootVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceServerRootVolume] {
	return pulumix.Output[GetInstanceServerRootVolume]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceServerRootVolumeOutput) Boot() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceServerRootVolume) bool { return v.Boot }).(pulumi.BoolOutput)
}

// Forces deletion of the root volume on instance termination.
func (o GetInstanceServerRootVolumeOutput) DeleteOnTermination() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceServerRootVolume) bool { return v.DeleteOnTermination }).(pulumi.BoolOutput)
}

// The server name. Only one of `name` and `serverId` should be specified.
func (o GetInstanceServerRootVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServerRootVolume) string { return v.Name }).(pulumi.StringOutput)
}

// Size of the root volume in gigabytes.
func (o GetInstanceServerRootVolumeOutput) SizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceServerRootVolume) int { return v.SizeInGb }).(pulumi.IntOutput)
}

// The volume ID of the root volume of the server.
func (o GetInstanceServerRootVolumeOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServerRootVolume) string { return v.VolumeId }).(pulumi.StringOutput)
}

func (o GetInstanceServerRootVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServerRootVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type GetInstanceServerRootVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceServerRootVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceServerRootVolume)(nil)).Elem()
}

func (o GetInstanceServerRootVolumeArrayOutput) ToGetInstanceServerRootVolumeArrayOutput() GetInstanceServerRootVolumeArrayOutput {
	return o
}

func (o GetInstanceServerRootVolumeArrayOutput) ToGetInstanceServerRootVolumeArrayOutputWithContext(ctx context.Context) GetInstanceServerRootVolumeArrayOutput {
	return o
}

func (o GetInstanceServerRootVolumeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceServerRootVolume] {
	return pulumix.Output[[]GetInstanceServerRootVolume]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceServerRootVolumeArrayOutput) Index(i pulumi.IntInput) GetInstanceServerRootVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceServerRootVolume {
		return vs[0].([]GetInstanceServerRootVolume)[vs[1].(int)]
	}).(GetInstanceServerRootVolumeOutput)
}

type GetInstanceServersServer struct {
	// The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
	BootType string `pulumi:"bootType"`
	// The ID of the bootscript.
	BootscriptId string `pulumi:"bootscriptId"`
	// If true a dynamic IP will be attached to the server.
	EnableDynamicIp bool `pulumi:"enableDynamicIp"`
	// Determines if IPv6 is enabled for the server.
	EnableIpv6 bool `pulumi:"enableIpv6"`
	// The ID of the IP
	Id string `pulumi:"id"`
	// The UUID or the label of the base image used by the server.
	Image string `pulumi:"image"`
	// The default ipv6 address routed to the server. ( Only set when enableIpv6 is set to true )
	Ipv6Address string `pulumi:"ipv6Address"`
	// The ipv6 gateway address. ( Only set when enableIpv6 is set to true )
	Ipv6Gateway string `pulumi:"ipv6Gateway"`
	// The prefix length of the ipv6 subnet routed to the server. ( Only set when enableIpv6 is set to true )
	Ipv6PrefixLength int `pulumi:"ipv6PrefixLength"`
	// The server name used as filter. Servers with a name like it are listed.
	Name string `pulumi:"name"`
	// The organization ID the server is associated with.
	OrganizationId string `pulumi:"organizationId"`
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
	PlacementGroupId              string `pulumi:"placementGroupId"`
	PlacementGroupPolicyRespected bool   `pulumi:"placementGroupPolicyRespected"`
	// The Scaleway internal IP address of the server.
	PrivateIp string `pulumi:"privateIp"`
	// The ID of the project the server is associated with.
	ProjectId string `pulumi:"projectId"`
	// The public IP address of the server.
	PublicIp string `pulumi:"publicIp"`
	// The list of public IPs of the server
	PublicIps []GetInstanceServersServerPublicIp `pulumi:"publicIps"`
	// True if the server support routed ip only.
	RoutedIpEnabled bool `pulumi:"routedIpEnabled"`
	// The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// The state of the server. Possible values are: `started`, `stopped` or `standby`.
	State string `pulumi:"state"`
	// List of tags used as filter. Servers with these exact tags are listed.
	Tags []string `pulumi:"tags"`
	// The commercial type of the server.
	Type string `pulumi:"type"`
	// `zone`) The zone in which servers exist.
	Zone string `pulumi:"zone"`
}

// GetInstanceServersServerInput is an input type that accepts GetInstanceServersServerArgs and GetInstanceServersServerOutput values.
// You can construct a concrete instance of `GetInstanceServersServerInput` via:
//
//	GetInstanceServersServerArgs{...}
type GetInstanceServersServerInput interface {
	pulumi.Input

	ToGetInstanceServersServerOutput() GetInstanceServersServerOutput
	ToGetInstanceServersServerOutputWithContext(context.Context) GetInstanceServersServerOutput
}

type GetInstanceServersServerArgs struct {
	// The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
	BootType pulumi.StringInput `pulumi:"bootType"`
	// The ID of the bootscript.
	BootscriptId pulumi.StringInput `pulumi:"bootscriptId"`
	// If true a dynamic IP will be attached to the server.
	EnableDynamicIp pulumi.BoolInput `pulumi:"enableDynamicIp"`
	// Determines if IPv6 is enabled for the server.
	EnableIpv6 pulumi.BoolInput `pulumi:"enableIpv6"`
	// The ID of the IP
	Id pulumi.StringInput `pulumi:"id"`
	// The UUID or the label of the base image used by the server.
	Image pulumi.StringInput `pulumi:"image"`
	// The default ipv6 address routed to the server. ( Only set when enableIpv6 is set to true )
	Ipv6Address pulumi.StringInput `pulumi:"ipv6Address"`
	// The ipv6 gateway address. ( Only set when enableIpv6 is set to true )
	Ipv6Gateway pulumi.StringInput `pulumi:"ipv6Gateway"`
	// The prefix length of the ipv6 subnet routed to the server. ( Only set when enableIpv6 is set to true )
	Ipv6PrefixLength pulumi.IntInput `pulumi:"ipv6PrefixLength"`
	// The server name used as filter. Servers with a name like it are listed.
	Name pulumi.StringInput `pulumi:"name"`
	// The organization ID the server is associated with.
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
	PlacementGroupId              pulumi.StringInput `pulumi:"placementGroupId"`
	PlacementGroupPolicyRespected pulumi.BoolInput   `pulumi:"placementGroupPolicyRespected"`
	// The Scaleway internal IP address of the server.
	PrivateIp pulumi.StringInput `pulumi:"privateIp"`
	// The ID of the project the server is associated with.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The public IP address of the server.
	PublicIp pulumi.StringInput `pulumi:"publicIp"`
	// The list of public IPs of the server
	PublicIps GetInstanceServersServerPublicIpArrayInput `pulumi:"publicIps"`
	// True if the server support routed ip only.
	RoutedIpEnabled pulumi.BoolInput `pulumi:"routedIpEnabled"`
	// The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// The state of the server. Possible values are: `started`, `stopped` or `standby`.
	State pulumi.StringInput `pulumi:"state"`
	// List of tags used as filter. Servers with these exact tags are listed.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The commercial type of the server.
	Type pulumi.StringInput `pulumi:"type"`
	// `zone`) The zone in which servers exist.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetInstanceServersServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceServersServer)(nil)).Elem()
}

func (i GetInstanceServersServerArgs) ToGetInstanceServersServerOutput() GetInstanceServersServerOutput {
	return i.ToGetInstanceServersServerOutputWithContext(context.Background())
}

func (i GetInstanceServersServerArgs) ToGetInstanceServersServerOutputWithContext(ctx context.Context) GetInstanceServersServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceServersServerOutput)
}

func (i GetInstanceServersServerArgs) ToOutput(ctx context.Context) pulumix.Output[GetInstanceServersServer] {
	return pulumix.Output[GetInstanceServersServer]{
		OutputState: i.ToGetInstanceServersServerOutputWithContext(ctx).OutputState,
	}
}

// GetInstanceServersServerArrayInput is an input type that accepts GetInstanceServersServerArray and GetInstanceServersServerArrayOutput values.
// You can construct a concrete instance of `GetInstanceServersServerArrayInput` via:
//
//	GetInstanceServersServerArray{ GetInstanceServersServerArgs{...} }
type GetInstanceServersServerArrayInput interface {
	pulumi.Input

	ToGetInstanceServersServerArrayOutput() GetInstanceServersServerArrayOutput
	ToGetInstanceServersServerArrayOutputWithContext(context.Context) GetInstanceServersServerArrayOutput
}

type GetInstanceServersServerArray []GetInstanceServersServerInput

func (GetInstanceServersServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceServersServer)(nil)).Elem()
}

func (i GetInstanceServersServerArray) ToGetInstanceServersServerArrayOutput() GetInstanceServersServerArrayOutput {
	return i.ToGetInstanceServersServerArrayOutputWithContext(context.Background())
}

func (i GetInstanceServersServerArray) ToGetInstanceServersServerArrayOutputWithContext(ctx context.Context) GetInstanceServersServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceServersServerArrayOutput)
}

func (i GetInstanceServersServerArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceServersServer] {
	return pulumix.Output[[]GetInstanceServersServer]{
		OutputState: i.ToGetInstanceServersServerArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInstanceServersServerOutput struct{ *pulumi.OutputState }

func (GetInstanceServersServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceServersServer)(nil)).Elem()
}

func (o GetInstanceServersServerOutput) ToGetInstanceServersServerOutput() GetInstanceServersServerOutput {
	return o
}

func (o GetInstanceServersServerOutput) ToGetInstanceServersServerOutputWithContext(ctx context.Context) GetInstanceServersServerOutput {
	return o
}

func (o GetInstanceServersServerOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceServersServer] {
	return pulumix.Output[GetInstanceServersServer]{
		OutputState: o.OutputState,
	}
}

// The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
func (o GetInstanceServersServerOutput) BootType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServersServer) string { return v.BootType }).(pulumi.StringOutput)
}

// The ID of the bootscript.
func (o GetInstanceServersServerOutput) BootscriptId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServersServer) string { return v.BootscriptId }).(pulumi.StringOutput)
}

// If true a dynamic IP will be attached to the server.
func (o GetInstanceServersServerOutput) EnableDynamicIp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceServersServer) bool { return v.EnableDynamicIp }).(pulumi.BoolOutput)
}

// Determines if IPv6 is enabled for the server.
func (o GetInstanceServersServerOutput) EnableIpv6() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceServersServer) bool { return v.EnableIpv6 }).(pulumi.BoolOutput)
}

// The ID of the IP
func (o GetInstanceServersServerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServersServer) string { return v.Id }).(pulumi.StringOutput)
}

// The UUID or the label of the base image used by the server.
func (o GetInstanceServersServerOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServersServer) string { return v.Image }).(pulumi.StringOutput)
}

// The default ipv6 address routed to the server. ( Only set when enableIpv6 is set to true )
func (o GetInstanceServersServerOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServersServer) string { return v.Ipv6Address }).(pulumi.StringOutput)
}

// The ipv6 gateway address. ( Only set when enableIpv6 is set to true )
func (o GetInstanceServersServerOutput) Ipv6Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServersServer) string { return v.Ipv6Gateway }).(pulumi.StringOutput)
}

// The prefix length of the ipv6 subnet routed to the server. ( Only set when enableIpv6 is set to true )
func (o GetInstanceServersServerOutput) Ipv6PrefixLength() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceServersServer) int { return v.Ipv6PrefixLength }).(pulumi.IntOutput)
}

// The server name used as filter. Servers with a name like it are listed.
func (o GetInstanceServersServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServersServer) string { return v.Name }).(pulumi.StringOutput)
}

// The organization ID the server is associated with.
func (o GetInstanceServersServerOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServersServer) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
func (o GetInstanceServersServerOutput) PlacementGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServersServer) string { return v.PlacementGroupId }).(pulumi.StringOutput)
}

func (o GetInstanceServersServerOutput) PlacementGroupPolicyRespected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceServersServer) bool { return v.PlacementGroupPolicyRespected }).(pulumi.BoolOutput)
}

// The Scaleway internal IP address of the server.
func (o GetInstanceServersServerOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServersServer) string { return v.PrivateIp }).(pulumi.StringOutput)
}

// The ID of the project the server is associated with.
func (o GetInstanceServersServerOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServersServer) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The public IP address of the server.
func (o GetInstanceServersServerOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServersServer) string { return v.PublicIp }).(pulumi.StringOutput)
}

// The list of public IPs of the server
func (o GetInstanceServersServerOutput) PublicIps() GetInstanceServersServerPublicIpArrayOutput {
	return o.ApplyT(func(v GetInstanceServersServer) []GetInstanceServersServerPublicIp { return v.PublicIps }).(GetInstanceServersServerPublicIpArrayOutput)
}

// True if the server support routed ip only.
func (o GetInstanceServersServerOutput) RoutedIpEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceServersServer) bool { return v.RoutedIpEnabled }).(pulumi.BoolOutput)
}

// The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
func (o GetInstanceServersServerOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServersServer) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The state of the server. Possible values are: `started`, `stopped` or `standby`.
func (o GetInstanceServersServerOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServersServer) string { return v.State }).(pulumi.StringOutput)
}

// List of tags used as filter. Servers with these exact tags are listed.
func (o GetInstanceServersServerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceServersServer) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The commercial type of the server.
func (o GetInstanceServersServerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServersServer) string { return v.Type }).(pulumi.StringOutput)
}

// `zone`) The zone in which servers exist.
func (o GetInstanceServersServerOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServersServer) string { return v.Zone }).(pulumi.StringOutput)
}

type GetInstanceServersServerArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceServersServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceServersServer)(nil)).Elem()
}

func (o GetInstanceServersServerArrayOutput) ToGetInstanceServersServerArrayOutput() GetInstanceServersServerArrayOutput {
	return o
}

func (o GetInstanceServersServerArrayOutput) ToGetInstanceServersServerArrayOutputWithContext(ctx context.Context) GetInstanceServersServerArrayOutput {
	return o
}

func (o GetInstanceServersServerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceServersServer] {
	return pulumix.Output[[]GetInstanceServersServer]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceServersServerArrayOutput) Index(i pulumi.IntInput) GetInstanceServersServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceServersServer {
		return vs[0].([]GetInstanceServersServer)[vs[1].(int)]
	}).(GetInstanceServersServerOutput)
}

type GetInstanceServersServerPublicIp struct {
	// The address of the IP
	Address string `pulumi:"address"`
	// The ID of the IP
	Id string `pulumi:"id"`
}

// GetInstanceServersServerPublicIpInput is an input type that accepts GetInstanceServersServerPublicIpArgs and GetInstanceServersServerPublicIpOutput values.
// You can construct a concrete instance of `GetInstanceServersServerPublicIpInput` via:
//
//	GetInstanceServersServerPublicIpArgs{...}
type GetInstanceServersServerPublicIpInput interface {
	pulumi.Input

	ToGetInstanceServersServerPublicIpOutput() GetInstanceServersServerPublicIpOutput
	ToGetInstanceServersServerPublicIpOutputWithContext(context.Context) GetInstanceServersServerPublicIpOutput
}

type GetInstanceServersServerPublicIpArgs struct {
	// The address of the IP
	Address pulumi.StringInput `pulumi:"address"`
	// The ID of the IP
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetInstanceServersServerPublicIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceServersServerPublicIp)(nil)).Elem()
}

func (i GetInstanceServersServerPublicIpArgs) ToGetInstanceServersServerPublicIpOutput() GetInstanceServersServerPublicIpOutput {
	return i.ToGetInstanceServersServerPublicIpOutputWithContext(context.Background())
}

func (i GetInstanceServersServerPublicIpArgs) ToGetInstanceServersServerPublicIpOutputWithContext(ctx context.Context) GetInstanceServersServerPublicIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceServersServerPublicIpOutput)
}

func (i GetInstanceServersServerPublicIpArgs) ToOutput(ctx context.Context) pulumix.Output[GetInstanceServersServerPublicIp] {
	return pulumix.Output[GetInstanceServersServerPublicIp]{
		OutputState: i.ToGetInstanceServersServerPublicIpOutputWithContext(ctx).OutputState,
	}
}

// GetInstanceServersServerPublicIpArrayInput is an input type that accepts GetInstanceServersServerPublicIpArray and GetInstanceServersServerPublicIpArrayOutput values.
// You can construct a concrete instance of `GetInstanceServersServerPublicIpArrayInput` via:
//
//	GetInstanceServersServerPublicIpArray{ GetInstanceServersServerPublicIpArgs{...} }
type GetInstanceServersServerPublicIpArrayInput interface {
	pulumi.Input

	ToGetInstanceServersServerPublicIpArrayOutput() GetInstanceServersServerPublicIpArrayOutput
	ToGetInstanceServersServerPublicIpArrayOutputWithContext(context.Context) GetInstanceServersServerPublicIpArrayOutput
}

type GetInstanceServersServerPublicIpArray []GetInstanceServersServerPublicIpInput

func (GetInstanceServersServerPublicIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceServersServerPublicIp)(nil)).Elem()
}

func (i GetInstanceServersServerPublicIpArray) ToGetInstanceServersServerPublicIpArrayOutput() GetInstanceServersServerPublicIpArrayOutput {
	return i.ToGetInstanceServersServerPublicIpArrayOutputWithContext(context.Background())
}

func (i GetInstanceServersServerPublicIpArray) ToGetInstanceServersServerPublicIpArrayOutputWithContext(ctx context.Context) GetInstanceServersServerPublicIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceServersServerPublicIpArrayOutput)
}

func (i GetInstanceServersServerPublicIpArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceServersServerPublicIp] {
	return pulumix.Output[[]GetInstanceServersServerPublicIp]{
		OutputState: i.ToGetInstanceServersServerPublicIpArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInstanceServersServerPublicIpOutput struct{ *pulumi.OutputState }

func (GetInstanceServersServerPublicIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceServersServerPublicIp)(nil)).Elem()
}

func (o GetInstanceServersServerPublicIpOutput) ToGetInstanceServersServerPublicIpOutput() GetInstanceServersServerPublicIpOutput {
	return o
}

func (o GetInstanceServersServerPublicIpOutput) ToGetInstanceServersServerPublicIpOutputWithContext(ctx context.Context) GetInstanceServersServerPublicIpOutput {
	return o
}

func (o GetInstanceServersServerPublicIpOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceServersServerPublicIp] {
	return pulumix.Output[GetInstanceServersServerPublicIp]{
		OutputState: o.OutputState,
	}
}

// The address of the IP
func (o GetInstanceServersServerPublicIpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServersServerPublicIp) string { return v.Address }).(pulumi.StringOutput)
}

// The ID of the IP
func (o GetInstanceServersServerPublicIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServersServerPublicIp) string { return v.Id }).(pulumi.StringOutput)
}

type GetInstanceServersServerPublicIpArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceServersServerPublicIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceServersServerPublicIp)(nil)).Elem()
}

func (o GetInstanceServersServerPublicIpArrayOutput) ToGetInstanceServersServerPublicIpArrayOutput() GetInstanceServersServerPublicIpArrayOutput {
	return o
}

func (o GetInstanceServersServerPublicIpArrayOutput) ToGetInstanceServersServerPublicIpArrayOutputWithContext(ctx context.Context) GetInstanceServersServerPublicIpArrayOutput {
	return o
}

func (o GetInstanceServersServerPublicIpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceServersServerPublicIp] {
	return pulumix.Output[[]GetInstanceServersServerPublicIp]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceServersServerPublicIpArrayOutput) Index(i pulumi.IntInput) GetInstanceServersServerPublicIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceServersServerPublicIp {
		return vs[0].([]GetInstanceServersServerPublicIp)[vs[1].(int)]
	}).(GetInstanceServersServerPublicIpOutput)
}

type GetInstanceSnapshotImport struct {
	Bucket string `pulumi:"bucket"`
	Key    string `pulumi:"key"`
}

// GetInstanceSnapshotImportInput is an input type that accepts GetInstanceSnapshotImportArgs and GetInstanceSnapshotImportOutput values.
// You can construct a concrete instance of `GetInstanceSnapshotImportInput` via:
//
//	GetInstanceSnapshotImportArgs{...}
type GetInstanceSnapshotImportInput interface {
	pulumi.Input

	ToGetInstanceSnapshotImportOutput() GetInstanceSnapshotImportOutput
	ToGetInstanceSnapshotImportOutputWithContext(context.Context) GetInstanceSnapshotImportOutput
}

type GetInstanceSnapshotImportArgs struct {
	Bucket pulumi.StringInput `pulumi:"bucket"`
	Key    pulumi.StringInput `pulumi:"key"`
}

func (GetInstanceSnapshotImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceSnapshotImport)(nil)).Elem()
}

func (i GetInstanceSnapshotImportArgs) ToGetInstanceSnapshotImportOutput() GetInstanceSnapshotImportOutput {
	return i.ToGetInstanceSnapshotImportOutputWithContext(context.Background())
}

func (i GetInstanceSnapshotImportArgs) ToGetInstanceSnapshotImportOutputWithContext(ctx context.Context) GetInstanceSnapshotImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceSnapshotImportOutput)
}

func (i GetInstanceSnapshotImportArgs) ToOutput(ctx context.Context) pulumix.Output[GetInstanceSnapshotImport] {
	return pulumix.Output[GetInstanceSnapshotImport]{
		OutputState: i.ToGetInstanceSnapshotImportOutputWithContext(ctx).OutputState,
	}
}

// GetInstanceSnapshotImportArrayInput is an input type that accepts GetInstanceSnapshotImportArray and GetInstanceSnapshotImportArrayOutput values.
// You can construct a concrete instance of `GetInstanceSnapshotImportArrayInput` via:
//
//	GetInstanceSnapshotImportArray{ GetInstanceSnapshotImportArgs{...} }
type GetInstanceSnapshotImportArrayInput interface {
	pulumi.Input

	ToGetInstanceSnapshotImportArrayOutput() GetInstanceSnapshotImportArrayOutput
	ToGetInstanceSnapshotImportArrayOutputWithContext(context.Context) GetInstanceSnapshotImportArrayOutput
}

type GetInstanceSnapshotImportArray []GetInstanceSnapshotImportInput

func (GetInstanceSnapshotImportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceSnapshotImport)(nil)).Elem()
}

func (i GetInstanceSnapshotImportArray) ToGetInstanceSnapshotImportArrayOutput() GetInstanceSnapshotImportArrayOutput {
	return i.ToGetInstanceSnapshotImportArrayOutputWithContext(context.Background())
}

func (i GetInstanceSnapshotImportArray) ToGetInstanceSnapshotImportArrayOutputWithContext(ctx context.Context) GetInstanceSnapshotImportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceSnapshotImportArrayOutput)
}

func (i GetInstanceSnapshotImportArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceSnapshotImport] {
	return pulumix.Output[[]GetInstanceSnapshotImport]{
		OutputState: i.ToGetInstanceSnapshotImportArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInstanceSnapshotImportOutput struct{ *pulumi.OutputState }

func (GetInstanceSnapshotImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceSnapshotImport)(nil)).Elem()
}

func (o GetInstanceSnapshotImportOutput) ToGetInstanceSnapshotImportOutput() GetInstanceSnapshotImportOutput {
	return o
}

func (o GetInstanceSnapshotImportOutput) ToGetInstanceSnapshotImportOutputWithContext(ctx context.Context) GetInstanceSnapshotImportOutput {
	return o
}

func (o GetInstanceSnapshotImportOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceSnapshotImport] {
	return pulumix.Output[GetInstanceSnapshotImport]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceSnapshotImportOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSnapshotImport) string { return v.Bucket }).(pulumi.StringOutput)
}

func (o GetInstanceSnapshotImportOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSnapshotImport) string { return v.Key }).(pulumi.StringOutput)
}

type GetInstanceSnapshotImportArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceSnapshotImportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceSnapshotImport)(nil)).Elem()
}

func (o GetInstanceSnapshotImportArrayOutput) ToGetInstanceSnapshotImportArrayOutput() GetInstanceSnapshotImportArrayOutput {
	return o
}

func (o GetInstanceSnapshotImportArrayOutput) ToGetInstanceSnapshotImportArrayOutputWithContext(ctx context.Context) GetInstanceSnapshotImportArrayOutput {
	return o
}

func (o GetInstanceSnapshotImportArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceSnapshotImport] {
	return pulumix.Output[[]GetInstanceSnapshotImport]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceSnapshotImportArrayOutput) Index(i pulumi.IntInput) GetInstanceSnapshotImportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceSnapshotImport {
		return vs[0].([]GetInstanceSnapshotImport)[vs[1].(int)]
	}).(GetInstanceSnapshotImportOutput)
}

type GetIotDeviceCertificate struct {
	Crt string `pulumi:"crt"`
	Key string `pulumi:"key"`
}

// GetIotDeviceCertificateInput is an input type that accepts GetIotDeviceCertificateArgs and GetIotDeviceCertificateOutput values.
// You can construct a concrete instance of `GetIotDeviceCertificateInput` via:
//
//	GetIotDeviceCertificateArgs{...}
type GetIotDeviceCertificateInput interface {
	pulumi.Input

	ToGetIotDeviceCertificateOutput() GetIotDeviceCertificateOutput
	ToGetIotDeviceCertificateOutputWithContext(context.Context) GetIotDeviceCertificateOutput
}

type GetIotDeviceCertificateArgs struct {
	Crt pulumi.StringInput `pulumi:"crt"`
	Key pulumi.StringInput `pulumi:"key"`
}

func (GetIotDeviceCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIotDeviceCertificate)(nil)).Elem()
}

func (i GetIotDeviceCertificateArgs) ToGetIotDeviceCertificateOutput() GetIotDeviceCertificateOutput {
	return i.ToGetIotDeviceCertificateOutputWithContext(context.Background())
}

func (i GetIotDeviceCertificateArgs) ToGetIotDeviceCertificateOutputWithContext(ctx context.Context) GetIotDeviceCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIotDeviceCertificateOutput)
}

func (i GetIotDeviceCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[GetIotDeviceCertificate] {
	return pulumix.Output[GetIotDeviceCertificate]{
		OutputState: i.ToGetIotDeviceCertificateOutputWithContext(ctx).OutputState,
	}
}

// GetIotDeviceCertificateArrayInput is an input type that accepts GetIotDeviceCertificateArray and GetIotDeviceCertificateArrayOutput values.
// You can construct a concrete instance of `GetIotDeviceCertificateArrayInput` via:
//
//	GetIotDeviceCertificateArray{ GetIotDeviceCertificateArgs{...} }
type GetIotDeviceCertificateArrayInput interface {
	pulumi.Input

	ToGetIotDeviceCertificateArrayOutput() GetIotDeviceCertificateArrayOutput
	ToGetIotDeviceCertificateArrayOutputWithContext(context.Context) GetIotDeviceCertificateArrayOutput
}

type GetIotDeviceCertificateArray []GetIotDeviceCertificateInput

func (GetIotDeviceCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIotDeviceCertificate)(nil)).Elem()
}

func (i GetIotDeviceCertificateArray) ToGetIotDeviceCertificateArrayOutput() GetIotDeviceCertificateArrayOutput {
	return i.ToGetIotDeviceCertificateArrayOutputWithContext(context.Background())
}

func (i GetIotDeviceCertificateArray) ToGetIotDeviceCertificateArrayOutputWithContext(ctx context.Context) GetIotDeviceCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIotDeviceCertificateArrayOutput)
}

func (i GetIotDeviceCertificateArray) ToOutput(ctx context.Context) pulumix.Output[[]GetIotDeviceCertificate] {
	return pulumix.Output[[]GetIotDeviceCertificate]{
		OutputState: i.ToGetIotDeviceCertificateArrayOutputWithContext(ctx).OutputState,
	}
}

type GetIotDeviceCertificateOutput struct{ *pulumi.OutputState }

func (GetIotDeviceCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIotDeviceCertificate)(nil)).Elem()
}

func (o GetIotDeviceCertificateOutput) ToGetIotDeviceCertificateOutput() GetIotDeviceCertificateOutput {
	return o
}

func (o GetIotDeviceCertificateOutput) ToGetIotDeviceCertificateOutputWithContext(ctx context.Context) GetIotDeviceCertificateOutput {
	return o
}

func (o GetIotDeviceCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[GetIotDeviceCertificate] {
	return pulumix.Output[GetIotDeviceCertificate]{
		OutputState: o.OutputState,
	}
}

func (o GetIotDeviceCertificateOutput) Crt() pulumi.StringOutput {
	return o.ApplyT(func(v GetIotDeviceCertificate) string { return v.Crt }).(pulumi.StringOutput)
}

func (o GetIotDeviceCertificateOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetIotDeviceCertificate) string { return v.Key }).(pulumi.StringOutput)
}

type GetIotDeviceCertificateArrayOutput struct{ *pulumi.OutputState }

func (GetIotDeviceCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIotDeviceCertificate)(nil)).Elem()
}

func (o GetIotDeviceCertificateArrayOutput) ToGetIotDeviceCertificateArrayOutput() GetIotDeviceCertificateArrayOutput {
	return o
}

func (o GetIotDeviceCertificateArrayOutput) ToGetIotDeviceCertificateArrayOutputWithContext(ctx context.Context) GetIotDeviceCertificateArrayOutput {
	return o
}

func (o GetIotDeviceCertificateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetIotDeviceCertificate] {
	return pulumix.Output[[]GetIotDeviceCertificate]{
		OutputState: o.OutputState,
	}
}

func (o GetIotDeviceCertificateArrayOutput) Index(i pulumi.IntInput) GetIotDeviceCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIotDeviceCertificate {
		return vs[0].([]GetIotDeviceCertificate)[vs[1].(int)]
	}).(GetIotDeviceCertificateOutput)
}

type GetIotDeviceMessageFilter struct {
	Publishes  []GetIotDeviceMessageFilterPublish   `pulumi:"publishes"`
	Subscribes []GetIotDeviceMessageFilterSubscribe `pulumi:"subscribes"`
}

// GetIotDeviceMessageFilterInput is an input type that accepts GetIotDeviceMessageFilterArgs and GetIotDeviceMessageFilterOutput values.
// You can construct a concrete instance of `GetIotDeviceMessageFilterInput` via:
//
//	GetIotDeviceMessageFilterArgs{...}
type GetIotDeviceMessageFilterInput interface {
	pulumi.Input

	ToGetIotDeviceMessageFilterOutput() GetIotDeviceMessageFilterOutput
	ToGetIotDeviceMessageFilterOutputWithContext(context.Context) GetIotDeviceMessageFilterOutput
}

type GetIotDeviceMessageFilterArgs struct {
	Publishes  GetIotDeviceMessageFilterPublishArrayInput   `pulumi:"publishes"`
	Subscribes GetIotDeviceMessageFilterSubscribeArrayInput `pulumi:"subscribes"`
}

func (GetIotDeviceMessageFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIotDeviceMessageFilter)(nil)).Elem()
}

func (i GetIotDeviceMessageFilterArgs) ToGetIotDeviceMessageFilterOutput() GetIotDeviceMessageFilterOutput {
	return i.ToGetIotDeviceMessageFilterOutputWithContext(context.Background())
}

func (i GetIotDeviceMessageFilterArgs) ToGetIotDeviceMessageFilterOutputWithContext(ctx context.Context) GetIotDeviceMessageFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIotDeviceMessageFilterOutput)
}

func (i GetIotDeviceMessageFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetIotDeviceMessageFilter] {
	return pulumix.Output[GetIotDeviceMessageFilter]{
		OutputState: i.ToGetIotDeviceMessageFilterOutputWithContext(ctx).OutputState,
	}
}

// GetIotDeviceMessageFilterArrayInput is an input type that accepts GetIotDeviceMessageFilterArray and GetIotDeviceMessageFilterArrayOutput values.
// You can construct a concrete instance of `GetIotDeviceMessageFilterArrayInput` via:
//
//	GetIotDeviceMessageFilterArray{ GetIotDeviceMessageFilterArgs{...} }
type GetIotDeviceMessageFilterArrayInput interface {
	pulumi.Input

	ToGetIotDeviceMessageFilterArrayOutput() GetIotDeviceMessageFilterArrayOutput
	ToGetIotDeviceMessageFilterArrayOutputWithContext(context.Context) GetIotDeviceMessageFilterArrayOutput
}

type GetIotDeviceMessageFilterArray []GetIotDeviceMessageFilterInput

func (GetIotDeviceMessageFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIotDeviceMessageFilter)(nil)).Elem()
}

func (i GetIotDeviceMessageFilterArray) ToGetIotDeviceMessageFilterArrayOutput() GetIotDeviceMessageFilterArrayOutput {
	return i.ToGetIotDeviceMessageFilterArrayOutputWithContext(context.Background())
}

func (i GetIotDeviceMessageFilterArray) ToGetIotDeviceMessageFilterArrayOutputWithContext(ctx context.Context) GetIotDeviceMessageFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIotDeviceMessageFilterArrayOutput)
}

func (i GetIotDeviceMessageFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetIotDeviceMessageFilter] {
	return pulumix.Output[[]GetIotDeviceMessageFilter]{
		OutputState: i.ToGetIotDeviceMessageFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetIotDeviceMessageFilterOutput struct{ *pulumi.OutputState }

func (GetIotDeviceMessageFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIotDeviceMessageFilter)(nil)).Elem()
}

func (o GetIotDeviceMessageFilterOutput) ToGetIotDeviceMessageFilterOutput() GetIotDeviceMessageFilterOutput {
	return o
}

func (o GetIotDeviceMessageFilterOutput) ToGetIotDeviceMessageFilterOutputWithContext(ctx context.Context) GetIotDeviceMessageFilterOutput {
	return o
}

func (o GetIotDeviceMessageFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetIotDeviceMessageFilter] {
	return pulumix.Output[GetIotDeviceMessageFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetIotDeviceMessageFilterOutput) Publishes() GetIotDeviceMessageFilterPublishArrayOutput {
	return o.ApplyT(func(v GetIotDeviceMessageFilter) []GetIotDeviceMessageFilterPublish { return v.Publishes }).(GetIotDeviceMessageFilterPublishArrayOutput)
}

func (o GetIotDeviceMessageFilterOutput) Subscribes() GetIotDeviceMessageFilterSubscribeArrayOutput {
	return o.ApplyT(func(v GetIotDeviceMessageFilter) []GetIotDeviceMessageFilterSubscribe { return v.Subscribes }).(GetIotDeviceMessageFilterSubscribeArrayOutput)
}

type GetIotDeviceMessageFilterArrayOutput struct{ *pulumi.OutputState }

func (GetIotDeviceMessageFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIotDeviceMessageFilter)(nil)).Elem()
}

func (o GetIotDeviceMessageFilterArrayOutput) ToGetIotDeviceMessageFilterArrayOutput() GetIotDeviceMessageFilterArrayOutput {
	return o
}

func (o GetIotDeviceMessageFilterArrayOutput) ToGetIotDeviceMessageFilterArrayOutputWithContext(ctx context.Context) GetIotDeviceMessageFilterArrayOutput {
	return o
}

func (o GetIotDeviceMessageFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetIotDeviceMessageFilter] {
	return pulumix.Output[[]GetIotDeviceMessageFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetIotDeviceMessageFilterArrayOutput) Index(i pulumi.IntInput) GetIotDeviceMessageFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIotDeviceMessageFilter {
		return vs[0].([]GetIotDeviceMessageFilter)[vs[1].(int)]
	}).(GetIotDeviceMessageFilterOutput)
}

type GetIotDeviceMessageFilterPublish struct {
	Policy string   `pulumi:"policy"`
	Topics []string `pulumi:"topics"`
}

// GetIotDeviceMessageFilterPublishInput is an input type that accepts GetIotDeviceMessageFilterPublishArgs and GetIotDeviceMessageFilterPublishOutput values.
// You can construct a concrete instance of `GetIotDeviceMessageFilterPublishInput` via:
//
//	GetIotDeviceMessageFilterPublishArgs{...}
type GetIotDeviceMessageFilterPublishInput interface {
	pulumi.Input

	ToGetIotDeviceMessageFilterPublishOutput() GetIotDeviceMessageFilterPublishOutput
	ToGetIotDeviceMessageFilterPublishOutputWithContext(context.Context) GetIotDeviceMessageFilterPublishOutput
}

type GetIotDeviceMessageFilterPublishArgs struct {
	Policy pulumi.StringInput      `pulumi:"policy"`
	Topics pulumi.StringArrayInput `pulumi:"topics"`
}

func (GetIotDeviceMessageFilterPublishArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIotDeviceMessageFilterPublish)(nil)).Elem()
}

func (i GetIotDeviceMessageFilterPublishArgs) ToGetIotDeviceMessageFilterPublishOutput() GetIotDeviceMessageFilterPublishOutput {
	return i.ToGetIotDeviceMessageFilterPublishOutputWithContext(context.Background())
}

func (i GetIotDeviceMessageFilterPublishArgs) ToGetIotDeviceMessageFilterPublishOutputWithContext(ctx context.Context) GetIotDeviceMessageFilterPublishOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIotDeviceMessageFilterPublishOutput)
}

func (i GetIotDeviceMessageFilterPublishArgs) ToOutput(ctx context.Context) pulumix.Output[GetIotDeviceMessageFilterPublish] {
	return pulumix.Output[GetIotDeviceMessageFilterPublish]{
		OutputState: i.ToGetIotDeviceMessageFilterPublishOutputWithContext(ctx).OutputState,
	}
}

// GetIotDeviceMessageFilterPublishArrayInput is an input type that accepts GetIotDeviceMessageFilterPublishArray and GetIotDeviceMessageFilterPublishArrayOutput values.
// You can construct a concrete instance of `GetIotDeviceMessageFilterPublishArrayInput` via:
//
//	GetIotDeviceMessageFilterPublishArray{ GetIotDeviceMessageFilterPublishArgs{...} }
type GetIotDeviceMessageFilterPublishArrayInput interface {
	pulumi.Input

	ToGetIotDeviceMessageFilterPublishArrayOutput() GetIotDeviceMessageFilterPublishArrayOutput
	ToGetIotDeviceMessageFilterPublishArrayOutputWithContext(context.Context) GetIotDeviceMessageFilterPublishArrayOutput
}

type GetIotDeviceMessageFilterPublishArray []GetIotDeviceMessageFilterPublishInput

func (GetIotDeviceMessageFilterPublishArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIotDeviceMessageFilterPublish)(nil)).Elem()
}

func (i GetIotDeviceMessageFilterPublishArray) ToGetIotDeviceMessageFilterPublishArrayOutput() GetIotDeviceMessageFilterPublishArrayOutput {
	return i.ToGetIotDeviceMessageFilterPublishArrayOutputWithContext(context.Background())
}

func (i GetIotDeviceMessageFilterPublishArray) ToGetIotDeviceMessageFilterPublishArrayOutputWithContext(ctx context.Context) GetIotDeviceMessageFilterPublishArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIotDeviceMessageFilterPublishArrayOutput)
}

func (i GetIotDeviceMessageFilterPublishArray) ToOutput(ctx context.Context) pulumix.Output[[]GetIotDeviceMessageFilterPublish] {
	return pulumix.Output[[]GetIotDeviceMessageFilterPublish]{
		OutputState: i.ToGetIotDeviceMessageFilterPublishArrayOutputWithContext(ctx).OutputState,
	}
}

type GetIotDeviceMessageFilterPublishOutput struct{ *pulumi.OutputState }

func (GetIotDeviceMessageFilterPublishOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIotDeviceMessageFilterPublish)(nil)).Elem()
}

func (o GetIotDeviceMessageFilterPublishOutput) ToGetIotDeviceMessageFilterPublishOutput() GetIotDeviceMessageFilterPublishOutput {
	return o
}

func (o GetIotDeviceMessageFilterPublishOutput) ToGetIotDeviceMessageFilterPublishOutputWithContext(ctx context.Context) GetIotDeviceMessageFilterPublishOutput {
	return o
}

func (o GetIotDeviceMessageFilterPublishOutput) ToOutput(ctx context.Context) pulumix.Output[GetIotDeviceMessageFilterPublish] {
	return pulumix.Output[GetIotDeviceMessageFilterPublish]{
		OutputState: o.OutputState,
	}
}

func (o GetIotDeviceMessageFilterPublishOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v GetIotDeviceMessageFilterPublish) string { return v.Policy }).(pulumi.StringOutput)
}

func (o GetIotDeviceMessageFilterPublishOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIotDeviceMessageFilterPublish) []string { return v.Topics }).(pulumi.StringArrayOutput)
}

type GetIotDeviceMessageFilterPublishArrayOutput struct{ *pulumi.OutputState }

func (GetIotDeviceMessageFilterPublishArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIotDeviceMessageFilterPublish)(nil)).Elem()
}

func (o GetIotDeviceMessageFilterPublishArrayOutput) ToGetIotDeviceMessageFilterPublishArrayOutput() GetIotDeviceMessageFilterPublishArrayOutput {
	return o
}

func (o GetIotDeviceMessageFilterPublishArrayOutput) ToGetIotDeviceMessageFilterPublishArrayOutputWithContext(ctx context.Context) GetIotDeviceMessageFilterPublishArrayOutput {
	return o
}

func (o GetIotDeviceMessageFilterPublishArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetIotDeviceMessageFilterPublish] {
	return pulumix.Output[[]GetIotDeviceMessageFilterPublish]{
		OutputState: o.OutputState,
	}
}

func (o GetIotDeviceMessageFilterPublishArrayOutput) Index(i pulumi.IntInput) GetIotDeviceMessageFilterPublishOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIotDeviceMessageFilterPublish {
		return vs[0].([]GetIotDeviceMessageFilterPublish)[vs[1].(int)]
	}).(GetIotDeviceMessageFilterPublishOutput)
}

type GetIotDeviceMessageFilterSubscribe struct {
	Policy string   `pulumi:"policy"`
	Topics []string `pulumi:"topics"`
}

// GetIotDeviceMessageFilterSubscribeInput is an input type that accepts GetIotDeviceMessageFilterSubscribeArgs and GetIotDeviceMessageFilterSubscribeOutput values.
// You can construct a concrete instance of `GetIotDeviceMessageFilterSubscribeInput` via:
//
//	GetIotDeviceMessageFilterSubscribeArgs{...}
type GetIotDeviceMessageFilterSubscribeInput interface {
	pulumi.Input

	ToGetIotDeviceMessageFilterSubscribeOutput() GetIotDeviceMessageFilterSubscribeOutput
	ToGetIotDeviceMessageFilterSubscribeOutputWithContext(context.Context) GetIotDeviceMessageFilterSubscribeOutput
}

type GetIotDeviceMessageFilterSubscribeArgs struct {
	Policy pulumi.StringInput      `pulumi:"policy"`
	Topics pulumi.StringArrayInput `pulumi:"topics"`
}

func (GetIotDeviceMessageFilterSubscribeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIotDeviceMessageFilterSubscribe)(nil)).Elem()
}

func (i GetIotDeviceMessageFilterSubscribeArgs) ToGetIotDeviceMessageFilterSubscribeOutput() GetIotDeviceMessageFilterSubscribeOutput {
	return i.ToGetIotDeviceMessageFilterSubscribeOutputWithContext(context.Background())
}

func (i GetIotDeviceMessageFilterSubscribeArgs) ToGetIotDeviceMessageFilterSubscribeOutputWithContext(ctx context.Context) GetIotDeviceMessageFilterSubscribeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIotDeviceMessageFilterSubscribeOutput)
}

func (i GetIotDeviceMessageFilterSubscribeArgs) ToOutput(ctx context.Context) pulumix.Output[GetIotDeviceMessageFilterSubscribe] {
	return pulumix.Output[GetIotDeviceMessageFilterSubscribe]{
		OutputState: i.ToGetIotDeviceMessageFilterSubscribeOutputWithContext(ctx).OutputState,
	}
}

// GetIotDeviceMessageFilterSubscribeArrayInput is an input type that accepts GetIotDeviceMessageFilterSubscribeArray and GetIotDeviceMessageFilterSubscribeArrayOutput values.
// You can construct a concrete instance of `GetIotDeviceMessageFilterSubscribeArrayInput` via:
//
//	GetIotDeviceMessageFilterSubscribeArray{ GetIotDeviceMessageFilterSubscribeArgs{...} }
type GetIotDeviceMessageFilterSubscribeArrayInput interface {
	pulumi.Input

	ToGetIotDeviceMessageFilterSubscribeArrayOutput() GetIotDeviceMessageFilterSubscribeArrayOutput
	ToGetIotDeviceMessageFilterSubscribeArrayOutputWithContext(context.Context) GetIotDeviceMessageFilterSubscribeArrayOutput
}

type GetIotDeviceMessageFilterSubscribeArray []GetIotDeviceMessageFilterSubscribeInput

func (GetIotDeviceMessageFilterSubscribeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIotDeviceMessageFilterSubscribe)(nil)).Elem()
}

func (i GetIotDeviceMessageFilterSubscribeArray) ToGetIotDeviceMessageFilterSubscribeArrayOutput() GetIotDeviceMessageFilterSubscribeArrayOutput {
	return i.ToGetIotDeviceMessageFilterSubscribeArrayOutputWithContext(context.Background())
}

func (i GetIotDeviceMessageFilterSubscribeArray) ToGetIotDeviceMessageFilterSubscribeArrayOutputWithContext(ctx context.Context) GetIotDeviceMessageFilterSubscribeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIotDeviceMessageFilterSubscribeArrayOutput)
}

func (i GetIotDeviceMessageFilterSubscribeArray) ToOutput(ctx context.Context) pulumix.Output[[]GetIotDeviceMessageFilterSubscribe] {
	return pulumix.Output[[]GetIotDeviceMessageFilterSubscribe]{
		OutputState: i.ToGetIotDeviceMessageFilterSubscribeArrayOutputWithContext(ctx).OutputState,
	}
}

type GetIotDeviceMessageFilterSubscribeOutput struct{ *pulumi.OutputState }

func (GetIotDeviceMessageFilterSubscribeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIotDeviceMessageFilterSubscribe)(nil)).Elem()
}

func (o GetIotDeviceMessageFilterSubscribeOutput) ToGetIotDeviceMessageFilterSubscribeOutput() GetIotDeviceMessageFilterSubscribeOutput {
	return o
}

func (o GetIotDeviceMessageFilterSubscribeOutput) ToGetIotDeviceMessageFilterSubscribeOutputWithContext(ctx context.Context) GetIotDeviceMessageFilterSubscribeOutput {
	return o
}

func (o GetIotDeviceMessageFilterSubscribeOutput) ToOutput(ctx context.Context) pulumix.Output[GetIotDeviceMessageFilterSubscribe] {
	return pulumix.Output[GetIotDeviceMessageFilterSubscribe]{
		OutputState: o.OutputState,
	}
}

func (o GetIotDeviceMessageFilterSubscribeOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v GetIotDeviceMessageFilterSubscribe) string { return v.Policy }).(pulumi.StringOutput)
}

func (o GetIotDeviceMessageFilterSubscribeOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIotDeviceMessageFilterSubscribe) []string { return v.Topics }).(pulumi.StringArrayOutput)
}

type GetIotDeviceMessageFilterSubscribeArrayOutput struct{ *pulumi.OutputState }

func (GetIotDeviceMessageFilterSubscribeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIotDeviceMessageFilterSubscribe)(nil)).Elem()
}

func (o GetIotDeviceMessageFilterSubscribeArrayOutput) ToGetIotDeviceMessageFilterSubscribeArrayOutput() GetIotDeviceMessageFilterSubscribeArrayOutput {
	return o
}

func (o GetIotDeviceMessageFilterSubscribeArrayOutput) ToGetIotDeviceMessageFilterSubscribeArrayOutputWithContext(ctx context.Context) GetIotDeviceMessageFilterSubscribeArrayOutput {
	return o
}

func (o GetIotDeviceMessageFilterSubscribeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetIotDeviceMessageFilterSubscribe] {
	return pulumix.Output[[]GetIotDeviceMessageFilterSubscribe]{
		OutputState: o.OutputState,
	}
}

func (o GetIotDeviceMessageFilterSubscribeArrayOutput) Index(i pulumi.IntInput) GetIotDeviceMessageFilterSubscribeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIotDeviceMessageFilterSubscribe {
		return vs[0].([]GetIotDeviceMessageFilterSubscribe)[vs[1].(int)]
	}).(GetIotDeviceMessageFilterSubscribeOutput)
}

type GetIpamIpResource struct {
	// The ID of the resource that the IP is bound to.
	Id *string `pulumi:"id"`
	// The type of the resource to get the IP from. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1alpha1#pkg-constants) with type list.
	Type *string `pulumi:"type"`
}

// GetIpamIpResourceInput is an input type that accepts GetIpamIpResourceArgs and GetIpamIpResourceOutput values.
// You can construct a concrete instance of `GetIpamIpResourceInput` via:
//
//	GetIpamIpResourceArgs{...}
type GetIpamIpResourceInput interface {
	pulumi.Input

	ToGetIpamIpResourceOutput() GetIpamIpResourceOutput
	ToGetIpamIpResourceOutputWithContext(context.Context) GetIpamIpResourceOutput
}

type GetIpamIpResourceArgs struct {
	// The ID of the resource that the IP is bound to.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of the resource to get the IP from. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1alpha1#pkg-constants) with type list.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GetIpamIpResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpamIpResource)(nil)).Elem()
}

func (i GetIpamIpResourceArgs) ToGetIpamIpResourceOutput() GetIpamIpResourceOutput {
	return i.ToGetIpamIpResourceOutputWithContext(context.Background())
}

func (i GetIpamIpResourceArgs) ToGetIpamIpResourceOutputWithContext(ctx context.Context) GetIpamIpResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpamIpResourceOutput)
}

func (i GetIpamIpResourceArgs) ToOutput(ctx context.Context) pulumix.Output[GetIpamIpResource] {
	return pulumix.Output[GetIpamIpResource]{
		OutputState: i.ToGetIpamIpResourceOutputWithContext(ctx).OutputState,
	}
}

func (i GetIpamIpResourceArgs) ToGetIpamIpResourcePtrOutput() GetIpamIpResourcePtrOutput {
	return i.ToGetIpamIpResourcePtrOutputWithContext(context.Background())
}

func (i GetIpamIpResourceArgs) ToGetIpamIpResourcePtrOutputWithContext(ctx context.Context) GetIpamIpResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpamIpResourceOutput).ToGetIpamIpResourcePtrOutputWithContext(ctx)
}

// GetIpamIpResourcePtrInput is an input type that accepts GetIpamIpResourceArgs, GetIpamIpResourcePtr and GetIpamIpResourcePtrOutput values.
// You can construct a concrete instance of `GetIpamIpResourcePtrInput` via:
//
//	        GetIpamIpResourceArgs{...}
//
//	or:
//
//	        nil
type GetIpamIpResourcePtrInput interface {
	pulumi.Input

	ToGetIpamIpResourcePtrOutput() GetIpamIpResourcePtrOutput
	ToGetIpamIpResourcePtrOutputWithContext(context.Context) GetIpamIpResourcePtrOutput
}

type getIpamIpResourcePtrType GetIpamIpResourceArgs

func GetIpamIpResourcePtr(v *GetIpamIpResourceArgs) GetIpamIpResourcePtrInput {
	return (*getIpamIpResourcePtrType)(v)
}

func (*getIpamIpResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetIpamIpResource)(nil)).Elem()
}

func (i *getIpamIpResourcePtrType) ToGetIpamIpResourcePtrOutput() GetIpamIpResourcePtrOutput {
	return i.ToGetIpamIpResourcePtrOutputWithContext(context.Background())
}

func (i *getIpamIpResourcePtrType) ToGetIpamIpResourcePtrOutputWithContext(ctx context.Context) GetIpamIpResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpamIpResourcePtrOutput)
}

func (i *getIpamIpResourcePtrType) ToOutput(ctx context.Context) pulumix.Output[*GetIpamIpResource] {
	return pulumix.Output[*GetIpamIpResource]{
		OutputState: i.ToGetIpamIpResourcePtrOutputWithContext(ctx).OutputState,
	}
}

type GetIpamIpResourceOutput struct{ *pulumi.OutputState }

func (GetIpamIpResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpamIpResource)(nil)).Elem()
}

func (o GetIpamIpResourceOutput) ToGetIpamIpResourceOutput() GetIpamIpResourceOutput {
	return o
}

func (o GetIpamIpResourceOutput) ToGetIpamIpResourceOutputWithContext(ctx context.Context) GetIpamIpResourceOutput {
	return o
}

func (o GetIpamIpResourceOutput) ToGetIpamIpResourcePtrOutput() GetIpamIpResourcePtrOutput {
	return o.ToGetIpamIpResourcePtrOutputWithContext(context.Background())
}

func (o GetIpamIpResourceOutput) ToGetIpamIpResourcePtrOutputWithContext(ctx context.Context) GetIpamIpResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetIpamIpResource) *GetIpamIpResource {
		return &v
	}).(GetIpamIpResourcePtrOutput)
}

func (o GetIpamIpResourceOutput) ToOutput(ctx context.Context) pulumix.Output[GetIpamIpResource] {
	return pulumix.Output[GetIpamIpResource]{
		OutputState: o.OutputState,
	}
}

// The ID of the resource that the IP is bound to.
func (o GetIpamIpResourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIpamIpResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of the resource to get the IP from. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1alpha1#pkg-constants) with type list.
func (o GetIpamIpResourceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIpamIpResource) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GetIpamIpResourcePtrOutput struct{ *pulumi.OutputState }

func (GetIpamIpResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetIpamIpResource)(nil)).Elem()
}

func (o GetIpamIpResourcePtrOutput) ToGetIpamIpResourcePtrOutput() GetIpamIpResourcePtrOutput {
	return o
}

func (o GetIpamIpResourcePtrOutput) ToGetIpamIpResourcePtrOutputWithContext(ctx context.Context) GetIpamIpResourcePtrOutput {
	return o
}

func (o GetIpamIpResourcePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetIpamIpResource] {
	return pulumix.Output[*GetIpamIpResource]{
		OutputState: o.OutputState,
	}
}

func (o GetIpamIpResourcePtrOutput) Elem() GetIpamIpResourceOutput {
	return o.ApplyT(func(v *GetIpamIpResource) GetIpamIpResource {
		if v != nil {
			return *v
		}
		var ret GetIpamIpResource
		return ret
	}).(GetIpamIpResourceOutput)
}

// The ID of the resource that the IP is bound to.
func (o GetIpamIpResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetIpamIpResource) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The type of the resource to get the IP from. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1alpha1#pkg-constants) with type list.
func (o GetIpamIpResourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetIpamIpResource) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type GetK8sClusterAutoUpgrade struct {
	// True if Kubernetes patch version auto upgrades is enabled.
	Enable bool `pulumi:"enable"`
	// The day of the auto upgrade maintenance window (`monday` to `sunday`, or `any`).
	MaintenanceWindowDay string `pulumi:"maintenanceWindowDay"`
	// The start hour (UTC) of the 2-hour auto upgrade maintenance window (0 to 23).
	MaintenanceWindowStartHour int `pulumi:"maintenanceWindowStartHour"`
}

// GetK8sClusterAutoUpgradeInput is an input type that accepts GetK8sClusterAutoUpgradeArgs and GetK8sClusterAutoUpgradeOutput values.
// You can construct a concrete instance of `GetK8sClusterAutoUpgradeInput` via:
//
//	GetK8sClusterAutoUpgradeArgs{...}
type GetK8sClusterAutoUpgradeInput interface {
	pulumi.Input

	ToGetK8sClusterAutoUpgradeOutput() GetK8sClusterAutoUpgradeOutput
	ToGetK8sClusterAutoUpgradeOutputWithContext(context.Context) GetK8sClusterAutoUpgradeOutput
}

type GetK8sClusterAutoUpgradeArgs struct {
	// True if Kubernetes patch version auto upgrades is enabled.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// The day of the auto upgrade maintenance window (`monday` to `sunday`, or `any`).
	MaintenanceWindowDay pulumi.StringInput `pulumi:"maintenanceWindowDay"`
	// The start hour (UTC) of the 2-hour auto upgrade maintenance window (0 to 23).
	MaintenanceWindowStartHour pulumi.IntInput `pulumi:"maintenanceWindowStartHour"`
}

func (GetK8sClusterAutoUpgradeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetK8sClusterAutoUpgrade)(nil)).Elem()
}

func (i GetK8sClusterAutoUpgradeArgs) ToGetK8sClusterAutoUpgradeOutput() GetK8sClusterAutoUpgradeOutput {
	return i.ToGetK8sClusterAutoUpgradeOutputWithContext(context.Background())
}

func (i GetK8sClusterAutoUpgradeArgs) ToGetK8sClusterAutoUpgradeOutputWithContext(ctx context.Context) GetK8sClusterAutoUpgradeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetK8sClusterAutoUpgradeOutput)
}

func (i GetK8sClusterAutoUpgradeArgs) ToOutput(ctx context.Context) pulumix.Output[GetK8sClusterAutoUpgrade] {
	return pulumix.Output[GetK8sClusterAutoUpgrade]{
		OutputState: i.ToGetK8sClusterAutoUpgradeOutputWithContext(ctx).OutputState,
	}
}

// GetK8sClusterAutoUpgradeArrayInput is an input type that accepts GetK8sClusterAutoUpgradeArray and GetK8sClusterAutoUpgradeArrayOutput values.
// You can construct a concrete instance of `GetK8sClusterAutoUpgradeArrayInput` via:
//
//	GetK8sClusterAutoUpgradeArray{ GetK8sClusterAutoUpgradeArgs{...} }
type GetK8sClusterAutoUpgradeArrayInput interface {
	pulumi.Input

	ToGetK8sClusterAutoUpgradeArrayOutput() GetK8sClusterAutoUpgradeArrayOutput
	ToGetK8sClusterAutoUpgradeArrayOutputWithContext(context.Context) GetK8sClusterAutoUpgradeArrayOutput
}

type GetK8sClusterAutoUpgradeArray []GetK8sClusterAutoUpgradeInput

func (GetK8sClusterAutoUpgradeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetK8sClusterAutoUpgrade)(nil)).Elem()
}

func (i GetK8sClusterAutoUpgradeArray) ToGetK8sClusterAutoUpgradeArrayOutput() GetK8sClusterAutoUpgradeArrayOutput {
	return i.ToGetK8sClusterAutoUpgradeArrayOutputWithContext(context.Background())
}

func (i GetK8sClusterAutoUpgradeArray) ToGetK8sClusterAutoUpgradeArrayOutputWithContext(ctx context.Context) GetK8sClusterAutoUpgradeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetK8sClusterAutoUpgradeArrayOutput)
}

func (i GetK8sClusterAutoUpgradeArray) ToOutput(ctx context.Context) pulumix.Output[[]GetK8sClusterAutoUpgrade] {
	return pulumix.Output[[]GetK8sClusterAutoUpgrade]{
		OutputState: i.ToGetK8sClusterAutoUpgradeArrayOutputWithContext(ctx).OutputState,
	}
}

type GetK8sClusterAutoUpgradeOutput struct{ *pulumi.OutputState }

func (GetK8sClusterAutoUpgradeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetK8sClusterAutoUpgrade)(nil)).Elem()
}

func (o GetK8sClusterAutoUpgradeOutput) ToGetK8sClusterAutoUpgradeOutput() GetK8sClusterAutoUpgradeOutput {
	return o
}

func (o GetK8sClusterAutoUpgradeOutput) ToGetK8sClusterAutoUpgradeOutputWithContext(ctx context.Context) GetK8sClusterAutoUpgradeOutput {
	return o
}

func (o GetK8sClusterAutoUpgradeOutput) ToOutput(ctx context.Context) pulumix.Output[GetK8sClusterAutoUpgrade] {
	return pulumix.Output[GetK8sClusterAutoUpgrade]{
		OutputState: o.OutputState,
	}
}

// True if Kubernetes patch version auto upgrades is enabled.
func (o GetK8sClusterAutoUpgradeOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetK8sClusterAutoUpgrade) bool { return v.Enable }).(pulumi.BoolOutput)
}

// The day of the auto upgrade maintenance window (`monday` to `sunday`, or `any`).
func (o GetK8sClusterAutoUpgradeOutput) MaintenanceWindowDay() pulumi.StringOutput {
	return o.ApplyT(func(v GetK8sClusterAutoUpgrade) string { return v.MaintenanceWindowDay }).(pulumi.StringOutput)
}

// The start hour (UTC) of the 2-hour auto upgrade maintenance window (0 to 23).
func (o GetK8sClusterAutoUpgradeOutput) MaintenanceWindowStartHour() pulumi.IntOutput {
	return o.ApplyT(func(v GetK8sClusterAutoUpgrade) int { return v.MaintenanceWindowStartHour }).(pulumi.IntOutput)
}

type GetK8sClusterAutoUpgradeArrayOutput struct{ *pulumi.OutputState }

func (GetK8sClusterAutoUpgradeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetK8sClusterAutoUpgrade)(nil)).Elem()
}

func (o GetK8sClusterAutoUpgradeArrayOutput) ToGetK8sClusterAutoUpgradeArrayOutput() GetK8sClusterAutoUpgradeArrayOutput {
	return o
}

func (o GetK8sClusterAutoUpgradeArrayOutput) ToGetK8sClusterAutoUpgradeArrayOutputWithContext(ctx context.Context) GetK8sClusterAutoUpgradeArrayOutput {
	return o
}

func (o GetK8sClusterAutoUpgradeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetK8sClusterAutoUpgrade] {
	return pulumix.Output[[]GetK8sClusterAutoUpgrade]{
		OutputState: o.OutputState,
	}
}

func (o GetK8sClusterAutoUpgradeArrayOutput) Index(i pulumi.IntInput) GetK8sClusterAutoUpgradeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetK8sClusterAutoUpgrade {
		return vs[0].([]GetK8sClusterAutoUpgrade)[vs[1].(int)]
	}).(GetK8sClusterAutoUpgradeOutput)
}

type GetK8sClusterAutoscalerConfig struct {
	// True if detecting similar node groups and balance the number of nodes between them is enabled.
	BalanceSimilarNodeGroups bool `pulumi:"balanceSimilarNodeGroups"`
	// True if the scale down feature of the autoscaler is disabled.
	DisableScaleDown bool `pulumi:"disableScaleDown"`
	// The type of resource estimator used in scale up.
	Estimator string `pulumi:"estimator"`
	// The type of node group expander be used in scale up.
	Expander string `pulumi:"expander"`
	// Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don't cause scale up. Pods with null priority (PodPriority disabled) are non expendable.
	ExpendablePodsPriorityCutoff int `pulumi:"expendablePodsPriorityCutoff"`
	// True if ignoring DaemonSet pods when calculating resource utilization for scaling down is enabled.
	IgnoreDaemonsetsUtilization bool `pulumi:"ignoreDaemonsetsUtilization"`
	MaxGracefulTerminationSec   int  `pulumi:"maxGracefulTerminationSec"`
	// The duration after scale up that scale down evaluation resumes.
	ScaleDownDelayAfterAdd string `pulumi:"scaleDownDelayAfterAdd"`
	// The duration a node should be unneeded before it is eligible for scale down.
	ScaleDownUnneededTime         string  `pulumi:"scaleDownUnneededTime"`
	ScaleDownUtilizationThreshold float64 `pulumi:"scaleDownUtilizationThreshold"`
}

// GetK8sClusterAutoscalerConfigInput is an input type that accepts GetK8sClusterAutoscalerConfigArgs and GetK8sClusterAutoscalerConfigOutput values.
// You can construct a concrete instance of `GetK8sClusterAutoscalerConfigInput` via:
//
//	GetK8sClusterAutoscalerConfigArgs{...}
type GetK8sClusterAutoscalerConfigInput interface {
	pulumi.Input

	ToGetK8sClusterAutoscalerConfigOutput() GetK8sClusterAutoscalerConfigOutput
	ToGetK8sClusterAutoscalerConfigOutputWithContext(context.Context) GetK8sClusterAutoscalerConfigOutput
}

type GetK8sClusterAutoscalerConfigArgs struct {
	// True if detecting similar node groups and balance the number of nodes between them is enabled.
	BalanceSimilarNodeGroups pulumi.BoolInput `pulumi:"balanceSimilarNodeGroups"`
	// True if the scale down feature of the autoscaler is disabled.
	DisableScaleDown pulumi.BoolInput `pulumi:"disableScaleDown"`
	// The type of resource estimator used in scale up.
	Estimator pulumi.StringInput `pulumi:"estimator"`
	// The type of node group expander be used in scale up.
	Expander pulumi.StringInput `pulumi:"expander"`
	// Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don't cause scale up. Pods with null priority (PodPriority disabled) are non expendable.
	ExpendablePodsPriorityCutoff pulumi.IntInput `pulumi:"expendablePodsPriorityCutoff"`
	// True if ignoring DaemonSet pods when calculating resource utilization for scaling down is enabled.
	IgnoreDaemonsetsUtilization pulumi.BoolInput `pulumi:"ignoreDaemonsetsUtilization"`
	MaxGracefulTerminationSec   pulumi.IntInput  `pulumi:"maxGracefulTerminationSec"`
	// The duration after scale up that scale down evaluation resumes.
	ScaleDownDelayAfterAdd pulumi.StringInput `pulumi:"scaleDownDelayAfterAdd"`
	// The duration a node should be unneeded before it is eligible for scale down.
	ScaleDownUnneededTime         pulumi.StringInput  `pulumi:"scaleDownUnneededTime"`
	ScaleDownUtilizationThreshold pulumi.Float64Input `pulumi:"scaleDownUtilizationThreshold"`
}

func (GetK8sClusterAutoscalerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetK8sClusterAutoscalerConfig)(nil)).Elem()
}

func (i GetK8sClusterAutoscalerConfigArgs) ToGetK8sClusterAutoscalerConfigOutput() GetK8sClusterAutoscalerConfigOutput {
	return i.ToGetK8sClusterAutoscalerConfigOutputWithContext(context.Background())
}

func (i GetK8sClusterAutoscalerConfigArgs) ToGetK8sClusterAutoscalerConfigOutputWithContext(ctx context.Context) GetK8sClusterAutoscalerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetK8sClusterAutoscalerConfigOutput)
}

func (i GetK8sClusterAutoscalerConfigArgs) ToOutput(ctx context.Context) pulumix.Output[GetK8sClusterAutoscalerConfig] {
	return pulumix.Output[GetK8sClusterAutoscalerConfig]{
		OutputState: i.ToGetK8sClusterAutoscalerConfigOutputWithContext(ctx).OutputState,
	}
}

// GetK8sClusterAutoscalerConfigArrayInput is an input type that accepts GetK8sClusterAutoscalerConfigArray and GetK8sClusterAutoscalerConfigArrayOutput values.
// You can construct a concrete instance of `GetK8sClusterAutoscalerConfigArrayInput` via:
//
//	GetK8sClusterAutoscalerConfigArray{ GetK8sClusterAutoscalerConfigArgs{...} }
type GetK8sClusterAutoscalerConfigArrayInput interface {
	pulumi.Input

	ToGetK8sClusterAutoscalerConfigArrayOutput() GetK8sClusterAutoscalerConfigArrayOutput
	ToGetK8sClusterAutoscalerConfigArrayOutputWithContext(context.Context) GetK8sClusterAutoscalerConfigArrayOutput
}

type GetK8sClusterAutoscalerConfigArray []GetK8sClusterAutoscalerConfigInput

func (GetK8sClusterAutoscalerConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetK8sClusterAutoscalerConfig)(nil)).Elem()
}

func (i GetK8sClusterAutoscalerConfigArray) ToGetK8sClusterAutoscalerConfigArrayOutput() GetK8sClusterAutoscalerConfigArrayOutput {
	return i.ToGetK8sClusterAutoscalerConfigArrayOutputWithContext(context.Background())
}

func (i GetK8sClusterAutoscalerConfigArray) ToGetK8sClusterAutoscalerConfigArrayOutputWithContext(ctx context.Context) GetK8sClusterAutoscalerConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetK8sClusterAutoscalerConfigArrayOutput)
}

func (i GetK8sClusterAutoscalerConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]GetK8sClusterAutoscalerConfig] {
	return pulumix.Output[[]GetK8sClusterAutoscalerConfig]{
		OutputState: i.ToGetK8sClusterAutoscalerConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type GetK8sClusterAutoscalerConfigOutput struct{ *pulumi.OutputState }

func (GetK8sClusterAutoscalerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetK8sClusterAutoscalerConfig)(nil)).Elem()
}

func (o GetK8sClusterAutoscalerConfigOutput) ToGetK8sClusterAutoscalerConfigOutput() GetK8sClusterAutoscalerConfigOutput {
	return o
}

func (o GetK8sClusterAutoscalerConfigOutput) ToGetK8sClusterAutoscalerConfigOutputWithContext(ctx context.Context) GetK8sClusterAutoscalerConfigOutput {
	return o
}

func (o GetK8sClusterAutoscalerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetK8sClusterAutoscalerConfig] {
	return pulumix.Output[GetK8sClusterAutoscalerConfig]{
		OutputState: o.OutputState,
	}
}

// True if detecting similar node groups and balance the number of nodes between them is enabled.
func (o GetK8sClusterAutoscalerConfigOutput) BalanceSimilarNodeGroups() pulumi.BoolOutput {
	return o.ApplyT(func(v GetK8sClusterAutoscalerConfig) bool { return v.BalanceSimilarNodeGroups }).(pulumi.BoolOutput)
}

// True if the scale down feature of the autoscaler is disabled.
func (o GetK8sClusterAutoscalerConfigOutput) DisableScaleDown() pulumi.BoolOutput {
	return o.ApplyT(func(v GetK8sClusterAutoscalerConfig) bool { return v.DisableScaleDown }).(pulumi.BoolOutput)
}

// The type of resource estimator used in scale up.
func (o GetK8sClusterAutoscalerConfigOutput) Estimator() pulumi.StringOutput {
	return o.ApplyT(func(v GetK8sClusterAutoscalerConfig) string { return v.Estimator }).(pulumi.StringOutput)
}

// The type of node group expander be used in scale up.
func (o GetK8sClusterAutoscalerConfigOutput) Expander() pulumi.StringOutput {
	return o.ApplyT(func(v GetK8sClusterAutoscalerConfig) string { return v.Expander }).(pulumi.StringOutput)
}

// Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don't cause scale up. Pods with null priority (PodPriority disabled) are non expendable.
func (o GetK8sClusterAutoscalerConfigOutput) ExpendablePodsPriorityCutoff() pulumi.IntOutput {
	return o.ApplyT(func(v GetK8sClusterAutoscalerConfig) int { return v.ExpendablePodsPriorityCutoff }).(pulumi.IntOutput)
}

// True if ignoring DaemonSet pods when calculating resource utilization for scaling down is enabled.
func (o GetK8sClusterAutoscalerConfigOutput) IgnoreDaemonsetsUtilization() pulumi.BoolOutput {
	return o.ApplyT(func(v GetK8sClusterAutoscalerConfig) bool { return v.IgnoreDaemonsetsUtilization }).(pulumi.BoolOutput)
}

func (o GetK8sClusterAutoscalerConfigOutput) MaxGracefulTerminationSec() pulumi.IntOutput {
	return o.ApplyT(func(v GetK8sClusterAutoscalerConfig) int { return v.MaxGracefulTerminationSec }).(pulumi.IntOutput)
}

// The duration after scale up that scale down evaluation resumes.
func (o GetK8sClusterAutoscalerConfigOutput) ScaleDownDelayAfterAdd() pulumi.StringOutput {
	return o.ApplyT(func(v GetK8sClusterAutoscalerConfig) string { return v.ScaleDownDelayAfterAdd }).(pulumi.StringOutput)
}

// The duration a node should be unneeded before it is eligible for scale down.
func (o GetK8sClusterAutoscalerConfigOutput) ScaleDownUnneededTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetK8sClusterAutoscalerConfig) string { return v.ScaleDownUnneededTime }).(pulumi.StringOutput)
}

func (o GetK8sClusterAutoscalerConfigOutput) ScaleDownUtilizationThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v GetK8sClusterAutoscalerConfig) float64 { return v.ScaleDownUtilizationThreshold }).(pulumi.Float64Output)
}

type GetK8sClusterAutoscalerConfigArrayOutput struct{ *pulumi.OutputState }

func (GetK8sClusterAutoscalerConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetK8sClusterAutoscalerConfig)(nil)).Elem()
}

func (o GetK8sClusterAutoscalerConfigArrayOutput) ToGetK8sClusterAutoscalerConfigArrayOutput() GetK8sClusterAutoscalerConfigArrayOutput {
	return o
}

func (o GetK8sClusterAutoscalerConfigArrayOutput) ToGetK8sClusterAutoscalerConfigArrayOutputWithContext(ctx context.Context) GetK8sClusterAutoscalerConfigArrayOutput {
	return o
}

func (o GetK8sClusterAutoscalerConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetK8sClusterAutoscalerConfig] {
	return pulumix.Output[[]GetK8sClusterAutoscalerConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetK8sClusterAutoscalerConfigArrayOutput) Index(i pulumi.IntInput) GetK8sClusterAutoscalerConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetK8sClusterAutoscalerConfig {
		return vs[0].([]GetK8sClusterAutoscalerConfig)[vs[1].(int)]
	}).(GetK8sClusterAutoscalerConfigOutput)
}

type GetK8sClusterKubeconfig struct {
	// The CA certificate of the Kubernetes API server.
	ClusterCaCertificate string `pulumi:"clusterCaCertificate"`
	// The raw kubeconfig file.
	ConfigFile string `pulumi:"configFile"`
	// The URL of the Kubernetes API server.
	Host string `pulumi:"host"`
	// The token to connect to the Kubernetes API server.
	Token string `pulumi:"token"`
}

// GetK8sClusterKubeconfigInput is an input type that accepts GetK8sClusterKubeconfigArgs and GetK8sClusterKubeconfigOutput values.
// You can construct a concrete instance of `GetK8sClusterKubeconfigInput` via:
//
//	GetK8sClusterKubeconfigArgs{...}
type GetK8sClusterKubeconfigInput interface {
	pulumi.Input

	ToGetK8sClusterKubeconfigOutput() GetK8sClusterKubeconfigOutput
	ToGetK8sClusterKubeconfigOutputWithContext(context.Context) GetK8sClusterKubeconfigOutput
}

type GetK8sClusterKubeconfigArgs struct {
	// The CA certificate of the Kubernetes API server.
	ClusterCaCertificate pulumi.StringInput `pulumi:"clusterCaCertificate"`
	// The raw kubeconfig file.
	ConfigFile pulumi.StringInput `pulumi:"configFile"`
	// The URL of the Kubernetes API server.
	Host pulumi.StringInput `pulumi:"host"`
	// The token to connect to the Kubernetes API server.
	Token pulumi.StringInput `pulumi:"token"`
}

func (GetK8sClusterKubeconfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetK8sClusterKubeconfig)(nil)).Elem()
}

func (i GetK8sClusterKubeconfigArgs) ToGetK8sClusterKubeconfigOutput() GetK8sClusterKubeconfigOutput {
	return i.ToGetK8sClusterKubeconfigOutputWithContext(context.Background())
}

func (i GetK8sClusterKubeconfigArgs) ToGetK8sClusterKubeconfigOutputWithContext(ctx context.Context) GetK8sClusterKubeconfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetK8sClusterKubeconfigOutput)
}

func (i GetK8sClusterKubeconfigArgs) ToOutput(ctx context.Context) pulumix.Output[GetK8sClusterKubeconfig] {
	return pulumix.Output[GetK8sClusterKubeconfig]{
		OutputState: i.ToGetK8sClusterKubeconfigOutputWithContext(ctx).OutputState,
	}
}

// GetK8sClusterKubeconfigArrayInput is an input type that accepts GetK8sClusterKubeconfigArray and GetK8sClusterKubeconfigArrayOutput values.
// You can construct a concrete instance of `GetK8sClusterKubeconfigArrayInput` via:
//
//	GetK8sClusterKubeconfigArray{ GetK8sClusterKubeconfigArgs{...} }
type GetK8sClusterKubeconfigArrayInput interface {
	pulumi.Input

	ToGetK8sClusterKubeconfigArrayOutput() GetK8sClusterKubeconfigArrayOutput
	ToGetK8sClusterKubeconfigArrayOutputWithContext(context.Context) GetK8sClusterKubeconfigArrayOutput
}

type GetK8sClusterKubeconfigArray []GetK8sClusterKubeconfigInput

func (GetK8sClusterKubeconfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetK8sClusterKubeconfig)(nil)).Elem()
}

func (i GetK8sClusterKubeconfigArray) ToGetK8sClusterKubeconfigArrayOutput() GetK8sClusterKubeconfigArrayOutput {
	return i.ToGetK8sClusterKubeconfigArrayOutputWithContext(context.Background())
}

func (i GetK8sClusterKubeconfigArray) ToGetK8sClusterKubeconfigArrayOutputWithContext(ctx context.Context) GetK8sClusterKubeconfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetK8sClusterKubeconfigArrayOutput)
}

func (i GetK8sClusterKubeconfigArray) ToOutput(ctx context.Context) pulumix.Output[[]GetK8sClusterKubeconfig] {
	return pulumix.Output[[]GetK8sClusterKubeconfig]{
		OutputState: i.ToGetK8sClusterKubeconfigArrayOutputWithContext(ctx).OutputState,
	}
}

type GetK8sClusterKubeconfigOutput struct{ *pulumi.OutputState }

func (GetK8sClusterKubeconfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetK8sClusterKubeconfig)(nil)).Elem()
}

func (o GetK8sClusterKubeconfigOutput) ToGetK8sClusterKubeconfigOutput() GetK8sClusterKubeconfigOutput {
	return o
}

func (o GetK8sClusterKubeconfigOutput) ToGetK8sClusterKubeconfigOutputWithContext(ctx context.Context) GetK8sClusterKubeconfigOutput {
	return o
}

func (o GetK8sClusterKubeconfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetK8sClusterKubeconfig] {
	return pulumix.Output[GetK8sClusterKubeconfig]{
		OutputState: o.OutputState,
	}
}

// The CA certificate of the Kubernetes API server.
func (o GetK8sClusterKubeconfigOutput) ClusterCaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v GetK8sClusterKubeconfig) string { return v.ClusterCaCertificate }).(pulumi.StringOutput)
}

// The raw kubeconfig file.
func (o GetK8sClusterKubeconfigOutput) ConfigFile() pulumi.StringOutput {
	return o.ApplyT(func(v GetK8sClusterKubeconfig) string { return v.ConfigFile }).(pulumi.StringOutput)
}

// The URL of the Kubernetes API server.
func (o GetK8sClusterKubeconfigOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetK8sClusterKubeconfig) string { return v.Host }).(pulumi.StringOutput)
}

// The token to connect to the Kubernetes API server.
func (o GetK8sClusterKubeconfigOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v GetK8sClusterKubeconfig) string { return v.Token }).(pulumi.StringOutput)
}

type GetK8sClusterKubeconfigArrayOutput struct{ *pulumi.OutputState }

func (GetK8sClusterKubeconfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetK8sClusterKubeconfig)(nil)).Elem()
}

func (o GetK8sClusterKubeconfigArrayOutput) ToGetK8sClusterKubeconfigArrayOutput() GetK8sClusterKubeconfigArrayOutput {
	return o
}

func (o GetK8sClusterKubeconfigArrayOutput) ToGetK8sClusterKubeconfigArrayOutputWithContext(ctx context.Context) GetK8sClusterKubeconfigArrayOutput {
	return o
}

func (o GetK8sClusterKubeconfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetK8sClusterKubeconfig] {
	return pulumix.Output[[]GetK8sClusterKubeconfig]{
		OutputState: o.OutputState,
	}
}

func (o GetK8sClusterKubeconfigArrayOutput) Index(i pulumi.IntInput) GetK8sClusterKubeconfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetK8sClusterKubeconfig {
		return vs[0].([]GetK8sClusterKubeconfig)[vs[1].(int)]
	}).(GetK8sClusterKubeconfigOutput)
}

type GetK8sClusterOpenIdConnectConfig struct {
	ClientId       string   `pulumi:"clientId"`
	GroupsClaims   []string `pulumi:"groupsClaims"`
	GroupsPrefix   string   `pulumi:"groupsPrefix"`
	IssuerUrl      string   `pulumi:"issuerUrl"`
	RequiredClaims []string `pulumi:"requiredClaims"`
	UsernameClaim  string   `pulumi:"usernameClaim"`
	UsernamePrefix string   `pulumi:"usernamePrefix"`
}

// GetK8sClusterOpenIdConnectConfigInput is an input type that accepts GetK8sClusterOpenIdConnectConfigArgs and GetK8sClusterOpenIdConnectConfigOutput values.
// You can construct a concrete instance of `GetK8sClusterOpenIdConnectConfigInput` via:
//
//	GetK8sClusterOpenIdConnectConfigArgs{...}
type GetK8sClusterOpenIdConnectConfigInput interface {
	pulumi.Input

	ToGetK8sClusterOpenIdConnectConfigOutput() GetK8sClusterOpenIdConnectConfigOutput
	ToGetK8sClusterOpenIdConnectConfigOutputWithContext(context.Context) GetK8sClusterOpenIdConnectConfigOutput
}

type GetK8sClusterOpenIdConnectConfigArgs struct {
	ClientId       pulumi.StringInput      `pulumi:"clientId"`
	GroupsClaims   pulumi.StringArrayInput `pulumi:"groupsClaims"`
	GroupsPrefix   pulumi.StringInput      `pulumi:"groupsPrefix"`
	IssuerUrl      pulumi.StringInput      `pulumi:"issuerUrl"`
	RequiredClaims pulumi.StringArrayInput `pulumi:"requiredClaims"`
	UsernameClaim  pulumi.StringInput      `pulumi:"usernameClaim"`
	UsernamePrefix pulumi.StringInput      `pulumi:"usernamePrefix"`
}

func (GetK8sClusterOpenIdConnectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetK8sClusterOpenIdConnectConfig)(nil)).Elem()
}

func (i GetK8sClusterOpenIdConnectConfigArgs) ToGetK8sClusterOpenIdConnectConfigOutput() GetK8sClusterOpenIdConnectConfigOutput {
	return i.ToGetK8sClusterOpenIdConnectConfigOutputWithContext(context.Background())
}

func (i GetK8sClusterOpenIdConnectConfigArgs) ToGetK8sClusterOpenIdConnectConfigOutputWithContext(ctx context.Context) GetK8sClusterOpenIdConnectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetK8sClusterOpenIdConnectConfigOutput)
}

func (i GetK8sClusterOpenIdConnectConfigArgs) ToOutput(ctx context.Context) pulumix.Output[GetK8sClusterOpenIdConnectConfig] {
	return pulumix.Output[GetK8sClusterOpenIdConnectConfig]{
		OutputState: i.ToGetK8sClusterOpenIdConnectConfigOutputWithContext(ctx).OutputState,
	}
}

// GetK8sClusterOpenIdConnectConfigArrayInput is an input type that accepts GetK8sClusterOpenIdConnectConfigArray and GetK8sClusterOpenIdConnectConfigArrayOutput values.
// You can construct a concrete instance of `GetK8sClusterOpenIdConnectConfigArrayInput` via:
//
//	GetK8sClusterOpenIdConnectConfigArray{ GetK8sClusterOpenIdConnectConfigArgs{...} }
type GetK8sClusterOpenIdConnectConfigArrayInput interface {
	pulumi.Input

	ToGetK8sClusterOpenIdConnectConfigArrayOutput() GetK8sClusterOpenIdConnectConfigArrayOutput
	ToGetK8sClusterOpenIdConnectConfigArrayOutputWithContext(context.Context) GetK8sClusterOpenIdConnectConfigArrayOutput
}

type GetK8sClusterOpenIdConnectConfigArray []GetK8sClusterOpenIdConnectConfigInput

func (GetK8sClusterOpenIdConnectConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetK8sClusterOpenIdConnectConfig)(nil)).Elem()
}

func (i GetK8sClusterOpenIdConnectConfigArray) ToGetK8sClusterOpenIdConnectConfigArrayOutput() GetK8sClusterOpenIdConnectConfigArrayOutput {
	return i.ToGetK8sClusterOpenIdConnectConfigArrayOutputWithContext(context.Background())
}

func (i GetK8sClusterOpenIdConnectConfigArray) ToGetK8sClusterOpenIdConnectConfigArrayOutputWithContext(ctx context.Context) GetK8sClusterOpenIdConnectConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetK8sClusterOpenIdConnectConfigArrayOutput)
}

func (i GetK8sClusterOpenIdConnectConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]GetK8sClusterOpenIdConnectConfig] {
	return pulumix.Output[[]GetK8sClusterOpenIdConnectConfig]{
		OutputState: i.ToGetK8sClusterOpenIdConnectConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type GetK8sClusterOpenIdConnectConfigOutput struct{ *pulumi.OutputState }

func (GetK8sClusterOpenIdConnectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetK8sClusterOpenIdConnectConfig)(nil)).Elem()
}

func (o GetK8sClusterOpenIdConnectConfigOutput) ToGetK8sClusterOpenIdConnectConfigOutput() GetK8sClusterOpenIdConnectConfigOutput {
	return o
}

func (o GetK8sClusterOpenIdConnectConfigOutput) ToGetK8sClusterOpenIdConnectConfigOutputWithContext(ctx context.Context) GetK8sClusterOpenIdConnectConfigOutput {
	return o
}

func (o GetK8sClusterOpenIdConnectConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetK8sClusterOpenIdConnectConfig] {
	return pulumix.Output[GetK8sClusterOpenIdConnectConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetK8sClusterOpenIdConnectConfigOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GetK8sClusterOpenIdConnectConfig) string { return v.ClientId }).(pulumi.StringOutput)
}

func (o GetK8sClusterOpenIdConnectConfigOutput) GroupsClaims() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetK8sClusterOpenIdConnectConfig) []string { return v.GroupsClaims }).(pulumi.StringArrayOutput)
}

func (o GetK8sClusterOpenIdConnectConfigOutput) GroupsPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetK8sClusterOpenIdConnectConfig) string { return v.GroupsPrefix }).(pulumi.StringOutput)
}

func (o GetK8sClusterOpenIdConnectConfigOutput) IssuerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetK8sClusterOpenIdConnectConfig) string { return v.IssuerUrl }).(pulumi.StringOutput)
}

func (o GetK8sClusterOpenIdConnectConfigOutput) RequiredClaims() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetK8sClusterOpenIdConnectConfig) []string { return v.RequiredClaims }).(pulumi.StringArrayOutput)
}

func (o GetK8sClusterOpenIdConnectConfigOutput) UsernameClaim() pulumi.StringOutput {
	return o.ApplyT(func(v GetK8sClusterOpenIdConnectConfig) string { return v.UsernameClaim }).(pulumi.StringOutput)
}

func (o GetK8sClusterOpenIdConnectConfigOutput) UsernamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetK8sClusterOpenIdConnectConfig) string { return v.UsernamePrefix }).(pulumi.StringOutput)
}

type GetK8sClusterOpenIdConnectConfigArrayOutput struct{ *pulumi.OutputState }

func (GetK8sClusterOpenIdConnectConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetK8sClusterOpenIdConnectConfig)(nil)).Elem()
}

func (o GetK8sClusterOpenIdConnectConfigArrayOutput) ToGetK8sClusterOpenIdConnectConfigArrayOutput() GetK8sClusterOpenIdConnectConfigArrayOutput {
	return o
}

func (o GetK8sClusterOpenIdConnectConfigArrayOutput) ToGetK8sClusterOpenIdConnectConfigArrayOutputWithContext(ctx context.Context) GetK8sClusterOpenIdConnectConfigArrayOutput {
	return o
}

func (o GetK8sClusterOpenIdConnectConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetK8sClusterOpenIdConnectConfig] {
	return pulumix.Output[[]GetK8sClusterOpenIdConnectConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetK8sClusterOpenIdConnectConfigArrayOutput) Index(i pulumi.IntInput) GetK8sClusterOpenIdConnectConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetK8sClusterOpenIdConnectConfig {
		return vs[0].([]GetK8sClusterOpenIdConnectConfig)[vs[1].(int)]
	}).(GetK8sClusterOpenIdConnectConfigOutput)
}

type GetK8sPoolNode struct {
	// The pool name. Only one of `name` and `poolId` should be specified. `clusterId` should be specified with `name`.
	Name string `pulumi:"name"`
	// The public IPv4.
	PublicIp string `pulumi:"publicIp"`
	// The public IPv6.
	PublicIpV6 string `pulumi:"publicIpV6"`
	// The status of the node.
	Status string `pulumi:"status"`
}

// GetK8sPoolNodeInput is an input type that accepts GetK8sPoolNodeArgs and GetK8sPoolNodeOutput values.
// You can construct a concrete instance of `GetK8sPoolNodeInput` via:
//
//	GetK8sPoolNodeArgs{...}
type GetK8sPoolNodeInput interface {
	pulumi.Input

	ToGetK8sPoolNodeOutput() GetK8sPoolNodeOutput
	ToGetK8sPoolNodeOutputWithContext(context.Context) GetK8sPoolNodeOutput
}

type GetK8sPoolNodeArgs struct {
	// The pool name. Only one of `name` and `poolId` should be specified. `clusterId` should be specified with `name`.
	Name pulumi.StringInput `pulumi:"name"`
	// The public IPv4.
	PublicIp pulumi.StringInput `pulumi:"publicIp"`
	// The public IPv6.
	PublicIpV6 pulumi.StringInput `pulumi:"publicIpV6"`
	// The status of the node.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetK8sPoolNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetK8sPoolNode)(nil)).Elem()
}

func (i GetK8sPoolNodeArgs) ToGetK8sPoolNodeOutput() GetK8sPoolNodeOutput {
	return i.ToGetK8sPoolNodeOutputWithContext(context.Background())
}

func (i GetK8sPoolNodeArgs) ToGetK8sPoolNodeOutputWithContext(ctx context.Context) GetK8sPoolNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetK8sPoolNodeOutput)
}

func (i GetK8sPoolNodeArgs) ToOutput(ctx context.Context) pulumix.Output[GetK8sPoolNode] {
	return pulumix.Output[GetK8sPoolNode]{
		OutputState: i.ToGetK8sPoolNodeOutputWithContext(ctx).OutputState,
	}
}

// GetK8sPoolNodeArrayInput is an input type that accepts GetK8sPoolNodeArray and GetK8sPoolNodeArrayOutput values.
// You can construct a concrete instance of `GetK8sPoolNodeArrayInput` via:
//
//	GetK8sPoolNodeArray{ GetK8sPoolNodeArgs{...} }
type GetK8sPoolNodeArrayInput interface {
	pulumi.Input

	ToGetK8sPoolNodeArrayOutput() GetK8sPoolNodeArrayOutput
	ToGetK8sPoolNodeArrayOutputWithContext(context.Context) GetK8sPoolNodeArrayOutput
}

type GetK8sPoolNodeArray []GetK8sPoolNodeInput

func (GetK8sPoolNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetK8sPoolNode)(nil)).Elem()
}

func (i GetK8sPoolNodeArray) ToGetK8sPoolNodeArrayOutput() GetK8sPoolNodeArrayOutput {
	return i.ToGetK8sPoolNodeArrayOutputWithContext(context.Background())
}

func (i GetK8sPoolNodeArray) ToGetK8sPoolNodeArrayOutputWithContext(ctx context.Context) GetK8sPoolNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetK8sPoolNodeArrayOutput)
}

func (i GetK8sPoolNodeArray) ToOutput(ctx context.Context) pulumix.Output[[]GetK8sPoolNode] {
	return pulumix.Output[[]GetK8sPoolNode]{
		OutputState: i.ToGetK8sPoolNodeArrayOutputWithContext(ctx).OutputState,
	}
}

type GetK8sPoolNodeOutput struct{ *pulumi.OutputState }

func (GetK8sPoolNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetK8sPoolNode)(nil)).Elem()
}

func (o GetK8sPoolNodeOutput) ToGetK8sPoolNodeOutput() GetK8sPoolNodeOutput {
	return o
}

func (o GetK8sPoolNodeOutput) ToGetK8sPoolNodeOutputWithContext(ctx context.Context) GetK8sPoolNodeOutput {
	return o
}

func (o GetK8sPoolNodeOutput) ToOutput(ctx context.Context) pulumix.Output[GetK8sPoolNode] {
	return pulumix.Output[GetK8sPoolNode]{
		OutputState: o.OutputState,
	}
}

// The pool name. Only one of `name` and `poolId` should be specified. `clusterId` should be specified with `name`.
func (o GetK8sPoolNodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetK8sPoolNode) string { return v.Name }).(pulumi.StringOutput)
}

// The public IPv4.
func (o GetK8sPoolNodeOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetK8sPoolNode) string { return v.PublicIp }).(pulumi.StringOutput)
}

// The public IPv6.
func (o GetK8sPoolNodeOutput) PublicIpV6() pulumi.StringOutput {
	return o.ApplyT(func(v GetK8sPoolNode) string { return v.PublicIpV6 }).(pulumi.StringOutput)
}

// The status of the node.
func (o GetK8sPoolNodeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetK8sPoolNode) string { return v.Status }).(pulumi.StringOutput)
}

type GetK8sPoolNodeArrayOutput struct{ *pulumi.OutputState }

func (GetK8sPoolNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetK8sPoolNode)(nil)).Elem()
}

func (o GetK8sPoolNodeArrayOutput) ToGetK8sPoolNodeArrayOutput() GetK8sPoolNodeArrayOutput {
	return o
}

func (o GetK8sPoolNodeArrayOutput) ToGetK8sPoolNodeArrayOutputWithContext(ctx context.Context) GetK8sPoolNodeArrayOutput {
	return o
}

func (o GetK8sPoolNodeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetK8sPoolNode] {
	return pulumix.Output[[]GetK8sPoolNode]{
		OutputState: o.OutputState,
	}
}

func (o GetK8sPoolNodeArrayOutput) Index(i pulumi.IntInput) GetK8sPoolNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetK8sPoolNode {
		return vs[0].([]GetK8sPoolNode)[vs[1].(int)]
	}).(GetK8sPoolNodeOutput)
}

type GetK8sPoolUpgradePolicy struct {
	MaxSurge       int `pulumi:"maxSurge"`
	MaxUnavailable int `pulumi:"maxUnavailable"`
}

// GetK8sPoolUpgradePolicyInput is an input type that accepts GetK8sPoolUpgradePolicyArgs and GetK8sPoolUpgradePolicyOutput values.
// You can construct a concrete instance of `GetK8sPoolUpgradePolicyInput` via:
//
//	GetK8sPoolUpgradePolicyArgs{...}
type GetK8sPoolUpgradePolicyInput interface {
	pulumi.Input

	ToGetK8sPoolUpgradePolicyOutput() GetK8sPoolUpgradePolicyOutput
	ToGetK8sPoolUpgradePolicyOutputWithContext(context.Context) GetK8sPoolUpgradePolicyOutput
}

type GetK8sPoolUpgradePolicyArgs struct {
	MaxSurge       pulumi.IntInput `pulumi:"maxSurge"`
	MaxUnavailable pulumi.IntInput `pulumi:"maxUnavailable"`
}

func (GetK8sPoolUpgradePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetK8sPoolUpgradePolicy)(nil)).Elem()
}

func (i GetK8sPoolUpgradePolicyArgs) ToGetK8sPoolUpgradePolicyOutput() GetK8sPoolUpgradePolicyOutput {
	return i.ToGetK8sPoolUpgradePolicyOutputWithContext(context.Background())
}

func (i GetK8sPoolUpgradePolicyArgs) ToGetK8sPoolUpgradePolicyOutputWithContext(ctx context.Context) GetK8sPoolUpgradePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetK8sPoolUpgradePolicyOutput)
}

func (i GetK8sPoolUpgradePolicyArgs) ToOutput(ctx context.Context) pulumix.Output[GetK8sPoolUpgradePolicy] {
	return pulumix.Output[GetK8sPoolUpgradePolicy]{
		OutputState: i.ToGetK8sPoolUpgradePolicyOutputWithContext(ctx).OutputState,
	}
}

// GetK8sPoolUpgradePolicyArrayInput is an input type that accepts GetK8sPoolUpgradePolicyArray and GetK8sPoolUpgradePolicyArrayOutput values.
// You can construct a concrete instance of `GetK8sPoolUpgradePolicyArrayInput` via:
//
//	GetK8sPoolUpgradePolicyArray{ GetK8sPoolUpgradePolicyArgs{...} }
type GetK8sPoolUpgradePolicyArrayInput interface {
	pulumi.Input

	ToGetK8sPoolUpgradePolicyArrayOutput() GetK8sPoolUpgradePolicyArrayOutput
	ToGetK8sPoolUpgradePolicyArrayOutputWithContext(context.Context) GetK8sPoolUpgradePolicyArrayOutput
}

type GetK8sPoolUpgradePolicyArray []GetK8sPoolUpgradePolicyInput

func (GetK8sPoolUpgradePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetK8sPoolUpgradePolicy)(nil)).Elem()
}

func (i GetK8sPoolUpgradePolicyArray) ToGetK8sPoolUpgradePolicyArrayOutput() GetK8sPoolUpgradePolicyArrayOutput {
	return i.ToGetK8sPoolUpgradePolicyArrayOutputWithContext(context.Background())
}

func (i GetK8sPoolUpgradePolicyArray) ToGetK8sPoolUpgradePolicyArrayOutputWithContext(ctx context.Context) GetK8sPoolUpgradePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetK8sPoolUpgradePolicyArrayOutput)
}

func (i GetK8sPoolUpgradePolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetK8sPoolUpgradePolicy] {
	return pulumix.Output[[]GetK8sPoolUpgradePolicy]{
		OutputState: i.ToGetK8sPoolUpgradePolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetK8sPoolUpgradePolicyOutput struct{ *pulumi.OutputState }

func (GetK8sPoolUpgradePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetK8sPoolUpgradePolicy)(nil)).Elem()
}

func (o GetK8sPoolUpgradePolicyOutput) ToGetK8sPoolUpgradePolicyOutput() GetK8sPoolUpgradePolicyOutput {
	return o
}

func (o GetK8sPoolUpgradePolicyOutput) ToGetK8sPoolUpgradePolicyOutputWithContext(ctx context.Context) GetK8sPoolUpgradePolicyOutput {
	return o
}

func (o GetK8sPoolUpgradePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetK8sPoolUpgradePolicy] {
	return pulumix.Output[GetK8sPoolUpgradePolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetK8sPoolUpgradePolicyOutput) MaxSurge() pulumi.IntOutput {
	return o.ApplyT(func(v GetK8sPoolUpgradePolicy) int { return v.MaxSurge }).(pulumi.IntOutput)
}

func (o GetK8sPoolUpgradePolicyOutput) MaxUnavailable() pulumi.IntOutput {
	return o.ApplyT(func(v GetK8sPoolUpgradePolicy) int { return v.MaxUnavailable }).(pulumi.IntOutput)
}

type GetK8sPoolUpgradePolicyArrayOutput struct{ *pulumi.OutputState }

func (GetK8sPoolUpgradePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetK8sPoolUpgradePolicy)(nil)).Elem()
}

func (o GetK8sPoolUpgradePolicyArrayOutput) ToGetK8sPoolUpgradePolicyArrayOutput() GetK8sPoolUpgradePolicyArrayOutput {
	return o
}

func (o GetK8sPoolUpgradePolicyArrayOutput) ToGetK8sPoolUpgradePolicyArrayOutputWithContext(ctx context.Context) GetK8sPoolUpgradePolicyArrayOutput {
	return o
}

func (o GetK8sPoolUpgradePolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetK8sPoolUpgradePolicy] {
	return pulumix.Output[[]GetK8sPoolUpgradePolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetK8sPoolUpgradePolicyArrayOutput) Index(i pulumi.IntInput) GetK8sPoolUpgradePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetK8sPoolUpgradePolicy {
		return vs[0].([]GetK8sPoolUpgradePolicy)[vs[1].(int)]
	}).(GetK8sPoolUpgradePolicyOutput)
}

type GetLbAclsAcl struct {
	// The action that has been undertaken when an ACL filter had matched.
	Actions []GetLbAclsAclAction `pulumi:"actions"`
	// The date at which the ACL was created (RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// The description of the ACL resource.
	Description string `pulumi:"description"`
	// The frontend ID this ACL is attached to. ACLs with a frontend ID like it are listed.
	// > **Important:** LB Frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	FrontendId string `pulumi:"frontendId"`
	// The associated ACL ID.
	// > **Important:** LB ACLs' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	Id string `pulumi:"id"`
	// The order between the ACLs.
	Index int `pulumi:"index"`
	// The ACL match rule.
	Matches []GetLbAclsAclMatch `pulumi:"matches"`
	// The ACL name used as filter. ACLs with a name like it are listed.
	Name string `pulumi:"name"`
	// The date at which the ACL was last updated (RFC 3339 format).
	UpdateAt string `pulumi:"updateAt"`
}

// GetLbAclsAclInput is an input type that accepts GetLbAclsAclArgs and GetLbAclsAclOutput values.
// You can construct a concrete instance of `GetLbAclsAclInput` via:
//
//	GetLbAclsAclArgs{...}
type GetLbAclsAclInput interface {
	pulumi.Input

	ToGetLbAclsAclOutput() GetLbAclsAclOutput
	ToGetLbAclsAclOutputWithContext(context.Context) GetLbAclsAclOutput
}

type GetLbAclsAclArgs struct {
	// The action that has been undertaken when an ACL filter had matched.
	Actions GetLbAclsAclActionArrayInput `pulumi:"actions"`
	// The date at which the ACL was created (RFC 3339 format).
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the ACL resource.
	Description pulumi.StringInput `pulumi:"description"`
	// The frontend ID this ACL is attached to. ACLs with a frontend ID like it are listed.
	// > **Important:** LB Frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	FrontendId pulumi.StringInput `pulumi:"frontendId"`
	// The associated ACL ID.
	// > **Important:** LB ACLs' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	Id pulumi.StringInput `pulumi:"id"`
	// The order between the ACLs.
	Index pulumi.IntInput `pulumi:"index"`
	// The ACL match rule.
	Matches GetLbAclsAclMatchArrayInput `pulumi:"matches"`
	// The ACL name used as filter. ACLs with a name like it are listed.
	Name pulumi.StringInput `pulumi:"name"`
	// The date at which the ACL was last updated (RFC 3339 format).
	UpdateAt pulumi.StringInput `pulumi:"updateAt"`
}

func (GetLbAclsAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbAclsAcl)(nil)).Elem()
}

func (i GetLbAclsAclArgs) ToGetLbAclsAclOutput() GetLbAclsAclOutput {
	return i.ToGetLbAclsAclOutputWithContext(context.Background())
}

func (i GetLbAclsAclArgs) ToGetLbAclsAclOutputWithContext(ctx context.Context) GetLbAclsAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbAclsAclOutput)
}

func (i GetLbAclsAclArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbAclsAcl] {
	return pulumix.Output[GetLbAclsAcl]{
		OutputState: i.ToGetLbAclsAclOutputWithContext(ctx).OutputState,
	}
}

// GetLbAclsAclArrayInput is an input type that accepts GetLbAclsAclArray and GetLbAclsAclArrayOutput values.
// You can construct a concrete instance of `GetLbAclsAclArrayInput` via:
//
//	GetLbAclsAclArray{ GetLbAclsAclArgs{...} }
type GetLbAclsAclArrayInput interface {
	pulumi.Input

	ToGetLbAclsAclArrayOutput() GetLbAclsAclArrayOutput
	ToGetLbAclsAclArrayOutputWithContext(context.Context) GetLbAclsAclArrayOutput
}

type GetLbAclsAclArray []GetLbAclsAclInput

func (GetLbAclsAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbAclsAcl)(nil)).Elem()
}

func (i GetLbAclsAclArray) ToGetLbAclsAclArrayOutput() GetLbAclsAclArrayOutput {
	return i.ToGetLbAclsAclArrayOutputWithContext(context.Background())
}

func (i GetLbAclsAclArray) ToGetLbAclsAclArrayOutputWithContext(ctx context.Context) GetLbAclsAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbAclsAclArrayOutput)
}

func (i GetLbAclsAclArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbAclsAcl] {
	return pulumix.Output[[]GetLbAclsAcl]{
		OutputState: i.ToGetLbAclsAclArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbAclsAclOutput struct{ *pulumi.OutputState }

func (GetLbAclsAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbAclsAcl)(nil)).Elem()
}

func (o GetLbAclsAclOutput) ToGetLbAclsAclOutput() GetLbAclsAclOutput {
	return o
}

func (o GetLbAclsAclOutput) ToGetLbAclsAclOutputWithContext(ctx context.Context) GetLbAclsAclOutput {
	return o
}

func (o GetLbAclsAclOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbAclsAcl] {
	return pulumix.Output[GetLbAclsAcl]{
		OutputState: o.OutputState,
	}
}

// The action that has been undertaken when an ACL filter had matched.
func (o GetLbAclsAclOutput) Actions() GetLbAclsAclActionArrayOutput {
	return o.ApplyT(func(v GetLbAclsAcl) []GetLbAclsAclAction { return v.Actions }).(GetLbAclsAclActionArrayOutput)
}

// The date at which the ACL was created (RFC 3339 format).
func (o GetLbAclsAclOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbAclsAcl) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the ACL resource.
func (o GetLbAclsAclOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbAclsAcl) string { return v.Description }).(pulumi.StringOutput)
}

// The frontend ID this ACL is attached to. ACLs with a frontend ID like it are listed.
// > **Important:** LB Frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
func (o GetLbAclsAclOutput) FrontendId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbAclsAcl) string { return v.FrontendId }).(pulumi.StringOutput)
}

// The associated ACL ID.
// > **Important:** LB ACLs' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
func (o GetLbAclsAclOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbAclsAcl) string { return v.Id }).(pulumi.StringOutput)
}

// The order between the ACLs.
func (o GetLbAclsAclOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbAclsAcl) int { return v.Index }).(pulumi.IntOutput)
}

// The ACL match rule.
func (o GetLbAclsAclOutput) Matches() GetLbAclsAclMatchArrayOutput {
	return o.ApplyT(func(v GetLbAclsAcl) []GetLbAclsAclMatch { return v.Matches }).(GetLbAclsAclMatchArrayOutput)
}

// The ACL name used as filter. ACLs with a name like it are listed.
func (o GetLbAclsAclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbAclsAcl) string { return v.Name }).(pulumi.StringOutput)
}

// The date at which the ACL was last updated (RFC 3339 format).
func (o GetLbAclsAclOutput) UpdateAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbAclsAcl) string { return v.UpdateAt }).(pulumi.StringOutput)
}

type GetLbAclsAclArrayOutput struct{ *pulumi.OutputState }

func (GetLbAclsAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbAclsAcl)(nil)).Elem()
}

func (o GetLbAclsAclArrayOutput) ToGetLbAclsAclArrayOutput() GetLbAclsAclArrayOutput {
	return o
}

func (o GetLbAclsAclArrayOutput) ToGetLbAclsAclArrayOutputWithContext(ctx context.Context) GetLbAclsAclArrayOutput {
	return o
}

func (o GetLbAclsAclArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbAclsAcl] {
	return pulumix.Output[[]GetLbAclsAcl]{
		OutputState: o.OutputState,
	}
}

func (o GetLbAclsAclArrayOutput) Index(i pulumi.IntInput) GetLbAclsAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbAclsAcl {
		return vs[0].([]GetLbAclsAcl)[vs[1].(int)]
	}).(GetLbAclsAclOutput)
}

type GetLbAclsAclAction struct {
	// Redirect parameters when using an ACL with `redirect` action.
	Redirects []GetLbAclsAclActionRedirect `pulumi:"redirects"`
	// The redirect type.
	Type string `pulumi:"type"`
}

// GetLbAclsAclActionInput is an input type that accepts GetLbAclsAclActionArgs and GetLbAclsAclActionOutput values.
// You can construct a concrete instance of `GetLbAclsAclActionInput` via:
//
//	GetLbAclsAclActionArgs{...}
type GetLbAclsAclActionInput interface {
	pulumi.Input

	ToGetLbAclsAclActionOutput() GetLbAclsAclActionOutput
	ToGetLbAclsAclActionOutputWithContext(context.Context) GetLbAclsAclActionOutput
}

type GetLbAclsAclActionArgs struct {
	// Redirect parameters when using an ACL with `redirect` action.
	Redirects GetLbAclsAclActionRedirectArrayInput `pulumi:"redirects"`
	// The redirect type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetLbAclsAclActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbAclsAclAction)(nil)).Elem()
}

func (i GetLbAclsAclActionArgs) ToGetLbAclsAclActionOutput() GetLbAclsAclActionOutput {
	return i.ToGetLbAclsAclActionOutputWithContext(context.Background())
}

func (i GetLbAclsAclActionArgs) ToGetLbAclsAclActionOutputWithContext(ctx context.Context) GetLbAclsAclActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbAclsAclActionOutput)
}

func (i GetLbAclsAclActionArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbAclsAclAction] {
	return pulumix.Output[GetLbAclsAclAction]{
		OutputState: i.ToGetLbAclsAclActionOutputWithContext(ctx).OutputState,
	}
}

// GetLbAclsAclActionArrayInput is an input type that accepts GetLbAclsAclActionArray and GetLbAclsAclActionArrayOutput values.
// You can construct a concrete instance of `GetLbAclsAclActionArrayInput` via:
//
//	GetLbAclsAclActionArray{ GetLbAclsAclActionArgs{...} }
type GetLbAclsAclActionArrayInput interface {
	pulumi.Input

	ToGetLbAclsAclActionArrayOutput() GetLbAclsAclActionArrayOutput
	ToGetLbAclsAclActionArrayOutputWithContext(context.Context) GetLbAclsAclActionArrayOutput
}

type GetLbAclsAclActionArray []GetLbAclsAclActionInput

func (GetLbAclsAclActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbAclsAclAction)(nil)).Elem()
}

func (i GetLbAclsAclActionArray) ToGetLbAclsAclActionArrayOutput() GetLbAclsAclActionArrayOutput {
	return i.ToGetLbAclsAclActionArrayOutputWithContext(context.Background())
}

func (i GetLbAclsAclActionArray) ToGetLbAclsAclActionArrayOutputWithContext(ctx context.Context) GetLbAclsAclActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbAclsAclActionArrayOutput)
}

func (i GetLbAclsAclActionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbAclsAclAction] {
	return pulumix.Output[[]GetLbAclsAclAction]{
		OutputState: i.ToGetLbAclsAclActionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbAclsAclActionOutput struct{ *pulumi.OutputState }

func (GetLbAclsAclActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbAclsAclAction)(nil)).Elem()
}

func (o GetLbAclsAclActionOutput) ToGetLbAclsAclActionOutput() GetLbAclsAclActionOutput {
	return o
}

func (o GetLbAclsAclActionOutput) ToGetLbAclsAclActionOutputWithContext(ctx context.Context) GetLbAclsAclActionOutput {
	return o
}

func (o GetLbAclsAclActionOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbAclsAclAction] {
	return pulumix.Output[GetLbAclsAclAction]{
		OutputState: o.OutputState,
	}
}

// Redirect parameters when using an ACL with `redirect` action.
func (o GetLbAclsAclActionOutput) Redirects() GetLbAclsAclActionRedirectArrayOutput {
	return o.ApplyT(func(v GetLbAclsAclAction) []GetLbAclsAclActionRedirect { return v.Redirects }).(GetLbAclsAclActionRedirectArrayOutput)
}

// The redirect type.
func (o GetLbAclsAclActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbAclsAclAction) string { return v.Type }).(pulumi.StringOutput)
}

type GetLbAclsAclActionArrayOutput struct{ *pulumi.OutputState }

func (GetLbAclsAclActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbAclsAclAction)(nil)).Elem()
}

func (o GetLbAclsAclActionArrayOutput) ToGetLbAclsAclActionArrayOutput() GetLbAclsAclActionArrayOutput {
	return o
}

func (o GetLbAclsAclActionArrayOutput) ToGetLbAclsAclActionArrayOutputWithContext(ctx context.Context) GetLbAclsAclActionArrayOutput {
	return o
}

func (o GetLbAclsAclActionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbAclsAclAction] {
	return pulumix.Output[[]GetLbAclsAclAction]{
		OutputState: o.OutputState,
	}
}

func (o GetLbAclsAclActionArrayOutput) Index(i pulumi.IntInput) GetLbAclsAclActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbAclsAclAction {
		return vs[0].([]GetLbAclsAclAction)[vs[1].(int)]
	}).(GetLbAclsAclActionOutput)
}

type GetLbAclsAclActionRedirect struct {
	// The HTTP redirect code used.
	Code int `pulumi:"code"`
	// The URL used in case of a location redirect or the scheme name that replaces the request's original scheme.
	Target string `pulumi:"target"`
	// The redirect type.
	Type string `pulumi:"type"`
}

// GetLbAclsAclActionRedirectInput is an input type that accepts GetLbAclsAclActionRedirectArgs and GetLbAclsAclActionRedirectOutput values.
// You can construct a concrete instance of `GetLbAclsAclActionRedirectInput` via:
//
//	GetLbAclsAclActionRedirectArgs{...}
type GetLbAclsAclActionRedirectInput interface {
	pulumi.Input

	ToGetLbAclsAclActionRedirectOutput() GetLbAclsAclActionRedirectOutput
	ToGetLbAclsAclActionRedirectOutputWithContext(context.Context) GetLbAclsAclActionRedirectOutput
}

type GetLbAclsAclActionRedirectArgs struct {
	// The HTTP redirect code used.
	Code pulumi.IntInput `pulumi:"code"`
	// The URL used in case of a location redirect or the scheme name that replaces the request's original scheme.
	Target pulumi.StringInput `pulumi:"target"`
	// The redirect type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetLbAclsAclActionRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbAclsAclActionRedirect)(nil)).Elem()
}

func (i GetLbAclsAclActionRedirectArgs) ToGetLbAclsAclActionRedirectOutput() GetLbAclsAclActionRedirectOutput {
	return i.ToGetLbAclsAclActionRedirectOutputWithContext(context.Background())
}

func (i GetLbAclsAclActionRedirectArgs) ToGetLbAclsAclActionRedirectOutputWithContext(ctx context.Context) GetLbAclsAclActionRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbAclsAclActionRedirectOutput)
}

func (i GetLbAclsAclActionRedirectArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbAclsAclActionRedirect] {
	return pulumix.Output[GetLbAclsAclActionRedirect]{
		OutputState: i.ToGetLbAclsAclActionRedirectOutputWithContext(ctx).OutputState,
	}
}

// GetLbAclsAclActionRedirectArrayInput is an input type that accepts GetLbAclsAclActionRedirectArray and GetLbAclsAclActionRedirectArrayOutput values.
// You can construct a concrete instance of `GetLbAclsAclActionRedirectArrayInput` via:
//
//	GetLbAclsAclActionRedirectArray{ GetLbAclsAclActionRedirectArgs{...} }
type GetLbAclsAclActionRedirectArrayInput interface {
	pulumi.Input

	ToGetLbAclsAclActionRedirectArrayOutput() GetLbAclsAclActionRedirectArrayOutput
	ToGetLbAclsAclActionRedirectArrayOutputWithContext(context.Context) GetLbAclsAclActionRedirectArrayOutput
}

type GetLbAclsAclActionRedirectArray []GetLbAclsAclActionRedirectInput

func (GetLbAclsAclActionRedirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbAclsAclActionRedirect)(nil)).Elem()
}

func (i GetLbAclsAclActionRedirectArray) ToGetLbAclsAclActionRedirectArrayOutput() GetLbAclsAclActionRedirectArrayOutput {
	return i.ToGetLbAclsAclActionRedirectArrayOutputWithContext(context.Background())
}

func (i GetLbAclsAclActionRedirectArray) ToGetLbAclsAclActionRedirectArrayOutputWithContext(ctx context.Context) GetLbAclsAclActionRedirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbAclsAclActionRedirectArrayOutput)
}

func (i GetLbAclsAclActionRedirectArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbAclsAclActionRedirect] {
	return pulumix.Output[[]GetLbAclsAclActionRedirect]{
		OutputState: i.ToGetLbAclsAclActionRedirectArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbAclsAclActionRedirectOutput struct{ *pulumi.OutputState }

func (GetLbAclsAclActionRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbAclsAclActionRedirect)(nil)).Elem()
}

func (o GetLbAclsAclActionRedirectOutput) ToGetLbAclsAclActionRedirectOutput() GetLbAclsAclActionRedirectOutput {
	return o
}

func (o GetLbAclsAclActionRedirectOutput) ToGetLbAclsAclActionRedirectOutputWithContext(ctx context.Context) GetLbAclsAclActionRedirectOutput {
	return o
}

func (o GetLbAclsAclActionRedirectOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbAclsAclActionRedirect] {
	return pulumix.Output[GetLbAclsAclActionRedirect]{
		OutputState: o.OutputState,
	}
}

// The HTTP redirect code used.
func (o GetLbAclsAclActionRedirectOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbAclsAclActionRedirect) int { return v.Code }).(pulumi.IntOutput)
}

// The URL used in case of a location redirect or the scheme name that replaces the request's original scheme.
func (o GetLbAclsAclActionRedirectOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbAclsAclActionRedirect) string { return v.Target }).(pulumi.StringOutput)
}

// The redirect type.
func (o GetLbAclsAclActionRedirectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbAclsAclActionRedirect) string { return v.Type }).(pulumi.StringOutput)
}

type GetLbAclsAclActionRedirectArrayOutput struct{ *pulumi.OutputState }

func (GetLbAclsAclActionRedirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbAclsAclActionRedirect)(nil)).Elem()
}

func (o GetLbAclsAclActionRedirectArrayOutput) ToGetLbAclsAclActionRedirectArrayOutput() GetLbAclsAclActionRedirectArrayOutput {
	return o
}

func (o GetLbAclsAclActionRedirectArrayOutput) ToGetLbAclsAclActionRedirectArrayOutputWithContext(ctx context.Context) GetLbAclsAclActionRedirectArrayOutput {
	return o
}

func (o GetLbAclsAclActionRedirectArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbAclsAclActionRedirect] {
	return pulumix.Output[[]GetLbAclsAclActionRedirect]{
		OutputState: o.OutputState,
	}
}

func (o GetLbAclsAclActionRedirectArrayOutput) Index(i pulumi.IntInput) GetLbAclsAclActionRedirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbAclsAclActionRedirect {
		return vs[0].([]GetLbAclsAclActionRedirect)[vs[1].(int)]
	}).(GetLbAclsAclActionRedirectOutput)
}

type GetLbAclsAclMatch struct {
	// The matched HTTP filter.
	HttpFilter       string `pulumi:"httpFilter"`
	HttpFilterOption string `pulumi:"httpFilterOption"`
	// The possible values matched for a given HTTP filter.
	HttpFilterValues []string `pulumi:"httpFilterValues"`
	// The condition will be of type "unless" if invert is set to `true`
	Invert bool `pulumi:"invert"`
	// A list of matched IPs or CIDR v4/v6 addresses of the client of the session.
	IpSubnets []string `pulumi:"ipSubnets"`
}

// GetLbAclsAclMatchInput is an input type that accepts GetLbAclsAclMatchArgs and GetLbAclsAclMatchOutput values.
// You can construct a concrete instance of `GetLbAclsAclMatchInput` via:
//
//	GetLbAclsAclMatchArgs{...}
type GetLbAclsAclMatchInput interface {
	pulumi.Input

	ToGetLbAclsAclMatchOutput() GetLbAclsAclMatchOutput
	ToGetLbAclsAclMatchOutputWithContext(context.Context) GetLbAclsAclMatchOutput
}

type GetLbAclsAclMatchArgs struct {
	// The matched HTTP filter.
	HttpFilter       pulumi.StringInput `pulumi:"httpFilter"`
	HttpFilterOption pulumi.StringInput `pulumi:"httpFilterOption"`
	// The possible values matched for a given HTTP filter.
	HttpFilterValues pulumi.StringArrayInput `pulumi:"httpFilterValues"`
	// The condition will be of type "unless" if invert is set to `true`
	Invert pulumi.BoolInput `pulumi:"invert"`
	// A list of matched IPs or CIDR v4/v6 addresses of the client of the session.
	IpSubnets pulumi.StringArrayInput `pulumi:"ipSubnets"`
}

func (GetLbAclsAclMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbAclsAclMatch)(nil)).Elem()
}

func (i GetLbAclsAclMatchArgs) ToGetLbAclsAclMatchOutput() GetLbAclsAclMatchOutput {
	return i.ToGetLbAclsAclMatchOutputWithContext(context.Background())
}

func (i GetLbAclsAclMatchArgs) ToGetLbAclsAclMatchOutputWithContext(ctx context.Context) GetLbAclsAclMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbAclsAclMatchOutput)
}

func (i GetLbAclsAclMatchArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbAclsAclMatch] {
	return pulumix.Output[GetLbAclsAclMatch]{
		OutputState: i.ToGetLbAclsAclMatchOutputWithContext(ctx).OutputState,
	}
}

// GetLbAclsAclMatchArrayInput is an input type that accepts GetLbAclsAclMatchArray and GetLbAclsAclMatchArrayOutput values.
// You can construct a concrete instance of `GetLbAclsAclMatchArrayInput` via:
//
//	GetLbAclsAclMatchArray{ GetLbAclsAclMatchArgs{...} }
type GetLbAclsAclMatchArrayInput interface {
	pulumi.Input

	ToGetLbAclsAclMatchArrayOutput() GetLbAclsAclMatchArrayOutput
	ToGetLbAclsAclMatchArrayOutputWithContext(context.Context) GetLbAclsAclMatchArrayOutput
}

type GetLbAclsAclMatchArray []GetLbAclsAclMatchInput

func (GetLbAclsAclMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbAclsAclMatch)(nil)).Elem()
}

func (i GetLbAclsAclMatchArray) ToGetLbAclsAclMatchArrayOutput() GetLbAclsAclMatchArrayOutput {
	return i.ToGetLbAclsAclMatchArrayOutputWithContext(context.Background())
}

func (i GetLbAclsAclMatchArray) ToGetLbAclsAclMatchArrayOutputWithContext(ctx context.Context) GetLbAclsAclMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbAclsAclMatchArrayOutput)
}

func (i GetLbAclsAclMatchArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbAclsAclMatch] {
	return pulumix.Output[[]GetLbAclsAclMatch]{
		OutputState: i.ToGetLbAclsAclMatchArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbAclsAclMatchOutput struct{ *pulumi.OutputState }

func (GetLbAclsAclMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbAclsAclMatch)(nil)).Elem()
}

func (o GetLbAclsAclMatchOutput) ToGetLbAclsAclMatchOutput() GetLbAclsAclMatchOutput {
	return o
}

func (o GetLbAclsAclMatchOutput) ToGetLbAclsAclMatchOutputWithContext(ctx context.Context) GetLbAclsAclMatchOutput {
	return o
}

func (o GetLbAclsAclMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbAclsAclMatch] {
	return pulumix.Output[GetLbAclsAclMatch]{
		OutputState: o.OutputState,
	}
}

// The matched HTTP filter.
func (o GetLbAclsAclMatchOutput) HttpFilter() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbAclsAclMatch) string { return v.HttpFilter }).(pulumi.StringOutput)
}

func (o GetLbAclsAclMatchOutput) HttpFilterOption() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbAclsAclMatch) string { return v.HttpFilterOption }).(pulumi.StringOutput)
}

// The possible values matched for a given HTTP filter.
func (o GetLbAclsAclMatchOutput) HttpFilterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLbAclsAclMatch) []string { return v.HttpFilterValues }).(pulumi.StringArrayOutput)
}

// The condition will be of type "unless" if invert is set to `true`
func (o GetLbAclsAclMatchOutput) Invert() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLbAclsAclMatch) bool { return v.Invert }).(pulumi.BoolOutput)
}

// A list of matched IPs or CIDR v4/v6 addresses of the client of the session.
func (o GetLbAclsAclMatchOutput) IpSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLbAclsAclMatch) []string { return v.IpSubnets }).(pulumi.StringArrayOutput)
}

type GetLbAclsAclMatchArrayOutput struct{ *pulumi.OutputState }

func (GetLbAclsAclMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbAclsAclMatch)(nil)).Elem()
}

func (o GetLbAclsAclMatchArrayOutput) ToGetLbAclsAclMatchArrayOutput() GetLbAclsAclMatchArrayOutput {
	return o
}

func (o GetLbAclsAclMatchArrayOutput) ToGetLbAclsAclMatchArrayOutputWithContext(ctx context.Context) GetLbAclsAclMatchArrayOutput {
	return o
}

func (o GetLbAclsAclMatchArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbAclsAclMatch] {
	return pulumix.Output[[]GetLbAclsAclMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetLbAclsAclMatchArrayOutput) Index(i pulumi.IntInput) GetLbAclsAclMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbAclsAclMatch {
		return vs[0].([]GetLbAclsAclMatch)[vs[1].(int)]
	}).(GetLbAclsAclMatchOutput)
}

type GetLbBackendHealthCheckHttp struct {
	Code       int    `pulumi:"code"`
	HostHeader string `pulumi:"hostHeader"`
	Method     string `pulumi:"method"`
	Sni        string `pulumi:"sni"`
	Uri        string `pulumi:"uri"`
}

// GetLbBackendHealthCheckHttpInput is an input type that accepts GetLbBackendHealthCheckHttpArgs and GetLbBackendHealthCheckHttpOutput values.
// You can construct a concrete instance of `GetLbBackendHealthCheckHttpInput` via:
//
//	GetLbBackendHealthCheckHttpArgs{...}
type GetLbBackendHealthCheckHttpInput interface {
	pulumi.Input

	ToGetLbBackendHealthCheckHttpOutput() GetLbBackendHealthCheckHttpOutput
	ToGetLbBackendHealthCheckHttpOutputWithContext(context.Context) GetLbBackendHealthCheckHttpOutput
}

type GetLbBackendHealthCheckHttpArgs struct {
	Code       pulumi.IntInput    `pulumi:"code"`
	HostHeader pulumi.StringInput `pulumi:"hostHeader"`
	Method     pulumi.StringInput `pulumi:"method"`
	Sni        pulumi.StringInput `pulumi:"sni"`
	Uri        pulumi.StringInput `pulumi:"uri"`
}

func (GetLbBackendHealthCheckHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbBackendHealthCheckHttp)(nil)).Elem()
}

func (i GetLbBackendHealthCheckHttpArgs) ToGetLbBackendHealthCheckHttpOutput() GetLbBackendHealthCheckHttpOutput {
	return i.ToGetLbBackendHealthCheckHttpOutputWithContext(context.Background())
}

func (i GetLbBackendHealthCheckHttpArgs) ToGetLbBackendHealthCheckHttpOutputWithContext(ctx context.Context) GetLbBackendHealthCheckHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbBackendHealthCheckHttpOutput)
}

func (i GetLbBackendHealthCheckHttpArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbBackendHealthCheckHttp] {
	return pulumix.Output[GetLbBackendHealthCheckHttp]{
		OutputState: i.ToGetLbBackendHealthCheckHttpOutputWithContext(ctx).OutputState,
	}
}

// GetLbBackendHealthCheckHttpArrayInput is an input type that accepts GetLbBackendHealthCheckHttpArray and GetLbBackendHealthCheckHttpArrayOutput values.
// You can construct a concrete instance of `GetLbBackendHealthCheckHttpArrayInput` via:
//
//	GetLbBackendHealthCheckHttpArray{ GetLbBackendHealthCheckHttpArgs{...} }
type GetLbBackendHealthCheckHttpArrayInput interface {
	pulumi.Input

	ToGetLbBackendHealthCheckHttpArrayOutput() GetLbBackendHealthCheckHttpArrayOutput
	ToGetLbBackendHealthCheckHttpArrayOutputWithContext(context.Context) GetLbBackendHealthCheckHttpArrayOutput
}

type GetLbBackendHealthCheckHttpArray []GetLbBackendHealthCheckHttpInput

func (GetLbBackendHealthCheckHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbBackendHealthCheckHttp)(nil)).Elem()
}

func (i GetLbBackendHealthCheckHttpArray) ToGetLbBackendHealthCheckHttpArrayOutput() GetLbBackendHealthCheckHttpArrayOutput {
	return i.ToGetLbBackendHealthCheckHttpArrayOutputWithContext(context.Background())
}

func (i GetLbBackendHealthCheckHttpArray) ToGetLbBackendHealthCheckHttpArrayOutputWithContext(ctx context.Context) GetLbBackendHealthCheckHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbBackendHealthCheckHttpArrayOutput)
}

func (i GetLbBackendHealthCheckHttpArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbBackendHealthCheckHttp] {
	return pulumix.Output[[]GetLbBackendHealthCheckHttp]{
		OutputState: i.ToGetLbBackendHealthCheckHttpArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbBackendHealthCheckHttpOutput struct{ *pulumi.OutputState }

func (GetLbBackendHealthCheckHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbBackendHealthCheckHttp)(nil)).Elem()
}

func (o GetLbBackendHealthCheckHttpOutput) ToGetLbBackendHealthCheckHttpOutput() GetLbBackendHealthCheckHttpOutput {
	return o
}

func (o GetLbBackendHealthCheckHttpOutput) ToGetLbBackendHealthCheckHttpOutputWithContext(ctx context.Context) GetLbBackendHealthCheckHttpOutput {
	return o
}

func (o GetLbBackendHealthCheckHttpOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbBackendHealthCheckHttp] {
	return pulumix.Output[GetLbBackendHealthCheckHttp]{
		OutputState: o.OutputState,
	}
}

func (o GetLbBackendHealthCheckHttpOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbBackendHealthCheckHttp) int { return v.Code }).(pulumi.IntOutput)
}

func (o GetLbBackendHealthCheckHttpOutput) HostHeader() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendHealthCheckHttp) string { return v.HostHeader }).(pulumi.StringOutput)
}

func (o GetLbBackendHealthCheckHttpOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendHealthCheckHttp) string { return v.Method }).(pulumi.StringOutput)
}

func (o GetLbBackendHealthCheckHttpOutput) Sni() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendHealthCheckHttp) string { return v.Sni }).(pulumi.StringOutput)
}

func (o GetLbBackendHealthCheckHttpOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendHealthCheckHttp) string { return v.Uri }).(pulumi.StringOutput)
}

type GetLbBackendHealthCheckHttpArrayOutput struct{ *pulumi.OutputState }

func (GetLbBackendHealthCheckHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbBackendHealthCheckHttp)(nil)).Elem()
}

func (o GetLbBackendHealthCheckHttpArrayOutput) ToGetLbBackendHealthCheckHttpArrayOutput() GetLbBackendHealthCheckHttpArrayOutput {
	return o
}

func (o GetLbBackendHealthCheckHttpArrayOutput) ToGetLbBackendHealthCheckHttpArrayOutputWithContext(ctx context.Context) GetLbBackendHealthCheckHttpArrayOutput {
	return o
}

func (o GetLbBackendHealthCheckHttpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbBackendHealthCheckHttp] {
	return pulumix.Output[[]GetLbBackendHealthCheckHttp]{
		OutputState: o.OutputState,
	}
}

func (o GetLbBackendHealthCheckHttpArrayOutput) Index(i pulumi.IntInput) GetLbBackendHealthCheckHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbBackendHealthCheckHttp {
		return vs[0].([]GetLbBackendHealthCheckHttp)[vs[1].(int)]
	}).(GetLbBackendHealthCheckHttpOutput)
}

type GetLbBackendHealthCheckTcp struct {
}

// GetLbBackendHealthCheckTcpInput is an input type that accepts GetLbBackendHealthCheckTcpArgs and GetLbBackendHealthCheckTcpOutput values.
// You can construct a concrete instance of `GetLbBackendHealthCheckTcpInput` via:
//
//	GetLbBackendHealthCheckTcpArgs{...}
type GetLbBackendHealthCheckTcpInput interface {
	pulumi.Input

	ToGetLbBackendHealthCheckTcpOutput() GetLbBackendHealthCheckTcpOutput
	ToGetLbBackendHealthCheckTcpOutputWithContext(context.Context) GetLbBackendHealthCheckTcpOutput
}

type GetLbBackendHealthCheckTcpArgs struct {
}

func (GetLbBackendHealthCheckTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbBackendHealthCheckTcp)(nil)).Elem()
}

func (i GetLbBackendHealthCheckTcpArgs) ToGetLbBackendHealthCheckTcpOutput() GetLbBackendHealthCheckTcpOutput {
	return i.ToGetLbBackendHealthCheckTcpOutputWithContext(context.Background())
}

func (i GetLbBackendHealthCheckTcpArgs) ToGetLbBackendHealthCheckTcpOutputWithContext(ctx context.Context) GetLbBackendHealthCheckTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbBackendHealthCheckTcpOutput)
}

func (i GetLbBackendHealthCheckTcpArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbBackendHealthCheckTcp] {
	return pulumix.Output[GetLbBackendHealthCheckTcp]{
		OutputState: i.ToGetLbBackendHealthCheckTcpOutputWithContext(ctx).OutputState,
	}
}

// GetLbBackendHealthCheckTcpArrayInput is an input type that accepts GetLbBackendHealthCheckTcpArray and GetLbBackendHealthCheckTcpArrayOutput values.
// You can construct a concrete instance of `GetLbBackendHealthCheckTcpArrayInput` via:
//
//	GetLbBackendHealthCheckTcpArray{ GetLbBackendHealthCheckTcpArgs{...} }
type GetLbBackendHealthCheckTcpArrayInput interface {
	pulumi.Input

	ToGetLbBackendHealthCheckTcpArrayOutput() GetLbBackendHealthCheckTcpArrayOutput
	ToGetLbBackendHealthCheckTcpArrayOutputWithContext(context.Context) GetLbBackendHealthCheckTcpArrayOutput
}

type GetLbBackendHealthCheckTcpArray []GetLbBackendHealthCheckTcpInput

func (GetLbBackendHealthCheckTcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbBackendHealthCheckTcp)(nil)).Elem()
}

func (i GetLbBackendHealthCheckTcpArray) ToGetLbBackendHealthCheckTcpArrayOutput() GetLbBackendHealthCheckTcpArrayOutput {
	return i.ToGetLbBackendHealthCheckTcpArrayOutputWithContext(context.Background())
}

func (i GetLbBackendHealthCheckTcpArray) ToGetLbBackendHealthCheckTcpArrayOutputWithContext(ctx context.Context) GetLbBackendHealthCheckTcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbBackendHealthCheckTcpArrayOutput)
}

func (i GetLbBackendHealthCheckTcpArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbBackendHealthCheckTcp] {
	return pulumix.Output[[]GetLbBackendHealthCheckTcp]{
		OutputState: i.ToGetLbBackendHealthCheckTcpArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbBackendHealthCheckTcpOutput struct{ *pulumi.OutputState }

func (GetLbBackendHealthCheckTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbBackendHealthCheckTcp)(nil)).Elem()
}

func (o GetLbBackendHealthCheckTcpOutput) ToGetLbBackendHealthCheckTcpOutput() GetLbBackendHealthCheckTcpOutput {
	return o
}

func (o GetLbBackendHealthCheckTcpOutput) ToGetLbBackendHealthCheckTcpOutputWithContext(ctx context.Context) GetLbBackendHealthCheckTcpOutput {
	return o
}

func (o GetLbBackendHealthCheckTcpOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbBackendHealthCheckTcp] {
	return pulumix.Output[GetLbBackendHealthCheckTcp]{
		OutputState: o.OutputState,
	}
}

type GetLbBackendHealthCheckTcpArrayOutput struct{ *pulumi.OutputState }

func (GetLbBackendHealthCheckTcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbBackendHealthCheckTcp)(nil)).Elem()
}

func (o GetLbBackendHealthCheckTcpArrayOutput) ToGetLbBackendHealthCheckTcpArrayOutput() GetLbBackendHealthCheckTcpArrayOutput {
	return o
}

func (o GetLbBackendHealthCheckTcpArrayOutput) ToGetLbBackendHealthCheckTcpArrayOutputWithContext(ctx context.Context) GetLbBackendHealthCheckTcpArrayOutput {
	return o
}

func (o GetLbBackendHealthCheckTcpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbBackendHealthCheckTcp] {
	return pulumix.Output[[]GetLbBackendHealthCheckTcp]{
		OutputState: o.OutputState,
	}
}

func (o GetLbBackendHealthCheckTcpArrayOutput) Index(i pulumi.IntInput) GetLbBackendHealthCheckTcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbBackendHealthCheckTcp {
		return vs[0].([]GetLbBackendHealthCheckTcp)[vs[1].(int)]
	}).(GetLbBackendHealthCheckTcpOutput)
}

type GetLbBackendsBackend struct {
	// The date at which the backend was created (RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// Scaleway S3 bucket website to be served in case all backend servers are down.
	FailoverHost string `pulumi:"failoverHost"`
	// User sessions will be forwarded to this port of backend servers.
	ForwardPort int `pulumi:"forwardPort"`
	// Load balancing algorithm.
	ForwardPortAlgorithm string `pulumi:"forwardPortAlgorithm"`
	// Backend protocol.
	ForwardProtocol string `pulumi:"forwardProtocol"`
	// Interval between two HC requests.
	HealthCheckDelay string `pulumi:"healthCheckDelay"`
	// This block enable HTTP health check.
	HealthCheckHttp []GetLbBackendsBackendHealthCheckHttp `pulumi:"healthCheckHttp"`
	// This block enable HTTPS health check.
	HealthCheckHttps []GetLbBackendsBackendHealthCheckHttp `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down.
	HealthCheckMaxRetries int `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be sent to.
	HealthCheckPort int `pulumi:"healthCheckPort"`
	// This block enable TCP health check.
	HealthCheckTcps []GetLbBackendsBackendHealthCheckTcp `pulumi:"healthCheckTcps"`
	// Timeout before we consider a HC request failed.
	HealthCheckTimeout string `pulumi:"healthCheckTimeout"`
	// The associated backend ID.
	Id string `pulumi:"id"`
	// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection.
	IgnoreSslServerVerify bool `pulumi:"ignoreSslServerVerify"`
	// The load-balancer ID this backend is attached to. backends with a LB ID like it are listed.
	LbId string `pulumi:"lbId"`
	// The backend name used as filter. Backends with a name like it are listed.
	Name string `pulumi:"name"`
	// Modify what occurs when a backend server is marked down.
	OnMarkedDownAction string `pulumi:"onMarkedDownAction"`
	// The type of PROXY protocol.
	ProxyProtocol string `pulumi:"proxyProtocol"`
	// List of backend server IP addresses.
	ServerIps []string `pulumi:"serverIps"`
	// Enables SSL between load balancer and backend servers.
	SslBridging bool `pulumi:"sslBridging"`
	// Enables cookie-based session persistence.
	StickySessions string `pulumi:"stickySessions"`
	// Cookie name for sticky sessions.
	StickySessionsCookieName string `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time.
	TimeoutConnect string `pulumi:"timeoutConnect"`
	// Maximum server connection inactivity time.
	TimeoutServer string `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time.
	TimeoutTunnel string `pulumi:"timeoutTunnel"`
	// The date at which the backend was last updated (RFC 3339 format).
	UpdateAt string `pulumi:"updateAt"`
}

// GetLbBackendsBackendInput is an input type that accepts GetLbBackendsBackendArgs and GetLbBackendsBackendOutput values.
// You can construct a concrete instance of `GetLbBackendsBackendInput` via:
//
//	GetLbBackendsBackendArgs{...}
type GetLbBackendsBackendInput interface {
	pulumi.Input

	ToGetLbBackendsBackendOutput() GetLbBackendsBackendOutput
	ToGetLbBackendsBackendOutputWithContext(context.Context) GetLbBackendsBackendOutput
}

type GetLbBackendsBackendArgs struct {
	// The date at which the backend was created (RFC 3339 format).
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Scaleway S3 bucket website to be served in case all backend servers are down.
	FailoverHost pulumi.StringInput `pulumi:"failoverHost"`
	// User sessions will be forwarded to this port of backend servers.
	ForwardPort pulumi.IntInput `pulumi:"forwardPort"`
	// Load balancing algorithm.
	ForwardPortAlgorithm pulumi.StringInput `pulumi:"forwardPortAlgorithm"`
	// Backend protocol.
	ForwardProtocol pulumi.StringInput `pulumi:"forwardProtocol"`
	// Interval between two HC requests.
	HealthCheckDelay pulumi.StringInput `pulumi:"healthCheckDelay"`
	// This block enable HTTP health check.
	HealthCheckHttp GetLbBackendsBackendHealthCheckHttpArrayInput `pulumi:"healthCheckHttp"`
	// This block enable HTTPS health check.
	HealthCheckHttps GetLbBackendsBackendHealthCheckHttpArrayInput `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down.
	HealthCheckMaxRetries pulumi.IntInput `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be sent to.
	HealthCheckPort pulumi.IntInput `pulumi:"healthCheckPort"`
	// This block enable TCP health check.
	HealthCheckTcps GetLbBackendsBackendHealthCheckTcpArrayInput `pulumi:"healthCheckTcps"`
	// Timeout before we consider a HC request failed.
	HealthCheckTimeout pulumi.StringInput `pulumi:"healthCheckTimeout"`
	// The associated backend ID.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection.
	IgnoreSslServerVerify pulumi.BoolInput `pulumi:"ignoreSslServerVerify"`
	// The load-balancer ID this backend is attached to. backends with a LB ID like it are listed.
	LbId pulumi.StringInput `pulumi:"lbId"`
	// The backend name used as filter. Backends with a name like it are listed.
	Name pulumi.StringInput `pulumi:"name"`
	// Modify what occurs when a backend server is marked down.
	OnMarkedDownAction pulumi.StringInput `pulumi:"onMarkedDownAction"`
	// The type of PROXY protocol.
	ProxyProtocol pulumi.StringInput `pulumi:"proxyProtocol"`
	// List of backend server IP addresses.
	ServerIps pulumi.StringArrayInput `pulumi:"serverIps"`
	// Enables SSL between load balancer and backend servers.
	SslBridging pulumi.BoolInput `pulumi:"sslBridging"`
	// Enables cookie-based session persistence.
	StickySessions pulumi.StringInput `pulumi:"stickySessions"`
	// Cookie name for sticky sessions.
	StickySessionsCookieName pulumi.StringInput `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time.
	TimeoutConnect pulumi.StringInput `pulumi:"timeoutConnect"`
	// Maximum server connection inactivity time.
	TimeoutServer pulumi.StringInput `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time.
	TimeoutTunnel pulumi.StringInput `pulumi:"timeoutTunnel"`
	// The date at which the backend was last updated (RFC 3339 format).
	UpdateAt pulumi.StringInput `pulumi:"updateAt"`
}

func (GetLbBackendsBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbBackendsBackend)(nil)).Elem()
}

func (i GetLbBackendsBackendArgs) ToGetLbBackendsBackendOutput() GetLbBackendsBackendOutput {
	return i.ToGetLbBackendsBackendOutputWithContext(context.Background())
}

func (i GetLbBackendsBackendArgs) ToGetLbBackendsBackendOutputWithContext(ctx context.Context) GetLbBackendsBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbBackendsBackendOutput)
}

func (i GetLbBackendsBackendArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbBackendsBackend] {
	return pulumix.Output[GetLbBackendsBackend]{
		OutputState: i.ToGetLbBackendsBackendOutputWithContext(ctx).OutputState,
	}
}

// GetLbBackendsBackendArrayInput is an input type that accepts GetLbBackendsBackendArray and GetLbBackendsBackendArrayOutput values.
// You can construct a concrete instance of `GetLbBackendsBackendArrayInput` via:
//
//	GetLbBackendsBackendArray{ GetLbBackendsBackendArgs{...} }
type GetLbBackendsBackendArrayInput interface {
	pulumi.Input

	ToGetLbBackendsBackendArrayOutput() GetLbBackendsBackendArrayOutput
	ToGetLbBackendsBackendArrayOutputWithContext(context.Context) GetLbBackendsBackendArrayOutput
}

type GetLbBackendsBackendArray []GetLbBackendsBackendInput

func (GetLbBackendsBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbBackendsBackend)(nil)).Elem()
}

func (i GetLbBackendsBackendArray) ToGetLbBackendsBackendArrayOutput() GetLbBackendsBackendArrayOutput {
	return i.ToGetLbBackendsBackendArrayOutputWithContext(context.Background())
}

func (i GetLbBackendsBackendArray) ToGetLbBackendsBackendArrayOutputWithContext(ctx context.Context) GetLbBackendsBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbBackendsBackendArrayOutput)
}

func (i GetLbBackendsBackendArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbBackendsBackend] {
	return pulumix.Output[[]GetLbBackendsBackend]{
		OutputState: i.ToGetLbBackendsBackendArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbBackendsBackendOutput struct{ *pulumi.OutputState }

func (GetLbBackendsBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbBackendsBackend)(nil)).Elem()
}

func (o GetLbBackendsBackendOutput) ToGetLbBackendsBackendOutput() GetLbBackendsBackendOutput {
	return o
}

func (o GetLbBackendsBackendOutput) ToGetLbBackendsBackendOutputWithContext(ctx context.Context) GetLbBackendsBackendOutput {
	return o
}

func (o GetLbBackendsBackendOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbBackendsBackend] {
	return pulumix.Output[GetLbBackendsBackend]{
		OutputState: o.OutputState,
	}
}

// The date at which the backend was created (RFC 3339 format).
func (o GetLbBackendsBackendOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Scaleway S3 bucket website to be served in case all backend servers are down.
func (o GetLbBackendsBackendOutput) FailoverHost() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) string { return v.FailoverHost }).(pulumi.StringOutput)
}

// User sessions will be forwarded to this port of backend servers.
func (o GetLbBackendsBackendOutput) ForwardPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) int { return v.ForwardPort }).(pulumi.IntOutput)
}

// Load balancing algorithm.
func (o GetLbBackendsBackendOutput) ForwardPortAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) string { return v.ForwardPortAlgorithm }).(pulumi.StringOutput)
}

// Backend protocol.
func (o GetLbBackendsBackendOutput) ForwardProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) string { return v.ForwardProtocol }).(pulumi.StringOutput)
}

// Interval between two HC requests.
func (o GetLbBackendsBackendOutput) HealthCheckDelay() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) string { return v.HealthCheckDelay }).(pulumi.StringOutput)
}

// This block enable HTTP health check.
func (o GetLbBackendsBackendOutput) HealthCheckHttp() GetLbBackendsBackendHealthCheckHttpArrayOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) []GetLbBackendsBackendHealthCheckHttp { return v.HealthCheckHttp }).(GetLbBackendsBackendHealthCheckHttpArrayOutput)
}

// This block enable HTTPS health check.
func (o GetLbBackendsBackendOutput) HealthCheckHttps() GetLbBackendsBackendHealthCheckHttpArrayOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) []GetLbBackendsBackendHealthCheckHttp { return v.HealthCheckHttps }).(GetLbBackendsBackendHealthCheckHttpArrayOutput)
}

// Number of allowed failed HC requests before the backend server is marked down.
func (o GetLbBackendsBackendOutput) HealthCheckMaxRetries() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) int { return v.HealthCheckMaxRetries }).(pulumi.IntOutput)
}

// Port the HC requests will be sent to.
func (o GetLbBackendsBackendOutput) HealthCheckPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) int { return v.HealthCheckPort }).(pulumi.IntOutput)
}

// This block enable TCP health check.
func (o GetLbBackendsBackendOutput) HealthCheckTcps() GetLbBackendsBackendHealthCheckTcpArrayOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) []GetLbBackendsBackendHealthCheckTcp { return v.HealthCheckTcps }).(GetLbBackendsBackendHealthCheckTcpArrayOutput)
}

// Timeout before we consider a HC request failed.
func (o GetLbBackendsBackendOutput) HealthCheckTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) string { return v.HealthCheckTimeout }).(pulumi.StringOutput)
}

// The associated backend ID.
func (o GetLbBackendsBackendOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection.
func (o GetLbBackendsBackendOutput) IgnoreSslServerVerify() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) bool { return v.IgnoreSslServerVerify }).(pulumi.BoolOutput)
}

// The load-balancer ID this backend is attached to. backends with a LB ID like it are listed.
func (o GetLbBackendsBackendOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) string { return v.LbId }).(pulumi.StringOutput)
}

// The backend name used as filter. Backends with a name like it are listed.
func (o GetLbBackendsBackendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) string { return v.Name }).(pulumi.StringOutput)
}

// Modify what occurs when a backend server is marked down.
func (o GetLbBackendsBackendOutput) OnMarkedDownAction() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) string { return v.OnMarkedDownAction }).(pulumi.StringOutput)
}

// The type of PROXY protocol.
func (o GetLbBackendsBackendOutput) ProxyProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) string { return v.ProxyProtocol }).(pulumi.StringOutput)
}

// List of backend server IP addresses.
func (o GetLbBackendsBackendOutput) ServerIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) []string { return v.ServerIps }).(pulumi.StringArrayOutput)
}

// Enables SSL between load balancer and backend servers.
func (o GetLbBackendsBackendOutput) SslBridging() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) bool { return v.SslBridging }).(pulumi.BoolOutput)
}

// Enables cookie-based session persistence.
func (o GetLbBackendsBackendOutput) StickySessions() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) string { return v.StickySessions }).(pulumi.StringOutput)
}

// Cookie name for sticky sessions.
func (o GetLbBackendsBackendOutput) StickySessionsCookieName() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) string { return v.StickySessionsCookieName }).(pulumi.StringOutput)
}

// Maximum initial server connection establishment time.
func (o GetLbBackendsBackendOutput) TimeoutConnect() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) string { return v.TimeoutConnect }).(pulumi.StringOutput)
}

// Maximum server connection inactivity time.
func (o GetLbBackendsBackendOutput) TimeoutServer() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) string { return v.TimeoutServer }).(pulumi.StringOutput)
}

// Maximum tunnel inactivity time.
func (o GetLbBackendsBackendOutput) TimeoutTunnel() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) string { return v.TimeoutTunnel }).(pulumi.StringOutput)
}

// The date at which the backend was last updated (RFC 3339 format).
func (o GetLbBackendsBackendOutput) UpdateAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackend) string { return v.UpdateAt }).(pulumi.StringOutput)
}

type GetLbBackendsBackendArrayOutput struct{ *pulumi.OutputState }

func (GetLbBackendsBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbBackendsBackend)(nil)).Elem()
}

func (o GetLbBackendsBackendArrayOutput) ToGetLbBackendsBackendArrayOutput() GetLbBackendsBackendArrayOutput {
	return o
}

func (o GetLbBackendsBackendArrayOutput) ToGetLbBackendsBackendArrayOutputWithContext(ctx context.Context) GetLbBackendsBackendArrayOutput {
	return o
}

func (o GetLbBackendsBackendArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbBackendsBackend] {
	return pulumix.Output[[]GetLbBackendsBackend]{
		OutputState: o.OutputState,
	}
}

func (o GetLbBackendsBackendArrayOutput) Index(i pulumi.IntInput) GetLbBackendsBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbBackendsBackend {
		return vs[0].([]GetLbBackendsBackend)[vs[1].(int)]
	}).(GetLbBackendsBackendOutput)
}

type GetLbBackendsBackendHealthCheckHttp struct {
	// The expected HTTP status code.
	Code int `pulumi:"code"`
	// The HTTP host header to use for HC requests.
	HostHeader string `pulumi:"hostHeader"`
	// The HTTP method to use for HC requests.
	Method string `pulumi:"method"`
	// The SNI to use for HC requests over SSL.
	Sni string `pulumi:"sni"`
	// The HTTPS endpoint URL to call for HC requests.
	Uri string `pulumi:"uri"`
}

// GetLbBackendsBackendHealthCheckHttpInput is an input type that accepts GetLbBackendsBackendHealthCheckHttpArgs and GetLbBackendsBackendHealthCheckHttpOutput values.
// You can construct a concrete instance of `GetLbBackendsBackendHealthCheckHttpInput` via:
//
//	GetLbBackendsBackendHealthCheckHttpArgs{...}
type GetLbBackendsBackendHealthCheckHttpInput interface {
	pulumi.Input

	ToGetLbBackendsBackendHealthCheckHttpOutput() GetLbBackendsBackendHealthCheckHttpOutput
	ToGetLbBackendsBackendHealthCheckHttpOutputWithContext(context.Context) GetLbBackendsBackendHealthCheckHttpOutput
}

type GetLbBackendsBackendHealthCheckHttpArgs struct {
	// The expected HTTP status code.
	Code pulumi.IntInput `pulumi:"code"`
	// The HTTP host header to use for HC requests.
	HostHeader pulumi.StringInput `pulumi:"hostHeader"`
	// The HTTP method to use for HC requests.
	Method pulumi.StringInput `pulumi:"method"`
	// The SNI to use for HC requests over SSL.
	Sni pulumi.StringInput `pulumi:"sni"`
	// The HTTPS endpoint URL to call for HC requests.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetLbBackendsBackendHealthCheckHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbBackendsBackendHealthCheckHttp)(nil)).Elem()
}

func (i GetLbBackendsBackendHealthCheckHttpArgs) ToGetLbBackendsBackendHealthCheckHttpOutput() GetLbBackendsBackendHealthCheckHttpOutput {
	return i.ToGetLbBackendsBackendHealthCheckHttpOutputWithContext(context.Background())
}

func (i GetLbBackendsBackendHealthCheckHttpArgs) ToGetLbBackendsBackendHealthCheckHttpOutputWithContext(ctx context.Context) GetLbBackendsBackendHealthCheckHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbBackendsBackendHealthCheckHttpOutput)
}

func (i GetLbBackendsBackendHealthCheckHttpArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbBackendsBackendHealthCheckHttp] {
	return pulumix.Output[GetLbBackendsBackendHealthCheckHttp]{
		OutputState: i.ToGetLbBackendsBackendHealthCheckHttpOutputWithContext(ctx).OutputState,
	}
}

// GetLbBackendsBackendHealthCheckHttpArrayInput is an input type that accepts GetLbBackendsBackendHealthCheckHttpArray and GetLbBackendsBackendHealthCheckHttpArrayOutput values.
// You can construct a concrete instance of `GetLbBackendsBackendHealthCheckHttpArrayInput` via:
//
//	GetLbBackendsBackendHealthCheckHttpArray{ GetLbBackendsBackendHealthCheckHttpArgs{...} }
type GetLbBackendsBackendHealthCheckHttpArrayInput interface {
	pulumi.Input

	ToGetLbBackendsBackendHealthCheckHttpArrayOutput() GetLbBackendsBackendHealthCheckHttpArrayOutput
	ToGetLbBackendsBackendHealthCheckHttpArrayOutputWithContext(context.Context) GetLbBackendsBackendHealthCheckHttpArrayOutput
}

type GetLbBackendsBackendHealthCheckHttpArray []GetLbBackendsBackendHealthCheckHttpInput

func (GetLbBackendsBackendHealthCheckHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbBackendsBackendHealthCheckHttp)(nil)).Elem()
}

func (i GetLbBackendsBackendHealthCheckHttpArray) ToGetLbBackendsBackendHealthCheckHttpArrayOutput() GetLbBackendsBackendHealthCheckHttpArrayOutput {
	return i.ToGetLbBackendsBackendHealthCheckHttpArrayOutputWithContext(context.Background())
}

func (i GetLbBackendsBackendHealthCheckHttpArray) ToGetLbBackendsBackendHealthCheckHttpArrayOutputWithContext(ctx context.Context) GetLbBackendsBackendHealthCheckHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbBackendsBackendHealthCheckHttpArrayOutput)
}

func (i GetLbBackendsBackendHealthCheckHttpArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbBackendsBackendHealthCheckHttp] {
	return pulumix.Output[[]GetLbBackendsBackendHealthCheckHttp]{
		OutputState: i.ToGetLbBackendsBackendHealthCheckHttpArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbBackendsBackendHealthCheckHttpOutput struct{ *pulumi.OutputState }

func (GetLbBackendsBackendHealthCheckHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbBackendsBackendHealthCheckHttp)(nil)).Elem()
}

func (o GetLbBackendsBackendHealthCheckHttpOutput) ToGetLbBackendsBackendHealthCheckHttpOutput() GetLbBackendsBackendHealthCheckHttpOutput {
	return o
}

func (o GetLbBackendsBackendHealthCheckHttpOutput) ToGetLbBackendsBackendHealthCheckHttpOutputWithContext(ctx context.Context) GetLbBackendsBackendHealthCheckHttpOutput {
	return o
}

func (o GetLbBackendsBackendHealthCheckHttpOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbBackendsBackendHealthCheckHttp] {
	return pulumix.Output[GetLbBackendsBackendHealthCheckHttp]{
		OutputState: o.OutputState,
	}
}

// The expected HTTP status code.
func (o GetLbBackendsBackendHealthCheckHttpOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbBackendsBackendHealthCheckHttp) int { return v.Code }).(pulumi.IntOutput)
}

// The HTTP host header to use for HC requests.
func (o GetLbBackendsBackendHealthCheckHttpOutput) HostHeader() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackendHealthCheckHttp) string { return v.HostHeader }).(pulumi.StringOutput)
}

// The HTTP method to use for HC requests.
func (o GetLbBackendsBackendHealthCheckHttpOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackendHealthCheckHttp) string { return v.Method }).(pulumi.StringOutput)
}

// The SNI to use for HC requests over SSL.
func (o GetLbBackendsBackendHealthCheckHttpOutput) Sni() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackendHealthCheckHttp) string { return v.Sni }).(pulumi.StringOutput)
}

// The HTTPS endpoint URL to call for HC requests.
func (o GetLbBackendsBackendHealthCheckHttpOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendsBackendHealthCheckHttp) string { return v.Uri }).(pulumi.StringOutput)
}

type GetLbBackendsBackendHealthCheckHttpArrayOutput struct{ *pulumi.OutputState }

func (GetLbBackendsBackendHealthCheckHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbBackendsBackendHealthCheckHttp)(nil)).Elem()
}

func (o GetLbBackendsBackendHealthCheckHttpArrayOutput) ToGetLbBackendsBackendHealthCheckHttpArrayOutput() GetLbBackendsBackendHealthCheckHttpArrayOutput {
	return o
}

func (o GetLbBackendsBackendHealthCheckHttpArrayOutput) ToGetLbBackendsBackendHealthCheckHttpArrayOutputWithContext(ctx context.Context) GetLbBackendsBackendHealthCheckHttpArrayOutput {
	return o
}

func (o GetLbBackendsBackendHealthCheckHttpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbBackendsBackendHealthCheckHttp] {
	return pulumix.Output[[]GetLbBackendsBackendHealthCheckHttp]{
		OutputState: o.OutputState,
	}
}

func (o GetLbBackendsBackendHealthCheckHttpArrayOutput) Index(i pulumi.IntInput) GetLbBackendsBackendHealthCheckHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbBackendsBackendHealthCheckHttp {
		return vs[0].([]GetLbBackendsBackendHealthCheckHttp)[vs[1].(int)]
	}).(GetLbBackendsBackendHealthCheckHttpOutput)
}

type GetLbBackendsBackendHealthCheckTcp struct {
}

// GetLbBackendsBackendHealthCheckTcpInput is an input type that accepts GetLbBackendsBackendHealthCheckTcpArgs and GetLbBackendsBackendHealthCheckTcpOutput values.
// You can construct a concrete instance of `GetLbBackendsBackendHealthCheckTcpInput` via:
//
//	GetLbBackendsBackendHealthCheckTcpArgs{...}
type GetLbBackendsBackendHealthCheckTcpInput interface {
	pulumi.Input

	ToGetLbBackendsBackendHealthCheckTcpOutput() GetLbBackendsBackendHealthCheckTcpOutput
	ToGetLbBackendsBackendHealthCheckTcpOutputWithContext(context.Context) GetLbBackendsBackendHealthCheckTcpOutput
}

type GetLbBackendsBackendHealthCheckTcpArgs struct {
}

func (GetLbBackendsBackendHealthCheckTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbBackendsBackendHealthCheckTcp)(nil)).Elem()
}

func (i GetLbBackendsBackendHealthCheckTcpArgs) ToGetLbBackendsBackendHealthCheckTcpOutput() GetLbBackendsBackendHealthCheckTcpOutput {
	return i.ToGetLbBackendsBackendHealthCheckTcpOutputWithContext(context.Background())
}

func (i GetLbBackendsBackendHealthCheckTcpArgs) ToGetLbBackendsBackendHealthCheckTcpOutputWithContext(ctx context.Context) GetLbBackendsBackendHealthCheckTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbBackendsBackendHealthCheckTcpOutput)
}

func (i GetLbBackendsBackendHealthCheckTcpArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbBackendsBackendHealthCheckTcp] {
	return pulumix.Output[GetLbBackendsBackendHealthCheckTcp]{
		OutputState: i.ToGetLbBackendsBackendHealthCheckTcpOutputWithContext(ctx).OutputState,
	}
}

// GetLbBackendsBackendHealthCheckTcpArrayInput is an input type that accepts GetLbBackendsBackendHealthCheckTcpArray and GetLbBackendsBackendHealthCheckTcpArrayOutput values.
// You can construct a concrete instance of `GetLbBackendsBackendHealthCheckTcpArrayInput` via:
//
//	GetLbBackendsBackendHealthCheckTcpArray{ GetLbBackendsBackendHealthCheckTcpArgs{...} }
type GetLbBackendsBackendHealthCheckTcpArrayInput interface {
	pulumi.Input

	ToGetLbBackendsBackendHealthCheckTcpArrayOutput() GetLbBackendsBackendHealthCheckTcpArrayOutput
	ToGetLbBackendsBackendHealthCheckTcpArrayOutputWithContext(context.Context) GetLbBackendsBackendHealthCheckTcpArrayOutput
}

type GetLbBackendsBackendHealthCheckTcpArray []GetLbBackendsBackendHealthCheckTcpInput

func (GetLbBackendsBackendHealthCheckTcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbBackendsBackendHealthCheckTcp)(nil)).Elem()
}

func (i GetLbBackendsBackendHealthCheckTcpArray) ToGetLbBackendsBackendHealthCheckTcpArrayOutput() GetLbBackendsBackendHealthCheckTcpArrayOutput {
	return i.ToGetLbBackendsBackendHealthCheckTcpArrayOutputWithContext(context.Background())
}

func (i GetLbBackendsBackendHealthCheckTcpArray) ToGetLbBackendsBackendHealthCheckTcpArrayOutputWithContext(ctx context.Context) GetLbBackendsBackendHealthCheckTcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbBackendsBackendHealthCheckTcpArrayOutput)
}

func (i GetLbBackendsBackendHealthCheckTcpArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbBackendsBackendHealthCheckTcp] {
	return pulumix.Output[[]GetLbBackendsBackendHealthCheckTcp]{
		OutputState: i.ToGetLbBackendsBackendHealthCheckTcpArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbBackendsBackendHealthCheckTcpOutput struct{ *pulumi.OutputState }

func (GetLbBackendsBackendHealthCheckTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbBackendsBackendHealthCheckTcp)(nil)).Elem()
}

func (o GetLbBackendsBackendHealthCheckTcpOutput) ToGetLbBackendsBackendHealthCheckTcpOutput() GetLbBackendsBackendHealthCheckTcpOutput {
	return o
}

func (o GetLbBackendsBackendHealthCheckTcpOutput) ToGetLbBackendsBackendHealthCheckTcpOutputWithContext(ctx context.Context) GetLbBackendsBackendHealthCheckTcpOutput {
	return o
}

func (o GetLbBackendsBackendHealthCheckTcpOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbBackendsBackendHealthCheckTcp] {
	return pulumix.Output[GetLbBackendsBackendHealthCheckTcp]{
		OutputState: o.OutputState,
	}
}

type GetLbBackendsBackendHealthCheckTcpArrayOutput struct{ *pulumi.OutputState }

func (GetLbBackendsBackendHealthCheckTcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbBackendsBackendHealthCheckTcp)(nil)).Elem()
}

func (o GetLbBackendsBackendHealthCheckTcpArrayOutput) ToGetLbBackendsBackendHealthCheckTcpArrayOutput() GetLbBackendsBackendHealthCheckTcpArrayOutput {
	return o
}

func (o GetLbBackendsBackendHealthCheckTcpArrayOutput) ToGetLbBackendsBackendHealthCheckTcpArrayOutputWithContext(ctx context.Context) GetLbBackendsBackendHealthCheckTcpArrayOutput {
	return o
}

func (o GetLbBackendsBackendHealthCheckTcpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbBackendsBackendHealthCheckTcp] {
	return pulumix.Output[[]GetLbBackendsBackendHealthCheckTcp]{
		OutputState: o.OutputState,
	}
}

func (o GetLbBackendsBackendHealthCheckTcpArrayOutput) Index(i pulumi.IntInput) GetLbBackendsBackendHealthCheckTcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbBackendsBackendHealthCheckTcp {
		return vs[0].([]GetLbBackendsBackendHealthCheckTcp)[vs[1].(int)]
	}).(GetLbBackendsBackendHealthCheckTcpOutput)
}

type GetLbCertificateCustomCertificate struct {
	CertificateChain string `pulumi:"certificateChain"`
}

// GetLbCertificateCustomCertificateInput is an input type that accepts GetLbCertificateCustomCertificateArgs and GetLbCertificateCustomCertificateOutput values.
// You can construct a concrete instance of `GetLbCertificateCustomCertificateInput` via:
//
//	GetLbCertificateCustomCertificateArgs{...}
type GetLbCertificateCustomCertificateInput interface {
	pulumi.Input

	ToGetLbCertificateCustomCertificateOutput() GetLbCertificateCustomCertificateOutput
	ToGetLbCertificateCustomCertificateOutputWithContext(context.Context) GetLbCertificateCustomCertificateOutput
}

type GetLbCertificateCustomCertificateArgs struct {
	CertificateChain pulumi.StringInput `pulumi:"certificateChain"`
}

func (GetLbCertificateCustomCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbCertificateCustomCertificate)(nil)).Elem()
}

func (i GetLbCertificateCustomCertificateArgs) ToGetLbCertificateCustomCertificateOutput() GetLbCertificateCustomCertificateOutput {
	return i.ToGetLbCertificateCustomCertificateOutputWithContext(context.Background())
}

func (i GetLbCertificateCustomCertificateArgs) ToGetLbCertificateCustomCertificateOutputWithContext(ctx context.Context) GetLbCertificateCustomCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbCertificateCustomCertificateOutput)
}

func (i GetLbCertificateCustomCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbCertificateCustomCertificate] {
	return pulumix.Output[GetLbCertificateCustomCertificate]{
		OutputState: i.ToGetLbCertificateCustomCertificateOutputWithContext(ctx).OutputState,
	}
}

// GetLbCertificateCustomCertificateArrayInput is an input type that accepts GetLbCertificateCustomCertificateArray and GetLbCertificateCustomCertificateArrayOutput values.
// You can construct a concrete instance of `GetLbCertificateCustomCertificateArrayInput` via:
//
//	GetLbCertificateCustomCertificateArray{ GetLbCertificateCustomCertificateArgs{...} }
type GetLbCertificateCustomCertificateArrayInput interface {
	pulumi.Input

	ToGetLbCertificateCustomCertificateArrayOutput() GetLbCertificateCustomCertificateArrayOutput
	ToGetLbCertificateCustomCertificateArrayOutputWithContext(context.Context) GetLbCertificateCustomCertificateArrayOutput
}

type GetLbCertificateCustomCertificateArray []GetLbCertificateCustomCertificateInput

func (GetLbCertificateCustomCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbCertificateCustomCertificate)(nil)).Elem()
}

func (i GetLbCertificateCustomCertificateArray) ToGetLbCertificateCustomCertificateArrayOutput() GetLbCertificateCustomCertificateArrayOutput {
	return i.ToGetLbCertificateCustomCertificateArrayOutputWithContext(context.Background())
}

func (i GetLbCertificateCustomCertificateArray) ToGetLbCertificateCustomCertificateArrayOutputWithContext(ctx context.Context) GetLbCertificateCustomCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbCertificateCustomCertificateArrayOutput)
}

func (i GetLbCertificateCustomCertificateArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbCertificateCustomCertificate] {
	return pulumix.Output[[]GetLbCertificateCustomCertificate]{
		OutputState: i.ToGetLbCertificateCustomCertificateArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbCertificateCustomCertificateOutput struct{ *pulumi.OutputState }

func (GetLbCertificateCustomCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbCertificateCustomCertificate)(nil)).Elem()
}

func (o GetLbCertificateCustomCertificateOutput) ToGetLbCertificateCustomCertificateOutput() GetLbCertificateCustomCertificateOutput {
	return o
}

func (o GetLbCertificateCustomCertificateOutput) ToGetLbCertificateCustomCertificateOutputWithContext(ctx context.Context) GetLbCertificateCustomCertificateOutput {
	return o
}

func (o GetLbCertificateCustomCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbCertificateCustomCertificate] {
	return pulumix.Output[GetLbCertificateCustomCertificate]{
		OutputState: o.OutputState,
	}
}

func (o GetLbCertificateCustomCertificateOutput) CertificateChain() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbCertificateCustomCertificate) string { return v.CertificateChain }).(pulumi.StringOutput)
}

type GetLbCertificateCustomCertificateArrayOutput struct{ *pulumi.OutputState }

func (GetLbCertificateCustomCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbCertificateCustomCertificate)(nil)).Elem()
}

func (o GetLbCertificateCustomCertificateArrayOutput) ToGetLbCertificateCustomCertificateArrayOutput() GetLbCertificateCustomCertificateArrayOutput {
	return o
}

func (o GetLbCertificateCustomCertificateArrayOutput) ToGetLbCertificateCustomCertificateArrayOutputWithContext(ctx context.Context) GetLbCertificateCustomCertificateArrayOutput {
	return o
}

func (o GetLbCertificateCustomCertificateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbCertificateCustomCertificate] {
	return pulumix.Output[[]GetLbCertificateCustomCertificate]{
		OutputState: o.OutputState,
	}
}

func (o GetLbCertificateCustomCertificateArrayOutput) Index(i pulumi.IntInput) GetLbCertificateCustomCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbCertificateCustomCertificate {
		return vs[0].([]GetLbCertificateCustomCertificate)[vs[1].(int)]
	}).(GetLbCertificateCustomCertificateOutput)
}

type GetLbCertificateLetsencrypt struct {
	CommonName              string   `pulumi:"commonName"`
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
}

// GetLbCertificateLetsencryptInput is an input type that accepts GetLbCertificateLetsencryptArgs and GetLbCertificateLetsencryptOutput values.
// You can construct a concrete instance of `GetLbCertificateLetsencryptInput` via:
//
//	GetLbCertificateLetsencryptArgs{...}
type GetLbCertificateLetsencryptInput interface {
	pulumi.Input

	ToGetLbCertificateLetsencryptOutput() GetLbCertificateLetsencryptOutput
	ToGetLbCertificateLetsencryptOutputWithContext(context.Context) GetLbCertificateLetsencryptOutput
}

type GetLbCertificateLetsencryptArgs struct {
	CommonName              pulumi.StringInput      `pulumi:"commonName"`
	SubjectAlternativeNames pulumi.StringArrayInput `pulumi:"subjectAlternativeNames"`
}

func (GetLbCertificateLetsencryptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbCertificateLetsencrypt)(nil)).Elem()
}

func (i GetLbCertificateLetsencryptArgs) ToGetLbCertificateLetsencryptOutput() GetLbCertificateLetsencryptOutput {
	return i.ToGetLbCertificateLetsencryptOutputWithContext(context.Background())
}

func (i GetLbCertificateLetsencryptArgs) ToGetLbCertificateLetsencryptOutputWithContext(ctx context.Context) GetLbCertificateLetsencryptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbCertificateLetsencryptOutput)
}

func (i GetLbCertificateLetsencryptArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbCertificateLetsencrypt] {
	return pulumix.Output[GetLbCertificateLetsencrypt]{
		OutputState: i.ToGetLbCertificateLetsencryptOutputWithContext(ctx).OutputState,
	}
}

// GetLbCertificateLetsencryptArrayInput is an input type that accepts GetLbCertificateLetsencryptArray and GetLbCertificateLetsencryptArrayOutput values.
// You can construct a concrete instance of `GetLbCertificateLetsencryptArrayInput` via:
//
//	GetLbCertificateLetsencryptArray{ GetLbCertificateLetsencryptArgs{...} }
type GetLbCertificateLetsencryptArrayInput interface {
	pulumi.Input

	ToGetLbCertificateLetsencryptArrayOutput() GetLbCertificateLetsencryptArrayOutput
	ToGetLbCertificateLetsencryptArrayOutputWithContext(context.Context) GetLbCertificateLetsencryptArrayOutput
}

type GetLbCertificateLetsencryptArray []GetLbCertificateLetsencryptInput

func (GetLbCertificateLetsencryptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbCertificateLetsencrypt)(nil)).Elem()
}

func (i GetLbCertificateLetsencryptArray) ToGetLbCertificateLetsencryptArrayOutput() GetLbCertificateLetsencryptArrayOutput {
	return i.ToGetLbCertificateLetsencryptArrayOutputWithContext(context.Background())
}

func (i GetLbCertificateLetsencryptArray) ToGetLbCertificateLetsencryptArrayOutputWithContext(ctx context.Context) GetLbCertificateLetsencryptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbCertificateLetsencryptArrayOutput)
}

func (i GetLbCertificateLetsencryptArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbCertificateLetsencrypt] {
	return pulumix.Output[[]GetLbCertificateLetsencrypt]{
		OutputState: i.ToGetLbCertificateLetsencryptArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbCertificateLetsencryptOutput struct{ *pulumi.OutputState }

func (GetLbCertificateLetsencryptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbCertificateLetsencrypt)(nil)).Elem()
}

func (o GetLbCertificateLetsencryptOutput) ToGetLbCertificateLetsencryptOutput() GetLbCertificateLetsencryptOutput {
	return o
}

func (o GetLbCertificateLetsencryptOutput) ToGetLbCertificateLetsencryptOutputWithContext(ctx context.Context) GetLbCertificateLetsencryptOutput {
	return o
}

func (o GetLbCertificateLetsencryptOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbCertificateLetsencrypt] {
	return pulumix.Output[GetLbCertificateLetsencrypt]{
		OutputState: o.OutputState,
	}
}

func (o GetLbCertificateLetsencryptOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbCertificateLetsencrypt) string { return v.CommonName }).(pulumi.StringOutput)
}

func (o GetLbCertificateLetsencryptOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLbCertificateLetsencrypt) []string { return v.SubjectAlternativeNames }).(pulumi.StringArrayOutput)
}

type GetLbCertificateLetsencryptArrayOutput struct{ *pulumi.OutputState }

func (GetLbCertificateLetsencryptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbCertificateLetsencrypt)(nil)).Elem()
}

func (o GetLbCertificateLetsencryptArrayOutput) ToGetLbCertificateLetsencryptArrayOutput() GetLbCertificateLetsencryptArrayOutput {
	return o
}

func (o GetLbCertificateLetsencryptArrayOutput) ToGetLbCertificateLetsencryptArrayOutputWithContext(ctx context.Context) GetLbCertificateLetsencryptArrayOutput {
	return o
}

func (o GetLbCertificateLetsencryptArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbCertificateLetsencrypt] {
	return pulumix.Output[[]GetLbCertificateLetsencrypt]{
		OutputState: o.OutputState,
	}
}

func (o GetLbCertificateLetsencryptArrayOutput) Index(i pulumi.IntInput) GetLbCertificateLetsencryptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbCertificateLetsencrypt {
		return vs[0].([]GetLbCertificateLetsencrypt)[vs[1].(int)]
	}).(GetLbCertificateLetsencryptOutput)
}

type GetLbFrontendAcl struct {
	Actions     []GetLbFrontendAclAction `pulumi:"actions"`
	CreatedAt   string                   `pulumi:"createdAt"`
	Description string                   `pulumi:"description"`
	Matches     []GetLbFrontendAclMatch  `pulumi:"matches"`
	// The name of the frontend.
	// - When using the `name` you should specify the `lb-id`
	Name      string `pulumi:"name"`
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetLbFrontendAclInput is an input type that accepts GetLbFrontendAclArgs and GetLbFrontendAclOutput values.
// You can construct a concrete instance of `GetLbFrontendAclInput` via:
//
//	GetLbFrontendAclArgs{...}
type GetLbFrontendAclInput interface {
	pulumi.Input

	ToGetLbFrontendAclOutput() GetLbFrontendAclOutput
	ToGetLbFrontendAclOutputWithContext(context.Context) GetLbFrontendAclOutput
}

type GetLbFrontendAclArgs struct {
	Actions     GetLbFrontendAclActionArrayInput `pulumi:"actions"`
	CreatedAt   pulumi.StringInput               `pulumi:"createdAt"`
	Description pulumi.StringInput               `pulumi:"description"`
	Matches     GetLbFrontendAclMatchArrayInput  `pulumi:"matches"`
	// The name of the frontend.
	// - When using the `name` you should specify the `lb-id`
	Name      pulumi.StringInput `pulumi:"name"`
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetLbFrontendAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbFrontendAcl)(nil)).Elem()
}

func (i GetLbFrontendAclArgs) ToGetLbFrontendAclOutput() GetLbFrontendAclOutput {
	return i.ToGetLbFrontendAclOutputWithContext(context.Background())
}

func (i GetLbFrontendAclArgs) ToGetLbFrontendAclOutputWithContext(ctx context.Context) GetLbFrontendAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbFrontendAclOutput)
}

func (i GetLbFrontendAclArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbFrontendAcl] {
	return pulumix.Output[GetLbFrontendAcl]{
		OutputState: i.ToGetLbFrontendAclOutputWithContext(ctx).OutputState,
	}
}

// GetLbFrontendAclArrayInput is an input type that accepts GetLbFrontendAclArray and GetLbFrontendAclArrayOutput values.
// You can construct a concrete instance of `GetLbFrontendAclArrayInput` via:
//
//	GetLbFrontendAclArray{ GetLbFrontendAclArgs{...} }
type GetLbFrontendAclArrayInput interface {
	pulumi.Input

	ToGetLbFrontendAclArrayOutput() GetLbFrontendAclArrayOutput
	ToGetLbFrontendAclArrayOutputWithContext(context.Context) GetLbFrontendAclArrayOutput
}

type GetLbFrontendAclArray []GetLbFrontendAclInput

func (GetLbFrontendAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbFrontendAcl)(nil)).Elem()
}

func (i GetLbFrontendAclArray) ToGetLbFrontendAclArrayOutput() GetLbFrontendAclArrayOutput {
	return i.ToGetLbFrontendAclArrayOutputWithContext(context.Background())
}

func (i GetLbFrontendAclArray) ToGetLbFrontendAclArrayOutputWithContext(ctx context.Context) GetLbFrontendAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbFrontendAclArrayOutput)
}

func (i GetLbFrontendAclArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbFrontendAcl] {
	return pulumix.Output[[]GetLbFrontendAcl]{
		OutputState: i.ToGetLbFrontendAclArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbFrontendAclOutput struct{ *pulumi.OutputState }

func (GetLbFrontendAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbFrontendAcl)(nil)).Elem()
}

func (o GetLbFrontendAclOutput) ToGetLbFrontendAclOutput() GetLbFrontendAclOutput {
	return o
}

func (o GetLbFrontendAclOutput) ToGetLbFrontendAclOutputWithContext(ctx context.Context) GetLbFrontendAclOutput {
	return o
}

func (o GetLbFrontendAclOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbFrontendAcl] {
	return pulumix.Output[GetLbFrontendAcl]{
		OutputState: o.OutputState,
	}
}

func (o GetLbFrontendAclOutput) Actions() GetLbFrontendAclActionArrayOutput {
	return o.ApplyT(func(v GetLbFrontendAcl) []GetLbFrontendAclAction { return v.Actions }).(GetLbFrontendAclActionArrayOutput)
}

func (o GetLbFrontendAclOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendAcl) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o GetLbFrontendAclOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendAcl) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetLbFrontendAclOutput) Matches() GetLbFrontendAclMatchArrayOutput {
	return o.ApplyT(func(v GetLbFrontendAcl) []GetLbFrontendAclMatch { return v.Matches }).(GetLbFrontendAclMatchArrayOutput)
}

// The name of the frontend.
// - When using the `name` you should specify the `lb-id`
func (o GetLbFrontendAclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendAcl) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetLbFrontendAclOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendAcl) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetLbFrontendAclArrayOutput struct{ *pulumi.OutputState }

func (GetLbFrontendAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbFrontendAcl)(nil)).Elem()
}

func (o GetLbFrontendAclArrayOutput) ToGetLbFrontendAclArrayOutput() GetLbFrontendAclArrayOutput {
	return o
}

func (o GetLbFrontendAclArrayOutput) ToGetLbFrontendAclArrayOutputWithContext(ctx context.Context) GetLbFrontendAclArrayOutput {
	return o
}

func (o GetLbFrontendAclArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbFrontendAcl] {
	return pulumix.Output[[]GetLbFrontendAcl]{
		OutputState: o.OutputState,
	}
}

func (o GetLbFrontendAclArrayOutput) Index(i pulumi.IntInput) GetLbFrontendAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbFrontendAcl {
		return vs[0].([]GetLbFrontendAcl)[vs[1].(int)]
	}).(GetLbFrontendAclOutput)
}

type GetLbFrontendAclAction struct {
	Redirects []GetLbFrontendAclActionRedirect `pulumi:"redirects"`
	Type      string                           `pulumi:"type"`
}

// GetLbFrontendAclActionInput is an input type that accepts GetLbFrontendAclActionArgs and GetLbFrontendAclActionOutput values.
// You can construct a concrete instance of `GetLbFrontendAclActionInput` via:
//
//	GetLbFrontendAclActionArgs{...}
type GetLbFrontendAclActionInput interface {
	pulumi.Input

	ToGetLbFrontendAclActionOutput() GetLbFrontendAclActionOutput
	ToGetLbFrontendAclActionOutputWithContext(context.Context) GetLbFrontendAclActionOutput
}

type GetLbFrontendAclActionArgs struct {
	Redirects GetLbFrontendAclActionRedirectArrayInput `pulumi:"redirects"`
	Type      pulumi.StringInput                       `pulumi:"type"`
}

func (GetLbFrontendAclActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbFrontendAclAction)(nil)).Elem()
}

func (i GetLbFrontendAclActionArgs) ToGetLbFrontendAclActionOutput() GetLbFrontendAclActionOutput {
	return i.ToGetLbFrontendAclActionOutputWithContext(context.Background())
}

func (i GetLbFrontendAclActionArgs) ToGetLbFrontendAclActionOutputWithContext(ctx context.Context) GetLbFrontendAclActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbFrontendAclActionOutput)
}

func (i GetLbFrontendAclActionArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbFrontendAclAction] {
	return pulumix.Output[GetLbFrontendAclAction]{
		OutputState: i.ToGetLbFrontendAclActionOutputWithContext(ctx).OutputState,
	}
}

// GetLbFrontendAclActionArrayInput is an input type that accepts GetLbFrontendAclActionArray and GetLbFrontendAclActionArrayOutput values.
// You can construct a concrete instance of `GetLbFrontendAclActionArrayInput` via:
//
//	GetLbFrontendAclActionArray{ GetLbFrontendAclActionArgs{...} }
type GetLbFrontendAclActionArrayInput interface {
	pulumi.Input

	ToGetLbFrontendAclActionArrayOutput() GetLbFrontendAclActionArrayOutput
	ToGetLbFrontendAclActionArrayOutputWithContext(context.Context) GetLbFrontendAclActionArrayOutput
}

type GetLbFrontendAclActionArray []GetLbFrontendAclActionInput

func (GetLbFrontendAclActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbFrontendAclAction)(nil)).Elem()
}

func (i GetLbFrontendAclActionArray) ToGetLbFrontendAclActionArrayOutput() GetLbFrontendAclActionArrayOutput {
	return i.ToGetLbFrontendAclActionArrayOutputWithContext(context.Background())
}

func (i GetLbFrontendAclActionArray) ToGetLbFrontendAclActionArrayOutputWithContext(ctx context.Context) GetLbFrontendAclActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbFrontendAclActionArrayOutput)
}

func (i GetLbFrontendAclActionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbFrontendAclAction] {
	return pulumix.Output[[]GetLbFrontendAclAction]{
		OutputState: i.ToGetLbFrontendAclActionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbFrontendAclActionOutput struct{ *pulumi.OutputState }

func (GetLbFrontendAclActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbFrontendAclAction)(nil)).Elem()
}

func (o GetLbFrontendAclActionOutput) ToGetLbFrontendAclActionOutput() GetLbFrontendAclActionOutput {
	return o
}

func (o GetLbFrontendAclActionOutput) ToGetLbFrontendAclActionOutputWithContext(ctx context.Context) GetLbFrontendAclActionOutput {
	return o
}

func (o GetLbFrontendAclActionOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbFrontendAclAction] {
	return pulumix.Output[GetLbFrontendAclAction]{
		OutputState: o.OutputState,
	}
}

func (o GetLbFrontendAclActionOutput) Redirects() GetLbFrontendAclActionRedirectArrayOutput {
	return o.ApplyT(func(v GetLbFrontendAclAction) []GetLbFrontendAclActionRedirect { return v.Redirects }).(GetLbFrontendAclActionRedirectArrayOutput)
}

func (o GetLbFrontendAclActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendAclAction) string { return v.Type }).(pulumi.StringOutput)
}

type GetLbFrontendAclActionArrayOutput struct{ *pulumi.OutputState }

func (GetLbFrontendAclActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbFrontendAclAction)(nil)).Elem()
}

func (o GetLbFrontendAclActionArrayOutput) ToGetLbFrontendAclActionArrayOutput() GetLbFrontendAclActionArrayOutput {
	return o
}

func (o GetLbFrontendAclActionArrayOutput) ToGetLbFrontendAclActionArrayOutputWithContext(ctx context.Context) GetLbFrontendAclActionArrayOutput {
	return o
}

func (o GetLbFrontendAclActionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbFrontendAclAction] {
	return pulumix.Output[[]GetLbFrontendAclAction]{
		OutputState: o.OutputState,
	}
}

func (o GetLbFrontendAclActionArrayOutput) Index(i pulumi.IntInput) GetLbFrontendAclActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbFrontendAclAction {
		return vs[0].([]GetLbFrontendAclAction)[vs[1].(int)]
	}).(GetLbFrontendAclActionOutput)
}

type GetLbFrontendAclActionRedirect struct {
	Code   int    `pulumi:"code"`
	Target string `pulumi:"target"`
	Type   string `pulumi:"type"`
}

// GetLbFrontendAclActionRedirectInput is an input type that accepts GetLbFrontendAclActionRedirectArgs and GetLbFrontendAclActionRedirectOutput values.
// You can construct a concrete instance of `GetLbFrontendAclActionRedirectInput` via:
//
//	GetLbFrontendAclActionRedirectArgs{...}
type GetLbFrontendAclActionRedirectInput interface {
	pulumi.Input

	ToGetLbFrontendAclActionRedirectOutput() GetLbFrontendAclActionRedirectOutput
	ToGetLbFrontendAclActionRedirectOutputWithContext(context.Context) GetLbFrontendAclActionRedirectOutput
}

type GetLbFrontendAclActionRedirectArgs struct {
	Code   pulumi.IntInput    `pulumi:"code"`
	Target pulumi.StringInput `pulumi:"target"`
	Type   pulumi.StringInput `pulumi:"type"`
}

func (GetLbFrontendAclActionRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbFrontendAclActionRedirect)(nil)).Elem()
}

func (i GetLbFrontendAclActionRedirectArgs) ToGetLbFrontendAclActionRedirectOutput() GetLbFrontendAclActionRedirectOutput {
	return i.ToGetLbFrontendAclActionRedirectOutputWithContext(context.Background())
}

func (i GetLbFrontendAclActionRedirectArgs) ToGetLbFrontendAclActionRedirectOutputWithContext(ctx context.Context) GetLbFrontendAclActionRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbFrontendAclActionRedirectOutput)
}

func (i GetLbFrontendAclActionRedirectArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbFrontendAclActionRedirect] {
	return pulumix.Output[GetLbFrontendAclActionRedirect]{
		OutputState: i.ToGetLbFrontendAclActionRedirectOutputWithContext(ctx).OutputState,
	}
}

// GetLbFrontendAclActionRedirectArrayInput is an input type that accepts GetLbFrontendAclActionRedirectArray and GetLbFrontendAclActionRedirectArrayOutput values.
// You can construct a concrete instance of `GetLbFrontendAclActionRedirectArrayInput` via:
//
//	GetLbFrontendAclActionRedirectArray{ GetLbFrontendAclActionRedirectArgs{...} }
type GetLbFrontendAclActionRedirectArrayInput interface {
	pulumi.Input

	ToGetLbFrontendAclActionRedirectArrayOutput() GetLbFrontendAclActionRedirectArrayOutput
	ToGetLbFrontendAclActionRedirectArrayOutputWithContext(context.Context) GetLbFrontendAclActionRedirectArrayOutput
}

type GetLbFrontendAclActionRedirectArray []GetLbFrontendAclActionRedirectInput

func (GetLbFrontendAclActionRedirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbFrontendAclActionRedirect)(nil)).Elem()
}

func (i GetLbFrontendAclActionRedirectArray) ToGetLbFrontendAclActionRedirectArrayOutput() GetLbFrontendAclActionRedirectArrayOutput {
	return i.ToGetLbFrontendAclActionRedirectArrayOutputWithContext(context.Background())
}

func (i GetLbFrontendAclActionRedirectArray) ToGetLbFrontendAclActionRedirectArrayOutputWithContext(ctx context.Context) GetLbFrontendAclActionRedirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbFrontendAclActionRedirectArrayOutput)
}

func (i GetLbFrontendAclActionRedirectArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbFrontendAclActionRedirect] {
	return pulumix.Output[[]GetLbFrontendAclActionRedirect]{
		OutputState: i.ToGetLbFrontendAclActionRedirectArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbFrontendAclActionRedirectOutput struct{ *pulumi.OutputState }

func (GetLbFrontendAclActionRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbFrontendAclActionRedirect)(nil)).Elem()
}

func (o GetLbFrontendAclActionRedirectOutput) ToGetLbFrontendAclActionRedirectOutput() GetLbFrontendAclActionRedirectOutput {
	return o
}

func (o GetLbFrontendAclActionRedirectOutput) ToGetLbFrontendAclActionRedirectOutputWithContext(ctx context.Context) GetLbFrontendAclActionRedirectOutput {
	return o
}

func (o GetLbFrontendAclActionRedirectOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbFrontendAclActionRedirect] {
	return pulumix.Output[GetLbFrontendAclActionRedirect]{
		OutputState: o.OutputState,
	}
}

func (o GetLbFrontendAclActionRedirectOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbFrontendAclActionRedirect) int { return v.Code }).(pulumi.IntOutput)
}

func (o GetLbFrontendAclActionRedirectOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendAclActionRedirect) string { return v.Target }).(pulumi.StringOutput)
}

func (o GetLbFrontendAclActionRedirectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendAclActionRedirect) string { return v.Type }).(pulumi.StringOutput)
}

type GetLbFrontendAclActionRedirectArrayOutput struct{ *pulumi.OutputState }

func (GetLbFrontendAclActionRedirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbFrontendAclActionRedirect)(nil)).Elem()
}

func (o GetLbFrontendAclActionRedirectArrayOutput) ToGetLbFrontendAclActionRedirectArrayOutput() GetLbFrontendAclActionRedirectArrayOutput {
	return o
}

func (o GetLbFrontendAclActionRedirectArrayOutput) ToGetLbFrontendAclActionRedirectArrayOutputWithContext(ctx context.Context) GetLbFrontendAclActionRedirectArrayOutput {
	return o
}

func (o GetLbFrontendAclActionRedirectArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbFrontendAclActionRedirect] {
	return pulumix.Output[[]GetLbFrontendAclActionRedirect]{
		OutputState: o.OutputState,
	}
}

func (o GetLbFrontendAclActionRedirectArrayOutput) Index(i pulumi.IntInput) GetLbFrontendAclActionRedirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbFrontendAclActionRedirect {
		return vs[0].([]GetLbFrontendAclActionRedirect)[vs[1].(int)]
	}).(GetLbFrontendAclActionRedirectOutput)
}

type GetLbFrontendAclMatch struct {
	HttpFilter       string   `pulumi:"httpFilter"`
	HttpFilterOption string   `pulumi:"httpFilterOption"`
	HttpFilterValues []string `pulumi:"httpFilterValues"`
	Invert           bool     `pulumi:"invert"`
	IpSubnets        []string `pulumi:"ipSubnets"`
}

// GetLbFrontendAclMatchInput is an input type that accepts GetLbFrontendAclMatchArgs and GetLbFrontendAclMatchOutput values.
// You can construct a concrete instance of `GetLbFrontendAclMatchInput` via:
//
//	GetLbFrontendAclMatchArgs{...}
type GetLbFrontendAclMatchInput interface {
	pulumi.Input

	ToGetLbFrontendAclMatchOutput() GetLbFrontendAclMatchOutput
	ToGetLbFrontendAclMatchOutputWithContext(context.Context) GetLbFrontendAclMatchOutput
}

type GetLbFrontendAclMatchArgs struct {
	HttpFilter       pulumi.StringInput      `pulumi:"httpFilter"`
	HttpFilterOption pulumi.StringInput      `pulumi:"httpFilterOption"`
	HttpFilterValues pulumi.StringArrayInput `pulumi:"httpFilterValues"`
	Invert           pulumi.BoolInput        `pulumi:"invert"`
	IpSubnets        pulumi.StringArrayInput `pulumi:"ipSubnets"`
}

func (GetLbFrontendAclMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbFrontendAclMatch)(nil)).Elem()
}

func (i GetLbFrontendAclMatchArgs) ToGetLbFrontendAclMatchOutput() GetLbFrontendAclMatchOutput {
	return i.ToGetLbFrontendAclMatchOutputWithContext(context.Background())
}

func (i GetLbFrontendAclMatchArgs) ToGetLbFrontendAclMatchOutputWithContext(ctx context.Context) GetLbFrontendAclMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbFrontendAclMatchOutput)
}

func (i GetLbFrontendAclMatchArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbFrontendAclMatch] {
	return pulumix.Output[GetLbFrontendAclMatch]{
		OutputState: i.ToGetLbFrontendAclMatchOutputWithContext(ctx).OutputState,
	}
}

// GetLbFrontendAclMatchArrayInput is an input type that accepts GetLbFrontendAclMatchArray and GetLbFrontendAclMatchArrayOutput values.
// You can construct a concrete instance of `GetLbFrontendAclMatchArrayInput` via:
//
//	GetLbFrontendAclMatchArray{ GetLbFrontendAclMatchArgs{...} }
type GetLbFrontendAclMatchArrayInput interface {
	pulumi.Input

	ToGetLbFrontendAclMatchArrayOutput() GetLbFrontendAclMatchArrayOutput
	ToGetLbFrontendAclMatchArrayOutputWithContext(context.Context) GetLbFrontendAclMatchArrayOutput
}

type GetLbFrontendAclMatchArray []GetLbFrontendAclMatchInput

func (GetLbFrontendAclMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbFrontendAclMatch)(nil)).Elem()
}

func (i GetLbFrontendAclMatchArray) ToGetLbFrontendAclMatchArrayOutput() GetLbFrontendAclMatchArrayOutput {
	return i.ToGetLbFrontendAclMatchArrayOutputWithContext(context.Background())
}

func (i GetLbFrontendAclMatchArray) ToGetLbFrontendAclMatchArrayOutputWithContext(ctx context.Context) GetLbFrontendAclMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbFrontendAclMatchArrayOutput)
}

func (i GetLbFrontendAclMatchArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbFrontendAclMatch] {
	return pulumix.Output[[]GetLbFrontendAclMatch]{
		OutputState: i.ToGetLbFrontendAclMatchArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbFrontendAclMatchOutput struct{ *pulumi.OutputState }

func (GetLbFrontendAclMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbFrontendAclMatch)(nil)).Elem()
}

func (o GetLbFrontendAclMatchOutput) ToGetLbFrontendAclMatchOutput() GetLbFrontendAclMatchOutput {
	return o
}

func (o GetLbFrontendAclMatchOutput) ToGetLbFrontendAclMatchOutputWithContext(ctx context.Context) GetLbFrontendAclMatchOutput {
	return o
}

func (o GetLbFrontendAclMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbFrontendAclMatch] {
	return pulumix.Output[GetLbFrontendAclMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetLbFrontendAclMatchOutput) HttpFilter() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendAclMatch) string { return v.HttpFilter }).(pulumi.StringOutput)
}

func (o GetLbFrontendAclMatchOutput) HttpFilterOption() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendAclMatch) string { return v.HttpFilterOption }).(pulumi.StringOutput)
}

func (o GetLbFrontendAclMatchOutput) HttpFilterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLbFrontendAclMatch) []string { return v.HttpFilterValues }).(pulumi.StringArrayOutput)
}

func (o GetLbFrontendAclMatchOutput) Invert() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLbFrontendAclMatch) bool { return v.Invert }).(pulumi.BoolOutput)
}

func (o GetLbFrontendAclMatchOutput) IpSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLbFrontendAclMatch) []string { return v.IpSubnets }).(pulumi.StringArrayOutput)
}

type GetLbFrontendAclMatchArrayOutput struct{ *pulumi.OutputState }

func (GetLbFrontendAclMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbFrontendAclMatch)(nil)).Elem()
}

func (o GetLbFrontendAclMatchArrayOutput) ToGetLbFrontendAclMatchArrayOutput() GetLbFrontendAclMatchArrayOutput {
	return o
}

func (o GetLbFrontendAclMatchArrayOutput) ToGetLbFrontendAclMatchArrayOutputWithContext(ctx context.Context) GetLbFrontendAclMatchArrayOutput {
	return o
}

func (o GetLbFrontendAclMatchArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbFrontendAclMatch] {
	return pulumix.Output[[]GetLbFrontendAclMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetLbFrontendAclMatchArrayOutput) Index(i pulumi.IntInput) GetLbFrontendAclMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbFrontendAclMatch {
		return vs[0].([]GetLbFrontendAclMatch)[vs[1].(int)]
	}).(GetLbFrontendAclMatchOutput)
}

type GetLbFrontendsFrontend struct {
	// The load-balancer backend ID this frontend is attached to.
	// > **Important:** LB backends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	BackendId string `pulumi:"backendId"`
	// List of Certificate IDs that are used by the frontend.
	CertificateIds []string `pulumi:"certificateIds"`
	// The date at which the frontend was created (RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// If HTTP/3 protocol is activated.
	EnableHttp3 bool `pulumi:"enableHttp3"`
	// The associated frontend ID.
	// > **Important:** LB frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	Id string `pulumi:"id"`
	// TCP port the frontend listen to.
	InboundPort int `pulumi:"inboundPort"`
	// The load-balancer ID this frontend is attached to. frontends with a LB ID like it are listed.
	LbId string `pulumi:"lbId"`
	// The frontend name used as filter. Frontends with a name like it are listed.
	Name string `pulumi:"name"`
	// Maximum inactivity time on the client side.
	TimeoutClient string `pulumi:"timeoutClient"`
	// The date at which the frontend was last updated (RFC 3339 format).
	UpdateAt string `pulumi:"updateAt"`
}

// GetLbFrontendsFrontendInput is an input type that accepts GetLbFrontendsFrontendArgs and GetLbFrontendsFrontendOutput values.
// You can construct a concrete instance of `GetLbFrontendsFrontendInput` via:
//
//	GetLbFrontendsFrontendArgs{...}
type GetLbFrontendsFrontendInput interface {
	pulumi.Input

	ToGetLbFrontendsFrontendOutput() GetLbFrontendsFrontendOutput
	ToGetLbFrontendsFrontendOutputWithContext(context.Context) GetLbFrontendsFrontendOutput
}

type GetLbFrontendsFrontendArgs struct {
	// The load-balancer backend ID this frontend is attached to.
	// > **Important:** LB backends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	BackendId pulumi.StringInput `pulumi:"backendId"`
	// List of Certificate IDs that are used by the frontend.
	CertificateIds pulumi.StringArrayInput `pulumi:"certificateIds"`
	// The date at which the frontend was created (RFC 3339 format).
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// If HTTP/3 protocol is activated.
	EnableHttp3 pulumi.BoolInput `pulumi:"enableHttp3"`
	// The associated frontend ID.
	// > **Important:** LB frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	Id pulumi.StringInput `pulumi:"id"`
	// TCP port the frontend listen to.
	InboundPort pulumi.IntInput `pulumi:"inboundPort"`
	// The load-balancer ID this frontend is attached to. frontends with a LB ID like it are listed.
	LbId pulumi.StringInput `pulumi:"lbId"`
	// The frontend name used as filter. Frontends with a name like it are listed.
	Name pulumi.StringInput `pulumi:"name"`
	// Maximum inactivity time on the client side.
	TimeoutClient pulumi.StringInput `pulumi:"timeoutClient"`
	// The date at which the frontend was last updated (RFC 3339 format).
	UpdateAt pulumi.StringInput `pulumi:"updateAt"`
}

func (GetLbFrontendsFrontendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbFrontendsFrontend)(nil)).Elem()
}

func (i GetLbFrontendsFrontendArgs) ToGetLbFrontendsFrontendOutput() GetLbFrontendsFrontendOutput {
	return i.ToGetLbFrontendsFrontendOutputWithContext(context.Background())
}

func (i GetLbFrontendsFrontendArgs) ToGetLbFrontendsFrontendOutputWithContext(ctx context.Context) GetLbFrontendsFrontendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbFrontendsFrontendOutput)
}

func (i GetLbFrontendsFrontendArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbFrontendsFrontend] {
	return pulumix.Output[GetLbFrontendsFrontend]{
		OutputState: i.ToGetLbFrontendsFrontendOutputWithContext(ctx).OutputState,
	}
}

// GetLbFrontendsFrontendArrayInput is an input type that accepts GetLbFrontendsFrontendArray and GetLbFrontendsFrontendArrayOutput values.
// You can construct a concrete instance of `GetLbFrontendsFrontendArrayInput` via:
//
//	GetLbFrontendsFrontendArray{ GetLbFrontendsFrontendArgs{...} }
type GetLbFrontendsFrontendArrayInput interface {
	pulumi.Input

	ToGetLbFrontendsFrontendArrayOutput() GetLbFrontendsFrontendArrayOutput
	ToGetLbFrontendsFrontendArrayOutputWithContext(context.Context) GetLbFrontendsFrontendArrayOutput
}

type GetLbFrontendsFrontendArray []GetLbFrontendsFrontendInput

func (GetLbFrontendsFrontendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbFrontendsFrontend)(nil)).Elem()
}

func (i GetLbFrontendsFrontendArray) ToGetLbFrontendsFrontendArrayOutput() GetLbFrontendsFrontendArrayOutput {
	return i.ToGetLbFrontendsFrontendArrayOutputWithContext(context.Background())
}

func (i GetLbFrontendsFrontendArray) ToGetLbFrontendsFrontendArrayOutputWithContext(ctx context.Context) GetLbFrontendsFrontendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbFrontendsFrontendArrayOutput)
}

func (i GetLbFrontendsFrontendArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbFrontendsFrontend] {
	return pulumix.Output[[]GetLbFrontendsFrontend]{
		OutputState: i.ToGetLbFrontendsFrontendArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbFrontendsFrontendOutput struct{ *pulumi.OutputState }

func (GetLbFrontendsFrontendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbFrontendsFrontend)(nil)).Elem()
}

func (o GetLbFrontendsFrontendOutput) ToGetLbFrontendsFrontendOutput() GetLbFrontendsFrontendOutput {
	return o
}

func (o GetLbFrontendsFrontendOutput) ToGetLbFrontendsFrontendOutputWithContext(ctx context.Context) GetLbFrontendsFrontendOutput {
	return o
}

func (o GetLbFrontendsFrontendOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbFrontendsFrontend] {
	return pulumix.Output[GetLbFrontendsFrontend]{
		OutputState: o.OutputState,
	}
}

// The load-balancer backend ID this frontend is attached to.
// > **Important:** LB backends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
func (o GetLbFrontendsFrontendOutput) BackendId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendsFrontend) string { return v.BackendId }).(pulumi.StringOutput)
}

// List of Certificate IDs that are used by the frontend.
func (o GetLbFrontendsFrontendOutput) CertificateIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLbFrontendsFrontend) []string { return v.CertificateIds }).(pulumi.StringArrayOutput)
}

// The date at which the frontend was created (RFC 3339 format).
func (o GetLbFrontendsFrontendOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendsFrontend) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// If HTTP/3 protocol is activated.
func (o GetLbFrontendsFrontendOutput) EnableHttp3() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLbFrontendsFrontend) bool { return v.EnableHttp3 }).(pulumi.BoolOutput)
}

// The associated frontend ID.
// > **Important:** LB frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
func (o GetLbFrontendsFrontendOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendsFrontend) string { return v.Id }).(pulumi.StringOutput)
}

// TCP port the frontend listen to.
func (o GetLbFrontendsFrontendOutput) InboundPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbFrontendsFrontend) int { return v.InboundPort }).(pulumi.IntOutput)
}

// The load-balancer ID this frontend is attached to. frontends with a LB ID like it are listed.
func (o GetLbFrontendsFrontendOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendsFrontend) string { return v.LbId }).(pulumi.StringOutput)
}

// The frontend name used as filter. Frontends with a name like it are listed.
func (o GetLbFrontendsFrontendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendsFrontend) string { return v.Name }).(pulumi.StringOutput)
}

// Maximum inactivity time on the client side.
func (o GetLbFrontendsFrontendOutput) TimeoutClient() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendsFrontend) string { return v.TimeoutClient }).(pulumi.StringOutput)
}

// The date at which the frontend was last updated (RFC 3339 format).
func (o GetLbFrontendsFrontendOutput) UpdateAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendsFrontend) string { return v.UpdateAt }).(pulumi.StringOutput)
}

type GetLbFrontendsFrontendArrayOutput struct{ *pulumi.OutputState }

func (GetLbFrontendsFrontendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbFrontendsFrontend)(nil)).Elem()
}

func (o GetLbFrontendsFrontendArrayOutput) ToGetLbFrontendsFrontendArrayOutput() GetLbFrontendsFrontendArrayOutput {
	return o
}

func (o GetLbFrontendsFrontendArrayOutput) ToGetLbFrontendsFrontendArrayOutputWithContext(ctx context.Context) GetLbFrontendsFrontendArrayOutput {
	return o
}

func (o GetLbFrontendsFrontendArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbFrontendsFrontend] {
	return pulumix.Output[[]GetLbFrontendsFrontend]{
		OutputState: o.OutputState,
	}
}

func (o GetLbFrontendsFrontendArrayOutput) Index(i pulumi.IntInput) GetLbFrontendsFrontendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbFrontendsFrontend {
		return vs[0].([]GetLbFrontendsFrontend)[vs[1].(int)]
	}).(GetLbFrontendsFrontendOutput)
}

type GetLbIpsIp struct {
	// The associated IP ID.
	Id string `pulumi:"id"`
	// The IP Address
	IpAddress string `pulumi:"ipAddress"`
	// The associated load-balancer ID if any
	LbId string `pulumi:"lbId"`
	// The organization ID the load-balancer is associated with.
	OrganizationId string `pulumi:"organizationId"`
	// The ID of the project the load-balancer is associated with.
	ProjectId string `pulumi:"projectId"`
	// The reverse domain associated with this IP.
	Reverse string `pulumi:"reverse"`
	// `zone`) The zone in which IPs exist.
	Zone string `pulumi:"zone"`
}

// GetLbIpsIpInput is an input type that accepts GetLbIpsIpArgs and GetLbIpsIpOutput values.
// You can construct a concrete instance of `GetLbIpsIpInput` via:
//
//	GetLbIpsIpArgs{...}
type GetLbIpsIpInput interface {
	pulumi.Input

	ToGetLbIpsIpOutput() GetLbIpsIpOutput
	ToGetLbIpsIpOutputWithContext(context.Context) GetLbIpsIpOutput
}

type GetLbIpsIpArgs struct {
	// The associated IP ID.
	Id pulumi.StringInput `pulumi:"id"`
	// The IP Address
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The associated load-balancer ID if any
	LbId pulumi.StringInput `pulumi:"lbId"`
	// The organization ID the load-balancer is associated with.
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
	// The ID of the project the load-balancer is associated with.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The reverse domain associated with this IP.
	Reverse pulumi.StringInput `pulumi:"reverse"`
	// `zone`) The zone in which IPs exist.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetLbIpsIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbIpsIp)(nil)).Elem()
}

func (i GetLbIpsIpArgs) ToGetLbIpsIpOutput() GetLbIpsIpOutput {
	return i.ToGetLbIpsIpOutputWithContext(context.Background())
}

func (i GetLbIpsIpArgs) ToGetLbIpsIpOutputWithContext(ctx context.Context) GetLbIpsIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbIpsIpOutput)
}

func (i GetLbIpsIpArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbIpsIp] {
	return pulumix.Output[GetLbIpsIp]{
		OutputState: i.ToGetLbIpsIpOutputWithContext(ctx).OutputState,
	}
}

// GetLbIpsIpArrayInput is an input type that accepts GetLbIpsIpArray and GetLbIpsIpArrayOutput values.
// You can construct a concrete instance of `GetLbIpsIpArrayInput` via:
//
//	GetLbIpsIpArray{ GetLbIpsIpArgs{...} }
type GetLbIpsIpArrayInput interface {
	pulumi.Input

	ToGetLbIpsIpArrayOutput() GetLbIpsIpArrayOutput
	ToGetLbIpsIpArrayOutputWithContext(context.Context) GetLbIpsIpArrayOutput
}

type GetLbIpsIpArray []GetLbIpsIpInput

func (GetLbIpsIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbIpsIp)(nil)).Elem()
}

func (i GetLbIpsIpArray) ToGetLbIpsIpArrayOutput() GetLbIpsIpArrayOutput {
	return i.ToGetLbIpsIpArrayOutputWithContext(context.Background())
}

func (i GetLbIpsIpArray) ToGetLbIpsIpArrayOutputWithContext(ctx context.Context) GetLbIpsIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbIpsIpArrayOutput)
}

func (i GetLbIpsIpArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbIpsIp] {
	return pulumix.Output[[]GetLbIpsIp]{
		OutputState: i.ToGetLbIpsIpArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbIpsIpOutput struct{ *pulumi.OutputState }

func (GetLbIpsIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbIpsIp)(nil)).Elem()
}

func (o GetLbIpsIpOutput) ToGetLbIpsIpOutput() GetLbIpsIpOutput {
	return o
}

func (o GetLbIpsIpOutput) ToGetLbIpsIpOutputWithContext(ctx context.Context) GetLbIpsIpOutput {
	return o
}

func (o GetLbIpsIpOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbIpsIp] {
	return pulumix.Output[GetLbIpsIp]{
		OutputState: o.OutputState,
	}
}

// The associated IP ID.
func (o GetLbIpsIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbIpsIp) string { return v.Id }).(pulumi.StringOutput)
}

// The IP Address
func (o GetLbIpsIpOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbIpsIp) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The associated load-balancer ID if any
func (o GetLbIpsIpOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbIpsIp) string { return v.LbId }).(pulumi.StringOutput)
}

// The organization ID the load-balancer is associated with.
func (o GetLbIpsIpOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbIpsIp) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// The ID of the project the load-balancer is associated with.
func (o GetLbIpsIpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbIpsIp) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The reverse domain associated with this IP.
func (o GetLbIpsIpOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbIpsIp) string { return v.Reverse }).(pulumi.StringOutput)
}

// `zone`) The zone in which IPs exist.
func (o GetLbIpsIpOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbIpsIp) string { return v.Zone }).(pulumi.StringOutput)
}

type GetLbIpsIpArrayOutput struct{ *pulumi.OutputState }

func (GetLbIpsIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbIpsIp)(nil)).Elem()
}

func (o GetLbIpsIpArrayOutput) ToGetLbIpsIpArrayOutput() GetLbIpsIpArrayOutput {
	return o
}

func (o GetLbIpsIpArrayOutput) ToGetLbIpsIpArrayOutputWithContext(ctx context.Context) GetLbIpsIpArrayOutput {
	return o
}

func (o GetLbIpsIpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbIpsIp] {
	return pulumix.Output[[]GetLbIpsIp]{
		OutputState: o.OutputState,
	}
}

func (o GetLbIpsIpArrayOutput) Index(i pulumi.IntInput) GetLbIpsIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbIpsIp {
		return vs[0].([]GetLbIpsIp)[vs[1].(int)]
	}).(GetLbIpsIpOutput)
}

type GetLbPrivateNetwork struct {
	DhcpConfig       bool     `pulumi:"dhcpConfig"`
	PrivateNetworkId string   `pulumi:"privateNetworkId"`
	StaticConfigs    []string `pulumi:"staticConfigs"`
	Status           string   `pulumi:"status"`
	// (Defaults to provider `zone`) The zone in which the LB exists.
	Zone string `pulumi:"zone"`
}

// GetLbPrivateNetworkInput is an input type that accepts GetLbPrivateNetworkArgs and GetLbPrivateNetworkOutput values.
// You can construct a concrete instance of `GetLbPrivateNetworkInput` via:
//
//	GetLbPrivateNetworkArgs{...}
type GetLbPrivateNetworkInput interface {
	pulumi.Input

	ToGetLbPrivateNetworkOutput() GetLbPrivateNetworkOutput
	ToGetLbPrivateNetworkOutputWithContext(context.Context) GetLbPrivateNetworkOutput
}

type GetLbPrivateNetworkArgs struct {
	DhcpConfig       pulumi.BoolInput        `pulumi:"dhcpConfig"`
	PrivateNetworkId pulumi.StringInput      `pulumi:"privateNetworkId"`
	StaticConfigs    pulumi.StringArrayInput `pulumi:"staticConfigs"`
	Status           pulumi.StringInput      `pulumi:"status"`
	// (Defaults to provider `zone`) The zone in which the LB exists.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetLbPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbPrivateNetwork)(nil)).Elem()
}

func (i GetLbPrivateNetworkArgs) ToGetLbPrivateNetworkOutput() GetLbPrivateNetworkOutput {
	return i.ToGetLbPrivateNetworkOutputWithContext(context.Background())
}

func (i GetLbPrivateNetworkArgs) ToGetLbPrivateNetworkOutputWithContext(ctx context.Context) GetLbPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbPrivateNetworkOutput)
}

func (i GetLbPrivateNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbPrivateNetwork] {
	return pulumix.Output[GetLbPrivateNetwork]{
		OutputState: i.ToGetLbPrivateNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetLbPrivateNetworkArrayInput is an input type that accepts GetLbPrivateNetworkArray and GetLbPrivateNetworkArrayOutput values.
// You can construct a concrete instance of `GetLbPrivateNetworkArrayInput` via:
//
//	GetLbPrivateNetworkArray{ GetLbPrivateNetworkArgs{...} }
type GetLbPrivateNetworkArrayInput interface {
	pulumi.Input

	ToGetLbPrivateNetworkArrayOutput() GetLbPrivateNetworkArrayOutput
	ToGetLbPrivateNetworkArrayOutputWithContext(context.Context) GetLbPrivateNetworkArrayOutput
}

type GetLbPrivateNetworkArray []GetLbPrivateNetworkInput

func (GetLbPrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbPrivateNetwork)(nil)).Elem()
}

func (i GetLbPrivateNetworkArray) ToGetLbPrivateNetworkArrayOutput() GetLbPrivateNetworkArrayOutput {
	return i.ToGetLbPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i GetLbPrivateNetworkArray) ToGetLbPrivateNetworkArrayOutputWithContext(ctx context.Context) GetLbPrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbPrivateNetworkArrayOutput)
}

func (i GetLbPrivateNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbPrivateNetwork] {
	return pulumix.Output[[]GetLbPrivateNetwork]{
		OutputState: i.ToGetLbPrivateNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbPrivateNetworkOutput struct{ *pulumi.OutputState }

func (GetLbPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbPrivateNetwork)(nil)).Elem()
}

func (o GetLbPrivateNetworkOutput) ToGetLbPrivateNetworkOutput() GetLbPrivateNetworkOutput {
	return o
}

func (o GetLbPrivateNetworkOutput) ToGetLbPrivateNetworkOutputWithContext(ctx context.Context) GetLbPrivateNetworkOutput {
	return o
}

func (o GetLbPrivateNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbPrivateNetwork] {
	return pulumix.Output[GetLbPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetLbPrivateNetworkOutput) DhcpConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLbPrivateNetwork) bool { return v.DhcpConfig }).(pulumi.BoolOutput)
}

func (o GetLbPrivateNetworkOutput) PrivateNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbPrivateNetwork) string { return v.PrivateNetworkId }).(pulumi.StringOutput)
}

func (o GetLbPrivateNetworkOutput) StaticConfigs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLbPrivateNetwork) []string { return v.StaticConfigs }).(pulumi.StringArrayOutput)
}

func (o GetLbPrivateNetworkOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbPrivateNetwork) string { return v.Status }).(pulumi.StringOutput)
}

// (Defaults to provider `zone`) The zone in which the LB exists.
func (o GetLbPrivateNetworkOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbPrivateNetwork) string { return v.Zone }).(pulumi.StringOutput)
}

type GetLbPrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetLbPrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbPrivateNetwork)(nil)).Elem()
}

func (o GetLbPrivateNetworkArrayOutput) ToGetLbPrivateNetworkArrayOutput() GetLbPrivateNetworkArrayOutput {
	return o
}

func (o GetLbPrivateNetworkArrayOutput) ToGetLbPrivateNetworkArrayOutputWithContext(ctx context.Context) GetLbPrivateNetworkArrayOutput {
	return o
}

func (o GetLbPrivateNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbPrivateNetwork] {
	return pulumix.Output[[]GetLbPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetLbPrivateNetworkArrayOutput) Index(i pulumi.IntInput) GetLbPrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbPrivateNetwork {
		return vs[0].([]GetLbPrivateNetwork)[vs[1].(int)]
	}).(GetLbPrivateNetworkOutput)
}

type GetLbRoutesRoute struct {
	// The backend ID destination of redirection
	BackendId string `pulumi:"backendId"`
	// The date at which the route was created (RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// The frontend ID origin of redirection used as a filter. routes with a frontend ID like it are listed.
	FrontendId string `pulumi:"frontendId"`
	// The associated route ID.
	Id string `pulumi:"id"`
	// Specifies the host of the server to which the request is being sent.
	MatchHostHeader string `pulumi:"matchHostHeader"`
	// Server Name Indication TLS extension field from an incoming connection made via an SSL/TLS transport layer.
	MatchSni string `pulumi:"matchSni"`
	// The date at which the route was last updated (RFC 3339 format).
	UpdateAt string `pulumi:"updateAt"`
}

// GetLbRoutesRouteInput is an input type that accepts GetLbRoutesRouteArgs and GetLbRoutesRouteOutput values.
// You can construct a concrete instance of `GetLbRoutesRouteInput` via:
//
//	GetLbRoutesRouteArgs{...}
type GetLbRoutesRouteInput interface {
	pulumi.Input

	ToGetLbRoutesRouteOutput() GetLbRoutesRouteOutput
	ToGetLbRoutesRouteOutputWithContext(context.Context) GetLbRoutesRouteOutput
}

type GetLbRoutesRouteArgs struct {
	// The backend ID destination of redirection
	BackendId pulumi.StringInput `pulumi:"backendId"`
	// The date at which the route was created (RFC 3339 format).
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The frontend ID origin of redirection used as a filter. routes with a frontend ID like it are listed.
	FrontendId pulumi.StringInput `pulumi:"frontendId"`
	// The associated route ID.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies the host of the server to which the request is being sent.
	MatchHostHeader pulumi.StringInput `pulumi:"matchHostHeader"`
	// Server Name Indication TLS extension field from an incoming connection made via an SSL/TLS transport layer.
	MatchSni pulumi.StringInput `pulumi:"matchSni"`
	// The date at which the route was last updated (RFC 3339 format).
	UpdateAt pulumi.StringInput `pulumi:"updateAt"`
}

func (GetLbRoutesRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbRoutesRoute)(nil)).Elem()
}

func (i GetLbRoutesRouteArgs) ToGetLbRoutesRouteOutput() GetLbRoutesRouteOutput {
	return i.ToGetLbRoutesRouteOutputWithContext(context.Background())
}

func (i GetLbRoutesRouteArgs) ToGetLbRoutesRouteOutputWithContext(ctx context.Context) GetLbRoutesRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbRoutesRouteOutput)
}

func (i GetLbRoutesRouteArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbRoutesRoute] {
	return pulumix.Output[GetLbRoutesRoute]{
		OutputState: i.ToGetLbRoutesRouteOutputWithContext(ctx).OutputState,
	}
}

// GetLbRoutesRouteArrayInput is an input type that accepts GetLbRoutesRouteArray and GetLbRoutesRouteArrayOutput values.
// You can construct a concrete instance of `GetLbRoutesRouteArrayInput` via:
//
//	GetLbRoutesRouteArray{ GetLbRoutesRouteArgs{...} }
type GetLbRoutesRouteArrayInput interface {
	pulumi.Input

	ToGetLbRoutesRouteArrayOutput() GetLbRoutesRouteArrayOutput
	ToGetLbRoutesRouteArrayOutputWithContext(context.Context) GetLbRoutesRouteArrayOutput
}

type GetLbRoutesRouteArray []GetLbRoutesRouteInput

func (GetLbRoutesRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbRoutesRoute)(nil)).Elem()
}

func (i GetLbRoutesRouteArray) ToGetLbRoutesRouteArrayOutput() GetLbRoutesRouteArrayOutput {
	return i.ToGetLbRoutesRouteArrayOutputWithContext(context.Background())
}

func (i GetLbRoutesRouteArray) ToGetLbRoutesRouteArrayOutputWithContext(ctx context.Context) GetLbRoutesRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbRoutesRouteArrayOutput)
}

func (i GetLbRoutesRouteArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbRoutesRoute] {
	return pulumix.Output[[]GetLbRoutesRoute]{
		OutputState: i.ToGetLbRoutesRouteArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbRoutesRouteOutput struct{ *pulumi.OutputState }

func (GetLbRoutesRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbRoutesRoute)(nil)).Elem()
}

func (o GetLbRoutesRouteOutput) ToGetLbRoutesRouteOutput() GetLbRoutesRouteOutput {
	return o
}

func (o GetLbRoutesRouteOutput) ToGetLbRoutesRouteOutputWithContext(ctx context.Context) GetLbRoutesRouteOutput {
	return o
}

func (o GetLbRoutesRouteOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbRoutesRoute] {
	return pulumix.Output[GetLbRoutesRoute]{
		OutputState: o.OutputState,
	}
}

// The backend ID destination of redirection
func (o GetLbRoutesRouteOutput) BackendId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbRoutesRoute) string { return v.BackendId }).(pulumi.StringOutput)
}

// The date at which the route was created (RFC 3339 format).
func (o GetLbRoutesRouteOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbRoutesRoute) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The frontend ID origin of redirection used as a filter. routes with a frontend ID like it are listed.
func (o GetLbRoutesRouteOutput) FrontendId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbRoutesRoute) string { return v.FrontendId }).(pulumi.StringOutput)
}

// The associated route ID.
func (o GetLbRoutesRouteOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbRoutesRoute) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the host of the server to which the request is being sent.
func (o GetLbRoutesRouteOutput) MatchHostHeader() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbRoutesRoute) string { return v.MatchHostHeader }).(pulumi.StringOutput)
}

// Server Name Indication TLS extension field from an incoming connection made via an SSL/TLS transport layer.
func (o GetLbRoutesRouteOutput) MatchSni() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbRoutesRoute) string { return v.MatchSni }).(pulumi.StringOutput)
}

// The date at which the route was last updated (RFC 3339 format).
func (o GetLbRoutesRouteOutput) UpdateAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbRoutesRoute) string { return v.UpdateAt }).(pulumi.StringOutput)
}

type GetLbRoutesRouteArrayOutput struct{ *pulumi.OutputState }

func (GetLbRoutesRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbRoutesRoute)(nil)).Elem()
}

func (o GetLbRoutesRouteArrayOutput) ToGetLbRoutesRouteArrayOutput() GetLbRoutesRouteArrayOutput {
	return o
}

func (o GetLbRoutesRouteArrayOutput) ToGetLbRoutesRouteArrayOutputWithContext(ctx context.Context) GetLbRoutesRouteArrayOutput {
	return o
}

func (o GetLbRoutesRouteArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbRoutesRoute] {
	return pulumix.Output[[]GetLbRoutesRoute]{
		OutputState: o.OutputState,
	}
}

func (o GetLbRoutesRouteArrayOutput) Index(i pulumi.IntInput) GetLbRoutesRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbRoutesRoute {
		return vs[0].([]GetLbRoutesRoute)[vs[1].(int)]
	}).(GetLbRoutesRouteOutput)
}

type GetLbsLb struct {
	// Number of backends the Load balancer has.
	BackendCount int `pulumi:"backendCount"`
	// Date at which the Load balancer was created.
	CreatedAt string `pulumi:"createdAt"`
	// The description of the load-balancer.
	Description string `pulumi:"description"`
	// Number of frontends the Load balancer has.
	FrontendCount int `pulumi:"frontendCount"`
	// The ID of the load-balancer.
	Id string `pulumi:"id"`
	// List of underlying instances.
	Instances []GetLbsLbInstance `pulumi:"instances"`
	// List of IPs attached to the Load balancer.
	Ips []GetLbsLbIp `pulumi:"ips"`
	// The load balancer name used as a filter. LBs with a name like it are listed.
	Name string `pulumi:"name"`
	// The organization ID the load-balancer is associated with.
	OrganizationId string `pulumi:"organizationId"`
	// Number of private networks attached to the Load balancer.
	PrivateNetworkCount int `pulumi:"privateNetworkCount"`
	// The ID of the project the load-balancer is associated with.
	ProjectId string `pulumi:"projectId"`
	// Number of routes the Load balancer has.
	RouteCount int `pulumi:"routeCount"`
	// Determines the minimal SSL version which needs to be supported on client side.
	SslCompatibilityLevel string `pulumi:"sslCompatibilityLevel"`
	// The state of the LB's instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
	Status string `pulumi:"status"`
	// The subscriber information.
	Subscriber string `pulumi:"subscriber"`
	// The tags associated with the load-balancer.
	Tags []string `pulumi:"tags"`
	// The offer type of the load-balancer.
	Type string `pulumi:"type"`
	// Date at which the Load balancer was updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// `zone`) The zone in which LBs exist.
	Zone string `pulumi:"zone"`
}

// GetLbsLbInput is an input type that accepts GetLbsLbArgs and GetLbsLbOutput values.
// You can construct a concrete instance of `GetLbsLbInput` via:
//
//	GetLbsLbArgs{...}
type GetLbsLbInput interface {
	pulumi.Input

	ToGetLbsLbOutput() GetLbsLbOutput
	ToGetLbsLbOutputWithContext(context.Context) GetLbsLbOutput
}

type GetLbsLbArgs struct {
	// Number of backends the Load balancer has.
	BackendCount pulumi.IntInput `pulumi:"backendCount"`
	// Date at which the Load balancer was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the load-balancer.
	Description pulumi.StringInput `pulumi:"description"`
	// Number of frontends the Load balancer has.
	FrontendCount pulumi.IntInput `pulumi:"frontendCount"`
	// The ID of the load-balancer.
	Id pulumi.StringInput `pulumi:"id"`
	// List of underlying instances.
	Instances GetLbsLbInstanceArrayInput `pulumi:"instances"`
	// List of IPs attached to the Load balancer.
	Ips GetLbsLbIpArrayInput `pulumi:"ips"`
	// The load balancer name used as a filter. LBs with a name like it are listed.
	Name pulumi.StringInput `pulumi:"name"`
	// The organization ID the load-balancer is associated with.
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
	// Number of private networks attached to the Load balancer.
	PrivateNetworkCount pulumi.IntInput `pulumi:"privateNetworkCount"`
	// The ID of the project the load-balancer is associated with.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Number of routes the Load balancer has.
	RouteCount pulumi.IntInput `pulumi:"routeCount"`
	// Determines the minimal SSL version which needs to be supported on client side.
	SslCompatibilityLevel pulumi.StringInput `pulumi:"sslCompatibilityLevel"`
	// The state of the LB's instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
	Status pulumi.StringInput `pulumi:"status"`
	// The subscriber information.
	Subscriber pulumi.StringInput `pulumi:"subscriber"`
	// The tags associated with the load-balancer.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The offer type of the load-balancer.
	Type pulumi.StringInput `pulumi:"type"`
	// Date at which the Load balancer was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// `zone`) The zone in which LBs exist.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetLbsLbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbsLb)(nil)).Elem()
}

func (i GetLbsLbArgs) ToGetLbsLbOutput() GetLbsLbOutput {
	return i.ToGetLbsLbOutputWithContext(context.Background())
}

func (i GetLbsLbArgs) ToGetLbsLbOutputWithContext(ctx context.Context) GetLbsLbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbsLbOutput)
}

func (i GetLbsLbArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbsLb] {
	return pulumix.Output[GetLbsLb]{
		OutputState: i.ToGetLbsLbOutputWithContext(ctx).OutputState,
	}
}

// GetLbsLbArrayInput is an input type that accepts GetLbsLbArray and GetLbsLbArrayOutput values.
// You can construct a concrete instance of `GetLbsLbArrayInput` via:
//
//	GetLbsLbArray{ GetLbsLbArgs{...} }
type GetLbsLbArrayInput interface {
	pulumi.Input

	ToGetLbsLbArrayOutput() GetLbsLbArrayOutput
	ToGetLbsLbArrayOutputWithContext(context.Context) GetLbsLbArrayOutput
}

type GetLbsLbArray []GetLbsLbInput

func (GetLbsLbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbsLb)(nil)).Elem()
}

func (i GetLbsLbArray) ToGetLbsLbArrayOutput() GetLbsLbArrayOutput {
	return i.ToGetLbsLbArrayOutputWithContext(context.Background())
}

func (i GetLbsLbArray) ToGetLbsLbArrayOutputWithContext(ctx context.Context) GetLbsLbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbsLbArrayOutput)
}

func (i GetLbsLbArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbsLb] {
	return pulumix.Output[[]GetLbsLb]{
		OutputState: i.ToGetLbsLbArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbsLbOutput struct{ *pulumi.OutputState }

func (GetLbsLbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbsLb)(nil)).Elem()
}

func (o GetLbsLbOutput) ToGetLbsLbOutput() GetLbsLbOutput {
	return o
}

func (o GetLbsLbOutput) ToGetLbsLbOutputWithContext(ctx context.Context) GetLbsLbOutput {
	return o
}

func (o GetLbsLbOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbsLb] {
	return pulumix.Output[GetLbsLb]{
		OutputState: o.OutputState,
	}
}

// Number of backends the Load balancer has.
func (o GetLbsLbOutput) BackendCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbsLb) int { return v.BackendCount }).(pulumi.IntOutput)
}

// Date at which the Load balancer was created.
func (o GetLbsLbOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLb) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the load-balancer.
func (o GetLbsLbOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLb) string { return v.Description }).(pulumi.StringOutput)
}

// Number of frontends the Load balancer has.
func (o GetLbsLbOutput) FrontendCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbsLb) int { return v.FrontendCount }).(pulumi.IntOutput)
}

// The ID of the load-balancer.
func (o GetLbsLbOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLb) string { return v.Id }).(pulumi.StringOutput)
}

// List of underlying instances.
func (o GetLbsLbOutput) Instances() GetLbsLbInstanceArrayOutput {
	return o.ApplyT(func(v GetLbsLb) []GetLbsLbInstance { return v.Instances }).(GetLbsLbInstanceArrayOutput)
}

// List of IPs attached to the Load balancer.
func (o GetLbsLbOutput) Ips() GetLbsLbIpArrayOutput {
	return o.ApplyT(func(v GetLbsLb) []GetLbsLbIp { return v.Ips }).(GetLbsLbIpArrayOutput)
}

// The load balancer name used as a filter. LBs with a name like it are listed.
func (o GetLbsLbOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLb) string { return v.Name }).(pulumi.StringOutput)
}

// The organization ID the load-balancer is associated with.
func (o GetLbsLbOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLb) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// Number of private networks attached to the Load balancer.
func (o GetLbsLbOutput) PrivateNetworkCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbsLb) int { return v.PrivateNetworkCount }).(pulumi.IntOutput)
}

// The ID of the project the load-balancer is associated with.
func (o GetLbsLbOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLb) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Number of routes the Load balancer has.
func (o GetLbsLbOutput) RouteCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbsLb) int { return v.RouteCount }).(pulumi.IntOutput)
}

// Determines the minimal SSL version which needs to be supported on client side.
func (o GetLbsLbOutput) SslCompatibilityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLb) string { return v.SslCompatibilityLevel }).(pulumi.StringOutput)
}

// The state of the LB's instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
func (o GetLbsLbOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLb) string { return v.Status }).(pulumi.StringOutput)
}

// The subscriber information.
func (o GetLbsLbOutput) Subscriber() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLb) string { return v.Subscriber }).(pulumi.StringOutput)
}

// The tags associated with the load-balancer.
func (o GetLbsLbOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLbsLb) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The offer type of the load-balancer.
func (o GetLbsLbOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLb) string { return v.Type }).(pulumi.StringOutput)
}

// Date at which the Load balancer was updated.
func (o GetLbsLbOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLb) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// `zone`) The zone in which LBs exist.
func (o GetLbsLbOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLb) string { return v.Zone }).(pulumi.StringOutput)
}

type GetLbsLbArrayOutput struct{ *pulumi.OutputState }

func (GetLbsLbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbsLb)(nil)).Elem()
}

func (o GetLbsLbArrayOutput) ToGetLbsLbArrayOutput() GetLbsLbArrayOutput {
	return o
}

func (o GetLbsLbArrayOutput) ToGetLbsLbArrayOutputWithContext(ctx context.Context) GetLbsLbArrayOutput {
	return o
}

func (o GetLbsLbArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbsLb] {
	return pulumix.Output[[]GetLbsLb]{
		OutputState: o.OutputState,
	}
}

func (o GetLbsLbArrayOutput) Index(i pulumi.IntInput) GetLbsLbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbsLb {
		return vs[0].([]GetLbsLb)[vs[1].(int)]
	}).(GetLbsLbOutput)
}

type GetLbsLbInstance struct {
	// Date at which the Load balancer was created.
	CreatedAt string `pulumi:"createdAt"`
	// The ID of the load-balancer.
	Id        string `pulumi:"id"`
	IpAddress string `pulumi:"ipAddress"`
	// The state of the LB's instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
	Status string `pulumi:"status"`
	// Date at which the Load balancer was updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// `zone`) The zone in which LBs exist.
	Zone string `pulumi:"zone"`
}

// GetLbsLbInstanceInput is an input type that accepts GetLbsLbInstanceArgs and GetLbsLbInstanceOutput values.
// You can construct a concrete instance of `GetLbsLbInstanceInput` via:
//
//	GetLbsLbInstanceArgs{...}
type GetLbsLbInstanceInput interface {
	pulumi.Input

	ToGetLbsLbInstanceOutput() GetLbsLbInstanceOutput
	ToGetLbsLbInstanceOutputWithContext(context.Context) GetLbsLbInstanceOutput
}

type GetLbsLbInstanceArgs struct {
	// Date at which the Load balancer was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The ID of the load-balancer.
	Id        pulumi.StringInput `pulumi:"id"`
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The state of the LB's instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
	Status pulumi.StringInput `pulumi:"status"`
	// Date at which the Load balancer was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// `zone`) The zone in which LBs exist.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetLbsLbInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbsLbInstance)(nil)).Elem()
}

func (i GetLbsLbInstanceArgs) ToGetLbsLbInstanceOutput() GetLbsLbInstanceOutput {
	return i.ToGetLbsLbInstanceOutputWithContext(context.Background())
}

func (i GetLbsLbInstanceArgs) ToGetLbsLbInstanceOutputWithContext(ctx context.Context) GetLbsLbInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbsLbInstanceOutput)
}

func (i GetLbsLbInstanceArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbsLbInstance] {
	return pulumix.Output[GetLbsLbInstance]{
		OutputState: i.ToGetLbsLbInstanceOutputWithContext(ctx).OutputState,
	}
}

// GetLbsLbInstanceArrayInput is an input type that accepts GetLbsLbInstanceArray and GetLbsLbInstanceArrayOutput values.
// You can construct a concrete instance of `GetLbsLbInstanceArrayInput` via:
//
//	GetLbsLbInstanceArray{ GetLbsLbInstanceArgs{...} }
type GetLbsLbInstanceArrayInput interface {
	pulumi.Input

	ToGetLbsLbInstanceArrayOutput() GetLbsLbInstanceArrayOutput
	ToGetLbsLbInstanceArrayOutputWithContext(context.Context) GetLbsLbInstanceArrayOutput
}

type GetLbsLbInstanceArray []GetLbsLbInstanceInput

func (GetLbsLbInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbsLbInstance)(nil)).Elem()
}

func (i GetLbsLbInstanceArray) ToGetLbsLbInstanceArrayOutput() GetLbsLbInstanceArrayOutput {
	return i.ToGetLbsLbInstanceArrayOutputWithContext(context.Background())
}

func (i GetLbsLbInstanceArray) ToGetLbsLbInstanceArrayOutputWithContext(ctx context.Context) GetLbsLbInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbsLbInstanceArrayOutput)
}

func (i GetLbsLbInstanceArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbsLbInstance] {
	return pulumix.Output[[]GetLbsLbInstance]{
		OutputState: i.ToGetLbsLbInstanceArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbsLbInstanceOutput struct{ *pulumi.OutputState }

func (GetLbsLbInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbsLbInstance)(nil)).Elem()
}

func (o GetLbsLbInstanceOutput) ToGetLbsLbInstanceOutput() GetLbsLbInstanceOutput {
	return o
}

func (o GetLbsLbInstanceOutput) ToGetLbsLbInstanceOutputWithContext(ctx context.Context) GetLbsLbInstanceOutput {
	return o
}

func (o GetLbsLbInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbsLbInstance] {
	return pulumix.Output[GetLbsLbInstance]{
		OutputState: o.OutputState,
	}
}

// Date at which the Load balancer was created.
func (o GetLbsLbInstanceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLbInstance) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the load-balancer.
func (o GetLbsLbInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLbInstance) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetLbsLbInstanceOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLbInstance) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The state of the LB's instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
func (o GetLbsLbInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLbInstance) string { return v.Status }).(pulumi.StringOutput)
}

// Date at which the Load balancer was updated.
func (o GetLbsLbInstanceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLbInstance) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// `zone`) The zone in which LBs exist.
func (o GetLbsLbInstanceOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLbInstance) string { return v.Zone }).(pulumi.StringOutput)
}

type GetLbsLbInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetLbsLbInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbsLbInstance)(nil)).Elem()
}

func (o GetLbsLbInstanceArrayOutput) ToGetLbsLbInstanceArrayOutput() GetLbsLbInstanceArrayOutput {
	return o
}

func (o GetLbsLbInstanceArrayOutput) ToGetLbsLbInstanceArrayOutputWithContext(ctx context.Context) GetLbsLbInstanceArrayOutput {
	return o
}

func (o GetLbsLbInstanceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbsLbInstance] {
	return pulumix.Output[[]GetLbsLbInstance]{
		OutputState: o.OutputState,
	}
}

func (o GetLbsLbInstanceArrayOutput) Index(i pulumi.IntInput) GetLbsLbInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbsLbInstance {
		return vs[0].([]GetLbsLbInstance)[vs[1].(int)]
	}).(GetLbsLbInstanceOutput)
}

type GetLbsLbIp struct {
	// The ID of the load-balancer.
	Id        string `pulumi:"id"`
	IpAddress string `pulumi:"ipAddress"`
	LbId      string `pulumi:"lbId"`
	// The organization ID the load-balancer is associated with.
	OrganizationId string `pulumi:"organizationId"`
	// The ID of the project the load-balancer is associated with.
	ProjectId string `pulumi:"projectId"`
	Reverse   string `pulumi:"reverse"`
	// `zone`) The zone in which LBs exist.
	Zone string `pulumi:"zone"`
}

// GetLbsLbIpInput is an input type that accepts GetLbsLbIpArgs and GetLbsLbIpOutput values.
// You can construct a concrete instance of `GetLbsLbIpInput` via:
//
//	GetLbsLbIpArgs{...}
type GetLbsLbIpInput interface {
	pulumi.Input

	ToGetLbsLbIpOutput() GetLbsLbIpOutput
	ToGetLbsLbIpOutputWithContext(context.Context) GetLbsLbIpOutput
}

type GetLbsLbIpArgs struct {
	// The ID of the load-balancer.
	Id        pulumi.StringInput `pulumi:"id"`
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	LbId      pulumi.StringInput `pulumi:"lbId"`
	// The organization ID the load-balancer is associated with.
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
	// The ID of the project the load-balancer is associated with.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	Reverse   pulumi.StringInput `pulumi:"reverse"`
	// `zone`) The zone in which LBs exist.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetLbsLbIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbsLbIp)(nil)).Elem()
}

func (i GetLbsLbIpArgs) ToGetLbsLbIpOutput() GetLbsLbIpOutput {
	return i.ToGetLbsLbIpOutputWithContext(context.Background())
}

func (i GetLbsLbIpArgs) ToGetLbsLbIpOutputWithContext(ctx context.Context) GetLbsLbIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbsLbIpOutput)
}

func (i GetLbsLbIpArgs) ToOutput(ctx context.Context) pulumix.Output[GetLbsLbIp] {
	return pulumix.Output[GetLbsLbIp]{
		OutputState: i.ToGetLbsLbIpOutputWithContext(ctx).OutputState,
	}
}

// GetLbsLbIpArrayInput is an input type that accepts GetLbsLbIpArray and GetLbsLbIpArrayOutput values.
// You can construct a concrete instance of `GetLbsLbIpArrayInput` via:
//
//	GetLbsLbIpArray{ GetLbsLbIpArgs{...} }
type GetLbsLbIpArrayInput interface {
	pulumi.Input

	ToGetLbsLbIpArrayOutput() GetLbsLbIpArrayOutput
	ToGetLbsLbIpArrayOutputWithContext(context.Context) GetLbsLbIpArrayOutput
}

type GetLbsLbIpArray []GetLbsLbIpInput

func (GetLbsLbIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbsLbIp)(nil)).Elem()
}

func (i GetLbsLbIpArray) ToGetLbsLbIpArrayOutput() GetLbsLbIpArrayOutput {
	return i.ToGetLbsLbIpArrayOutputWithContext(context.Background())
}

func (i GetLbsLbIpArray) ToGetLbsLbIpArrayOutputWithContext(ctx context.Context) GetLbsLbIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLbsLbIpArrayOutput)
}

func (i GetLbsLbIpArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLbsLbIp] {
	return pulumix.Output[[]GetLbsLbIp]{
		OutputState: i.ToGetLbsLbIpArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLbsLbIpOutput struct{ *pulumi.OutputState }

func (GetLbsLbIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbsLbIp)(nil)).Elem()
}

func (o GetLbsLbIpOutput) ToGetLbsLbIpOutput() GetLbsLbIpOutput {
	return o
}

func (o GetLbsLbIpOutput) ToGetLbsLbIpOutputWithContext(ctx context.Context) GetLbsLbIpOutput {
	return o
}

func (o GetLbsLbIpOutput) ToOutput(ctx context.Context) pulumix.Output[GetLbsLbIp] {
	return pulumix.Output[GetLbsLbIp]{
		OutputState: o.OutputState,
	}
}

// The ID of the load-balancer.
func (o GetLbsLbIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLbIp) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetLbsLbIpOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLbIp) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o GetLbsLbIpOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLbIp) string { return v.LbId }).(pulumi.StringOutput)
}

// The organization ID the load-balancer is associated with.
func (o GetLbsLbIpOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLbIp) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// The ID of the project the load-balancer is associated with.
func (o GetLbsLbIpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLbIp) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o GetLbsLbIpOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLbIp) string { return v.Reverse }).(pulumi.StringOutput)
}

// `zone`) The zone in which LBs exist.
func (o GetLbsLbIpOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbsLbIp) string { return v.Zone }).(pulumi.StringOutput)
}

type GetLbsLbIpArrayOutput struct{ *pulumi.OutputState }

func (GetLbsLbIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLbsLbIp)(nil)).Elem()
}

func (o GetLbsLbIpArrayOutput) ToGetLbsLbIpArrayOutput() GetLbsLbIpArrayOutput {
	return o
}

func (o GetLbsLbIpArrayOutput) ToGetLbsLbIpArrayOutputWithContext(ctx context.Context) GetLbsLbIpArrayOutput {
	return o
}

func (o GetLbsLbIpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLbsLbIp] {
	return pulumix.Output[[]GetLbsLbIp]{
		OutputState: o.OutputState,
	}
}

func (o GetLbsLbIpArrayOutput) Index(i pulumi.IntInput) GetLbsLbIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLbsLbIp {
		return vs[0].([]GetLbsLbIp)[vs[1].(int)]
	}).(GetLbsLbIpOutput)
}

type GetObjectBucketCorsRule struct {
	AllowedHeaders []string `pulumi:"allowedHeaders"`
	AllowedMethods []string `pulumi:"allowedMethods"`
	AllowedOrigins []string `pulumi:"allowedOrigins"`
	ExposeHeaders  []string `pulumi:"exposeHeaders"`
	MaxAgeSeconds  int      `pulumi:"maxAgeSeconds"`
}

// GetObjectBucketCorsRuleInput is an input type that accepts GetObjectBucketCorsRuleArgs and GetObjectBucketCorsRuleOutput values.
// You can construct a concrete instance of `GetObjectBucketCorsRuleInput` via:
//
//	GetObjectBucketCorsRuleArgs{...}
type GetObjectBucketCorsRuleInput interface {
	pulumi.Input

	ToGetObjectBucketCorsRuleOutput() GetObjectBucketCorsRuleOutput
	ToGetObjectBucketCorsRuleOutputWithContext(context.Context) GetObjectBucketCorsRuleOutput
}

type GetObjectBucketCorsRuleArgs struct {
	AllowedHeaders pulumi.StringArrayInput `pulumi:"allowedHeaders"`
	AllowedMethods pulumi.StringArrayInput `pulumi:"allowedMethods"`
	AllowedOrigins pulumi.StringArrayInput `pulumi:"allowedOrigins"`
	ExposeHeaders  pulumi.StringArrayInput `pulumi:"exposeHeaders"`
	MaxAgeSeconds  pulumi.IntInput         `pulumi:"maxAgeSeconds"`
}

func (GetObjectBucketCorsRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObjectBucketCorsRule)(nil)).Elem()
}

func (i GetObjectBucketCorsRuleArgs) ToGetObjectBucketCorsRuleOutput() GetObjectBucketCorsRuleOutput {
	return i.ToGetObjectBucketCorsRuleOutputWithContext(context.Background())
}

func (i GetObjectBucketCorsRuleArgs) ToGetObjectBucketCorsRuleOutputWithContext(ctx context.Context) GetObjectBucketCorsRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObjectBucketCorsRuleOutput)
}

func (i GetObjectBucketCorsRuleArgs) ToOutput(ctx context.Context) pulumix.Output[GetObjectBucketCorsRule] {
	return pulumix.Output[GetObjectBucketCorsRule]{
		OutputState: i.ToGetObjectBucketCorsRuleOutputWithContext(ctx).OutputState,
	}
}

// GetObjectBucketCorsRuleArrayInput is an input type that accepts GetObjectBucketCorsRuleArray and GetObjectBucketCorsRuleArrayOutput values.
// You can construct a concrete instance of `GetObjectBucketCorsRuleArrayInput` via:
//
//	GetObjectBucketCorsRuleArray{ GetObjectBucketCorsRuleArgs{...} }
type GetObjectBucketCorsRuleArrayInput interface {
	pulumi.Input

	ToGetObjectBucketCorsRuleArrayOutput() GetObjectBucketCorsRuleArrayOutput
	ToGetObjectBucketCorsRuleArrayOutputWithContext(context.Context) GetObjectBucketCorsRuleArrayOutput
}

type GetObjectBucketCorsRuleArray []GetObjectBucketCorsRuleInput

func (GetObjectBucketCorsRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObjectBucketCorsRule)(nil)).Elem()
}

func (i GetObjectBucketCorsRuleArray) ToGetObjectBucketCorsRuleArrayOutput() GetObjectBucketCorsRuleArrayOutput {
	return i.ToGetObjectBucketCorsRuleArrayOutputWithContext(context.Background())
}

func (i GetObjectBucketCorsRuleArray) ToGetObjectBucketCorsRuleArrayOutputWithContext(ctx context.Context) GetObjectBucketCorsRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObjectBucketCorsRuleArrayOutput)
}

func (i GetObjectBucketCorsRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]GetObjectBucketCorsRule] {
	return pulumix.Output[[]GetObjectBucketCorsRule]{
		OutputState: i.ToGetObjectBucketCorsRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type GetObjectBucketCorsRuleOutput struct{ *pulumi.OutputState }

func (GetObjectBucketCorsRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObjectBucketCorsRule)(nil)).Elem()
}

func (o GetObjectBucketCorsRuleOutput) ToGetObjectBucketCorsRuleOutput() GetObjectBucketCorsRuleOutput {
	return o
}

func (o GetObjectBucketCorsRuleOutput) ToGetObjectBucketCorsRuleOutputWithContext(ctx context.Context) GetObjectBucketCorsRuleOutput {
	return o
}

func (o GetObjectBucketCorsRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetObjectBucketCorsRule] {
	return pulumix.Output[GetObjectBucketCorsRule]{
		OutputState: o.OutputState,
	}
}

func (o GetObjectBucketCorsRuleOutput) AllowedHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetObjectBucketCorsRule) []string { return v.AllowedHeaders }).(pulumi.StringArrayOutput)
}

func (o GetObjectBucketCorsRuleOutput) AllowedMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetObjectBucketCorsRule) []string { return v.AllowedMethods }).(pulumi.StringArrayOutput)
}

func (o GetObjectBucketCorsRuleOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetObjectBucketCorsRule) []string { return v.AllowedOrigins }).(pulumi.StringArrayOutput)
}

func (o GetObjectBucketCorsRuleOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetObjectBucketCorsRule) []string { return v.ExposeHeaders }).(pulumi.StringArrayOutput)
}

func (o GetObjectBucketCorsRuleOutput) MaxAgeSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetObjectBucketCorsRule) int { return v.MaxAgeSeconds }).(pulumi.IntOutput)
}

type GetObjectBucketCorsRuleArrayOutput struct{ *pulumi.OutputState }

func (GetObjectBucketCorsRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObjectBucketCorsRule)(nil)).Elem()
}

func (o GetObjectBucketCorsRuleArrayOutput) ToGetObjectBucketCorsRuleArrayOutput() GetObjectBucketCorsRuleArrayOutput {
	return o
}

func (o GetObjectBucketCorsRuleArrayOutput) ToGetObjectBucketCorsRuleArrayOutputWithContext(ctx context.Context) GetObjectBucketCorsRuleArrayOutput {
	return o
}

func (o GetObjectBucketCorsRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetObjectBucketCorsRule] {
	return pulumix.Output[[]GetObjectBucketCorsRule]{
		OutputState: o.OutputState,
	}
}

func (o GetObjectBucketCorsRuleArrayOutput) Index(i pulumi.IntInput) GetObjectBucketCorsRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetObjectBucketCorsRule {
		return vs[0].([]GetObjectBucketCorsRule)[vs[1].(int)]
	}).(GetObjectBucketCorsRuleOutput)
}

type GetObjectBucketLifecycleRule struct {
	AbortIncompleteMultipartUploadDays int                                      `pulumi:"abortIncompleteMultipartUploadDays"`
	Enabled                            bool                                     `pulumi:"enabled"`
	Expirations                        []GetObjectBucketLifecycleRuleExpiration `pulumi:"expirations"`
	// The unique name of the bucket.
	Id          string                                   `pulumi:"id"`
	Prefix      string                                   `pulumi:"prefix"`
	Tags        map[string]string                        `pulumi:"tags"`
	Transitions []GetObjectBucketLifecycleRuleTransition `pulumi:"transitions"`
}

// GetObjectBucketLifecycleRuleInput is an input type that accepts GetObjectBucketLifecycleRuleArgs and GetObjectBucketLifecycleRuleOutput values.
// You can construct a concrete instance of `GetObjectBucketLifecycleRuleInput` via:
//
//	GetObjectBucketLifecycleRuleArgs{...}
type GetObjectBucketLifecycleRuleInput interface {
	pulumi.Input

	ToGetObjectBucketLifecycleRuleOutput() GetObjectBucketLifecycleRuleOutput
	ToGetObjectBucketLifecycleRuleOutputWithContext(context.Context) GetObjectBucketLifecycleRuleOutput
}

type GetObjectBucketLifecycleRuleArgs struct {
	AbortIncompleteMultipartUploadDays pulumi.IntInput                                  `pulumi:"abortIncompleteMultipartUploadDays"`
	Enabled                            pulumi.BoolInput                                 `pulumi:"enabled"`
	Expirations                        GetObjectBucketLifecycleRuleExpirationArrayInput `pulumi:"expirations"`
	// The unique name of the bucket.
	Id          pulumi.StringInput                               `pulumi:"id"`
	Prefix      pulumi.StringInput                               `pulumi:"prefix"`
	Tags        pulumi.StringMapInput                            `pulumi:"tags"`
	Transitions GetObjectBucketLifecycleRuleTransitionArrayInput `pulumi:"transitions"`
}

func (GetObjectBucketLifecycleRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObjectBucketLifecycleRule)(nil)).Elem()
}

func (i GetObjectBucketLifecycleRuleArgs) ToGetObjectBucketLifecycleRuleOutput() GetObjectBucketLifecycleRuleOutput {
	return i.ToGetObjectBucketLifecycleRuleOutputWithContext(context.Background())
}

func (i GetObjectBucketLifecycleRuleArgs) ToGetObjectBucketLifecycleRuleOutputWithContext(ctx context.Context) GetObjectBucketLifecycleRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObjectBucketLifecycleRuleOutput)
}

func (i GetObjectBucketLifecycleRuleArgs) ToOutput(ctx context.Context) pulumix.Output[GetObjectBucketLifecycleRule] {
	return pulumix.Output[GetObjectBucketLifecycleRule]{
		OutputState: i.ToGetObjectBucketLifecycleRuleOutputWithContext(ctx).OutputState,
	}
}

// GetObjectBucketLifecycleRuleArrayInput is an input type that accepts GetObjectBucketLifecycleRuleArray and GetObjectBucketLifecycleRuleArrayOutput values.
// You can construct a concrete instance of `GetObjectBucketLifecycleRuleArrayInput` via:
//
//	GetObjectBucketLifecycleRuleArray{ GetObjectBucketLifecycleRuleArgs{...} }
type GetObjectBucketLifecycleRuleArrayInput interface {
	pulumi.Input

	ToGetObjectBucketLifecycleRuleArrayOutput() GetObjectBucketLifecycleRuleArrayOutput
	ToGetObjectBucketLifecycleRuleArrayOutputWithContext(context.Context) GetObjectBucketLifecycleRuleArrayOutput
}

type GetObjectBucketLifecycleRuleArray []GetObjectBucketLifecycleRuleInput

func (GetObjectBucketLifecycleRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObjectBucketLifecycleRule)(nil)).Elem()
}

func (i GetObjectBucketLifecycleRuleArray) ToGetObjectBucketLifecycleRuleArrayOutput() GetObjectBucketLifecycleRuleArrayOutput {
	return i.ToGetObjectBucketLifecycleRuleArrayOutputWithContext(context.Background())
}

func (i GetObjectBucketLifecycleRuleArray) ToGetObjectBucketLifecycleRuleArrayOutputWithContext(ctx context.Context) GetObjectBucketLifecycleRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObjectBucketLifecycleRuleArrayOutput)
}

func (i GetObjectBucketLifecycleRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]GetObjectBucketLifecycleRule] {
	return pulumix.Output[[]GetObjectBucketLifecycleRule]{
		OutputState: i.ToGetObjectBucketLifecycleRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type GetObjectBucketLifecycleRuleOutput struct{ *pulumi.OutputState }

func (GetObjectBucketLifecycleRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObjectBucketLifecycleRule)(nil)).Elem()
}

func (o GetObjectBucketLifecycleRuleOutput) ToGetObjectBucketLifecycleRuleOutput() GetObjectBucketLifecycleRuleOutput {
	return o
}

func (o GetObjectBucketLifecycleRuleOutput) ToGetObjectBucketLifecycleRuleOutputWithContext(ctx context.Context) GetObjectBucketLifecycleRuleOutput {
	return o
}

func (o GetObjectBucketLifecycleRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetObjectBucketLifecycleRule] {
	return pulumix.Output[GetObjectBucketLifecycleRule]{
		OutputState: o.OutputState,
	}
}

func (o GetObjectBucketLifecycleRuleOutput) AbortIncompleteMultipartUploadDays() pulumi.IntOutput {
	return o.ApplyT(func(v GetObjectBucketLifecycleRule) int { return v.AbortIncompleteMultipartUploadDays }).(pulumi.IntOutput)
}

func (o GetObjectBucketLifecycleRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetObjectBucketLifecycleRule) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GetObjectBucketLifecycleRuleOutput) Expirations() GetObjectBucketLifecycleRuleExpirationArrayOutput {
	return o.ApplyT(func(v GetObjectBucketLifecycleRule) []GetObjectBucketLifecycleRuleExpiration { return v.Expirations }).(GetObjectBucketLifecycleRuleExpirationArrayOutput)
}

// The unique name of the bucket.
func (o GetObjectBucketLifecycleRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetObjectBucketLifecycleRule) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetObjectBucketLifecycleRuleOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetObjectBucketLifecycleRule) string { return v.Prefix }).(pulumi.StringOutput)
}

func (o GetObjectBucketLifecycleRuleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetObjectBucketLifecycleRule) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o GetObjectBucketLifecycleRuleOutput) Transitions() GetObjectBucketLifecycleRuleTransitionArrayOutput {
	return o.ApplyT(func(v GetObjectBucketLifecycleRule) []GetObjectBucketLifecycleRuleTransition { return v.Transitions }).(GetObjectBucketLifecycleRuleTransitionArrayOutput)
}

type GetObjectBucketLifecycleRuleArrayOutput struct{ *pulumi.OutputState }

func (GetObjectBucketLifecycleRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObjectBucketLifecycleRule)(nil)).Elem()
}

func (o GetObjectBucketLifecycleRuleArrayOutput) ToGetObjectBucketLifecycleRuleArrayOutput() GetObjectBucketLifecycleRuleArrayOutput {
	return o
}

func (o GetObjectBucketLifecycleRuleArrayOutput) ToGetObjectBucketLifecycleRuleArrayOutputWithContext(ctx context.Context) GetObjectBucketLifecycleRuleArrayOutput {
	return o
}

func (o GetObjectBucketLifecycleRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetObjectBucketLifecycleRule] {
	return pulumix.Output[[]GetObjectBucketLifecycleRule]{
		OutputState: o.OutputState,
	}
}

func (o GetObjectBucketLifecycleRuleArrayOutput) Index(i pulumi.IntInput) GetObjectBucketLifecycleRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetObjectBucketLifecycleRule {
		return vs[0].([]GetObjectBucketLifecycleRule)[vs[1].(int)]
	}).(GetObjectBucketLifecycleRuleOutput)
}

type GetObjectBucketLifecycleRuleExpiration struct {
	Days int `pulumi:"days"`
}

// GetObjectBucketLifecycleRuleExpirationInput is an input type that accepts GetObjectBucketLifecycleRuleExpirationArgs and GetObjectBucketLifecycleRuleExpirationOutput values.
// You can construct a concrete instance of `GetObjectBucketLifecycleRuleExpirationInput` via:
//
//	GetObjectBucketLifecycleRuleExpirationArgs{...}
type GetObjectBucketLifecycleRuleExpirationInput interface {
	pulumi.Input

	ToGetObjectBucketLifecycleRuleExpirationOutput() GetObjectBucketLifecycleRuleExpirationOutput
	ToGetObjectBucketLifecycleRuleExpirationOutputWithContext(context.Context) GetObjectBucketLifecycleRuleExpirationOutput
}

type GetObjectBucketLifecycleRuleExpirationArgs struct {
	Days pulumi.IntInput `pulumi:"days"`
}

func (GetObjectBucketLifecycleRuleExpirationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObjectBucketLifecycleRuleExpiration)(nil)).Elem()
}

func (i GetObjectBucketLifecycleRuleExpirationArgs) ToGetObjectBucketLifecycleRuleExpirationOutput() GetObjectBucketLifecycleRuleExpirationOutput {
	return i.ToGetObjectBucketLifecycleRuleExpirationOutputWithContext(context.Background())
}

func (i GetObjectBucketLifecycleRuleExpirationArgs) ToGetObjectBucketLifecycleRuleExpirationOutputWithContext(ctx context.Context) GetObjectBucketLifecycleRuleExpirationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObjectBucketLifecycleRuleExpirationOutput)
}

func (i GetObjectBucketLifecycleRuleExpirationArgs) ToOutput(ctx context.Context) pulumix.Output[GetObjectBucketLifecycleRuleExpiration] {
	return pulumix.Output[GetObjectBucketLifecycleRuleExpiration]{
		OutputState: i.ToGetObjectBucketLifecycleRuleExpirationOutputWithContext(ctx).OutputState,
	}
}

// GetObjectBucketLifecycleRuleExpirationArrayInput is an input type that accepts GetObjectBucketLifecycleRuleExpirationArray and GetObjectBucketLifecycleRuleExpirationArrayOutput values.
// You can construct a concrete instance of `GetObjectBucketLifecycleRuleExpirationArrayInput` via:
//
//	GetObjectBucketLifecycleRuleExpirationArray{ GetObjectBucketLifecycleRuleExpirationArgs{...} }
type GetObjectBucketLifecycleRuleExpirationArrayInput interface {
	pulumi.Input

	ToGetObjectBucketLifecycleRuleExpirationArrayOutput() GetObjectBucketLifecycleRuleExpirationArrayOutput
	ToGetObjectBucketLifecycleRuleExpirationArrayOutputWithContext(context.Context) GetObjectBucketLifecycleRuleExpirationArrayOutput
}

type GetObjectBucketLifecycleRuleExpirationArray []GetObjectBucketLifecycleRuleExpirationInput

func (GetObjectBucketLifecycleRuleExpirationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObjectBucketLifecycleRuleExpiration)(nil)).Elem()
}

func (i GetObjectBucketLifecycleRuleExpirationArray) ToGetObjectBucketLifecycleRuleExpirationArrayOutput() GetObjectBucketLifecycleRuleExpirationArrayOutput {
	return i.ToGetObjectBucketLifecycleRuleExpirationArrayOutputWithContext(context.Background())
}

func (i GetObjectBucketLifecycleRuleExpirationArray) ToGetObjectBucketLifecycleRuleExpirationArrayOutputWithContext(ctx context.Context) GetObjectBucketLifecycleRuleExpirationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObjectBucketLifecycleRuleExpirationArrayOutput)
}

func (i GetObjectBucketLifecycleRuleExpirationArray) ToOutput(ctx context.Context) pulumix.Output[[]GetObjectBucketLifecycleRuleExpiration] {
	return pulumix.Output[[]GetObjectBucketLifecycleRuleExpiration]{
		OutputState: i.ToGetObjectBucketLifecycleRuleExpirationArrayOutputWithContext(ctx).OutputState,
	}
}

type GetObjectBucketLifecycleRuleExpirationOutput struct{ *pulumi.OutputState }

func (GetObjectBucketLifecycleRuleExpirationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObjectBucketLifecycleRuleExpiration)(nil)).Elem()
}

func (o GetObjectBucketLifecycleRuleExpirationOutput) ToGetObjectBucketLifecycleRuleExpirationOutput() GetObjectBucketLifecycleRuleExpirationOutput {
	return o
}

func (o GetObjectBucketLifecycleRuleExpirationOutput) ToGetObjectBucketLifecycleRuleExpirationOutputWithContext(ctx context.Context) GetObjectBucketLifecycleRuleExpirationOutput {
	return o
}

func (o GetObjectBucketLifecycleRuleExpirationOutput) ToOutput(ctx context.Context) pulumix.Output[GetObjectBucketLifecycleRuleExpiration] {
	return pulumix.Output[GetObjectBucketLifecycleRuleExpiration]{
		OutputState: o.OutputState,
	}
}

func (o GetObjectBucketLifecycleRuleExpirationOutput) Days() pulumi.IntOutput {
	return o.ApplyT(func(v GetObjectBucketLifecycleRuleExpiration) int { return v.Days }).(pulumi.IntOutput)
}

type GetObjectBucketLifecycleRuleExpirationArrayOutput struct{ *pulumi.OutputState }

func (GetObjectBucketLifecycleRuleExpirationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObjectBucketLifecycleRuleExpiration)(nil)).Elem()
}

func (o GetObjectBucketLifecycleRuleExpirationArrayOutput) ToGetObjectBucketLifecycleRuleExpirationArrayOutput() GetObjectBucketLifecycleRuleExpirationArrayOutput {
	return o
}

func (o GetObjectBucketLifecycleRuleExpirationArrayOutput) ToGetObjectBucketLifecycleRuleExpirationArrayOutputWithContext(ctx context.Context) GetObjectBucketLifecycleRuleExpirationArrayOutput {
	return o
}

func (o GetObjectBucketLifecycleRuleExpirationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetObjectBucketLifecycleRuleExpiration] {
	return pulumix.Output[[]GetObjectBucketLifecycleRuleExpiration]{
		OutputState: o.OutputState,
	}
}

func (o GetObjectBucketLifecycleRuleExpirationArrayOutput) Index(i pulumi.IntInput) GetObjectBucketLifecycleRuleExpirationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetObjectBucketLifecycleRuleExpiration {
		return vs[0].([]GetObjectBucketLifecycleRuleExpiration)[vs[1].(int)]
	}).(GetObjectBucketLifecycleRuleExpirationOutput)
}

type GetObjectBucketLifecycleRuleTransition struct {
	Days         int    `pulumi:"days"`
	StorageClass string `pulumi:"storageClass"`
}

// GetObjectBucketLifecycleRuleTransitionInput is an input type that accepts GetObjectBucketLifecycleRuleTransitionArgs and GetObjectBucketLifecycleRuleTransitionOutput values.
// You can construct a concrete instance of `GetObjectBucketLifecycleRuleTransitionInput` via:
//
//	GetObjectBucketLifecycleRuleTransitionArgs{...}
type GetObjectBucketLifecycleRuleTransitionInput interface {
	pulumi.Input

	ToGetObjectBucketLifecycleRuleTransitionOutput() GetObjectBucketLifecycleRuleTransitionOutput
	ToGetObjectBucketLifecycleRuleTransitionOutputWithContext(context.Context) GetObjectBucketLifecycleRuleTransitionOutput
}

type GetObjectBucketLifecycleRuleTransitionArgs struct {
	Days         pulumi.IntInput    `pulumi:"days"`
	StorageClass pulumi.StringInput `pulumi:"storageClass"`
}

func (GetObjectBucketLifecycleRuleTransitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObjectBucketLifecycleRuleTransition)(nil)).Elem()
}

func (i GetObjectBucketLifecycleRuleTransitionArgs) ToGetObjectBucketLifecycleRuleTransitionOutput() GetObjectBucketLifecycleRuleTransitionOutput {
	return i.ToGetObjectBucketLifecycleRuleTransitionOutputWithContext(context.Background())
}

func (i GetObjectBucketLifecycleRuleTransitionArgs) ToGetObjectBucketLifecycleRuleTransitionOutputWithContext(ctx context.Context) GetObjectBucketLifecycleRuleTransitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObjectBucketLifecycleRuleTransitionOutput)
}

func (i GetObjectBucketLifecycleRuleTransitionArgs) ToOutput(ctx context.Context) pulumix.Output[GetObjectBucketLifecycleRuleTransition] {
	return pulumix.Output[GetObjectBucketLifecycleRuleTransition]{
		OutputState: i.ToGetObjectBucketLifecycleRuleTransitionOutputWithContext(ctx).OutputState,
	}
}

// GetObjectBucketLifecycleRuleTransitionArrayInput is an input type that accepts GetObjectBucketLifecycleRuleTransitionArray and GetObjectBucketLifecycleRuleTransitionArrayOutput values.
// You can construct a concrete instance of `GetObjectBucketLifecycleRuleTransitionArrayInput` via:
//
//	GetObjectBucketLifecycleRuleTransitionArray{ GetObjectBucketLifecycleRuleTransitionArgs{...} }
type GetObjectBucketLifecycleRuleTransitionArrayInput interface {
	pulumi.Input

	ToGetObjectBucketLifecycleRuleTransitionArrayOutput() GetObjectBucketLifecycleRuleTransitionArrayOutput
	ToGetObjectBucketLifecycleRuleTransitionArrayOutputWithContext(context.Context) GetObjectBucketLifecycleRuleTransitionArrayOutput
}

type GetObjectBucketLifecycleRuleTransitionArray []GetObjectBucketLifecycleRuleTransitionInput

func (GetObjectBucketLifecycleRuleTransitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObjectBucketLifecycleRuleTransition)(nil)).Elem()
}

func (i GetObjectBucketLifecycleRuleTransitionArray) ToGetObjectBucketLifecycleRuleTransitionArrayOutput() GetObjectBucketLifecycleRuleTransitionArrayOutput {
	return i.ToGetObjectBucketLifecycleRuleTransitionArrayOutputWithContext(context.Background())
}

func (i GetObjectBucketLifecycleRuleTransitionArray) ToGetObjectBucketLifecycleRuleTransitionArrayOutputWithContext(ctx context.Context) GetObjectBucketLifecycleRuleTransitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObjectBucketLifecycleRuleTransitionArrayOutput)
}

func (i GetObjectBucketLifecycleRuleTransitionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetObjectBucketLifecycleRuleTransition] {
	return pulumix.Output[[]GetObjectBucketLifecycleRuleTransition]{
		OutputState: i.ToGetObjectBucketLifecycleRuleTransitionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetObjectBucketLifecycleRuleTransitionOutput struct{ *pulumi.OutputState }

func (GetObjectBucketLifecycleRuleTransitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObjectBucketLifecycleRuleTransition)(nil)).Elem()
}

func (o GetObjectBucketLifecycleRuleTransitionOutput) ToGetObjectBucketLifecycleRuleTransitionOutput() GetObjectBucketLifecycleRuleTransitionOutput {
	return o
}

func (o GetObjectBucketLifecycleRuleTransitionOutput) ToGetObjectBucketLifecycleRuleTransitionOutputWithContext(ctx context.Context) GetObjectBucketLifecycleRuleTransitionOutput {
	return o
}

func (o GetObjectBucketLifecycleRuleTransitionOutput) ToOutput(ctx context.Context) pulumix.Output[GetObjectBucketLifecycleRuleTransition] {
	return pulumix.Output[GetObjectBucketLifecycleRuleTransition]{
		OutputState: o.OutputState,
	}
}

func (o GetObjectBucketLifecycleRuleTransitionOutput) Days() pulumi.IntOutput {
	return o.ApplyT(func(v GetObjectBucketLifecycleRuleTransition) int { return v.Days }).(pulumi.IntOutput)
}

func (o GetObjectBucketLifecycleRuleTransitionOutput) StorageClass() pulumi.StringOutput {
	return o.ApplyT(func(v GetObjectBucketLifecycleRuleTransition) string { return v.StorageClass }).(pulumi.StringOutput)
}

type GetObjectBucketLifecycleRuleTransitionArrayOutput struct{ *pulumi.OutputState }

func (GetObjectBucketLifecycleRuleTransitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObjectBucketLifecycleRuleTransition)(nil)).Elem()
}

func (o GetObjectBucketLifecycleRuleTransitionArrayOutput) ToGetObjectBucketLifecycleRuleTransitionArrayOutput() GetObjectBucketLifecycleRuleTransitionArrayOutput {
	return o
}

func (o GetObjectBucketLifecycleRuleTransitionArrayOutput) ToGetObjectBucketLifecycleRuleTransitionArrayOutputWithContext(ctx context.Context) GetObjectBucketLifecycleRuleTransitionArrayOutput {
	return o
}

func (o GetObjectBucketLifecycleRuleTransitionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetObjectBucketLifecycleRuleTransition] {
	return pulumix.Output[[]GetObjectBucketLifecycleRuleTransition]{
		OutputState: o.OutputState,
	}
}

func (o GetObjectBucketLifecycleRuleTransitionArrayOutput) Index(i pulumi.IntInput) GetObjectBucketLifecycleRuleTransitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetObjectBucketLifecycleRuleTransition {
		return vs[0].([]GetObjectBucketLifecycleRuleTransition)[vs[1].(int)]
	}).(GetObjectBucketLifecycleRuleTransitionOutput)
}

type GetObjectBucketVersioning struct {
	Enabled bool `pulumi:"enabled"`
}

// GetObjectBucketVersioningInput is an input type that accepts GetObjectBucketVersioningArgs and GetObjectBucketVersioningOutput values.
// You can construct a concrete instance of `GetObjectBucketVersioningInput` via:
//
//	GetObjectBucketVersioningArgs{...}
type GetObjectBucketVersioningInput interface {
	pulumi.Input

	ToGetObjectBucketVersioningOutput() GetObjectBucketVersioningOutput
	ToGetObjectBucketVersioningOutputWithContext(context.Context) GetObjectBucketVersioningOutput
}

type GetObjectBucketVersioningArgs struct {
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (GetObjectBucketVersioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObjectBucketVersioning)(nil)).Elem()
}

func (i GetObjectBucketVersioningArgs) ToGetObjectBucketVersioningOutput() GetObjectBucketVersioningOutput {
	return i.ToGetObjectBucketVersioningOutputWithContext(context.Background())
}

func (i GetObjectBucketVersioningArgs) ToGetObjectBucketVersioningOutputWithContext(ctx context.Context) GetObjectBucketVersioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObjectBucketVersioningOutput)
}

func (i GetObjectBucketVersioningArgs) ToOutput(ctx context.Context) pulumix.Output[GetObjectBucketVersioning] {
	return pulumix.Output[GetObjectBucketVersioning]{
		OutputState: i.ToGetObjectBucketVersioningOutputWithContext(ctx).OutputState,
	}
}

// GetObjectBucketVersioningArrayInput is an input type that accepts GetObjectBucketVersioningArray and GetObjectBucketVersioningArrayOutput values.
// You can construct a concrete instance of `GetObjectBucketVersioningArrayInput` via:
//
//	GetObjectBucketVersioningArray{ GetObjectBucketVersioningArgs{...} }
type GetObjectBucketVersioningArrayInput interface {
	pulumi.Input

	ToGetObjectBucketVersioningArrayOutput() GetObjectBucketVersioningArrayOutput
	ToGetObjectBucketVersioningArrayOutputWithContext(context.Context) GetObjectBucketVersioningArrayOutput
}

type GetObjectBucketVersioningArray []GetObjectBucketVersioningInput

func (GetObjectBucketVersioningArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObjectBucketVersioning)(nil)).Elem()
}

func (i GetObjectBucketVersioningArray) ToGetObjectBucketVersioningArrayOutput() GetObjectBucketVersioningArrayOutput {
	return i.ToGetObjectBucketVersioningArrayOutputWithContext(context.Background())
}

func (i GetObjectBucketVersioningArray) ToGetObjectBucketVersioningArrayOutputWithContext(ctx context.Context) GetObjectBucketVersioningArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObjectBucketVersioningArrayOutput)
}

func (i GetObjectBucketVersioningArray) ToOutput(ctx context.Context) pulumix.Output[[]GetObjectBucketVersioning] {
	return pulumix.Output[[]GetObjectBucketVersioning]{
		OutputState: i.ToGetObjectBucketVersioningArrayOutputWithContext(ctx).OutputState,
	}
}

type GetObjectBucketVersioningOutput struct{ *pulumi.OutputState }

func (GetObjectBucketVersioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObjectBucketVersioning)(nil)).Elem()
}

func (o GetObjectBucketVersioningOutput) ToGetObjectBucketVersioningOutput() GetObjectBucketVersioningOutput {
	return o
}

func (o GetObjectBucketVersioningOutput) ToGetObjectBucketVersioningOutputWithContext(ctx context.Context) GetObjectBucketVersioningOutput {
	return o
}

func (o GetObjectBucketVersioningOutput) ToOutput(ctx context.Context) pulumix.Output[GetObjectBucketVersioning] {
	return pulumix.Output[GetObjectBucketVersioning]{
		OutputState: o.OutputState,
	}
}

func (o GetObjectBucketVersioningOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetObjectBucketVersioning) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type GetObjectBucketVersioningArrayOutput struct{ *pulumi.OutputState }

func (GetObjectBucketVersioningArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObjectBucketVersioning)(nil)).Elem()
}

func (o GetObjectBucketVersioningArrayOutput) ToGetObjectBucketVersioningArrayOutput() GetObjectBucketVersioningArrayOutput {
	return o
}

func (o GetObjectBucketVersioningArrayOutput) ToGetObjectBucketVersioningArrayOutputWithContext(ctx context.Context) GetObjectBucketVersioningArrayOutput {
	return o
}

func (o GetObjectBucketVersioningArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetObjectBucketVersioning] {
	return pulumix.Output[[]GetObjectBucketVersioning]{
		OutputState: o.OutputState,
	}
}

func (o GetObjectBucketVersioningArrayOutput) Index(i pulumi.IntInput) GetObjectBucketVersioningOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetObjectBucketVersioning {
		return vs[0].([]GetObjectBucketVersioning)[vs[1].(int)]
	}).(GetObjectBucketVersioningOutput)
}

type GetRdbAclAclRule struct {
	// A simple text describing this rule
	Description string `pulumi:"description"`
	// The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
	Ip string `pulumi:"ip"`
}

// GetRdbAclAclRuleInput is an input type that accepts GetRdbAclAclRuleArgs and GetRdbAclAclRuleOutput values.
// You can construct a concrete instance of `GetRdbAclAclRuleInput` via:
//
//	GetRdbAclAclRuleArgs{...}
type GetRdbAclAclRuleInput interface {
	pulumi.Input

	ToGetRdbAclAclRuleOutput() GetRdbAclAclRuleOutput
	ToGetRdbAclAclRuleOutputWithContext(context.Context) GetRdbAclAclRuleOutput
}

type GetRdbAclAclRuleArgs struct {
	// A simple text describing this rule
	Description pulumi.StringInput `pulumi:"description"`
	// The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (GetRdbAclAclRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdbAclAclRule)(nil)).Elem()
}

func (i GetRdbAclAclRuleArgs) ToGetRdbAclAclRuleOutput() GetRdbAclAclRuleOutput {
	return i.ToGetRdbAclAclRuleOutputWithContext(context.Background())
}

func (i GetRdbAclAclRuleArgs) ToGetRdbAclAclRuleOutputWithContext(ctx context.Context) GetRdbAclAclRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdbAclAclRuleOutput)
}

func (i GetRdbAclAclRuleArgs) ToOutput(ctx context.Context) pulumix.Output[GetRdbAclAclRule] {
	return pulumix.Output[GetRdbAclAclRule]{
		OutputState: i.ToGetRdbAclAclRuleOutputWithContext(ctx).OutputState,
	}
}

// GetRdbAclAclRuleArrayInput is an input type that accepts GetRdbAclAclRuleArray and GetRdbAclAclRuleArrayOutput values.
// You can construct a concrete instance of `GetRdbAclAclRuleArrayInput` via:
//
//	GetRdbAclAclRuleArray{ GetRdbAclAclRuleArgs{...} }
type GetRdbAclAclRuleArrayInput interface {
	pulumi.Input

	ToGetRdbAclAclRuleArrayOutput() GetRdbAclAclRuleArrayOutput
	ToGetRdbAclAclRuleArrayOutputWithContext(context.Context) GetRdbAclAclRuleArrayOutput
}

type GetRdbAclAclRuleArray []GetRdbAclAclRuleInput

func (GetRdbAclAclRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRdbAclAclRule)(nil)).Elem()
}

func (i GetRdbAclAclRuleArray) ToGetRdbAclAclRuleArrayOutput() GetRdbAclAclRuleArrayOutput {
	return i.ToGetRdbAclAclRuleArrayOutputWithContext(context.Background())
}

func (i GetRdbAclAclRuleArray) ToGetRdbAclAclRuleArrayOutputWithContext(ctx context.Context) GetRdbAclAclRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdbAclAclRuleArrayOutput)
}

func (i GetRdbAclAclRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRdbAclAclRule] {
	return pulumix.Output[[]GetRdbAclAclRule]{
		OutputState: i.ToGetRdbAclAclRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRdbAclAclRuleOutput struct{ *pulumi.OutputState }

func (GetRdbAclAclRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdbAclAclRule)(nil)).Elem()
}

func (o GetRdbAclAclRuleOutput) ToGetRdbAclAclRuleOutput() GetRdbAclAclRuleOutput {
	return o
}

func (o GetRdbAclAclRuleOutput) ToGetRdbAclAclRuleOutputWithContext(ctx context.Context) GetRdbAclAclRuleOutput {
	return o
}

func (o GetRdbAclAclRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetRdbAclAclRule] {
	return pulumix.Output[GetRdbAclAclRule]{
		OutputState: o.OutputState,
	}
}

// A simple text describing this rule
func (o GetRdbAclAclRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdbAclAclRule) string { return v.Description }).(pulumi.StringOutput)
}

// The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
func (o GetRdbAclAclRuleOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdbAclAclRule) string { return v.Ip }).(pulumi.StringOutput)
}

type GetRdbAclAclRuleArrayOutput struct{ *pulumi.OutputState }

func (GetRdbAclAclRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRdbAclAclRule)(nil)).Elem()
}

func (o GetRdbAclAclRuleArrayOutput) ToGetRdbAclAclRuleArrayOutput() GetRdbAclAclRuleArrayOutput {
	return o
}

func (o GetRdbAclAclRuleArrayOutput) ToGetRdbAclAclRuleArrayOutputWithContext(ctx context.Context) GetRdbAclAclRuleArrayOutput {
	return o
}

func (o GetRdbAclAclRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRdbAclAclRule] {
	return pulumix.Output[[]GetRdbAclAclRule]{
		OutputState: o.OutputState,
	}
}

func (o GetRdbAclAclRuleArrayOutput) Index(i pulumi.IntInput) GetRdbAclAclRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRdbAclAclRule {
		return vs[0].([]GetRdbAclAclRule)[vs[1].(int)]
	}).(GetRdbAclAclRuleOutput)
}

type GetRdbInstanceLoadBalancer struct {
	EndpointId string `pulumi:"endpointId"`
	Hostname   string `pulumi:"hostname"`
	Ip         string `pulumi:"ip"`
	// The name of the RDB instance.
	// Only one of `name` and `instanceId` should be specified.
	Name string `pulumi:"name"`
	Port int    `pulumi:"port"`
}

// GetRdbInstanceLoadBalancerInput is an input type that accepts GetRdbInstanceLoadBalancerArgs and GetRdbInstanceLoadBalancerOutput values.
// You can construct a concrete instance of `GetRdbInstanceLoadBalancerInput` via:
//
//	GetRdbInstanceLoadBalancerArgs{...}
type GetRdbInstanceLoadBalancerInput interface {
	pulumi.Input

	ToGetRdbInstanceLoadBalancerOutput() GetRdbInstanceLoadBalancerOutput
	ToGetRdbInstanceLoadBalancerOutputWithContext(context.Context) GetRdbInstanceLoadBalancerOutput
}

type GetRdbInstanceLoadBalancerArgs struct {
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	Hostname   pulumi.StringInput `pulumi:"hostname"`
	Ip         pulumi.StringInput `pulumi:"ip"`
	// The name of the RDB instance.
	// Only one of `name` and `instanceId` should be specified.
	Name pulumi.StringInput `pulumi:"name"`
	Port pulumi.IntInput    `pulumi:"port"`
}

func (GetRdbInstanceLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdbInstanceLoadBalancer)(nil)).Elem()
}

func (i GetRdbInstanceLoadBalancerArgs) ToGetRdbInstanceLoadBalancerOutput() GetRdbInstanceLoadBalancerOutput {
	return i.ToGetRdbInstanceLoadBalancerOutputWithContext(context.Background())
}

func (i GetRdbInstanceLoadBalancerArgs) ToGetRdbInstanceLoadBalancerOutputWithContext(ctx context.Context) GetRdbInstanceLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdbInstanceLoadBalancerOutput)
}

func (i GetRdbInstanceLoadBalancerArgs) ToOutput(ctx context.Context) pulumix.Output[GetRdbInstanceLoadBalancer] {
	return pulumix.Output[GetRdbInstanceLoadBalancer]{
		OutputState: i.ToGetRdbInstanceLoadBalancerOutputWithContext(ctx).OutputState,
	}
}

// GetRdbInstanceLoadBalancerArrayInput is an input type that accepts GetRdbInstanceLoadBalancerArray and GetRdbInstanceLoadBalancerArrayOutput values.
// You can construct a concrete instance of `GetRdbInstanceLoadBalancerArrayInput` via:
//
//	GetRdbInstanceLoadBalancerArray{ GetRdbInstanceLoadBalancerArgs{...} }
type GetRdbInstanceLoadBalancerArrayInput interface {
	pulumi.Input

	ToGetRdbInstanceLoadBalancerArrayOutput() GetRdbInstanceLoadBalancerArrayOutput
	ToGetRdbInstanceLoadBalancerArrayOutputWithContext(context.Context) GetRdbInstanceLoadBalancerArrayOutput
}

type GetRdbInstanceLoadBalancerArray []GetRdbInstanceLoadBalancerInput

func (GetRdbInstanceLoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRdbInstanceLoadBalancer)(nil)).Elem()
}

func (i GetRdbInstanceLoadBalancerArray) ToGetRdbInstanceLoadBalancerArrayOutput() GetRdbInstanceLoadBalancerArrayOutput {
	return i.ToGetRdbInstanceLoadBalancerArrayOutputWithContext(context.Background())
}

func (i GetRdbInstanceLoadBalancerArray) ToGetRdbInstanceLoadBalancerArrayOutputWithContext(ctx context.Context) GetRdbInstanceLoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdbInstanceLoadBalancerArrayOutput)
}

func (i GetRdbInstanceLoadBalancerArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRdbInstanceLoadBalancer] {
	return pulumix.Output[[]GetRdbInstanceLoadBalancer]{
		OutputState: i.ToGetRdbInstanceLoadBalancerArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRdbInstanceLoadBalancerOutput struct{ *pulumi.OutputState }

func (GetRdbInstanceLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdbInstanceLoadBalancer)(nil)).Elem()
}

func (o GetRdbInstanceLoadBalancerOutput) ToGetRdbInstanceLoadBalancerOutput() GetRdbInstanceLoadBalancerOutput {
	return o
}

func (o GetRdbInstanceLoadBalancerOutput) ToGetRdbInstanceLoadBalancerOutputWithContext(ctx context.Context) GetRdbInstanceLoadBalancerOutput {
	return o
}

func (o GetRdbInstanceLoadBalancerOutput) ToOutput(ctx context.Context) pulumix.Output[GetRdbInstanceLoadBalancer] {
	return pulumix.Output[GetRdbInstanceLoadBalancer]{
		OutputState: o.OutputState,
	}
}

func (o GetRdbInstanceLoadBalancerOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdbInstanceLoadBalancer) string { return v.EndpointId }).(pulumi.StringOutput)
}

func (o GetRdbInstanceLoadBalancerOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdbInstanceLoadBalancer) string { return v.Hostname }).(pulumi.StringOutput)
}

func (o GetRdbInstanceLoadBalancerOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdbInstanceLoadBalancer) string { return v.Ip }).(pulumi.StringOutput)
}

// The name of the RDB instance.
// Only one of `name` and `instanceId` should be specified.
func (o GetRdbInstanceLoadBalancerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdbInstanceLoadBalancer) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetRdbInstanceLoadBalancerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetRdbInstanceLoadBalancer) int { return v.Port }).(pulumi.IntOutput)
}

type GetRdbInstanceLoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (GetRdbInstanceLoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRdbInstanceLoadBalancer)(nil)).Elem()
}

func (o GetRdbInstanceLoadBalancerArrayOutput) ToGetRdbInstanceLoadBalancerArrayOutput() GetRdbInstanceLoadBalancerArrayOutput {
	return o
}

func (o GetRdbInstanceLoadBalancerArrayOutput) ToGetRdbInstanceLoadBalancerArrayOutputWithContext(ctx context.Context) GetRdbInstanceLoadBalancerArrayOutput {
	return o
}

func (o GetRdbInstanceLoadBalancerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRdbInstanceLoadBalancer] {
	return pulumix.Output[[]GetRdbInstanceLoadBalancer]{
		OutputState: o.OutputState,
	}
}

func (o GetRdbInstanceLoadBalancerArrayOutput) Index(i pulumi.IntInput) GetRdbInstanceLoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRdbInstanceLoadBalancer {
		return vs[0].([]GetRdbInstanceLoadBalancer)[vs[1].(int)]
	}).(GetRdbInstanceLoadBalancerOutput)
}

type GetRdbInstancePrivateNetwork struct {
	EndpointId string `pulumi:"endpointId"`
	Hostname   string `pulumi:"hostname"`
	Ip         string `pulumi:"ip"`
	IpNet      string `pulumi:"ipNet"`
	// The name of the RDB instance.
	// Only one of `name` and `instanceId` should be specified.
	Name string `pulumi:"name"`
	PnId string `pulumi:"pnId"`
	Port int    `pulumi:"port"`
	Zone string `pulumi:"zone"`
}

// GetRdbInstancePrivateNetworkInput is an input type that accepts GetRdbInstancePrivateNetworkArgs and GetRdbInstancePrivateNetworkOutput values.
// You can construct a concrete instance of `GetRdbInstancePrivateNetworkInput` via:
//
//	GetRdbInstancePrivateNetworkArgs{...}
type GetRdbInstancePrivateNetworkInput interface {
	pulumi.Input

	ToGetRdbInstancePrivateNetworkOutput() GetRdbInstancePrivateNetworkOutput
	ToGetRdbInstancePrivateNetworkOutputWithContext(context.Context) GetRdbInstancePrivateNetworkOutput
}

type GetRdbInstancePrivateNetworkArgs struct {
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	Hostname   pulumi.StringInput `pulumi:"hostname"`
	Ip         pulumi.StringInput `pulumi:"ip"`
	IpNet      pulumi.StringInput `pulumi:"ipNet"`
	// The name of the RDB instance.
	// Only one of `name` and `instanceId` should be specified.
	Name pulumi.StringInput `pulumi:"name"`
	PnId pulumi.StringInput `pulumi:"pnId"`
	Port pulumi.IntInput    `pulumi:"port"`
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetRdbInstancePrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdbInstancePrivateNetwork)(nil)).Elem()
}

func (i GetRdbInstancePrivateNetworkArgs) ToGetRdbInstancePrivateNetworkOutput() GetRdbInstancePrivateNetworkOutput {
	return i.ToGetRdbInstancePrivateNetworkOutputWithContext(context.Background())
}

func (i GetRdbInstancePrivateNetworkArgs) ToGetRdbInstancePrivateNetworkOutputWithContext(ctx context.Context) GetRdbInstancePrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdbInstancePrivateNetworkOutput)
}

func (i GetRdbInstancePrivateNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetRdbInstancePrivateNetwork] {
	return pulumix.Output[GetRdbInstancePrivateNetwork]{
		OutputState: i.ToGetRdbInstancePrivateNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetRdbInstancePrivateNetworkArrayInput is an input type that accepts GetRdbInstancePrivateNetworkArray and GetRdbInstancePrivateNetworkArrayOutput values.
// You can construct a concrete instance of `GetRdbInstancePrivateNetworkArrayInput` via:
//
//	GetRdbInstancePrivateNetworkArray{ GetRdbInstancePrivateNetworkArgs{...} }
type GetRdbInstancePrivateNetworkArrayInput interface {
	pulumi.Input

	ToGetRdbInstancePrivateNetworkArrayOutput() GetRdbInstancePrivateNetworkArrayOutput
	ToGetRdbInstancePrivateNetworkArrayOutputWithContext(context.Context) GetRdbInstancePrivateNetworkArrayOutput
}

type GetRdbInstancePrivateNetworkArray []GetRdbInstancePrivateNetworkInput

func (GetRdbInstancePrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRdbInstancePrivateNetwork)(nil)).Elem()
}

func (i GetRdbInstancePrivateNetworkArray) ToGetRdbInstancePrivateNetworkArrayOutput() GetRdbInstancePrivateNetworkArrayOutput {
	return i.ToGetRdbInstancePrivateNetworkArrayOutputWithContext(context.Background())
}

func (i GetRdbInstancePrivateNetworkArray) ToGetRdbInstancePrivateNetworkArrayOutputWithContext(ctx context.Context) GetRdbInstancePrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdbInstancePrivateNetworkArrayOutput)
}

func (i GetRdbInstancePrivateNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRdbInstancePrivateNetwork] {
	return pulumix.Output[[]GetRdbInstancePrivateNetwork]{
		OutputState: i.ToGetRdbInstancePrivateNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRdbInstancePrivateNetworkOutput struct{ *pulumi.OutputState }

func (GetRdbInstancePrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdbInstancePrivateNetwork)(nil)).Elem()
}

func (o GetRdbInstancePrivateNetworkOutput) ToGetRdbInstancePrivateNetworkOutput() GetRdbInstancePrivateNetworkOutput {
	return o
}

func (o GetRdbInstancePrivateNetworkOutput) ToGetRdbInstancePrivateNetworkOutputWithContext(ctx context.Context) GetRdbInstancePrivateNetworkOutput {
	return o
}

func (o GetRdbInstancePrivateNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetRdbInstancePrivateNetwork] {
	return pulumix.Output[GetRdbInstancePrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetRdbInstancePrivateNetworkOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdbInstancePrivateNetwork) string { return v.EndpointId }).(pulumi.StringOutput)
}

func (o GetRdbInstancePrivateNetworkOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdbInstancePrivateNetwork) string { return v.Hostname }).(pulumi.StringOutput)
}

func (o GetRdbInstancePrivateNetworkOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdbInstancePrivateNetwork) string { return v.Ip }).(pulumi.StringOutput)
}

func (o GetRdbInstancePrivateNetworkOutput) IpNet() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdbInstancePrivateNetwork) string { return v.IpNet }).(pulumi.StringOutput)
}

// The name of the RDB instance.
// Only one of `name` and `instanceId` should be specified.
func (o GetRdbInstancePrivateNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdbInstancePrivateNetwork) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetRdbInstancePrivateNetworkOutput) PnId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdbInstancePrivateNetwork) string { return v.PnId }).(pulumi.StringOutput)
}

func (o GetRdbInstancePrivateNetworkOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetRdbInstancePrivateNetwork) int { return v.Port }).(pulumi.IntOutput)
}

func (o GetRdbInstancePrivateNetworkOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdbInstancePrivateNetwork) string { return v.Zone }).(pulumi.StringOutput)
}

type GetRdbInstancePrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetRdbInstancePrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRdbInstancePrivateNetwork)(nil)).Elem()
}

func (o GetRdbInstancePrivateNetworkArrayOutput) ToGetRdbInstancePrivateNetworkArrayOutput() GetRdbInstancePrivateNetworkArrayOutput {
	return o
}

func (o GetRdbInstancePrivateNetworkArrayOutput) ToGetRdbInstancePrivateNetworkArrayOutputWithContext(ctx context.Context) GetRdbInstancePrivateNetworkArrayOutput {
	return o
}

func (o GetRdbInstancePrivateNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRdbInstancePrivateNetwork] {
	return pulumix.Output[[]GetRdbInstancePrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetRdbInstancePrivateNetworkArrayOutput) Index(i pulumi.IntInput) GetRdbInstancePrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRdbInstancePrivateNetwork {
		return vs[0].([]GetRdbInstancePrivateNetwork)[vs[1].(int)]
	}).(GetRdbInstancePrivateNetworkOutput)
}

type GetRdbInstanceReadReplica struct {
	Ip string `pulumi:"ip"`
	// The name of the RDB instance.
	// Only one of `name` and `instanceId` should be specified.
	Name string `pulumi:"name"`
	Port int    `pulumi:"port"`
}

// GetRdbInstanceReadReplicaInput is an input type that accepts GetRdbInstanceReadReplicaArgs and GetRdbInstanceReadReplicaOutput values.
// You can construct a concrete instance of `GetRdbInstanceReadReplicaInput` via:
//
//	GetRdbInstanceReadReplicaArgs{...}
type GetRdbInstanceReadReplicaInput interface {
	pulumi.Input

	ToGetRdbInstanceReadReplicaOutput() GetRdbInstanceReadReplicaOutput
	ToGetRdbInstanceReadReplicaOutputWithContext(context.Context) GetRdbInstanceReadReplicaOutput
}

type GetRdbInstanceReadReplicaArgs struct {
	Ip pulumi.StringInput `pulumi:"ip"`
	// The name of the RDB instance.
	// Only one of `name` and `instanceId` should be specified.
	Name pulumi.StringInput `pulumi:"name"`
	Port pulumi.IntInput    `pulumi:"port"`
}

func (GetRdbInstanceReadReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdbInstanceReadReplica)(nil)).Elem()
}

func (i GetRdbInstanceReadReplicaArgs) ToGetRdbInstanceReadReplicaOutput() GetRdbInstanceReadReplicaOutput {
	return i.ToGetRdbInstanceReadReplicaOutputWithContext(context.Background())
}

func (i GetRdbInstanceReadReplicaArgs) ToGetRdbInstanceReadReplicaOutputWithContext(ctx context.Context) GetRdbInstanceReadReplicaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdbInstanceReadReplicaOutput)
}

func (i GetRdbInstanceReadReplicaArgs) ToOutput(ctx context.Context) pulumix.Output[GetRdbInstanceReadReplica] {
	return pulumix.Output[GetRdbInstanceReadReplica]{
		OutputState: i.ToGetRdbInstanceReadReplicaOutputWithContext(ctx).OutputState,
	}
}

// GetRdbInstanceReadReplicaArrayInput is an input type that accepts GetRdbInstanceReadReplicaArray and GetRdbInstanceReadReplicaArrayOutput values.
// You can construct a concrete instance of `GetRdbInstanceReadReplicaArrayInput` via:
//
//	GetRdbInstanceReadReplicaArray{ GetRdbInstanceReadReplicaArgs{...} }
type GetRdbInstanceReadReplicaArrayInput interface {
	pulumi.Input

	ToGetRdbInstanceReadReplicaArrayOutput() GetRdbInstanceReadReplicaArrayOutput
	ToGetRdbInstanceReadReplicaArrayOutputWithContext(context.Context) GetRdbInstanceReadReplicaArrayOutput
}

type GetRdbInstanceReadReplicaArray []GetRdbInstanceReadReplicaInput

func (GetRdbInstanceReadReplicaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRdbInstanceReadReplica)(nil)).Elem()
}

func (i GetRdbInstanceReadReplicaArray) ToGetRdbInstanceReadReplicaArrayOutput() GetRdbInstanceReadReplicaArrayOutput {
	return i.ToGetRdbInstanceReadReplicaArrayOutputWithContext(context.Background())
}

func (i GetRdbInstanceReadReplicaArray) ToGetRdbInstanceReadReplicaArrayOutputWithContext(ctx context.Context) GetRdbInstanceReadReplicaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdbInstanceReadReplicaArrayOutput)
}

func (i GetRdbInstanceReadReplicaArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRdbInstanceReadReplica] {
	return pulumix.Output[[]GetRdbInstanceReadReplica]{
		OutputState: i.ToGetRdbInstanceReadReplicaArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRdbInstanceReadReplicaOutput struct{ *pulumi.OutputState }

func (GetRdbInstanceReadReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdbInstanceReadReplica)(nil)).Elem()
}

func (o GetRdbInstanceReadReplicaOutput) ToGetRdbInstanceReadReplicaOutput() GetRdbInstanceReadReplicaOutput {
	return o
}

func (o GetRdbInstanceReadReplicaOutput) ToGetRdbInstanceReadReplicaOutputWithContext(ctx context.Context) GetRdbInstanceReadReplicaOutput {
	return o
}

func (o GetRdbInstanceReadReplicaOutput) ToOutput(ctx context.Context) pulumix.Output[GetRdbInstanceReadReplica] {
	return pulumix.Output[GetRdbInstanceReadReplica]{
		OutputState: o.OutputState,
	}
}

func (o GetRdbInstanceReadReplicaOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdbInstanceReadReplica) string { return v.Ip }).(pulumi.StringOutput)
}

// The name of the RDB instance.
// Only one of `name` and `instanceId` should be specified.
func (o GetRdbInstanceReadReplicaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdbInstanceReadReplica) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetRdbInstanceReadReplicaOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetRdbInstanceReadReplica) int { return v.Port }).(pulumi.IntOutput)
}

type GetRdbInstanceReadReplicaArrayOutput struct{ *pulumi.OutputState }

func (GetRdbInstanceReadReplicaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRdbInstanceReadReplica)(nil)).Elem()
}

func (o GetRdbInstanceReadReplicaArrayOutput) ToGetRdbInstanceReadReplicaArrayOutput() GetRdbInstanceReadReplicaArrayOutput {
	return o
}

func (o GetRdbInstanceReadReplicaArrayOutput) ToGetRdbInstanceReadReplicaArrayOutputWithContext(ctx context.Context) GetRdbInstanceReadReplicaArrayOutput {
	return o
}

func (o GetRdbInstanceReadReplicaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRdbInstanceReadReplica] {
	return pulumix.Output[[]GetRdbInstanceReadReplica]{
		OutputState: o.OutputState,
	}
}

func (o GetRdbInstanceReadReplicaArrayOutput) Index(i pulumi.IntInput) GetRdbInstanceReadReplicaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRdbInstanceReadReplica {
		return vs[0].([]GetRdbInstanceReadReplica)[vs[1].(int)]
	}).(GetRdbInstanceReadReplicaOutput)
}

type GetRedisClusterAcl struct {
	Description string `pulumi:"description"`
	// The ID of the Redis cluster.
	Id string `pulumi:"id"`
	Ip string `pulumi:"ip"`
}

// GetRedisClusterAclInput is an input type that accepts GetRedisClusterAclArgs and GetRedisClusterAclOutput values.
// You can construct a concrete instance of `GetRedisClusterAclInput` via:
//
//	GetRedisClusterAclArgs{...}
type GetRedisClusterAclInput interface {
	pulumi.Input

	ToGetRedisClusterAclOutput() GetRedisClusterAclOutput
	ToGetRedisClusterAclOutputWithContext(context.Context) GetRedisClusterAclOutput
}

type GetRedisClusterAclArgs struct {
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of the Redis cluster.
	Id pulumi.StringInput `pulumi:"id"`
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (GetRedisClusterAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRedisClusterAcl)(nil)).Elem()
}

func (i GetRedisClusterAclArgs) ToGetRedisClusterAclOutput() GetRedisClusterAclOutput {
	return i.ToGetRedisClusterAclOutputWithContext(context.Background())
}

func (i GetRedisClusterAclArgs) ToGetRedisClusterAclOutputWithContext(ctx context.Context) GetRedisClusterAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRedisClusterAclOutput)
}

func (i GetRedisClusterAclArgs) ToOutput(ctx context.Context) pulumix.Output[GetRedisClusterAcl] {
	return pulumix.Output[GetRedisClusterAcl]{
		OutputState: i.ToGetRedisClusterAclOutputWithContext(ctx).OutputState,
	}
}

// GetRedisClusterAclArrayInput is an input type that accepts GetRedisClusterAclArray and GetRedisClusterAclArrayOutput values.
// You can construct a concrete instance of `GetRedisClusterAclArrayInput` via:
//
//	GetRedisClusterAclArray{ GetRedisClusterAclArgs{...} }
type GetRedisClusterAclArrayInput interface {
	pulumi.Input

	ToGetRedisClusterAclArrayOutput() GetRedisClusterAclArrayOutput
	ToGetRedisClusterAclArrayOutputWithContext(context.Context) GetRedisClusterAclArrayOutput
}

type GetRedisClusterAclArray []GetRedisClusterAclInput

func (GetRedisClusterAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRedisClusterAcl)(nil)).Elem()
}

func (i GetRedisClusterAclArray) ToGetRedisClusterAclArrayOutput() GetRedisClusterAclArrayOutput {
	return i.ToGetRedisClusterAclArrayOutputWithContext(context.Background())
}

func (i GetRedisClusterAclArray) ToGetRedisClusterAclArrayOutputWithContext(ctx context.Context) GetRedisClusterAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRedisClusterAclArrayOutput)
}

func (i GetRedisClusterAclArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRedisClusterAcl] {
	return pulumix.Output[[]GetRedisClusterAcl]{
		OutputState: i.ToGetRedisClusterAclArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRedisClusterAclOutput struct{ *pulumi.OutputState }

func (GetRedisClusterAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRedisClusterAcl)(nil)).Elem()
}

func (o GetRedisClusterAclOutput) ToGetRedisClusterAclOutput() GetRedisClusterAclOutput {
	return o
}

func (o GetRedisClusterAclOutput) ToGetRedisClusterAclOutputWithContext(ctx context.Context) GetRedisClusterAclOutput {
	return o
}

func (o GetRedisClusterAclOutput) ToOutput(ctx context.Context) pulumix.Output[GetRedisClusterAcl] {
	return pulumix.Output[GetRedisClusterAcl]{
		OutputState: o.OutputState,
	}
}

func (o GetRedisClusterAclOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRedisClusterAcl) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the Redis cluster.
func (o GetRedisClusterAclOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRedisClusterAcl) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRedisClusterAclOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetRedisClusterAcl) string { return v.Ip }).(pulumi.StringOutput)
}

type GetRedisClusterAclArrayOutput struct{ *pulumi.OutputState }

func (GetRedisClusterAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRedisClusterAcl)(nil)).Elem()
}

func (o GetRedisClusterAclArrayOutput) ToGetRedisClusterAclArrayOutput() GetRedisClusterAclArrayOutput {
	return o
}

func (o GetRedisClusterAclArrayOutput) ToGetRedisClusterAclArrayOutputWithContext(ctx context.Context) GetRedisClusterAclArrayOutput {
	return o
}

func (o GetRedisClusterAclArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRedisClusterAcl] {
	return pulumix.Output[[]GetRedisClusterAcl]{
		OutputState: o.OutputState,
	}
}

func (o GetRedisClusterAclArrayOutput) Index(i pulumi.IntInput) GetRedisClusterAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRedisClusterAcl {
		return vs[0].([]GetRedisClusterAcl)[vs[1].(int)]
	}).(GetRedisClusterAclOutput)
}

type GetRedisClusterPrivateNetwork struct {
	EndpointId string `pulumi:"endpointId"`
	// The ID of the Redis cluster.
	Id         string   `pulumi:"id"`
	ServiceIps []string `pulumi:"serviceIps"`
	// `region`) The zone in which the server exists.
	Zone string `pulumi:"zone"`
}

// GetRedisClusterPrivateNetworkInput is an input type that accepts GetRedisClusterPrivateNetworkArgs and GetRedisClusterPrivateNetworkOutput values.
// You can construct a concrete instance of `GetRedisClusterPrivateNetworkInput` via:
//
//	GetRedisClusterPrivateNetworkArgs{...}
type GetRedisClusterPrivateNetworkInput interface {
	pulumi.Input

	ToGetRedisClusterPrivateNetworkOutput() GetRedisClusterPrivateNetworkOutput
	ToGetRedisClusterPrivateNetworkOutputWithContext(context.Context) GetRedisClusterPrivateNetworkOutput
}

type GetRedisClusterPrivateNetworkArgs struct {
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	// The ID of the Redis cluster.
	Id         pulumi.StringInput      `pulumi:"id"`
	ServiceIps pulumi.StringArrayInput `pulumi:"serviceIps"`
	// `region`) The zone in which the server exists.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetRedisClusterPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRedisClusterPrivateNetwork)(nil)).Elem()
}

func (i GetRedisClusterPrivateNetworkArgs) ToGetRedisClusterPrivateNetworkOutput() GetRedisClusterPrivateNetworkOutput {
	return i.ToGetRedisClusterPrivateNetworkOutputWithContext(context.Background())
}

func (i GetRedisClusterPrivateNetworkArgs) ToGetRedisClusterPrivateNetworkOutputWithContext(ctx context.Context) GetRedisClusterPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRedisClusterPrivateNetworkOutput)
}

func (i GetRedisClusterPrivateNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetRedisClusterPrivateNetwork] {
	return pulumix.Output[GetRedisClusterPrivateNetwork]{
		OutputState: i.ToGetRedisClusterPrivateNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetRedisClusterPrivateNetworkArrayInput is an input type that accepts GetRedisClusterPrivateNetworkArray and GetRedisClusterPrivateNetworkArrayOutput values.
// You can construct a concrete instance of `GetRedisClusterPrivateNetworkArrayInput` via:
//
//	GetRedisClusterPrivateNetworkArray{ GetRedisClusterPrivateNetworkArgs{...} }
type GetRedisClusterPrivateNetworkArrayInput interface {
	pulumi.Input

	ToGetRedisClusterPrivateNetworkArrayOutput() GetRedisClusterPrivateNetworkArrayOutput
	ToGetRedisClusterPrivateNetworkArrayOutputWithContext(context.Context) GetRedisClusterPrivateNetworkArrayOutput
}

type GetRedisClusterPrivateNetworkArray []GetRedisClusterPrivateNetworkInput

func (GetRedisClusterPrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRedisClusterPrivateNetwork)(nil)).Elem()
}

func (i GetRedisClusterPrivateNetworkArray) ToGetRedisClusterPrivateNetworkArrayOutput() GetRedisClusterPrivateNetworkArrayOutput {
	return i.ToGetRedisClusterPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i GetRedisClusterPrivateNetworkArray) ToGetRedisClusterPrivateNetworkArrayOutputWithContext(ctx context.Context) GetRedisClusterPrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRedisClusterPrivateNetworkArrayOutput)
}

func (i GetRedisClusterPrivateNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRedisClusterPrivateNetwork] {
	return pulumix.Output[[]GetRedisClusterPrivateNetwork]{
		OutputState: i.ToGetRedisClusterPrivateNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRedisClusterPrivateNetworkOutput struct{ *pulumi.OutputState }

func (GetRedisClusterPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRedisClusterPrivateNetwork)(nil)).Elem()
}

func (o GetRedisClusterPrivateNetworkOutput) ToGetRedisClusterPrivateNetworkOutput() GetRedisClusterPrivateNetworkOutput {
	return o
}

func (o GetRedisClusterPrivateNetworkOutput) ToGetRedisClusterPrivateNetworkOutputWithContext(ctx context.Context) GetRedisClusterPrivateNetworkOutput {
	return o
}

func (o GetRedisClusterPrivateNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetRedisClusterPrivateNetwork] {
	return pulumix.Output[GetRedisClusterPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetRedisClusterPrivateNetworkOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRedisClusterPrivateNetwork) string { return v.EndpointId }).(pulumi.StringOutput)
}

// The ID of the Redis cluster.
func (o GetRedisClusterPrivateNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRedisClusterPrivateNetwork) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRedisClusterPrivateNetworkOutput) ServiceIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRedisClusterPrivateNetwork) []string { return v.ServiceIps }).(pulumi.StringArrayOutput)
}

// `region`) The zone in which the server exists.
func (o GetRedisClusterPrivateNetworkOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetRedisClusterPrivateNetwork) string { return v.Zone }).(pulumi.StringOutput)
}

type GetRedisClusterPrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetRedisClusterPrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRedisClusterPrivateNetwork)(nil)).Elem()
}

func (o GetRedisClusterPrivateNetworkArrayOutput) ToGetRedisClusterPrivateNetworkArrayOutput() GetRedisClusterPrivateNetworkArrayOutput {
	return o
}

func (o GetRedisClusterPrivateNetworkArrayOutput) ToGetRedisClusterPrivateNetworkArrayOutputWithContext(ctx context.Context) GetRedisClusterPrivateNetworkArrayOutput {
	return o
}

func (o GetRedisClusterPrivateNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRedisClusterPrivateNetwork] {
	return pulumix.Output[[]GetRedisClusterPrivateNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetRedisClusterPrivateNetworkArrayOutput) Index(i pulumi.IntInput) GetRedisClusterPrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRedisClusterPrivateNetwork {
		return vs[0].([]GetRedisClusterPrivateNetwork)[vs[1].(int)]
	}).(GetRedisClusterPrivateNetworkOutput)
}

type GetRedisClusterPublicNetwork struct {
	// The ID of the Redis cluster.
	Id   string   `pulumi:"id"`
	Ips  []string `pulumi:"ips"`
	Port int      `pulumi:"port"`
}

// GetRedisClusterPublicNetworkInput is an input type that accepts GetRedisClusterPublicNetworkArgs and GetRedisClusterPublicNetworkOutput values.
// You can construct a concrete instance of `GetRedisClusterPublicNetworkInput` via:
//
//	GetRedisClusterPublicNetworkArgs{...}
type GetRedisClusterPublicNetworkInput interface {
	pulumi.Input

	ToGetRedisClusterPublicNetworkOutput() GetRedisClusterPublicNetworkOutput
	ToGetRedisClusterPublicNetworkOutputWithContext(context.Context) GetRedisClusterPublicNetworkOutput
}

type GetRedisClusterPublicNetworkArgs struct {
	// The ID of the Redis cluster.
	Id   pulumi.StringInput      `pulumi:"id"`
	Ips  pulumi.StringArrayInput `pulumi:"ips"`
	Port pulumi.IntInput         `pulumi:"port"`
}

func (GetRedisClusterPublicNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRedisClusterPublicNetwork)(nil)).Elem()
}

func (i GetRedisClusterPublicNetworkArgs) ToGetRedisClusterPublicNetworkOutput() GetRedisClusterPublicNetworkOutput {
	return i.ToGetRedisClusterPublicNetworkOutputWithContext(context.Background())
}

func (i GetRedisClusterPublicNetworkArgs) ToGetRedisClusterPublicNetworkOutputWithContext(ctx context.Context) GetRedisClusterPublicNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRedisClusterPublicNetworkOutput)
}

func (i GetRedisClusterPublicNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetRedisClusterPublicNetwork] {
	return pulumix.Output[GetRedisClusterPublicNetwork]{
		OutputState: i.ToGetRedisClusterPublicNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetRedisClusterPublicNetworkArrayInput is an input type that accepts GetRedisClusterPublicNetworkArray and GetRedisClusterPublicNetworkArrayOutput values.
// You can construct a concrete instance of `GetRedisClusterPublicNetworkArrayInput` via:
//
//	GetRedisClusterPublicNetworkArray{ GetRedisClusterPublicNetworkArgs{...} }
type GetRedisClusterPublicNetworkArrayInput interface {
	pulumi.Input

	ToGetRedisClusterPublicNetworkArrayOutput() GetRedisClusterPublicNetworkArrayOutput
	ToGetRedisClusterPublicNetworkArrayOutputWithContext(context.Context) GetRedisClusterPublicNetworkArrayOutput
}

type GetRedisClusterPublicNetworkArray []GetRedisClusterPublicNetworkInput

func (GetRedisClusterPublicNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRedisClusterPublicNetwork)(nil)).Elem()
}

func (i GetRedisClusterPublicNetworkArray) ToGetRedisClusterPublicNetworkArrayOutput() GetRedisClusterPublicNetworkArrayOutput {
	return i.ToGetRedisClusterPublicNetworkArrayOutputWithContext(context.Background())
}

func (i GetRedisClusterPublicNetworkArray) ToGetRedisClusterPublicNetworkArrayOutputWithContext(ctx context.Context) GetRedisClusterPublicNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRedisClusterPublicNetworkArrayOutput)
}

func (i GetRedisClusterPublicNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRedisClusterPublicNetwork] {
	return pulumix.Output[[]GetRedisClusterPublicNetwork]{
		OutputState: i.ToGetRedisClusterPublicNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRedisClusterPublicNetworkOutput struct{ *pulumi.OutputState }

func (GetRedisClusterPublicNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRedisClusterPublicNetwork)(nil)).Elem()
}

func (o GetRedisClusterPublicNetworkOutput) ToGetRedisClusterPublicNetworkOutput() GetRedisClusterPublicNetworkOutput {
	return o
}

func (o GetRedisClusterPublicNetworkOutput) ToGetRedisClusterPublicNetworkOutputWithContext(ctx context.Context) GetRedisClusterPublicNetworkOutput {
	return o
}

func (o GetRedisClusterPublicNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetRedisClusterPublicNetwork] {
	return pulumix.Output[GetRedisClusterPublicNetwork]{
		OutputState: o.OutputState,
	}
}

// The ID of the Redis cluster.
func (o GetRedisClusterPublicNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRedisClusterPublicNetwork) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRedisClusterPublicNetworkOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRedisClusterPublicNetwork) []string { return v.Ips }).(pulumi.StringArrayOutput)
}

func (o GetRedisClusterPublicNetworkOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetRedisClusterPublicNetwork) int { return v.Port }).(pulumi.IntOutput)
}

type GetRedisClusterPublicNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetRedisClusterPublicNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRedisClusterPublicNetwork)(nil)).Elem()
}

func (o GetRedisClusterPublicNetworkArrayOutput) ToGetRedisClusterPublicNetworkArrayOutput() GetRedisClusterPublicNetworkArrayOutput {
	return o
}

func (o GetRedisClusterPublicNetworkArrayOutput) ToGetRedisClusterPublicNetworkArrayOutputWithContext(ctx context.Context) GetRedisClusterPublicNetworkArrayOutput {
	return o
}

func (o GetRedisClusterPublicNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRedisClusterPublicNetwork] {
	return pulumix.Output[[]GetRedisClusterPublicNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetRedisClusterPublicNetworkArrayOutput) Index(i pulumi.IntInput) GetRedisClusterPublicNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRedisClusterPublicNetwork {
		return vs[0].([]GetRedisClusterPublicNetwork)[vs[1].(int)]
	}).(GetRedisClusterPublicNetworkOutput)
}

type GetVpcGatewayNetworkIpamConfig struct {
	PushDefaultRoute bool `pulumi:"pushDefaultRoute"`
}

// GetVpcGatewayNetworkIpamConfigInput is an input type that accepts GetVpcGatewayNetworkIpamConfigArgs and GetVpcGatewayNetworkIpamConfigOutput values.
// You can construct a concrete instance of `GetVpcGatewayNetworkIpamConfigInput` via:
//
//	GetVpcGatewayNetworkIpamConfigArgs{...}
type GetVpcGatewayNetworkIpamConfigInput interface {
	pulumi.Input

	ToGetVpcGatewayNetworkIpamConfigOutput() GetVpcGatewayNetworkIpamConfigOutput
	ToGetVpcGatewayNetworkIpamConfigOutputWithContext(context.Context) GetVpcGatewayNetworkIpamConfigOutput
}

type GetVpcGatewayNetworkIpamConfigArgs struct {
	PushDefaultRoute pulumi.BoolInput `pulumi:"pushDefaultRoute"`
}

func (GetVpcGatewayNetworkIpamConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcGatewayNetworkIpamConfig)(nil)).Elem()
}

func (i GetVpcGatewayNetworkIpamConfigArgs) ToGetVpcGatewayNetworkIpamConfigOutput() GetVpcGatewayNetworkIpamConfigOutput {
	return i.ToGetVpcGatewayNetworkIpamConfigOutputWithContext(context.Background())
}

func (i GetVpcGatewayNetworkIpamConfigArgs) ToGetVpcGatewayNetworkIpamConfigOutputWithContext(ctx context.Context) GetVpcGatewayNetworkIpamConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcGatewayNetworkIpamConfigOutput)
}

func (i GetVpcGatewayNetworkIpamConfigArgs) ToOutput(ctx context.Context) pulumix.Output[GetVpcGatewayNetworkIpamConfig] {
	return pulumix.Output[GetVpcGatewayNetworkIpamConfig]{
		OutputState: i.ToGetVpcGatewayNetworkIpamConfigOutputWithContext(ctx).OutputState,
	}
}

// GetVpcGatewayNetworkIpamConfigArrayInput is an input type that accepts GetVpcGatewayNetworkIpamConfigArray and GetVpcGatewayNetworkIpamConfigArrayOutput values.
// You can construct a concrete instance of `GetVpcGatewayNetworkIpamConfigArrayInput` via:
//
//	GetVpcGatewayNetworkIpamConfigArray{ GetVpcGatewayNetworkIpamConfigArgs{...} }
type GetVpcGatewayNetworkIpamConfigArrayInput interface {
	pulumi.Input

	ToGetVpcGatewayNetworkIpamConfigArrayOutput() GetVpcGatewayNetworkIpamConfigArrayOutput
	ToGetVpcGatewayNetworkIpamConfigArrayOutputWithContext(context.Context) GetVpcGatewayNetworkIpamConfigArrayOutput
}

type GetVpcGatewayNetworkIpamConfigArray []GetVpcGatewayNetworkIpamConfigInput

func (GetVpcGatewayNetworkIpamConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcGatewayNetworkIpamConfig)(nil)).Elem()
}

func (i GetVpcGatewayNetworkIpamConfigArray) ToGetVpcGatewayNetworkIpamConfigArrayOutput() GetVpcGatewayNetworkIpamConfigArrayOutput {
	return i.ToGetVpcGatewayNetworkIpamConfigArrayOutputWithContext(context.Background())
}

func (i GetVpcGatewayNetworkIpamConfigArray) ToGetVpcGatewayNetworkIpamConfigArrayOutputWithContext(ctx context.Context) GetVpcGatewayNetworkIpamConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcGatewayNetworkIpamConfigArrayOutput)
}

func (i GetVpcGatewayNetworkIpamConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]GetVpcGatewayNetworkIpamConfig] {
	return pulumix.Output[[]GetVpcGatewayNetworkIpamConfig]{
		OutputState: i.ToGetVpcGatewayNetworkIpamConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type GetVpcGatewayNetworkIpamConfigOutput struct{ *pulumi.OutputState }

func (GetVpcGatewayNetworkIpamConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcGatewayNetworkIpamConfig)(nil)).Elem()
}

func (o GetVpcGatewayNetworkIpamConfigOutput) ToGetVpcGatewayNetworkIpamConfigOutput() GetVpcGatewayNetworkIpamConfigOutput {
	return o
}

func (o GetVpcGatewayNetworkIpamConfigOutput) ToGetVpcGatewayNetworkIpamConfigOutputWithContext(ctx context.Context) GetVpcGatewayNetworkIpamConfigOutput {
	return o
}

func (o GetVpcGatewayNetworkIpamConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetVpcGatewayNetworkIpamConfig] {
	return pulumix.Output[GetVpcGatewayNetworkIpamConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetVpcGatewayNetworkIpamConfigOutput) PushDefaultRoute() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVpcGatewayNetworkIpamConfig) bool { return v.PushDefaultRoute }).(pulumi.BoolOutput)
}

type GetVpcGatewayNetworkIpamConfigArrayOutput struct{ *pulumi.OutputState }

func (GetVpcGatewayNetworkIpamConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcGatewayNetworkIpamConfig)(nil)).Elem()
}

func (o GetVpcGatewayNetworkIpamConfigArrayOutput) ToGetVpcGatewayNetworkIpamConfigArrayOutput() GetVpcGatewayNetworkIpamConfigArrayOutput {
	return o
}

func (o GetVpcGatewayNetworkIpamConfigArrayOutput) ToGetVpcGatewayNetworkIpamConfigArrayOutputWithContext(ctx context.Context) GetVpcGatewayNetworkIpamConfigArrayOutput {
	return o
}

func (o GetVpcGatewayNetworkIpamConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetVpcGatewayNetworkIpamConfig] {
	return pulumix.Output[[]GetVpcGatewayNetworkIpamConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetVpcGatewayNetworkIpamConfigArrayOutput) Index(i pulumi.IntInput) GetVpcGatewayNetworkIpamConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVpcGatewayNetworkIpamConfig {
		return vs[0].([]GetVpcGatewayNetworkIpamConfig)[vs[1].(int)]
	}).(GetVpcGatewayNetworkIpamConfigOutput)
}

type GetVpcPrivateNetworkIpv4Subnet struct {
	Address   string `pulumi:"address"`
	CreatedAt string `pulumi:"createdAt"`
	// The ID of the private network.
	Id           string `pulumi:"id"`
	PrefixLength int    `pulumi:"prefixLength"`
	Subnet       string `pulumi:"subnet"`
	SubnetMask   string `pulumi:"subnetMask"`
	UpdatedAt    string `pulumi:"updatedAt"`
}

// GetVpcPrivateNetworkIpv4SubnetInput is an input type that accepts GetVpcPrivateNetworkIpv4SubnetArgs and GetVpcPrivateNetworkIpv4SubnetOutput values.
// You can construct a concrete instance of `GetVpcPrivateNetworkIpv4SubnetInput` via:
//
//	GetVpcPrivateNetworkIpv4SubnetArgs{...}
type GetVpcPrivateNetworkIpv4SubnetInput interface {
	pulumi.Input

	ToGetVpcPrivateNetworkIpv4SubnetOutput() GetVpcPrivateNetworkIpv4SubnetOutput
	ToGetVpcPrivateNetworkIpv4SubnetOutputWithContext(context.Context) GetVpcPrivateNetworkIpv4SubnetOutput
}

type GetVpcPrivateNetworkIpv4SubnetArgs struct {
	Address   pulumi.StringInput `pulumi:"address"`
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The ID of the private network.
	Id           pulumi.StringInput `pulumi:"id"`
	PrefixLength pulumi.IntInput    `pulumi:"prefixLength"`
	Subnet       pulumi.StringInput `pulumi:"subnet"`
	SubnetMask   pulumi.StringInput `pulumi:"subnetMask"`
	UpdatedAt    pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetVpcPrivateNetworkIpv4SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcPrivateNetworkIpv4Subnet)(nil)).Elem()
}

func (i GetVpcPrivateNetworkIpv4SubnetArgs) ToGetVpcPrivateNetworkIpv4SubnetOutput() GetVpcPrivateNetworkIpv4SubnetOutput {
	return i.ToGetVpcPrivateNetworkIpv4SubnetOutputWithContext(context.Background())
}

func (i GetVpcPrivateNetworkIpv4SubnetArgs) ToGetVpcPrivateNetworkIpv4SubnetOutputWithContext(ctx context.Context) GetVpcPrivateNetworkIpv4SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcPrivateNetworkIpv4SubnetOutput)
}

func (i GetVpcPrivateNetworkIpv4SubnetArgs) ToOutput(ctx context.Context) pulumix.Output[GetVpcPrivateNetworkIpv4Subnet] {
	return pulumix.Output[GetVpcPrivateNetworkIpv4Subnet]{
		OutputState: i.ToGetVpcPrivateNetworkIpv4SubnetOutputWithContext(ctx).OutputState,
	}
}

// GetVpcPrivateNetworkIpv4SubnetArrayInput is an input type that accepts GetVpcPrivateNetworkIpv4SubnetArray and GetVpcPrivateNetworkIpv4SubnetArrayOutput values.
// You can construct a concrete instance of `GetVpcPrivateNetworkIpv4SubnetArrayInput` via:
//
//	GetVpcPrivateNetworkIpv4SubnetArray{ GetVpcPrivateNetworkIpv4SubnetArgs{...} }
type GetVpcPrivateNetworkIpv4SubnetArrayInput interface {
	pulumi.Input

	ToGetVpcPrivateNetworkIpv4SubnetArrayOutput() GetVpcPrivateNetworkIpv4SubnetArrayOutput
	ToGetVpcPrivateNetworkIpv4SubnetArrayOutputWithContext(context.Context) GetVpcPrivateNetworkIpv4SubnetArrayOutput
}

type GetVpcPrivateNetworkIpv4SubnetArray []GetVpcPrivateNetworkIpv4SubnetInput

func (GetVpcPrivateNetworkIpv4SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcPrivateNetworkIpv4Subnet)(nil)).Elem()
}

func (i GetVpcPrivateNetworkIpv4SubnetArray) ToGetVpcPrivateNetworkIpv4SubnetArrayOutput() GetVpcPrivateNetworkIpv4SubnetArrayOutput {
	return i.ToGetVpcPrivateNetworkIpv4SubnetArrayOutputWithContext(context.Background())
}

func (i GetVpcPrivateNetworkIpv4SubnetArray) ToGetVpcPrivateNetworkIpv4SubnetArrayOutputWithContext(ctx context.Context) GetVpcPrivateNetworkIpv4SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcPrivateNetworkIpv4SubnetArrayOutput)
}

func (i GetVpcPrivateNetworkIpv4SubnetArray) ToOutput(ctx context.Context) pulumix.Output[[]GetVpcPrivateNetworkIpv4Subnet] {
	return pulumix.Output[[]GetVpcPrivateNetworkIpv4Subnet]{
		OutputState: i.ToGetVpcPrivateNetworkIpv4SubnetArrayOutputWithContext(ctx).OutputState,
	}
}

type GetVpcPrivateNetworkIpv4SubnetOutput struct{ *pulumi.OutputState }

func (GetVpcPrivateNetworkIpv4SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcPrivateNetworkIpv4Subnet)(nil)).Elem()
}

func (o GetVpcPrivateNetworkIpv4SubnetOutput) ToGetVpcPrivateNetworkIpv4SubnetOutput() GetVpcPrivateNetworkIpv4SubnetOutput {
	return o
}

func (o GetVpcPrivateNetworkIpv4SubnetOutput) ToGetVpcPrivateNetworkIpv4SubnetOutputWithContext(ctx context.Context) GetVpcPrivateNetworkIpv4SubnetOutput {
	return o
}

func (o GetVpcPrivateNetworkIpv4SubnetOutput) ToOutput(ctx context.Context) pulumix.Output[GetVpcPrivateNetworkIpv4Subnet] {
	return pulumix.Output[GetVpcPrivateNetworkIpv4Subnet]{
		OutputState: o.OutputState,
	}
}

func (o GetVpcPrivateNetworkIpv4SubnetOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcPrivateNetworkIpv4Subnet) string { return v.Address }).(pulumi.StringOutput)
}

func (o GetVpcPrivateNetworkIpv4SubnetOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcPrivateNetworkIpv4Subnet) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the private network.
func (o GetVpcPrivateNetworkIpv4SubnetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcPrivateNetworkIpv4Subnet) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVpcPrivateNetworkIpv4SubnetOutput) PrefixLength() pulumi.IntOutput {
	return o.ApplyT(func(v GetVpcPrivateNetworkIpv4Subnet) int { return v.PrefixLength }).(pulumi.IntOutput)
}

func (o GetVpcPrivateNetworkIpv4SubnetOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcPrivateNetworkIpv4Subnet) string { return v.Subnet }).(pulumi.StringOutput)
}

func (o GetVpcPrivateNetworkIpv4SubnetOutput) SubnetMask() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcPrivateNetworkIpv4Subnet) string { return v.SubnetMask }).(pulumi.StringOutput)
}

func (o GetVpcPrivateNetworkIpv4SubnetOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcPrivateNetworkIpv4Subnet) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetVpcPrivateNetworkIpv4SubnetArrayOutput struct{ *pulumi.OutputState }

func (GetVpcPrivateNetworkIpv4SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcPrivateNetworkIpv4Subnet)(nil)).Elem()
}

func (o GetVpcPrivateNetworkIpv4SubnetArrayOutput) ToGetVpcPrivateNetworkIpv4SubnetArrayOutput() GetVpcPrivateNetworkIpv4SubnetArrayOutput {
	return o
}

func (o GetVpcPrivateNetworkIpv4SubnetArrayOutput) ToGetVpcPrivateNetworkIpv4SubnetArrayOutputWithContext(ctx context.Context) GetVpcPrivateNetworkIpv4SubnetArrayOutput {
	return o
}

func (o GetVpcPrivateNetworkIpv4SubnetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetVpcPrivateNetworkIpv4Subnet] {
	return pulumix.Output[[]GetVpcPrivateNetworkIpv4Subnet]{
		OutputState: o.OutputState,
	}
}

func (o GetVpcPrivateNetworkIpv4SubnetArrayOutput) Index(i pulumi.IntInput) GetVpcPrivateNetworkIpv4SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVpcPrivateNetworkIpv4Subnet {
		return vs[0].([]GetVpcPrivateNetworkIpv4Subnet)[vs[1].(int)]
	}).(GetVpcPrivateNetworkIpv4SubnetOutput)
}

type GetVpcPrivateNetworkIpv6Subnet struct {
	Address   string `pulumi:"address"`
	CreatedAt string `pulumi:"createdAt"`
	// The ID of the private network.
	Id           string `pulumi:"id"`
	PrefixLength int    `pulumi:"prefixLength"`
	Subnet       string `pulumi:"subnet"`
	SubnetMask   string `pulumi:"subnetMask"`
	UpdatedAt    string `pulumi:"updatedAt"`
}

// GetVpcPrivateNetworkIpv6SubnetInput is an input type that accepts GetVpcPrivateNetworkIpv6SubnetArgs and GetVpcPrivateNetworkIpv6SubnetOutput values.
// You can construct a concrete instance of `GetVpcPrivateNetworkIpv6SubnetInput` via:
//
//	GetVpcPrivateNetworkIpv6SubnetArgs{...}
type GetVpcPrivateNetworkIpv6SubnetInput interface {
	pulumi.Input

	ToGetVpcPrivateNetworkIpv6SubnetOutput() GetVpcPrivateNetworkIpv6SubnetOutput
	ToGetVpcPrivateNetworkIpv6SubnetOutputWithContext(context.Context) GetVpcPrivateNetworkIpv6SubnetOutput
}

type GetVpcPrivateNetworkIpv6SubnetArgs struct {
	Address   pulumi.StringInput `pulumi:"address"`
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The ID of the private network.
	Id           pulumi.StringInput `pulumi:"id"`
	PrefixLength pulumi.IntInput    `pulumi:"prefixLength"`
	Subnet       pulumi.StringInput `pulumi:"subnet"`
	SubnetMask   pulumi.StringInput `pulumi:"subnetMask"`
	UpdatedAt    pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetVpcPrivateNetworkIpv6SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcPrivateNetworkIpv6Subnet)(nil)).Elem()
}

func (i GetVpcPrivateNetworkIpv6SubnetArgs) ToGetVpcPrivateNetworkIpv6SubnetOutput() GetVpcPrivateNetworkIpv6SubnetOutput {
	return i.ToGetVpcPrivateNetworkIpv6SubnetOutputWithContext(context.Background())
}

func (i GetVpcPrivateNetworkIpv6SubnetArgs) ToGetVpcPrivateNetworkIpv6SubnetOutputWithContext(ctx context.Context) GetVpcPrivateNetworkIpv6SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcPrivateNetworkIpv6SubnetOutput)
}

func (i GetVpcPrivateNetworkIpv6SubnetArgs) ToOutput(ctx context.Context) pulumix.Output[GetVpcPrivateNetworkIpv6Subnet] {
	return pulumix.Output[GetVpcPrivateNetworkIpv6Subnet]{
		OutputState: i.ToGetVpcPrivateNetworkIpv6SubnetOutputWithContext(ctx).OutputState,
	}
}

// GetVpcPrivateNetworkIpv6SubnetArrayInput is an input type that accepts GetVpcPrivateNetworkIpv6SubnetArray and GetVpcPrivateNetworkIpv6SubnetArrayOutput values.
// You can construct a concrete instance of `GetVpcPrivateNetworkIpv6SubnetArrayInput` via:
//
//	GetVpcPrivateNetworkIpv6SubnetArray{ GetVpcPrivateNetworkIpv6SubnetArgs{...} }
type GetVpcPrivateNetworkIpv6SubnetArrayInput interface {
	pulumi.Input

	ToGetVpcPrivateNetworkIpv6SubnetArrayOutput() GetVpcPrivateNetworkIpv6SubnetArrayOutput
	ToGetVpcPrivateNetworkIpv6SubnetArrayOutputWithContext(context.Context) GetVpcPrivateNetworkIpv6SubnetArrayOutput
}

type GetVpcPrivateNetworkIpv6SubnetArray []GetVpcPrivateNetworkIpv6SubnetInput

func (GetVpcPrivateNetworkIpv6SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcPrivateNetworkIpv6Subnet)(nil)).Elem()
}

func (i GetVpcPrivateNetworkIpv6SubnetArray) ToGetVpcPrivateNetworkIpv6SubnetArrayOutput() GetVpcPrivateNetworkIpv6SubnetArrayOutput {
	return i.ToGetVpcPrivateNetworkIpv6SubnetArrayOutputWithContext(context.Background())
}

func (i GetVpcPrivateNetworkIpv6SubnetArray) ToGetVpcPrivateNetworkIpv6SubnetArrayOutputWithContext(ctx context.Context) GetVpcPrivateNetworkIpv6SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcPrivateNetworkIpv6SubnetArrayOutput)
}

func (i GetVpcPrivateNetworkIpv6SubnetArray) ToOutput(ctx context.Context) pulumix.Output[[]GetVpcPrivateNetworkIpv6Subnet] {
	return pulumix.Output[[]GetVpcPrivateNetworkIpv6Subnet]{
		OutputState: i.ToGetVpcPrivateNetworkIpv6SubnetArrayOutputWithContext(ctx).OutputState,
	}
}

type GetVpcPrivateNetworkIpv6SubnetOutput struct{ *pulumi.OutputState }

func (GetVpcPrivateNetworkIpv6SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcPrivateNetworkIpv6Subnet)(nil)).Elem()
}

func (o GetVpcPrivateNetworkIpv6SubnetOutput) ToGetVpcPrivateNetworkIpv6SubnetOutput() GetVpcPrivateNetworkIpv6SubnetOutput {
	return o
}

func (o GetVpcPrivateNetworkIpv6SubnetOutput) ToGetVpcPrivateNetworkIpv6SubnetOutputWithContext(ctx context.Context) GetVpcPrivateNetworkIpv6SubnetOutput {
	return o
}

func (o GetVpcPrivateNetworkIpv6SubnetOutput) ToOutput(ctx context.Context) pulumix.Output[GetVpcPrivateNetworkIpv6Subnet] {
	return pulumix.Output[GetVpcPrivateNetworkIpv6Subnet]{
		OutputState: o.OutputState,
	}
}

func (o GetVpcPrivateNetworkIpv6SubnetOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcPrivateNetworkIpv6Subnet) string { return v.Address }).(pulumi.StringOutput)
}

func (o GetVpcPrivateNetworkIpv6SubnetOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcPrivateNetworkIpv6Subnet) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the private network.
func (o GetVpcPrivateNetworkIpv6SubnetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcPrivateNetworkIpv6Subnet) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVpcPrivateNetworkIpv6SubnetOutput) PrefixLength() pulumi.IntOutput {
	return o.ApplyT(func(v GetVpcPrivateNetworkIpv6Subnet) int { return v.PrefixLength }).(pulumi.IntOutput)
}

func (o GetVpcPrivateNetworkIpv6SubnetOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcPrivateNetworkIpv6Subnet) string { return v.Subnet }).(pulumi.StringOutput)
}

func (o GetVpcPrivateNetworkIpv6SubnetOutput) SubnetMask() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcPrivateNetworkIpv6Subnet) string { return v.SubnetMask }).(pulumi.StringOutput)
}

func (o GetVpcPrivateNetworkIpv6SubnetOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcPrivateNetworkIpv6Subnet) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetVpcPrivateNetworkIpv6SubnetArrayOutput struct{ *pulumi.OutputState }

func (GetVpcPrivateNetworkIpv6SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcPrivateNetworkIpv6Subnet)(nil)).Elem()
}

func (o GetVpcPrivateNetworkIpv6SubnetArrayOutput) ToGetVpcPrivateNetworkIpv6SubnetArrayOutput() GetVpcPrivateNetworkIpv6SubnetArrayOutput {
	return o
}

func (o GetVpcPrivateNetworkIpv6SubnetArrayOutput) ToGetVpcPrivateNetworkIpv6SubnetArrayOutputWithContext(ctx context.Context) GetVpcPrivateNetworkIpv6SubnetArrayOutput {
	return o
}

func (o GetVpcPrivateNetworkIpv6SubnetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetVpcPrivateNetworkIpv6Subnet] {
	return pulumix.Output[[]GetVpcPrivateNetworkIpv6Subnet]{
		OutputState: o.OutputState,
	}
}

func (o GetVpcPrivateNetworkIpv6SubnetArrayOutput) Index(i pulumi.IntInput) GetVpcPrivateNetworkIpv6SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVpcPrivateNetworkIpv6Subnet {
		return vs[0].([]GetVpcPrivateNetworkIpv6Subnet)[vs[1].(int)]
	}).(GetVpcPrivateNetworkIpv6SubnetOutput)
}

type GetVpcsVpc struct {
	// Date and time of VPC's creation (RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// The associated VPC ID.
	// > **Important:** VPCs' IDs are regional, which means they are of the form `{region}/{id}`, e.g. `fr-par/11111111-1111-1111-1111-111111111111
	Id string `pulumi:"id"`
	// Defines whether the VPC is the default one for its Project.
	IsDefault bool `pulumi:"isDefault"`
	// The VPC name used as filter. VPCs with a name like it are listed.
	Name string `pulumi:"name"`
	// The organization ID the VPC is associated with.
	OrganizationId string `pulumi:"organizationId"`
	// The ID of the project the VPC is associated with.
	ProjectId string `pulumi:"projectId"`
	// `region`). The region in which vpcs exist.
	Region string `pulumi:"region"`
	// List of tags used as filter. VPCs with these exact tags are listed.
	Tags     []string `pulumi:"tags"`
	UpdateAt string   `pulumi:"updateAt"`
}

// GetVpcsVpcInput is an input type that accepts GetVpcsVpcArgs and GetVpcsVpcOutput values.
// You can construct a concrete instance of `GetVpcsVpcInput` via:
//
//	GetVpcsVpcArgs{...}
type GetVpcsVpcInput interface {
	pulumi.Input

	ToGetVpcsVpcOutput() GetVpcsVpcOutput
	ToGetVpcsVpcOutputWithContext(context.Context) GetVpcsVpcOutput
}

type GetVpcsVpcArgs struct {
	// Date and time of VPC's creation (RFC 3339 format).
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The associated VPC ID.
	// > **Important:** VPCs' IDs are regional, which means they are of the form `{region}/{id}`, e.g. `fr-par/11111111-1111-1111-1111-111111111111
	Id pulumi.StringInput `pulumi:"id"`
	// Defines whether the VPC is the default one for its Project.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// The VPC name used as filter. VPCs with a name like it are listed.
	Name pulumi.StringInput `pulumi:"name"`
	// The organization ID the VPC is associated with.
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
	// The ID of the project the VPC is associated with.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// `region`). The region in which vpcs exist.
	Region pulumi.StringInput `pulumi:"region"`
	// List of tags used as filter. VPCs with these exact tags are listed.
	Tags     pulumi.StringArrayInput `pulumi:"tags"`
	UpdateAt pulumi.StringInput      `pulumi:"updateAt"`
}

func (GetVpcsVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcsVpc)(nil)).Elem()
}

func (i GetVpcsVpcArgs) ToGetVpcsVpcOutput() GetVpcsVpcOutput {
	return i.ToGetVpcsVpcOutputWithContext(context.Background())
}

func (i GetVpcsVpcArgs) ToGetVpcsVpcOutputWithContext(ctx context.Context) GetVpcsVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcsVpcOutput)
}

func (i GetVpcsVpcArgs) ToOutput(ctx context.Context) pulumix.Output[GetVpcsVpc] {
	return pulumix.Output[GetVpcsVpc]{
		OutputState: i.ToGetVpcsVpcOutputWithContext(ctx).OutputState,
	}
}

// GetVpcsVpcArrayInput is an input type that accepts GetVpcsVpcArray and GetVpcsVpcArrayOutput values.
// You can construct a concrete instance of `GetVpcsVpcArrayInput` via:
//
//	GetVpcsVpcArray{ GetVpcsVpcArgs{...} }
type GetVpcsVpcArrayInput interface {
	pulumi.Input

	ToGetVpcsVpcArrayOutput() GetVpcsVpcArrayOutput
	ToGetVpcsVpcArrayOutputWithContext(context.Context) GetVpcsVpcArrayOutput
}

type GetVpcsVpcArray []GetVpcsVpcInput

func (GetVpcsVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcsVpc)(nil)).Elem()
}

func (i GetVpcsVpcArray) ToGetVpcsVpcArrayOutput() GetVpcsVpcArrayOutput {
	return i.ToGetVpcsVpcArrayOutputWithContext(context.Background())
}

func (i GetVpcsVpcArray) ToGetVpcsVpcArrayOutputWithContext(ctx context.Context) GetVpcsVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcsVpcArrayOutput)
}

func (i GetVpcsVpcArray) ToOutput(ctx context.Context) pulumix.Output[[]GetVpcsVpc] {
	return pulumix.Output[[]GetVpcsVpc]{
		OutputState: i.ToGetVpcsVpcArrayOutputWithContext(ctx).OutputState,
	}
}

type GetVpcsVpcOutput struct{ *pulumi.OutputState }

func (GetVpcsVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcsVpc)(nil)).Elem()
}

func (o GetVpcsVpcOutput) ToGetVpcsVpcOutput() GetVpcsVpcOutput {
	return o
}

func (o GetVpcsVpcOutput) ToGetVpcsVpcOutputWithContext(ctx context.Context) GetVpcsVpcOutput {
	return o
}

func (o GetVpcsVpcOutput) ToOutput(ctx context.Context) pulumix.Output[GetVpcsVpc] {
	return pulumix.Output[GetVpcsVpc]{
		OutputState: o.OutputState,
	}
}

// Date and time of VPC's creation (RFC 3339 format).
func (o GetVpcsVpcOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcsVpc) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The associated VPC ID.
// > **Important:** VPCs' IDs are regional, which means they are of the form `{region}/{id}`, e.g. `fr-par/11111111-1111-1111-1111-111111111111
func (o GetVpcsVpcOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcsVpc) string { return v.Id }).(pulumi.StringOutput)
}

// Defines whether the VPC is the default one for its Project.
func (o GetVpcsVpcOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVpcsVpc) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The VPC name used as filter. VPCs with a name like it are listed.
func (o GetVpcsVpcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcsVpc) string { return v.Name }).(pulumi.StringOutput)
}

// The organization ID the VPC is associated with.
func (o GetVpcsVpcOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcsVpc) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// The ID of the project the VPC is associated with.
func (o GetVpcsVpcOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcsVpc) string { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`). The region in which vpcs exist.
func (o GetVpcsVpcOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcsVpc) string { return v.Region }).(pulumi.StringOutput)
}

// List of tags used as filter. VPCs with these exact tags are listed.
func (o GetVpcsVpcOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVpcsVpc) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o GetVpcsVpcOutput) UpdateAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcsVpc) string { return v.UpdateAt }).(pulumi.StringOutput)
}

type GetVpcsVpcArrayOutput struct{ *pulumi.OutputState }

func (GetVpcsVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcsVpc)(nil)).Elem()
}

func (o GetVpcsVpcArrayOutput) ToGetVpcsVpcArrayOutput() GetVpcsVpcArrayOutput {
	return o
}

func (o GetVpcsVpcArrayOutput) ToGetVpcsVpcArrayOutputWithContext(ctx context.Context) GetVpcsVpcArrayOutput {
	return o
}

func (o GetVpcsVpcArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetVpcsVpc] {
	return pulumix.Output[[]GetVpcsVpc]{
		OutputState: o.OutputState,
	}
}

func (o GetVpcsVpcArrayOutput) Index(i pulumi.IntInput) GetVpcsVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVpcsVpc {
		return vs[0].([]GetVpcsVpc)[vs[1].(int)]
	}).(GetVpcsVpcOutput)
}

type GetWebHostOfferProduct struct {
	// The quota of databases.
	DatabasesQuota int `pulumi:"databasesQuota"`
	// The quota of email accounts.
	EmailAccountsQuota int `pulumi:"emailAccountsQuota"`
	// The quota of email storage.
	EmailStorageQuota int `pulumi:"emailStorageQuota"`
	// The quota of hosting storage.
	HostingStorageQuota int `pulumi:"hostingStorageQuota"`
	// The offer name. Only one of `name` and `offerId` should be specified.
	Name string `pulumi:"name"`
	// The product option.
	Option bool `pulumi:"option"`
	// The capacity of the memory in GB.
	Ram int `pulumi:"ram"`
	// If support is included.
	SupportIncluded bool `pulumi:"supportIncluded"`
	// The number of cores.
	VCpu int `pulumi:"vCpu"`
}

// GetWebHostOfferProductInput is an input type that accepts GetWebHostOfferProductArgs and GetWebHostOfferProductOutput values.
// You can construct a concrete instance of `GetWebHostOfferProductInput` via:
//
//	GetWebHostOfferProductArgs{...}
type GetWebHostOfferProductInput interface {
	pulumi.Input

	ToGetWebHostOfferProductOutput() GetWebHostOfferProductOutput
	ToGetWebHostOfferProductOutputWithContext(context.Context) GetWebHostOfferProductOutput
}

type GetWebHostOfferProductArgs struct {
	// The quota of databases.
	DatabasesQuota pulumi.IntInput `pulumi:"databasesQuota"`
	// The quota of email accounts.
	EmailAccountsQuota pulumi.IntInput `pulumi:"emailAccountsQuota"`
	// The quota of email storage.
	EmailStorageQuota pulumi.IntInput `pulumi:"emailStorageQuota"`
	// The quota of hosting storage.
	HostingStorageQuota pulumi.IntInput `pulumi:"hostingStorageQuota"`
	// The offer name. Only one of `name` and `offerId` should be specified.
	Name pulumi.StringInput `pulumi:"name"`
	// The product option.
	Option pulumi.BoolInput `pulumi:"option"`
	// The capacity of the memory in GB.
	Ram pulumi.IntInput `pulumi:"ram"`
	// If support is included.
	SupportIncluded pulumi.BoolInput `pulumi:"supportIncluded"`
	// The number of cores.
	VCpu pulumi.IntInput `pulumi:"vCpu"`
}

func (GetWebHostOfferProductArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebHostOfferProduct)(nil)).Elem()
}

func (i GetWebHostOfferProductArgs) ToGetWebHostOfferProductOutput() GetWebHostOfferProductOutput {
	return i.ToGetWebHostOfferProductOutputWithContext(context.Background())
}

func (i GetWebHostOfferProductArgs) ToGetWebHostOfferProductOutputWithContext(ctx context.Context) GetWebHostOfferProductOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebHostOfferProductOutput)
}

func (i GetWebHostOfferProductArgs) ToOutput(ctx context.Context) pulumix.Output[GetWebHostOfferProduct] {
	return pulumix.Output[GetWebHostOfferProduct]{
		OutputState: i.ToGetWebHostOfferProductOutputWithContext(ctx).OutputState,
	}
}

// GetWebHostOfferProductArrayInput is an input type that accepts GetWebHostOfferProductArray and GetWebHostOfferProductArrayOutput values.
// You can construct a concrete instance of `GetWebHostOfferProductArrayInput` via:
//
//	GetWebHostOfferProductArray{ GetWebHostOfferProductArgs{...} }
type GetWebHostOfferProductArrayInput interface {
	pulumi.Input

	ToGetWebHostOfferProductArrayOutput() GetWebHostOfferProductArrayOutput
	ToGetWebHostOfferProductArrayOutputWithContext(context.Context) GetWebHostOfferProductArrayOutput
}

type GetWebHostOfferProductArray []GetWebHostOfferProductInput

func (GetWebHostOfferProductArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebHostOfferProduct)(nil)).Elem()
}

func (i GetWebHostOfferProductArray) ToGetWebHostOfferProductArrayOutput() GetWebHostOfferProductArrayOutput {
	return i.ToGetWebHostOfferProductArrayOutputWithContext(context.Background())
}

func (i GetWebHostOfferProductArray) ToGetWebHostOfferProductArrayOutputWithContext(ctx context.Context) GetWebHostOfferProductArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebHostOfferProductArrayOutput)
}

func (i GetWebHostOfferProductArray) ToOutput(ctx context.Context) pulumix.Output[[]GetWebHostOfferProduct] {
	return pulumix.Output[[]GetWebHostOfferProduct]{
		OutputState: i.ToGetWebHostOfferProductArrayOutputWithContext(ctx).OutputState,
	}
}

type GetWebHostOfferProductOutput struct{ *pulumi.OutputState }

func (GetWebHostOfferProductOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebHostOfferProduct)(nil)).Elem()
}

func (o GetWebHostOfferProductOutput) ToGetWebHostOfferProductOutput() GetWebHostOfferProductOutput {
	return o
}

func (o GetWebHostOfferProductOutput) ToGetWebHostOfferProductOutputWithContext(ctx context.Context) GetWebHostOfferProductOutput {
	return o
}

func (o GetWebHostOfferProductOutput) ToOutput(ctx context.Context) pulumix.Output[GetWebHostOfferProduct] {
	return pulumix.Output[GetWebHostOfferProduct]{
		OutputState: o.OutputState,
	}
}

// The quota of databases.
func (o GetWebHostOfferProductOutput) DatabasesQuota() pulumi.IntOutput {
	return o.ApplyT(func(v GetWebHostOfferProduct) int { return v.DatabasesQuota }).(pulumi.IntOutput)
}

// The quota of email accounts.
func (o GetWebHostOfferProductOutput) EmailAccountsQuota() pulumi.IntOutput {
	return o.ApplyT(func(v GetWebHostOfferProduct) int { return v.EmailAccountsQuota }).(pulumi.IntOutput)
}

// The quota of email storage.
func (o GetWebHostOfferProductOutput) EmailStorageQuota() pulumi.IntOutput {
	return o.ApplyT(func(v GetWebHostOfferProduct) int { return v.EmailStorageQuota }).(pulumi.IntOutput)
}

// The quota of hosting storage.
func (o GetWebHostOfferProductOutput) HostingStorageQuota() pulumi.IntOutput {
	return o.ApplyT(func(v GetWebHostOfferProduct) int { return v.HostingStorageQuota }).(pulumi.IntOutput)
}

// The offer name. Only one of `name` and `offerId` should be specified.
func (o GetWebHostOfferProductOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebHostOfferProduct) string { return v.Name }).(pulumi.StringOutput)
}

// The product option.
func (o GetWebHostOfferProductOutput) Option() pulumi.BoolOutput {
	return o.ApplyT(func(v GetWebHostOfferProduct) bool { return v.Option }).(pulumi.BoolOutput)
}

// The capacity of the memory in GB.
func (o GetWebHostOfferProductOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v GetWebHostOfferProduct) int { return v.Ram }).(pulumi.IntOutput)
}

// If support is included.
func (o GetWebHostOfferProductOutput) SupportIncluded() pulumi.BoolOutput {
	return o.ApplyT(func(v GetWebHostOfferProduct) bool { return v.SupportIncluded }).(pulumi.BoolOutput)
}

// The number of cores.
func (o GetWebHostOfferProductOutput) VCpu() pulumi.IntOutput {
	return o.ApplyT(func(v GetWebHostOfferProduct) int { return v.VCpu }).(pulumi.IntOutput)
}

type GetWebHostOfferProductArrayOutput struct{ *pulumi.OutputState }

func (GetWebHostOfferProductArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebHostOfferProduct)(nil)).Elem()
}

func (o GetWebHostOfferProductArrayOutput) ToGetWebHostOfferProductArrayOutput() GetWebHostOfferProductArrayOutput {
	return o
}

func (o GetWebHostOfferProductArrayOutput) ToGetWebHostOfferProductArrayOutputWithContext(ctx context.Context) GetWebHostOfferProductArrayOutput {
	return o
}

func (o GetWebHostOfferProductArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetWebHostOfferProduct] {
	return pulumix.Output[[]GetWebHostOfferProduct]{
		OutputState: o.OutputState,
	}
}

func (o GetWebHostOfferProductArrayOutput) Index(i pulumi.IntInput) GetWebHostOfferProductOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWebHostOfferProduct {
		return vs[0].([]GetWebHostOfferProduct)[vs[1].(int)]
	}).(GetWebHostOfferProductOutput)
}

type GetWebhostingCpanelUrl struct {
	Dashboard string `pulumi:"dashboard"`
	Webmail   string `pulumi:"webmail"`
}

// GetWebhostingCpanelUrlInput is an input type that accepts GetWebhostingCpanelUrlArgs and GetWebhostingCpanelUrlOutput values.
// You can construct a concrete instance of `GetWebhostingCpanelUrlInput` via:
//
//	GetWebhostingCpanelUrlArgs{...}
type GetWebhostingCpanelUrlInput interface {
	pulumi.Input

	ToGetWebhostingCpanelUrlOutput() GetWebhostingCpanelUrlOutput
	ToGetWebhostingCpanelUrlOutputWithContext(context.Context) GetWebhostingCpanelUrlOutput
}

type GetWebhostingCpanelUrlArgs struct {
	Dashboard pulumi.StringInput `pulumi:"dashboard"`
	Webmail   pulumi.StringInput `pulumi:"webmail"`
}

func (GetWebhostingCpanelUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebhostingCpanelUrl)(nil)).Elem()
}

func (i GetWebhostingCpanelUrlArgs) ToGetWebhostingCpanelUrlOutput() GetWebhostingCpanelUrlOutput {
	return i.ToGetWebhostingCpanelUrlOutputWithContext(context.Background())
}

func (i GetWebhostingCpanelUrlArgs) ToGetWebhostingCpanelUrlOutputWithContext(ctx context.Context) GetWebhostingCpanelUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebhostingCpanelUrlOutput)
}

func (i GetWebhostingCpanelUrlArgs) ToOutput(ctx context.Context) pulumix.Output[GetWebhostingCpanelUrl] {
	return pulumix.Output[GetWebhostingCpanelUrl]{
		OutputState: i.ToGetWebhostingCpanelUrlOutputWithContext(ctx).OutputState,
	}
}

// GetWebhostingCpanelUrlArrayInput is an input type that accepts GetWebhostingCpanelUrlArray and GetWebhostingCpanelUrlArrayOutput values.
// You can construct a concrete instance of `GetWebhostingCpanelUrlArrayInput` via:
//
//	GetWebhostingCpanelUrlArray{ GetWebhostingCpanelUrlArgs{...} }
type GetWebhostingCpanelUrlArrayInput interface {
	pulumi.Input

	ToGetWebhostingCpanelUrlArrayOutput() GetWebhostingCpanelUrlArrayOutput
	ToGetWebhostingCpanelUrlArrayOutputWithContext(context.Context) GetWebhostingCpanelUrlArrayOutput
}

type GetWebhostingCpanelUrlArray []GetWebhostingCpanelUrlInput

func (GetWebhostingCpanelUrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebhostingCpanelUrl)(nil)).Elem()
}

func (i GetWebhostingCpanelUrlArray) ToGetWebhostingCpanelUrlArrayOutput() GetWebhostingCpanelUrlArrayOutput {
	return i.ToGetWebhostingCpanelUrlArrayOutputWithContext(context.Background())
}

func (i GetWebhostingCpanelUrlArray) ToGetWebhostingCpanelUrlArrayOutputWithContext(ctx context.Context) GetWebhostingCpanelUrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebhostingCpanelUrlArrayOutput)
}

func (i GetWebhostingCpanelUrlArray) ToOutput(ctx context.Context) pulumix.Output[[]GetWebhostingCpanelUrl] {
	return pulumix.Output[[]GetWebhostingCpanelUrl]{
		OutputState: i.ToGetWebhostingCpanelUrlArrayOutputWithContext(ctx).OutputState,
	}
}

type GetWebhostingCpanelUrlOutput struct{ *pulumi.OutputState }

func (GetWebhostingCpanelUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebhostingCpanelUrl)(nil)).Elem()
}

func (o GetWebhostingCpanelUrlOutput) ToGetWebhostingCpanelUrlOutput() GetWebhostingCpanelUrlOutput {
	return o
}

func (o GetWebhostingCpanelUrlOutput) ToGetWebhostingCpanelUrlOutputWithContext(ctx context.Context) GetWebhostingCpanelUrlOutput {
	return o
}

func (o GetWebhostingCpanelUrlOutput) ToOutput(ctx context.Context) pulumix.Output[GetWebhostingCpanelUrl] {
	return pulumix.Output[GetWebhostingCpanelUrl]{
		OutputState: o.OutputState,
	}
}

func (o GetWebhostingCpanelUrlOutput) Dashboard() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhostingCpanelUrl) string { return v.Dashboard }).(pulumi.StringOutput)
}

func (o GetWebhostingCpanelUrlOutput) Webmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhostingCpanelUrl) string { return v.Webmail }).(pulumi.StringOutput)
}

type GetWebhostingCpanelUrlArrayOutput struct{ *pulumi.OutputState }

func (GetWebhostingCpanelUrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebhostingCpanelUrl)(nil)).Elem()
}

func (o GetWebhostingCpanelUrlArrayOutput) ToGetWebhostingCpanelUrlArrayOutput() GetWebhostingCpanelUrlArrayOutput {
	return o
}

func (o GetWebhostingCpanelUrlArrayOutput) ToGetWebhostingCpanelUrlArrayOutputWithContext(ctx context.Context) GetWebhostingCpanelUrlArrayOutput {
	return o
}

func (o GetWebhostingCpanelUrlArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetWebhostingCpanelUrl] {
	return pulumix.Output[[]GetWebhostingCpanelUrl]{
		OutputState: o.OutputState,
	}
}

func (o GetWebhostingCpanelUrlArrayOutput) Index(i pulumi.IntInput) GetWebhostingCpanelUrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWebhostingCpanelUrl {
		return vs[0].([]GetWebhostingCpanelUrl)[vs[1].(int)]
	}).(GetWebhostingCpanelUrlOutput)
}

type GetWebhostingOption struct {
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

// GetWebhostingOptionInput is an input type that accepts GetWebhostingOptionArgs and GetWebhostingOptionOutput values.
// You can construct a concrete instance of `GetWebhostingOptionInput` via:
//
//	GetWebhostingOptionArgs{...}
type GetWebhostingOptionInput interface {
	pulumi.Input

	ToGetWebhostingOptionOutput() GetWebhostingOptionOutput
	ToGetWebhostingOptionOutputWithContext(context.Context) GetWebhostingOptionOutput
}

type GetWebhostingOptionArgs struct {
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetWebhostingOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebhostingOption)(nil)).Elem()
}

func (i GetWebhostingOptionArgs) ToGetWebhostingOptionOutput() GetWebhostingOptionOutput {
	return i.ToGetWebhostingOptionOutputWithContext(context.Background())
}

func (i GetWebhostingOptionArgs) ToGetWebhostingOptionOutputWithContext(ctx context.Context) GetWebhostingOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebhostingOptionOutput)
}

func (i GetWebhostingOptionArgs) ToOutput(ctx context.Context) pulumix.Output[GetWebhostingOption] {
	return pulumix.Output[GetWebhostingOption]{
		OutputState: i.ToGetWebhostingOptionOutputWithContext(ctx).OutputState,
	}
}

// GetWebhostingOptionArrayInput is an input type that accepts GetWebhostingOptionArray and GetWebhostingOptionArrayOutput values.
// You can construct a concrete instance of `GetWebhostingOptionArrayInput` via:
//
//	GetWebhostingOptionArray{ GetWebhostingOptionArgs{...} }
type GetWebhostingOptionArrayInput interface {
	pulumi.Input

	ToGetWebhostingOptionArrayOutput() GetWebhostingOptionArrayOutput
	ToGetWebhostingOptionArrayOutputWithContext(context.Context) GetWebhostingOptionArrayOutput
}

type GetWebhostingOptionArray []GetWebhostingOptionInput

func (GetWebhostingOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebhostingOption)(nil)).Elem()
}

func (i GetWebhostingOptionArray) ToGetWebhostingOptionArrayOutput() GetWebhostingOptionArrayOutput {
	return i.ToGetWebhostingOptionArrayOutputWithContext(context.Background())
}

func (i GetWebhostingOptionArray) ToGetWebhostingOptionArrayOutputWithContext(ctx context.Context) GetWebhostingOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebhostingOptionArrayOutput)
}

func (i GetWebhostingOptionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetWebhostingOption] {
	return pulumix.Output[[]GetWebhostingOption]{
		OutputState: i.ToGetWebhostingOptionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetWebhostingOptionOutput struct{ *pulumi.OutputState }

func (GetWebhostingOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebhostingOption)(nil)).Elem()
}

func (o GetWebhostingOptionOutput) ToGetWebhostingOptionOutput() GetWebhostingOptionOutput {
	return o
}

func (o GetWebhostingOptionOutput) ToGetWebhostingOptionOutputWithContext(ctx context.Context) GetWebhostingOptionOutput {
	return o
}

func (o GetWebhostingOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetWebhostingOption] {
	return pulumix.Output[GetWebhostingOption]{
		OutputState: o.OutputState,
	}
}

func (o GetWebhostingOptionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhostingOption) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetWebhostingOptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhostingOption) string { return v.Name }).(pulumi.StringOutput)
}

type GetWebhostingOptionArrayOutput struct{ *pulumi.OutputState }

func (GetWebhostingOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebhostingOption)(nil)).Elem()
}

func (o GetWebhostingOptionArrayOutput) ToGetWebhostingOptionArrayOutput() GetWebhostingOptionArrayOutput {
	return o
}

func (o GetWebhostingOptionArrayOutput) ToGetWebhostingOptionArrayOutputWithContext(ctx context.Context) GetWebhostingOptionArrayOutput {
	return o
}

func (o GetWebhostingOptionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetWebhostingOption] {
	return pulumix.Output[[]GetWebhostingOption]{
		OutputState: o.OutputState,
	}
}

func (o GetWebhostingOptionArrayOutput) Index(i pulumi.IntInput) GetWebhostingOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWebhostingOption {
		return vs[0].([]GetWebhostingOption)[vs[1].(int)]
	}).(GetWebhostingOptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BaremetalServerIpInput)(nil)).Elem(), BaremetalServerIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaremetalServerIpArrayInput)(nil)).Elem(), BaremetalServerIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaremetalServerIpv4Input)(nil)).Elem(), BaremetalServerIpv4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaremetalServerIpv4ArrayInput)(nil)).Elem(), BaremetalServerIpv4Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaremetalServerIpv6Input)(nil)).Elem(), BaremetalServerIpv6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaremetalServerIpv6ArrayInput)(nil)).Elem(), BaremetalServerIpv6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaremetalServerOptionInput)(nil)).Elem(), BaremetalServerOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaremetalServerOptionArrayInput)(nil)).Elem(), BaremetalServerOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaremetalServerPrivateNetworkInput)(nil)).Elem(), BaremetalServerPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaremetalServerPrivateNetworkArrayInput)(nil)).Elem(), BaremetalServerPrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitEndpointInput)(nil)).Elem(), CockpitEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitEndpointArrayInput)(nil)).Elem(), CockpitEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitTokenScopesInput)(nil)).Elem(), CockpitTokenScopesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitTokenScopesPtrInput)(nil)).Elem(), CockpitTokenScopesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerTriggerSqsInput)(nil)).Elem(), ContainerTriggerSqsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerTriggerSqsPtrInput)(nil)).Elem(), ContainerTriggerSqsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentDBReadReplicaDirectAccessInput)(nil)).Elem(), DocumentDBReadReplicaDirectAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentDBReadReplicaDirectAccessPtrInput)(nil)).Elem(), DocumentDBReadReplicaDirectAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentDBReadReplicaPrivateNetworkInput)(nil)).Elem(), DocumentDBReadReplicaPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentDBReadReplicaPrivateNetworkPtrInput)(nil)).Elem(), DocumentDBReadReplicaPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordGeoIpInput)(nil)).Elem(), DomainRecordGeoIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordGeoIpPtrInput)(nil)).Elem(), DomainRecordGeoIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordGeoIpMatchInput)(nil)).Elem(), DomainRecordGeoIpMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordGeoIpMatchArrayInput)(nil)).Elem(), DomainRecordGeoIpMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordHttpServiceInput)(nil)).Elem(), DomainRecordHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordHttpServicePtrInput)(nil)).Elem(), DomainRecordHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordViewInput)(nil)).Elem(), DomainRecordViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordViewArrayInput)(nil)).Elem(), DomainRecordViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordWeightedInput)(nil)).Elem(), DomainRecordWeightedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordWeightedArrayInput)(nil)).Elem(), DomainRecordWeightedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTriggerSqsInput)(nil)).Elem(), FunctionTriggerSqsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTriggerSqsPtrInput)(nil)).Elem(), FunctionTriggerSqsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyRuleInput)(nil)).Elem(), IamPolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyRuleArrayInput)(nil)).Elem(), IamPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceImageAdditionalVolumeInput)(nil)).Elem(), InstanceImageAdditionalVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceImageAdditionalVolumeArrayInput)(nil)).Elem(), InstanceImageAdditionalVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSecurityGroupInboundRuleInput)(nil)).Elem(), InstanceSecurityGroupInboundRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSecurityGroupInboundRuleArrayInput)(nil)).Elem(), InstanceSecurityGroupInboundRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSecurityGroupOutboundRuleInput)(nil)).Elem(), InstanceSecurityGroupOutboundRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSecurityGroupOutboundRuleArrayInput)(nil)).Elem(), InstanceSecurityGroupOutboundRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSecurityGroupRulesInboundRuleInput)(nil)).Elem(), InstanceSecurityGroupRulesInboundRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSecurityGroupRulesInboundRuleArrayInput)(nil)).Elem(), InstanceSecurityGroupRulesInboundRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSecurityGroupRulesOutboundRuleInput)(nil)).Elem(), InstanceSecurityGroupRulesOutboundRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSecurityGroupRulesOutboundRuleArrayInput)(nil)).Elem(), InstanceSecurityGroupRulesOutboundRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceServerPrivateNetworkInput)(nil)).Elem(), InstanceServerPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceServerPrivateNetworkArrayInput)(nil)).Elem(), InstanceServerPrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceServerPublicIpInput)(nil)).Elem(), InstanceServerPublicIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceServerPublicIpArrayInput)(nil)).Elem(), InstanceServerPublicIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceServerRootVolumeInput)(nil)).Elem(), InstanceServerRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceServerRootVolumePtrInput)(nil)).Elem(), InstanceServerRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSnapshotImportInput)(nil)).Elem(), InstanceSnapshotImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSnapshotImportPtrInput)(nil)).Elem(), InstanceSnapshotImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotDeviceCertificateInput)(nil)).Elem(), IotDeviceCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotDeviceCertificatePtrInput)(nil)).Elem(), IotDeviceCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotDeviceMessageFiltersInput)(nil)).Elem(), IotDeviceMessageFiltersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotDeviceMessageFiltersPtrInput)(nil)).Elem(), IotDeviceMessageFiltersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotDeviceMessageFiltersPublishInput)(nil)).Elem(), IotDeviceMessageFiltersPublishArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotDeviceMessageFiltersPublishPtrInput)(nil)).Elem(), IotDeviceMessageFiltersPublishArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotDeviceMessageFiltersSubscribeInput)(nil)).Elem(), IotDeviceMessageFiltersSubscribeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotDeviceMessageFiltersSubscribePtrInput)(nil)).Elem(), IotDeviceMessageFiltersSubscribeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotRouteDatabaseInput)(nil)).Elem(), IotRouteDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotRouteDatabasePtrInput)(nil)).Elem(), IotRouteDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotRouteRestInput)(nil)).Elem(), IotRouteRestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotRouteRestPtrInput)(nil)).Elem(), IotRouteRestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotRouteS3Input)(nil)).Elem(), IotRouteS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotRouteS3PtrInput)(nil)).Elem(), IotRouteS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sClusterAutoUpgradeInput)(nil)).Elem(), K8sClusterAutoUpgradeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sClusterAutoUpgradePtrInput)(nil)).Elem(), K8sClusterAutoUpgradeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sClusterAutoscalerConfigInput)(nil)).Elem(), K8sClusterAutoscalerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sClusterAutoscalerConfigPtrInput)(nil)).Elem(), K8sClusterAutoscalerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sClusterKubeconfigInput)(nil)).Elem(), K8sClusterKubeconfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sClusterKubeconfigArrayInput)(nil)).Elem(), K8sClusterKubeconfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sClusterOpenIdConnectConfigInput)(nil)).Elem(), K8sClusterOpenIdConnectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sClusterOpenIdConnectConfigPtrInput)(nil)).Elem(), K8sClusterOpenIdConnectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sPoolNodeInput)(nil)).Elem(), K8sPoolNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sPoolNodeArrayInput)(nil)).Elem(), K8sPoolNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sPoolUpgradePolicyInput)(nil)).Elem(), K8sPoolUpgradePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sPoolUpgradePolicyPtrInput)(nil)).Elem(), K8sPoolUpgradePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbAclActionInput)(nil)).Elem(), LbAclActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbAclActionPtrInput)(nil)).Elem(), LbAclActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbAclActionRedirectInput)(nil)).Elem(), LbAclActionRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbAclActionRedirectArrayInput)(nil)).Elem(), LbAclActionRedirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbAclMatchInput)(nil)).Elem(), LbAclMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbAclMatchPtrInput)(nil)).Elem(), LbAclMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbBackendHealthCheckHttpInput)(nil)).Elem(), LbBackendHealthCheckHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbBackendHealthCheckHttpPtrInput)(nil)).Elem(), LbBackendHealthCheckHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbBackendHealthCheckHttpsInput)(nil)).Elem(), LbBackendHealthCheckHttpsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbBackendHealthCheckHttpsPtrInput)(nil)).Elem(), LbBackendHealthCheckHttpsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbBackendHealthCheckTcpInput)(nil)).Elem(), LbBackendHealthCheckTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbBackendHealthCheckTcpPtrInput)(nil)).Elem(), LbBackendHealthCheckTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbCertificateCustomCertificateInput)(nil)).Elem(), LbCertificateCustomCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbCertificateCustomCertificatePtrInput)(nil)).Elem(), LbCertificateCustomCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbCertificateLetsencryptInput)(nil)).Elem(), LbCertificateLetsencryptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbCertificateLetsencryptPtrInput)(nil)).Elem(), LbCertificateLetsencryptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbFrontendAclInput)(nil)).Elem(), LbFrontendAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbFrontendAclArrayInput)(nil)).Elem(), LbFrontendAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbFrontendAclActionInput)(nil)).Elem(), LbFrontendAclActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbFrontendAclActionRedirectInput)(nil)).Elem(), LbFrontendAclActionRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbFrontendAclActionRedirectArrayInput)(nil)).Elem(), LbFrontendAclActionRedirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbFrontendAclMatchInput)(nil)).Elem(), LbFrontendAclMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbPrivateNetworkInput)(nil)).Elem(), LbPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbPrivateNetworkArrayInput)(nil)).Elem(), LbPrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MnqCredentialNatsCredentialsInput)(nil)).Elem(), MnqCredentialNatsCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MnqCredentialNatsCredentialsPtrInput)(nil)).Elem(), MnqCredentialNatsCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MnqCredentialSqsSnsCredentialsInput)(nil)).Elem(), MnqCredentialSqsSnsCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MnqCredentialSqsSnsCredentialsPtrInput)(nil)).Elem(), MnqCredentialSqsSnsCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MnqCredentialSqsSnsCredentialsPermissionsInput)(nil)).Elem(), MnqCredentialSqsSnsCredentialsPermissionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MnqCredentialSqsSnsCredentialsPermissionsPtrInput)(nil)).Elem(), MnqCredentialSqsSnsCredentialsPermissionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MnqQueueNatsInput)(nil)).Elem(), MnqQueueNatsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MnqQueueNatsPtrInput)(nil)).Elem(), MnqQueueNatsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MnqQueueSqsInput)(nil)).Elem(), MnqQueueSqsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MnqQueueSqsPtrInput)(nil)).Elem(), MnqQueueSqsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketAclAccessControlPolicyInput)(nil)).Elem(), ObjectBucketAclAccessControlPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketAclAccessControlPolicyPtrInput)(nil)).Elem(), ObjectBucketAclAccessControlPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketAclAccessControlPolicyGrantInput)(nil)).Elem(), ObjectBucketAclAccessControlPolicyGrantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketAclAccessControlPolicyGrantArrayInput)(nil)).Elem(), ObjectBucketAclAccessControlPolicyGrantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketAclAccessControlPolicyGrantGranteeInput)(nil)).Elem(), ObjectBucketAclAccessControlPolicyGrantGranteeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketAclAccessControlPolicyGrantGranteePtrInput)(nil)).Elem(), ObjectBucketAclAccessControlPolicyGrantGranteeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketAclAccessControlPolicyOwnerInput)(nil)).Elem(), ObjectBucketAclAccessControlPolicyOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketAclAccessControlPolicyOwnerPtrInput)(nil)).Elem(), ObjectBucketAclAccessControlPolicyOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketCorsRuleInput)(nil)).Elem(), ObjectBucketCorsRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketCorsRuleArrayInput)(nil)).Elem(), ObjectBucketCorsRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketLifecycleRuleInput)(nil)).Elem(), ObjectBucketLifecycleRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketLifecycleRuleArrayInput)(nil)).Elem(), ObjectBucketLifecycleRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketLifecycleRuleExpirationInput)(nil)).Elem(), ObjectBucketLifecycleRuleExpirationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketLifecycleRuleExpirationPtrInput)(nil)).Elem(), ObjectBucketLifecycleRuleExpirationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketLifecycleRuleTransitionInput)(nil)).Elem(), ObjectBucketLifecycleRuleTransitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketLifecycleRuleTransitionArrayInput)(nil)).Elem(), ObjectBucketLifecycleRuleTransitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketLockConfigurationRuleInput)(nil)).Elem(), ObjectBucketLockConfigurationRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketLockConfigurationRulePtrInput)(nil)).Elem(), ObjectBucketLockConfigurationRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketLockConfigurationRuleDefaultRetentionInput)(nil)).Elem(), ObjectBucketLockConfigurationRuleDefaultRetentionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketLockConfigurationRuleDefaultRetentionPtrInput)(nil)).Elem(), ObjectBucketLockConfigurationRuleDefaultRetentionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketVersioningInput)(nil)).Elem(), ObjectBucketVersioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketVersioningPtrInput)(nil)).Elem(), ObjectBucketVersioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketWebsiteConfigurationErrorDocumentInput)(nil)).Elem(), ObjectBucketWebsiteConfigurationErrorDocumentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketWebsiteConfigurationErrorDocumentPtrInput)(nil)).Elem(), ObjectBucketWebsiteConfigurationErrorDocumentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketWebsiteConfigurationIndexDocumentInput)(nil)).Elem(), ObjectBucketWebsiteConfigurationIndexDocumentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectBucketWebsiteConfigurationIndexDocumentPtrInput)(nil)).Elem(), ObjectBucketWebsiteConfigurationIndexDocumentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdbAclAclRuleInput)(nil)).Elem(), RdbAclAclRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdbAclAclRuleArrayInput)(nil)).Elem(), RdbAclAclRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdbInstanceLoadBalancerInput)(nil)).Elem(), RdbInstanceLoadBalancerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdbInstanceLoadBalancerArrayInput)(nil)).Elem(), RdbInstanceLoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdbInstancePrivateNetworkInput)(nil)).Elem(), RdbInstancePrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdbInstancePrivateNetworkPtrInput)(nil)).Elem(), RdbInstancePrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdbInstanceReadReplicaInput)(nil)).Elem(), RdbInstanceReadReplicaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdbInstanceReadReplicaArrayInput)(nil)).Elem(), RdbInstanceReadReplicaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdbReadReplicaDirectAccessInput)(nil)).Elem(), RdbReadReplicaDirectAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdbReadReplicaDirectAccessPtrInput)(nil)).Elem(), RdbReadReplicaDirectAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdbReadReplicaPrivateNetworkInput)(nil)).Elem(), RdbReadReplicaPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdbReadReplicaPrivateNetworkPtrInput)(nil)).Elem(), RdbReadReplicaPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterAclInput)(nil)).Elem(), RedisClusterAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterAclArrayInput)(nil)).Elem(), RedisClusterAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterPrivateNetworkInput)(nil)).Elem(), RedisClusterPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterPrivateNetworkArrayInput)(nil)).Elem(), RedisClusterPrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterPublicNetworkInput)(nil)).Elem(), RedisClusterPublicNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterPublicNetworkPtrInput)(nil)).Elem(), RedisClusterPublicNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcGatewayNetworkIpamConfigInput)(nil)).Elem(), VpcGatewayNetworkIpamConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcGatewayNetworkIpamConfigArrayInput)(nil)).Elem(), VpcGatewayNetworkIpamConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPrivateNetworkIpv4SubnetInput)(nil)).Elem(), VpcPrivateNetworkIpv4SubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPrivateNetworkIpv4SubnetPtrInput)(nil)).Elem(), VpcPrivateNetworkIpv4SubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPrivateNetworkIpv6SubnetInput)(nil)).Elem(), VpcPrivateNetworkIpv6SubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPrivateNetworkIpv6SubnetArrayInput)(nil)).Elem(), VpcPrivateNetworkIpv6SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebHostingCpanelUrlInput)(nil)).Elem(), WebHostingCpanelUrlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebHostingCpanelUrlArrayInput)(nil)).Elem(), WebHostingCpanelUrlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebHostingOptionInput)(nil)).Elem(), WebHostingOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebHostingOptionArrayInput)(nil)).Elem(), WebHostingOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBaremetalOfferCpusInput)(nil)).Elem(), GetBaremetalOfferCpusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBaremetalOfferCpusArrayInput)(nil)).Elem(), GetBaremetalOfferCpusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBaremetalOfferDiskInput)(nil)).Elem(), GetBaremetalOfferDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBaremetalOfferDiskArrayInput)(nil)).Elem(), GetBaremetalOfferDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBaremetalOfferMemoryInput)(nil)).Elem(), GetBaremetalOfferMemoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBaremetalOfferMemoryArrayInput)(nil)).Elem(), GetBaremetalOfferMemoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBaremetalServerIpInput)(nil)).Elem(), GetBaremetalServerIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBaremetalServerIpArrayInput)(nil)).Elem(), GetBaremetalServerIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBaremetalServerIpv4Input)(nil)).Elem(), GetBaremetalServerIpv4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBaremetalServerIpv4ArrayInput)(nil)).Elem(), GetBaremetalServerIpv4Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBaremetalServerIpv6Input)(nil)).Elem(), GetBaremetalServerIpv6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBaremetalServerIpv6ArrayInput)(nil)).Elem(), GetBaremetalServerIpv6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBaremetalServerOptionInput)(nil)).Elem(), GetBaremetalServerOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBaremetalServerOptionArrayInput)(nil)).Elem(), GetBaremetalServerOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBaremetalServerPrivateNetworkInput)(nil)).Elem(), GetBaremetalServerPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBaremetalServerPrivateNetworkArrayInput)(nil)).Elem(), GetBaremetalServerPrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCockpitEndpointInput)(nil)).Elem(), GetCockpitEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCockpitEndpointArrayInput)(nil)).Elem(), GetCockpitEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainRecordGeoIpInput)(nil)).Elem(), GetDomainRecordGeoIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainRecordGeoIpArrayInput)(nil)).Elem(), GetDomainRecordGeoIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainRecordGeoIpMatchInput)(nil)).Elem(), GetDomainRecordGeoIpMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainRecordGeoIpMatchArrayInput)(nil)).Elem(), GetDomainRecordGeoIpMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainRecordHttpServiceInput)(nil)).Elem(), GetDomainRecordHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainRecordHttpServiceArrayInput)(nil)).Elem(), GetDomainRecordHttpServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainRecordViewInput)(nil)).Elem(), GetDomainRecordViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainRecordViewArrayInput)(nil)).Elem(), GetDomainRecordViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainRecordWeightedInput)(nil)).Elem(), GetDomainRecordWeightedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainRecordWeightedArrayInput)(nil)).Elem(), GetDomainRecordWeightedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlexibleIpsIpInput)(nil)).Elem(), GetFlexibleIpsIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlexibleIpsIpArrayInput)(nil)).Elem(), GetFlexibleIpsIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlexibleIpsIpMacAddressInput)(nil)).Elem(), GetFlexibleIpsIpMacAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlexibleIpsIpMacAddressArrayInput)(nil)).Elem(), GetFlexibleIpsIpMacAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceSecurityGroupInboundRuleInput)(nil)).Elem(), GetInstanceSecurityGroupInboundRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceSecurityGroupInboundRuleArrayInput)(nil)).Elem(), GetInstanceSecurityGroupInboundRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceSecurityGroupOutboundRuleInput)(nil)).Elem(), GetInstanceSecurityGroupOutboundRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceSecurityGroupOutboundRuleArrayInput)(nil)).Elem(), GetInstanceSecurityGroupOutboundRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceServerPrivateNetworkInput)(nil)).Elem(), GetInstanceServerPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceServerPrivateNetworkArrayInput)(nil)).Elem(), GetInstanceServerPrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceServerPublicIpInput)(nil)).Elem(), GetInstanceServerPublicIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceServerPublicIpArrayInput)(nil)).Elem(), GetInstanceServerPublicIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceServerRootVolumeInput)(nil)).Elem(), GetInstanceServerRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceServerRootVolumeArrayInput)(nil)).Elem(), GetInstanceServerRootVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceServersServerInput)(nil)).Elem(), GetInstanceServersServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceServersServerArrayInput)(nil)).Elem(), GetInstanceServersServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceServersServerPublicIpInput)(nil)).Elem(), GetInstanceServersServerPublicIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceServersServerPublicIpArrayInput)(nil)).Elem(), GetInstanceServersServerPublicIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceSnapshotImportInput)(nil)).Elem(), GetInstanceSnapshotImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceSnapshotImportArrayInput)(nil)).Elem(), GetInstanceSnapshotImportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIotDeviceCertificateInput)(nil)).Elem(), GetIotDeviceCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIotDeviceCertificateArrayInput)(nil)).Elem(), GetIotDeviceCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIotDeviceMessageFilterInput)(nil)).Elem(), GetIotDeviceMessageFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIotDeviceMessageFilterArrayInput)(nil)).Elem(), GetIotDeviceMessageFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIotDeviceMessageFilterPublishInput)(nil)).Elem(), GetIotDeviceMessageFilterPublishArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIotDeviceMessageFilterPublishArrayInput)(nil)).Elem(), GetIotDeviceMessageFilterPublishArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIotDeviceMessageFilterSubscribeInput)(nil)).Elem(), GetIotDeviceMessageFilterSubscribeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIotDeviceMessageFilterSubscribeArrayInput)(nil)).Elem(), GetIotDeviceMessageFilterSubscribeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpamIpResourceInput)(nil)).Elem(), GetIpamIpResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpamIpResourcePtrInput)(nil)).Elem(), GetIpamIpResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetK8sClusterAutoUpgradeInput)(nil)).Elem(), GetK8sClusterAutoUpgradeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetK8sClusterAutoUpgradeArrayInput)(nil)).Elem(), GetK8sClusterAutoUpgradeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetK8sClusterAutoscalerConfigInput)(nil)).Elem(), GetK8sClusterAutoscalerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetK8sClusterAutoscalerConfigArrayInput)(nil)).Elem(), GetK8sClusterAutoscalerConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetK8sClusterKubeconfigInput)(nil)).Elem(), GetK8sClusterKubeconfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetK8sClusterKubeconfigArrayInput)(nil)).Elem(), GetK8sClusterKubeconfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetK8sClusterOpenIdConnectConfigInput)(nil)).Elem(), GetK8sClusterOpenIdConnectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetK8sClusterOpenIdConnectConfigArrayInput)(nil)).Elem(), GetK8sClusterOpenIdConnectConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetK8sPoolNodeInput)(nil)).Elem(), GetK8sPoolNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetK8sPoolNodeArrayInput)(nil)).Elem(), GetK8sPoolNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetK8sPoolUpgradePolicyInput)(nil)).Elem(), GetK8sPoolUpgradePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetK8sPoolUpgradePolicyArrayInput)(nil)).Elem(), GetK8sPoolUpgradePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbAclsAclInput)(nil)).Elem(), GetLbAclsAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbAclsAclArrayInput)(nil)).Elem(), GetLbAclsAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbAclsAclActionInput)(nil)).Elem(), GetLbAclsAclActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbAclsAclActionArrayInput)(nil)).Elem(), GetLbAclsAclActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbAclsAclActionRedirectInput)(nil)).Elem(), GetLbAclsAclActionRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbAclsAclActionRedirectArrayInput)(nil)).Elem(), GetLbAclsAclActionRedirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbAclsAclMatchInput)(nil)).Elem(), GetLbAclsAclMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbAclsAclMatchArrayInput)(nil)).Elem(), GetLbAclsAclMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbBackendHealthCheckHttpInput)(nil)).Elem(), GetLbBackendHealthCheckHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbBackendHealthCheckHttpArrayInput)(nil)).Elem(), GetLbBackendHealthCheckHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbBackendHealthCheckTcpInput)(nil)).Elem(), GetLbBackendHealthCheckTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbBackendHealthCheckTcpArrayInput)(nil)).Elem(), GetLbBackendHealthCheckTcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbBackendsBackendInput)(nil)).Elem(), GetLbBackendsBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbBackendsBackendArrayInput)(nil)).Elem(), GetLbBackendsBackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbBackendsBackendHealthCheckHttpInput)(nil)).Elem(), GetLbBackendsBackendHealthCheckHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbBackendsBackendHealthCheckHttpArrayInput)(nil)).Elem(), GetLbBackendsBackendHealthCheckHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbBackendsBackendHealthCheckTcpInput)(nil)).Elem(), GetLbBackendsBackendHealthCheckTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbBackendsBackendHealthCheckTcpArrayInput)(nil)).Elem(), GetLbBackendsBackendHealthCheckTcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbCertificateCustomCertificateInput)(nil)).Elem(), GetLbCertificateCustomCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbCertificateCustomCertificateArrayInput)(nil)).Elem(), GetLbCertificateCustomCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbCertificateLetsencryptInput)(nil)).Elem(), GetLbCertificateLetsencryptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbCertificateLetsencryptArrayInput)(nil)).Elem(), GetLbCertificateLetsencryptArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbFrontendAclInput)(nil)).Elem(), GetLbFrontendAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbFrontendAclArrayInput)(nil)).Elem(), GetLbFrontendAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbFrontendAclActionInput)(nil)).Elem(), GetLbFrontendAclActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbFrontendAclActionArrayInput)(nil)).Elem(), GetLbFrontendAclActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbFrontendAclActionRedirectInput)(nil)).Elem(), GetLbFrontendAclActionRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbFrontendAclActionRedirectArrayInput)(nil)).Elem(), GetLbFrontendAclActionRedirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbFrontendAclMatchInput)(nil)).Elem(), GetLbFrontendAclMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbFrontendAclMatchArrayInput)(nil)).Elem(), GetLbFrontendAclMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbFrontendsFrontendInput)(nil)).Elem(), GetLbFrontendsFrontendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbFrontendsFrontendArrayInput)(nil)).Elem(), GetLbFrontendsFrontendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbIpsIpInput)(nil)).Elem(), GetLbIpsIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbIpsIpArrayInput)(nil)).Elem(), GetLbIpsIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbPrivateNetworkInput)(nil)).Elem(), GetLbPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbPrivateNetworkArrayInput)(nil)).Elem(), GetLbPrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbRoutesRouteInput)(nil)).Elem(), GetLbRoutesRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbRoutesRouteArrayInput)(nil)).Elem(), GetLbRoutesRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbsLbInput)(nil)).Elem(), GetLbsLbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbsLbArrayInput)(nil)).Elem(), GetLbsLbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbsLbInstanceInput)(nil)).Elem(), GetLbsLbInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbsLbInstanceArrayInput)(nil)).Elem(), GetLbsLbInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbsLbIpInput)(nil)).Elem(), GetLbsLbIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLbsLbIpArrayInput)(nil)).Elem(), GetLbsLbIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObjectBucketCorsRuleInput)(nil)).Elem(), GetObjectBucketCorsRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObjectBucketCorsRuleArrayInput)(nil)).Elem(), GetObjectBucketCorsRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObjectBucketLifecycleRuleInput)(nil)).Elem(), GetObjectBucketLifecycleRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObjectBucketLifecycleRuleArrayInput)(nil)).Elem(), GetObjectBucketLifecycleRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObjectBucketLifecycleRuleExpirationInput)(nil)).Elem(), GetObjectBucketLifecycleRuleExpirationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObjectBucketLifecycleRuleExpirationArrayInput)(nil)).Elem(), GetObjectBucketLifecycleRuleExpirationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObjectBucketLifecycleRuleTransitionInput)(nil)).Elem(), GetObjectBucketLifecycleRuleTransitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObjectBucketLifecycleRuleTransitionArrayInput)(nil)).Elem(), GetObjectBucketLifecycleRuleTransitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObjectBucketVersioningInput)(nil)).Elem(), GetObjectBucketVersioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObjectBucketVersioningArrayInput)(nil)).Elem(), GetObjectBucketVersioningArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdbAclAclRuleInput)(nil)).Elem(), GetRdbAclAclRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdbAclAclRuleArrayInput)(nil)).Elem(), GetRdbAclAclRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdbInstanceLoadBalancerInput)(nil)).Elem(), GetRdbInstanceLoadBalancerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdbInstanceLoadBalancerArrayInput)(nil)).Elem(), GetRdbInstanceLoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdbInstancePrivateNetworkInput)(nil)).Elem(), GetRdbInstancePrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdbInstancePrivateNetworkArrayInput)(nil)).Elem(), GetRdbInstancePrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdbInstanceReadReplicaInput)(nil)).Elem(), GetRdbInstanceReadReplicaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdbInstanceReadReplicaArrayInput)(nil)).Elem(), GetRdbInstanceReadReplicaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRedisClusterAclInput)(nil)).Elem(), GetRedisClusterAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRedisClusterAclArrayInput)(nil)).Elem(), GetRedisClusterAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRedisClusterPrivateNetworkInput)(nil)).Elem(), GetRedisClusterPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRedisClusterPrivateNetworkArrayInput)(nil)).Elem(), GetRedisClusterPrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRedisClusterPublicNetworkInput)(nil)).Elem(), GetRedisClusterPublicNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRedisClusterPublicNetworkArrayInput)(nil)).Elem(), GetRedisClusterPublicNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcGatewayNetworkIpamConfigInput)(nil)).Elem(), GetVpcGatewayNetworkIpamConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcGatewayNetworkIpamConfigArrayInput)(nil)).Elem(), GetVpcGatewayNetworkIpamConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcPrivateNetworkIpv4SubnetInput)(nil)).Elem(), GetVpcPrivateNetworkIpv4SubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcPrivateNetworkIpv4SubnetArrayInput)(nil)).Elem(), GetVpcPrivateNetworkIpv4SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcPrivateNetworkIpv6SubnetInput)(nil)).Elem(), GetVpcPrivateNetworkIpv6SubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcPrivateNetworkIpv6SubnetArrayInput)(nil)).Elem(), GetVpcPrivateNetworkIpv6SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcsVpcInput)(nil)).Elem(), GetVpcsVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcsVpcArrayInput)(nil)).Elem(), GetVpcsVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebHostOfferProductInput)(nil)).Elem(), GetWebHostOfferProductArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebHostOfferProductArrayInput)(nil)).Elem(), GetWebHostOfferProductArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebhostingCpanelUrlInput)(nil)).Elem(), GetWebhostingCpanelUrlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebhostingCpanelUrlArrayInput)(nil)).Elem(), GetWebhostingCpanelUrlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebhostingOptionInput)(nil)).Elem(), GetWebhostingOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebhostingOptionArrayInput)(nil)).Elem(), GetWebhostingOptionArray{})
	pulumi.RegisterOutputType(BaremetalServerIpOutput{})
	pulumi.RegisterOutputType(BaremetalServerIpArrayOutput{})
	pulumi.RegisterOutputType(BaremetalServerIpv4Output{})
	pulumi.RegisterOutputType(BaremetalServerIpv4ArrayOutput{})
	pulumi.RegisterOutputType(BaremetalServerIpv6Output{})
	pulumi.RegisterOutputType(BaremetalServerIpv6ArrayOutput{})
	pulumi.RegisterOutputType(BaremetalServerOptionOutput{})
	pulumi.RegisterOutputType(BaremetalServerOptionArrayOutput{})
	pulumi.RegisterOutputType(BaremetalServerPrivateNetworkOutput{})
	pulumi.RegisterOutputType(BaremetalServerPrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(CockpitEndpointOutput{})
	pulumi.RegisterOutputType(CockpitEndpointArrayOutput{})
	pulumi.RegisterOutputType(CockpitTokenScopesOutput{})
	pulumi.RegisterOutputType(CockpitTokenScopesPtrOutput{})
	pulumi.RegisterOutputType(ContainerTriggerSqsOutput{})
	pulumi.RegisterOutputType(ContainerTriggerSqsPtrOutput{})
	pulumi.RegisterOutputType(DocumentDBReadReplicaDirectAccessOutput{})
	pulumi.RegisterOutputType(DocumentDBReadReplicaDirectAccessPtrOutput{})
	pulumi.RegisterOutputType(DocumentDBReadReplicaPrivateNetworkOutput{})
	pulumi.RegisterOutputType(DocumentDBReadReplicaPrivateNetworkPtrOutput{})
	pulumi.RegisterOutputType(DomainRecordGeoIpOutput{})
	pulumi.RegisterOutputType(DomainRecordGeoIpPtrOutput{})
	pulumi.RegisterOutputType(DomainRecordGeoIpMatchOutput{})
	pulumi.RegisterOutputType(DomainRecordGeoIpMatchArrayOutput{})
	pulumi.RegisterOutputType(DomainRecordHttpServiceOutput{})
	pulumi.RegisterOutputType(DomainRecordHttpServicePtrOutput{})
	pulumi.RegisterOutputType(DomainRecordViewOutput{})
	pulumi.RegisterOutputType(DomainRecordViewArrayOutput{})
	pulumi.RegisterOutputType(DomainRecordWeightedOutput{})
	pulumi.RegisterOutputType(DomainRecordWeightedArrayOutput{})
	pulumi.RegisterOutputType(FunctionTriggerSqsOutput{})
	pulumi.RegisterOutputType(FunctionTriggerSqsPtrOutput{})
	pulumi.RegisterOutputType(IamPolicyRuleOutput{})
	pulumi.RegisterOutputType(IamPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(InstanceImageAdditionalVolumeOutput{})
	pulumi.RegisterOutputType(InstanceImageAdditionalVolumeArrayOutput{})
	pulumi.RegisterOutputType(InstanceSecurityGroupInboundRuleOutput{})
	pulumi.RegisterOutputType(InstanceSecurityGroupInboundRuleArrayOutput{})
	pulumi.RegisterOutputType(InstanceSecurityGroupOutboundRuleOutput{})
	pulumi.RegisterOutputType(InstanceSecurityGroupOutboundRuleArrayOutput{})
	pulumi.RegisterOutputType(InstanceSecurityGroupRulesInboundRuleOutput{})
	pulumi.RegisterOutputType(InstanceSecurityGroupRulesInboundRuleArrayOutput{})
	pulumi.RegisterOutputType(InstanceSecurityGroupRulesOutboundRuleOutput{})
	pulumi.RegisterOutputType(InstanceSecurityGroupRulesOutboundRuleArrayOutput{})
	pulumi.RegisterOutputType(InstanceServerPrivateNetworkOutput{})
	pulumi.RegisterOutputType(InstanceServerPrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(InstanceServerPublicIpOutput{})
	pulumi.RegisterOutputType(InstanceServerPublicIpArrayOutput{})
	pulumi.RegisterOutputType(InstanceServerRootVolumeOutput{})
	pulumi.RegisterOutputType(InstanceServerRootVolumePtrOutput{})
	pulumi.RegisterOutputType(InstanceSnapshotImportOutput{})
	pulumi.RegisterOutputType(InstanceSnapshotImportPtrOutput{})
	pulumi.RegisterOutputType(IotDeviceCertificateOutput{})
	pulumi.RegisterOutputType(IotDeviceCertificatePtrOutput{})
	pulumi.RegisterOutputType(IotDeviceMessageFiltersOutput{})
	pulumi.RegisterOutputType(IotDeviceMessageFiltersPtrOutput{})
	pulumi.RegisterOutputType(IotDeviceMessageFiltersPublishOutput{})
	pulumi.RegisterOutputType(IotDeviceMessageFiltersPublishPtrOutput{})
	pulumi.RegisterOutputType(IotDeviceMessageFiltersSubscribeOutput{})
	pulumi.RegisterOutputType(IotDeviceMessageFiltersSubscribePtrOutput{})
	pulumi.RegisterOutputType(IotRouteDatabaseOutput{})
	pulumi.RegisterOutputType(IotRouteDatabasePtrOutput{})
	pulumi.RegisterOutputType(IotRouteRestOutput{})
	pulumi.RegisterOutputType(IotRouteRestPtrOutput{})
	pulumi.RegisterOutputType(IotRouteS3Output{})
	pulumi.RegisterOutputType(IotRouteS3PtrOutput{})
	pulumi.RegisterOutputType(K8sClusterAutoUpgradeOutput{})
	pulumi.RegisterOutputType(K8sClusterAutoUpgradePtrOutput{})
	pulumi.RegisterOutputType(K8sClusterAutoscalerConfigOutput{})
	pulumi.RegisterOutputType(K8sClusterAutoscalerConfigPtrOutput{})
	pulumi.RegisterOutputType(K8sClusterKubeconfigOutput{})
	pulumi.RegisterOutputType(K8sClusterKubeconfigArrayOutput{})
	pulumi.RegisterOutputType(K8sClusterOpenIdConnectConfigOutput{})
	pulumi.RegisterOutputType(K8sClusterOpenIdConnectConfigPtrOutput{})
	pulumi.RegisterOutputType(K8sPoolNodeOutput{})
	pulumi.RegisterOutputType(K8sPoolNodeArrayOutput{})
	pulumi.RegisterOutputType(K8sPoolUpgradePolicyOutput{})
	pulumi.RegisterOutputType(K8sPoolUpgradePolicyPtrOutput{})
	pulumi.RegisterOutputType(LbAclActionOutput{})
	pulumi.RegisterOutputType(LbAclActionPtrOutput{})
	pulumi.RegisterOutputType(LbAclActionRedirectOutput{})
	pulumi.RegisterOutputType(LbAclActionRedirectArrayOutput{})
	pulumi.RegisterOutputType(LbAclMatchOutput{})
	pulumi.RegisterOutputType(LbAclMatchPtrOutput{})
	pulumi.RegisterOutputType(LbBackendHealthCheckHttpOutput{})
	pulumi.RegisterOutputType(LbBackendHealthCheckHttpPtrOutput{})
	pulumi.RegisterOutputType(LbBackendHealthCheckHttpsOutput{})
	pulumi.RegisterOutputType(LbBackendHealthCheckHttpsPtrOutput{})
	pulumi.RegisterOutputType(LbBackendHealthCheckTcpOutput{})
	pulumi.RegisterOutputType(LbBackendHealthCheckTcpPtrOutput{})
	pulumi.RegisterOutputType(LbCertificateCustomCertificateOutput{})
	pulumi.RegisterOutputType(LbCertificateCustomCertificatePtrOutput{})
	pulumi.RegisterOutputType(LbCertificateLetsencryptOutput{})
	pulumi.RegisterOutputType(LbCertificateLetsencryptPtrOutput{})
	pulumi.RegisterOutputType(LbFrontendAclOutput{})
	pulumi.RegisterOutputType(LbFrontendAclArrayOutput{})
	pulumi.RegisterOutputType(LbFrontendAclActionOutput{})
	pulumi.RegisterOutputType(LbFrontendAclActionRedirectOutput{})
	pulumi.RegisterOutputType(LbFrontendAclActionRedirectArrayOutput{})
	pulumi.RegisterOutputType(LbFrontendAclMatchOutput{})
	pulumi.RegisterOutputType(LbPrivateNetworkOutput{})
	pulumi.RegisterOutputType(LbPrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(MnqCredentialNatsCredentialsOutput{})
	pulumi.RegisterOutputType(MnqCredentialNatsCredentialsPtrOutput{})
	pulumi.RegisterOutputType(MnqCredentialSqsSnsCredentialsOutput{})
	pulumi.RegisterOutputType(MnqCredentialSqsSnsCredentialsPtrOutput{})
	pulumi.RegisterOutputType(MnqCredentialSqsSnsCredentialsPermissionsOutput{})
	pulumi.RegisterOutputType(MnqCredentialSqsSnsCredentialsPermissionsPtrOutput{})
	pulumi.RegisterOutputType(MnqQueueNatsOutput{})
	pulumi.RegisterOutputType(MnqQueueNatsPtrOutput{})
	pulumi.RegisterOutputType(MnqQueueSqsOutput{})
	pulumi.RegisterOutputType(MnqQueueSqsPtrOutput{})
	pulumi.RegisterOutputType(ObjectBucketAclAccessControlPolicyOutput{})
	pulumi.RegisterOutputType(ObjectBucketAclAccessControlPolicyPtrOutput{})
	pulumi.RegisterOutputType(ObjectBucketAclAccessControlPolicyGrantOutput{})
	pulumi.RegisterOutputType(ObjectBucketAclAccessControlPolicyGrantArrayOutput{})
	pulumi.RegisterOutputType(ObjectBucketAclAccessControlPolicyGrantGranteeOutput{})
	pulumi.RegisterOutputType(ObjectBucketAclAccessControlPolicyGrantGranteePtrOutput{})
	pulumi.RegisterOutputType(ObjectBucketAclAccessControlPolicyOwnerOutput{})
	pulumi.RegisterOutputType(ObjectBucketAclAccessControlPolicyOwnerPtrOutput{})
	pulumi.RegisterOutputType(ObjectBucketCorsRuleOutput{})
	pulumi.RegisterOutputType(ObjectBucketCorsRuleArrayOutput{})
	pulumi.RegisterOutputType(ObjectBucketLifecycleRuleOutput{})
	pulumi.RegisterOutputType(ObjectBucketLifecycleRuleArrayOutput{})
	pulumi.RegisterOutputType(ObjectBucketLifecycleRuleExpirationOutput{})
	pulumi.RegisterOutputType(ObjectBucketLifecycleRuleExpirationPtrOutput{})
	pulumi.RegisterOutputType(ObjectBucketLifecycleRuleTransitionOutput{})
	pulumi.RegisterOutputType(ObjectBucketLifecycleRuleTransitionArrayOutput{})
	pulumi.RegisterOutputType(ObjectBucketLockConfigurationRuleOutput{})
	pulumi.RegisterOutputType(ObjectBucketLockConfigurationRulePtrOutput{})
	pulumi.RegisterOutputType(ObjectBucketLockConfigurationRuleDefaultRetentionOutput{})
	pulumi.RegisterOutputType(ObjectBucketLockConfigurationRuleDefaultRetentionPtrOutput{})
	pulumi.RegisterOutputType(ObjectBucketVersioningOutput{})
	pulumi.RegisterOutputType(ObjectBucketVersioningPtrOutput{})
	pulumi.RegisterOutputType(ObjectBucketWebsiteConfigurationErrorDocumentOutput{})
	pulumi.RegisterOutputType(ObjectBucketWebsiteConfigurationErrorDocumentPtrOutput{})
	pulumi.RegisterOutputType(ObjectBucketWebsiteConfigurationIndexDocumentOutput{})
	pulumi.RegisterOutputType(ObjectBucketWebsiteConfigurationIndexDocumentPtrOutput{})
	pulumi.RegisterOutputType(RdbAclAclRuleOutput{})
	pulumi.RegisterOutputType(RdbAclAclRuleArrayOutput{})
	pulumi.RegisterOutputType(RdbInstanceLoadBalancerOutput{})
	pulumi.RegisterOutputType(RdbInstanceLoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(RdbInstancePrivateNetworkOutput{})
	pulumi.RegisterOutputType(RdbInstancePrivateNetworkPtrOutput{})
	pulumi.RegisterOutputType(RdbInstanceReadReplicaOutput{})
	pulumi.RegisterOutputType(RdbInstanceReadReplicaArrayOutput{})
	pulumi.RegisterOutputType(RdbReadReplicaDirectAccessOutput{})
	pulumi.RegisterOutputType(RdbReadReplicaDirectAccessPtrOutput{})
	pulumi.RegisterOutputType(RdbReadReplicaPrivateNetworkOutput{})
	pulumi.RegisterOutputType(RdbReadReplicaPrivateNetworkPtrOutput{})
	pulumi.RegisterOutputType(RedisClusterAclOutput{})
	pulumi.RegisterOutputType(RedisClusterAclArrayOutput{})
	pulumi.RegisterOutputType(RedisClusterPrivateNetworkOutput{})
	pulumi.RegisterOutputType(RedisClusterPrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(RedisClusterPublicNetworkOutput{})
	pulumi.RegisterOutputType(RedisClusterPublicNetworkPtrOutput{})
	pulumi.RegisterOutputType(VpcGatewayNetworkIpamConfigOutput{})
	pulumi.RegisterOutputType(VpcGatewayNetworkIpamConfigArrayOutput{})
	pulumi.RegisterOutputType(VpcPrivateNetworkIpv4SubnetOutput{})
	pulumi.RegisterOutputType(VpcPrivateNetworkIpv4SubnetPtrOutput{})
	pulumi.RegisterOutputType(VpcPrivateNetworkIpv6SubnetOutput{})
	pulumi.RegisterOutputType(VpcPrivateNetworkIpv6SubnetArrayOutput{})
	pulumi.RegisterOutputType(WebHostingCpanelUrlOutput{})
	pulumi.RegisterOutputType(WebHostingCpanelUrlArrayOutput{})
	pulumi.RegisterOutputType(WebHostingOptionOutput{})
	pulumi.RegisterOutputType(WebHostingOptionArrayOutput{})
	pulumi.RegisterOutputType(GetBaremetalOfferCpusOutput{})
	pulumi.RegisterOutputType(GetBaremetalOfferCpusArrayOutput{})
	pulumi.RegisterOutputType(GetBaremetalOfferDiskOutput{})
	pulumi.RegisterOutputType(GetBaremetalOfferDiskArrayOutput{})
	pulumi.RegisterOutputType(GetBaremetalOfferMemoryOutput{})
	pulumi.RegisterOutputType(GetBaremetalOfferMemoryArrayOutput{})
	pulumi.RegisterOutputType(GetBaremetalServerIpOutput{})
	pulumi.RegisterOutputType(GetBaremetalServerIpArrayOutput{})
	pulumi.RegisterOutputType(GetBaremetalServerIpv4Output{})
	pulumi.RegisterOutputType(GetBaremetalServerIpv4ArrayOutput{})
	pulumi.RegisterOutputType(GetBaremetalServerIpv6Output{})
	pulumi.RegisterOutputType(GetBaremetalServerIpv6ArrayOutput{})
	pulumi.RegisterOutputType(GetBaremetalServerOptionOutput{})
	pulumi.RegisterOutputType(GetBaremetalServerOptionArrayOutput{})
	pulumi.RegisterOutputType(GetBaremetalServerPrivateNetworkOutput{})
	pulumi.RegisterOutputType(GetBaremetalServerPrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetCockpitEndpointOutput{})
	pulumi.RegisterOutputType(GetCockpitEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetDomainRecordGeoIpOutput{})
	pulumi.RegisterOutputType(GetDomainRecordGeoIpArrayOutput{})
	pulumi.RegisterOutputType(GetDomainRecordGeoIpMatchOutput{})
	pulumi.RegisterOutputType(GetDomainRecordGeoIpMatchArrayOutput{})
	pulumi.RegisterOutputType(GetDomainRecordHttpServiceOutput{})
	pulumi.RegisterOutputType(GetDomainRecordHttpServiceArrayOutput{})
	pulumi.RegisterOutputType(GetDomainRecordViewOutput{})
	pulumi.RegisterOutputType(GetDomainRecordViewArrayOutput{})
	pulumi.RegisterOutputType(GetDomainRecordWeightedOutput{})
	pulumi.RegisterOutputType(GetDomainRecordWeightedArrayOutput{})
	pulumi.RegisterOutputType(GetFlexibleIpsIpOutput{})
	pulumi.RegisterOutputType(GetFlexibleIpsIpArrayOutput{})
	pulumi.RegisterOutputType(GetFlexibleIpsIpMacAddressOutput{})
	pulumi.RegisterOutputType(GetFlexibleIpsIpMacAddressArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceSecurityGroupInboundRuleOutput{})
	pulumi.RegisterOutputType(GetInstanceSecurityGroupInboundRuleArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceSecurityGroupOutboundRuleOutput{})
	pulumi.RegisterOutputType(GetInstanceSecurityGroupOutboundRuleArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceServerPrivateNetworkOutput{})
	pulumi.RegisterOutputType(GetInstanceServerPrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceServerPublicIpOutput{})
	pulumi.RegisterOutputType(GetInstanceServerPublicIpArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceServerRootVolumeOutput{})
	pulumi.RegisterOutputType(GetInstanceServerRootVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceServersServerOutput{})
	pulumi.RegisterOutputType(GetInstanceServersServerArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceServersServerPublicIpOutput{})
	pulumi.RegisterOutputType(GetInstanceServersServerPublicIpArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceSnapshotImportOutput{})
	pulumi.RegisterOutputType(GetInstanceSnapshotImportArrayOutput{})
	pulumi.RegisterOutputType(GetIotDeviceCertificateOutput{})
	pulumi.RegisterOutputType(GetIotDeviceCertificateArrayOutput{})
	pulumi.RegisterOutputType(GetIotDeviceMessageFilterOutput{})
	pulumi.RegisterOutputType(GetIotDeviceMessageFilterArrayOutput{})
	pulumi.RegisterOutputType(GetIotDeviceMessageFilterPublishOutput{})
	pulumi.RegisterOutputType(GetIotDeviceMessageFilterPublishArrayOutput{})
	pulumi.RegisterOutputType(GetIotDeviceMessageFilterSubscribeOutput{})
	pulumi.RegisterOutputType(GetIotDeviceMessageFilterSubscribeArrayOutput{})
	pulumi.RegisterOutputType(GetIpamIpResourceOutput{})
	pulumi.RegisterOutputType(GetIpamIpResourcePtrOutput{})
	pulumi.RegisterOutputType(GetK8sClusterAutoUpgradeOutput{})
	pulumi.RegisterOutputType(GetK8sClusterAutoUpgradeArrayOutput{})
	pulumi.RegisterOutputType(GetK8sClusterAutoscalerConfigOutput{})
	pulumi.RegisterOutputType(GetK8sClusterAutoscalerConfigArrayOutput{})
	pulumi.RegisterOutputType(GetK8sClusterKubeconfigOutput{})
	pulumi.RegisterOutputType(GetK8sClusterKubeconfigArrayOutput{})
	pulumi.RegisterOutputType(GetK8sClusterOpenIdConnectConfigOutput{})
	pulumi.RegisterOutputType(GetK8sClusterOpenIdConnectConfigArrayOutput{})
	pulumi.RegisterOutputType(GetK8sPoolNodeOutput{})
	pulumi.RegisterOutputType(GetK8sPoolNodeArrayOutput{})
	pulumi.RegisterOutputType(GetK8sPoolUpgradePolicyOutput{})
	pulumi.RegisterOutputType(GetK8sPoolUpgradePolicyArrayOutput{})
	pulumi.RegisterOutputType(GetLbAclsAclOutput{})
	pulumi.RegisterOutputType(GetLbAclsAclArrayOutput{})
	pulumi.RegisterOutputType(GetLbAclsAclActionOutput{})
	pulumi.RegisterOutputType(GetLbAclsAclActionArrayOutput{})
	pulumi.RegisterOutputType(GetLbAclsAclActionRedirectOutput{})
	pulumi.RegisterOutputType(GetLbAclsAclActionRedirectArrayOutput{})
	pulumi.RegisterOutputType(GetLbAclsAclMatchOutput{})
	pulumi.RegisterOutputType(GetLbAclsAclMatchArrayOutput{})
	pulumi.RegisterOutputType(GetLbBackendHealthCheckHttpOutput{})
	pulumi.RegisterOutputType(GetLbBackendHealthCheckHttpArrayOutput{})
	pulumi.RegisterOutputType(GetLbBackendHealthCheckTcpOutput{})
	pulumi.RegisterOutputType(GetLbBackendHealthCheckTcpArrayOutput{})
	pulumi.RegisterOutputType(GetLbBackendsBackendOutput{})
	pulumi.RegisterOutputType(GetLbBackendsBackendArrayOutput{})
	pulumi.RegisterOutputType(GetLbBackendsBackendHealthCheckHttpOutput{})
	pulumi.RegisterOutputType(GetLbBackendsBackendHealthCheckHttpArrayOutput{})
	pulumi.RegisterOutputType(GetLbBackendsBackendHealthCheckTcpOutput{})
	pulumi.RegisterOutputType(GetLbBackendsBackendHealthCheckTcpArrayOutput{})
	pulumi.RegisterOutputType(GetLbCertificateCustomCertificateOutput{})
	pulumi.RegisterOutputType(GetLbCertificateCustomCertificateArrayOutput{})
	pulumi.RegisterOutputType(GetLbCertificateLetsencryptOutput{})
	pulumi.RegisterOutputType(GetLbCertificateLetsencryptArrayOutput{})
	pulumi.RegisterOutputType(GetLbFrontendAclOutput{})
	pulumi.RegisterOutputType(GetLbFrontendAclArrayOutput{})
	pulumi.RegisterOutputType(GetLbFrontendAclActionOutput{})
	pulumi.RegisterOutputType(GetLbFrontendAclActionArrayOutput{})
	pulumi.RegisterOutputType(GetLbFrontendAclActionRedirectOutput{})
	pulumi.RegisterOutputType(GetLbFrontendAclActionRedirectArrayOutput{})
	pulumi.RegisterOutputType(GetLbFrontendAclMatchOutput{})
	pulumi.RegisterOutputType(GetLbFrontendAclMatchArrayOutput{})
	pulumi.RegisterOutputType(GetLbFrontendsFrontendOutput{})
	pulumi.RegisterOutputType(GetLbFrontendsFrontendArrayOutput{})
	pulumi.RegisterOutputType(GetLbIpsIpOutput{})
	pulumi.RegisterOutputType(GetLbIpsIpArrayOutput{})
	pulumi.RegisterOutputType(GetLbPrivateNetworkOutput{})
	pulumi.RegisterOutputType(GetLbPrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetLbRoutesRouteOutput{})
	pulumi.RegisterOutputType(GetLbRoutesRouteArrayOutput{})
	pulumi.RegisterOutputType(GetLbsLbOutput{})
	pulumi.RegisterOutputType(GetLbsLbArrayOutput{})
	pulumi.RegisterOutputType(GetLbsLbInstanceOutput{})
	pulumi.RegisterOutputType(GetLbsLbInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetLbsLbIpOutput{})
	pulumi.RegisterOutputType(GetLbsLbIpArrayOutput{})
	pulumi.RegisterOutputType(GetObjectBucketCorsRuleOutput{})
	pulumi.RegisterOutputType(GetObjectBucketCorsRuleArrayOutput{})
	pulumi.RegisterOutputType(GetObjectBucketLifecycleRuleOutput{})
	pulumi.RegisterOutputType(GetObjectBucketLifecycleRuleArrayOutput{})
	pulumi.RegisterOutputType(GetObjectBucketLifecycleRuleExpirationOutput{})
	pulumi.RegisterOutputType(GetObjectBucketLifecycleRuleExpirationArrayOutput{})
	pulumi.RegisterOutputType(GetObjectBucketLifecycleRuleTransitionOutput{})
	pulumi.RegisterOutputType(GetObjectBucketLifecycleRuleTransitionArrayOutput{})
	pulumi.RegisterOutputType(GetObjectBucketVersioningOutput{})
	pulumi.RegisterOutputType(GetObjectBucketVersioningArrayOutput{})
	pulumi.RegisterOutputType(GetRdbAclAclRuleOutput{})
	pulumi.RegisterOutputType(GetRdbAclAclRuleArrayOutput{})
	pulumi.RegisterOutputType(GetRdbInstanceLoadBalancerOutput{})
	pulumi.RegisterOutputType(GetRdbInstanceLoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(GetRdbInstancePrivateNetworkOutput{})
	pulumi.RegisterOutputType(GetRdbInstancePrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetRdbInstanceReadReplicaOutput{})
	pulumi.RegisterOutputType(GetRdbInstanceReadReplicaArrayOutput{})
	pulumi.RegisterOutputType(GetRedisClusterAclOutput{})
	pulumi.RegisterOutputType(GetRedisClusterAclArrayOutput{})
	pulumi.RegisterOutputType(GetRedisClusterPrivateNetworkOutput{})
	pulumi.RegisterOutputType(GetRedisClusterPrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetRedisClusterPublicNetworkOutput{})
	pulumi.RegisterOutputType(GetRedisClusterPublicNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetVpcGatewayNetworkIpamConfigOutput{})
	pulumi.RegisterOutputType(GetVpcGatewayNetworkIpamConfigArrayOutput{})
	pulumi.RegisterOutputType(GetVpcPrivateNetworkIpv4SubnetOutput{})
	pulumi.RegisterOutputType(GetVpcPrivateNetworkIpv4SubnetArrayOutput{})
	pulumi.RegisterOutputType(GetVpcPrivateNetworkIpv6SubnetOutput{})
	pulumi.RegisterOutputType(GetVpcPrivateNetworkIpv6SubnetArrayOutput{})
	pulumi.RegisterOutputType(GetVpcsVpcOutput{})
	pulumi.RegisterOutputType(GetVpcsVpcArrayOutput{})
	pulumi.RegisterOutputType(GetWebHostOfferProductOutput{})
	pulumi.RegisterOutputType(GetWebHostOfferProductArrayOutput{})
	pulumi.RegisterOutputType(GetWebhostingCpanelUrlOutput{})
	pulumi.RegisterOutputType(GetWebhostingCpanelUrlArrayOutput{})
	pulumi.RegisterOutputType(GetWebhostingOptionOutput{})
	pulumi.RegisterOutputType(GetWebhostingOptionArrayOutput{})
}
