// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates and manages Scaleway Web Hostings.
// For more information, see [the documentation](https://www.scaleway.com/en/developers/api/webhosting/).
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			byName, err := scaleway.GetWebHostOffer(ctx, &scaleway.GetWebHostOfferArgs{
//				Name: pulumi.StringRef("lite"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewWebHosting(ctx, "main", &scaleway.WebHostingArgs{
//				OfferId: *pulumi.String(byName.OfferId),
//				Email:   pulumi.String("your@email.com"),
//				Domain:  pulumi.String("yourdomain.com"),
//				Tags: pulumi.StringArray{
//					pulumi.String("webhosting"),
//					pulumi.String("provider"),
//					pulumi.String("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Hostings can be imported using the `{region}/{id}`, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:index/webHosting:WebHosting hosting01 fr-par/11111111-1111-1111-1111-111111111111
//
// ```
type WebHosting struct {
	pulumi.CustomResourceState

	// The URL to connect to cPanel Dashboard and to Webmail interface.
	CpanelUrls WebHostingCpanelUrlArrayOutput `pulumi:"cpanelUrls"`
	// Date and time of hosting's creation (RFC 3339 format).
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The DNS status of the hosting.
	DnsStatus pulumi.StringOutput `pulumi:"dnsStatus"`
	// The domain name of the hosting.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The contact email of the client for the hosting.
	Email pulumi.StringOutput `pulumi:"email"`
	// The ID of the selected offer for the hosting.
	OfferId pulumi.StringOutput `pulumi:"offerId"`
	// The name of the active offer.
	OfferName pulumi.StringOutput `pulumi:"offerName"`
	// The IDs of the selected options for the hosting.
	OptionIds pulumi.StringArrayOutput `pulumi:"optionIds"`
	// The active options of the hosting.
	Options WebHostingOptionArrayOutput `pulumi:"options"`
	// The organization ID the hosting is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The hostname of the host platform.
	PlatformHostname pulumi.StringOutput `pulumi:"platformHostname"`
	// The number of the host platform.
	PlatformNumber pulumi.IntOutput `pulumi:"platformNumber"`
	// `projectId`) The ID of the project the VPC is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`) The region of the Hosting.
	Region pulumi.StringOutput `pulumi:"region"`
	// The hosting status.
	Status pulumi.StringOutput `pulumi:"status"`
	// The tags associated with the hosting.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Date and time of hosting's last update (RFC 3339 format).
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The main hosting cPanel username.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewWebHosting registers a new resource with the given unique name, arguments, and options.
func NewWebHosting(ctx *pulumi.Context,
	name string, args *WebHostingArgs, opts ...pulumi.ResourceOption) (*WebHosting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.OfferId == nil {
		return nil, errors.New("invalid value for required argument 'OfferId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebHosting
	err := ctx.RegisterResource("scaleway:index/webHosting:WebHosting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebHosting gets an existing WebHosting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebHosting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebHostingState, opts ...pulumi.ResourceOption) (*WebHosting, error) {
	var resource WebHosting
	err := ctx.ReadResource("scaleway:index/webHosting:WebHosting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebHosting resources.
type webHostingState struct {
	// The URL to connect to cPanel Dashboard and to Webmail interface.
	CpanelUrls []WebHostingCpanelUrl `pulumi:"cpanelUrls"`
	// Date and time of hosting's creation (RFC 3339 format).
	CreatedAt *string `pulumi:"createdAt"`
	// The DNS status of the hosting.
	DnsStatus *string `pulumi:"dnsStatus"`
	// The domain name of the hosting.
	Domain *string `pulumi:"domain"`
	// The contact email of the client for the hosting.
	Email *string `pulumi:"email"`
	// The ID of the selected offer for the hosting.
	OfferId *string `pulumi:"offerId"`
	// The name of the active offer.
	OfferName *string `pulumi:"offerName"`
	// The IDs of the selected options for the hosting.
	OptionIds []string `pulumi:"optionIds"`
	// The active options of the hosting.
	Options []WebHostingOption `pulumi:"options"`
	// The organization ID the hosting is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// The hostname of the host platform.
	PlatformHostname *string `pulumi:"platformHostname"`
	// The number of the host platform.
	PlatformNumber *int `pulumi:"platformNumber"`
	// `projectId`) The ID of the project the VPC is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region of the Hosting.
	Region *string `pulumi:"region"`
	// The hosting status.
	Status *string `pulumi:"status"`
	// The tags associated with the hosting.
	Tags []string `pulumi:"tags"`
	// Date and time of hosting's last update (RFC 3339 format).
	UpdatedAt *string `pulumi:"updatedAt"`
	// The main hosting cPanel username.
	Username *string `pulumi:"username"`
}

type WebHostingState struct {
	// The URL to connect to cPanel Dashboard and to Webmail interface.
	CpanelUrls WebHostingCpanelUrlArrayInput
	// Date and time of hosting's creation (RFC 3339 format).
	CreatedAt pulumi.StringPtrInput
	// The DNS status of the hosting.
	DnsStatus pulumi.StringPtrInput
	// The domain name of the hosting.
	Domain pulumi.StringPtrInput
	// The contact email of the client for the hosting.
	Email pulumi.StringPtrInput
	// The ID of the selected offer for the hosting.
	OfferId pulumi.StringPtrInput
	// The name of the active offer.
	OfferName pulumi.StringPtrInput
	// The IDs of the selected options for the hosting.
	OptionIds pulumi.StringArrayInput
	// The active options of the hosting.
	Options WebHostingOptionArrayInput
	// The organization ID the hosting is associated with.
	OrganizationId pulumi.StringPtrInput
	// The hostname of the host platform.
	PlatformHostname pulumi.StringPtrInput
	// The number of the host platform.
	PlatformNumber pulumi.IntPtrInput
	// `projectId`) The ID of the project the VPC is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region of the Hosting.
	Region pulumi.StringPtrInput
	// The hosting status.
	Status pulumi.StringPtrInput
	// The tags associated with the hosting.
	Tags pulumi.StringArrayInput
	// Date and time of hosting's last update (RFC 3339 format).
	UpdatedAt pulumi.StringPtrInput
	// The main hosting cPanel username.
	Username pulumi.StringPtrInput
}

func (WebHostingState) ElementType() reflect.Type {
	return reflect.TypeOf((*webHostingState)(nil)).Elem()
}

type webHostingArgs struct {
	// The domain name of the hosting.
	Domain string `pulumi:"domain"`
	// The contact email of the client for the hosting.
	Email string `pulumi:"email"`
	// The ID of the selected offer for the hosting.
	OfferId string `pulumi:"offerId"`
	// The IDs of the selected options for the hosting.
	OptionIds []string `pulumi:"optionIds"`
	// `projectId`) The ID of the project the VPC is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region of the Hosting.
	Region *string `pulumi:"region"`
	// The tags associated with the hosting.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a WebHosting resource.
type WebHostingArgs struct {
	// The domain name of the hosting.
	Domain pulumi.StringInput
	// The contact email of the client for the hosting.
	Email pulumi.StringInput
	// The ID of the selected offer for the hosting.
	OfferId pulumi.StringInput
	// The IDs of the selected options for the hosting.
	OptionIds pulumi.StringArrayInput
	// `projectId`) The ID of the project the VPC is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region of the Hosting.
	Region pulumi.StringPtrInput
	// The tags associated with the hosting.
	Tags pulumi.StringArrayInput
}

func (WebHostingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webHostingArgs)(nil)).Elem()
}

type WebHostingInput interface {
	pulumi.Input

	ToWebHostingOutput() WebHostingOutput
	ToWebHostingOutputWithContext(ctx context.Context) WebHostingOutput
}

func (*WebHosting) ElementType() reflect.Type {
	return reflect.TypeOf((**WebHosting)(nil)).Elem()
}

func (i *WebHosting) ToWebHostingOutput() WebHostingOutput {
	return i.ToWebHostingOutputWithContext(context.Background())
}

func (i *WebHosting) ToWebHostingOutputWithContext(ctx context.Context) WebHostingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebHostingOutput)
}

func (i *WebHosting) ToOutput(ctx context.Context) pulumix.Output[*WebHosting] {
	return pulumix.Output[*WebHosting]{
		OutputState: i.ToWebHostingOutputWithContext(ctx).OutputState,
	}
}

// WebHostingArrayInput is an input type that accepts WebHostingArray and WebHostingArrayOutput values.
// You can construct a concrete instance of `WebHostingArrayInput` via:
//
//	WebHostingArray{ WebHostingArgs{...} }
type WebHostingArrayInput interface {
	pulumi.Input

	ToWebHostingArrayOutput() WebHostingArrayOutput
	ToWebHostingArrayOutputWithContext(context.Context) WebHostingArrayOutput
}

type WebHostingArray []WebHostingInput

func (WebHostingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebHosting)(nil)).Elem()
}

func (i WebHostingArray) ToWebHostingArrayOutput() WebHostingArrayOutput {
	return i.ToWebHostingArrayOutputWithContext(context.Background())
}

func (i WebHostingArray) ToWebHostingArrayOutputWithContext(ctx context.Context) WebHostingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebHostingArrayOutput)
}

func (i WebHostingArray) ToOutput(ctx context.Context) pulumix.Output[[]*WebHosting] {
	return pulumix.Output[[]*WebHosting]{
		OutputState: i.ToWebHostingArrayOutputWithContext(ctx).OutputState,
	}
}

// WebHostingMapInput is an input type that accepts WebHostingMap and WebHostingMapOutput values.
// You can construct a concrete instance of `WebHostingMapInput` via:
//
//	WebHostingMap{ "key": WebHostingArgs{...} }
type WebHostingMapInput interface {
	pulumi.Input

	ToWebHostingMapOutput() WebHostingMapOutput
	ToWebHostingMapOutputWithContext(context.Context) WebHostingMapOutput
}

type WebHostingMap map[string]WebHostingInput

func (WebHostingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebHosting)(nil)).Elem()
}

func (i WebHostingMap) ToWebHostingMapOutput() WebHostingMapOutput {
	return i.ToWebHostingMapOutputWithContext(context.Background())
}

func (i WebHostingMap) ToWebHostingMapOutputWithContext(ctx context.Context) WebHostingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebHostingMapOutput)
}

func (i WebHostingMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*WebHosting] {
	return pulumix.Output[map[string]*WebHosting]{
		OutputState: i.ToWebHostingMapOutputWithContext(ctx).OutputState,
	}
}

type WebHostingOutput struct{ *pulumi.OutputState }

func (WebHostingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebHosting)(nil)).Elem()
}

func (o WebHostingOutput) ToWebHostingOutput() WebHostingOutput {
	return o
}

func (o WebHostingOutput) ToWebHostingOutputWithContext(ctx context.Context) WebHostingOutput {
	return o
}

func (o WebHostingOutput) ToOutput(ctx context.Context) pulumix.Output[*WebHosting] {
	return pulumix.Output[*WebHosting]{
		OutputState: o.OutputState,
	}
}

// The URL to connect to cPanel Dashboard and to Webmail interface.
func (o WebHostingOutput) CpanelUrls() WebHostingCpanelUrlArrayOutput {
	return o.ApplyT(func(v *WebHosting) WebHostingCpanelUrlArrayOutput { return v.CpanelUrls }).(WebHostingCpanelUrlArrayOutput)
}

// Date and time of hosting's creation (RFC 3339 format).
func (o WebHostingOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *WebHosting) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The DNS status of the hosting.
func (o WebHostingOutput) DnsStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *WebHosting) pulumi.StringOutput { return v.DnsStatus }).(pulumi.StringOutput)
}

// The domain name of the hosting.
func (o WebHostingOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *WebHosting) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The contact email of the client for the hosting.
func (o WebHostingOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *WebHosting) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// The ID of the selected offer for the hosting.
func (o WebHostingOutput) OfferId() pulumi.StringOutput {
	return o.ApplyT(func(v *WebHosting) pulumi.StringOutput { return v.OfferId }).(pulumi.StringOutput)
}

// The name of the active offer.
func (o WebHostingOutput) OfferName() pulumi.StringOutput {
	return o.ApplyT(func(v *WebHosting) pulumi.StringOutput { return v.OfferName }).(pulumi.StringOutput)
}

// The IDs of the selected options for the hosting.
func (o WebHostingOutput) OptionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WebHosting) pulumi.StringArrayOutput { return v.OptionIds }).(pulumi.StringArrayOutput)
}

// The active options of the hosting.
func (o WebHostingOutput) Options() WebHostingOptionArrayOutput {
	return o.ApplyT(func(v *WebHosting) WebHostingOptionArrayOutput { return v.Options }).(WebHostingOptionArrayOutput)
}

// The organization ID the hosting is associated with.
func (o WebHostingOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *WebHosting) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The hostname of the host platform.
func (o WebHostingOutput) PlatformHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *WebHosting) pulumi.StringOutput { return v.PlatformHostname }).(pulumi.StringOutput)
}

// The number of the host platform.
func (o WebHostingOutput) PlatformNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *WebHosting) pulumi.IntOutput { return v.PlatformNumber }).(pulumi.IntOutput)
}

// `projectId`) The ID of the project the VPC is associated with.
func (o WebHostingOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *WebHosting) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`) The region of the Hosting.
func (o WebHostingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *WebHosting) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The hosting status.
func (o WebHostingOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *WebHosting) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The tags associated with the hosting.
func (o WebHostingOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WebHosting) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Date and time of hosting's last update (RFC 3339 format).
func (o WebHostingOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *WebHosting) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The main hosting cPanel username.
func (o WebHostingOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *WebHosting) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type WebHostingArrayOutput struct{ *pulumi.OutputState }

func (WebHostingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebHosting)(nil)).Elem()
}

func (o WebHostingArrayOutput) ToWebHostingArrayOutput() WebHostingArrayOutput {
	return o
}

func (o WebHostingArrayOutput) ToWebHostingArrayOutputWithContext(ctx context.Context) WebHostingArrayOutput {
	return o
}

func (o WebHostingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*WebHosting] {
	return pulumix.Output[[]*WebHosting]{
		OutputState: o.OutputState,
	}
}

func (o WebHostingArrayOutput) Index(i pulumi.IntInput) WebHostingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebHosting {
		return vs[0].([]*WebHosting)[vs[1].(int)]
	}).(WebHostingOutput)
}

type WebHostingMapOutput struct{ *pulumi.OutputState }

func (WebHostingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebHosting)(nil)).Elem()
}

func (o WebHostingMapOutput) ToWebHostingMapOutput() WebHostingMapOutput {
	return o
}

func (o WebHostingMapOutput) ToWebHostingMapOutputWithContext(ctx context.Context) WebHostingMapOutput {
	return o
}

func (o WebHostingMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*WebHosting] {
	return pulumix.Output[map[string]*WebHosting]{
		OutputState: o.OutputState,
	}
}

func (o WebHostingMapOutput) MapIndex(k pulumi.StringInput) WebHostingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebHosting {
		return vs[0].(map[string]*WebHosting)[vs[1].(string)]
	}).(WebHostingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebHostingInput)(nil)).Elem(), &WebHosting{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebHostingArrayInput)(nil)).Elem(), WebHostingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebHostingMapInput)(nil)).Elem(), WebHostingMap{})
	pulumi.RegisterOutputType(WebHostingOutput{})
	pulumi.RegisterOutputType(WebHostingArrayOutput{})
	pulumi.RegisterOutputType(WebHostingMapOutput{})
}
