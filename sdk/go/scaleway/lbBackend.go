// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages Scaleway Load-Balancer Backends.
// For more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-backends).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewLbBackend(ctx, "backend01", &scaleway.LbBackendArgs{
//				LbId:            pulumi.Any(scaleway_lb.Lb01.Id),
//				ForwardProtocol: pulumi.String("http"),
//				ForwardPort:     pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With HTTP Health Check
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewLbBackend(ctx, "backend01", &scaleway.LbBackendArgs{
//				LbId:            pulumi.Any(scaleway_lb.Lb01.Id),
//				ForwardProtocol: pulumi.String("http"),
//				ForwardPort:     pulumi.Int(80),
//				HealthCheckHttp: &scaleway.LbBackendHealthCheckHttpArgs{
//					Uri: pulumi.String("www.test.com/health"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Load-Balancer backend can be imported using the `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/lbBackend:LbBackend backend01 fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type LbBackend struct {
	pulumi.CustomResourceState

	// Scaleway S3 bucket website to be served in case all backend servers are down **NOTE** : Only the host part of the
	// Scaleway S3 bucket website is expected. E.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL
	// is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
	FailoverHost pulumi.StringPtrOutput `pulumi:"failoverHost"`
	// User sessions will be forwarded to this port of backend servers
	ForwardPort pulumi.IntOutput `pulumi:"forwardPort"`
	// Load balancing algorithm
	ForwardPortAlgorithm pulumi.StringPtrOutput `pulumi:"forwardPortAlgorithm"`
	// Backend protocol
	ForwardProtocol pulumi.StringOutput `pulumi:"forwardProtocol"`
	// Interval between two HC requests
	HealthCheckDelay pulumi.StringPtrOutput             `pulumi:"healthCheckDelay"`
	HealthCheckHttp  LbBackendHealthCheckHttpPtrOutput  `pulumi:"healthCheckHttp"`
	HealthCheckHttps LbBackendHealthCheckHttpsPtrOutput `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down
	HealthCheckMaxRetries pulumi.IntPtrOutput `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be send to. Default to `forwardPort`
	HealthCheckPort pulumi.IntOutput `pulumi:"healthCheckPort"`
	// Defines whether proxy protocol should be activated for the health check
	HealthCheckSendProxy pulumi.BoolPtrOutput          `pulumi:"healthCheckSendProxy"`
	HealthCheckTcp       LbBackendHealthCheckTcpOutput `pulumi:"healthCheckTcp"`
	// Timeout before we consider a HC request failed
	HealthCheckTimeout pulumi.StringPtrOutput `pulumi:"healthCheckTimeout"`
	// Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)
	HealthCheckTransientDelay pulumi.StringPtrOutput `pulumi:"healthCheckTransientDelay"`
	// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection
	IgnoreSslServerVerify pulumi.BoolPtrOutput `pulumi:"ignoreSslServerVerify"`
	// The load-balancer ID
	LbId pulumi.StringOutput `pulumi:"lbId"`
	// Maximum number of connections allowed per backend server
	MaxConnections pulumi.IntPtrOutput `pulumi:"maxConnections"`
	// Number of retries when a backend server connection failed
	MaxRetries pulumi.IntPtrOutput `pulumi:"maxRetries"`
	// The name of the backend
	Name pulumi.StringOutput `pulumi:"name"`
	// Modify what occurs when a backend server is marked down
	OnMarkedDownAction pulumi.StringPtrOutput `pulumi:"onMarkedDownAction"`
	// Type of PROXY protocol to enable
	ProxyProtocol pulumi.StringPtrOutput `pulumi:"proxyProtocol"`
	// Whether to use another backend server on each attempt
	RedispatchAttemptCount pulumi.IntPtrOutput `pulumi:"redispatchAttemptCount"`
	// Enables PROXY protocol version 2
	//
	// Deprecated: Please use proxyProtocol instead
	SendProxyV2 pulumi.BoolOutput `pulumi:"sendProxyV2"`
	// Backend server IP addresses list (IPv4 or IPv6)
	ServerIps pulumi.StringArrayOutput `pulumi:"serverIps"`
	// Enables SSL between load balancer and backend servers
	SslBridging pulumi.BoolPtrOutput `pulumi:"sslBridging"`
	// The type of sticky sessions
	StickySessions pulumi.StringPtrOutput `pulumi:"stickySessions"`
	// Cookie name for sticky sessions
	StickySessionsCookieName pulumi.StringPtrOutput `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time
	TimeoutConnect pulumi.StringPtrOutput `pulumi:"timeoutConnect"`
	// Maximum time (in seconds) for a request to be left pending in queue when `maxConnections` is reached
	TimeoutQueue pulumi.StringPtrOutput `pulumi:"timeoutQueue"`
	// Maximum server connection inactivity time
	TimeoutServer pulumi.StringPtrOutput `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time
	TimeoutTunnel pulumi.StringPtrOutput `pulumi:"timeoutTunnel"`
}

// NewLbBackend registers a new resource with the given unique name, arguments, and options.
func NewLbBackend(ctx *pulumi.Context,
	name string, args *LbBackendArgs, opts ...pulumi.ResourceOption) (*LbBackend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ForwardPort == nil {
		return nil, errors.New("invalid value for required argument 'ForwardPort'")
	}
	if args.ForwardProtocol == nil {
		return nil, errors.New("invalid value for required argument 'ForwardProtocol'")
	}
	if args.LbId == nil {
		return nil, errors.New("invalid value for required argument 'LbId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LbBackend
	err := ctx.RegisterResource("scaleway:index/lbBackend:LbBackend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLbBackend gets an existing LbBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbBackendState, opts ...pulumi.ResourceOption) (*LbBackend, error) {
	var resource LbBackend
	err := ctx.ReadResource("scaleway:index/lbBackend:LbBackend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LbBackend resources.
type lbBackendState struct {
	// Scaleway S3 bucket website to be served in case all backend servers are down **NOTE** : Only the host part of the
	// Scaleway S3 bucket website is expected. E.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL
	// is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
	FailoverHost *string `pulumi:"failoverHost"`
	// User sessions will be forwarded to this port of backend servers
	ForwardPort *int `pulumi:"forwardPort"`
	// Load balancing algorithm
	ForwardPortAlgorithm *string `pulumi:"forwardPortAlgorithm"`
	// Backend protocol
	ForwardProtocol *string `pulumi:"forwardProtocol"`
	// Interval between two HC requests
	HealthCheckDelay *string                    `pulumi:"healthCheckDelay"`
	HealthCheckHttp  *LbBackendHealthCheckHttp  `pulumi:"healthCheckHttp"`
	HealthCheckHttps *LbBackendHealthCheckHttps `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down
	HealthCheckMaxRetries *int `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be send to. Default to `forwardPort`
	HealthCheckPort *int `pulumi:"healthCheckPort"`
	// Defines whether proxy protocol should be activated for the health check
	HealthCheckSendProxy *bool                    `pulumi:"healthCheckSendProxy"`
	HealthCheckTcp       *LbBackendHealthCheckTcp `pulumi:"healthCheckTcp"`
	// Timeout before we consider a HC request failed
	HealthCheckTimeout *string `pulumi:"healthCheckTimeout"`
	// Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)
	HealthCheckTransientDelay *string `pulumi:"healthCheckTransientDelay"`
	// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection
	IgnoreSslServerVerify *bool `pulumi:"ignoreSslServerVerify"`
	// The load-balancer ID
	LbId *string `pulumi:"lbId"`
	// Maximum number of connections allowed per backend server
	MaxConnections *int `pulumi:"maxConnections"`
	// Number of retries when a backend server connection failed
	MaxRetries *int `pulumi:"maxRetries"`
	// The name of the backend
	Name *string `pulumi:"name"`
	// Modify what occurs when a backend server is marked down
	OnMarkedDownAction *string `pulumi:"onMarkedDownAction"`
	// Type of PROXY protocol to enable
	ProxyProtocol *string `pulumi:"proxyProtocol"`
	// Whether to use another backend server on each attempt
	RedispatchAttemptCount *int `pulumi:"redispatchAttemptCount"`
	// Enables PROXY protocol version 2
	//
	// Deprecated: Please use proxyProtocol instead
	SendProxyV2 *bool `pulumi:"sendProxyV2"`
	// Backend server IP addresses list (IPv4 or IPv6)
	ServerIps []string `pulumi:"serverIps"`
	// Enables SSL between load balancer and backend servers
	SslBridging *bool `pulumi:"sslBridging"`
	// The type of sticky sessions
	StickySessions *string `pulumi:"stickySessions"`
	// Cookie name for sticky sessions
	StickySessionsCookieName *string `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time
	TimeoutConnect *string `pulumi:"timeoutConnect"`
	// Maximum time (in seconds) for a request to be left pending in queue when `maxConnections` is reached
	TimeoutQueue *string `pulumi:"timeoutQueue"`
	// Maximum server connection inactivity time
	TimeoutServer *string `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time
	TimeoutTunnel *string `pulumi:"timeoutTunnel"`
}

type LbBackendState struct {
	// Scaleway S3 bucket website to be served in case all backend servers are down **NOTE** : Only the host part of the
	// Scaleway S3 bucket website is expected. E.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL
	// is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
	FailoverHost pulumi.StringPtrInput
	// User sessions will be forwarded to this port of backend servers
	ForwardPort pulumi.IntPtrInput
	// Load balancing algorithm
	ForwardPortAlgorithm pulumi.StringPtrInput
	// Backend protocol
	ForwardProtocol pulumi.StringPtrInput
	// Interval between two HC requests
	HealthCheckDelay pulumi.StringPtrInput
	HealthCheckHttp  LbBackendHealthCheckHttpPtrInput
	HealthCheckHttps LbBackendHealthCheckHttpsPtrInput
	// Number of allowed failed HC requests before the backend server is marked down
	HealthCheckMaxRetries pulumi.IntPtrInput
	// Port the HC requests will be send to. Default to `forwardPort`
	HealthCheckPort pulumi.IntPtrInput
	// Defines whether proxy protocol should be activated for the health check
	HealthCheckSendProxy pulumi.BoolPtrInput
	HealthCheckTcp       LbBackendHealthCheckTcpPtrInput
	// Timeout before we consider a HC request failed
	HealthCheckTimeout pulumi.StringPtrInput
	// Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)
	HealthCheckTransientDelay pulumi.StringPtrInput
	// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection
	IgnoreSslServerVerify pulumi.BoolPtrInput
	// The load-balancer ID
	LbId pulumi.StringPtrInput
	// Maximum number of connections allowed per backend server
	MaxConnections pulumi.IntPtrInput
	// Number of retries when a backend server connection failed
	MaxRetries pulumi.IntPtrInput
	// The name of the backend
	Name pulumi.StringPtrInput
	// Modify what occurs when a backend server is marked down
	OnMarkedDownAction pulumi.StringPtrInput
	// Type of PROXY protocol to enable
	ProxyProtocol pulumi.StringPtrInput
	// Whether to use another backend server on each attempt
	RedispatchAttemptCount pulumi.IntPtrInput
	// Enables PROXY protocol version 2
	//
	// Deprecated: Please use proxyProtocol instead
	SendProxyV2 pulumi.BoolPtrInput
	// Backend server IP addresses list (IPv4 or IPv6)
	ServerIps pulumi.StringArrayInput
	// Enables SSL between load balancer and backend servers
	SslBridging pulumi.BoolPtrInput
	// The type of sticky sessions
	StickySessions pulumi.StringPtrInput
	// Cookie name for sticky sessions
	StickySessionsCookieName pulumi.StringPtrInput
	// Maximum initial server connection establishment time
	TimeoutConnect pulumi.StringPtrInput
	// Maximum time (in seconds) for a request to be left pending in queue when `maxConnections` is reached
	TimeoutQueue pulumi.StringPtrInput
	// Maximum server connection inactivity time
	TimeoutServer pulumi.StringPtrInput
	// Maximum tunnel inactivity time
	TimeoutTunnel pulumi.StringPtrInput
}

func (LbBackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbBackendState)(nil)).Elem()
}

type lbBackendArgs struct {
	// Scaleway S3 bucket website to be served in case all backend servers are down **NOTE** : Only the host part of the
	// Scaleway S3 bucket website is expected. E.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL
	// is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
	FailoverHost *string `pulumi:"failoverHost"`
	// User sessions will be forwarded to this port of backend servers
	ForwardPort int `pulumi:"forwardPort"`
	// Load balancing algorithm
	ForwardPortAlgorithm *string `pulumi:"forwardPortAlgorithm"`
	// Backend protocol
	ForwardProtocol string `pulumi:"forwardProtocol"`
	// Interval between two HC requests
	HealthCheckDelay *string                    `pulumi:"healthCheckDelay"`
	HealthCheckHttp  *LbBackendHealthCheckHttp  `pulumi:"healthCheckHttp"`
	HealthCheckHttps *LbBackendHealthCheckHttps `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down
	HealthCheckMaxRetries *int `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be send to. Default to `forwardPort`
	HealthCheckPort *int `pulumi:"healthCheckPort"`
	// Defines whether proxy protocol should be activated for the health check
	HealthCheckSendProxy *bool                    `pulumi:"healthCheckSendProxy"`
	HealthCheckTcp       *LbBackendHealthCheckTcp `pulumi:"healthCheckTcp"`
	// Timeout before we consider a HC request failed
	HealthCheckTimeout *string `pulumi:"healthCheckTimeout"`
	// Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)
	HealthCheckTransientDelay *string `pulumi:"healthCheckTransientDelay"`
	// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection
	IgnoreSslServerVerify *bool `pulumi:"ignoreSslServerVerify"`
	// The load-balancer ID
	LbId string `pulumi:"lbId"`
	// Maximum number of connections allowed per backend server
	MaxConnections *int `pulumi:"maxConnections"`
	// Number of retries when a backend server connection failed
	MaxRetries *int `pulumi:"maxRetries"`
	// The name of the backend
	Name *string `pulumi:"name"`
	// Modify what occurs when a backend server is marked down
	OnMarkedDownAction *string `pulumi:"onMarkedDownAction"`
	// Type of PROXY protocol to enable
	ProxyProtocol *string `pulumi:"proxyProtocol"`
	// Whether to use another backend server on each attempt
	RedispatchAttemptCount *int `pulumi:"redispatchAttemptCount"`
	// Enables PROXY protocol version 2
	//
	// Deprecated: Please use proxyProtocol instead
	SendProxyV2 *bool `pulumi:"sendProxyV2"`
	// Backend server IP addresses list (IPv4 or IPv6)
	ServerIps []string `pulumi:"serverIps"`
	// Enables SSL between load balancer and backend servers
	SslBridging *bool `pulumi:"sslBridging"`
	// The type of sticky sessions
	StickySessions *string `pulumi:"stickySessions"`
	// Cookie name for sticky sessions
	StickySessionsCookieName *string `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time
	TimeoutConnect *string `pulumi:"timeoutConnect"`
	// Maximum time (in seconds) for a request to be left pending in queue when `maxConnections` is reached
	TimeoutQueue *string `pulumi:"timeoutQueue"`
	// Maximum server connection inactivity time
	TimeoutServer *string `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time
	TimeoutTunnel *string `pulumi:"timeoutTunnel"`
}

// The set of arguments for constructing a LbBackend resource.
type LbBackendArgs struct {
	// Scaleway S3 bucket website to be served in case all backend servers are down **NOTE** : Only the host part of the
	// Scaleway S3 bucket website is expected. E.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL
	// is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
	FailoverHost pulumi.StringPtrInput
	// User sessions will be forwarded to this port of backend servers
	ForwardPort pulumi.IntInput
	// Load balancing algorithm
	ForwardPortAlgorithm pulumi.StringPtrInput
	// Backend protocol
	ForwardProtocol pulumi.StringInput
	// Interval between two HC requests
	HealthCheckDelay pulumi.StringPtrInput
	HealthCheckHttp  LbBackendHealthCheckHttpPtrInput
	HealthCheckHttps LbBackendHealthCheckHttpsPtrInput
	// Number of allowed failed HC requests before the backend server is marked down
	HealthCheckMaxRetries pulumi.IntPtrInput
	// Port the HC requests will be send to. Default to `forwardPort`
	HealthCheckPort pulumi.IntPtrInput
	// Defines whether proxy protocol should be activated for the health check
	HealthCheckSendProxy pulumi.BoolPtrInput
	HealthCheckTcp       LbBackendHealthCheckTcpPtrInput
	// Timeout before we consider a HC request failed
	HealthCheckTimeout pulumi.StringPtrInput
	// Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)
	HealthCheckTransientDelay pulumi.StringPtrInput
	// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection
	IgnoreSslServerVerify pulumi.BoolPtrInput
	// The load-balancer ID
	LbId pulumi.StringInput
	// Maximum number of connections allowed per backend server
	MaxConnections pulumi.IntPtrInput
	// Number of retries when a backend server connection failed
	MaxRetries pulumi.IntPtrInput
	// The name of the backend
	Name pulumi.StringPtrInput
	// Modify what occurs when a backend server is marked down
	OnMarkedDownAction pulumi.StringPtrInput
	// Type of PROXY protocol to enable
	ProxyProtocol pulumi.StringPtrInput
	// Whether to use another backend server on each attempt
	RedispatchAttemptCount pulumi.IntPtrInput
	// Enables PROXY protocol version 2
	//
	// Deprecated: Please use proxyProtocol instead
	SendProxyV2 pulumi.BoolPtrInput
	// Backend server IP addresses list (IPv4 or IPv6)
	ServerIps pulumi.StringArrayInput
	// Enables SSL between load balancer and backend servers
	SslBridging pulumi.BoolPtrInput
	// The type of sticky sessions
	StickySessions pulumi.StringPtrInput
	// Cookie name for sticky sessions
	StickySessionsCookieName pulumi.StringPtrInput
	// Maximum initial server connection establishment time
	TimeoutConnect pulumi.StringPtrInput
	// Maximum time (in seconds) for a request to be left pending in queue when `maxConnections` is reached
	TimeoutQueue pulumi.StringPtrInput
	// Maximum server connection inactivity time
	TimeoutServer pulumi.StringPtrInput
	// Maximum tunnel inactivity time
	TimeoutTunnel pulumi.StringPtrInput
}

func (LbBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbBackendArgs)(nil)).Elem()
}

type LbBackendInput interface {
	pulumi.Input

	ToLbBackendOutput() LbBackendOutput
	ToLbBackendOutputWithContext(ctx context.Context) LbBackendOutput
}

func (*LbBackend) ElementType() reflect.Type {
	return reflect.TypeOf((**LbBackend)(nil)).Elem()
}

func (i *LbBackend) ToLbBackendOutput() LbBackendOutput {
	return i.ToLbBackendOutputWithContext(context.Background())
}

func (i *LbBackend) ToLbBackendOutputWithContext(ctx context.Context) LbBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbBackendOutput)
}

// LbBackendArrayInput is an input type that accepts LbBackendArray and LbBackendArrayOutput values.
// You can construct a concrete instance of `LbBackendArrayInput` via:
//
//	LbBackendArray{ LbBackendArgs{...} }
type LbBackendArrayInput interface {
	pulumi.Input

	ToLbBackendArrayOutput() LbBackendArrayOutput
	ToLbBackendArrayOutputWithContext(context.Context) LbBackendArrayOutput
}

type LbBackendArray []LbBackendInput

func (LbBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbBackend)(nil)).Elem()
}

func (i LbBackendArray) ToLbBackendArrayOutput() LbBackendArrayOutput {
	return i.ToLbBackendArrayOutputWithContext(context.Background())
}

func (i LbBackendArray) ToLbBackendArrayOutputWithContext(ctx context.Context) LbBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbBackendArrayOutput)
}

// LbBackendMapInput is an input type that accepts LbBackendMap and LbBackendMapOutput values.
// You can construct a concrete instance of `LbBackendMapInput` via:
//
//	LbBackendMap{ "key": LbBackendArgs{...} }
type LbBackendMapInput interface {
	pulumi.Input

	ToLbBackendMapOutput() LbBackendMapOutput
	ToLbBackendMapOutputWithContext(context.Context) LbBackendMapOutput
}

type LbBackendMap map[string]LbBackendInput

func (LbBackendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbBackend)(nil)).Elem()
}

func (i LbBackendMap) ToLbBackendMapOutput() LbBackendMapOutput {
	return i.ToLbBackendMapOutputWithContext(context.Background())
}

func (i LbBackendMap) ToLbBackendMapOutputWithContext(ctx context.Context) LbBackendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbBackendMapOutput)
}

type LbBackendOutput struct{ *pulumi.OutputState }

func (LbBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbBackend)(nil)).Elem()
}

func (o LbBackendOutput) ToLbBackendOutput() LbBackendOutput {
	return o
}

func (o LbBackendOutput) ToLbBackendOutputWithContext(ctx context.Context) LbBackendOutput {
	return o
}

// Scaleway S3 bucket website to be served in case all backend servers are down **NOTE** : Only the host part of the
// Scaleway S3 bucket website is expected. E.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL
// is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
func (o LbBackendOutput) FailoverHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.StringPtrOutput { return v.FailoverHost }).(pulumi.StringPtrOutput)
}

// User sessions will be forwarded to this port of backend servers
func (o LbBackendOutput) ForwardPort() pulumi.IntOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.IntOutput { return v.ForwardPort }).(pulumi.IntOutput)
}

// Load balancing algorithm
func (o LbBackendOutput) ForwardPortAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.StringPtrOutput { return v.ForwardPortAlgorithm }).(pulumi.StringPtrOutput)
}

// Backend protocol
func (o LbBackendOutput) ForwardProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.StringOutput { return v.ForwardProtocol }).(pulumi.StringOutput)
}

// Interval between two HC requests
func (o LbBackendOutput) HealthCheckDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.StringPtrOutput { return v.HealthCheckDelay }).(pulumi.StringPtrOutput)
}

func (o LbBackendOutput) HealthCheckHttp() LbBackendHealthCheckHttpPtrOutput {
	return o.ApplyT(func(v *LbBackend) LbBackendHealthCheckHttpPtrOutput { return v.HealthCheckHttp }).(LbBackendHealthCheckHttpPtrOutput)
}

func (o LbBackendOutput) HealthCheckHttps() LbBackendHealthCheckHttpsPtrOutput {
	return o.ApplyT(func(v *LbBackend) LbBackendHealthCheckHttpsPtrOutput { return v.HealthCheckHttps }).(LbBackendHealthCheckHttpsPtrOutput)
}

// Number of allowed failed HC requests before the backend server is marked down
func (o LbBackendOutput) HealthCheckMaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.IntPtrOutput { return v.HealthCheckMaxRetries }).(pulumi.IntPtrOutput)
}

// Port the HC requests will be send to. Default to `forwardPort`
func (o LbBackendOutput) HealthCheckPort() pulumi.IntOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.IntOutput { return v.HealthCheckPort }).(pulumi.IntOutput)
}

// Defines whether proxy protocol should be activated for the health check
func (o LbBackendOutput) HealthCheckSendProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.BoolPtrOutput { return v.HealthCheckSendProxy }).(pulumi.BoolPtrOutput)
}

func (o LbBackendOutput) HealthCheckTcp() LbBackendHealthCheckTcpOutput {
	return o.ApplyT(func(v *LbBackend) LbBackendHealthCheckTcpOutput { return v.HealthCheckTcp }).(LbBackendHealthCheckTcpOutput)
}

// Timeout before we consider a HC request failed
func (o LbBackendOutput) HealthCheckTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.StringPtrOutput { return v.HealthCheckTimeout }).(pulumi.StringPtrOutput)
}

// Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)
func (o LbBackendOutput) HealthCheckTransientDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.StringPtrOutput { return v.HealthCheckTransientDelay }).(pulumi.StringPtrOutput)
}

// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection
func (o LbBackendOutput) IgnoreSslServerVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.BoolPtrOutput { return v.IgnoreSslServerVerify }).(pulumi.BoolPtrOutput)
}

// The load-balancer ID
func (o LbBackendOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.StringOutput { return v.LbId }).(pulumi.StringOutput)
}

// Maximum number of connections allowed per backend server
func (o LbBackendOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.IntPtrOutput { return v.MaxConnections }).(pulumi.IntPtrOutput)
}

// Number of retries when a backend server connection failed
func (o LbBackendOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.IntPtrOutput { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// The name of the backend
func (o LbBackendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Modify what occurs when a backend server is marked down
func (o LbBackendOutput) OnMarkedDownAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.StringPtrOutput { return v.OnMarkedDownAction }).(pulumi.StringPtrOutput)
}

// Type of PROXY protocol to enable
func (o LbBackendOutput) ProxyProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.StringPtrOutput { return v.ProxyProtocol }).(pulumi.StringPtrOutput)
}

// Whether to use another backend server on each attempt
func (o LbBackendOutput) RedispatchAttemptCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.IntPtrOutput { return v.RedispatchAttemptCount }).(pulumi.IntPtrOutput)
}

// Enables PROXY protocol version 2
//
// Deprecated: Please use proxyProtocol instead
func (o LbBackendOutput) SendProxyV2() pulumi.BoolOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.BoolOutput { return v.SendProxyV2 }).(pulumi.BoolOutput)
}

// Backend server IP addresses list (IPv4 or IPv6)
func (o LbBackendOutput) ServerIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.StringArrayOutput { return v.ServerIps }).(pulumi.StringArrayOutput)
}

// Enables SSL between load balancer and backend servers
func (o LbBackendOutput) SslBridging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.BoolPtrOutput { return v.SslBridging }).(pulumi.BoolPtrOutput)
}

// The type of sticky sessions
func (o LbBackendOutput) StickySessions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.StringPtrOutput { return v.StickySessions }).(pulumi.StringPtrOutput)
}

// Cookie name for sticky sessions
func (o LbBackendOutput) StickySessionsCookieName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.StringPtrOutput { return v.StickySessionsCookieName }).(pulumi.StringPtrOutput)
}

// Maximum initial server connection establishment time
func (o LbBackendOutput) TimeoutConnect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.StringPtrOutput { return v.TimeoutConnect }).(pulumi.StringPtrOutput)
}

// Maximum time (in seconds) for a request to be left pending in queue when `maxConnections` is reached
func (o LbBackendOutput) TimeoutQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.StringPtrOutput { return v.TimeoutQueue }).(pulumi.StringPtrOutput)
}

// Maximum server connection inactivity time
func (o LbBackendOutput) TimeoutServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.StringPtrOutput { return v.TimeoutServer }).(pulumi.StringPtrOutput)
}

// Maximum tunnel inactivity time
func (o LbBackendOutput) TimeoutTunnel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbBackend) pulumi.StringPtrOutput { return v.TimeoutTunnel }).(pulumi.StringPtrOutput)
}

type LbBackendArrayOutput struct{ *pulumi.OutputState }

func (LbBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbBackend)(nil)).Elem()
}

func (o LbBackendArrayOutput) ToLbBackendArrayOutput() LbBackendArrayOutput {
	return o
}

func (o LbBackendArrayOutput) ToLbBackendArrayOutputWithContext(ctx context.Context) LbBackendArrayOutput {
	return o
}

func (o LbBackendArrayOutput) Index(i pulumi.IntInput) LbBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LbBackend {
		return vs[0].([]*LbBackend)[vs[1].(int)]
	}).(LbBackendOutput)
}

type LbBackendMapOutput struct{ *pulumi.OutputState }

func (LbBackendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbBackend)(nil)).Elem()
}

func (o LbBackendMapOutput) ToLbBackendMapOutput() LbBackendMapOutput {
	return o
}

func (o LbBackendMapOutput) ToLbBackendMapOutputWithContext(ctx context.Context) LbBackendMapOutput {
	return o
}

func (o LbBackendMapOutput) MapIndex(k pulumi.StringInput) LbBackendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LbBackend {
		return vs[0].(map[string]*LbBackend)[vs[1].(string)]
	}).(LbBackendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LbBackendInput)(nil)).Elem(), &LbBackend{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbBackendArrayInput)(nil)).Elem(), LbBackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbBackendMapInput)(nil)).Elem(), LbBackendMap{})
	pulumi.RegisterOutputType(LbBackendOutput{})
	pulumi.RegisterOutputType(LbBackendArrayOutput{})
	pulumi.RegisterOutputType(LbBackendMapOutput{})
}
