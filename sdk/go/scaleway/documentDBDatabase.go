// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type DocumentDBDatabase struct {
	pulumi.CustomResourceState

	// Instance on which the database is created
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Whether or not the database is managed
	Managed pulumi.BoolOutput `pulumi:"managed"`
	// The database name
	Name pulumi.StringOutput `pulumi:"name"`
	// User that own the database
	Owner pulumi.StringOutput `pulumi:"owner"`
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region you want to attach the resource to
	Region pulumi.StringOutput `pulumi:"region"`
	// Size of the database
	Size pulumi.StringOutput `pulumi:"size"`
}

// NewDocumentDBDatabase registers a new resource with the given unique name, arguments, and options.
func NewDocumentDBDatabase(ctx *pulumi.Context,
	name string, args *DocumentDBDatabaseArgs, opts ...pulumi.ResourceOption) (*DocumentDBDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DocumentDBDatabase
	err := ctx.RegisterResource("scaleway:index/documentDBDatabase:DocumentDBDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDocumentDBDatabase gets an existing DocumentDBDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocumentDBDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DocumentDBDatabaseState, opts ...pulumi.ResourceOption) (*DocumentDBDatabase, error) {
	var resource DocumentDBDatabase
	err := ctx.ReadResource("scaleway:index/documentDBDatabase:DocumentDBDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DocumentDBDatabase resources.
type documentDBDatabaseState struct {
	// Instance on which the database is created
	InstanceId *string `pulumi:"instanceId"`
	// Whether or not the database is managed
	Managed *bool `pulumi:"managed"`
	// The database name
	Name *string `pulumi:"name"`
	// User that own the database
	Owner *string `pulumi:"owner"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// Size of the database
	Size *string `pulumi:"size"`
}

type DocumentDBDatabaseState struct {
	// Instance on which the database is created
	InstanceId pulumi.StringPtrInput
	// Whether or not the database is managed
	Managed pulumi.BoolPtrInput
	// The database name
	Name pulumi.StringPtrInput
	// User that own the database
	Owner pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// Size of the database
	Size pulumi.StringPtrInput
}

func (DocumentDBDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*documentDBDatabaseState)(nil)).Elem()
}

type documentDBDatabaseArgs struct {
	// Instance on which the database is created
	InstanceId string `pulumi:"instanceId"`
	// The database name
	Name *string `pulumi:"name"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a DocumentDBDatabase resource.
type DocumentDBDatabaseArgs struct {
	// Instance on which the database is created
	InstanceId pulumi.StringInput
	// The database name
	Name pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
}

func (DocumentDBDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*documentDBDatabaseArgs)(nil)).Elem()
}

type DocumentDBDatabaseInput interface {
	pulumi.Input

	ToDocumentDBDatabaseOutput() DocumentDBDatabaseOutput
	ToDocumentDBDatabaseOutputWithContext(ctx context.Context) DocumentDBDatabaseOutput
}

func (*DocumentDBDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentDBDatabase)(nil)).Elem()
}

func (i *DocumentDBDatabase) ToDocumentDBDatabaseOutput() DocumentDBDatabaseOutput {
	return i.ToDocumentDBDatabaseOutputWithContext(context.Background())
}

func (i *DocumentDBDatabase) ToDocumentDBDatabaseOutputWithContext(ctx context.Context) DocumentDBDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDBDatabaseOutput)
}

func (i *DocumentDBDatabase) ToOutput(ctx context.Context) pulumix.Output[*DocumentDBDatabase] {
	return pulumix.Output[*DocumentDBDatabase]{
		OutputState: i.ToDocumentDBDatabaseOutputWithContext(ctx).OutputState,
	}
}

// DocumentDBDatabaseArrayInput is an input type that accepts DocumentDBDatabaseArray and DocumentDBDatabaseArrayOutput values.
// You can construct a concrete instance of `DocumentDBDatabaseArrayInput` via:
//
//	DocumentDBDatabaseArray{ DocumentDBDatabaseArgs{...} }
type DocumentDBDatabaseArrayInput interface {
	pulumi.Input

	ToDocumentDBDatabaseArrayOutput() DocumentDBDatabaseArrayOutput
	ToDocumentDBDatabaseArrayOutputWithContext(context.Context) DocumentDBDatabaseArrayOutput
}

type DocumentDBDatabaseArray []DocumentDBDatabaseInput

func (DocumentDBDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DocumentDBDatabase)(nil)).Elem()
}

func (i DocumentDBDatabaseArray) ToDocumentDBDatabaseArrayOutput() DocumentDBDatabaseArrayOutput {
	return i.ToDocumentDBDatabaseArrayOutputWithContext(context.Background())
}

func (i DocumentDBDatabaseArray) ToDocumentDBDatabaseArrayOutputWithContext(ctx context.Context) DocumentDBDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDBDatabaseArrayOutput)
}

func (i DocumentDBDatabaseArray) ToOutput(ctx context.Context) pulumix.Output[[]*DocumentDBDatabase] {
	return pulumix.Output[[]*DocumentDBDatabase]{
		OutputState: i.ToDocumentDBDatabaseArrayOutputWithContext(ctx).OutputState,
	}
}

// DocumentDBDatabaseMapInput is an input type that accepts DocumentDBDatabaseMap and DocumentDBDatabaseMapOutput values.
// You can construct a concrete instance of `DocumentDBDatabaseMapInput` via:
//
//	DocumentDBDatabaseMap{ "key": DocumentDBDatabaseArgs{...} }
type DocumentDBDatabaseMapInput interface {
	pulumi.Input

	ToDocumentDBDatabaseMapOutput() DocumentDBDatabaseMapOutput
	ToDocumentDBDatabaseMapOutputWithContext(context.Context) DocumentDBDatabaseMapOutput
}

type DocumentDBDatabaseMap map[string]DocumentDBDatabaseInput

func (DocumentDBDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DocumentDBDatabase)(nil)).Elem()
}

func (i DocumentDBDatabaseMap) ToDocumentDBDatabaseMapOutput() DocumentDBDatabaseMapOutput {
	return i.ToDocumentDBDatabaseMapOutputWithContext(context.Background())
}

func (i DocumentDBDatabaseMap) ToDocumentDBDatabaseMapOutputWithContext(ctx context.Context) DocumentDBDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDBDatabaseMapOutput)
}

func (i DocumentDBDatabaseMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DocumentDBDatabase] {
	return pulumix.Output[map[string]*DocumentDBDatabase]{
		OutputState: i.ToDocumentDBDatabaseMapOutputWithContext(ctx).OutputState,
	}
}

type DocumentDBDatabaseOutput struct{ *pulumi.OutputState }

func (DocumentDBDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentDBDatabase)(nil)).Elem()
}

func (o DocumentDBDatabaseOutput) ToDocumentDBDatabaseOutput() DocumentDBDatabaseOutput {
	return o
}

func (o DocumentDBDatabaseOutput) ToDocumentDBDatabaseOutputWithContext(ctx context.Context) DocumentDBDatabaseOutput {
	return o
}

func (o DocumentDBDatabaseOutput) ToOutput(ctx context.Context) pulumix.Output[*DocumentDBDatabase] {
	return pulumix.Output[*DocumentDBDatabase]{
		OutputState: o.OutputState,
	}
}

// Instance on which the database is created
func (o DocumentDBDatabaseOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentDBDatabase) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Whether or not the database is managed
func (o DocumentDBDatabaseOutput) Managed() pulumi.BoolOutput {
	return o.ApplyT(func(v *DocumentDBDatabase) pulumi.BoolOutput { return v.Managed }).(pulumi.BoolOutput)
}

// The database name
func (o DocumentDBDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentDBDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// User that own the database
func (o DocumentDBDatabaseOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentDBDatabase) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// The project_id you want to attach the resource to
func (o DocumentDBDatabaseOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentDBDatabase) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The region you want to attach the resource to
func (o DocumentDBDatabaseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentDBDatabase) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Size of the database
func (o DocumentDBDatabaseOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentDBDatabase) pulumi.StringOutput { return v.Size }).(pulumi.StringOutput)
}

type DocumentDBDatabaseArrayOutput struct{ *pulumi.OutputState }

func (DocumentDBDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DocumentDBDatabase)(nil)).Elem()
}

func (o DocumentDBDatabaseArrayOutput) ToDocumentDBDatabaseArrayOutput() DocumentDBDatabaseArrayOutput {
	return o
}

func (o DocumentDBDatabaseArrayOutput) ToDocumentDBDatabaseArrayOutputWithContext(ctx context.Context) DocumentDBDatabaseArrayOutput {
	return o
}

func (o DocumentDBDatabaseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DocumentDBDatabase] {
	return pulumix.Output[[]*DocumentDBDatabase]{
		OutputState: o.OutputState,
	}
}

func (o DocumentDBDatabaseArrayOutput) Index(i pulumi.IntInput) DocumentDBDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DocumentDBDatabase {
		return vs[0].([]*DocumentDBDatabase)[vs[1].(int)]
	}).(DocumentDBDatabaseOutput)
}

type DocumentDBDatabaseMapOutput struct{ *pulumi.OutputState }

func (DocumentDBDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DocumentDBDatabase)(nil)).Elem()
}

func (o DocumentDBDatabaseMapOutput) ToDocumentDBDatabaseMapOutput() DocumentDBDatabaseMapOutput {
	return o
}

func (o DocumentDBDatabaseMapOutput) ToDocumentDBDatabaseMapOutputWithContext(ctx context.Context) DocumentDBDatabaseMapOutput {
	return o
}

func (o DocumentDBDatabaseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DocumentDBDatabase] {
	return pulumix.Output[map[string]*DocumentDBDatabase]{
		OutputState: o.OutputState,
	}
}

func (o DocumentDBDatabaseMapOutput) MapIndex(k pulumi.StringInput) DocumentDBDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DocumentDBDatabase {
		return vs[0].(map[string]*DocumentDBDatabase)[vs[1].(string)]
	}).(DocumentDBDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentDBDatabaseInput)(nil)).Elem(), &DocumentDBDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentDBDatabaseArrayInput)(nil)).Elem(), DocumentDBDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentDBDatabaseMapInput)(nil)).Elem(), DocumentDBDatabaseMap{})
	pulumi.RegisterOutputType(DocumentDBDatabaseOutput{})
	pulumi.RegisterOutputType(DocumentDBDatabaseArrayOutput{})
	pulumi.RegisterOutputType(DocumentDBDatabaseMapOutput{})
}
