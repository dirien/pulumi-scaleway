// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Kubernetes pools can be imported using the `{region}/{id}`, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:index/k8sPool:K8sPool mypool fr-par/11111111-1111-1111-1111-111111111111
//
// ```
type K8sPool struct {
	pulumi.CustomResourceState

	// Enables the autohealing feature for this pool.
	Autohealing pulumi.BoolPtrOutput `pulumi:"autohealing"`
	// Enables the autoscaling feature for this pool.
	// > **Important:** When enabled, an update of the `size` will not be taken into account.
	Autoscaling pulumi.BoolPtrOutput `pulumi:"autoscaling"`
	// The ID of the Kubernetes cluster on which this pool will be created.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The container runtime of the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	ContainerRuntime pulumi.StringPtrOutput `pulumi:"containerRuntime"`
	// The creation date of the pool.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The actual size of the pool
	CurrentSize pulumi.IntOutput `pulumi:"currentSize"`
	// The Kubelet arguments to be used by this pool
	KubeletArgs pulumi.StringMapOutput `pulumi:"kubeletArgs"`
	// The maximum size of the pool, used by the autoscaling feature.
	MaxSize pulumi.IntOutput `pulumi:"maxSize"`
	// The minimum size of the pool, used by the autoscaling feature.
	MinSize pulumi.IntPtrOutput `pulumi:"minSize"`
	// The name for the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// (List of) The nodes in the default pool.
	Nodes K8sPoolNodeArrayOutput `pulumi:"nodes"`
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.
	// > **Important:** Updates to this field will recreate a new resource.
	PlacementGroupId pulumi.StringPtrOutput `pulumi:"placementGroupId"`
	// `region`) The region in which the pool should be created.
	Region pulumi.StringOutput `pulumi:"region"`
	// The size of the system volume of the nodes in gigabyte
	RootVolumeSizeInGb pulumi.IntPtrOutput `pulumi:"rootVolumeSizeInGb"`
	// System volume type of the nodes composing the pool
	RootVolumeType pulumi.StringPtrOutput `pulumi:"rootVolumeType"`
	// The size of the pool.
	// > **Important:** This field will only be used at creation if autoscaling is enabled.
	Size pulumi.IntOutput `pulumi:"size"`
	// The status of the node.
	Status pulumi.StringOutput `pulumi:"status"`
	// The tags associated with the pool.
	// > Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (Example: "taint=taintName=taineValue:Effect")
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The last update date of the pool.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The Pool upgrade policy
	UpgradePolicy K8sPoolUpgradePolicyOutput `pulumi:"upgradePolicy"`
	// The version of the pool.
	Version pulumi.StringOutput `pulumi:"version"`
	// Whether to wait for the pool to be ready.
	WaitForPoolReady pulumi.BoolPtrOutput `pulumi:"waitForPoolReady"`
	// `zone`) The zone in which the pool should be created.
	// > **Important:** Updates to this field will recreate a new resource.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewK8sPool registers a new resource with the given unique name, arguments, and options.
func NewK8sPool(ctx *pulumi.Context,
	name string, args *K8sPoolArgs, opts ...pulumi.ResourceOption) (*K8sPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource K8sPool
	err := ctx.RegisterResource("scaleway:index/k8sPool:K8sPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetK8sPool gets an existing K8sPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetK8sPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *K8sPoolState, opts ...pulumi.ResourceOption) (*K8sPool, error) {
	var resource K8sPool
	err := ctx.ReadResource("scaleway:index/k8sPool:K8sPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering K8sPool resources.
type k8sPoolState struct {
	// Enables the autohealing feature for this pool.
	Autohealing *bool `pulumi:"autohealing"`
	// Enables the autoscaling feature for this pool.
	// > **Important:** When enabled, an update of the `size` will not be taken into account.
	Autoscaling *bool `pulumi:"autoscaling"`
	// The ID of the Kubernetes cluster on which this pool will be created.
	ClusterId *string `pulumi:"clusterId"`
	// The container runtime of the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	ContainerRuntime *string `pulumi:"containerRuntime"`
	// The creation date of the pool.
	CreatedAt *string `pulumi:"createdAt"`
	// The actual size of the pool
	CurrentSize *int `pulumi:"currentSize"`
	// The Kubelet arguments to be used by this pool
	KubeletArgs map[string]string `pulumi:"kubeletArgs"`
	// The maximum size of the pool, used by the autoscaling feature.
	MaxSize *int `pulumi:"maxSize"`
	// The minimum size of the pool, used by the autoscaling feature.
	MinSize *int `pulumi:"minSize"`
	// The name for the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	Name *string `pulumi:"name"`
	// The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	NodeType *string `pulumi:"nodeType"`
	// (List of) The nodes in the default pool.
	Nodes []K8sPoolNode `pulumi:"nodes"`
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.
	// > **Important:** Updates to this field will recreate a new resource.
	PlacementGroupId *string `pulumi:"placementGroupId"`
	// `region`) The region in which the pool should be created.
	Region *string `pulumi:"region"`
	// The size of the system volume of the nodes in gigabyte
	RootVolumeSizeInGb *int `pulumi:"rootVolumeSizeInGb"`
	// System volume type of the nodes composing the pool
	RootVolumeType *string `pulumi:"rootVolumeType"`
	// The size of the pool.
	// > **Important:** This field will only be used at creation if autoscaling is enabled.
	Size *int `pulumi:"size"`
	// The status of the node.
	Status *string `pulumi:"status"`
	// The tags associated with the pool.
	// > Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (Example: "taint=taintName=taineValue:Effect")
	Tags []string `pulumi:"tags"`
	// The last update date of the pool.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The Pool upgrade policy
	UpgradePolicy *K8sPoolUpgradePolicy `pulumi:"upgradePolicy"`
	// The version of the pool.
	Version *string `pulumi:"version"`
	// Whether to wait for the pool to be ready.
	WaitForPoolReady *bool `pulumi:"waitForPoolReady"`
	// `zone`) The zone in which the pool should be created.
	// > **Important:** Updates to this field will recreate a new resource.
	Zone *string `pulumi:"zone"`
}

type K8sPoolState struct {
	// Enables the autohealing feature for this pool.
	Autohealing pulumi.BoolPtrInput
	// Enables the autoscaling feature for this pool.
	// > **Important:** When enabled, an update of the `size` will not be taken into account.
	Autoscaling pulumi.BoolPtrInput
	// The ID of the Kubernetes cluster on which this pool will be created.
	ClusterId pulumi.StringPtrInput
	// The container runtime of the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	ContainerRuntime pulumi.StringPtrInput
	// The creation date of the pool.
	CreatedAt pulumi.StringPtrInput
	// The actual size of the pool
	CurrentSize pulumi.IntPtrInput
	// The Kubelet arguments to be used by this pool
	KubeletArgs pulumi.StringMapInput
	// The maximum size of the pool, used by the autoscaling feature.
	MaxSize pulumi.IntPtrInput
	// The minimum size of the pool, used by the autoscaling feature.
	MinSize pulumi.IntPtrInput
	// The name for the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	Name pulumi.StringPtrInput
	// The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	NodeType pulumi.StringPtrInput
	// (List of) The nodes in the default pool.
	Nodes K8sPoolNodeArrayInput
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.
	// > **Important:** Updates to this field will recreate a new resource.
	PlacementGroupId pulumi.StringPtrInput
	// `region`) The region in which the pool should be created.
	Region pulumi.StringPtrInput
	// The size of the system volume of the nodes in gigabyte
	RootVolumeSizeInGb pulumi.IntPtrInput
	// System volume type of the nodes composing the pool
	RootVolumeType pulumi.StringPtrInput
	// The size of the pool.
	// > **Important:** This field will only be used at creation if autoscaling is enabled.
	Size pulumi.IntPtrInput
	// The status of the node.
	Status pulumi.StringPtrInput
	// The tags associated with the pool.
	// > Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (Example: "taint=taintName=taineValue:Effect")
	Tags pulumi.StringArrayInput
	// The last update date of the pool.
	UpdatedAt pulumi.StringPtrInput
	// The Pool upgrade policy
	UpgradePolicy K8sPoolUpgradePolicyPtrInput
	// The version of the pool.
	Version pulumi.StringPtrInput
	// Whether to wait for the pool to be ready.
	WaitForPoolReady pulumi.BoolPtrInput
	// `zone`) The zone in which the pool should be created.
	// > **Important:** Updates to this field will recreate a new resource.
	Zone pulumi.StringPtrInput
}

func (K8sPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*k8sPoolState)(nil)).Elem()
}

type k8sPoolArgs struct {
	// Enables the autohealing feature for this pool.
	Autohealing *bool `pulumi:"autohealing"`
	// Enables the autoscaling feature for this pool.
	// > **Important:** When enabled, an update of the `size` will not be taken into account.
	Autoscaling *bool `pulumi:"autoscaling"`
	// The ID of the Kubernetes cluster on which this pool will be created.
	ClusterId string `pulumi:"clusterId"`
	// The container runtime of the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	ContainerRuntime *string `pulumi:"containerRuntime"`
	// The Kubelet arguments to be used by this pool
	KubeletArgs map[string]string `pulumi:"kubeletArgs"`
	// The maximum size of the pool, used by the autoscaling feature.
	MaxSize *int `pulumi:"maxSize"`
	// The minimum size of the pool, used by the autoscaling feature.
	MinSize *int `pulumi:"minSize"`
	// The name for the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	Name *string `pulumi:"name"`
	// The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	NodeType string `pulumi:"nodeType"`
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.
	// > **Important:** Updates to this field will recreate a new resource.
	PlacementGroupId *string `pulumi:"placementGroupId"`
	// `region`) The region in which the pool should be created.
	Region *string `pulumi:"region"`
	// The size of the system volume of the nodes in gigabyte
	RootVolumeSizeInGb *int `pulumi:"rootVolumeSizeInGb"`
	// System volume type of the nodes composing the pool
	RootVolumeType *string `pulumi:"rootVolumeType"`
	// The size of the pool.
	// > **Important:** This field will only be used at creation if autoscaling is enabled.
	Size int `pulumi:"size"`
	// The tags associated with the pool.
	// > Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (Example: "taint=taintName=taineValue:Effect")
	Tags []string `pulumi:"tags"`
	// The Pool upgrade policy
	UpgradePolicy *K8sPoolUpgradePolicy `pulumi:"upgradePolicy"`
	// Whether to wait for the pool to be ready.
	WaitForPoolReady *bool `pulumi:"waitForPoolReady"`
	// `zone`) The zone in which the pool should be created.
	// > **Important:** Updates to this field will recreate a new resource.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a K8sPool resource.
type K8sPoolArgs struct {
	// Enables the autohealing feature for this pool.
	Autohealing pulumi.BoolPtrInput
	// Enables the autoscaling feature for this pool.
	// > **Important:** When enabled, an update of the `size` will not be taken into account.
	Autoscaling pulumi.BoolPtrInput
	// The ID of the Kubernetes cluster on which this pool will be created.
	ClusterId pulumi.StringInput
	// The container runtime of the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	ContainerRuntime pulumi.StringPtrInput
	// The Kubelet arguments to be used by this pool
	KubeletArgs pulumi.StringMapInput
	// The maximum size of the pool, used by the autoscaling feature.
	MaxSize pulumi.IntPtrInput
	// The minimum size of the pool, used by the autoscaling feature.
	MinSize pulumi.IntPtrInput
	// The name for the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	Name pulumi.StringPtrInput
	// The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	NodeType pulumi.StringInput
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.
	// > **Important:** Updates to this field will recreate a new resource.
	PlacementGroupId pulumi.StringPtrInput
	// `region`) The region in which the pool should be created.
	Region pulumi.StringPtrInput
	// The size of the system volume of the nodes in gigabyte
	RootVolumeSizeInGb pulumi.IntPtrInput
	// System volume type of the nodes composing the pool
	RootVolumeType pulumi.StringPtrInput
	// The size of the pool.
	// > **Important:** This field will only be used at creation if autoscaling is enabled.
	Size pulumi.IntInput
	// The tags associated with the pool.
	// > Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (Example: "taint=taintName=taineValue:Effect")
	Tags pulumi.StringArrayInput
	// The Pool upgrade policy
	UpgradePolicy K8sPoolUpgradePolicyPtrInput
	// Whether to wait for the pool to be ready.
	WaitForPoolReady pulumi.BoolPtrInput
	// `zone`) The zone in which the pool should be created.
	// > **Important:** Updates to this field will recreate a new resource.
	Zone pulumi.StringPtrInput
}

func (K8sPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*k8sPoolArgs)(nil)).Elem()
}

type K8sPoolInput interface {
	pulumi.Input

	ToK8sPoolOutput() K8sPoolOutput
	ToK8sPoolOutputWithContext(ctx context.Context) K8sPoolOutput
}

func (*K8sPool) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sPool)(nil)).Elem()
}

func (i *K8sPool) ToK8sPoolOutput() K8sPoolOutput {
	return i.ToK8sPoolOutputWithContext(context.Background())
}

func (i *K8sPool) ToK8sPoolOutputWithContext(ctx context.Context) K8sPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sPoolOutput)
}

// K8sPoolArrayInput is an input type that accepts K8sPoolArray and K8sPoolArrayOutput values.
// You can construct a concrete instance of `K8sPoolArrayInput` via:
//
//	K8sPoolArray{ K8sPoolArgs{...} }
type K8sPoolArrayInput interface {
	pulumi.Input

	ToK8sPoolArrayOutput() K8sPoolArrayOutput
	ToK8sPoolArrayOutputWithContext(context.Context) K8sPoolArrayOutput
}

type K8sPoolArray []K8sPoolInput

func (K8sPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8sPool)(nil)).Elem()
}

func (i K8sPoolArray) ToK8sPoolArrayOutput() K8sPoolArrayOutput {
	return i.ToK8sPoolArrayOutputWithContext(context.Background())
}

func (i K8sPoolArray) ToK8sPoolArrayOutputWithContext(ctx context.Context) K8sPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sPoolArrayOutput)
}

// K8sPoolMapInput is an input type that accepts K8sPoolMap and K8sPoolMapOutput values.
// You can construct a concrete instance of `K8sPoolMapInput` via:
//
//	K8sPoolMap{ "key": K8sPoolArgs{...} }
type K8sPoolMapInput interface {
	pulumi.Input

	ToK8sPoolMapOutput() K8sPoolMapOutput
	ToK8sPoolMapOutputWithContext(context.Context) K8sPoolMapOutput
}

type K8sPoolMap map[string]K8sPoolInput

func (K8sPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8sPool)(nil)).Elem()
}

func (i K8sPoolMap) ToK8sPoolMapOutput() K8sPoolMapOutput {
	return i.ToK8sPoolMapOutputWithContext(context.Background())
}

func (i K8sPoolMap) ToK8sPoolMapOutputWithContext(ctx context.Context) K8sPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sPoolMapOutput)
}

type K8sPoolOutput struct{ *pulumi.OutputState }

func (K8sPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sPool)(nil)).Elem()
}

func (o K8sPoolOutput) ToK8sPoolOutput() K8sPoolOutput {
	return o
}

func (o K8sPoolOutput) ToK8sPoolOutputWithContext(ctx context.Context) K8sPoolOutput {
	return o
}

// Enables the autohealing feature for this pool.
func (o K8sPoolOutput) Autohealing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.BoolPtrOutput { return v.Autohealing }).(pulumi.BoolPtrOutput)
}

// Enables the autoscaling feature for this pool.
// > **Important:** When enabled, an update of the `size` will not be taken into account.
func (o K8sPoolOutput) Autoscaling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.BoolPtrOutput { return v.Autoscaling }).(pulumi.BoolPtrOutput)
}

// The ID of the Kubernetes cluster on which this pool will be created.
func (o K8sPoolOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The container runtime of the pool.
// > **Important:** Updates to this field will recreate a new resource.
func (o K8sPoolOutput) ContainerRuntime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.StringPtrOutput { return v.ContainerRuntime }).(pulumi.StringPtrOutput)
}

// The creation date of the pool.
func (o K8sPoolOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The actual size of the pool
func (o K8sPoolOutput) CurrentSize() pulumi.IntOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.IntOutput { return v.CurrentSize }).(pulumi.IntOutput)
}

// The Kubelet arguments to be used by this pool
func (o K8sPoolOutput) KubeletArgs() pulumi.StringMapOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.StringMapOutput { return v.KubeletArgs }).(pulumi.StringMapOutput)
}

// The maximum size of the pool, used by the autoscaling feature.
func (o K8sPoolOutput) MaxSize() pulumi.IntOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.IntOutput { return v.MaxSize }).(pulumi.IntOutput)
}

// The minimum size of the pool, used by the autoscaling feature.
func (o K8sPoolOutput) MinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.IntPtrOutput { return v.MinSize }).(pulumi.IntPtrOutput)
}

// The name for the pool.
// > **Important:** Updates to this field will recreate a new resource.
func (o K8sPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.
//
// > **Important:** Updates to this field will recreate a new resource.
func (o K8sPoolOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// (List of) The nodes in the default pool.
func (o K8sPoolOutput) Nodes() K8sPoolNodeArrayOutput {
	return o.ApplyT(func(v *K8sPool) K8sPoolNodeArrayOutput { return v.Nodes }).(K8sPoolNodeArrayOutput)
}

// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.
// > **Important:** Updates to this field will recreate a new resource.
func (o K8sPoolOutput) PlacementGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.StringPtrOutput { return v.PlacementGroupId }).(pulumi.StringPtrOutput)
}

// `region`) The region in which the pool should be created.
func (o K8sPoolOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The size of the system volume of the nodes in gigabyte
func (o K8sPoolOutput) RootVolumeSizeInGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.IntPtrOutput { return v.RootVolumeSizeInGb }).(pulumi.IntPtrOutput)
}

// System volume type of the nodes composing the pool
func (o K8sPoolOutput) RootVolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.StringPtrOutput { return v.RootVolumeType }).(pulumi.StringPtrOutput)
}

// The size of the pool.
// > **Important:** This field will only be used at creation if autoscaling is enabled.
func (o K8sPoolOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The status of the node.
func (o K8sPoolOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The tags associated with the pool.
// > Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (Example: "taint=taintName=taineValue:Effect")
func (o K8sPoolOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The last update date of the pool.
func (o K8sPoolOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The Pool upgrade policy
func (o K8sPoolOutput) UpgradePolicy() K8sPoolUpgradePolicyOutput {
	return o.ApplyT(func(v *K8sPool) K8sPoolUpgradePolicyOutput { return v.UpgradePolicy }).(K8sPoolUpgradePolicyOutput)
}

// The version of the pool.
func (o K8sPoolOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// Whether to wait for the pool to be ready.
func (o K8sPoolOutput) WaitForPoolReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.BoolPtrOutput { return v.WaitForPoolReady }).(pulumi.BoolPtrOutput)
}

// `zone`) The zone in which the pool should be created.
// > **Important:** Updates to this field will recreate a new resource.
func (o K8sPoolOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *K8sPool) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type K8sPoolArrayOutput struct{ *pulumi.OutputState }

func (K8sPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8sPool)(nil)).Elem()
}

func (o K8sPoolArrayOutput) ToK8sPoolArrayOutput() K8sPoolArrayOutput {
	return o
}

func (o K8sPoolArrayOutput) ToK8sPoolArrayOutputWithContext(ctx context.Context) K8sPoolArrayOutput {
	return o
}

func (o K8sPoolArrayOutput) Index(i pulumi.IntInput) K8sPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *K8sPool {
		return vs[0].([]*K8sPool)[vs[1].(int)]
	}).(K8sPoolOutput)
}

type K8sPoolMapOutput struct{ *pulumi.OutputState }

func (K8sPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8sPool)(nil)).Elem()
}

func (o K8sPoolMapOutput) ToK8sPoolMapOutput() K8sPoolMapOutput {
	return o
}

func (o K8sPoolMapOutput) ToK8sPoolMapOutputWithContext(ctx context.Context) K8sPoolMapOutput {
	return o
}

func (o K8sPoolMapOutput) MapIndex(k pulumi.StringInput) K8sPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *K8sPool {
		return vs[0].(map[string]*K8sPool)[vs[1].(string)]
	}).(K8sPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*K8sPoolInput)(nil)).Elem(), &K8sPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sPoolArrayInput)(nil)).Elem(), K8sPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sPoolMapInput)(nil)).Elem(), K8sPoolMap{})
	pulumi.RegisterOutputType(K8sPoolOutput{})
	pulumi.RegisterOutputType(K8sPoolArrayOutput{})
	pulumi.RegisterOutputType(K8sPoolMapOutput{})
}
