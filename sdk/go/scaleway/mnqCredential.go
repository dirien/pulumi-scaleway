// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Credential can be imported using the `{region}/{id}`, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:index/mnqCredential:MnqCredential main fr-par/11111111111111111111111111111111
//
// ```
type MnqCredential struct {
	pulumi.CustomResourceState

	// The credential name..
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace containing the Credential.
	NamespaceId pulumi.StringOutput `pulumi:"namespaceId"`
	// Credentials file used to connect to the NATS service.
	NatsCredentials MnqCredentialNatsCredentialsOutput `pulumi:"natsCredentials"`
	// The protocol associated to the Credential. Possible values are `nats` and `sqsSns`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// (Defaults to provider `region`). The region
	// in which the namespace should be created.
	Region pulumi.StringOutput `pulumi:"region"`
	// Credential used to connect to the SQS/SNS service.
	SqsSnsCredentials MnqCredentialSqsSnsCredentialsPtrOutput `pulumi:"sqsSnsCredentials"`
}

// NewMnqCredential registers a new resource with the given unique name, arguments, and options.
func NewMnqCredential(ctx *pulumi.Context,
	name string, args *MnqCredentialArgs, opts ...pulumi.ResourceOption) (*MnqCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NamespaceId == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MnqCredential
	err := ctx.RegisterResource("scaleway:index/mnqCredential:MnqCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMnqCredential gets an existing MnqCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMnqCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MnqCredentialState, opts ...pulumi.ResourceOption) (*MnqCredential, error) {
	var resource MnqCredential
	err := ctx.ReadResource("scaleway:index/mnqCredential:MnqCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MnqCredential resources.
type mnqCredentialState struct {
	// The credential name..
	Name *string `pulumi:"name"`
	// The namespace containing the Credential.
	NamespaceId *string `pulumi:"namespaceId"`
	// Credentials file used to connect to the NATS service.
	NatsCredentials *MnqCredentialNatsCredentials `pulumi:"natsCredentials"`
	// The protocol associated to the Credential. Possible values are `nats` and `sqsSns`.
	Protocol *string `pulumi:"protocol"`
	// (Defaults to provider `region`). The region
	// in which the namespace should be created.
	Region *string `pulumi:"region"`
	// Credential used to connect to the SQS/SNS service.
	SqsSnsCredentials *MnqCredentialSqsSnsCredentials `pulumi:"sqsSnsCredentials"`
}

type MnqCredentialState struct {
	// The credential name..
	Name pulumi.StringPtrInput
	// The namespace containing the Credential.
	NamespaceId pulumi.StringPtrInput
	// Credentials file used to connect to the NATS service.
	NatsCredentials MnqCredentialNatsCredentialsPtrInput
	// The protocol associated to the Credential. Possible values are `nats` and `sqsSns`.
	Protocol pulumi.StringPtrInput
	// (Defaults to provider `region`). The region
	// in which the namespace should be created.
	Region pulumi.StringPtrInput
	// Credential used to connect to the SQS/SNS service.
	SqsSnsCredentials MnqCredentialSqsSnsCredentialsPtrInput
}

func (MnqCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*mnqCredentialState)(nil)).Elem()
}

type mnqCredentialArgs struct {
	// The credential name..
	Name *string `pulumi:"name"`
	// The namespace containing the Credential.
	NamespaceId string `pulumi:"namespaceId"`
	// Credentials file used to connect to the NATS service.
	NatsCredentials *MnqCredentialNatsCredentials `pulumi:"natsCredentials"`
	// (Defaults to provider `region`). The region
	// in which the namespace should be created.
	Region *string `pulumi:"region"`
	// Credential used to connect to the SQS/SNS service.
	SqsSnsCredentials *MnqCredentialSqsSnsCredentials `pulumi:"sqsSnsCredentials"`
}

// The set of arguments for constructing a MnqCredential resource.
type MnqCredentialArgs struct {
	// The credential name..
	Name pulumi.StringPtrInput
	// The namespace containing the Credential.
	NamespaceId pulumi.StringInput
	// Credentials file used to connect to the NATS service.
	NatsCredentials MnqCredentialNatsCredentialsPtrInput
	// (Defaults to provider `region`). The region
	// in which the namespace should be created.
	Region pulumi.StringPtrInput
	// Credential used to connect to the SQS/SNS service.
	SqsSnsCredentials MnqCredentialSqsSnsCredentialsPtrInput
}

func (MnqCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mnqCredentialArgs)(nil)).Elem()
}

type MnqCredentialInput interface {
	pulumi.Input

	ToMnqCredentialOutput() MnqCredentialOutput
	ToMnqCredentialOutputWithContext(ctx context.Context) MnqCredentialOutput
}

func (*MnqCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**MnqCredential)(nil)).Elem()
}

func (i *MnqCredential) ToMnqCredentialOutput() MnqCredentialOutput {
	return i.ToMnqCredentialOutputWithContext(context.Background())
}

func (i *MnqCredential) ToMnqCredentialOutputWithContext(ctx context.Context) MnqCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqCredentialOutput)
}

// MnqCredentialArrayInput is an input type that accepts MnqCredentialArray and MnqCredentialArrayOutput values.
// You can construct a concrete instance of `MnqCredentialArrayInput` via:
//
//	MnqCredentialArray{ MnqCredentialArgs{...} }
type MnqCredentialArrayInput interface {
	pulumi.Input

	ToMnqCredentialArrayOutput() MnqCredentialArrayOutput
	ToMnqCredentialArrayOutputWithContext(context.Context) MnqCredentialArrayOutput
}

type MnqCredentialArray []MnqCredentialInput

func (MnqCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MnqCredential)(nil)).Elem()
}

func (i MnqCredentialArray) ToMnqCredentialArrayOutput() MnqCredentialArrayOutput {
	return i.ToMnqCredentialArrayOutputWithContext(context.Background())
}

func (i MnqCredentialArray) ToMnqCredentialArrayOutputWithContext(ctx context.Context) MnqCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqCredentialArrayOutput)
}

// MnqCredentialMapInput is an input type that accepts MnqCredentialMap and MnqCredentialMapOutput values.
// You can construct a concrete instance of `MnqCredentialMapInput` via:
//
//	MnqCredentialMap{ "key": MnqCredentialArgs{...} }
type MnqCredentialMapInput interface {
	pulumi.Input

	ToMnqCredentialMapOutput() MnqCredentialMapOutput
	ToMnqCredentialMapOutputWithContext(context.Context) MnqCredentialMapOutput
}

type MnqCredentialMap map[string]MnqCredentialInput

func (MnqCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MnqCredential)(nil)).Elem()
}

func (i MnqCredentialMap) ToMnqCredentialMapOutput() MnqCredentialMapOutput {
	return i.ToMnqCredentialMapOutputWithContext(context.Background())
}

func (i MnqCredentialMap) ToMnqCredentialMapOutputWithContext(ctx context.Context) MnqCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqCredentialMapOutput)
}

type MnqCredentialOutput struct{ *pulumi.OutputState }

func (MnqCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MnqCredential)(nil)).Elem()
}

func (o MnqCredentialOutput) ToMnqCredentialOutput() MnqCredentialOutput {
	return o
}

func (o MnqCredentialOutput) ToMnqCredentialOutputWithContext(ctx context.Context) MnqCredentialOutput {
	return o
}

// The credential name..
func (o MnqCredentialOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MnqCredential) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The namespace containing the Credential.
func (o MnqCredentialOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MnqCredential) pulumi.StringOutput { return v.NamespaceId }).(pulumi.StringOutput)
}

// Credentials file used to connect to the NATS service.
func (o MnqCredentialOutput) NatsCredentials() MnqCredentialNatsCredentialsOutput {
	return o.ApplyT(func(v *MnqCredential) MnqCredentialNatsCredentialsOutput { return v.NatsCredentials }).(MnqCredentialNatsCredentialsOutput)
}

// The protocol associated to the Credential. Possible values are `nats` and `sqsSns`.
func (o MnqCredentialOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *MnqCredential) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// (Defaults to provider `region`). The region
// in which the namespace should be created.
func (o MnqCredentialOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MnqCredential) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Credential used to connect to the SQS/SNS service.
func (o MnqCredentialOutput) SqsSnsCredentials() MnqCredentialSqsSnsCredentialsPtrOutput {
	return o.ApplyT(func(v *MnqCredential) MnqCredentialSqsSnsCredentialsPtrOutput { return v.SqsSnsCredentials }).(MnqCredentialSqsSnsCredentialsPtrOutput)
}

type MnqCredentialArrayOutput struct{ *pulumi.OutputState }

func (MnqCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MnqCredential)(nil)).Elem()
}

func (o MnqCredentialArrayOutput) ToMnqCredentialArrayOutput() MnqCredentialArrayOutput {
	return o
}

func (o MnqCredentialArrayOutput) ToMnqCredentialArrayOutputWithContext(ctx context.Context) MnqCredentialArrayOutput {
	return o
}

func (o MnqCredentialArrayOutput) Index(i pulumi.IntInput) MnqCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MnqCredential {
		return vs[0].([]*MnqCredential)[vs[1].(int)]
	}).(MnqCredentialOutput)
}

type MnqCredentialMapOutput struct{ *pulumi.OutputState }

func (MnqCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MnqCredential)(nil)).Elem()
}

func (o MnqCredentialMapOutput) ToMnqCredentialMapOutput() MnqCredentialMapOutput {
	return o
}

func (o MnqCredentialMapOutput) ToMnqCredentialMapOutputWithContext(ctx context.Context) MnqCredentialMapOutput {
	return o
}

func (o MnqCredentialMapOutput) MapIndex(k pulumi.StringInput) MnqCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MnqCredential {
		return vs[0].(map[string]*MnqCredential)[vs[1].(string)]
	}).(MnqCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MnqCredentialInput)(nil)).Elem(), &MnqCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*MnqCredentialArrayInput)(nil)).Elem(), MnqCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MnqCredentialMapInput)(nil)).Elem(), MnqCredentialMap{})
	pulumi.RegisterOutputType(MnqCredentialOutput{})
	pulumi.RegisterOutputType(MnqCredentialArrayOutput{})
	pulumi.RegisterOutputType(MnqCredentialMapOutput{})
}
