// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages Scaleway MongoDB® snapshots.
// For more information refer to [the API documentation](https://www.scaleway.com/en/docs/managed-databases/mongodb/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewMongodbSnapshot(ctx, "main", &scaleway.MongodbSnapshotArgs{
//				ExpiresAt:  pulumi.String("2024-12-31T23:59:59Z"),
//				InstanceId: pulumi.Any(scaleway_mongodb_instance.Main.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MongoDB® snapshots can be imported using the `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/mongodbSnapshot:MongodbSnapshot main fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type MongodbSnapshot struct {
	pulumi.CustomResourceState

	// The date and time when the MongoDB® snapshot was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
	//
	// > **Important:** Once set, `expiresAt` cannot be removed.
	ExpiresAt pulumi.StringOutput `pulumi:"expiresAt"`
	// The ID of the MongoDB® instance from which the snapshot was created.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The name of the MongoDB® instance from which the snapshot was created.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// The name of the MongoDB® snapshot.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of node associated with the MongoDB® snapshot.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// `region`) The region in which the MongoDB® snapshot should be created.
	Region pulumi.StringOutput `pulumi:"region"`
	// The size of the MongoDB® snapshot in bytes.
	Size pulumi.IntOutput `pulumi:"size"`
	// The date and time of the last update of the MongoDB® snapshot.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The type of volume used for the MongoDB® snapshot.
	VolumeType pulumi.StringOutput `pulumi:"volumeType"`
}

// NewMongodbSnapshot registers a new resource with the given unique name, arguments, and options.
func NewMongodbSnapshot(ctx *pulumi.Context,
	name string, args *MongodbSnapshotArgs, opts ...pulumi.ResourceOption) (*MongodbSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExpiresAt == nil {
		return nil, errors.New("invalid value for required argument 'ExpiresAt'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MongodbSnapshot
	err := ctx.RegisterResource("scaleway:index/mongodbSnapshot:MongodbSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongodbSnapshot gets an existing MongodbSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongodbSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongodbSnapshotState, opts ...pulumi.ResourceOption) (*MongodbSnapshot, error) {
	var resource MongodbSnapshot
	err := ctx.ReadResource("scaleway:index/mongodbSnapshot:MongodbSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongodbSnapshot resources.
type mongodbSnapshotState struct {
	// The date and time when the MongoDB® snapshot was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
	//
	// > **Important:** Once set, `expiresAt` cannot be removed.
	ExpiresAt *string `pulumi:"expiresAt"`
	// The ID of the MongoDB® instance from which the snapshot was created.
	InstanceId *string `pulumi:"instanceId"`
	// The name of the MongoDB® instance from which the snapshot was created.
	InstanceName *string `pulumi:"instanceName"`
	// The name of the MongoDB® snapshot.
	Name *string `pulumi:"name"`
	// The type of node associated with the MongoDB® snapshot.
	NodeType *string `pulumi:"nodeType"`
	// `region`) The region in which the MongoDB® snapshot should be created.
	Region *string `pulumi:"region"`
	// The size of the MongoDB® snapshot in bytes.
	Size *int `pulumi:"size"`
	// The date and time of the last update of the MongoDB® snapshot.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The type of volume used for the MongoDB® snapshot.
	VolumeType *string `pulumi:"volumeType"`
}

type MongodbSnapshotState struct {
	// The date and time when the MongoDB® snapshot was created.
	CreatedAt pulumi.StringPtrInput
	// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
	//
	// > **Important:** Once set, `expiresAt` cannot be removed.
	ExpiresAt pulumi.StringPtrInput
	// The ID of the MongoDB® instance from which the snapshot was created.
	InstanceId pulumi.StringPtrInput
	// The name of the MongoDB® instance from which the snapshot was created.
	InstanceName pulumi.StringPtrInput
	// The name of the MongoDB® snapshot.
	Name pulumi.StringPtrInput
	// The type of node associated with the MongoDB® snapshot.
	NodeType pulumi.StringPtrInput
	// `region`) The region in which the MongoDB® snapshot should be created.
	Region pulumi.StringPtrInput
	// The size of the MongoDB® snapshot in bytes.
	Size pulumi.IntPtrInput
	// The date and time of the last update of the MongoDB® snapshot.
	UpdatedAt pulumi.StringPtrInput
	// The type of volume used for the MongoDB® snapshot.
	VolumeType pulumi.StringPtrInput
}

func (MongodbSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongodbSnapshotState)(nil)).Elem()
}

type mongodbSnapshotArgs struct {
	// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
	//
	// > **Important:** Once set, `expiresAt` cannot be removed.
	ExpiresAt string `pulumi:"expiresAt"`
	// The ID of the MongoDB® instance from which the snapshot was created.
	InstanceId string `pulumi:"instanceId"`
	// The name of the MongoDB® snapshot.
	Name *string `pulumi:"name"`
	// `region`) The region in which the MongoDB® snapshot should be created.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a MongodbSnapshot resource.
type MongodbSnapshotArgs struct {
	// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
	//
	// > **Important:** Once set, `expiresAt` cannot be removed.
	ExpiresAt pulumi.StringInput
	// The ID of the MongoDB® instance from which the snapshot was created.
	InstanceId pulumi.StringInput
	// The name of the MongoDB® snapshot.
	Name pulumi.StringPtrInput
	// `region`) The region in which the MongoDB® snapshot should be created.
	Region pulumi.StringPtrInput
}

func (MongodbSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongodbSnapshotArgs)(nil)).Elem()
}

type MongodbSnapshotInput interface {
	pulumi.Input

	ToMongodbSnapshotOutput() MongodbSnapshotOutput
	ToMongodbSnapshotOutputWithContext(ctx context.Context) MongodbSnapshotOutput
}

func (*MongodbSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbSnapshot)(nil)).Elem()
}

func (i *MongodbSnapshot) ToMongodbSnapshotOutput() MongodbSnapshotOutput {
	return i.ToMongodbSnapshotOutputWithContext(context.Background())
}

func (i *MongodbSnapshot) ToMongodbSnapshotOutputWithContext(ctx context.Context) MongodbSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbSnapshotOutput)
}

// MongodbSnapshotArrayInput is an input type that accepts MongodbSnapshotArray and MongodbSnapshotArrayOutput values.
// You can construct a concrete instance of `MongodbSnapshotArrayInput` via:
//
//	MongodbSnapshotArray{ MongodbSnapshotArgs{...} }
type MongodbSnapshotArrayInput interface {
	pulumi.Input

	ToMongodbSnapshotArrayOutput() MongodbSnapshotArrayOutput
	ToMongodbSnapshotArrayOutputWithContext(context.Context) MongodbSnapshotArrayOutput
}

type MongodbSnapshotArray []MongodbSnapshotInput

func (MongodbSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongodbSnapshot)(nil)).Elem()
}

func (i MongodbSnapshotArray) ToMongodbSnapshotArrayOutput() MongodbSnapshotArrayOutput {
	return i.ToMongodbSnapshotArrayOutputWithContext(context.Background())
}

func (i MongodbSnapshotArray) ToMongodbSnapshotArrayOutputWithContext(ctx context.Context) MongodbSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbSnapshotArrayOutput)
}

// MongodbSnapshotMapInput is an input type that accepts MongodbSnapshotMap and MongodbSnapshotMapOutput values.
// You can construct a concrete instance of `MongodbSnapshotMapInput` via:
//
//	MongodbSnapshotMap{ "key": MongodbSnapshotArgs{...} }
type MongodbSnapshotMapInput interface {
	pulumi.Input

	ToMongodbSnapshotMapOutput() MongodbSnapshotMapOutput
	ToMongodbSnapshotMapOutputWithContext(context.Context) MongodbSnapshotMapOutput
}

type MongodbSnapshotMap map[string]MongodbSnapshotInput

func (MongodbSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongodbSnapshot)(nil)).Elem()
}

func (i MongodbSnapshotMap) ToMongodbSnapshotMapOutput() MongodbSnapshotMapOutput {
	return i.ToMongodbSnapshotMapOutputWithContext(context.Background())
}

func (i MongodbSnapshotMap) ToMongodbSnapshotMapOutputWithContext(ctx context.Context) MongodbSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbSnapshotMapOutput)
}

type MongodbSnapshotOutput struct{ *pulumi.OutputState }

func (MongodbSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbSnapshot)(nil)).Elem()
}

func (o MongodbSnapshotOutput) ToMongodbSnapshotOutput() MongodbSnapshotOutput {
	return o
}

func (o MongodbSnapshotOutput) ToMongodbSnapshotOutputWithContext(ctx context.Context) MongodbSnapshotOutput {
	return o
}

// The date and time when the MongoDB® snapshot was created.
func (o MongodbSnapshotOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbSnapshot) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
//
// > **Important:** Once set, `expiresAt` cannot be removed.
func (o MongodbSnapshotOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbSnapshot) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The ID of the MongoDB® instance from which the snapshot was created.
func (o MongodbSnapshotOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbSnapshot) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the MongoDB® instance from which the snapshot was created.
func (o MongodbSnapshotOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbSnapshot) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// The name of the MongoDB® snapshot.
func (o MongodbSnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbSnapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of node associated with the MongoDB® snapshot.
func (o MongodbSnapshotOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbSnapshot) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// `region`) The region in which the MongoDB® snapshot should be created.
func (o MongodbSnapshotOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbSnapshot) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The size of the MongoDB® snapshot in bytes.
func (o MongodbSnapshotOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *MongodbSnapshot) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The date and time of the last update of the MongoDB® snapshot.
func (o MongodbSnapshotOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbSnapshot) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The type of volume used for the MongoDB® snapshot.
func (o MongodbSnapshotOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbSnapshot) pulumi.StringOutput { return v.VolumeType }).(pulumi.StringOutput)
}

type MongodbSnapshotArrayOutput struct{ *pulumi.OutputState }

func (MongodbSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongodbSnapshot)(nil)).Elem()
}

func (o MongodbSnapshotArrayOutput) ToMongodbSnapshotArrayOutput() MongodbSnapshotArrayOutput {
	return o
}

func (o MongodbSnapshotArrayOutput) ToMongodbSnapshotArrayOutputWithContext(ctx context.Context) MongodbSnapshotArrayOutput {
	return o
}

func (o MongodbSnapshotArrayOutput) Index(i pulumi.IntInput) MongodbSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MongodbSnapshot {
		return vs[0].([]*MongodbSnapshot)[vs[1].(int)]
	}).(MongodbSnapshotOutput)
}

type MongodbSnapshotMapOutput struct{ *pulumi.OutputState }

func (MongodbSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongodbSnapshot)(nil)).Elem()
}

func (o MongodbSnapshotMapOutput) ToMongodbSnapshotMapOutput() MongodbSnapshotMapOutput {
	return o
}

func (o MongodbSnapshotMapOutput) ToMongodbSnapshotMapOutputWithContext(ctx context.Context) MongodbSnapshotMapOutput {
	return o
}

func (o MongodbSnapshotMapOutput) MapIndex(k pulumi.StringInput) MongodbSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MongodbSnapshot {
		return vs[0].(map[string]*MongodbSnapshot)[vs[1].(string)]
	}).(MongodbSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbSnapshotInput)(nil)).Elem(), &MongodbSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbSnapshotArrayInput)(nil)).Elem(), MongodbSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbSnapshotMapInput)(nil)).Elem(), MongodbSnapshotMap{})
	pulumi.RegisterOutputType(MongodbSnapshotOutput{})
	pulumi.RegisterOutputType(MongodbSnapshotArrayOutput{})
	pulumi.RegisterOutputType(MongodbSnapshotMapOutput{})
}
