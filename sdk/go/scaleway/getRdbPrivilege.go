// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets information about the privileges in a database.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.LookupRdbPrivilege(ctx, &scaleway.LookupRdbPrivilegeArgs{
//				DatabaseName: "my-database",
//				InstanceId:   "11111111-1111-111111111111",
//				UserName:     "my-user",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRdbPrivilege(ctx *pulumi.Context, args *LookupRdbPrivilegeArgs, opts ...pulumi.InvokeOption) (*LookupRdbPrivilegeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRdbPrivilegeResult
	err := ctx.Invoke("scaleway:index/getRdbPrivilege:getRdbPrivilege", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRdbPrivilege.
type LookupRdbPrivilegeArgs struct {
	// The database name.
	DatabaseName string `pulumi:"databaseName"`
	// The Database Instance ID.
	InstanceId string `pulumi:"instanceId"`
	// `region`) The region in which the resource exists.
	Region *string `pulumi:"region"`
	// The user name.
	UserName string `pulumi:"userName"`
}

// A collection of values returned by getRdbPrivilege.
type LookupRdbPrivilegeResult struct {
	DatabaseName string `pulumi:"databaseName"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	// The permission for this user on the database. Possible values are `readonly`, `readwrite`, `all`
	// , `custom` and `none`.
	Permission string  `pulumi:"permission"`
	Region     *string `pulumi:"region"`
	UserName   string  `pulumi:"userName"`
}

func LookupRdbPrivilegeOutput(ctx *pulumi.Context, args LookupRdbPrivilegeOutputArgs, opts ...pulumi.InvokeOption) LookupRdbPrivilegeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRdbPrivilegeResult, error) {
			args := v.(LookupRdbPrivilegeArgs)
			r, err := LookupRdbPrivilege(ctx, &args, opts...)
			var s LookupRdbPrivilegeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRdbPrivilegeResultOutput)
}

// A collection of arguments for invoking getRdbPrivilege.
type LookupRdbPrivilegeOutputArgs struct {
	// The database name.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The Database Instance ID.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// `region`) The region in which the resource exists.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The user name.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (LookupRdbPrivilegeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRdbPrivilegeArgs)(nil)).Elem()
}

// A collection of values returned by getRdbPrivilege.
type LookupRdbPrivilegeResultOutput struct{ *pulumi.OutputState }

func (LookupRdbPrivilegeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRdbPrivilegeResult)(nil)).Elem()
}

func (o LookupRdbPrivilegeResultOutput) ToLookupRdbPrivilegeResultOutput() LookupRdbPrivilegeResultOutput {
	return o
}

func (o LookupRdbPrivilegeResultOutput) ToLookupRdbPrivilegeResultOutputWithContext(ctx context.Context) LookupRdbPrivilegeResultOutput {
	return o
}

func (o LookupRdbPrivilegeResultOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdbPrivilegeResult) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRdbPrivilegeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdbPrivilegeResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRdbPrivilegeResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdbPrivilegeResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The permission for this user on the database. Possible values are `readonly`, `readwrite`, `all`
// , `custom` and `none`.
func (o LookupRdbPrivilegeResultOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdbPrivilegeResult) string { return v.Permission }).(pulumi.StringOutput)
}

func (o LookupRdbPrivilegeResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRdbPrivilegeResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o LookupRdbPrivilegeResultOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdbPrivilegeResult) string { return v.UserName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRdbPrivilegeResultOutput{})
}
