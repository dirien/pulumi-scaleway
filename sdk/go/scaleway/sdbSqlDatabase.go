// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `SdbSqlDatabase` resource allows you to create and manage databases for Scaleway Serverless SQL Databases.
//
// Refer to the Serverless SQL Databases [documentation](https://www.scaleway.com/en/docs/serverless-sql-databases/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-databases/) for more information.
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewSdbSqlDatabase(ctx, "database", &scaleway.SdbSqlDatabaseArgs{
//				MaxCpu: pulumi.Int(8),
//				MinCpu: pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Serverless SQL Databases can be imported using the `{region}/{id}`, as shown below:
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/sdbSqlDatabase:SdbSqlDatabase database fr-par/11111111-1111-1111-1111-111111111111
// ```
type SdbSqlDatabase struct {
	pulumi.CustomResourceState

	// The endpoint of the database.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// The maximum number of CPU units for your database. Defaults to 15.
	MaxCpu pulumi.IntPtrOutput `pulumi:"maxCpu"`
	// The minimum number of CPU units for your database. Defaults to 0.
	MinCpu pulumi.IntPtrOutput `pulumi:"minCpu"`
	// The name of the database (e.g. `my-new-database`).
	//
	// > **Important:** Updates to the `name` argument will recreate the database.
	Name pulumi.StringOutput `pulumi:"name"`
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`) The region in which the resource exists.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewSdbSqlDatabase registers a new resource with the given unique name, arguments, and options.
func NewSdbSqlDatabase(ctx *pulumi.Context,
	name string, args *SdbSqlDatabaseArgs, opts ...pulumi.ResourceOption) (*SdbSqlDatabase, error) {
	if args == nil {
		args = &SdbSqlDatabaseArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SdbSqlDatabase
	err := ctx.RegisterResource("scaleway:index/sdbSqlDatabase:SdbSqlDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSdbSqlDatabase gets an existing SdbSqlDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSdbSqlDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SdbSqlDatabaseState, opts ...pulumi.ResourceOption) (*SdbSqlDatabase, error) {
	var resource SdbSqlDatabase
	err := ctx.ReadResource("scaleway:index/sdbSqlDatabase:SdbSqlDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SdbSqlDatabase resources.
type sdbSqlDatabaseState struct {
	// The endpoint of the database.
	Endpoint *string `pulumi:"endpoint"`
	// The maximum number of CPU units for your database. Defaults to 15.
	MaxCpu *int `pulumi:"maxCpu"`
	// The minimum number of CPU units for your database. Defaults to 0.
	MinCpu *int `pulumi:"minCpu"`
	// The name of the database (e.g. `my-new-database`).
	//
	// > **Important:** Updates to the `name` argument will recreate the database.
	Name *string `pulumi:"name"`
	// The projectId you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region in which the resource exists.
	Region *string `pulumi:"region"`
}

type SdbSqlDatabaseState struct {
	// The endpoint of the database.
	Endpoint pulumi.StringPtrInput
	// The maximum number of CPU units for your database. Defaults to 15.
	MaxCpu pulumi.IntPtrInput
	// The minimum number of CPU units for your database. Defaults to 0.
	MinCpu pulumi.IntPtrInput
	// The name of the database (e.g. `my-new-database`).
	//
	// > **Important:** Updates to the `name` argument will recreate the database.
	Name pulumi.StringPtrInput
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// `region`) The region in which the resource exists.
	Region pulumi.StringPtrInput
}

func (SdbSqlDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*sdbSqlDatabaseState)(nil)).Elem()
}

type sdbSqlDatabaseArgs struct {
	// The maximum number of CPU units for your database. Defaults to 15.
	MaxCpu *int `pulumi:"maxCpu"`
	// The minimum number of CPU units for your database. Defaults to 0.
	MinCpu *int `pulumi:"minCpu"`
	// The name of the database (e.g. `my-new-database`).
	//
	// > **Important:** Updates to the `name` argument will recreate the database.
	Name *string `pulumi:"name"`
	// The projectId you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region in which the resource exists.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a SdbSqlDatabase resource.
type SdbSqlDatabaseArgs struct {
	// The maximum number of CPU units for your database. Defaults to 15.
	MaxCpu pulumi.IntPtrInput
	// The minimum number of CPU units for your database. Defaults to 0.
	MinCpu pulumi.IntPtrInput
	// The name of the database (e.g. `my-new-database`).
	//
	// > **Important:** Updates to the `name` argument will recreate the database.
	Name pulumi.StringPtrInput
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// `region`) The region in which the resource exists.
	Region pulumi.StringPtrInput
}

func (SdbSqlDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sdbSqlDatabaseArgs)(nil)).Elem()
}

type SdbSqlDatabaseInput interface {
	pulumi.Input

	ToSdbSqlDatabaseOutput() SdbSqlDatabaseOutput
	ToSdbSqlDatabaseOutputWithContext(ctx context.Context) SdbSqlDatabaseOutput
}

func (*SdbSqlDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**SdbSqlDatabase)(nil)).Elem()
}

func (i *SdbSqlDatabase) ToSdbSqlDatabaseOutput() SdbSqlDatabaseOutput {
	return i.ToSdbSqlDatabaseOutputWithContext(context.Background())
}

func (i *SdbSqlDatabase) ToSdbSqlDatabaseOutputWithContext(ctx context.Context) SdbSqlDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SdbSqlDatabaseOutput)
}

// SdbSqlDatabaseArrayInput is an input type that accepts SdbSqlDatabaseArray and SdbSqlDatabaseArrayOutput values.
// You can construct a concrete instance of `SdbSqlDatabaseArrayInput` via:
//
//	SdbSqlDatabaseArray{ SdbSqlDatabaseArgs{...} }
type SdbSqlDatabaseArrayInput interface {
	pulumi.Input

	ToSdbSqlDatabaseArrayOutput() SdbSqlDatabaseArrayOutput
	ToSdbSqlDatabaseArrayOutputWithContext(context.Context) SdbSqlDatabaseArrayOutput
}

type SdbSqlDatabaseArray []SdbSqlDatabaseInput

func (SdbSqlDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SdbSqlDatabase)(nil)).Elem()
}

func (i SdbSqlDatabaseArray) ToSdbSqlDatabaseArrayOutput() SdbSqlDatabaseArrayOutput {
	return i.ToSdbSqlDatabaseArrayOutputWithContext(context.Background())
}

func (i SdbSqlDatabaseArray) ToSdbSqlDatabaseArrayOutputWithContext(ctx context.Context) SdbSqlDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SdbSqlDatabaseArrayOutput)
}

// SdbSqlDatabaseMapInput is an input type that accepts SdbSqlDatabaseMap and SdbSqlDatabaseMapOutput values.
// You can construct a concrete instance of `SdbSqlDatabaseMapInput` via:
//
//	SdbSqlDatabaseMap{ "key": SdbSqlDatabaseArgs{...} }
type SdbSqlDatabaseMapInput interface {
	pulumi.Input

	ToSdbSqlDatabaseMapOutput() SdbSqlDatabaseMapOutput
	ToSdbSqlDatabaseMapOutputWithContext(context.Context) SdbSqlDatabaseMapOutput
}

type SdbSqlDatabaseMap map[string]SdbSqlDatabaseInput

func (SdbSqlDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SdbSqlDatabase)(nil)).Elem()
}

func (i SdbSqlDatabaseMap) ToSdbSqlDatabaseMapOutput() SdbSqlDatabaseMapOutput {
	return i.ToSdbSqlDatabaseMapOutputWithContext(context.Background())
}

func (i SdbSqlDatabaseMap) ToSdbSqlDatabaseMapOutputWithContext(ctx context.Context) SdbSqlDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SdbSqlDatabaseMapOutput)
}

type SdbSqlDatabaseOutput struct{ *pulumi.OutputState }

func (SdbSqlDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SdbSqlDatabase)(nil)).Elem()
}

func (o SdbSqlDatabaseOutput) ToSdbSqlDatabaseOutput() SdbSqlDatabaseOutput {
	return o
}

func (o SdbSqlDatabaseOutput) ToSdbSqlDatabaseOutputWithContext(ctx context.Context) SdbSqlDatabaseOutput {
	return o
}

// The endpoint of the database.
func (o SdbSqlDatabaseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *SdbSqlDatabase) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// The maximum number of CPU units for your database. Defaults to 15.
func (o SdbSqlDatabaseOutput) MaxCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SdbSqlDatabase) pulumi.IntPtrOutput { return v.MaxCpu }).(pulumi.IntPtrOutput)
}

// The minimum number of CPU units for your database. Defaults to 0.
func (o SdbSqlDatabaseOutput) MinCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SdbSqlDatabase) pulumi.IntPtrOutput { return v.MinCpu }).(pulumi.IntPtrOutput)
}

// The name of the database (e.g. `my-new-database`).
//
// > **Important:** Updates to the `name` argument will recreate the database.
func (o SdbSqlDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SdbSqlDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The projectId you want to attach the resource to
func (o SdbSqlDatabaseOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SdbSqlDatabase) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`) The region in which the resource exists.
func (o SdbSqlDatabaseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SdbSqlDatabase) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type SdbSqlDatabaseArrayOutput struct{ *pulumi.OutputState }

func (SdbSqlDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SdbSqlDatabase)(nil)).Elem()
}

func (o SdbSqlDatabaseArrayOutput) ToSdbSqlDatabaseArrayOutput() SdbSqlDatabaseArrayOutput {
	return o
}

func (o SdbSqlDatabaseArrayOutput) ToSdbSqlDatabaseArrayOutputWithContext(ctx context.Context) SdbSqlDatabaseArrayOutput {
	return o
}

func (o SdbSqlDatabaseArrayOutput) Index(i pulumi.IntInput) SdbSqlDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SdbSqlDatabase {
		return vs[0].([]*SdbSqlDatabase)[vs[1].(int)]
	}).(SdbSqlDatabaseOutput)
}

type SdbSqlDatabaseMapOutput struct{ *pulumi.OutputState }

func (SdbSqlDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SdbSqlDatabase)(nil)).Elem()
}

func (o SdbSqlDatabaseMapOutput) ToSdbSqlDatabaseMapOutput() SdbSqlDatabaseMapOutput {
	return o
}

func (o SdbSqlDatabaseMapOutput) ToSdbSqlDatabaseMapOutputWithContext(ctx context.Context) SdbSqlDatabaseMapOutput {
	return o
}

func (o SdbSqlDatabaseMapOutput) MapIndex(k pulumi.StringInput) SdbSqlDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SdbSqlDatabase {
		return vs[0].(map[string]*SdbSqlDatabase)[vs[1].(string)]
	}).(SdbSqlDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SdbSqlDatabaseInput)(nil)).Elem(), &SdbSqlDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*SdbSqlDatabaseArrayInput)(nil)).Elem(), SdbSqlDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SdbSqlDatabaseMapInput)(nil)).Elem(), SdbSqlDatabaseMap{})
	pulumi.RegisterOutputType(SdbSqlDatabaseOutput{})
	pulumi.RegisterOutputType(SdbSqlDatabaseArrayOutput{})
	pulumi.RegisterOutputType(SdbSqlDatabaseMapOutput{})
}
