// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Books and manages Scaleway IPAM IPs.
//
// ## Example
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc01, err := scaleway.NewVpc(ctx, "vpc01", nil)
//			if err != nil {
//				return err
//			}
//			pn01, err := scaleway.NewVpcPrivateNetwork(ctx, "pn01", &scaleway.VpcPrivateNetworkArgs{
//				VpcId: vpc01.ID(),
//				Ipv4Subnet: &scaleway.VpcPrivateNetworkIpv4SubnetArgs{
//					Subnet: pulumi.String("172.16.32.0/22"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewIamIp(ctx, "ip01", &scaleway.IamIpArgs{
//				Sources: scaleway.IamIpSourceArray{
//					&scaleway.IamIpSourceArgs{
//						PrivateNetworkId: pn01.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Request a specific IPv4
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc01, err := scaleway.NewVpc(ctx, "vpc01", nil)
//			if err != nil {
//				return err
//			}
//			pn01, err := scaleway.NewVpcPrivateNetwork(ctx, "pn01", &scaleway.VpcPrivateNetworkArgs{
//				VpcId: vpc01.ID(),
//				Ipv4Subnet: &scaleway.VpcPrivateNetworkIpv4SubnetArgs{
//					Subnet: pulumi.String("172.16.32.0/22"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewIamIp(ctx, "ip01", &scaleway.IamIpArgs{
//				Address: pulumi.String("172.16.32.7/22"),
//				Sources: scaleway.IamIpSourceArray{
//					&scaleway.IamIpSourceArgs{
//						PrivateNetworkId: pn01.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Request an IPv6
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc01, err := scaleway.NewVpc(ctx, "vpc01", nil)
//			if err != nil {
//				return err
//			}
//			pn01, err := scaleway.NewVpcPrivateNetwork(ctx, "pn01", &scaleway.VpcPrivateNetworkArgs{
//				VpcId: vpc01.ID(),
//				Ipv6Subnets: scaleway.VpcPrivateNetworkIpv6SubnetArray{
//					&scaleway.VpcPrivateNetworkIpv6SubnetArgs{
//						Subnet: pulumi.String("fd46:78ab:30b8:177c::/64"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewIamIp(ctx, "ip01", &scaleway.IamIpArgs{
//				IsIpv6: pulumi.Bool(true),
//				Sources: scaleway.IamIpSourceArray{
//					&scaleway.IamIpSourceArgs{
//						PrivateNetworkId: pn01.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IPAM IPs can be imported using the `{region}/{id}`, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:index/iamIp:IamIp ip_demo fr-par/11111111-1111-1111-1111-111111111111
//
// ```
type IamIp struct {
	pulumi.CustomResourceState

	// Request a specific IP in the requested source pool.
	Address pulumi.StringOutput `pulumi:"address"`
	// Date and time of IP's creation (RFC 3339 format).
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Defines whether to request an IPv6 instead of an IPv4.
	IsIpv6 pulumi.BoolPtrOutput `pulumi:"isIpv6"`
	// `projectId`) The ID of the project the IP is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`) The region of the IP.
	Region pulumi.StringOutput `pulumi:"region"`
	// The IP resource.
	Resources IamIpResourceArrayOutput `pulumi:"resources"`
	// The source in which to book the IP.
	Sources IamIpSourceArrayOutput `pulumi:"sources"`
	// The tags associated with the IP.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Date and time of IP's last update (RFC 3339 format).
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The zone of the IP.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewIamIp registers a new resource with the given unique name, arguments, and options.
func NewIamIp(ctx *pulumi.Context,
	name string, args *IamIpArgs, opts ...pulumi.ResourceOption) (*IamIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Sources == nil {
		return nil, errors.New("invalid value for required argument 'Sources'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamIp
	err := ctx.RegisterResource("scaleway:index/iamIp:IamIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamIp gets an existing IamIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamIpState, opts ...pulumi.ResourceOption) (*IamIp, error) {
	var resource IamIp
	err := ctx.ReadResource("scaleway:index/iamIp:IamIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamIp resources.
type iamIpState struct {
	// Request a specific IP in the requested source pool.
	Address *string `pulumi:"address"`
	// Date and time of IP's creation (RFC 3339 format).
	CreatedAt *string `pulumi:"createdAt"`
	// Defines whether to request an IPv6 instead of an IPv4.
	IsIpv6 *bool `pulumi:"isIpv6"`
	// `projectId`) The ID of the project the IP is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region of the IP.
	Region *string `pulumi:"region"`
	// The IP resource.
	Resources []IamIpResource `pulumi:"resources"`
	// The source in which to book the IP.
	Sources []IamIpSource `pulumi:"sources"`
	// The tags associated with the IP.
	Tags []string `pulumi:"tags"`
	// Date and time of IP's last update (RFC 3339 format).
	UpdatedAt *string `pulumi:"updatedAt"`
	// The zone of the IP.
	Zone *string `pulumi:"zone"`
}

type IamIpState struct {
	// Request a specific IP in the requested source pool.
	Address pulumi.StringPtrInput
	// Date and time of IP's creation (RFC 3339 format).
	CreatedAt pulumi.StringPtrInput
	// Defines whether to request an IPv6 instead of an IPv4.
	IsIpv6 pulumi.BoolPtrInput
	// `projectId`) The ID of the project the IP is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region of the IP.
	Region pulumi.StringPtrInput
	// The IP resource.
	Resources IamIpResourceArrayInput
	// The source in which to book the IP.
	Sources IamIpSourceArrayInput
	// The tags associated with the IP.
	Tags pulumi.StringArrayInput
	// Date and time of IP's last update (RFC 3339 format).
	UpdatedAt pulumi.StringPtrInput
	// The zone of the IP.
	Zone pulumi.StringPtrInput
}

func (IamIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamIpState)(nil)).Elem()
}

type iamIpArgs struct {
	// Request a specific IP in the requested source pool.
	Address *string `pulumi:"address"`
	// Defines whether to request an IPv6 instead of an IPv4.
	IsIpv6 *bool `pulumi:"isIpv6"`
	// `projectId`) The ID of the project the IP is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region of the IP.
	Region *string `pulumi:"region"`
	// The source in which to book the IP.
	Sources []IamIpSource `pulumi:"sources"`
	// The tags associated with the IP.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a IamIp resource.
type IamIpArgs struct {
	// Request a specific IP in the requested source pool.
	Address pulumi.StringPtrInput
	// Defines whether to request an IPv6 instead of an IPv4.
	IsIpv6 pulumi.BoolPtrInput
	// `projectId`) The ID of the project the IP is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region of the IP.
	Region pulumi.StringPtrInput
	// The source in which to book the IP.
	Sources IamIpSourceArrayInput
	// The tags associated with the IP.
	Tags pulumi.StringArrayInput
}

func (IamIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamIpArgs)(nil)).Elem()
}

type IamIpInput interface {
	pulumi.Input

	ToIamIpOutput() IamIpOutput
	ToIamIpOutputWithContext(ctx context.Context) IamIpOutput
}

func (*IamIp) ElementType() reflect.Type {
	return reflect.TypeOf((**IamIp)(nil)).Elem()
}

func (i *IamIp) ToIamIpOutput() IamIpOutput {
	return i.ToIamIpOutputWithContext(context.Background())
}

func (i *IamIp) ToIamIpOutputWithContext(ctx context.Context) IamIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamIpOutput)
}

// IamIpArrayInput is an input type that accepts IamIpArray and IamIpArrayOutput values.
// You can construct a concrete instance of `IamIpArrayInput` via:
//
//	IamIpArray{ IamIpArgs{...} }
type IamIpArrayInput interface {
	pulumi.Input

	ToIamIpArrayOutput() IamIpArrayOutput
	ToIamIpArrayOutputWithContext(context.Context) IamIpArrayOutput
}

type IamIpArray []IamIpInput

func (IamIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamIp)(nil)).Elem()
}

func (i IamIpArray) ToIamIpArrayOutput() IamIpArrayOutput {
	return i.ToIamIpArrayOutputWithContext(context.Background())
}

func (i IamIpArray) ToIamIpArrayOutputWithContext(ctx context.Context) IamIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamIpArrayOutput)
}

// IamIpMapInput is an input type that accepts IamIpMap and IamIpMapOutput values.
// You can construct a concrete instance of `IamIpMapInput` via:
//
//	IamIpMap{ "key": IamIpArgs{...} }
type IamIpMapInput interface {
	pulumi.Input

	ToIamIpMapOutput() IamIpMapOutput
	ToIamIpMapOutputWithContext(context.Context) IamIpMapOutput
}

type IamIpMap map[string]IamIpInput

func (IamIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamIp)(nil)).Elem()
}

func (i IamIpMap) ToIamIpMapOutput() IamIpMapOutput {
	return i.ToIamIpMapOutputWithContext(context.Background())
}

func (i IamIpMap) ToIamIpMapOutputWithContext(ctx context.Context) IamIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamIpMapOutput)
}

type IamIpOutput struct{ *pulumi.OutputState }

func (IamIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamIp)(nil)).Elem()
}

func (o IamIpOutput) ToIamIpOutput() IamIpOutput {
	return o
}

func (o IamIpOutput) ToIamIpOutputWithContext(ctx context.Context) IamIpOutput {
	return o
}

// Request a specific IP in the requested source pool.
func (o IamIpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *IamIp) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// Date and time of IP's creation (RFC 3339 format).
func (o IamIpOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IamIp) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Defines whether to request an IPv6 instead of an IPv4.
func (o IamIpOutput) IsIpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IamIp) pulumi.BoolPtrOutput { return v.IsIpv6 }).(pulumi.BoolPtrOutput)
}

// `projectId`) The ID of the project the IP is associated with.
func (o IamIpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *IamIp) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`) The region of the IP.
func (o IamIpOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *IamIp) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The IP resource.
func (o IamIpOutput) Resources() IamIpResourceArrayOutput {
	return o.ApplyT(func(v *IamIp) IamIpResourceArrayOutput { return v.Resources }).(IamIpResourceArrayOutput)
}

// The source in which to book the IP.
func (o IamIpOutput) Sources() IamIpSourceArrayOutput {
	return o.ApplyT(func(v *IamIp) IamIpSourceArrayOutput { return v.Sources }).(IamIpSourceArrayOutput)
}

// The tags associated with the IP.
func (o IamIpOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IamIp) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Date and time of IP's last update (RFC 3339 format).
func (o IamIpOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IamIp) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The zone of the IP.
func (o IamIpOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *IamIp) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type IamIpArrayOutput struct{ *pulumi.OutputState }

func (IamIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamIp)(nil)).Elem()
}

func (o IamIpArrayOutput) ToIamIpArrayOutput() IamIpArrayOutput {
	return o
}

func (o IamIpArrayOutput) ToIamIpArrayOutputWithContext(ctx context.Context) IamIpArrayOutput {
	return o
}

func (o IamIpArrayOutput) Index(i pulumi.IntInput) IamIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamIp {
		return vs[0].([]*IamIp)[vs[1].(int)]
	}).(IamIpOutput)
}

type IamIpMapOutput struct{ *pulumi.OutputState }

func (IamIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamIp)(nil)).Elem()
}

func (o IamIpMapOutput) ToIamIpMapOutput() IamIpMapOutput {
	return o
}

func (o IamIpMapOutput) ToIamIpMapOutputWithContext(ctx context.Context) IamIpMapOutput {
	return o
}

func (o IamIpMapOutput) MapIndex(k pulumi.StringInput) IamIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamIp {
		return vs[0].(map[string]*IamIp)[vs[1].(string)]
	}).(IamIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamIpInput)(nil)).Elem(), &IamIp{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamIpArrayInput)(nil)).Elem(), IamIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamIpMapInput)(nil)).Elem(), IamIpMap{})
	pulumi.RegisterOutputType(IamIpOutput{})
	pulumi.RegisterOutputType(IamIpArrayOutput{})
	pulumi.RegisterOutputType(IamIpMapOutput{})
}
