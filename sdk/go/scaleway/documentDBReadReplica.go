// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type DocumentDBReadReplica struct {
	pulumi.CustomResourceState

	// Direct access endpoint, it gives you an IP and a port to access your read-replica
	DirectAccess DocumentDBReadReplicaDirectAccessPtrOutput `pulumi:"directAccess"`
	// Id of the rdb instance to replicate
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Private network endpoints
	PrivateNetwork DocumentDBReadReplicaPrivateNetworkPtrOutput `pulumi:"privateNetwork"`
	// The region you want to attach the resource to
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewDocumentDBReadReplica registers a new resource with the given unique name, arguments, and options.
func NewDocumentDBReadReplica(ctx *pulumi.Context,
	name string, args *DocumentDBReadReplicaArgs, opts ...pulumi.ResourceOption) (*DocumentDBReadReplica, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DocumentDBReadReplica
	err := ctx.RegisterResource("scaleway:index/documentDBReadReplica:DocumentDBReadReplica", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDocumentDBReadReplica gets an existing DocumentDBReadReplica resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocumentDBReadReplica(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DocumentDBReadReplicaState, opts ...pulumi.ResourceOption) (*DocumentDBReadReplica, error) {
	var resource DocumentDBReadReplica
	err := ctx.ReadResource("scaleway:index/documentDBReadReplica:DocumentDBReadReplica", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DocumentDBReadReplica resources.
type documentDBReadReplicaState struct {
	// Direct access endpoint, it gives you an IP and a port to access your read-replica
	DirectAccess *DocumentDBReadReplicaDirectAccess `pulumi:"directAccess"`
	// Id of the rdb instance to replicate
	InstanceId *string `pulumi:"instanceId"`
	// Private network endpoints
	PrivateNetwork *DocumentDBReadReplicaPrivateNetwork `pulumi:"privateNetwork"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
}

type DocumentDBReadReplicaState struct {
	// Direct access endpoint, it gives you an IP and a port to access your read-replica
	DirectAccess DocumentDBReadReplicaDirectAccessPtrInput
	// Id of the rdb instance to replicate
	InstanceId pulumi.StringPtrInput
	// Private network endpoints
	PrivateNetwork DocumentDBReadReplicaPrivateNetworkPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
}

func (DocumentDBReadReplicaState) ElementType() reflect.Type {
	return reflect.TypeOf((*documentDBReadReplicaState)(nil)).Elem()
}

type documentDBReadReplicaArgs struct {
	// Direct access endpoint, it gives you an IP and a port to access your read-replica
	DirectAccess *DocumentDBReadReplicaDirectAccess `pulumi:"directAccess"`
	// Id of the rdb instance to replicate
	InstanceId string `pulumi:"instanceId"`
	// Private network endpoints
	PrivateNetwork *DocumentDBReadReplicaPrivateNetwork `pulumi:"privateNetwork"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a DocumentDBReadReplica resource.
type DocumentDBReadReplicaArgs struct {
	// Direct access endpoint, it gives you an IP and a port to access your read-replica
	DirectAccess DocumentDBReadReplicaDirectAccessPtrInput
	// Id of the rdb instance to replicate
	InstanceId pulumi.StringInput
	// Private network endpoints
	PrivateNetwork DocumentDBReadReplicaPrivateNetworkPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
}

func (DocumentDBReadReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*documentDBReadReplicaArgs)(nil)).Elem()
}

type DocumentDBReadReplicaInput interface {
	pulumi.Input

	ToDocumentDBReadReplicaOutput() DocumentDBReadReplicaOutput
	ToDocumentDBReadReplicaOutputWithContext(ctx context.Context) DocumentDBReadReplicaOutput
}

func (*DocumentDBReadReplica) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentDBReadReplica)(nil)).Elem()
}

func (i *DocumentDBReadReplica) ToDocumentDBReadReplicaOutput() DocumentDBReadReplicaOutput {
	return i.ToDocumentDBReadReplicaOutputWithContext(context.Background())
}

func (i *DocumentDBReadReplica) ToDocumentDBReadReplicaOutputWithContext(ctx context.Context) DocumentDBReadReplicaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDBReadReplicaOutput)
}

func (i *DocumentDBReadReplica) ToOutput(ctx context.Context) pulumix.Output[*DocumentDBReadReplica] {
	return pulumix.Output[*DocumentDBReadReplica]{
		OutputState: i.ToDocumentDBReadReplicaOutputWithContext(ctx).OutputState,
	}
}

// DocumentDBReadReplicaArrayInput is an input type that accepts DocumentDBReadReplicaArray and DocumentDBReadReplicaArrayOutput values.
// You can construct a concrete instance of `DocumentDBReadReplicaArrayInput` via:
//
//	DocumentDBReadReplicaArray{ DocumentDBReadReplicaArgs{...} }
type DocumentDBReadReplicaArrayInput interface {
	pulumi.Input

	ToDocumentDBReadReplicaArrayOutput() DocumentDBReadReplicaArrayOutput
	ToDocumentDBReadReplicaArrayOutputWithContext(context.Context) DocumentDBReadReplicaArrayOutput
}

type DocumentDBReadReplicaArray []DocumentDBReadReplicaInput

func (DocumentDBReadReplicaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DocumentDBReadReplica)(nil)).Elem()
}

func (i DocumentDBReadReplicaArray) ToDocumentDBReadReplicaArrayOutput() DocumentDBReadReplicaArrayOutput {
	return i.ToDocumentDBReadReplicaArrayOutputWithContext(context.Background())
}

func (i DocumentDBReadReplicaArray) ToDocumentDBReadReplicaArrayOutputWithContext(ctx context.Context) DocumentDBReadReplicaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDBReadReplicaArrayOutput)
}

func (i DocumentDBReadReplicaArray) ToOutput(ctx context.Context) pulumix.Output[[]*DocumentDBReadReplica] {
	return pulumix.Output[[]*DocumentDBReadReplica]{
		OutputState: i.ToDocumentDBReadReplicaArrayOutputWithContext(ctx).OutputState,
	}
}

// DocumentDBReadReplicaMapInput is an input type that accepts DocumentDBReadReplicaMap and DocumentDBReadReplicaMapOutput values.
// You can construct a concrete instance of `DocumentDBReadReplicaMapInput` via:
//
//	DocumentDBReadReplicaMap{ "key": DocumentDBReadReplicaArgs{...} }
type DocumentDBReadReplicaMapInput interface {
	pulumi.Input

	ToDocumentDBReadReplicaMapOutput() DocumentDBReadReplicaMapOutput
	ToDocumentDBReadReplicaMapOutputWithContext(context.Context) DocumentDBReadReplicaMapOutput
}

type DocumentDBReadReplicaMap map[string]DocumentDBReadReplicaInput

func (DocumentDBReadReplicaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DocumentDBReadReplica)(nil)).Elem()
}

func (i DocumentDBReadReplicaMap) ToDocumentDBReadReplicaMapOutput() DocumentDBReadReplicaMapOutput {
	return i.ToDocumentDBReadReplicaMapOutputWithContext(context.Background())
}

func (i DocumentDBReadReplicaMap) ToDocumentDBReadReplicaMapOutputWithContext(ctx context.Context) DocumentDBReadReplicaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDBReadReplicaMapOutput)
}

func (i DocumentDBReadReplicaMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DocumentDBReadReplica] {
	return pulumix.Output[map[string]*DocumentDBReadReplica]{
		OutputState: i.ToDocumentDBReadReplicaMapOutputWithContext(ctx).OutputState,
	}
}

type DocumentDBReadReplicaOutput struct{ *pulumi.OutputState }

func (DocumentDBReadReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentDBReadReplica)(nil)).Elem()
}

func (o DocumentDBReadReplicaOutput) ToDocumentDBReadReplicaOutput() DocumentDBReadReplicaOutput {
	return o
}

func (o DocumentDBReadReplicaOutput) ToDocumentDBReadReplicaOutputWithContext(ctx context.Context) DocumentDBReadReplicaOutput {
	return o
}

func (o DocumentDBReadReplicaOutput) ToOutput(ctx context.Context) pulumix.Output[*DocumentDBReadReplica] {
	return pulumix.Output[*DocumentDBReadReplica]{
		OutputState: o.OutputState,
	}
}

// Direct access endpoint, it gives you an IP and a port to access your read-replica
func (o DocumentDBReadReplicaOutput) DirectAccess() DocumentDBReadReplicaDirectAccessPtrOutput {
	return o.ApplyT(func(v *DocumentDBReadReplica) DocumentDBReadReplicaDirectAccessPtrOutput { return v.DirectAccess }).(DocumentDBReadReplicaDirectAccessPtrOutput)
}

// Id of the rdb instance to replicate
func (o DocumentDBReadReplicaOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentDBReadReplica) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Private network endpoints
func (o DocumentDBReadReplicaOutput) PrivateNetwork() DocumentDBReadReplicaPrivateNetworkPtrOutput {
	return o.ApplyT(func(v *DocumentDBReadReplica) DocumentDBReadReplicaPrivateNetworkPtrOutput { return v.PrivateNetwork }).(DocumentDBReadReplicaPrivateNetworkPtrOutput)
}

// The region you want to attach the resource to
func (o DocumentDBReadReplicaOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentDBReadReplica) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type DocumentDBReadReplicaArrayOutput struct{ *pulumi.OutputState }

func (DocumentDBReadReplicaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DocumentDBReadReplica)(nil)).Elem()
}

func (o DocumentDBReadReplicaArrayOutput) ToDocumentDBReadReplicaArrayOutput() DocumentDBReadReplicaArrayOutput {
	return o
}

func (o DocumentDBReadReplicaArrayOutput) ToDocumentDBReadReplicaArrayOutputWithContext(ctx context.Context) DocumentDBReadReplicaArrayOutput {
	return o
}

func (o DocumentDBReadReplicaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DocumentDBReadReplica] {
	return pulumix.Output[[]*DocumentDBReadReplica]{
		OutputState: o.OutputState,
	}
}

func (o DocumentDBReadReplicaArrayOutput) Index(i pulumi.IntInput) DocumentDBReadReplicaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DocumentDBReadReplica {
		return vs[0].([]*DocumentDBReadReplica)[vs[1].(int)]
	}).(DocumentDBReadReplicaOutput)
}

type DocumentDBReadReplicaMapOutput struct{ *pulumi.OutputState }

func (DocumentDBReadReplicaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DocumentDBReadReplica)(nil)).Elem()
}

func (o DocumentDBReadReplicaMapOutput) ToDocumentDBReadReplicaMapOutput() DocumentDBReadReplicaMapOutput {
	return o
}

func (o DocumentDBReadReplicaMapOutput) ToDocumentDBReadReplicaMapOutputWithContext(ctx context.Context) DocumentDBReadReplicaMapOutput {
	return o
}

func (o DocumentDBReadReplicaMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DocumentDBReadReplica] {
	return pulumix.Output[map[string]*DocumentDBReadReplica]{
		OutputState: o.OutputState,
	}
}

func (o DocumentDBReadReplicaMapOutput) MapIndex(k pulumi.StringInput) DocumentDBReadReplicaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DocumentDBReadReplica {
		return vs[0].(map[string]*DocumentDBReadReplica)[vs[1].(string)]
	}).(DocumentDBReadReplicaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentDBReadReplicaInput)(nil)).Elem(), &DocumentDBReadReplica{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentDBReadReplicaArrayInput)(nil)).Elem(), DocumentDBReadReplicaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentDBReadReplicaMapInput)(nil)).Elem(), DocumentDBReadReplicaMap{})
	pulumi.RegisterOutputType(DocumentDBReadReplicaOutput{})
	pulumi.RegisterOutputType(DocumentDBReadReplicaArrayOutput{})
	pulumi.RegisterOutputType(DocumentDBReadReplicaMapOutput{})
}
