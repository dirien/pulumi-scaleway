// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IotRoute struct {
	pulumi.CustomResourceState

	// The date and time of the creation of the IoT Route
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Database Route parameters
	Database IotRouteDatabasePtrOutput `pulumi:"database"`
	// The ID of the route's hub
	HubId pulumi.StringOutput `pulumi:"hubId"`
	// The name of the route
	Name pulumi.StringOutput `pulumi:"name"`
	// The region you want to attach the resource to
	Region pulumi.StringOutput `pulumi:"region"`
	// Rest Route parameters
	Rest IotRouteRestPtrOutput `pulumi:"rest"`
	// S3 Route parameters
	S3 IotRouteS3PtrOutput `pulumi:"s3"`
	// The Topic the route subscribes to (wildcards allowed)
	Topic pulumi.StringOutput `pulumi:"topic"`
}

// NewIotRoute registers a new resource with the given unique name, arguments, and options.
func NewIotRoute(ctx *pulumi.Context,
	name string, args *IotRouteArgs, opts ...pulumi.ResourceOption) (*IotRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HubId == nil {
		return nil, errors.New("invalid value for required argument 'HubId'")
	}
	if args.Topic == nil {
		return nil, errors.New("invalid value for required argument 'Topic'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource IotRoute
	err := ctx.RegisterResource("scaleway:index/iotRoute:IotRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIotRoute gets an existing IotRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIotRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IotRouteState, opts ...pulumi.ResourceOption) (*IotRoute, error) {
	var resource IotRoute
	err := ctx.ReadResource("scaleway:index/iotRoute:IotRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IotRoute resources.
type iotRouteState struct {
	// The date and time of the creation of the IoT Route
	CreatedAt *string `pulumi:"createdAt"`
	// Database Route parameters
	Database *IotRouteDatabase `pulumi:"database"`
	// The ID of the route's hub
	HubId *string `pulumi:"hubId"`
	// The name of the route
	Name *string `pulumi:"name"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// Rest Route parameters
	Rest *IotRouteRest `pulumi:"rest"`
	// S3 Route parameters
	S3 *IotRouteS3 `pulumi:"s3"`
	// The Topic the route subscribes to (wildcards allowed)
	Topic *string `pulumi:"topic"`
}

type IotRouteState struct {
	// The date and time of the creation of the IoT Route
	CreatedAt pulumi.StringPtrInput
	// Database Route parameters
	Database IotRouteDatabasePtrInput
	// The ID of the route's hub
	HubId pulumi.StringPtrInput
	// The name of the route
	Name pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// Rest Route parameters
	Rest IotRouteRestPtrInput
	// S3 Route parameters
	S3 IotRouteS3PtrInput
	// The Topic the route subscribes to (wildcards allowed)
	Topic pulumi.StringPtrInput
}

func (IotRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*iotRouteState)(nil)).Elem()
}

type iotRouteArgs struct {
	// Database Route parameters
	Database *IotRouteDatabase `pulumi:"database"`
	// The ID of the route's hub
	HubId string `pulumi:"hubId"`
	// The name of the route
	Name *string `pulumi:"name"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// Rest Route parameters
	Rest *IotRouteRest `pulumi:"rest"`
	// S3 Route parameters
	S3 *IotRouteS3 `pulumi:"s3"`
	// The Topic the route subscribes to (wildcards allowed)
	Topic string `pulumi:"topic"`
}

// The set of arguments for constructing a IotRoute resource.
type IotRouteArgs struct {
	// Database Route parameters
	Database IotRouteDatabasePtrInput
	// The ID of the route's hub
	HubId pulumi.StringInput
	// The name of the route
	Name pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// Rest Route parameters
	Rest IotRouteRestPtrInput
	// S3 Route parameters
	S3 IotRouteS3PtrInput
	// The Topic the route subscribes to (wildcards allowed)
	Topic pulumi.StringInput
}

func (IotRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iotRouteArgs)(nil)).Elem()
}

type IotRouteInput interface {
	pulumi.Input

	ToIotRouteOutput() IotRouteOutput
	ToIotRouteOutputWithContext(ctx context.Context) IotRouteOutput
}

func (*IotRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**IotRoute)(nil)).Elem()
}

func (i *IotRoute) ToIotRouteOutput() IotRouteOutput {
	return i.ToIotRouteOutputWithContext(context.Background())
}

func (i *IotRoute) ToIotRouteOutputWithContext(ctx context.Context) IotRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotRouteOutput)
}

// IotRouteArrayInput is an input type that accepts IotRouteArray and IotRouteArrayOutput values.
// You can construct a concrete instance of `IotRouteArrayInput` via:
//
//	IotRouteArray{ IotRouteArgs{...} }
type IotRouteArrayInput interface {
	pulumi.Input

	ToIotRouteArrayOutput() IotRouteArrayOutput
	ToIotRouteArrayOutputWithContext(context.Context) IotRouteArrayOutput
}

type IotRouteArray []IotRouteInput

func (IotRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IotRoute)(nil)).Elem()
}

func (i IotRouteArray) ToIotRouteArrayOutput() IotRouteArrayOutput {
	return i.ToIotRouteArrayOutputWithContext(context.Background())
}

func (i IotRouteArray) ToIotRouteArrayOutputWithContext(ctx context.Context) IotRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotRouteArrayOutput)
}

// IotRouteMapInput is an input type that accepts IotRouteMap and IotRouteMapOutput values.
// You can construct a concrete instance of `IotRouteMapInput` via:
//
//	IotRouteMap{ "key": IotRouteArgs{...} }
type IotRouteMapInput interface {
	pulumi.Input

	ToIotRouteMapOutput() IotRouteMapOutput
	ToIotRouteMapOutputWithContext(context.Context) IotRouteMapOutput
}

type IotRouteMap map[string]IotRouteInput

func (IotRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IotRoute)(nil)).Elem()
}

func (i IotRouteMap) ToIotRouteMapOutput() IotRouteMapOutput {
	return i.ToIotRouteMapOutputWithContext(context.Background())
}

func (i IotRouteMap) ToIotRouteMapOutputWithContext(ctx context.Context) IotRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotRouteMapOutput)
}

type IotRouteOutput struct{ *pulumi.OutputState }

func (IotRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IotRoute)(nil)).Elem()
}

func (o IotRouteOutput) ToIotRouteOutput() IotRouteOutput {
	return o
}

func (o IotRouteOutput) ToIotRouteOutputWithContext(ctx context.Context) IotRouteOutput {
	return o
}

// The date and time of the creation of the IoT Route
func (o IotRouteOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IotRoute) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Database Route parameters
func (o IotRouteOutput) Database() IotRouteDatabasePtrOutput {
	return o.ApplyT(func(v *IotRoute) IotRouteDatabasePtrOutput { return v.Database }).(IotRouteDatabasePtrOutput)
}

// The ID of the route's hub
func (o IotRouteOutput) HubId() pulumi.StringOutput {
	return o.ApplyT(func(v *IotRoute) pulumi.StringOutput { return v.HubId }).(pulumi.StringOutput)
}

// The name of the route
func (o IotRouteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IotRoute) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region you want to attach the resource to
func (o IotRouteOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *IotRoute) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Rest Route parameters
func (o IotRouteOutput) Rest() IotRouteRestPtrOutput {
	return o.ApplyT(func(v *IotRoute) IotRouteRestPtrOutput { return v.Rest }).(IotRouteRestPtrOutput)
}

// S3 Route parameters
func (o IotRouteOutput) S3() IotRouteS3PtrOutput {
	return o.ApplyT(func(v *IotRoute) IotRouteS3PtrOutput { return v.S3 }).(IotRouteS3PtrOutput)
}

// The Topic the route subscribes to (wildcards allowed)
func (o IotRouteOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v *IotRoute) pulumi.StringOutput { return v.Topic }).(pulumi.StringOutput)
}

type IotRouteArrayOutput struct{ *pulumi.OutputState }

func (IotRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IotRoute)(nil)).Elem()
}

func (o IotRouteArrayOutput) ToIotRouteArrayOutput() IotRouteArrayOutput {
	return o
}

func (o IotRouteArrayOutput) ToIotRouteArrayOutputWithContext(ctx context.Context) IotRouteArrayOutput {
	return o
}

func (o IotRouteArrayOutput) Index(i pulumi.IntInput) IotRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IotRoute {
		return vs[0].([]*IotRoute)[vs[1].(int)]
	}).(IotRouteOutput)
}

type IotRouteMapOutput struct{ *pulumi.OutputState }

func (IotRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IotRoute)(nil)).Elem()
}

func (o IotRouteMapOutput) ToIotRouteMapOutput() IotRouteMapOutput {
	return o
}

func (o IotRouteMapOutput) ToIotRouteMapOutputWithContext(ctx context.Context) IotRouteMapOutput {
	return o
}

func (o IotRouteMapOutput) MapIndex(k pulumi.StringInput) IotRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IotRoute {
		return vs[0].(map[string]*IotRoute)[vs[1].(string)]
	}).(IotRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IotRouteInput)(nil)).Elem(), &IotRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotRouteArrayInput)(nil)).Elem(), IotRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotRouteMapInput)(nil)).Elem(), IotRouteMap{})
	pulumi.RegisterOutputType(IotRouteOutput{})
	pulumi.RegisterOutputType(IotRouteArrayOutput{})
	pulumi.RegisterOutputType(IotRouteMapOutput{})
}
