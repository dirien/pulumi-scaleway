// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `DomainRegistration` resource allows you to purchase and manage domain registrations with Scaleway. Using this resource you can register one or more domains for a specified duration, configure auto-renewal and DNSSEC options, and set contact information. You can supply an owner contact either by providing an existing contact ID or by specifying the complete contact details. The resource automatically returns additional contact information (administrative and technical) as provided by the Scaleway API.
//
// Refer to the [Domains and DNS documentation](https://www.scaleway.com/en/docs/network/domains-and-dns/) and the [API documentation](https://developers.scaleway.com/) for more details.
//
// ## Example Usage
//
// ### Purchase a Single Domain
//
// The following example purchases a domain with a one-year registration period and specifies the owner contact details. Administrative and technical contacts are returned by the API.
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewDomainRegistration(ctx, "test", &scaleway.DomainRegistrationArgs{
//				DomainNames: pulumi.StringArray{
//					pulumi.String("example.com"),
//				},
//				DurationInYears: pulumi.Int(1),
//				OwnerContact: &scaleway.DomainRegistrationOwnerContactArgs{
//					AddressLine1:              pulumi.String("123 Main Street"),
//					City:                      pulumi.String("Paris"),
//					CompanyIdentificationCode: pulumi.String("123456789"),
//					Country:                   pulumi.String("FR"),
//					Email:                     pulumi.String("john.doe@example.com"),
//					Firstname:                 pulumi.String("John"),
//					Lastname:                  pulumi.String("DOE"),
//					LegalForm:                 pulumi.String("individual"),
//					PhoneNumber:               pulumi.String("+1.23456789"),
//					VatIdentificationCode:     pulumi.String("FR12345678901"),
//					Zip:                       pulumi.String("75001"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Update Domain Settings
//
// You can update the resource to enable auto-renewal and DNSSEC:
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewDomainRegistration(ctx, "test", &scaleway.DomainRegistrationArgs{
//				AutoRenew: pulumi.Bool(true),
//				Dnssec:    pulumi.Bool(true),
//				DomainNames: pulumi.StringArray{
//					pulumi.String("example.com"),
//				},
//				DurationInYears: pulumi.Int(1),
//				OwnerContact: &scaleway.DomainRegistrationOwnerContactArgs{
//					AddressLine1:              pulumi.String("123 Main Street"),
//					City:                      pulumi.String("Paris"),
//					CompanyIdentificationCode: pulumi.String("123456789"),
//					Country:                   pulumi.String("FR"),
//					Email:                     pulumi.String("john.doe@example.com"),
//					Firstname:                 pulumi.String("John"),
//					Lastname:                  pulumi.String("DOE"),
//					LegalForm:                 pulumi.String("individual"),
//					PhoneNumber:               pulumi.String("+1.23456789"),
//					VatIdentificationCode:     pulumi.String("FR12345678901"),
//					Zip:                       pulumi.String("75001"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Purchase Multiple Domains
//
// The following example registers several domains in one go:
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewDomainRegistration(ctx, "multi", &scaleway.DomainRegistrationArgs{
//				DomainNames: pulumi.StringArray{
//					pulumi.String("domain1.com"),
//					pulumi.String("domain2.com"),
//					pulumi.String("domain3.com"),
//				},
//				DurationInYears: pulumi.Int(1),
//				OwnerContact: &scaleway.DomainRegistrationOwnerContactArgs{
//					AddressLine1:              pulumi.String("123 Main Street"),
//					City:                      pulumi.String("Paris"),
//					CompanyIdentificationCode: pulumi.String("123456789"),
//					Country:                   pulumi.String("FR"),
//					Email:                     pulumi.String("john.doe@example.com"),
//					Firstname:                 pulumi.String("John"),
//					Lastname:                  pulumi.String("DOE"),
//					LegalForm:                 pulumi.String("individual"),
//					PhoneNumber:               pulumi.String("+1.23456789"),
//					VatIdentificationCode:     pulumi.String("FR12345678901"),
//					Zip:                       pulumi.String("75001"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Contact Blocks
//
// Each contact block supports the following attributes:
//
// - `legalForm` (Required, String): Legal form of the contact.
// - `firstname` (Required, String): First name.
// - `lastname` (Required, String): Last name.
// - `companyName` (Optional, String): Company name.
// - `email` (Required, String): Primary email.
// - `phoneNumber` (Required, String): Primary phone number.
// - `addressLine1` (Required, String): Primary address.
// - `zip` (Required, String): Postal code.
// - `city` (Required, String): City.
// - `country` (Required, String): Country code (ISO format).
// - `vatIdentificationCode` (Required, String): VAT identification code.
// - `companyIdentificationCode` (Required, String): Company identification code.
//
// ## Import
//
// To import an existing domain registration, use:
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/domainRegistration:DomainRegistration test <project_id>/<task_id>
// ```
type DomainRegistration struct {
	pulumi.CustomResourceState

	// : Administrative contact information.
	AdministrativeContacts DomainRegistrationAdministrativeContactArrayOutput `pulumi:"administrativeContacts"`
	// : Enables or disables auto-renewal.
	AutoRenew pulumi.BoolPtrOutput `pulumi:"autoRenew"`
	// : Enables or disables DNSSEC.
	Dnssec pulumi.BoolPtrOutput `pulumi:"dnssec"`
	// : A list of domain names to be registered.
	DomainNames pulumi.StringArrayOutput `pulumi:"domainNames"`
	// DNSSEC DS record configuration.
	DsRecords DomainRegistrationDsRecordArrayOutput `pulumi:"dsRecords"`
	// : The registration period in years.
	DurationInYears pulumi.IntPtrOutput `pulumi:"durationInYears"`
	// : Details of the owner contact.
	OwnerContact DomainRegistrationOwnerContactOutput `pulumi:"ownerContact"`
	// : The ID of an existing owner contact.
	OwnerContactId pulumi.StringOutput `pulumi:"ownerContactId"`
	// : The Scaleway project ID.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// ID of the task that created the domain.
	TaskId pulumi.StringOutput `pulumi:"taskId"`
	// : Technical contact information.
	TechnicalContacts DomainRegistrationTechnicalContactArrayOutput `pulumi:"technicalContacts"`
}

// NewDomainRegistration registers a new resource with the given unique name, arguments, and options.
func NewDomainRegistration(ctx *pulumi.Context,
	name string, args *DomainRegistrationArgs, opts ...pulumi.ResourceOption) (*DomainRegistration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainNames == nil {
		return nil, errors.New("invalid value for required argument 'DomainNames'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainRegistration
	err := ctx.RegisterResource("scaleway:index/domainRegistration:DomainRegistration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainRegistration gets an existing DomainRegistration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainRegistration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainRegistrationState, opts ...pulumi.ResourceOption) (*DomainRegistration, error) {
	var resource DomainRegistration
	err := ctx.ReadResource("scaleway:index/domainRegistration:DomainRegistration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainRegistration resources.
type domainRegistrationState struct {
	// : Administrative contact information.
	AdministrativeContacts []DomainRegistrationAdministrativeContact `pulumi:"administrativeContacts"`
	// : Enables or disables auto-renewal.
	AutoRenew *bool `pulumi:"autoRenew"`
	// : Enables or disables DNSSEC.
	Dnssec *bool `pulumi:"dnssec"`
	// : A list of domain names to be registered.
	DomainNames []string `pulumi:"domainNames"`
	// DNSSEC DS record configuration.
	DsRecords []DomainRegistrationDsRecord `pulumi:"dsRecords"`
	// : The registration period in years.
	DurationInYears *int `pulumi:"durationInYears"`
	// : Details of the owner contact.
	OwnerContact *DomainRegistrationOwnerContact `pulumi:"ownerContact"`
	// : The ID of an existing owner contact.
	OwnerContactId *string `pulumi:"ownerContactId"`
	// : The Scaleway project ID.
	ProjectId *string `pulumi:"projectId"`
	// ID of the task that created the domain.
	TaskId *string `pulumi:"taskId"`
	// : Technical contact information.
	TechnicalContacts []DomainRegistrationTechnicalContact `pulumi:"technicalContacts"`
}

type DomainRegistrationState struct {
	// : Administrative contact information.
	AdministrativeContacts DomainRegistrationAdministrativeContactArrayInput
	// : Enables or disables auto-renewal.
	AutoRenew pulumi.BoolPtrInput
	// : Enables or disables DNSSEC.
	Dnssec pulumi.BoolPtrInput
	// : A list of domain names to be registered.
	DomainNames pulumi.StringArrayInput
	// DNSSEC DS record configuration.
	DsRecords DomainRegistrationDsRecordArrayInput
	// : The registration period in years.
	DurationInYears pulumi.IntPtrInput
	// : Details of the owner contact.
	OwnerContact DomainRegistrationOwnerContactPtrInput
	// : The ID of an existing owner contact.
	OwnerContactId pulumi.StringPtrInput
	// : The Scaleway project ID.
	ProjectId pulumi.StringPtrInput
	// ID of the task that created the domain.
	TaskId pulumi.StringPtrInput
	// : Technical contact information.
	TechnicalContacts DomainRegistrationTechnicalContactArrayInput
}

func (DomainRegistrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainRegistrationState)(nil)).Elem()
}

type domainRegistrationArgs struct {
	// : Enables or disables auto-renewal.
	AutoRenew *bool `pulumi:"autoRenew"`
	// : Enables or disables DNSSEC.
	Dnssec *bool `pulumi:"dnssec"`
	// : A list of domain names to be registered.
	DomainNames []string `pulumi:"domainNames"`
	// : The registration period in years.
	DurationInYears *int `pulumi:"durationInYears"`
	// : Details of the owner contact.
	OwnerContact *DomainRegistrationOwnerContact `pulumi:"ownerContact"`
	// : The ID of an existing owner contact.
	OwnerContactId *string `pulumi:"ownerContactId"`
	// : The Scaleway project ID.
	ProjectId *string `pulumi:"projectId"`
}

// The set of arguments for constructing a DomainRegistration resource.
type DomainRegistrationArgs struct {
	// : Enables or disables auto-renewal.
	AutoRenew pulumi.BoolPtrInput
	// : Enables or disables DNSSEC.
	Dnssec pulumi.BoolPtrInput
	// : A list of domain names to be registered.
	DomainNames pulumi.StringArrayInput
	// : The registration period in years.
	DurationInYears pulumi.IntPtrInput
	// : Details of the owner contact.
	OwnerContact DomainRegistrationOwnerContactPtrInput
	// : The ID of an existing owner contact.
	OwnerContactId pulumi.StringPtrInput
	// : The Scaleway project ID.
	ProjectId pulumi.StringPtrInput
}

func (DomainRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainRegistrationArgs)(nil)).Elem()
}

type DomainRegistrationInput interface {
	pulumi.Input

	ToDomainRegistrationOutput() DomainRegistrationOutput
	ToDomainRegistrationOutputWithContext(ctx context.Context) DomainRegistrationOutput
}

func (*DomainRegistration) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRegistration)(nil)).Elem()
}

func (i *DomainRegistration) ToDomainRegistrationOutput() DomainRegistrationOutput {
	return i.ToDomainRegistrationOutputWithContext(context.Background())
}

func (i *DomainRegistration) ToDomainRegistrationOutputWithContext(ctx context.Context) DomainRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRegistrationOutput)
}

// DomainRegistrationArrayInput is an input type that accepts DomainRegistrationArray and DomainRegistrationArrayOutput values.
// You can construct a concrete instance of `DomainRegistrationArrayInput` via:
//
//	DomainRegistrationArray{ DomainRegistrationArgs{...} }
type DomainRegistrationArrayInput interface {
	pulumi.Input

	ToDomainRegistrationArrayOutput() DomainRegistrationArrayOutput
	ToDomainRegistrationArrayOutputWithContext(context.Context) DomainRegistrationArrayOutput
}

type DomainRegistrationArray []DomainRegistrationInput

func (DomainRegistrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainRegistration)(nil)).Elem()
}

func (i DomainRegistrationArray) ToDomainRegistrationArrayOutput() DomainRegistrationArrayOutput {
	return i.ToDomainRegistrationArrayOutputWithContext(context.Background())
}

func (i DomainRegistrationArray) ToDomainRegistrationArrayOutputWithContext(ctx context.Context) DomainRegistrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRegistrationArrayOutput)
}

// DomainRegistrationMapInput is an input type that accepts DomainRegistrationMap and DomainRegistrationMapOutput values.
// You can construct a concrete instance of `DomainRegistrationMapInput` via:
//
//	DomainRegistrationMap{ "key": DomainRegistrationArgs{...} }
type DomainRegistrationMapInput interface {
	pulumi.Input

	ToDomainRegistrationMapOutput() DomainRegistrationMapOutput
	ToDomainRegistrationMapOutputWithContext(context.Context) DomainRegistrationMapOutput
}

type DomainRegistrationMap map[string]DomainRegistrationInput

func (DomainRegistrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainRegistration)(nil)).Elem()
}

func (i DomainRegistrationMap) ToDomainRegistrationMapOutput() DomainRegistrationMapOutput {
	return i.ToDomainRegistrationMapOutputWithContext(context.Background())
}

func (i DomainRegistrationMap) ToDomainRegistrationMapOutputWithContext(ctx context.Context) DomainRegistrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRegistrationMapOutput)
}

type DomainRegistrationOutput struct{ *pulumi.OutputState }

func (DomainRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRegistration)(nil)).Elem()
}

func (o DomainRegistrationOutput) ToDomainRegistrationOutput() DomainRegistrationOutput {
	return o
}

func (o DomainRegistrationOutput) ToDomainRegistrationOutputWithContext(ctx context.Context) DomainRegistrationOutput {
	return o
}

// : Administrative contact information.
func (o DomainRegistrationOutput) AdministrativeContacts() DomainRegistrationAdministrativeContactArrayOutput {
	return o.ApplyT(func(v *DomainRegistration) DomainRegistrationAdministrativeContactArrayOutput {
		return v.AdministrativeContacts
	}).(DomainRegistrationAdministrativeContactArrayOutput)
}

// : Enables or disables auto-renewal.
func (o DomainRegistrationOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainRegistration) pulumi.BoolPtrOutput { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

// : Enables or disables DNSSEC.
func (o DomainRegistrationOutput) Dnssec() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainRegistration) pulumi.BoolPtrOutput { return v.Dnssec }).(pulumi.BoolPtrOutput)
}

// : A list of domain names to be registered.
func (o DomainRegistrationOutput) DomainNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainRegistration) pulumi.StringArrayOutput { return v.DomainNames }).(pulumi.StringArrayOutput)
}

// DNSSEC DS record configuration.
func (o DomainRegistrationOutput) DsRecords() DomainRegistrationDsRecordArrayOutput {
	return o.ApplyT(func(v *DomainRegistration) DomainRegistrationDsRecordArrayOutput { return v.DsRecords }).(DomainRegistrationDsRecordArrayOutput)
}

// : The registration period in years.
func (o DomainRegistrationOutput) DurationInYears() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainRegistration) pulumi.IntPtrOutput { return v.DurationInYears }).(pulumi.IntPtrOutput)
}

// : Details of the owner contact.
func (o DomainRegistrationOutput) OwnerContact() DomainRegistrationOwnerContactOutput {
	return o.ApplyT(func(v *DomainRegistration) DomainRegistrationOwnerContactOutput { return v.OwnerContact }).(DomainRegistrationOwnerContactOutput)
}

// : The ID of an existing owner contact.
func (o DomainRegistrationOutput) OwnerContactId() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainRegistration) pulumi.StringOutput { return v.OwnerContactId }).(pulumi.StringOutput)
}

// : The Scaleway project ID.
func (o DomainRegistrationOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainRegistration) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// ID of the task that created the domain.
func (o DomainRegistrationOutput) TaskId() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainRegistration) pulumi.StringOutput { return v.TaskId }).(pulumi.StringOutput)
}

// : Technical contact information.
func (o DomainRegistrationOutput) TechnicalContacts() DomainRegistrationTechnicalContactArrayOutput {
	return o.ApplyT(func(v *DomainRegistration) DomainRegistrationTechnicalContactArrayOutput { return v.TechnicalContacts }).(DomainRegistrationTechnicalContactArrayOutput)
}

type DomainRegistrationArrayOutput struct{ *pulumi.OutputState }

func (DomainRegistrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainRegistration)(nil)).Elem()
}

func (o DomainRegistrationArrayOutput) ToDomainRegistrationArrayOutput() DomainRegistrationArrayOutput {
	return o
}

func (o DomainRegistrationArrayOutput) ToDomainRegistrationArrayOutputWithContext(ctx context.Context) DomainRegistrationArrayOutput {
	return o
}

func (o DomainRegistrationArrayOutput) Index(i pulumi.IntInput) DomainRegistrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainRegistration {
		return vs[0].([]*DomainRegistration)[vs[1].(int)]
	}).(DomainRegistrationOutput)
}

type DomainRegistrationMapOutput struct{ *pulumi.OutputState }

func (DomainRegistrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainRegistration)(nil)).Elem()
}

func (o DomainRegistrationMapOutput) ToDomainRegistrationMapOutput() DomainRegistrationMapOutput {
	return o
}

func (o DomainRegistrationMapOutput) ToDomainRegistrationMapOutputWithContext(ctx context.Context) DomainRegistrationMapOutput {
	return o
}

func (o DomainRegistrationMapOutput) MapIndex(k pulumi.StringInput) DomainRegistrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainRegistration {
		return vs[0].(map[string]*DomainRegistration)[vs[1].(string)]
	}).(DomainRegistrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRegistrationInput)(nil)).Elem(), &DomainRegistration{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRegistrationArrayInput)(nil)).Elem(), DomainRegistrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRegistrationMapInput)(nil)).Elem(), DomainRegistrationMap{})
	pulumi.RegisterOutputType(DomainRegistrationOutput{})
	pulumi.RegisterOutputType(DomainRegistrationArrayOutput{})
	pulumi.RegisterOutputType(DomainRegistrationMapOutput{})
}
