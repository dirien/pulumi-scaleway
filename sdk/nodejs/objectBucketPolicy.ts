// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway object storage bucket policy.
 * For more information, see [the documentation](https://www.scaleway.com/en/docs/storage/object/api-cli/bucket-policy/).
 *
 * ## Example Usage
 * ### Example with an IAM user
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@ediri/scaleway";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const default = scaleway.getAccountProject({
 *     name: "default",
 * });
 * const user = scaleway.getIamUser({
 *     email: "user@scaleway.com",
 * });
 * const policyIamPolicy = new scaleway.IamPolicy("policyIamPolicy", {
 *     userId: user.then(user => user.id),
 *     rules: [{
 *         projectIds: [_default.then(_default => _default.id)],
 *         permissionSetNames: ["ObjectStorageFullAccess"],
 *     }],
 * });
 * // Object storage configuration
 * const bucket = new scaleway.ObjectBucket("bucket", {});
 * const policyObjectBucketPolicy = new scaleway.ObjectBucketPolicy("policyObjectBucketPolicy", {
 *     bucket: bucket.name,
 *     policy: pulumi.all([user, bucket.name, bucket.name]).apply(([user, bucketName, bucketName1]) => JSON.stringify({
 *         Version: "2023-04-17",
 *         Id: "MyBucketPolicy",
 *         Statement: [{
 *             Effect: "Allow",
 *             Action: ["s3:*"],
 *             Principal: {
 *                 SCW: `user_id:${user.id}`,
 *             },
 *             Resource: [
 *                 bucketName,
 *                 `${bucketName1}/*`,
 *             ],
 *         }],
 *     })),
 * });
 * ```
 * ### Example with an IAM application
 * ### Creating a bucket and delegating read access to an application
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@ediri/scaleway";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const default = scaleway.getAccountProject({
 *     name: "default",
 * });
 * // IAM configuration
 * const reading_app = new scaleway.IamApplication("reading-app", {});
 * const policyIamPolicy = new scaleway.IamPolicy("policyIamPolicy", {
 *     applicationId: reading_app.id,
 *     rules: [{
 *         projectIds: [_default.then(_default => _default.id)],
 *         permissionSetNames: ["ObjectStorageBucketsRead"],
 *     }],
 * });
 * // Object storage configuration
 * const bucket = new scaleway.ObjectBucket("bucket", {});
 * const policyObjectBucketPolicy = new scaleway.ObjectBucketPolicy("policyObjectBucketPolicy", {
 *     bucket: bucket.id,
 *     policy: pulumi.all([reading_app.id, bucket.name, bucket.name]).apply(([id, bucketName, bucketName1]) => JSON.stringify({
 *         Version: "2023-04-17",
 *         Statement: [{
 *             Sid: "Delegate read access",
 *             Effect: "Allow",
 *             Principal: {
 *                 SCW: `application_id:${id}`,
 *             },
 *             Action: [
 *                 "s3:ListBucket",
 *                 "s3:GetObject",
 *             ],
 *             Resource: [
 *                 bucketName,
 *                 `${bucketName1}/*`,
 *             ],
 *         }],
 *     })),
 * });
 * ```
 * ### Reading the bucket with the application
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@ediri/scaleway";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const reading-app = scaleway.getIamApplication({
 *     name: "reading-app",
 * });
 * const reading_api_key = new scaleway.IamApiKey("reading-api-key", {applicationId: reading_app.then(reading_app => reading_app.id)});
 * const reading_profile = new scaleway.Provider("reading-profile", {
 *     accessKey: reading_api_key.accessKey,
 *     secretKey: reading_api_key.secretKey,
 * });
 * const bucket = scaleway.getObjectBucket({
 *     name: "some-unique-name",
 * });
 * ```
 * ### Example with deprecated version 2012-10-17
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@ediri/scaleway";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const default = scaleway.getAccountProject({
 *     name: "default",
 * });
 * // Object storage configuration
 * const bucket = new scaleway.ObjectBucket("bucket", {region: "fr-par"});
 * const policy = new scaleway.ObjectBucketPolicy("policy", {
 *     bucket: bucket.name,
 *     policy: pulumi.all([_default, bucket.name, bucket.name]).apply(([_default, bucketName, bucketName1]) => JSON.stringify({
 *         Version: "2012-10-17",
 *         Statement: [{
 *             Effect: "Allow",
 *             Action: [
 *                 "s3:ListBucket",
 *                 "s3:GetObjectTagging",
 *             ],
 *             Principal: {
 *                 SCW: `project_id:${_default.id}`,
 *             },
 *             Resource: [
 *                 bucketName,
 *                 `${bucketName1}/*`,
 *             ],
 *         }],
 *     })),
 * });
 * ```
 *
 * **NB:** To configure the AWS provider with Scaleway credentials, please visit this [tutorial](https://www.scaleway.com/en/docs/storage/object/api-cli/object-storage-aws-cli/).
 *
 * ## Import
 *
 * Buckets can be imported using the `{region}/{bucketName}` identifier, e.g. bash
 *
 * ```sh
 *  $ pulumi import scaleway:index/objectBucketPolicy:ObjectBucketPolicy some_bucket fr-par/some-bucket
 * ```
 */
export class ObjectBucketPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ObjectBucketPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectBucketPolicyState, opts?: pulumi.CustomResourceOptions): ObjectBucketPolicy {
        return new ObjectBucketPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/objectBucketPolicy:ObjectBucketPolicy';

    /**
     * Returns true if the given object is an instance of ObjectBucketPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectBucketPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectBucketPolicy.__pulumiType;
    }

    /**
     * The bucket's name or regional ID.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * The text of the policy.
     */
    public readonly policy!: pulumi.Output<string>;
    /**
     * `projectId`) The ID of the project the bucket is associated with.
     *
     * > **Important:** The awsIamPolicyDocument data source may be used, so long as it specifies a principal.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The Scaleway region this bucket resides in.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a ObjectBucketPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectBucketPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectBucketPolicyArgs | ObjectBucketPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectBucketPolicyState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as ObjectBucketPolicyArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.policy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectBucketPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ObjectBucketPolicy resources.
 */
export interface ObjectBucketPolicyState {
    /**
     * The bucket's name or regional ID.
     */
    bucket?: pulumi.Input<string>;
    /**
     * The text of the policy.
     */
    policy?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the bucket is associated with.
     *
     * > **Important:** The awsIamPolicyDocument data source may be used, so long as it specifies a principal.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The Scaleway region this bucket resides in.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectBucketPolicy resource.
 */
export interface ObjectBucketPolicyArgs {
    /**
     * The bucket's name or regional ID.
     */
    bucket: pulumi.Input<string>;
    /**
     * The text of the policy.
     */
    policy: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the bucket is associated with.
     *
     * > **Important:** The awsIamPolicyDocument data source may be used, so long as it specifies a principal.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The Scaleway region this bucket resides in.
     */
    region?: pulumi.Input<string>;
}
