// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@ediri/scaleway";
 *
 * const aclBasicVpcPrivateNetwork = new scaleway.VpcPrivateNetwork("aclBasicVpcPrivateNetwork", {});
 * const aclBasicK8sCluster = new scaleway.K8sCluster("aclBasicK8sCluster", {
 *     version: "1.32.2",
 *     cni: "cilium",
 *     deleteAdditionalResources: true,
 *     privateNetworkId: aclBasicVpcPrivateNetwork.id,
 * });
 * const aclBasicK8sAcl = new scaleway.K8sAcl("aclBasicK8sAcl", {
 *     clusterId: aclBasicK8sCluster.id,
 *     aclRules: [
 *         {
 *             ip: "1.2.3.4/32",
 *             description: "Allow 1.2.3.4",
 *         },
 *         {
 *             scalewayRanges: true,
 *             description: "Allow all Scaleway ranges",
 *         },
 *     ],
 * });
 * ```
 *
 * ### Full-isolation
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@ediri/scaleway";
 *
 * const aclBasicVpcPrivateNetwork = new scaleway.VpcPrivateNetwork("aclBasicVpcPrivateNetwork", {});
 * const aclBasicK8sCluster = new scaleway.K8sCluster("aclBasicK8sCluster", {
 *     version: "1.32.2",
 *     cni: "cilium",
 *     deleteAdditionalResources: true,
 *     privateNetworkId: aclBasicVpcPrivateNetwork.id,
 * });
 * const aclBasicK8sAcl = new scaleway.K8sAcl("aclBasicK8sAcl", {
 *     clusterId: aclBasicK8sCluster.id,
 *     noIpAllowed: true,
 * });
 * ```
 *
 * ## Import
 *
 * Kubernetes ACLs can be imported using the `{region}/{cluster-id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/k8sAcl:K8sAcl acl01 fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class K8sAcl extends pulumi.CustomResource {
    /**
     * Get an existing K8sAcl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8sAclState, opts?: pulumi.CustomResourceOptions): K8sAcl {
        return new K8sAcl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/k8sAcl:K8sAcl';

    /**
     * Returns true if the given object is an instance of K8sAcl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8sAcl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8sAcl.__pulumiType;
    }

    /**
     * A list of ACLs (structure is described below)
     *
     * > **Important:** This block cannot be defined if the `noIpAllowed` field is set to true.
     */
    public readonly aclRules!: pulumi.Output<outputs.K8sAclAclRule[] | undefined>;
    /**
     * UUID of the cluster. The ID of the cluster is also the ID of the ACL resource, as there can only be one per cluster.
     *
     * > **Important:** Updates to `clusterId` will recreate the ACL.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * If set to true, no IP will be allowed and the cluster will be in full-isolation.
     *
     * > **Important:** This field cannot be set to true if the `aclRules` block is defined.
     */
    public readonly noIpAllowed!: pulumi.Output<boolean | undefined>;
    /**
     * `region`) The region in which the ACL rule should be created.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a K8sAcl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: K8sAclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8sAclArgs | K8sAclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8sAclState | undefined;
            resourceInputs["aclRules"] = state ? state.aclRules : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["noIpAllowed"] = state ? state.noIpAllowed : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as K8sAclArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["aclRules"] = args ? args.aclRules : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["noIpAllowed"] = args ? args.noIpAllowed : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(K8sAcl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering K8sAcl resources.
 */
export interface K8sAclState {
    /**
     * A list of ACLs (structure is described below)
     *
     * > **Important:** This block cannot be defined if the `noIpAllowed` field is set to true.
     */
    aclRules?: pulumi.Input<pulumi.Input<inputs.K8sAclAclRule>[]>;
    /**
     * UUID of the cluster. The ID of the cluster is also the ID of the ACL resource, as there can only be one per cluster.
     *
     * > **Important:** Updates to `clusterId` will recreate the ACL.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * If set to true, no IP will be allowed and the cluster will be in full-isolation.
     *
     * > **Important:** This field cannot be set to true if the `aclRules` block is defined.
     */
    noIpAllowed?: pulumi.Input<boolean>;
    /**
     * `region`) The region in which the ACL rule should be created.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a K8sAcl resource.
 */
export interface K8sAclArgs {
    /**
     * A list of ACLs (structure is described below)
     *
     * > **Important:** This block cannot be defined if the `noIpAllowed` field is set to true.
     */
    aclRules?: pulumi.Input<pulumi.Input<inputs.K8sAclAclRule>[]>;
    /**
     * UUID of the cluster. The ID of the cluster is also the ID of the ACL resource, as there can only be one per cluster.
     *
     * > **Important:** Updates to `clusterId` will recreate the ACL.
     */
    clusterId: pulumi.Input<string>;
    /**
     * If set to true, no IP will be allowed and the cluster will be in full-isolation.
     *
     * > **Important:** This field cannot be set to true if the `aclRules` block is defined.
     */
    noIpAllowed?: pulumi.Input<boolean>;
    /**
     * `region`) The region in which the ACL rule should be created.
     */
    region?: pulumi.Input<string>;
}
