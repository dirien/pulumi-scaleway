// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccountProjectArgs, AccountProjectState } from "./accountProject";
export type AccountProject = import("./accountProject").AccountProject;
export const AccountProject: typeof import("./accountProject").AccountProject = null as any;
utilities.lazyLoad(exports, ["AccountProject"], () => require("./accountProject"));

export { AccountSshKeyArgs, AccountSshKeyState } from "./accountSshKey";
export type AccountSshKey = import("./accountSshKey").AccountSshKey;
export const AccountSshKey: typeof import("./accountSshKey").AccountSshKey = null as any;
utilities.lazyLoad(exports, ["AccountSshKey"], () => require("./accountSshKey"));

export { AppleSiliconServerArgs, AppleSiliconServerState } from "./appleSiliconServer";
export type AppleSiliconServer = import("./appleSiliconServer").AppleSiliconServer;
export const AppleSiliconServer: typeof import("./appleSiliconServer").AppleSiliconServer = null as any;
utilities.lazyLoad(exports, ["AppleSiliconServer"], () => require("./appleSiliconServer"));

export { BaremetalServerArgs, BaremetalServerState } from "./baremetalServer";
export type BaremetalServer = import("./baremetalServer").BaremetalServer;
export const BaremetalServer: typeof import("./baremetalServer").BaremetalServer = null as any;
utilities.lazyLoad(exports, ["BaremetalServer"], () => require("./baremetalServer"));

export { BlockSnapshotArgs, BlockSnapshotState } from "./blockSnapshot";
export type BlockSnapshot = import("./blockSnapshot").BlockSnapshot;
export const BlockSnapshot: typeof import("./blockSnapshot").BlockSnapshot = null as any;
utilities.lazyLoad(exports, ["BlockSnapshot"], () => require("./blockSnapshot"));

export { BlockVolumeArgs, BlockVolumeState } from "./blockVolume";
export type BlockVolume = import("./blockVolume").BlockVolume;
export const BlockVolume: typeof import("./blockVolume").BlockVolume = null as any;
utilities.lazyLoad(exports, ["BlockVolume"], () => require("./blockVolume"));

export { CockpitArgs, CockpitState } from "./cockpit";
export type Cockpit = import("./cockpit").Cockpit;
export const Cockpit: typeof import("./cockpit").Cockpit = null as any;
utilities.lazyLoad(exports, ["Cockpit"], () => require("./cockpit"));

export { CockpitGrafanaUserArgs, CockpitGrafanaUserState } from "./cockpitGrafanaUser";
export type CockpitGrafanaUser = import("./cockpitGrafanaUser").CockpitGrafanaUser;
export const CockpitGrafanaUser: typeof import("./cockpitGrafanaUser").CockpitGrafanaUser = null as any;
utilities.lazyLoad(exports, ["CockpitGrafanaUser"], () => require("./cockpitGrafanaUser"));

export { CockpitTokenArgs, CockpitTokenState } from "./cockpitToken";
export type CockpitToken = import("./cockpitToken").CockpitToken;
export const CockpitToken: typeof import("./cockpitToken").CockpitToken = null as any;
utilities.lazyLoad(exports, ["CockpitToken"], () => require("./cockpitToken"));

export { ContainerArgs, ContainerState } from "./container";
export type Container = import("./container").Container;
export const Container: typeof import("./container").Container = null as any;
utilities.lazyLoad(exports, ["Container"], () => require("./container"));

export { ContainerCronArgs, ContainerCronState } from "./containerCron";
export type ContainerCron = import("./containerCron").ContainerCron;
export const ContainerCron: typeof import("./containerCron").ContainerCron = null as any;
utilities.lazyLoad(exports, ["ContainerCron"], () => require("./containerCron"));

export { ContainerDomainArgs, ContainerDomainState } from "./containerDomain";
export type ContainerDomain = import("./containerDomain").ContainerDomain;
export const ContainerDomain: typeof import("./containerDomain").ContainerDomain = null as any;
utilities.lazyLoad(exports, ["ContainerDomain"], () => require("./containerDomain"));

export { ContainerNamespaceArgs, ContainerNamespaceState } from "./containerNamespace";
export type ContainerNamespace = import("./containerNamespace").ContainerNamespace;
export const ContainerNamespace: typeof import("./containerNamespace").ContainerNamespace = null as any;
utilities.lazyLoad(exports, ["ContainerNamespace"], () => require("./containerNamespace"));

export { ContainerTokenArgs, ContainerTokenState } from "./containerToken";
export type ContainerToken = import("./containerToken").ContainerToken;
export const ContainerToken: typeof import("./containerToken").ContainerToken = null as any;
utilities.lazyLoad(exports, ["ContainerToken"], () => require("./containerToken"));

export { ContainerTriggerArgs, ContainerTriggerState } from "./containerTrigger";
export type ContainerTrigger = import("./containerTrigger").ContainerTrigger;
export const ContainerTrigger: typeof import("./containerTrigger").ContainerTrigger = null as any;
utilities.lazyLoad(exports, ["ContainerTrigger"], () => require("./containerTrigger"));

export { DocumentdbDatabaseArgs, DocumentdbDatabaseState } from "./documentdbDatabase";
export type DocumentdbDatabase = import("./documentdbDatabase").DocumentdbDatabase;
export const DocumentdbDatabase: typeof import("./documentdbDatabase").DocumentdbDatabase = null as any;
utilities.lazyLoad(exports, ["DocumentdbDatabase"], () => require("./documentdbDatabase"));

export { DocumentdbInstanceArgs, DocumentdbInstanceState } from "./documentdbInstance";
export type DocumentdbInstance = import("./documentdbInstance").DocumentdbInstance;
export const DocumentdbInstance: typeof import("./documentdbInstance").DocumentdbInstance = null as any;
utilities.lazyLoad(exports, ["DocumentdbInstance"], () => require("./documentdbInstance"));

export { DocumentdbPrivateNetworkEndpointArgs, DocumentdbPrivateNetworkEndpointState } from "./documentdbPrivateNetworkEndpoint";
export type DocumentdbPrivateNetworkEndpoint = import("./documentdbPrivateNetworkEndpoint").DocumentdbPrivateNetworkEndpoint;
export const DocumentdbPrivateNetworkEndpoint: typeof import("./documentdbPrivateNetworkEndpoint").DocumentdbPrivateNetworkEndpoint = null as any;
utilities.lazyLoad(exports, ["DocumentdbPrivateNetworkEndpoint"], () => require("./documentdbPrivateNetworkEndpoint"));

export { DocumentdbPrivilegeArgs, DocumentdbPrivilegeState } from "./documentdbPrivilege";
export type DocumentdbPrivilege = import("./documentdbPrivilege").DocumentdbPrivilege;
export const DocumentdbPrivilege: typeof import("./documentdbPrivilege").DocumentdbPrivilege = null as any;
utilities.lazyLoad(exports, ["DocumentdbPrivilege"], () => require("./documentdbPrivilege"));

export { DocumentdbReadReplicaArgs, DocumentdbReadReplicaState } from "./documentdbReadReplica";
export type DocumentdbReadReplica = import("./documentdbReadReplica").DocumentdbReadReplica;
export const DocumentdbReadReplica: typeof import("./documentdbReadReplica").DocumentdbReadReplica = null as any;
utilities.lazyLoad(exports, ["DocumentdbReadReplica"], () => require("./documentdbReadReplica"));

export { DocumentdbUserArgs, DocumentdbUserState } from "./documentdbUser";
export type DocumentdbUser = import("./documentdbUser").DocumentdbUser;
export const DocumentdbUser: typeof import("./documentdbUser").DocumentdbUser = null as any;
utilities.lazyLoad(exports, ["DocumentdbUser"], () => require("./documentdbUser"));

export { DomainRecordArgs, DomainRecordState } from "./domainRecord";
export type DomainRecord = import("./domainRecord").DomainRecord;
export const DomainRecord: typeof import("./domainRecord").DomainRecord = null as any;
utilities.lazyLoad(exports, ["DomainRecord"], () => require("./domainRecord"));

export { DomainZoneArgs, DomainZoneState } from "./domainZone";
export type DomainZone = import("./domainZone").DomainZone;
export const DomainZone: typeof import("./domainZone").DomainZone = null as any;
utilities.lazyLoad(exports, ["DomainZone"], () => require("./domainZone"));

export { FlexibleIpArgs, FlexibleIpState } from "./flexibleIp";
export type FlexibleIp = import("./flexibleIp").FlexibleIp;
export const FlexibleIp: typeof import("./flexibleIp").FlexibleIp = null as any;
utilities.lazyLoad(exports, ["FlexibleIp"], () => require("./flexibleIp"));

export { FlexibleIpMacAddressArgs, FlexibleIpMacAddressState } from "./flexibleIpMacAddress";
export type FlexibleIpMacAddress = import("./flexibleIpMacAddress").FlexibleIpMacAddress;
export const FlexibleIpMacAddress: typeof import("./flexibleIpMacAddress").FlexibleIpMacAddress = null as any;
utilities.lazyLoad(exports, ["FlexibleIpMacAddress"], () => require("./flexibleIpMacAddress"));

export { FunctionArgs, FunctionState } from "./function";
export type Function = import("./function").Function;
export const Function: typeof import("./function").Function = null as any;
utilities.lazyLoad(exports, ["Function"], () => require("./function"));

export { FunctionCronArgs, FunctionCronState } from "./functionCron";
export type FunctionCron = import("./functionCron").FunctionCron;
export const FunctionCron: typeof import("./functionCron").FunctionCron = null as any;
utilities.lazyLoad(exports, ["FunctionCron"], () => require("./functionCron"));

export { FunctionDomainArgs, FunctionDomainState } from "./functionDomain";
export type FunctionDomain = import("./functionDomain").FunctionDomain;
export const FunctionDomain: typeof import("./functionDomain").FunctionDomain = null as any;
utilities.lazyLoad(exports, ["FunctionDomain"], () => require("./functionDomain"));

export { FunctionNamespaceArgs, FunctionNamespaceState } from "./functionNamespace";
export type FunctionNamespace = import("./functionNamespace").FunctionNamespace;
export const FunctionNamespace: typeof import("./functionNamespace").FunctionNamespace = null as any;
utilities.lazyLoad(exports, ["FunctionNamespace"], () => require("./functionNamespace"));

export { FunctionTokenArgs, FunctionTokenState } from "./functionToken";
export type FunctionToken = import("./functionToken").FunctionToken;
export const FunctionToken: typeof import("./functionToken").FunctionToken = null as any;
utilities.lazyLoad(exports, ["FunctionToken"], () => require("./functionToken"));

export { FunctionTriggerArgs, FunctionTriggerState } from "./functionTrigger";
export type FunctionTrigger = import("./functionTrigger").FunctionTrigger;
export const FunctionTrigger: typeof import("./functionTrigger").FunctionTrigger = null as any;
utilities.lazyLoad(exports, ["FunctionTrigger"], () => require("./functionTrigger"));

export { GetAccountProjectArgs, GetAccountProjectResult, GetAccountProjectOutputArgs } from "./getAccountProject";
export const getAccountProject: typeof import("./getAccountProject").getAccountProject = null as any;
export const getAccountProjectOutput: typeof import("./getAccountProject").getAccountProjectOutput = null as any;
utilities.lazyLoad(exports, ["getAccountProject","getAccountProjectOutput"], () => require("./getAccountProject"));

export { GetAccountSshKeyArgs, GetAccountSshKeyResult, GetAccountSshKeyOutputArgs } from "./getAccountSshKey";
export const getAccountSshKey: typeof import("./getAccountSshKey").getAccountSshKey = null as any;
export const getAccountSshKeyOutput: typeof import("./getAccountSshKey").getAccountSshKeyOutput = null as any;
utilities.lazyLoad(exports, ["getAccountSshKey","getAccountSshKeyOutput"], () => require("./getAccountSshKey"));

export { GetAvailabilityZonesArgs, GetAvailabilityZonesResult, GetAvailabilityZonesOutputArgs } from "./getAvailabilityZones";
export const getAvailabilityZones: typeof import("./getAvailabilityZones").getAvailabilityZones = null as any;
export const getAvailabilityZonesOutput: typeof import("./getAvailabilityZones").getAvailabilityZonesOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilityZones","getAvailabilityZonesOutput"], () => require("./getAvailabilityZones"));

export { GetBaremetalOfferArgs, GetBaremetalOfferResult, GetBaremetalOfferOutputArgs } from "./getBaremetalOffer";
export const getBaremetalOffer: typeof import("./getBaremetalOffer").getBaremetalOffer = null as any;
export const getBaremetalOfferOutput: typeof import("./getBaremetalOffer").getBaremetalOfferOutput = null as any;
utilities.lazyLoad(exports, ["getBaremetalOffer","getBaremetalOfferOutput"], () => require("./getBaremetalOffer"));

export { GetBaremetalOptionArgs, GetBaremetalOptionResult, GetBaremetalOptionOutputArgs } from "./getBaremetalOption";
export const getBaremetalOption: typeof import("./getBaremetalOption").getBaremetalOption = null as any;
export const getBaremetalOptionOutput: typeof import("./getBaremetalOption").getBaremetalOptionOutput = null as any;
utilities.lazyLoad(exports, ["getBaremetalOption","getBaremetalOptionOutput"], () => require("./getBaremetalOption"));

export { GetBaremetalOsArgs, GetBaremetalOsResult, GetBaremetalOsOutputArgs } from "./getBaremetalOs";
export const getBaremetalOs: typeof import("./getBaremetalOs").getBaremetalOs = null as any;
export const getBaremetalOsOutput: typeof import("./getBaremetalOs").getBaremetalOsOutput = null as any;
utilities.lazyLoad(exports, ["getBaremetalOs","getBaremetalOsOutput"], () => require("./getBaremetalOs"));

export { GetBaremetalServerArgs, GetBaremetalServerResult, GetBaremetalServerOutputArgs } from "./getBaremetalServer";
export const getBaremetalServer: typeof import("./getBaremetalServer").getBaremetalServer = null as any;
export const getBaremetalServerOutput: typeof import("./getBaremetalServer").getBaremetalServerOutput = null as any;
utilities.lazyLoad(exports, ["getBaremetalServer","getBaremetalServerOutput"], () => require("./getBaremetalServer"));

export { GetBillingConsumptionsResult } from "./getBillingConsumptions";
export const getBillingConsumptions: typeof import("./getBillingConsumptions").getBillingConsumptions = null as any;
export const getBillingConsumptionsOutput: typeof import("./getBillingConsumptions").getBillingConsumptionsOutput = null as any;
utilities.lazyLoad(exports, ["getBillingConsumptions","getBillingConsumptionsOutput"], () => require("./getBillingConsumptions"));

export { GetBillingInvoicesArgs, GetBillingInvoicesResult, GetBillingInvoicesOutputArgs } from "./getBillingInvoices";
export const getBillingInvoices: typeof import("./getBillingInvoices").getBillingInvoices = null as any;
export const getBillingInvoicesOutput: typeof import("./getBillingInvoices").getBillingInvoicesOutput = null as any;
utilities.lazyLoad(exports, ["getBillingInvoices","getBillingInvoicesOutput"], () => require("./getBillingInvoices"));

export { GetBlockSnapshotArgs, GetBlockSnapshotResult, GetBlockSnapshotOutputArgs } from "./getBlockSnapshot";
export const getBlockSnapshot: typeof import("./getBlockSnapshot").getBlockSnapshot = null as any;
export const getBlockSnapshotOutput: typeof import("./getBlockSnapshot").getBlockSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getBlockSnapshot","getBlockSnapshotOutput"], () => require("./getBlockSnapshot"));

export { GetBlockVolumeArgs, GetBlockVolumeResult, GetBlockVolumeOutputArgs } from "./getBlockVolume";
export const getBlockVolume: typeof import("./getBlockVolume").getBlockVolume = null as any;
export const getBlockVolumeOutput: typeof import("./getBlockVolume").getBlockVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getBlockVolume","getBlockVolumeOutput"], () => require("./getBlockVolume"));

export { GetCockpitArgs, GetCockpitResult, GetCockpitOutputArgs } from "./getCockpit";
export const getCockpit: typeof import("./getCockpit").getCockpit = null as any;
export const getCockpitOutput: typeof import("./getCockpit").getCockpitOutput = null as any;
utilities.lazyLoad(exports, ["getCockpit","getCockpitOutput"], () => require("./getCockpit"));

export { GetCockpitPlanArgs, GetCockpitPlanResult, GetCockpitPlanOutputArgs } from "./getCockpitPlan";
export const getCockpitPlan: typeof import("./getCockpitPlan").getCockpitPlan = null as any;
export const getCockpitPlanOutput: typeof import("./getCockpitPlan").getCockpitPlanOutput = null as any;
utilities.lazyLoad(exports, ["getCockpitPlan","getCockpitPlanOutput"], () => require("./getCockpitPlan"));

export { GetContainerArgs, GetContainerResult, GetContainerOutputArgs } from "./getContainer";
export const getContainer: typeof import("./getContainer").getContainer = null as any;
export const getContainerOutput: typeof import("./getContainer").getContainerOutput = null as any;
utilities.lazyLoad(exports, ["getContainer","getContainerOutput"], () => require("./getContainer"));

export { GetContainerNamespaceArgs, GetContainerNamespaceResult, GetContainerNamespaceOutputArgs } from "./getContainerNamespace";
export const getContainerNamespace: typeof import("./getContainerNamespace").getContainerNamespace = null as any;
export const getContainerNamespaceOutput: typeof import("./getContainerNamespace").getContainerNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getContainerNamespace","getContainerNamespaceOutput"], () => require("./getContainerNamespace"));

export { GetDocumentdbDatabaseArgs, GetDocumentdbDatabaseResult, GetDocumentdbDatabaseOutputArgs } from "./getDocumentdbDatabase";
export const getDocumentdbDatabase: typeof import("./getDocumentdbDatabase").getDocumentdbDatabase = null as any;
export const getDocumentdbDatabaseOutput: typeof import("./getDocumentdbDatabase").getDocumentdbDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDocumentdbDatabase","getDocumentdbDatabaseOutput"], () => require("./getDocumentdbDatabase"));

export { GetDocumentdbInstanceArgs, GetDocumentdbInstanceResult, GetDocumentdbInstanceOutputArgs } from "./getDocumentdbInstance";
export const getDocumentdbInstance: typeof import("./getDocumentdbInstance").getDocumentdbInstance = null as any;
export const getDocumentdbInstanceOutput: typeof import("./getDocumentdbInstance").getDocumentdbInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getDocumentdbInstance","getDocumentdbInstanceOutput"], () => require("./getDocumentdbInstance"));

export { GetDocumentdbLoadBalancerEndpointArgs, GetDocumentdbLoadBalancerEndpointResult, GetDocumentdbLoadBalancerEndpointOutputArgs } from "./getDocumentdbLoadBalancerEndpoint";
export const getDocumentdbLoadBalancerEndpoint: typeof import("./getDocumentdbLoadBalancerEndpoint").getDocumentdbLoadBalancerEndpoint = null as any;
export const getDocumentdbLoadBalancerEndpointOutput: typeof import("./getDocumentdbLoadBalancerEndpoint").getDocumentdbLoadBalancerEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getDocumentdbLoadBalancerEndpoint","getDocumentdbLoadBalancerEndpointOutput"], () => require("./getDocumentdbLoadBalancerEndpoint"));

export { GetDomainRecordArgs, GetDomainRecordResult, GetDomainRecordOutputArgs } from "./getDomainRecord";
export const getDomainRecord: typeof import("./getDomainRecord").getDomainRecord = null as any;
export const getDomainRecordOutput: typeof import("./getDomainRecord").getDomainRecordOutput = null as any;
utilities.lazyLoad(exports, ["getDomainRecord","getDomainRecordOutput"], () => require("./getDomainRecord"));

export { GetDomainZoneArgs, GetDomainZoneResult, GetDomainZoneOutputArgs } from "./getDomainZone";
export const getDomainZone: typeof import("./getDomainZone").getDomainZone = null as any;
export const getDomainZoneOutput: typeof import("./getDomainZone").getDomainZoneOutput = null as any;
utilities.lazyLoad(exports, ["getDomainZone","getDomainZoneOutput"], () => require("./getDomainZone"));

export { GetFlexibleIpArgs, GetFlexibleIpResult, GetFlexibleIpOutputArgs } from "./getFlexibleIp";
export const getFlexibleIp: typeof import("./getFlexibleIp").getFlexibleIp = null as any;
export const getFlexibleIpOutput: typeof import("./getFlexibleIp").getFlexibleIpOutput = null as any;
utilities.lazyLoad(exports, ["getFlexibleIp","getFlexibleIpOutput"], () => require("./getFlexibleIp"));

export { GetFlexibleIpsArgs, GetFlexibleIpsResult, GetFlexibleIpsOutputArgs } from "./getFlexibleIps";
export const getFlexibleIps: typeof import("./getFlexibleIps").getFlexibleIps = null as any;
export const getFlexibleIpsOutput: typeof import("./getFlexibleIps").getFlexibleIpsOutput = null as any;
utilities.lazyLoad(exports, ["getFlexibleIps","getFlexibleIpsOutput"], () => require("./getFlexibleIps"));

export { GetFunctionArgs, GetFunctionResult, GetFunctionOutputArgs } from "./getFunction";
export const getFunction: typeof import("./getFunction").getFunction = null as any;
export const getFunctionOutput: typeof import("./getFunction").getFunctionOutput = null as any;
utilities.lazyLoad(exports, ["getFunction","getFunctionOutput"], () => require("./getFunction"));

export { GetFunctionNamespaceArgs, GetFunctionNamespaceResult, GetFunctionNamespaceOutputArgs } from "./getFunctionNamespace";
export const getFunctionNamespace: typeof import("./getFunctionNamespace").getFunctionNamespace = null as any;
export const getFunctionNamespaceOutput: typeof import("./getFunctionNamespace").getFunctionNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionNamespace","getFunctionNamespaceOutput"], () => require("./getFunctionNamespace"));

export { GetIamApplicationArgs, GetIamApplicationResult, GetIamApplicationOutputArgs } from "./getIamApplication";
export const getIamApplication: typeof import("./getIamApplication").getIamApplication = null as any;
export const getIamApplicationOutput: typeof import("./getIamApplication").getIamApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getIamApplication","getIamApplicationOutput"], () => require("./getIamApplication"));

export { GetIamGroupArgs, GetIamGroupResult, GetIamGroupOutputArgs } from "./getIamGroup";
export const getIamGroup: typeof import("./getIamGroup").getIamGroup = null as any;
export const getIamGroupOutput: typeof import("./getIamGroup").getIamGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIamGroup","getIamGroupOutput"], () => require("./getIamGroup"));

export { GetIamSshKeyArgs, GetIamSshKeyResult, GetIamSshKeyOutputArgs } from "./getIamSshKey";
export const getIamSshKey: typeof import("./getIamSshKey").getIamSshKey = null as any;
export const getIamSshKeyOutput: typeof import("./getIamSshKey").getIamSshKeyOutput = null as any;
utilities.lazyLoad(exports, ["getIamSshKey","getIamSshKeyOutput"], () => require("./getIamSshKey"));

export { GetIamUserArgs, GetIamUserResult, GetIamUserOutputArgs } from "./getIamUser";
export const getIamUser: typeof import("./getIamUser").getIamUser = null as any;
export const getIamUserOutput: typeof import("./getIamUser").getIamUserOutput = null as any;
utilities.lazyLoad(exports, ["getIamUser","getIamUserOutput"], () => require("./getIamUser"));

export { GetInstanceImageArgs, GetInstanceImageResult, GetInstanceImageOutputArgs } from "./getInstanceImage";
export const getInstanceImage: typeof import("./getInstanceImage").getInstanceImage = null as any;
export const getInstanceImageOutput: typeof import("./getInstanceImage").getInstanceImageOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceImage","getInstanceImageOutput"], () => require("./getInstanceImage"));

export { GetInstanceIpArgs, GetInstanceIpResult, GetInstanceIpOutputArgs } from "./getInstanceIp";
export const getInstanceIp: typeof import("./getInstanceIp").getInstanceIp = null as any;
export const getInstanceIpOutput: typeof import("./getInstanceIp").getInstanceIpOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceIp","getInstanceIpOutput"], () => require("./getInstanceIp"));

export { GetInstancePlacementGroupArgs, GetInstancePlacementGroupResult, GetInstancePlacementGroupOutputArgs } from "./getInstancePlacementGroup";
export const getInstancePlacementGroup: typeof import("./getInstancePlacementGroup").getInstancePlacementGroup = null as any;
export const getInstancePlacementGroupOutput: typeof import("./getInstancePlacementGroup").getInstancePlacementGroupOutput = null as any;
utilities.lazyLoad(exports, ["getInstancePlacementGroup","getInstancePlacementGroupOutput"], () => require("./getInstancePlacementGroup"));

export { GetInstancePrivateNicArgs, GetInstancePrivateNicResult, GetInstancePrivateNicOutputArgs } from "./getInstancePrivateNic";
export const getInstancePrivateNic: typeof import("./getInstancePrivateNic").getInstancePrivateNic = null as any;
export const getInstancePrivateNicOutput: typeof import("./getInstancePrivateNic").getInstancePrivateNicOutput = null as any;
utilities.lazyLoad(exports, ["getInstancePrivateNic","getInstancePrivateNicOutput"], () => require("./getInstancePrivateNic"));

export { GetInstanceSecurityGroupArgs, GetInstanceSecurityGroupResult, GetInstanceSecurityGroupOutputArgs } from "./getInstanceSecurityGroup";
export const getInstanceSecurityGroup: typeof import("./getInstanceSecurityGroup").getInstanceSecurityGroup = null as any;
export const getInstanceSecurityGroupOutput: typeof import("./getInstanceSecurityGroup").getInstanceSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceSecurityGroup","getInstanceSecurityGroupOutput"], () => require("./getInstanceSecurityGroup"));

export { GetInstanceServerArgs, GetInstanceServerResult, GetInstanceServerOutputArgs } from "./getInstanceServer";
export const getInstanceServer: typeof import("./getInstanceServer").getInstanceServer = null as any;
export const getInstanceServerOutput: typeof import("./getInstanceServer").getInstanceServerOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceServer","getInstanceServerOutput"], () => require("./getInstanceServer"));

export { GetInstanceServersArgs, GetInstanceServersResult, GetInstanceServersOutputArgs } from "./getInstanceServers";
export const getInstanceServers: typeof import("./getInstanceServers").getInstanceServers = null as any;
export const getInstanceServersOutput: typeof import("./getInstanceServers").getInstanceServersOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceServers","getInstanceServersOutput"], () => require("./getInstanceServers"));

export { GetInstanceSnapshotArgs, GetInstanceSnapshotResult, GetInstanceSnapshotOutputArgs } from "./getInstanceSnapshot";
export const getInstanceSnapshot: typeof import("./getInstanceSnapshot").getInstanceSnapshot = null as any;
export const getInstanceSnapshotOutput: typeof import("./getInstanceSnapshot").getInstanceSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceSnapshot","getInstanceSnapshotOutput"], () => require("./getInstanceSnapshot"));

export { GetInstanceVolumeArgs, GetInstanceVolumeResult, GetInstanceVolumeOutputArgs } from "./getInstanceVolume";
export const getInstanceVolume: typeof import("./getInstanceVolume").getInstanceVolume = null as any;
export const getInstanceVolumeOutput: typeof import("./getInstanceVolume").getInstanceVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceVolume","getInstanceVolumeOutput"], () => require("./getInstanceVolume"));

export { GetIotDeviceArgs, GetIotDeviceResult, GetIotDeviceOutputArgs } from "./getIotDevice";
export const getIotDevice: typeof import("./getIotDevice").getIotDevice = null as any;
export const getIotDeviceOutput: typeof import("./getIotDevice").getIotDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getIotDevice","getIotDeviceOutput"], () => require("./getIotDevice"));

export { GetIotHubArgs, GetIotHubResult, GetIotHubOutputArgs } from "./getIotHub";
export const getIotHub: typeof import("./getIotHub").getIotHub = null as any;
export const getIotHubOutput: typeof import("./getIotHub").getIotHubOutput = null as any;
utilities.lazyLoad(exports, ["getIotHub","getIotHubOutput"], () => require("./getIotHub"));

export { GetIpamIpArgs, GetIpamIpResult, GetIpamIpOutputArgs } from "./getIpamIp";
export const getIpamIp: typeof import("./getIpamIp").getIpamIp = null as any;
export const getIpamIpOutput: typeof import("./getIpamIp").getIpamIpOutput = null as any;
utilities.lazyLoad(exports, ["getIpamIp","getIpamIpOutput"], () => require("./getIpamIp"));

export { GetIpamIpsArgs, GetIpamIpsResult, GetIpamIpsOutputArgs } from "./getIpamIps";
export const getIpamIps: typeof import("./getIpamIps").getIpamIps = null as any;
export const getIpamIpsOutput: typeof import("./getIpamIps").getIpamIpsOutput = null as any;
utilities.lazyLoad(exports, ["getIpamIps","getIpamIpsOutput"], () => require("./getIpamIps"));

export { GetK8sClusterArgs, GetK8sClusterResult, GetK8sClusterOutputArgs } from "./getK8sCluster";
export const getK8sCluster: typeof import("./getK8sCluster").getK8sCluster = null as any;
export const getK8sClusterOutput: typeof import("./getK8sCluster").getK8sClusterOutput = null as any;
utilities.lazyLoad(exports, ["getK8sCluster","getK8sClusterOutput"], () => require("./getK8sCluster"));

export { GetK8sPoolArgs, GetK8sPoolResult, GetK8sPoolOutputArgs } from "./getK8sPool";
export const getK8sPool: typeof import("./getK8sPool").getK8sPool = null as any;
export const getK8sPoolOutput: typeof import("./getK8sPool").getK8sPoolOutput = null as any;
utilities.lazyLoad(exports, ["getK8sPool","getK8sPoolOutput"], () => require("./getK8sPool"));

export { GetK8sVersionArgs, GetK8sVersionResult, GetK8sVersionOutputArgs } from "./getK8sVersion";
export const getK8sVersion: typeof import("./getK8sVersion").getK8sVersion = null as any;
export const getK8sVersionOutput: typeof import("./getK8sVersion").getK8sVersionOutput = null as any;
utilities.lazyLoad(exports, ["getK8sVersion","getK8sVersionOutput"], () => require("./getK8sVersion"));

export { GetLbArgs, GetLbResult, GetLbOutputArgs } from "./getLb";
export const getLb: typeof import("./getLb").getLb = null as any;
export const getLbOutput: typeof import("./getLb").getLbOutput = null as any;
utilities.lazyLoad(exports, ["getLb","getLbOutput"], () => require("./getLb"));

export { GetLbAclsArgs, GetLbAclsResult, GetLbAclsOutputArgs } from "./getLbAcls";
export const getLbAcls: typeof import("./getLbAcls").getLbAcls = null as any;
export const getLbAclsOutput: typeof import("./getLbAcls").getLbAclsOutput = null as any;
utilities.lazyLoad(exports, ["getLbAcls","getLbAclsOutput"], () => require("./getLbAcls"));

export { GetLbBackendArgs, GetLbBackendResult, GetLbBackendOutputArgs } from "./getLbBackend";
export const getLbBackend: typeof import("./getLbBackend").getLbBackend = null as any;
export const getLbBackendOutput: typeof import("./getLbBackend").getLbBackendOutput = null as any;
utilities.lazyLoad(exports, ["getLbBackend","getLbBackendOutput"], () => require("./getLbBackend"));

export { GetLbBackendsArgs, GetLbBackendsResult, GetLbBackendsOutputArgs } from "./getLbBackends";
export const getLbBackends: typeof import("./getLbBackends").getLbBackends = null as any;
export const getLbBackendsOutput: typeof import("./getLbBackends").getLbBackendsOutput = null as any;
utilities.lazyLoad(exports, ["getLbBackends","getLbBackendsOutput"], () => require("./getLbBackends"));

export { GetLbCertificateArgs, GetLbCertificateResult, GetLbCertificateOutputArgs } from "./getLbCertificate";
export const getLbCertificate: typeof import("./getLbCertificate").getLbCertificate = null as any;
export const getLbCertificateOutput: typeof import("./getLbCertificate").getLbCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getLbCertificate","getLbCertificateOutput"], () => require("./getLbCertificate"));

export { GetLbFrontendArgs, GetLbFrontendResult, GetLbFrontendOutputArgs } from "./getLbFrontend";
export const getLbFrontend: typeof import("./getLbFrontend").getLbFrontend = null as any;
export const getLbFrontendOutput: typeof import("./getLbFrontend").getLbFrontendOutput = null as any;
utilities.lazyLoad(exports, ["getLbFrontend","getLbFrontendOutput"], () => require("./getLbFrontend"));

export { GetLbFrontendsArgs, GetLbFrontendsResult, GetLbFrontendsOutputArgs } from "./getLbFrontends";
export const getLbFrontends: typeof import("./getLbFrontends").getLbFrontends = null as any;
export const getLbFrontendsOutput: typeof import("./getLbFrontends").getLbFrontendsOutput = null as any;
utilities.lazyLoad(exports, ["getLbFrontends","getLbFrontendsOutput"], () => require("./getLbFrontends"));

export { GetLbIpArgs, GetLbIpResult, GetLbIpOutputArgs } from "./getLbIp";
export const getLbIp: typeof import("./getLbIp").getLbIp = null as any;
export const getLbIpOutput: typeof import("./getLbIp").getLbIpOutput = null as any;
utilities.lazyLoad(exports, ["getLbIp","getLbIpOutput"], () => require("./getLbIp"));

export { GetLbIpsArgs, GetLbIpsResult, GetLbIpsOutputArgs } from "./getLbIps";
export const getLbIps: typeof import("./getLbIps").getLbIps = null as any;
export const getLbIpsOutput: typeof import("./getLbIps").getLbIpsOutput = null as any;
utilities.lazyLoad(exports, ["getLbIps","getLbIpsOutput"], () => require("./getLbIps"));

export { GetLbRouteArgs, GetLbRouteResult, GetLbRouteOutputArgs } from "./getLbRoute";
export const getLbRoute: typeof import("./getLbRoute").getLbRoute = null as any;
export const getLbRouteOutput: typeof import("./getLbRoute").getLbRouteOutput = null as any;
utilities.lazyLoad(exports, ["getLbRoute","getLbRouteOutput"], () => require("./getLbRoute"));

export { GetLbRoutesArgs, GetLbRoutesResult, GetLbRoutesOutputArgs } from "./getLbRoutes";
export const getLbRoutes: typeof import("./getLbRoutes").getLbRoutes = null as any;
export const getLbRoutesOutput: typeof import("./getLbRoutes").getLbRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getLbRoutes","getLbRoutesOutput"], () => require("./getLbRoutes"));

export { GetLbsArgs, GetLbsResult, GetLbsOutputArgs } from "./getLbs";
export const getLbs: typeof import("./getLbs").getLbs = null as any;
export const getLbsOutput: typeof import("./getLbs").getLbsOutput = null as any;
utilities.lazyLoad(exports, ["getLbs","getLbsOutput"], () => require("./getLbs"));

export { GetMarketplaceImageArgs, GetMarketplaceImageResult, GetMarketplaceImageOutputArgs } from "./getMarketplaceImage";
export const getMarketplaceImage: typeof import("./getMarketplaceImage").getMarketplaceImage = null as any;
export const getMarketplaceImageOutput: typeof import("./getMarketplaceImage").getMarketplaceImageOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplaceImage","getMarketplaceImageOutput"], () => require("./getMarketplaceImage"));

export { GetMnqSqsArgs, GetMnqSqsResult, GetMnqSqsOutputArgs } from "./getMnqSqs";
export const getMnqSqs: typeof import("./getMnqSqs").getMnqSqs = null as any;
export const getMnqSqsOutput: typeof import("./getMnqSqs").getMnqSqsOutput = null as any;
utilities.lazyLoad(exports, ["getMnqSqs","getMnqSqsOutput"], () => require("./getMnqSqs"));

export { GetObjectBucketArgs, GetObjectBucketResult, GetObjectBucketOutputArgs } from "./getObjectBucket";
export const getObjectBucket: typeof import("./getObjectBucket").getObjectBucket = null as any;
export const getObjectBucketOutput: typeof import("./getObjectBucket").getObjectBucketOutput = null as any;
utilities.lazyLoad(exports, ["getObjectBucket","getObjectBucketOutput"], () => require("./getObjectBucket"));

export { GetObjectBucketPolicyArgs, GetObjectBucketPolicyResult, GetObjectBucketPolicyOutputArgs } from "./getObjectBucketPolicy";
export const getObjectBucketPolicy: typeof import("./getObjectBucketPolicy").getObjectBucketPolicy = null as any;
export const getObjectBucketPolicyOutput: typeof import("./getObjectBucketPolicy").getObjectBucketPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getObjectBucketPolicy","getObjectBucketPolicyOutput"], () => require("./getObjectBucketPolicy"));

export { GetRdbAclArgs, GetRdbAclResult, GetRdbAclOutputArgs } from "./getRdbAcl";
export const getRdbAcl: typeof import("./getRdbAcl").getRdbAcl = null as any;
export const getRdbAclOutput: typeof import("./getRdbAcl").getRdbAclOutput = null as any;
utilities.lazyLoad(exports, ["getRdbAcl","getRdbAclOutput"], () => require("./getRdbAcl"));

export { GetRdbDatabaseArgs, GetRdbDatabaseResult, GetRdbDatabaseOutputArgs } from "./getRdbDatabase";
export const getRdbDatabase: typeof import("./getRdbDatabase").getRdbDatabase = null as any;
export const getRdbDatabaseOutput: typeof import("./getRdbDatabase").getRdbDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getRdbDatabase","getRdbDatabaseOutput"], () => require("./getRdbDatabase"));

export { GetRdbDatabaseBackupArgs, GetRdbDatabaseBackupResult, GetRdbDatabaseBackupOutputArgs } from "./getRdbDatabaseBackup";
export const getRdbDatabaseBackup: typeof import("./getRdbDatabaseBackup").getRdbDatabaseBackup = null as any;
export const getRdbDatabaseBackupOutput: typeof import("./getRdbDatabaseBackup").getRdbDatabaseBackupOutput = null as any;
utilities.lazyLoad(exports, ["getRdbDatabaseBackup","getRdbDatabaseBackupOutput"], () => require("./getRdbDatabaseBackup"));

export { GetRdbInstanceArgs, GetRdbInstanceResult, GetRdbInstanceOutputArgs } from "./getRdbInstance";
export const getRdbInstance: typeof import("./getRdbInstance").getRdbInstance = null as any;
export const getRdbInstanceOutput: typeof import("./getRdbInstance").getRdbInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getRdbInstance","getRdbInstanceOutput"], () => require("./getRdbInstance"));

export { GetRdbPrivilegeArgs, GetRdbPrivilegeResult, GetRdbPrivilegeOutputArgs } from "./getRdbPrivilege";
export const getRdbPrivilege: typeof import("./getRdbPrivilege").getRdbPrivilege = null as any;
export const getRdbPrivilegeOutput: typeof import("./getRdbPrivilege").getRdbPrivilegeOutput = null as any;
utilities.lazyLoad(exports, ["getRdbPrivilege","getRdbPrivilegeOutput"], () => require("./getRdbPrivilege"));

export { GetRedisClusterArgs, GetRedisClusterResult, GetRedisClusterOutputArgs } from "./getRedisCluster";
export const getRedisCluster: typeof import("./getRedisCluster").getRedisCluster = null as any;
export const getRedisClusterOutput: typeof import("./getRedisCluster").getRedisClusterOutput = null as any;
utilities.lazyLoad(exports, ["getRedisCluster","getRedisClusterOutput"], () => require("./getRedisCluster"));

export { GetRegistryImageArgs, GetRegistryImageResult, GetRegistryImageOutputArgs } from "./getRegistryImage";
export const getRegistryImage: typeof import("./getRegistryImage").getRegistryImage = null as any;
export const getRegistryImageOutput: typeof import("./getRegistryImage").getRegistryImageOutput = null as any;
utilities.lazyLoad(exports, ["getRegistryImage","getRegistryImageOutput"], () => require("./getRegistryImage"));

export { GetRegistryNamespaceArgs, GetRegistryNamespaceResult, GetRegistryNamespaceOutputArgs } from "./getRegistryNamespace";
export const getRegistryNamespace: typeof import("./getRegistryNamespace").getRegistryNamespace = null as any;
export const getRegistryNamespaceOutput: typeof import("./getRegistryNamespace").getRegistryNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getRegistryNamespace","getRegistryNamespaceOutput"], () => require("./getRegistryNamespace"));

export { GetSecretArgs, GetSecretResult, GetSecretOutputArgs } from "./getSecret";
export const getSecret: typeof import("./getSecret").getSecret = null as any;
export const getSecretOutput: typeof import("./getSecret").getSecretOutput = null as any;
utilities.lazyLoad(exports, ["getSecret","getSecretOutput"], () => require("./getSecret"));

export { GetSecretVersionArgs, GetSecretVersionResult, GetSecretVersionOutputArgs } from "./getSecretVersion";
export const getSecretVersion: typeof import("./getSecretVersion").getSecretVersion = null as any;
export const getSecretVersionOutput: typeof import("./getSecretVersion").getSecretVersionOutput = null as any;
utilities.lazyLoad(exports, ["getSecretVersion","getSecretVersionOutput"], () => require("./getSecretVersion"));

export { GetTemDomainArgs, GetTemDomainResult, GetTemDomainOutputArgs } from "./getTemDomain";
export const getTemDomain: typeof import("./getTemDomain").getTemDomain = null as any;
export const getTemDomainOutput: typeof import("./getTemDomain").getTemDomainOutput = null as any;
utilities.lazyLoad(exports, ["getTemDomain","getTemDomainOutput"], () => require("./getTemDomain"));

export { GetVpcArgs, GetVpcResult, GetVpcOutputArgs } from "./getVpc";
export const getVpc: typeof import("./getVpc").getVpc = null as any;
export const getVpcOutput: typeof import("./getVpc").getVpcOutput = null as any;
utilities.lazyLoad(exports, ["getVpc","getVpcOutput"], () => require("./getVpc"));

export { GetVpcGatewayNetworkArgs, GetVpcGatewayNetworkResult, GetVpcGatewayNetworkOutputArgs } from "./getVpcGatewayNetwork";
export const getVpcGatewayNetwork: typeof import("./getVpcGatewayNetwork").getVpcGatewayNetwork = null as any;
export const getVpcGatewayNetworkOutput: typeof import("./getVpcGatewayNetwork").getVpcGatewayNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getVpcGatewayNetwork","getVpcGatewayNetworkOutput"], () => require("./getVpcGatewayNetwork"));

export { GetVpcPrivateNetworkArgs, GetVpcPrivateNetworkResult, GetVpcPrivateNetworkOutputArgs } from "./getVpcPrivateNetwork";
export const getVpcPrivateNetwork: typeof import("./getVpcPrivateNetwork").getVpcPrivateNetwork = null as any;
export const getVpcPrivateNetworkOutput: typeof import("./getVpcPrivateNetwork").getVpcPrivateNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPrivateNetwork","getVpcPrivateNetworkOutput"], () => require("./getVpcPrivateNetwork"));

export { GetVpcPublicGatewayArgs, GetVpcPublicGatewayResult, GetVpcPublicGatewayOutputArgs } from "./getVpcPublicGateway";
export const getVpcPublicGateway: typeof import("./getVpcPublicGateway").getVpcPublicGateway = null as any;
export const getVpcPublicGatewayOutput: typeof import("./getVpcPublicGateway").getVpcPublicGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPublicGateway","getVpcPublicGatewayOutput"], () => require("./getVpcPublicGateway"));

export { GetVpcPublicGatewayDhcpArgs, GetVpcPublicGatewayDhcpResult, GetVpcPublicGatewayDhcpOutputArgs } from "./getVpcPublicGatewayDhcp";
export const getVpcPublicGatewayDhcp: typeof import("./getVpcPublicGatewayDhcp").getVpcPublicGatewayDhcp = null as any;
export const getVpcPublicGatewayDhcpOutput: typeof import("./getVpcPublicGatewayDhcp").getVpcPublicGatewayDhcpOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPublicGatewayDhcp","getVpcPublicGatewayDhcpOutput"], () => require("./getVpcPublicGatewayDhcp"));

export { GetVpcPublicGatewayDhcpReservationArgs, GetVpcPublicGatewayDhcpReservationResult, GetVpcPublicGatewayDhcpReservationOutputArgs } from "./getVpcPublicGatewayDhcpReservation";
export const getVpcPublicGatewayDhcpReservation: typeof import("./getVpcPublicGatewayDhcpReservation").getVpcPublicGatewayDhcpReservation = null as any;
export const getVpcPublicGatewayDhcpReservationOutput: typeof import("./getVpcPublicGatewayDhcpReservation").getVpcPublicGatewayDhcpReservationOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPublicGatewayDhcpReservation","getVpcPublicGatewayDhcpReservationOutput"], () => require("./getVpcPublicGatewayDhcpReservation"));

export { GetVpcPublicGatewayIpArgs, GetVpcPublicGatewayIpResult, GetVpcPublicGatewayIpOutputArgs } from "./getVpcPublicGatewayIp";
export const getVpcPublicGatewayIp: typeof import("./getVpcPublicGatewayIp").getVpcPublicGatewayIp = null as any;
export const getVpcPublicGatewayIpOutput: typeof import("./getVpcPublicGatewayIp").getVpcPublicGatewayIpOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPublicGatewayIp","getVpcPublicGatewayIpOutput"], () => require("./getVpcPublicGatewayIp"));

export { GetVpcPublicGatewayPatRuleArgs, GetVpcPublicGatewayPatRuleResult, GetVpcPublicGatewayPatRuleOutputArgs } from "./getVpcPublicGatewayPatRule";
export const getVpcPublicGatewayPatRule: typeof import("./getVpcPublicGatewayPatRule").getVpcPublicGatewayPatRule = null as any;
export const getVpcPublicGatewayPatRuleOutput: typeof import("./getVpcPublicGatewayPatRule").getVpcPublicGatewayPatRuleOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPublicGatewayPatRule","getVpcPublicGatewayPatRuleOutput"], () => require("./getVpcPublicGatewayPatRule"));

export { GetVpcsArgs, GetVpcsResult, GetVpcsOutputArgs } from "./getVpcs";
export const getVpcs: typeof import("./getVpcs").getVpcs = null as any;
export const getVpcsOutput: typeof import("./getVpcs").getVpcsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcs","getVpcsOutput"], () => require("./getVpcs"));

export { GetWebhostingArgs, GetWebhostingResult, GetWebhostingOutputArgs } from "./getWebhosting";
export const getWebhosting: typeof import("./getWebhosting").getWebhosting = null as any;
export const getWebhostingOutput: typeof import("./getWebhosting").getWebhostingOutput = null as any;
utilities.lazyLoad(exports, ["getWebhosting","getWebhostingOutput"], () => require("./getWebhosting"));

export { GetWebhostingOfferArgs, GetWebhostingOfferResult, GetWebhostingOfferOutputArgs } from "./getWebhostingOffer";
export const getWebhostingOffer: typeof import("./getWebhostingOffer").getWebhostingOffer = null as any;
export const getWebhostingOfferOutput: typeof import("./getWebhostingOffer").getWebhostingOfferOutput = null as any;
utilities.lazyLoad(exports, ["getWebhostingOffer","getWebhostingOfferOutput"], () => require("./getWebhostingOffer"));

export { IamApiKeyArgs, IamApiKeyState } from "./iamApiKey";
export type IamApiKey = import("./iamApiKey").IamApiKey;
export const IamApiKey: typeof import("./iamApiKey").IamApiKey = null as any;
utilities.lazyLoad(exports, ["IamApiKey"], () => require("./iamApiKey"));

export { IamApplicationArgs, IamApplicationState } from "./iamApplication";
export type IamApplication = import("./iamApplication").IamApplication;
export const IamApplication: typeof import("./iamApplication").IamApplication = null as any;
utilities.lazyLoad(exports, ["IamApplication"], () => require("./iamApplication"));

export { IamGroupArgs, IamGroupState } from "./iamGroup";
export type IamGroup = import("./iamGroup").IamGroup;
export const IamGroup: typeof import("./iamGroup").IamGroup = null as any;
utilities.lazyLoad(exports, ["IamGroup"], () => require("./iamGroup"));

export { IamGroupMembershipArgs, IamGroupMembershipState } from "./iamGroupMembership";
export type IamGroupMembership = import("./iamGroupMembership").IamGroupMembership;
export const IamGroupMembership: typeof import("./iamGroupMembership").IamGroupMembership = null as any;
utilities.lazyLoad(exports, ["IamGroupMembership"], () => require("./iamGroupMembership"));

export { IamPolicyArgs, IamPolicyState } from "./iamPolicy";
export type IamPolicy = import("./iamPolicy").IamPolicy;
export const IamPolicy: typeof import("./iamPolicy").IamPolicy = null as any;
utilities.lazyLoad(exports, ["IamPolicy"], () => require("./iamPolicy"));

export { IamSshKeyArgs, IamSshKeyState } from "./iamSshKey";
export type IamSshKey = import("./iamSshKey").IamSshKey;
export const IamSshKey: typeof import("./iamSshKey").IamSshKey = null as any;
utilities.lazyLoad(exports, ["IamSshKey"], () => require("./iamSshKey"));

export { IamUserArgs, IamUserState } from "./iamUser";
export type IamUser = import("./iamUser").IamUser;
export const IamUser: typeof import("./iamUser").IamUser = null as any;
utilities.lazyLoad(exports, ["IamUser"], () => require("./iamUser"));

export { InstanceImageArgs, InstanceImageState } from "./instanceImage";
export type InstanceImage = import("./instanceImage").InstanceImage;
export const InstanceImage: typeof import("./instanceImage").InstanceImage = null as any;
utilities.lazyLoad(exports, ["InstanceImage"], () => require("./instanceImage"));

export { InstanceIpArgs, InstanceIpState } from "./instanceIp";
export type InstanceIp = import("./instanceIp").InstanceIp;
export const InstanceIp: typeof import("./instanceIp").InstanceIp = null as any;
utilities.lazyLoad(exports, ["InstanceIp"], () => require("./instanceIp"));

export { InstanceIpReverseDnsArgs, InstanceIpReverseDnsState } from "./instanceIpReverseDns";
export type InstanceIpReverseDns = import("./instanceIpReverseDns").InstanceIpReverseDns;
export const InstanceIpReverseDns: typeof import("./instanceIpReverseDns").InstanceIpReverseDns = null as any;
utilities.lazyLoad(exports, ["InstanceIpReverseDns"], () => require("./instanceIpReverseDns"));

export { InstancePlacementGroupArgs, InstancePlacementGroupState } from "./instancePlacementGroup";
export type InstancePlacementGroup = import("./instancePlacementGroup").InstancePlacementGroup;
export const InstancePlacementGroup: typeof import("./instancePlacementGroup").InstancePlacementGroup = null as any;
utilities.lazyLoad(exports, ["InstancePlacementGroup"], () => require("./instancePlacementGroup"));

export { InstancePrivateNicArgs, InstancePrivateNicState } from "./instancePrivateNic";
export type InstancePrivateNic = import("./instancePrivateNic").InstancePrivateNic;
export const InstancePrivateNic: typeof import("./instancePrivateNic").InstancePrivateNic = null as any;
utilities.lazyLoad(exports, ["InstancePrivateNic"], () => require("./instancePrivateNic"));

export { InstanceSecurityGroupArgs, InstanceSecurityGroupState } from "./instanceSecurityGroup";
export type InstanceSecurityGroup = import("./instanceSecurityGroup").InstanceSecurityGroup;
export const InstanceSecurityGroup: typeof import("./instanceSecurityGroup").InstanceSecurityGroup = null as any;
utilities.lazyLoad(exports, ["InstanceSecurityGroup"], () => require("./instanceSecurityGroup"));

export { InstanceSecurityGroupRulesArgs, InstanceSecurityGroupRulesState } from "./instanceSecurityGroupRules";
export type InstanceSecurityGroupRules = import("./instanceSecurityGroupRules").InstanceSecurityGroupRules;
export const InstanceSecurityGroupRules: typeof import("./instanceSecurityGroupRules").InstanceSecurityGroupRules = null as any;
utilities.lazyLoad(exports, ["InstanceSecurityGroupRules"], () => require("./instanceSecurityGroupRules"));

export { InstanceServerArgs, InstanceServerState } from "./instanceServer";
export type InstanceServer = import("./instanceServer").InstanceServer;
export const InstanceServer: typeof import("./instanceServer").InstanceServer = null as any;
utilities.lazyLoad(exports, ["InstanceServer"], () => require("./instanceServer"));

export { InstanceSnapshotArgs, InstanceSnapshotState } from "./instanceSnapshot";
export type InstanceSnapshot = import("./instanceSnapshot").InstanceSnapshot;
export const InstanceSnapshot: typeof import("./instanceSnapshot").InstanceSnapshot = null as any;
utilities.lazyLoad(exports, ["InstanceSnapshot"], () => require("./instanceSnapshot"));

export { InstanceUserDataArgs, InstanceUserDataState } from "./instanceUserData";
export type InstanceUserData = import("./instanceUserData").InstanceUserData;
export const InstanceUserData: typeof import("./instanceUserData").InstanceUserData = null as any;
utilities.lazyLoad(exports, ["InstanceUserData"], () => require("./instanceUserData"));

export { InstanceVolumeArgs, InstanceVolumeState } from "./instanceVolume";
export type InstanceVolume = import("./instanceVolume").InstanceVolume;
export const InstanceVolume: typeof import("./instanceVolume").InstanceVolume = null as any;
utilities.lazyLoad(exports, ["InstanceVolume"], () => require("./instanceVolume"));

export { IotDeviceArgs, IotDeviceState } from "./iotDevice";
export type IotDevice = import("./iotDevice").IotDevice;
export const IotDevice: typeof import("./iotDevice").IotDevice = null as any;
utilities.lazyLoad(exports, ["IotDevice"], () => require("./iotDevice"));

export { IotHubArgs, IotHubState } from "./iotHub";
export type IotHub = import("./iotHub").IotHub;
export const IotHub: typeof import("./iotHub").IotHub = null as any;
utilities.lazyLoad(exports, ["IotHub"], () => require("./iotHub"));

export { IotNetworkArgs, IotNetworkState } from "./iotNetwork";
export type IotNetwork = import("./iotNetwork").IotNetwork;
export const IotNetwork: typeof import("./iotNetwork").IotNetwork = null as any;
utilities.lazyLoad(exports, ["IotNetwork"], () => require("./iotNetwork"));

export { IotRouteArgs, IotRouteState } from "./iotRoute";
export type IotRoute = import("./iotRoute").IotRoute;
export const IotRoute: typeof import("./iotRoute").IotRoute = null as any;
utilities.lazyLoad(exports, ["IotRoute"], () => require("./iotRoute"));

export { IpamIpArgs, IpamIpState } from "./ipamIp";
export type IpamIp = import("./ipamIp").IpamIp;
export const IpamIp: typeof import("./ipamIp").IpamIp = null as any;
utilities.lazyLoad(exports, ["IpamIp"], () => require("./ipamIp"));

export { JobDefinitionArgs, JobDefinitionState } from "./jobDefinition";
export type JobDefinition = import("./jobDefinition").JobDefinition;
export const JobDefinition: typeof import("./jobDefinition").JobDefinition = null as any;
utilities.lazyLoad(exports, ["JobDefinition"], () => require("./jobDefinition"));

export { K8sClusterArgs, K8sClusterState } from "./k8sCluster";
export type K8sCluster = import("./k8sCluster").K8sCluster;
export const K8sCluster: typeof import("./k8sCluster").K8sCluster = null as any;
utilities.lazyLoad(exports, ["K8sCluster"], () => require("./k8sCluster"));

export { K8sPoolArgs, K8sPoolState } from "./k8sPool";
export type K8sPool = import("./k8sPool").K8sPool;
export const K8sPool: typeof import("./k8sPool").K8sPool = null as any;
utilities.lazyLoad(exports, ["K8sPool"], () => require("./k8sPool"));

export { LbArgs, LbState } from "./lb";
export type Lb = import("./lb").Lb;
export const Lb: typeof import("./lb").Lb = null as any;
utilities.lazyLoad(exports, ["Lb"], () => require("./lb"));

export { LbAclArgs, LbAclState } from "./lbAcl";
export type LbAcl = import("./lbAcl").LbAcl;
export const LbAcl: typeof import("./lbAcl").LbAcl = null as any;
utilities.lazyLoad(exports, ["LbAcl"], () => require("./lbAcl"));

export { LbBackendArgs, LbBackendState } from "./lbBackend";
export type LbBackend = import("./lbBackend").LbBackend;
export const LbBackend: typeof import("./lbBackend").LbBackend = null as any;
utilities.lazyLoad(exports, ["LbBackend"], () => require("./lbBackend"));

export { LbCertificateArgs, LbCertificateState } from "./lbCertificate";
export type LbCertificate = import("./lbCertificate").LbCertificate;
export const LbCertificate: typeof import("./lbCertificate").LbCertificate = null as any;
utilities.lazyLoad(exports, ["LbCertificate"], () => require("./lbCertificate"));

export { LbFrontendArgs, LbFrontendState } from "./lbFrontend";
export type LbFrontend = import("./lbFrontend").LbFrontend;
export const LbFrontend: typeof import("./lbFrontend").LbFrontend = null as any;
utilities.lazyLoad(exports, ["LbFrontend"], () => require("./lbFrontend"));

export { LbIpArgs, LbIpState } from "./lbIp";
export type LbIp = import("./lbIp").LbIp;
export const LbIp: typeof import("./lbIp").LbIp = null as any;
utilities.lazyLoad(exports, ["LbIp"], () => require("./lbIp"));

export { LbRouteArgs, LbRouteState } from "./lbRoute";
export type LbRoute = import("./lbRoute").LbRoute;
export const LbRoute: typeof import("./lbRoute").LbRoute = null as any;
utilities.lazyLoad(exports, ["LbRoute"], () => require("./lbRoute"));

export { MnqNatsAccountArgs, MnqNatsAccountState } from "./mnqNatsAccount";
export type MnqNatsAccount = import("./mnqNatsAccount").MnqNatsAccount;
export const MnqNatsAccount: typeof import("./mnqNatsAccount").MnqNatsAccount = null as any;
utilities.lazyLoad(exports, ["MnqNatsAccount"], () => require("./mnqNatsAccount"));

export { MnqNatsCredentialsArgs, MnqNatsCredentialsState } from "./mnqNatsCredentials";
export type MnqNatsCredentials = import("./mnqNatsCredentials").MnqNatsCredentials;
export const MnqNatsCredentials: typeof import("./mnqNatsCredentials").MnqNatsCredentials = null as any;
utilities.lazyLoad(exports, ["MnqNatsCredentials"], () => require("./mnqNatsCredentials"));

export { MnqSnsArgs, MnqSnsState } from "./mnqSns";
export type MnqSns = import("./mnqSns").MnqSns;
export const MnqSns: typeof import("./mnqSns").MnqSns = null as any;
utilities.lazyLoad(exports, ["MnqSns"], () => require("./mnqSns"));

export { MnqSnsCredentialsArgs, MnqSnsCredentialsState } from "./mnqSnsCredentials";
export type MnqSnsCredentials = import("./mnqSnsCredentials").MnqSnsCredentials;
export const MnqSnsCredentials: typeof import("./mnqSnsCredentials").MnqSnsCredentials = null as any;
utilities.lazyLoad(exports, ["MnqSnsCredentials"], () => require("./mnqSnsCredentials"));

export { MnqSnsTopicArgs, MnqSnsTopicState } from "./mnqSnsTopic";
export type MnqSnsTopic = import("./mnqSnsTopic").MnqSnsTopic;
export const MnqSnsTopic: typeof import("./mnqSnsTopic").MnqSnsTopic = null as any;
utilities.lazyLoad(exports, ["MnqSnsTopic"], () => require("./mnqSnsTopic"));

export { MnqSnsTopicSubscriptionArgs, MnqSnsTopicSubscriptionState } from "./mnqSnsTopicSubscription";
export type MnqSnsTopicSubscription = import("./mnqSnsTopicSubscription").MnqSnsTopicSubscription;
export const MnqSnsTopicSubscription: typeof import("./mnqSnsTopicSubscription").MnqSnsTopicSubscription = null as any;
utilities.lazyLoad(exports, ["MnqSnsTopicSubscription"], () => require("./mnqSnsTopicSubscription"));

export { MnqSqsArgs, MnqSqsState } from "./mnqSqs";
export type MnqSqs = import("./mnqSqs").MnqSqs;
export const MnqSqs: typeof import("./mnqSqs").MnqSqs = null as any;
utilities.lazyLoad(exports, ["MnqSqs"], () => require("./mnqSqs"));

export { MnqSqsCredentialsArgs, MnqSqsCredentialsState } from "./mnqSqsCredentials";
export type MnqSqsCredentials = import("./mnqSqsCredentials").MnqSqsCredentials;
export const MnqSqsCredentials: typeof import("./mnqSqsCredentials").MnqSqsCredentials = null as any;
utilities.lazyLoad(exports, ["MnqSqsCredentials"], () => require("./mnqSqsCredentials"));

export { MnqSqsQueueArgs, MnqSqsQueueState } from "./mnqSqsQueue";
export type MnqSqsQueue = import("./mnqSqsQueue").MnqSqsQueue;
export const MnqSqsQueue: typeof import("./mnqSqsQueue").MnqSqsQueue = null as any;
utilities.lazyLoad(exports, ["MnqSqsQueue"], () => require("./mnqSqsQueue"));

export { ObjectBucketArgs, ObjectBucketState } from "./objectBucket";
export type ObjectBucket = import("./objectBucket").ObjectBucket;
export const ObjectBucket: typeof import("./objectBucket").ObjectBucket = null as any;
utilities.lazyLoad(exports, ["ObjectBucket"], () => require("./objectBucket"));

export { ObjectBucketAclArgs, ObjectBucketAclState } from "./objectBucketAcl";
export type ObjectBucketAcl = import("./objectBucketAcl").ObjectBucketAcl;
export const ObjectBucketAcl: typeof import("./objectBucketAcl").ObjectBucketAcl = null as any;
utilities.lazyLoad(exports, ["ObjectBucketAcl"], () => require("./objectBucketAcl"));

export { ObjectBucketLockConfigurationArgs, ObjectBucketLockConfigurationState } from "./objectBucketLockConfiguration";
export type ObjectBucketLockConfiguration = import("./objectBucketLockConfiguration").ObjectBucketLockConfiguration;
export const ObjectBucketLockConfiguration: typeof import("./objectBucketLockConfiguration").ObjectBucketLockConfiguration = null as any;
utilities.lazyLoad(exports, ["ObjectBucketLockConfiguration"], () => require("./objectBucketLockConfiguration"));

export { ObjectBucketPolicyArgs, ObjectBucketPolicyState } from "./objectBucketPolicy";
export type ObjectBucketPolicy = import("./objectBucketPolicy").ObjectBucketPolicy;
export const ObjectBucketPolicy: typeof import("./objectBucketPolicy").ObjectBucketPolicy = null as any;
utilities.lazyLoad(exports, ["ObjectBucketPolicy"], () => require("./objectBucketPolicy"));

export { ObjectBucketWebsiteConfigurationArgs, ObjectBucketWebsiteConfigurationState } from "./objectBucketWebsiteConfiguration";
export type ObjectBucketWebsiteConfiguration = import("./objectBucketWebsiteConfiguration").ObjectBucketWebsiteConfiguration;
export const ObjectBucketWebsiteConfiguration: typeof import("./objectBucketWebsiteConfiguration").ObjectBucketWebsiteConfiguration = null as any;
utilities.lazyLoad(exports, ["ObjectBucketWebsiteConfiguration"], () => require("./objectBucketWebsiteConfiguration"));

export { ObjectItemArgs, ObjectItemState } from "./objectItem";
export type ObjectItem = import("./objectItem").ObjectItem;
export const ObjectItem: typeof import("./objectItem").ObjectItem = null as any;
utilities.lazyLoad(exports, ["ObjectItem"], () => require("./objectItem"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RdbAclArgs, RdbAclState } from "./rdbAcl";
export type RdbAcl = import("./rdbAcl").RdbAcl;
export const RdbAcl: typeof import("./rdbAcl").RdbAcl = null as any;
utilities.lazyLoad(exports, ["RdbAcl"], () => require("./rdbAcl"));

export { RdbDatabaseArgs, RdbDatabaseState } from "./rdbDatabase";
export type RdbDatabase = import("./rdbDatabase").RdbDatabase;
export const RdbDatabase: typeof import("./rdbDatabase").RdbDatabase = null as any;
utilities.lazyLoad(exports, ["RdbDatabase"], () => require("./rdbDatabase"));

export { RdbDatabaseBackupArgs, RdbDatabaseBackupState } from "./rdbDatabaseBackup";
export type RdbDatabaseBackup = import("./rdbDatabaseBackup").RdbDatabaseBackup;
export const RdbDatabaseBackup: typeof import("./rdbDatabaseBackup").RdbDatabaseBackup = null as any;
utilities.lazyLoad(exports, ["RdbDatabaseBackup"], () => require("./rdbDatabaseBackup"));

export { RdbInstanceArgs, RdbInstanceState } from "./rdbInstance";
export type RdbInstance = import("./rdbInstance").RdbInstance;
export const RdbInstance: typeof import("./rdbInstance").RdbInstance = null as any;
utilities.lazyLoad(exports, ["RdbInstance"], () => require("./rdbInstance"));

export { RdbPrivilegeArgs, RdbPrivilegeState } from "./rdbPrivilege";
export type RdbPrivilege = import("./rdbPrivilege").RdbPrivilege;
export const RdbPrivilege: typeof import("./rdbPrivilege").RdbPrivilege = null as any;
utilities.lazyLoad(exports, ["RdbPrivilege"], () => require("./rdbPrivilege"));

export { RdbReadReplicaArgs, RdbReadReplicaState } from "./rdbReadReplica";
export type RdbReadReplica = import("./rdbReadReplica").RdbReadReplica;
export const RdbReadReplica: typeof import("./rdbReadReplica").RdbReadReplica = null as any;
utilities.lazyLoad(exports, ["RdbReadReplica"], () => require("./rdbReadReplica"));

export { RdbUserArgs, RdbUserState } from "./rdbUser";
export type RdbUser = import("./rdbUser").RdbUser;
export const RdbUser: typeof import("./rdbUser").RdbUser = null as any;
utilities.lazyLoad(exports, ["RdbUser"], () => require("./rdbUser"));

export { RedisClusterArgs, RedisClusterState } from "./redisCluster";
export type RedisCluster = import("./redisCluster").RedisCluster;
export const RedisCluster: typeof import("./redisCluster").RedisCluster = null as any;
utilities.lazyLoad(exports, ["RedisCluster"], () => require("./redisCluster"));

export { RegistryNamespaceArgs, RegistryNamespaceState } from "./registryNamespace";
export type RegistryNamespace = import("./registryNamespace").RegistryNamespace;
export const RegistryNamespace: typeof import("./registryNamespace").RegistryNamespace = null as any;
utilities.lazyLoad(exports, ["RegistryNamespace"], () => require("./registryNamespace"));

export { SdbSqlDatabaseArgs, SdbSqlDatabaseState } from "./sdbSqlDatabase";
export type SdbSqlDatabase = import("./sdbSqlDatabase").SdbSqlDatabase;
export const SdbSqlDatabase: typeof import("./sdbSqlDatabase").SdbSqlDatabase = null as any;
utilities.lazyLoad(exports, ["SdbSqlDatabase"], () => require("./sdbSqlDatabase"));

export { SecretArgs, SecretState } from "./secret";
export type Secret = import("./secret").Secret;
export const Secret: typeof import("./secret").Secret = null as any;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));

export { SecretVersionArgs, SecretVersionState } from "./secretVersion";
export type SecretVersion = import("./secretVersion").SecretVersion;
export const SecretVersion: typeof import("./secretVersion").SecretVersion = null as any;
utilities.lazyLoad(exports, ["SecretVersion"], () => require("./secretVersion"));

export { TemDomainArgs, TemDomainState } from "./temDomain";
export type TemDomain = import("./temDomain").TemDomain;
export const TemDomain: typeof import("./temDomain").TemDomain = null as any;
utilities.lazyLoad(exports, ["TemDomain"], () => require("./temDomain"));

export { VpcArgs, VpcState } from "./vpc";
export type Vpc = import("./vpc").Vpc;
export const Vpc: typeof import("./vpc").Vpc = null as any;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));

export { VpcGatewayNetworkArgs, VpcGatewayNetworkState } from "./vpcGatewayNetwork";
export type VpcGatewayNetwork = import("./vpcGatewayNetwork").VpcGatewayNetwork;
export const VpcGatewayNetwork: typeof import("./vpcGatewayNetwork").VpcGatewayNetwork = null as any;
utilities.lazyLoad(exports, ["VpcGatewayNetwork"], () => require("./vpcGatewayNetwork"));

export { VpcPrivateNetworkArgs, VpcPrivateNetworkState } from "./vpcPrivateNetwork";
export type VpcPrivateNetwork = import("./vpcPrivateNetwork").VpcPrivateNetwork;
export const VpcPrivateNetwork: typeof import("./vpcPrivateNetwork").VpcPrivateNetwork = null as any;
utilities.lazyLoad(exports, ["VpcPrivateNetwork"], () => require("./vpcPrivateNetwork"));

export { VpcPublicGatewayArgs, VpcPublicGatewayState } from "./vpcPublicGateway";
export type VpcPublicGateway = import("./vpcPublicGateway").VpcPublicGateway;
export const VpcPublicGateway: typeof import("./vpcPublicGateway").VpcPublicGateway = null as any;
utilities.lazyLoad(exports, ["VpcPublicGateway"], () => require("./vpcPublicGateway"));

export { VpcPublicGatewayDhcpArgs, VpcPublicGatewayDhcpState } from "./vpcPublicGatewayDhcp";
export type VpcPublicGatewayDhcp = import("./vpcPublicGatewayDhcp").VpcPublicGatewayDhcp;
export const VpcPublicGatewayDhcp: typeof import("./vpcPublicGatewayDhcp").VpcPublicGatewayDhcp = null as any;
utilities.lazyLoad(exports, ["VpcPublicGatewayDhcp"], () => require("./vpcPublicGatewayDhcp"));

export { VpcPublicGatewayDhcpReservationArgs, VpcPublicGatewayDhcpReservationState } from "./vpcPublicGatewayDhcpReservation";
export type VpcPublicGatewayDhcpReservation = import("./vpcPublicGatewayDhcpReservation").VpcPublicGatewayDhcpReservation;
export const VpcPublicGatewayDhcpReservation: typeof import("./vpcPublicGatewayDhcpReservation").VpcPublicGatewayDhcpReservation = null as any;
utilities.lazyLoad(exports, ["VpcPublicGatewayDhcpReservation"], () => require("./vpcPublicGatewayDhcpReservation"));

export { VpcPublicGatewayIpArgs, VpcPublicGatewayIpState } from "./vpcPublicGatewayIp";
export type VpcPublicGatewayIp = import("./vpcPublicGatewayIp").VpcPublicGatewayIp;
export const VpcPublicGatewayIp: typeof import("./vpcPublicGatewayIp").VpcPublicGatewayIp = null as any;
utilities.lazyLoad(exports, ["VpcPublicGatewayIp"], () => require("./vpcPublicGatewayIp"));

export { VpcPublicGatewayIpReverseDnsArgs, VpcPublicGatewayIpReverseDnsState } from "./vpcPublicGatewayIpReverseDns";
export type VpcPublicGatewayIpReverseDns = import("./vpcPublicGatewayIpReverseDns").VpcPublicGatewayIpReverseDns;
export const VpcPublicGatewayIpReverseDns: typeof import("./vpcPublicGatewayIpReverseDns").VpcPublicGatewayIpReverseDns = null as any;
utilities.lazyLoad(exports, ["VpcPublicGatewayIpReverseDns"], () => require("./vpcPublicGatewayIpReverseDns"));

export { VpcPublicGatewayPatRuleArgs, VpcPublicGatewayPatRuleState } from "./vpcPublicGatewayPatRule";
export type VpcPublicGatewayPatRule = import("./vpcPublicGatewayPatRule").VpcPublicGatewayPatRule;
export const VpcPublicGatewayPatRule: typeof import("./vpcPublicGatewayPatRule").VpcPublicGatewayPatRule = null as any;
utilities.lazyLoad(exports, ["VpcPublicGatewayPatRule"], () => require("./vpcPublicGatewayPatRule"));

export { WebhostingArgs, WebhostingState } from "./webhosting";
export type Webhosting = import("./webhosting").Webhosting;
export const Webhosting: typeof import("./webhosting").Webhosting = null as any;
utilities.lazyLoad(exports, ["Webhosting"], () => require("./webhosting"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "scaleway:index/accountProject:AccountProject":
                return new AccountProject(name, <any>undefined, { urn })
            case "scaleway:index/accountSshKey:AccountSshKey":
                return new AccountSshKey(name, <any>undefined, { urn })
            case "scaleway:index/appleSiliconServer:AppleSiliconServer":
                return new AppleSiliconServer(name, <any>undefined, { urn })
            case "scaleway:index/baremetalServer:BaremetalServer":
                return new BaremetalServer(name, <any>undefined, { urn })
            case "scaleway:index/blockSnapshot:BlockSnapshot":
                return new BlockSnapshot(name, <any>undefined, { urn })
            case "scaleway:index/blockVolume:BlockVolume":
                return new BlockVolume(name, <any>undefined, { urn })
            case "scaleway:index/cockpit:Cockpit":
                return new Cockpit(name, <any>undefined, { urn })
            case "scaleway:index/cockpitGrafanaUser:CockpitGrafanaUser":
                return new CockpitGrafanaUser(name, <any>undefined, { urn })
            case "scaleway:index/cockpitToken:CockpitToken":
                return new CockpitToken(name, <any>undefined, { urn })
            case "scaleway:index/container:Container":
                return new Container(name, <any>undefined, { urn })
            case "scaleway:index/containerCron:ContainerCron":
                return new ContainerCron(name, <any>undefined, { urn })
            case "scaleway:index/containerDomain:ContainerDomain":
                return new ContainerDomain(name, <any>undefined, { urn })
            case "scaleway:index/containerNamespace:ContainerNamespace":
                return new ContainerNamespace(name, <any>undefined, { urn })
            case "scaleway:index/containerToken:ContainerToken":
                return new ContainerToken(name, <any>undefined, { urn })
            case "scaleway:index/containerTrigger:ContainerTrigger":
                return new ContainerTrigger(name, <any>undefined, { urn })
            case "scaleway:index/documentdbDatabase:DocumentdbDatabase":
                return new DocumentdbDatabase(name, <any>undefined, { urn })
            case "scaleway:index/documentdbInstance:DocumentdbInstance":
                return new DocumentdbInstance(name, <any>undefined, { urn })
            case "scaleway:index/documentdbPrivateNetworkEndpoint:DocumentdbPrivateNetworkEndpoint":
                return new DocumentdbPrivateNetworkEndpoint(name, <any>undefined, { urn })
            case "scaleway:index/documentdbPrivilege:DocumentdbPrivilege":
                return new DocumentdbPrivilege(name, <any>undefined, { urn })
            case "scaleway:index/documentdbReadReplica:DocumentdbReadReplica":
                return new DocumentdbReadReplica(name, <any>undefined, { urn })
            case "scaleway:index/documentdbUser:DocumentdbUser":
                return new DocumentdbUser(name, <any>undefined, { urn })
            case "scaleway:index/domainRecord:DomainRecord":
                return new DomainRecord(name, <any>undefined, { urn })
            case "scaleway:index/domainZone:DomainZone":
                return new DomainZone(name, <any>undefined, { urn })
            case "scaleway:index/flexibleIp:FlexibleIp":
                return new FlexibleIp(name, <any>undefined, { urn })
            case "scaleway:index/flexibleIpMacAddress:FlexibleIpMacAddress":
                return new FlexibleIpMacAddress(name, <any>undefined, { urn })
            case "scaleway:index/function:Function":
                return new Function(name, <any>undefined, { urn })
            case "scaleway:index/functionCron:FunctionCron":
                return new FunctionCron(name, <any>undefined, { urn })
            case "scaleway:index/functionDomain:FunctionDomain":
                return new FunctionDomain(name, <any>undefined, { urn })
            case "scaleway:index/functionNamespace:FunctionNamespace":
                return new FunctionNamespace(name, <any>undefined, { urn })
            case "scaleway:index/functionToken:FunctionToken":
                return new FunctionToken(name, <any>undefined, { urn })
            case "scaleway:index/functionTrigger:FunctionTrigger":
                return new FunctionTrigger(name, <any>undefined, { urn })
            case "scaleway:index/iamApiKey:IamApiKey":
                return new IamApiKey(name, <any>undefined, { urn })
            case "scaleway:index/iamApplication:IamApplication":
                return new IamApplication(name, <any>undefined, { urn })
            case "scaleway:index/iamGroup:IamGroup":
                return new IamGroup(name, <any>undefined, { urn })
            case "scaleway:index/iamGroupMembership:IamGroupMembership":
                return new IamGroupMembership(name, <any>undefined, { urn })
            case "scaleway:index/iamPolicy:IamPolicy":
                return new IamPolicy(name, <any>undefined, { urn })
            case "scaleway:index/iamSshKey:IamSshKey":
                return new IamSshKey(name, <any>undefined, { urn })
            case "scaleway:index/iamUser:IamUser":
                return new IamUser(name, <any>undefined, { urn })
            case "scaleway:index/instanceImage:InstanceImage":
                return new InstanceImage(name, <any>undefined, { urn })
            case "scaleway:index/instanceIp:InstanceIp":
                return new InstanceIp(name, <any>undefined, { urn })
            case "scaleway:index/instanceIpReverseDns:InstanceIpReverseDns":
                return new InstanceIpReverseDns(name, <any>undefined, { urn })
            case "scaleway:index/instancePlacementGroup:InstancePlacementGroup":
                return new InstancePlacementGroup(name, <any>undefined, { urn })
            case "scaleway:index/instancePrivateNic:InstancePrivateNic":
                return new InstancePrivateNic(name, <any>undefined, { urn })
            case "scaleway:index/instanceSecurityGroup:InstanceSecurityGroup":
                return new InstanceSecurityGroup(name, <any>undefined, { urn })
            case "scaleway:index/instanceSecurityGroupRules:InstanceSecurityGroupRules":
                return new InstanceSecurityGroupRules(name, <any>undefined, { urn })
            case "scaleway:index/instanceServer:InstanceServer":
                return new InstanceServer(name, <any>undefined, { urn })
            case "scaleway:index/instanceSnapshot:InstanceSnapshot":
                return new InstanceSnapshot(name, <any>undefined, { urn })
            case "scaleway:index/instanceUserData:InstanceUserData":
                return new InstanceUserData(name, <any>undefined, { urn })
            case "scaleway:index/instanceVolume:InstanceVolume":
                return new InstanceVolume(name, <any>undefined, { urn })
            case "scaleway:index/iotDevice:IotDevice":
                return new IotDevice(name, <any>undefined, { urn })
            case "scaleway:index/iotHub:IotHub":
                return new IotHub(name, <any>undefined, { urn })
            case "scaleway:index/iotNetwork:IotNetwork":
                return new IotNetwork(name, <any>undefined, { urn })
            case "scaleway:index/iotRoute:IotRoute":
                return new IotRoute(name, <any>undefined, { urn })
            case "scaleway:index/ipamIp:IpamIp":
                return new IpamIp(name, <any>undefined, { urn })
            case "scaleway:index/jobDefinition:JobDefinition":
                return new JobDefinition(name, <any>undefined, { urn })
            case "scaleway:index/k8sCluster:K8sCluster":
                return new K8sCluster(name, <any>undefined, { urn })
            case "scaleway:index/k8sPool:K8sPool":
                return new K8sPool(name, <any>undefined, { urn })
            case "scaleway:index/lb:Lb":
                return new Lb(name, <any>undefined, { urn })
            case "scaleway:index/lbAcl:LbAcl":
                return new LbAcl(name, <any>undefined, { urn })
            case "scaleway:index/lbBackend:LbBackend":
                return new LbBackend(name, <any>undefined, { urn })
            case "scaleway:index/lbCertificate:LbCertificate":
                return new LbCertificate(name, <any>undefined, { urn })
            case "scaleway:index/lbFrontend:LbFrontend":
                return new LbFrontend(name, <any>undefined, { urn })
            case "scaleway:index/lbIp:LbIp":
                return new LbIp(name, <any>undefined, { urn })
            case "scaleway:index/lbRoute:LbRoute":
                return new LbRoute(name, <any>undefined, { urn })
            case "scaleway:index/mnqNatsAccount:MnqNatsAccount":
                return new MnqNatsAccount(name, <any>undefined, { urn })
            case "scaleway:index/mnqNatsCredentials:MnqNatsCredentials":
                return new MnqNatsCredentials(name, <any>undefined, { urn })
            case "scaleway:index/mnqSns:MnqSns":
                return new MnqSns(name, <any>undefined, { urn })
            case "scaleway:index/mnqSnsCredentials:MnqSnsCredentials":
                return new MnqSnsCredentials(name, <any>undefined, { urn })
            case "scaleway:index/mnqSnsTopic:MnqSnsTopic":
                return new MnqSnsTopic(name, <any>undefined, { urn })
            case "scaleway:index/mnqSnsTopicSubscription:MnqSnsTopicSubscription":
                return new MnqSnsTopicSubscription(name, <any>undefined, { urn })
            case "scaleway:index/mnqSqs:MnqSqs":
                return new MnqSqs(name, <any>undefined, { urn })
            case "scaleway:index/mnqSqsCredentials:MnqSqsCredentials":
                return new MnqSqsCredentials(name, <any>undefined, { urn })
            case "scaleway:index/mnqSqsQueue:MnqSqsQueue":
                return new MnqSqsQueue(name, <any>undefined, { urn })
            case "scaleway:index/objectBucket:ObjectBucket":
                return new ObjectBucket(name, <any>undefined, { urn })
            case "scaleway:index/objectBucketAcl:ObjectBucketAcl":
                return new ObjectBucketAcl(name, <any>undefined, { urn })
            case "scaleway:index/objectBucketLockConfiguration:ObjectBucketLockConfiguration":
                return new ObjectBucketLockConfiguration(name, <any>undefined, { urn })
            case "scaleway:index/objectBucketPolicy:ObjectBucketPolicy":
                return new ObjectBucketPolicy(name, <any>undefined, { urn })
            case "scaleway:index/objectBucketWebsiteConfiguration:ObjectBucketWebsiteConfiguration":
                return new ObjectBucketWebsiteConfiguration(name, <any>undefined, { urn })
            case "scaleway:index/objectItem:ObjectItem":
                return new ObjectItem(name, <any>undefined, { urn })
            case "scaleway:index/rdbAcl:RdbAcl":
                return new RdbAcl(name, <any>undefined, { urn })
            case "scaleway:index/rdbDatabase:RdbDatabase":
                return new RdbDatabase(name, <any>undefined, { urn })
            case "scaleway:index/rdbDatabaseBackup:RdbDatabaseBackup":
                return new RdbDatabaseBackup(name, <any>undefined, { urn })
            case "scaleway:index/rdbInstance:RdbInstance":
                return new RdbInstance(name, <any>undefined, { urn })
            case "scaleway:index/rdbPrivilege:RdbPrivilege":
                return new RdbPrivilege(name, <any>undefined, { urn })
            case "scaleway:index/rdbReadReplica:RdbReadReplica":
                return new RdbReadReplica(name, <any>undefined, { urn })
            case "scaleway:index/rdbUser:RdbUser":
                return new RdbUser(name, <any>undefined, { urn })
            case "scaleway:index/redisCluster:RedisCluster":
                return new RedisCluster(name, <any>undefined, { urn })
            case "scaleway:index/registryNamespace:RegistryNamespace":
                return new RegistryNamespace(name, <any>undefined, { urn })
            case "scaleway:index/sdbSqlDatabase:SdbSqlDatabase":
                return new SdbSqlDatabase(name, <any>undefined, { urn })
            case "scaleway:index/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "scaleway:index/secretVersion:SecretVersion":
                return new SecretVersion(name, <any>undefined, { urn })
            case "scaleway:index/temDomain:TemDomain":
                return new TemDomain(name, <any>undefined, { urn })
            case "scaleway:index/vpc:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            case "scaleway:index/vpcGatewayNetwork:VpcGatewayNetwork":
                return new VpcGatewayNetwork(name, <any>undefined, { urn })
            case "scaleway:index/vpcPrivateNetwork:VpcPrivateNetwork":
                return new VpcPrivateNetwork(name, <any>undefined, { urn })
            case "scaleway:index/vpcPublicGateway:VpcPublicGateway":
                return new VpcPublicGateway(name, <any>undefined, { urn })
            case "scaleway:index/vpcPublicGatewayDhcp:VpcPublicGatewayDhcp":
                return new VpcPublicGatewayDhcp(name, <any>undefined, { urn })
            case "scaleway:index/vpcPublicGatewayDhcpReservation:VpcPublicGatewayDhcpReservation":
                return new VpcPublicGatewayDhcpReservation(name, <any>undefined, { urn })
            case "scaleway:index/vpcPublicGatewayIp:VpcPublicGatewayIp":
                return new VpcPublicGatewayIp(name, <any>undefined, { urn })
            case "scaleway:index/vpcPublicGatewayIpReverseDns:VpcPublicGatewayIpReverseDns":
                return new VpcPublicGatewayIpReverseDns(name, <any>undefined, { urn })
            case "scaleway:index/vpcPublicGatewayPatRule:VpcPublicGatewayPatRule":
                return new VpcPublicGatewayPatRule(name, <any>undefined, { urn })
            case "scaleway:index/webhosting:Webhosting":
                return new Webhosting(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("scaleway", "index/accountProject", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/accountSshKey", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/appleSiliconServer", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/baremetalServer", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/blockSnapshot", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/blockVolume", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/cockpit", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/cockpitGrafanaUser", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/cockpitToken", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/container", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/containerCron", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/containerDomain", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/containerNamespace", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/containerToken", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/containerTrigger", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/documentdbDatabase", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/documentdbInstance", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/documentdbPrivateNetworkEndpoint", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/documentdbPrivilege", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/documentdbReadReplica", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/documentdbUser", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/domainRecord", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/domainZone", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/flexibleIp", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/flexibleIpMacAddress", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/function", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/functionCron", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/functionDomain", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/functionNamespace", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/functionToken", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/functionTrigger", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/iamApiKey", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/iamApplication", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/iamGroup", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/iamGroupMembership", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/iamPolicy", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/iamSshKey", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/iamUser", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceImage", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceIp", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceIpReverseDns", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instancePlacementGroup", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instancePrivateNic", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceSecurityGroup", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceSecurityGroupRules", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceServer", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceSnapshot", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceUserData", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceVolume", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/iotDevice", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/iotHub", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/iotNetwork", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/iotRoute", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/ipamIp", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/jobDefinition", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/k8sCluster", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/k8sPool", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/lb", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/lbAcl", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/lbBackend", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/lbCertificate", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/lbFrontend", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/lbIp", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/lbRoute", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/mnqNatsAccount", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/mnqNatsCredentials", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/mnqSns", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/mnqSnsCredentials", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/mnqSnsTopic", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/mnqSnsTopicSubscription", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/mnqSqs", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/mnqSqsCredentials", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/mnqSqsQueue", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/objectBucket", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/objectBucketAcl", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/objectBucketLockConfiguration", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/objectBucketPolicy", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/objectBucketWebsiteConfiguration", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/objectItem", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/rdbAcl", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/rdbDatabase", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/rdbDatabaseBackup", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/rdbInstance", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/rdbPrivilege", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/rdbReadReplica", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/rdbUser", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/redisCluster", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/registryNamespace", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/sdbSqlDatabase", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/secret", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/secretVersion", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/temDomain", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpc", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcGatewayNetwork", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcPrivateNetwork", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcPublicGateway", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcPublicGatewayDhcp", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcPublicGatewayDhcpReservation", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcPublicGatewayIp", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcPublicGatewayIpReverseDns", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcPublicGatewayPatRule", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/webhosting", _module)
pulumi.runtime.registerResourcePackage("scaleway", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:scaleway") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
