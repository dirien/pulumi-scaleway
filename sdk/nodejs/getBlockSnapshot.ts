// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `scaleway.BlockSnapshot` data source is used to retrieve information about a Block Storage volume snapshot.
 *
 * Refer to the Block Storage [product documentation](https://www.scaleway.com/en/docs/block-storage/) and [API documentation](https://www.scaleway.com/en/developers/api/block/) for more information.
 *
 * ## Retrieve a volume's snapshot
 *
 * The following commands allow you to:
 *
 * - retrieve a snapshot specified by its name
 * - retrieve a snapshot specified by its name and the ID of the Block Storage volume it is associated with
 * - retrieve a snapshot specified by its ID
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@ediri/scaleway";
 *
 * const mySnapshot = scaleway.getBlockSnapshot({
 *     snapshotId: "11111111-1111-1111-1111-111111111111",
 * });
 * ```
 */
export function getBlockSnapshot(args?: GetBlockSnapshotArgs, opts?: pulumi.InvokeOptions): Promise<GetBlockSnapshotResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scaleway:index/getBlockSnapshot:getBlockSnapshot", {
        "name": args.name,
        "projectId": args.projectId,
        "snapshotId": args.snapshotId,
        "volumeId": args.volumeId,
        "zone": args.zone,
    }, opts);
}

/**
 * A collection of arguments for invoking getBlockSnapshot.
 */
export interface GetBlockSnapshotArgs {
    /**
     * The name of the snapshot. Only one of name or snapshotId should be specified.
     */
    name?: string;
    /**
     * The unique identifier of the Project to which the snapshot is associated.
     */
    projectId?: string;
    /**
     * The unique identifier of the snapshot. Only one of `name` and `snapshotId` should be specified.
     */
    snapshotId?: string;
    /**
     * The unique identifier of the volume from which the snapshot was created.
     */
    volumeId?: string;
    /**
     * ) The zone in which the snapshot exists.
     */
    zone?: string;
}

/**
 * A collection of values returned by getBlockSnapshot.
 */
export interface GetBlockSnapshotResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly imports: outputs.GetBlockSnapshotImport[];
    readonly name?: string;
    readonly projectId?: string;
    readonly snapshotId?: string;
    readonly tags: string[];
    readonly volumeId?: string;
    readonly zone?: string;
}
/**
 * The `scaleway.BlockSnapshot` data source is used to retrieve information about a Block Storage volume snapshot.
 *
 * Refer to the Block Storage [product documentation](https://www.scaleway.com/en/docs/block-storage/) and [API documentation](https://www.scaleway.com/en/developers/api/block/) for more information.
 *
 * ## Retrieve a volume's snapshot
 *
 * The following commands allow you to:
 *
 * - retrieve a snapshot specified by its name
 * - retrieve a snapshot specified by its name and the ID of the Block Storage volume it is associated with
 * - retrieve a snapshot specified by its ID
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@ediri/scaleway";
 *
 * const mySnapshot = scaleway.getBlockSnapshot({
 *     snapshotId: "11111111-1111-1111-1111-111111111111",
 * });
 * ```
 */
export function getBlockSnapshotOutput(args?: GetBlockSnapshotOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetBlockSnapshotResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("scaleway:index/getBlockSnapshot:getBlockSnapshot", {
        "name": args.name,
        "projectId": args.projectId,
        "snapshotId": args.snapshotId,
        "volumeId": args.volumeId,
        "zone": args.zone,
    }, opts);
}

/**
 * A collection of arguments for invoking getBlockSnapshot.
 */
export interface GetBlockSnapshotOutputArgs {
    /**
     * The name of the snapshot. Only one of name or snapshotId should be specified.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique identifier of the Project to which the snapshot is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The unique identifier of the snapshot. Only one of `name` and `snapshotId` should be specified.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The unique identifier of the volume from which the snapshot was created.
     */
    volumeId?: pulumi.Input<string>;
    /**
     * ) The zone in which the snapshot exists.
     */
    zone?: pulumi.Input<string>;
}
