// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IotRoute extends pulumi.CustomResource {
    /**
     * Get an existing IotRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IotRouteState, opts?: pulumi.CustomResourceOptions): IotRoute {
        return new IotRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/iotRoute:IotRoute';

    /**
     * Returns true if the given object is an instance of IotRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IotRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IotRoute.__pulumiType;
    }

    /**
     * The date and time of the creation of the IoT Route
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Database Route parameters
     */
    public readonly database!: pulumi.Output<outputs.IotRouteDatabase | undefined>;
    /**
     * The ID of the route's hub
     */
    public readonly hubId!: pulumi.Output<string>;
    /**
     * The name of the route
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The region you want to attach the resource to
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Rest Route parameters
     */
    public readonly rest!: pulumi.Output<outputs.IotRouteRest | undefined>;
    /**
     * S3 Route parameters
     */
    public readonly s3!: pulumi.Output<outputs.IotRouteS3 | undefined>;
    /**
     * The Topic the route subscribes to (wildcards allowed)
     */
    public readonly topic!: pulumi.Output<string>;

    /**
     * Create a IotRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IotRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IotRouteArgs | IotRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IotRouteState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["hubId"] = state ? state.hubId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rest"] = state ? state.rest : undefined;
            resourceInputs["s3"] = state ? state.s3 : undefined;
            resourceInputs["topic"] = state ? state.topic : undefined;
        } else {
            const args = argsOrState as IotRouteArgs | undefined;
            if ((!args || args.hubId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hubId'");
            }
            if ((!args || args.topic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topic'");
            }
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["hubId"] = args ? args.hubId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["rest"] = args ? args.rest : undefined;
            resourceInputs["s3"] = args ? args.s3 : undefined;
            resourceInputs["topic"] = args ? args.topic : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IotRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IotRoute resources.
 */
export interface IotRouteState {
    /**
     * The date and time of the creation of the IoT Route
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Database Route parameters
     */
    database?: pulumi.Input<inputs.IotRouteDatabase>;
    /**
     * The ID of the route's hub
     */
    hubId?: pulumi.Input<string>;
    /**
     * The name of the route
     */
    name?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    /**
     * Rest Route parameters
     */
    rest?: pulumi.Input<inputs.IotRouteRest>;
    /**
     * S3 Route parameters
     */
    s3?: pulumi.Input<inputs.IotRouteS3>;
    /**
     * The Topic the route subscribes to (wildcards allowed)
     */
    topic?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IotRoute resource.
 */
export interface IotRouteArgs {
    /**
     * Database Route parameters
     */
    database?: pulumi.Input<inputs.IotRouteDatabase>;
    /**
     * The ID of the route's hub
     */
    hubId: pulumi.Input<string>;
    /**
     * The name of the route
     */
    name?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    /**
     * Rest Route parameters
     */
    rest?: pulumi.Input<inputs.IotRouteRest>;
    /**
     * S3 Route parameters
     */
    s3?: pulumi.Input<inputs.IotRouteS3>;
    /**
     * The Topic the route subscribes to (wildcards allowed)
     */
    topic: pulumi.Input<string>;
}
