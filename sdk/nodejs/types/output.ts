// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BaremetalServerIp {
    /**
     * The address of the IP.
     */
    address: string;
    /**
     * The id of the private network to attach.
     */
    id: string;
    /**
     * The reverse of the IP.
     */
    reverse: string;
    /**
     * The type of the IP.
     */
    version: string;
}

export interface BaremetalServerOption {
    /**
     * The auto expiration date for compatible options
     */
    expiresAt: string;
    /**
     * The id of the private network to attach.
     */
    id: string;
    /**
     * The name of the server.
     */
    name: string;
}

export interface BaremetalServerPrivateNetwork {
    /**
     * The date and time of the creation of the private network.
     */
    createdAt: string;
    /**
     * The id of the private network to attach.
     */
    id: string;
    /**
     * The private network status.
     */
    status: string;
    /**
     * The date and time of the last update of the private network.
     */
    updatedAt: string;
    /**
     * The VLAN ID associated to the private network.
     */
    vlan: number;
}

export interface CockpitEndpoint {
    /**
     * The alertmanager URL
     */
    alertmanagerUrl: string;
    /**
     * The grafana URL
     */
    grafanaUrl: string;
    /**
     * The logs URL
     */
    logsUrl: string;
    /**
     * The metrics URL
     */
    metricsUrl: string;
}

export interface CockpitTokenScopes {
    /**
     * Query logs
     */
    queryLogs?: boolean;
    /**
     * Query metrics
     */
    queryMetrics?: boolean;
    /**
     * Setup alerts
     */
    setupAlerts?: boolean;
    /**
     * Setup logs rules
     */
    setupLogsRules?: boolean;
    /**
     * Setup metrics rules
     */
    setupMetricsRules?: boolean;
    /**
     * Write logs
     */
    writeLogs?: boolean;
    /**
     * Write metrics
     */
    writeMetrics?: boolean;
}

export interface DomainRecordGeoIp {
    /**
     * The list of matches. *(Can be more than 1)*
     */
    matches: outputs.DomainRecordGeoIpMatch[];
}

export interface DomainRecordGeoIpMatch {
    /**
     * List of continents (eg: `EU` for Europe, `NA` for North America, `AS` for Asia...). [List of all continents code](https://api.scaleway.com/domain-private/v2beta1/continents)
     */
    continents?: string[];
    /**
     * List of countries (eg: `FR` for France, `US` for the United States, `GB` for Great Britain...). [List of all countries code](https://api.scaleway.com/domain-private/v2beta1/countries)
     */
    countries?: string[];
    /**
     * The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
     */
    data: string;
}

export interface DomainRecordHttpService {
    /**
     * List of IPs to check
     */
    ips: string[];
    /**
     * Text to search
     */
    mustContain: string;
    /**
     * Strategy to return an IP from the IPs list. Can be `random` or `hashed`
     */
    strategy: string;
    /**
     * URL to match the `mustContain` text to validate an IP
     */
    url: string;
    /**
     * User-agent used when checking the URL
     */
    userAgent?: string;
}

export interface DomainRecordView {
    /**
     * The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
     */
    data: string;
    /**
     * The subnet of the view
     */
    subnet: string;
}

export interface DomainRecordWeighted {
    /**
     * The weighted IP
     */
    ip: string;
    /**
     * The weight of the IP as an integer UInt32.
     */
    weight: number;
}

export interface GetBaremetalOfferCpus {
    /**
     * Number of core on this CPU.
     */
    coreCount: number;
    /**
     * Frequency of the memory in MHz.
     */
    frequency: number;
    /**
     * The offer name. Only one of `name` and `offerId` should be specified.
     */
    name: string;
    /**
     * Number of thread on this CPU.
     */
    threadCount: number;
}

export interface GetBaremetalOfferDisk {
    /**
     * Capacity of the memory in GB.
     */
    capacity: number;
    /**
     * Type of memory.
     */
    type: string;
}

export interface GetBaremetalOfferMemory {
    /**
     * Capacity of the memory in GB.
     */
    capacity: number;
    /**
     * Frequency of the memory in MHz.
     */
    frequency: number;
    /**
     * True if error-correcting code is available on this memory.
     */
    isEcc: boolean;
    /**
     * Type of memory.
     */
    type: string;
}

export interface GetBaremetalServerIp {
    address: string;
    /**
     * The ID of the server.
     */
    id: string;
    reverse: string;
    version: string;
}

export interface GetBaremetalServerOption {
    expiresAt: string;
    /**
     * The ID of the server.
     */
    id: string;
    /**
     * The server name. Only one of `name` and `serverId` should be specified.
     */
    name: string;
}

export interface GetBaremetalServerPrivateNetwork {
    createdAt: string;
    /**
     * The ID of the server.
     */
    id: string;
    status: string;
    updatedAt: string;
    vlan: number;
}

export interface GetCockpitEndpoint {
    /**
     * The alertmanager URL
     */
    alertmanagerUrl: string;
    /**
     * The grafana URL
     */
    grafanaUrl: string;
    /**
     * The logs URL
     */
    logsUrl: string;
    /**
     * The metrics URL
     */
    metricsUrl: string;
}

export interface GetDomainRecordGeoIp {
    matches: outputs.GetDomainRecordGeoIpMatch[];
}

export interface GetDomainRecordGeoIpMatch {
    continents: string[];
    countries: string[];
    /**
     * The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
     * Cannot be used with `recordId`.
     */
    data: string;
}

export interface GetDomainRecordHttpService {
    ips: string[];
    mustContain: string;
    strategy: string;
    url: string;
    userAgent: string;
}

export interface GetDomainRecordView {
    /**
     * The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
     * Cannot be used with `recordId`.
     */
    data: string;
    subnet: string;
}

export interface GetDomainRecordWeighted {
    ip: string;
    weight: number;
}

export interface GetInstanceSecurityGroupInboundRule {
    /**
     * The action to take when rule match. Possible values are: `accept` or `drop`.
     */
    action: string;
    /**
     * The ip this rule apply to.
     */
    ip: string;
    /**
     * The ip range (e.g `192.168.1.0/24`) this rule apply to.
     */
    ipRange: string;
    /**
     * The port this rule apply to. If no port is specified, rule will apply to all port.
     */
    port: number;
    portRange: string;
    /**
     * The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
     */
    protocol: string;
}

export interface GetInstanceSecurityGroupOutboundRule {
    /**
     * The action to take when rule match. Possible values are: `accept` or `drop`.
     */
    action: string;
    /**
     * The ip this rule apply to.
     */
    ip: string;
    /**
     * The ip range (e.g `192.168.1.0/24`) this rule apply to.
     */
    ipRange: string;
    /**
     * The port this rule apply to. If no port is specified, rule will apply to all port.
     */
    port: number;
    portRange: string;
    /**
     * The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
     */
    protocol: string;
}

export interface GetInstanceServerPrivateNetwork {
    macAddress: string;
    pnId: string;
    status: string;
    /**
     * `zone`) The zone in which the server exists.
     */
    zone: string;
}

export interface GetInstanceServerRootVolume {
    boot: boolean;
    /**
     * Forces deletion of the root volume on instance termination.
     */
    deleteOnTermination: boolean;
    /**
     * The server name. Only one of `name` and `serverId` should be specified.
     */
    name: string;
    /**
     * Size of the root volume in gigabytes.
     */
    sizeInGb: number;
    /**
     * The volume ID of the root volume of the server.
     */
    volumeId: string;
    volumeType: string;
}

export interface GetInstanceServersServer {
    /**
     * The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
     */
    bootType: string;
    /**
     * The ID of the bootscript.
     */
    bootscriptId: string;
    /**
     * If true a dynamic IP will be attached to the server.
     */
    enableDynamicIp: boolean;
    /**
     * Determines if IPv6 is enabled for the server.
     */
    enableIpv6: boolean;
    /**
     * The ID of the server.
     */
    id: string;
    /**
     * The UUID or the label of the base image used by the server.
     */
    image: string;
    /**
     * The default ipv6 address routed to the server. ( Only set when enableIpv6 is set to true )
     */
    ipv6Address: string;
    /**
     * The ipv6 gateway address. ( Only set when enableIpv6 is set to true )
     */
    ipv6Gateway: string;
    /**
     * The prefix length of the ipv6 subnet routed to the server. ( Only set when enableIpv6 is set to true )
     */
    ipv6PrefixLength: number;
    /**
     * The server name used as filter. Servers with a name like it are listed.
     */
    name: string;
    /**
     * The organization ID the server is associated with.
     */
    organizationId: string;
    /**
     * The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
     */
    placementGroupId: string;
    placementGroupPolicyRespected: boolean;
    /**
     * The Scaleway internal IP address of the server.
     */
    privateIp: string;
    /**
     * The ID of the project the server is associated with.
     */
    projectId: string;
    /**
     * The public IPv4 address of the server.
     */
    publicIp: string;
    /**
     * The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
     */
    securityGroupId: string;
    /**
     * The state of the server. Possible values are: `started`, `stopped` or `standby`.
     */
    state: string;
    /**
     * List of tags used as filter. Servers with these exact tags are listed.
     */
    tags: string[];
    /**
     * The commercial type of the server.
     */
    type: string;
    /**
     * `zone`) The zone in which servers exist.
     */
    zone: string;
}

export interface GetInstanceSnapshotImport {
    bucket: string;
    key: string;
}

export interface GetIotDeviceCertificate {
    crt: string;
    key: string;
}

export interface GetIotDeviceMessageFilter {
    publishes: outputs.GetIotDeviceMessageFilterPublish[];
    subscribes: outputs.GetIotDeviceMessageFilterSubscribe[];
}

export interface GetIotDeviceMessageFilterPublish {
    policy: string;
    topics: string[];
}

export interface GetIotDeviceMessageFilterSubscribe {
    policy: string;
    topics: string[];
}

export interface GetK8sClusterAutoUpgrade {
    /**
     * True if Kubernetes patch version auto upgrades is enabled.
     */
    enable: boolean;
    /**
     * The day of the auto upgrade maintenance window (`monday` to `sunday`, or `any`).
     */
    maintenanceWindowDay: string;
    /**
     * The start hour (UTC) of the 2-hour auto upgrade maintenance window (0 to 23).
     */
    maintenanceWindowStartHour: number;
}

export interface GetK8sClusterAutoscalerConfig {
    /**
     * True if detecting similar node groups and balance the number of nodes between them is enabled.
     */
    balanceSimilarNodeGroups: boolean;
    /**
     * True if the scale down feature of the autoscaler is disabled.
     */
    disableScaleDown: boolean;
    /**
     * The type of resource estimator used in scale up.
     */
    estimator: string;
    /**
     * The type of node group expander be used in scale up.
     */
    expander: string;
    /**
     * Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don't cause scale up. Pods with null priority (PodPriority disabled) are non expendable.
     */
    expendablePodsPriorityCutoff: number;
    /**
     * True if ignoring DaemonSet pods when calculating resource utilization for scaling down is enabled.
     */
    ignoreDaemonsetsUtilization: boolean;
    maxGracefulTerminationSec: number;
    /**
     * The duration after scale up that scale down evaluation resumes.
     */
    scaleDownDelayAfterAdd: string;
    /**
     * The duration a node should be unneeded before it is eligible for scale down.
     */
    scaleDownUnneededTime: string;
    scaleDownUtilizationThreshold: number;
}

export interface GetK8sClusterKubeconfig {
    /**
     * The CA certificate of the Kubernetes API server.
     */
    clusterCaCertificate: string;
    /**
     * The raw kubeconfig file.
     */
    configFile: string;
    /**
     * The URL of the Kubernetes API server.
     */
    host: string;
    /**
     * The token to connect to the Kubernetes API server.
     */
    token: string;
}

export interface GetK8sClusterOpenIdConnectConfig {
    clientId: string;
    groupsClaims: string[];
    groupsPrefix: string;
    issuerUrl: string;
    requiredClaims: string[];
    usernameClaim: string;
    usernamePrefix: string;
}

export interface GetK8sPoolNode {
    /**
     * The pool name. Only one of `name` and `poolId` should be specified. `clusterId` should be specified with `name`.
     */
    name: string;
    /**
     * The public IPv4.
     */
    publicIp: string;
    /**
     * The public IPv6.
     */
    publicIpV6: string;
    /**
     * The status of the node.
     */
    status: string;
}

export interface GetK8sPoolUpgradePolicy {
    maxSurge: number;
    maxUnavailable: number;
}

export interface GetLbAclsAcl {
    /**
     * The action that has been undertaken when an ACL filter had matched.
     */
    actions: outputs.GetLbAclsAclAction[];
    /**
     * The date at which the ACL was created (RFC 3339 format).
     */
    createdAt: string;
    /**
     * The description of the ACL resource.
     */
    description: string;
    /**
     * The frontend ID this ACL is attached to. ACLs with a frontend ID like it are listed.
     * > **Important:** LB Frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
     */
    frontendId: string;
    /**
     * The associated ACL ID.
     * > **Important:** LB ACLs' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
     */
    id: string;
    /**
     * The order between the ACLs.
     */
    index: number;
    /**
     * The ACL match rule.
     */
    matches: outputs.GetLbAclsAclMatch[];
    /**
     * The ACL name used as filter. ACLs with a name like it are listed.
     */
    name: string;
    /**
     * The date at which the ACL was last updated (RFC 3339 format).
     */
    updateAt: string;
}

export interface GetLbAclsAclAction {
    /**
     * The action type.
     */
    type: string;
}

export interface GetLbAclsAclMatch {
    /**
     * The matched HTTP filter.
     */
    httpFilter: string;
    httpFilterOption: string;
    /**
     * The possible values matched for a given HTTP filter.
     */
    httpFilterValues: string[];
    /**
     * The condition will be of type "unless" if invert is set to `true`
     */
    invert: boolean;
    /**
     * A list of matched IPs or CIDR v4/v6 addresses of the client of the session.
     */
    ipSubnets: string[];
}

export interface GetLbBackendHealthCheckHttp {
    code: number;
    hostHeader: string;
    method: string;
    sni: string;
    uri: string;
}

export interface GetLbBackendHealthCheckTcp {
}

export interface GetLbBackendsBackend {
    /**
     * The date at which the backend was created (RFC 3339 format).
     */
    createdAt: string;
    /**
     * Scaleway S3 bucket website to be served in case all backend servers are down.
     */
    failoverHost: string;
    /**
     * User sessions will be forwarded to this port of backend servers.
     */
    forwardPort: number;
    /**
     * Load balancing algorithm.
     */
    forwardPortAlgorithm: string;
    /**
     * Backend protocol.
     */
    forwardProtocol: string;
    /**
     * Interval between two HC requests.
     */
    healthCheckDelay: string;
    /**
     * This block enable HTTP health check.
     */
    healthCheckHttp: outputs.GetLbBackendsBackendHealthCheckHttp[];
    /**
     * This block enable HTTPS health check.
     */
    healthCheckHttps: outputs.GetLbBackendsBackendHealthCheckHttp[];
    /**
     * Number of allowed failed HC requests before the backend server is marked down.
     */
    healthCheckMaxRetries: number;
    /**
     * Port the HC requests will be sent to.
     */
    healthCheckPort: number;
    /**
     * This block enable TCP health check.
     */
    healthCheckTcps: outputs.GetLbBackendsBackendHealthCheckTcp[];
    /**
     * Timeout before we consider a HC request failed.
     */
    healthCheckTimeout: string;
    /**
     * The associated backend ID.
     */
    id: string;
    /**
     * Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection.
     */
    ignoreSslServerVerify: boolean;
    /**
     * The load-balancer ID this backend is attached to. backends with a LB ID like it are listed.
     */
    lbId: string;
    /**
     * The backend name used as filter. Backends with a name like it are listed.
     */
    name: string;
    /**
     * Modify what occurs when a backend server is marked down.
     */
    onMarkedDownAction: string;
    /**
     * The type of PROXY protocol.
     */
    proxyProtocol: string;
    /**
     * List of backend server IP addresses.
     */
    serverIps: string[];
    /**
     * Enables SSL between load balancer and backend servers.
     */
    sslBridging: boolean;
    /**
     * Enables cookie-based session persistence.
     */
    stickySessions: string;
    /**
     * Cookie name for sticky sessions.
     */
    stickySessionsCookieName: string;
    /**
     * Maximum initial server connection establishment time.
     */
    timeoutConnect: string;
    /**
     * Maximum server connection inactivity time.
     */
    timeoutServer: string;
    /**
     * Maximum tunnel inactivity time.
     */
    timeoutTunnel: string;
    /**
     * The date at which the backend was last updated (RFC 3339 format).
     */
    updateAt: string;
}

export interface GetLbBackendsBackendHealthCheckHttp {
    /**
     * The expected HTTP status code.
     */
    code: number;
    /**
     * The HTTP host header to use for HC requests.
     */
    hostHeader: string;
    /**
     * The HTTP method to use for HC requests.
     */
    method: string;
    /**
     * The SNI to use for HC requests over SSL.
     */
    sni: string;
    /**
     * The HTTPS endpoint URL to call for HC requests.
     */
    uri: string;
}

export interface GetLbBackendsBackendHealthCheckTcp {
}

export interface GetLbCertificateCustomCertificate {
    certificateChain: string;
}

export interface GetLbCertificateLetsencrypt {
    commonName: string;
    subjectAlternativeNames: string[];
}

export interface GetLbFrontendAcl {
    actions: outputs.GetLbFrontendAclAction[];
    matches: outputs.GetLbFrontendAclMatch[];
    /**
     * The name of the frontend.
     * - When using the `name` you should specify the `lb-id`
     */
    name: string;
}

export interface GetLbFrontendAclAction {
    type: string;
}

export interface GetLbFrontendAclMatch {
    httpFilter: string;
    httpFilterOption: string;
    httpFilterValues: string[];
    invert: boolean;
    ipSubnets: string[];
}

export interface GetLbFrontendsFrontend {
    /**
     * The load-balancer backend ID this frontend is attached to.
     * > **Important:** LB backends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
     */
    backendId: string;
    /**
     * List of Certificate IDs that are used by the frontend.
     */
    certificateIds: string[];
    /**
     * The date at which the frontend was created (RFC 3339 format).
     */
    createdAt: string;
    /**
     * If HTTP/3 protocol is activated.
     */
    enableHttp3: boolean;
    /**
     * The associated frontend ID.
     * > **Important:** LB frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
     */
    id: string;
    /**
     * TCP port the frontend listen to.
     */
    inboundPort: number;
    /**
     * The load-balancer ID this frontend is attached to. frontends with a LB ID like it are listed.
     */
    lbId: string;
    /**
     * The frontend name used as filter. Frontends with a name like it are listed.
     */
    name: string;
    /**
     * Maximum inactivity time on the client side.
     */
    timeoutClient: string;
    /**
     * The date at which the frontend was last updated (RFC 3339 format).
     */
    updateAt: string;
}

export interface GetLbIpsIp {
    /**
     * The associated IP ID.
     */
    id: string;
    /**
     * The IP Address
     */
    ipAddress: string;
    /**
     * The associated load-balancer ID if any
     */
    lbId: string;
    /**
     * The organization ID the load-balancer is associated with.
     */
    organizationId: string;
    /**
     * The ID of the project the load-balancer is associated with.
     */
    projectId: string;
    /**
     * The reverse domain associated with this IP.
     */
    reverse: string;
    /**
     * `zone`) The zone in which IPs exist.
     */
    zone: string;
}

export interface GetLbPrivateNetwork {
    dhcpConfig: boolean;
    privateNetworkId: string;
    staticConfigs: string[];
    status: string;
    /**
     * (Defaults to provider `zone`) The zone in which the LB exists.
     */
    zone: string;
}

export interface GetLbRoutesRoute {
    /**
     * The backend ID destination of redirection
     */
    backendId: string;
    /**
     * The date at which the route was created (RFC 3339 format).
     */
    createdAt: string;
    /**
     * The frontend ID origin of redirection used as a filter. routes with a frontend ID like it are listed.
     */
    frontendId: string;
    /**
     * The associated route ID.
     */
    id: string;
    /**
     * Specifies the host of the server to which the request is being sent.
     */
    matchHostHeader: string;
    /**
     * Server Name Indication TLS extension field from an incoming connection made via an SSL/TLS transport layer.
     */
    matchSni: string;
    /**
     * The date at which the route was last updated (RFC 3339 format).
     */
    updateAt: string;
}

export interface GetLbsLb {
    /**
     * Number of backends the Load balancer has.
     */
    backendCount: number;
    /**
     * Date at which the Load balancer was created.
     */
    createdAt: string;
    /**
     * The description of the load-balancer.
     */
    description: string;
    /**
     * Number of frontends the Load balancer has.
     */
    frontendCount: number;
    /**
     * The ID of the load-balancer.
     */
    id: string;
    /**
     * List of underlying instances.
     */
    instances: outputs.GetLbsLbInstance[];
    /**
     * List of IPs attached to the Load balancer.
     */
    ips: outputs.GetLbsLbIp[];
    /**
     * The load balancer name used as a filter. LBs with a name like it are listed.
     */
    name: string;
    /**
     * The organization ID the load-balancer is associated with.
     */
    organizationId: string;
    /**
     * Number of private networks attached to the Load balancer.
     */
    privateNetworkCount: number;
    /**
     * The ID of the project the load-balancer is associated with.
     */
    projectId: string;
    /**
     * Number of routes the Load balancer has.
     */
    routeCount: number;
    /**
     * Determines the minimal SSL version which needs to be supported on client side.
     */
    sslCompatibilityLevel: string;
    /**
     * The state of the LB's instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
     */
    status: string;
    /**
     * The subscriber information.
     */
    subscriber: string;
    /**
     * The tags associated with the load-balancer.
     */
    tags: string[];
    /**
     * The offer type of the load-balancer.
     */
    type: string;
    /**
     * Date at which the Load balancer was updated.
     */
    updatedAt: string;
    /**
     * `zone`) The zone in which LBs exist.
     */
    zone: string;
}

export interface GetLbsLbInstance {
    /**
     * Date at which the Load balancer was created.
     */
    createdAt: string;
    /**
     * The ID of the load-balancer.
     */
    id: string;
    ipAddress: string;
    /**
     * The state of the LB's instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
     */
    status: string;
    /**
     * Date at which the Load balancer was updated.
     */
    updatedAt: string;
    /**
     * `zone`) The zone in which LBs exist.
     */
    zone: string;
}

export interface GetLbsLbIp {
    /**
     * The ID of the load-balancer.
     */
    id: string;
    ipAddress: string;
    lbId: string;
    /**
     * The organization ID the load-balancer is associated with.
     */
    organizationId: string;
    /**
     * The ID of the project the load-balancer is associated with.
     */
    projectId: string;
    reverse: string;
    /**
     * `zone`) The zone in which LBs exist.
     */
    zone: string;
}

export interface GetObjectBucketCorsRule {
    allowedHeaders: string[];
    allowedMethods: string[];
    allowedOrigins: string[];
    exposeHeaders: string[];
    maxAgeSeconds: number;
}

export interface GetObjectBucketLifecycleRule {
    abortIncompleteMultipartUploadDays: number;
    enabled: boolean;
    expirations: outputs.GetObjectBucketLifecycleRuleExpiration[];
    /**
     * The unique name of the bucket.
     */
    id: string;
    prefix: string;
    tags: {[key: string]: string};
    transitions: outputs.GetObjectBucketLifecycleRuleTransition[];
}

export interface GetObjectBucketLifecycleRuleExpiration {
    days: number;
}

export interface GetObjectBucketLifecycleRuleTransition {
    days: number;
    storageClass: string;
}

export interface GetObjectBucketVersioning {
    enabled: boolean;
}

export interface GetRdbAclAclRule {
    /**
     * A simple text describing this rule
     */
    description: string;
    /**
     * The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
     */
    ip: string;
}

export interface GetRdbInstanceLoadBalancer {
    endpointId: string;
    hostname: string;
    ip: string;
    /**
     * The name of the RDB instance.
     * Only one of `name` and `instanceId` should be specified.
     */
    name: string;
    port: number;
}

export interface GetRdbInstancePrivateNetwork {
    endpointId: string;
    hostname: string;
    ip: string;
    ipNet: string;
    /**
     * The name of the RDB instance.
     * Only one of `name` and `instanceId` should be specified.
     */
    name: string;
    pnId: string;
    port: number;
    zone: string;
}

export interface GetRdbInstanceReadReplica {
    ip: string;
    /**
     * The name of the RDB instance.
     * Only one of `name` and `instanceId` should be specified.
     */
    name: string;
    port: number;
}

export interface GetRedisClusterAcl {
    description: string;
    /**
     * The ID of the Redis cluster.
     */
    id: string;
    ip: string;
}

export interface GetRedisClusterPrivateNetwork {
    endpointId: string;
    /**
     * The ID of the Redis cluster.
     */
    id: string;
    serviceIps: string[];
    /**
     * `region`) The zone in which the server exists.
     */
    zone: string;
}

export interface GetRedisClusterPublicNetwork {
    /**
     * The ID of the Redis cluster.
     */
    id: string;
    ips: string[];
    port: number;
}

export interface GetWebHostOfferProduct {
    /**
     * The quota of databases.
     */
    databasesQuota: number;
    /**
     * The quota of email accounts.
     */
    emailAccountsQuota: number;
    /**
     * The quota of email storage.
     */
    emailStorageQuota: number;
    /**
     * The quota of hosting storage.
     */
    hostingStorageQuota: number;
    /**
     * The offer name. Only one of `name` and `offerId` should be specified.
     */
    name: string;
    /**
     * The product option.
     */
    option: boolean;
    /**
     * The capacity of the memory in GB.
     */
    ram: number;
    /**
     * If support is included.
     */
    supportIncluded: boolean;
    /**
     * The number of cores.
     */
    vCpu: number;
}

export interface IamPolicyRule {
    /**
     * ID of organization scoped to the rule.
     */
    organizationId?: string;
    /**
     * Names of permission sets bound to the rule.
     */
    permissionSetNames: string[];
    /**
     * List of project IDs scoped to the rule.
     */
    projectIds?: string[];
}

export interface InstanceImageAdditionalVolume {
    /**
     * Date of the volume creation.
     */
    creationDate: string;
    /**
     * The export URI of the volume.
     */
    exportUri: string;
    /**
     * ID of the server containing the volume.
     */
    id: string;
    /**
     * Date of volume latest update.
     */
    modificationDate: string;
    /**
     * The name of the image. If not provided it will be randomly generated.
     */
    name: string;
    /**
     * The organization ID the volume is associated with.
     */
    organization: string;
    /**
     * ID of the project the volume is associated with
     */
    project: string;
    /**
     * Description of the server containing the volume (in case the image is a backup from a server).
     */
    server: {[key: string]: string};
    /**
     * The size of the volume.
     */
    size: number;
    /**
     * State of the volume.
     */
    state: string;
    /**
     * A list of tags to apply to the image.
     */
    tags: string[];
    /**
     * The type of volume, possible values are `lSsd` and `bSsd`.
     */
    volumeType: string;
    /**
     * The zone in which the image should be created.
     */
    zone: string;
}

export interface InstanceSecurityGroupInboundRule {
    /**
     * The action to take when rule match. Possible values are: `accept` or `drop`.
     */
    action: string;
    /**
     * The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
     *
     * @deprecated Ip address is deprecated. Please use ip_range instead
     */
    ip?: string;
    /**
     * The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
     */
    ipRange?: string;
    /**
     * The port this rule applies to. If no `port` nor `portRange` are specified, the rule will apply to all port. Only one of `port` and `portRange` should be specified.
     */
    port?: number;
    portRange?: string;
    /**
     * The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
     */
    protocol?: string;
}

export interface InstanceSecurityGroupOutboundRule {
    /**
     * The action to take when rule match. Possible values are: `accept` or `drop`.
     */
    action: string;
    /**
     * The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
     *
     * @deprecated Ip address is deprecated. Please use ip_range instead
     */
    ip?: string;
    /**
     * The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
     */
    ipRange?: string;
    /**
     * The port this rule applies to. If no `port` nor `portRange` are specified, the rule will apply to all port. Only one of `port` and `portRange` should be specified.
     */
    port?: number;
    portRange?: string;
    /**
     * The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
     */
    protocol?: string;
}

export interface InstanceSecurityGroupRulesInboundRule {
    /**
     * The action to take when rule match. Possible values are: `accept` or `drop`.
     */
    action: string;
    /**
     * The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
     *
     * @deprecated Ip address is deprecated. Please use ip_range instead
     */
    ip?: string;
    /**
     * The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
     */
    ipRange?: string;
    /**
     * The port this rule apply to. If no port is specified, rule will apply to all port.
     */
    port?: number;
    portRange?: string;
    /**
     * The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
     */
    protocol?: string;
}

export interface InstanceSecurityGroupRulesOutboundRule {
    /**
     * The action to take when rule match. Possible values are: `accept` or `drop`.
     */
    action: string;
    /**
     * The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
     *
     * @deprecated Ip address is deprecated. Please use ip_range instead
     */
    ip?: string;
    /**
     * The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
     */
    ipRange?: string;
    /**
     * The port this rule apply to. If no port is specified, rule will apply to all port.
     */
    port?: number;
    portRange?: string;
    /**
     * The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
     */
    protocol?: string;
}

export interface InstanceServerPrivateNetwork {
    macAddress: string;
    pnId: string;
    status: string;
    /**
     * `zone`) The zone in which the server should be created.
     */
    zone: string;
}

export interface InstanceServerRootVolume {
    boot?: boolean;
    /**
     * Forces deletion of the root volume on instance termination.
     */
    deleteOnTermination?: boolean;
    /**
     * The name of the server.
     */
    name: string;
    /**
     * Size of the root volume in gigabytes.
     * To find the right size use [this endpoint](https://api.scaleway.com/instance/v1/zones/fr-par-1/products/servers) and
     * check the `volumes_constraint.{min|max}_size` (in bytes) for your `commercialType`.
     * Updates to this field will recreate a new resource.
     */
    sizeInGb: number;
    /**
     * The volume ID of the root volume of the server, allows you to create server with an existing volume. If empty, will be computed to a created volume ID.
     */
    volumeId: string;
    /**
     * Volume type of root volume, can be `bSsd` or `lSsd`, default value depends on server type
     */
    volumeType: string;
}

export interface InstanceSnapshotImport {
    /**
     * Bucket name containing [qcow2](https://en.wikipedia.org/wiki/Qcow) to import
     */
    bucket: string;
    /**
     * Key of the object to import
     */
    key: string;
}

export interface IotDeviceCertificate {
    crt: string;
    /**
     * The private key of the device, in case it is generated by Scaleway.
     */
    key: string;
}

export interface IotDeviceMessageFilters {
    /**
     * Rules used to restrict topics the device can publish to.
     */
    publish?: outputs.IotDeviceMessageFiltersPublish;
    /**
     * Rules used to restrict topics the device can subscribe to.
     */
    subscribe?: outputs.IotDeviceMessageFiltersSubscribe;
}

export interface IotDeviceMessageFiltersPublish {
    /**
     * Same as publish rules.
     */
    policy?: string;
    /**
     * Same as publish rules.
     */
    topics?: string[];
}

export interface IotDeviceMessageFiltersSubscribe {
    /**
     * Same as publish rules.
     */
    policy?: string;
    /**
     * Same as publish rules.
     */
    topics?: string[];
}

export interface IotRouteDatabase {
    dbname: string;
    host: string;
    password: string;
    port: number;
    query: string;
    username: string;
}

export interface IotRouteRest {
    headers: {[key: string]: string};
    uri: string;
    verb: string;
}

export interface IotRouteS3 {
    bucketName: string;
    bucketRegion: string;
    objectPrefix?: string;
    strategy: string;
}

export interface K8sClusterAutoUpgrade {
    /**
     * Set to `true` to enable Kubernetes patch version auto upgrades.
     * > **Important:** When enabling auto upgrades, the `version` field take a minor version like x.y (ie 1.18).
     */
    enable: boolean;
    /**
     * The day of the auto upgrade maintenance window (`monday` to `sunday`, or `any`).
     */
    maintenanceWindowDay: string;
    /**
     * The start hour (UTC) of the 2-hour auto upgrade maintenance window (0 to 23).
     */
    maintenanceWindowStartHour: number;
}

export interface K8sClusterAutoscalerConfig {
    /**
     * Detect similar node groups and balance the number of nodes between them.
     */
    balanceSimilarNodeGroups?: boolean;
    /**
     * Disables the scale down feature of the autoscaler.
     */
    disableScaleDown?: boolean;
    /**
     * Type of resource estimator to be used in scale up.
     */
    estimator?: string;
    /**
     * Type of node group expander to be used in scale up.
     */
    expander?: string;
    /**
     * Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don't cause scale up. Pods with null priority (PodPriority disabled) are non expendable.
     */
    expendablePodsPriorityCutoff?: number;
    /**
     * Ignore DaemonSet pods when calculating resource utilization for scaling down.
     */
    ignoreDaemonsetsUtilization?: boolean;
    /**
     * Maximum number of seconds the cluster autoscaler waits for pod termination when trying to scale down a node
     */
    maxGracefulTerminationSec?: number;
    /**
     * How long after scale up that scale down evaluation resumes.
     */
    scaleDownDelayAfterAdd?: string;
    /**
     * How long a node should be unneeded before it is eligible for scale down.
     */
    scaleDownUnneededTime?: string;
    /**
     * Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down
     */
    scaleDownUtilizationThreshold?: number;
}

export interface K8sClusterKubeconfig {
    /**
     * The CA certificate of the Kubernetes API server.
     */
    clusterCaCertificate: string;
    /**
     * The raw kubeconfig file.
     */
    configFile: string;
    /**
     * The URL of the Kubernetes API server.
     */
    host: string;
    /**
     * The token to connect to the Kubernetes API server.
     */
    token: string;
}

export interface K8sClusterOpenIdConnectConfig {
    /**
     * A client id that all tokens must be issued for
     */
    clientId: string;
    /**
     * JWT claim to use as the user's group
     */
    groupsClaims?: string[];
    /**
     * Prefix prepended to group claims
     */
    groupsPrefix?: string;
    /**
     * URL of the provider which allows the API server to discover public signing keys
     */
    issuerUrl: string;
    /**
     * Multiple key=value pairs that describes a required claim in the ID Token
     */
    requiredClaims?: string[];
    /**
     * JWT claim to use as the user name
     */
    usernameClaim?: string;
    /**
     * Prefix prepended to username
     */
    usernamePrefix?: string;
}

export interface K8sPoolNode {
    /**
     * The name for the pool.
     * > **Important:** Updates to this field will recreate a new resource.
     */
    name: string;
    /**
     * The public IPv4.
     */
    publicIp: string;
    /**
     * The public IPv6.
     */
    publicIpV6: string;
    /**
     * The status of the node.
     */
    status: string;
}

export interface K8sPoolUpgradePolicy {
    /**
     * The maximum number of nodes to be created during the upgrade
     */
    maxSurge?: number;
    /**
     * The maximum number of nodes that can be not ready at the same time
     */
    maxUnavailable?: number;
}

export interface LbBackendHealthCheckHttp {
    /**
     * The expected HTTP status code.
     */
    code?: number;
    /**
     * The HTTP host header to use for HC requests.
     */
    hostHeader?: string;
    /**
     * The HTTP method to use for HC requests.
     */
    method?: string;
    /**
     * The HTTP endpoint URL to call for HC requests.
     */
    uri: string;
}

export interface LbBackendHealthCheckHttps {
    /**
     * The expected HTTP status code.
     */
    code?: number;
    /**
     * The HTTP host header to use for HC requests.
     */
    hostHeader?: string;
    /**
     * The HTTP method to use for HC requests.
     */
    method?: string;
    /**
     * The SNI to use for HC requests over SSL.
     */
    sni?: string;
    /**
     * The HTTP endpoint URL to call for HC requests.
     */
    uri: string;
}

export interface LbBackendHealthCheckTcp {
}

export interface LbCertificateCustomCertificate {
    /**
     * Full PEM-formatted certificate chain.
     */
    certificateChain: string;
}

export interface LbCertificateLetsencrypt {
    /**
     * Main domain of the certificate. A new certificate will be created if this field is changed.
     */
    commonName: string;
    /**
     * Array of alternative domain names.  A new certificate will be created if this field is changed.
     */
    subjectAlternativeNames?: string[];
}

export interface LbFrontendAcl {
    /**
     * Action to undertake when an ACL filter matches.
     */
    action: outputs.LbFrontendAclAction;
    /**
     * The ACL match rule. At least `ipSubnet` or `httpFilter` and `httpFilterValue` are required.
     */
    match: outputs.LbFrontendAclMatch;
    /**
     * The ACL name. If not provided it will be randomly generated.
     */
    name: string;
}

export interface LbFrontendAclAction {
    /**
     * The action type. Possible values are: `allow` or `deny`.
     */
    type: string;
}

export interface LbFrontendAclMatch {
    /**
     * The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
     * It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
     * Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
     */
    httpFilter?: string;
    httpFilterOption?: string;
    /**
     * A list of possible values to match for the given HTTP filter.
     * Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case-insensitive.
     */
    httpFilterValues?: string[];
    /**
     * If set to `true`, the condition will be of type "unless".
     */
    invert?: boolean;
    /**
     * A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
     */
    ipSubnets?: string[];
}

export interface LbPrivateNetwork {
    /**
     * (Optional) Set to true if you want to let DHCP assign IP addresses. See below.
     */
    dhcpConfig?: boolean;
    /**
     * (Required) The ID of the Private Network to associate.
     */
    privateNetworkId: string;
    /**
     * (Optional) Define a local ip address of your choice for the load balancer instance. See below.
     */
    staticConfig?: string;
    status: string;
    /**
     * `zone`) The zone of the load-balancer.
     */
    zone: string;
}

export interface MnqCredentialNatsCredentials {
    /**
     * Raw content of the NATS credentials file.
     */
    content: string;
}

export interface MnqCredentialSqsSnsCredentials {
    /**
     * The ID of the key.
     */
    accessKey: string;
    /**
     * List of permissions associated to this Credential. Only one of permissions may be set.
     */
    permissions?: outputs.MnqCredentialSqsSnsCredentialsPermissions;
    /**
     * The Secret value of the key.
     */
    secretKey: string;
}

export interface MnqCredentialSqsSnsCredentialsPermissions {
    /**
     * . Defines if user can manage the associated resource(s).
     */
    canManage?: boolean;
    /**
     * . Defines if user can publish messages to the service.
     */
    canPublish?: boolean;
    /**
     * . Defines if user can receive messages from the service.
     */
    canReceive?: boolean;
}

export interface ObjectBucketAclAccessControlPolicy {
    grants?: outputs.ObjectBucketAclAccessControlPolicyGrant[];
    owner: outputs.ObjectBucketAclAccessControlPolicyOwner;
}

export interface ObjectBucketAclAccessControlPolicyGrant {
    grantee?: outputs.ObjectBucketAclAccessControlPolicyGrantGrantee;
    permission: string;
}

export interface ObjectBucketAclAccessControlPolicyGrantGrantee {
    displayName: string;
    /**
     * The `region`,`bucket` and `acl` separated by (`/`).
     */
    id: string;
    type: string;
}

export interface ObjectBucketAclAccessControlPolicyOwner {
    displayName: string;
    /**
     * The `region`,`bucket` and `acl` separated by (`/`).
     */
    id: string;
}

export interface ObjectBucketCorsRule {
    /**
     * Specifies which headers are allowed.
     */
    allowedHeaders?: string[];
    /**
     * Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
     */
    allowedMethods: string[];
    /**
     * Specifies which origins are allowed.
     */
    allowedOrigins: string[];
    /**
     * Specifies expose header in the response.
     */
    exposeHeaders?: string[];
    /**
     * Specifies time in seconds that browser can cache the response for a preflight request.
     */
    maxAgeSeconds?: number;
}

export interface ObjectBucketLifecycleRule {
    /**
     * Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
     */
    abortIncompleteMultipartUploadDays?: number;
    /**
     * The element value can be either Enabled or Disabled. If a rule is disabled, Scaleway S3 doesn't perform any of the actions defined in the rule.
     */
    enabled: boolean;
    /**
     * Specifies a period in the object's expire (documented below).
     */
    expiration?: outputs.ObjectBucketLifecycleRuleExpiration;
    /**
     * Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     */
    id: string;
    /**
     * Object key prefix identifying one or more objects to which the rule applies.
     */
    prefix?: string;
    /**
     * Specifies object tags key and value.
     */
    tags?: {[key: string]: string};
    /**
     * Specifies a period in the object's transitions (documented below).
     */
    transitions?: outputs.ObjectBucketLifecycleRuleTransition[];
}

export interface ObjectBucketLifecycleRuleExpiration {
    /**
     * Specifies the number of days after object creation when the specific rule action takes effect.
     */
    days: number;
}

export interface ObjectBucketLifecycleRuleTransition {
    /**
     * Specifies the number of days after object creation when the specific rule action takes effect.
     */
    days?: number;
    /**
     * Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/storage/object/concepts/#storage-class) `STANDARD`, `GLACIER`, `ONEZONE_IA`  to which you want the object to transition.
     */
    storageClass: string;
}

export interface ObjectBucketLockConfigurationRule {
    defaultRetention: outputs.ObjectBucketLockConfigurationRuleDefaultRetention;
}

export interface ObjectBucketLockConfigurationRuleDefaultRetention {
    days?: number;
    mode: string;
    years?: number;
}

export interface ObjectBucketVersioning {
    /**
     * Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
     */
    enabled: boolean;
}

export interface ObjectBucketWebsiteConfigurationErrorDocument {
    key: string;
}

export interface ObjectBucketWebsiteConfigurationIndexDocument {
    suffix: string;
}

export interface RdbAclAclRule {
    /**
     * A text describing this rule. Default description: `IP allowed`
     */
    description: string;
    /**
     * The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
     */
    ip: string;
}

export interface RdbInstanceLoadBalancer {
    /**
     * The ID of the endpoint of the private network.
     */
    endpointId: string;
    /**
     * Name of the endpoint.
     */
    hostname: string;
    /**
     * IP of the endpoint.
     */
    ip: string;
    /**
     * The name of the Database Instance.
     */
    name: string;
    /**
     * Port of the endpoint.
     */
    port: number;
}

export interface RdbInstancePrivateNetwork {
    /**
     * The ID of the endpoint of the private network.
     */
    endpointId: string;
    /**
     * Name of the endpoint.
     */
    hostname: string;
    /**
     * IP of the endpoint.
     */
    ip: string;
    ipNet: string;
    /**
     * The name of the Database Instance.
     */
    name: string;
    pnId: string;
    /**
     * Port of the endpoint.
     */
    port: number;
    zone: string;
}

export interface RdbInstanceReadReplica {
    /**
     * IP of the endpoint.
     */
    ip: string;
    /**
     * The name of the Database Instance.
     */
    name: string;
    /**
     * Port of the endpoint.
     */
    port: number;
}

export interface RdbReadReplicaDirectAccess {
    /**
     * The ID of the endpoint of the read replica.
     */
    endpointId: string;
    /**
     * Hostname of the endpoint. Only one of ip and hostname may be set.
     */
    hostname: string;
    /**
     * IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
     */
    ip: string;
    /**
     * Name of the endpoint.
     */
    name: string;
    /**
     * TCP port of the endpoint.
     */
    port: number;
}

export interface RdbReadReplicaPrivateNetwork {
    /**
     * The ID of the endpoint of the read replica.
     */
    endpointId: string;
    /**
     * Hostname of the endpoint. Only one of ip and hostname may be set.
     */
    hostname: string;
    /**
     * IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
     */
    ip: string;
    /**
     * Name of the endpoint.
     */
    name: string;
    /**
     * TCP port of the endpoint.
     */
    port: number;
    /**
     * UUID of the private network to be connected to the read replica.
     */
    privateNetworkId: string;
    /**
     * Endpoint IPv4 address with a CIDR notation. Check documentation about IP and subnet
     * limitations. (IP network).
     */
    serviceIp: string;
    zone: string;
}

export interface RedisClusterAcl {
    /**
     * A text describing this rule. Default description: `Allow IP`
     */
    description: string;
    /**
     * The UUID of the private network resource.
     */
    id: string;
    /**
     * The ip range to whitelist
     * in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
     */
    ip: string;
}

export interface RedisClusterPrivateNetwork {
    endpointId: string;
    /**
     * The UUID of the private network resource.
     */
    id: string;
    /**
     * Endpoint IPv4 addresses
     * in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation). You must provide at
     * least one IP per node.
     */
    serviceIps: string[];
    /**
     * `zone`) The zone in which the
     * Redis Cluster should be created.
     */
    zone: string;
}

export interface RedisClusterPublicNetwork {
    /**
     * The UUID of the private network resource.
     */
    id: string;
    /**
     * Lis of IPv4 address of the endpoint (IP address).
     */
    ips: string[];
    /**
     * TCP port of the endpoint.
     */
    port: number;
}

