// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway Load Balancer routes.
 *
 * For more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/how-to/create-manage-routes/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-route).
 *
 * ## Example Usage
 *
 * ### With SNI for direction to TCP backends
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@ediri/scaleway";
 *
 * const ip01 = new scaleway.LbIp("ip01", {});
 * const lb01 = new scaleway.Lb("lb01", {
 *     ipId: ip01.id,
 *     type: "lb-s",
 * });
 * const bkd01 = new scaleway.LbBackend("bkd01", {
 *     lbId: lb01.id,
 *     forwardProtocol: "tcp",
 *     forwardPort: 80,
 *     proxyProtocol: "none",
 * });
 * const frt01 = new scaleway.LbFrontend("frt01", {
 *     lbId: lb01.id,
 *     backendId: bkd01.id,
 *     inboundPort: 80,
 * });
 * const rt01 = new scaleway.LbRoute("rt01", {
 *     frontendId: frt01.id,
 *     backendId: bkd01.id,
 *     matchSni: "sni.scaleway.com",
 * });
 * ```
 *
 * ### With host-header for direction to HTTP backends
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@ediri/scaleway";
 *
 * const ip01 = new scaleway.LbIp("ip01", {});
 * const lb01 = new scaleway.Lb("lb01", {
 *     ipId: ip01.id,
 *     type: "lb-s",
 * });
 * const bkd01 = new scaleway.LbBackend("bkd01", {
 *     lbId: lb01.id,
 *     forwardProtocol: "http",
 *     forwardPort: 80,
 *     proxyProtocol: "none",
 * });
 * const frt01 = new scaleway.LbFrontend("frt01", {
 *     lbId: lb01.id,
 *     backendId: bkd01.id,
 *     inboundPort: 80,
 * });
 * const rt01 = new scaleway.LbRoute("rt01", {
 *     frontendId: frt01.id,
 *     backendId: bkd01.id,
 *     matchHostHeader: "host.scaleway.com",
 * });
 * ```
 *
 * ### With path-begin matching for HTTP backends
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@ediri/scaleway";
 *
 * const ip = new scaleway.LbIp("ip", {});
 * const lb = new scaleway.Lb("lb", {
 *     ipId: ip.id,
 *     type: "lb-s",
 * });
 * const app = new scaleway.LbBackend("app", {
 *     lbId: lb.id,
 *     forwardProtocol: "http",
 *     forwardPort: 80,
 *     proxyProtocol: "none",
 * });
 * const admin = new scaleway.LbBackend("admin", {
 *     lbId: lb.id,
 *     forwardProtocol: "http",
 *     forwardPort: 8080,
 *     proxyProtocol: "none",
 * });
 * const frontend = new scaleway.LbFrontend("frontend", {
 *     lbId: lb.id,
 *     backendId: app.id,
 *     inboundPort: 80,
 * });
 * const adminRoute = new scaleway.LbRoute("adminRoute", {
 *     frontendId: frontend.id,
 *     backendId: admin.id,
 *     matchPathBegin: "/admin",
 * });
 * const defaultRoute = new scaleway.LbRoute("defaultRoute", {
 *     frontendId: frontend.id,
 *     backendId: app.id,
 *     matchPathBegin: "/",
 * });
 * ```
 *
 * ## Import
 *
 * Load Balancer frontends can be imported using `{zone}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/lbRoute:LbRoute main fr-par-1/11111111-1111-1111-1111-111111111111
 * ```
 */
export class LbRoute extends pulumi.CustomResource {
    /**
     * Get an existing LbRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbRouteState, opts?: pulumi.CustomResourceOptions): LbRoute {
        return new LbRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/lbRoute:LbRoute';

    /**
     * Returns true if the given object is an instance of LbRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbRoute.__pulumiType;
    }

    /**
     * The ID of the backend the route is associated with.
     */
    public readonly backendId!: pulumi.Output<string>;
    /**
     * The date on which the route was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The ID of the frontend the route is associated with.
     */
    public readonly frontendId!: pulumi.Output<string>;
    /**
     * The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.
     * Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
     *
     * > **Important:** This field should be set for routes on HTTP Load Balancers.
     */
    public readonly matchHostHeader!: pulumi.Output<string | undefined>;
    /**
     * The value to match in the URL beginning path from an incoming request.
     * Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
     */
    public readonly matchPathBegin!: pulumi.Output<string | undefined>;
    /**
     * The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.
     * Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
     *
     * > **Important:** This field should be set for routes on TCP Load Balancers.
     */
    public readonly matchSni!: pulumi.Output<string | undefined>;
    /**
     * If true, all subdomains will match.
     */
    public readonly matchSubdomains!: pulumi.Output<boolean | undefined>;
    /**
     * The date on which the route was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a LbRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbRouteArgs | LbRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbRouteState | undefined;
            resourceInputs["backendId"] = state ? state.backendId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["frontendId"] = state ? state.frontendId : undefined;
            resourceInputs["matchHostHeader"] = state ? state.matchHostHeader : undefined;
            resourceInputs["matchPathBegin"] = state ? state.matchPathBegin : undefined;
            resourceInputs["matchSni"] = state ? state.matchSni : undefined;
            resourceInputs["matchSubdomains"] = state ? state.matchSubdomains : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as LbRouteArgs | undefined;
            if ((!args || args.backendId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendId'");
            }
            if ((!args || args.frontendId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frontendId'");
            }
            resourceInputs["backendId"] = args ? args.backendId : undefined;
            resourceInputs["frontendId"] = args ? args.frontendId : undefined;
            resourceInputs["matchHostHeader"] = args ? args.matchHostHeader : undefined;
            resourceInputs["matchPathBegin"] = args ? args.matchPathBegin : undefined;
            resourceInputs["matchSni"] = args ? args.matchSni : undefined;
            resourceInputs["matchSubdomains"] = args ? args.matchSubdomains : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LbRoute resources.
 */
export interface LbRouteState {
    /**
     * The ID of the backend the route is associated with.
     */
    backendId?: pulumi.Input<string>;
    /**
     * The date on which the route was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The ID of the frontend the route is associated with.
     */
    frontendId?: pulumi.Input<string>;
    /**
     * The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.
     * Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
     *
     * > **Important:** This field should be set for routes on HTTP Load Balancers.
     */
    matchHostHeader?: pulumi.Input<string>;
    /**
     * The value to match in the URL beginning path from an incoming request.
     * Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
     */
    matchPathBegin?: pulumi.Input<string>;
    /**
     * The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.
     * Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
     *
     * > **Important:** This field should be set for routes on TCP Load Balancers.
     */
    matchSni?: pulumi.Input<string>;
    /**
     * If true, all subdomains will match.
     */
    matchSubdomains?: pulumi.Input<boolean>;
    /**
     * The date on which the route was last updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LbRoute resource.
 */
export interface LbRouteArgs {
    /**
     * The ID of the backend the route is associated with.
     */
    backendId: pulumi.Input<string>;
    /**
     * The ID of the frontend the route is associated with.
     */
    frontendId: pulumi.Input<string>;
    /**
     * The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.
     * Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
     *
     * > **Important:** This field should be set for routes on HTTP Load Balancers.
     */
    matchHostHeader?: pulumi.Input<string>;
    /**
     * The value to match in the URL beginning path from an incoming request.
     * Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
     */
    matchPathBegin?: pulumi.Input<string>;
    /**
     * The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.
     * Only one of `matchSni`, `matchHostHeader` and `matchPathBegin` should be specified.
     *
     * > **Important:** This field should be set for routes on TCP Load Balancers.
     */
    matchSni?: pulumi.Input<string>;
    /**
     * If true, all subdomains will match.
     */
    matchSubdomains?: pulumi.Input<boolean>;
}
