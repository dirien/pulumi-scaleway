// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway VPC ACLs.
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@ediri/scaleway";
 *
 * const vpc01 = new scaleway.Vpc("vpc01", {});
 * const acl01 = new scaleway.VpcAcl("acl01", {
 *     vpcId: vpc01.id,
 *     isIpv6: false,
 *     rules: [{
 *         protocol: "TCP",
 *         srcPortLow: 0,
 *         srcPortHigh: 0,
 *         dstPortLow: 80,
 *         dstPortHigh: 80,
 *         source: "0.0.0.0/0",
 *         destination: "0.0.0.0/0",
 *         description: "Allow HTTP traffic from any source",
 *         action: "accept",
 *     }],
 *     defaultPolicy: "drop",
 * });
 * ```
 *
 * ## Import
 *
 * ACLs can be imported using `{region}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/vpcAcl:VpcAcl main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class VpcAcl extends pulumi.CustomResource {
    /**
     * Get an existing VpcAcl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcAclState, opts?: pulumi.CustomResourceOptions): VpcAcl {
        return new VpcAcl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/vpcAcl:VpcAcl';

    /**
     * Returns true if the given object is an instance of VpcAcl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcAcl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcAcl.__pulumiType;
    }

    /**
     * The action to take for packets which do not match any rules.
     */
    public readonly defaultPolicy!: pulumi.Output<string>;
    /**
     * Defines whether this set of ACL rules is for IPv6 (false = IPv4). Each Network ACL can have rules for only one IP type.
     */
    public readonly isIpv6!: pulumi.Output<boolean | undefined>;
    /**
     * `region`) The region of the ACL.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The list of Network ACL rules.
     */
    public readonly rules!: pulumi.Output<outputs.VpcAclRule[]>;
    /**
     * The VPC ID the ACL belongs to.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a VpcAcl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcAclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcAclArgs | VpcAclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcAclState | undefined;
            resourceInputs["defaultPolicy"] = state ? state.defaultPolicy : undefined;
            resourceInputs["isIpv6"] = state ? state.isIpv6 : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as VpcAclArgs | undefined;
            if ((!args || args.defaultPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultPolicy'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["defaultPolicy"] = args ? args.defaultPolicy : undefined;
            resourceInputs["isIpv6"] = args ? args.isIpv6 : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcAcl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpcAcl resources.
 */
export interface VpcAclState {
    /**
     * The action to take for packets which do not match any rules.
     */
    defaultPolicy?: pulumi.Input<string>;
    /**
     * Defines whether this set of ACL rules is for IPv6 (false = IPv4). Each Network ACL can have rules for only one IP type.
     */
    isIpv6?: pulumi.Input<boolean>;
    /**
     * `region`) The region of the ACL.
     */
    region?: pulumi.Input<string>;
    /**
     * The list of Network ACL rules.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.VpcAclRule>[]>;
    /**
     * The VPC ID the ACL belongs to.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcAcl resource.
 */
export interface VpcAclArgs {
    /**
     * The action to take for packets which do not match any rules.
     */
    defaultPolicy: pulumi.Input<string>;
    /**
     * Defines whether this set of ACL rules is for IPv6 (false = IPv4). Each Network ACL can have rules for only one IP type.
     */
    isIpv6?: pulumi.Input<boolean>;
    /**
     * `region`) The region of the ACL.
     */
    region?: pulumi.Input<string>;
    /**
     * The list of Network ACL rules.
     */
    rules: pulumi.Input<pulumi.Input<inputs.VpcAclRule>[]>;
    /**
     * The VPC ID the ACL belongs to.
     */
    vpcId: pulumi.Input<string>;
}
