# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MnqQueueArgs', 'MnqQueue']

@pulumi.input_type
class MnqQueueArgs:
    def __init__(__self__, *,
                 namespace_id: pulumi.Input[str],
                 message_max_age: Optional[pulumi.Input[int]] = None,
                 message_max_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 nats: Optional[pulumi.Input['MnqQueueNatsArgs']] = None,
                 sqs: Optional[pulumi.Input['MnqQueueSqsArgs']] = None):
        """
        The set of arguments for constructing a MnqQueue resource.
        :param pulumi.Input[str] namespace_id: The ID of the Namespace associated to
        :param pulumi.Input[int] message_max_age: The number of seconds the queue retains a message.
        :param pulumi.Input[int] message_max_size: The maximum size of a message. Should be in bytes.
        :param pulumi.Input[str] name: The name of the queue. Conflicts with name_prefix.
        :param pulumi.Input[str] name_prefix: Creates a unique name beginning with the specified prefix. Conflicts with name.
        :param pulumi.Input['MnqQueueNatsArgs'] nats: The NATS attributes of the queue
        :param pulumi.Input['MnqQueueSqsArgs'] sqs: The SQS attributes of the queue
        """
        pulumi.set(__self__, "namespace_id", namespace_id)
        if message_max_age is not None:
            pulumi.set(__self__, "message_max_age", message_max_age)
        if message_max_size is not None:
            pulumi.set(__self__, "message_max_size", message_max_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if nats is not None:
            pulumi.set(__self__, "nats", nats)
        if sqs is not None:
            pulumi.set(__self__, "sqs", sqs)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Input[str]:
        """
        The ID of the Namespace associated to
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter(name="messageMaxAge")
    def message_max_age(self) -> Optional[pulumi.Input[int]]:
        """
        The number of seconds the queue retains a message.
        """
        return pulumi.get(self, "message_max_age")

    @message_max_age.setter
    def message_max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "message_max_age", value)

    @property
    @pulumi.getter(name="messageMaxSize")
    def message_max_size(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum size of a message. Should be in bytes.
        """
        return pulumi.get(self, "message_max_size")

    @message_max_size.setter
    def message_max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "message_max_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the queue. Conflicts with name_prefix.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Creates a unique name beginning with the specified prefix. Conflicts with name.
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter
    def nats(self) -> Optional[pulumi.Input['MnqQueueNatsArgs']]:
        """
        The NATS attributes of the queue
        """
        return pulumi.get(self, "nats")

    @nats.setter
    def nats(self, value: Optional[pulumi.Input['MnqQueueNatsArgs']]):
        pulumi.set(self, "nats", value)

    @property
    @pulumi.getter
    def sqs(self) -> Optional[pulumi.Input['MnqQueueSqsArgs']]:
        """
        The SQS attributes of the queue
        """
        return pulumi.get(self, "sqs")

    @sqs.setter
    def sqs(self, value: Optional[pulumi.Input['MnqQueueSqsArgs']]):
        pulumi.set(self, "sqs", value)


@pulumi.input_type
class _MnqQueueState:
    def __init__(__self__, *,
                 message_max_age: Optional[pulumi.Input[int]] = None,
                 message_max_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 nats: Optional[pulumi.Input['MnqQueueNatsArgs']] = None,
                 sqs: Optional[pulumi.Input['MnqQueueSqsArgs']] = None):
        """
        Input properties used for looking up and filtering MnqQueue resources.
        :param pulumi.Input[int] message_max_age: The number of seconds the queue retains a message.
        :param pulumi.Input[int] message_max_size: The maximum size of a message. Should be in bytes.
        :param pulumi.Input[str] name: The name of the queue. Conflicts with name_prefix.
        :param pulumi.Input[str] name_prefix: Creates a unique name beginning with the specified prefix. Conflicts with name.
        :param pulumi.Input[str] namespace_id: The ID of the Namespace associated to
        :param pulumi.Input['MnqQueueNatsArgs'] nats: The NATS attributes of the queue
        :param pulumi.Input['MnqQueueSqsArgs'] sqs: The SQS attributes of the queue
        """
        if message_max_age is not None:
            pulumi.set(__self__, "message_max_age", message_max_age)
        if message_max_size is not None:
            pulumi.set(__self__, "message_max_size", message_max_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if nats is not None:
            pulumi.set(__self__, "nats", nats)
        if sqs is not None:
            pulumi.set(__self__, "sqs", sqs)

    @property
    @pulumi.getter(name="messageMaxAge")
    def message_max_age(self) -> Optional[pulumi.Input[int]]:
        """
        The number of seconds the queue retains a message.
        """
        return pulumi.get(self, "message_max_age")

    @message_max_age.setter
    def message_max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "message_max_age", value)

    @property
    @pulumi.getter(name="messageMaxSize")
    def message_max_size(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum size of a message. Should be in bytes.
        """
        return pulumi.get(self, "message_max_size")

    @message_max_size.setter
    def message_max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "message_max_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the queue. Conflicts with name_prefix.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Creates a unique name beginning with the specified prefix. Conflicts with name.
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Namespace associated to
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter
    def nats(self) -> Optional[pulumi.Input['MnqQueueNatsArgs']]:
        """
        The NATS attributes of the queue
        """
        return pulumi.get(self, "nats")

    @nats.setter
    def nats(self, value: Optional[pulumi.Input['MnqQueueNatsArgs']]):
        pulumi.set(self, "nats", value)

    @property
    @pulumi.getter
    def sqs(self) -> Optional[pulumi.Input['MnqQueueSqsArgs']]:
        """
        The SQS attributes of the queue
        """
        return pulumi.get(self, "sqs")

    @sqs.setter
    def sqs(self, value: Optional[pulumi.Input['MnqQueueSqsArgs']]):
        pulumi.set(self, "sqs", value)


class MnqQueue(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 message_max_age: Optional[pulumi.Input[int]] = None,
                 message_max_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 nats: Optional[pulumi.Input[pulumi.InputType['MnqQueueNatsArgs']]] = None,
                 sqs: Optional[pulumi.Input[pulumi.InputType['MnqQueueSqsArgs']]] = None,
                 __props__=None):
        """
        Create a MnqQueue resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] message_max_age: The number of seconds the queue retains a message.
        :param pulumi.Input[int] message_max_size: The maximum size of a message. Should be in bytes.
        :param pulumi.Input[str] name: The name of the queue. Conflicts with name_prefix.
        :param pulumi.Input[str] name_prefix: Creates a unique name beginning with the specified prefix. Conflicts with name.
        :param pulumi.Input[str] namespace_id: The ID of the Namespace associated to
        :param pulumi.Input[pulumi.InputType['MnqQueueNatsArgs']] nats: The NATS attributes of the queue
        :param pulumi.Input[pulumi.InputType['MnqQueueSqsArgs']] sqs: The SQS attributes of the queue
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MnqQueueArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MnqQueue resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MnqQueueArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MnqQueueArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 message_max_age: Optional[pulumi.Input[int]] = None,
                 message_max_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 nats: Optional[pulumi.Input[pulumi.InputType['MnqQueueNatsArgs']]] = None,
                 sqs: Optional[pulumi.Input[pulumi.InputType['MnqQueueSqsArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MnqQueueArgs.__new__(MnqQueueArgs)

            __props__.__dict__["message_max_age"] = message_max_age
            __props__.__dict__["message_max_size"] = message_max_size
            __props__.__dict__["name"] = name
            __props__.__dict__["name_prefix"] = name_prefix
            if namespace_id is None and not opts.urn:
                raise TypeError("Missing required property 'namespace_id'")
            __props__.__dict__["namespace_id"] = namespace_id
            __props__.__dict__["nats"] = nats
            __props__.__dict__["sqs"] = sqs
        super(MnqQueue, __self__).__init__(
            'scaleway:index/mnqQueue:MnqQueue',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            message_max_age: Optional[pulumi.Input[int]] = None,
            message_max_size: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            name_prefix: Optional[pulumi.Input[str]] = None,
            namespace_id: Optional[pulumi.Input[str]] = None,
            nats: Optional[pulumi.Input[pulumi.InputType['MnqQueueNatsArgs']]] = None,
            sqs: Optional[pulumi.Input[pulumi.InputType['MnqQueueSqsArgs']]] = None) -> 'MnqQueue':
        """
        Get an existing MnqQueue resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] message_max_age: The number of seconds the queue retains a message.
        :param pulumi.Input[int] message_max_size: The maximum size of a message. Should be in bytes.
        :param pulumi.Input[str] name: The name of the queue. Conflicts with name_prefix.
        :param pulumi.Input[str] name_prefix: Creates a unique name beginning with the specified prefix. Conflicts with name.
        :param pulumi.Input[str] namespace_id: The ID of the Namespace associated to
        :param pulumi.Input[pulumi.InputType['MnqQueueNatsArgs']] nats: The NATS attributes of the queue
        :param pulumi.Input[pulumi.InputType['MnqQueueSqsArgs']] sqs: The SQS attributes of the queue
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MnqQueueState.__new__(_MnqQueueState)

        __props__.__dict__["message_max_age"] = message_max_age
        __props__.__dict__["message_max_size"] = message_max_size
        __props__.__dict__["name"] = name
        __props__.__dict__["name_prefix"] = name_prefix
        __props__.__dict__["namespace_id"] = namespace_id
        __props__.__dict__["nats"] = nats
        __props__.__dict__["sqs"] = sqs
        return MnqQueue(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="messageMaxAge")
    def message_max_age(self) -> pulumi.Output[Optional[int]]:
        """
        The number of seconds the queue retains a message.
        """
        return pulumi.get(self, "message_max_age")

    @property
    @pulumi.getter(name="messageMaxSize")
    def message_max_size(self) -> pulumi.Output[Optional[int]]:
        """
        The maximum size of a message. Should be in bytes.
        """
        return pulumi.get(self, "message_max_size")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the queue. Conflicts with name_prefix.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> pulumi.Output[str]:
        """
        Creates a unique name beginning with the specified prefix. Conflicts with name.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Output[str]:
        """
        The ID of the Namespace associated to
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter
    def nats(self) -> pulumi.Output[Optional['outputs.MnqQueueNats']]:
        """
        The NATS attributes of the queue
        """
        return pulumi.get(self, "nats")

    @property
    @pulumi.getter
    def sqs(self) -> pulumi.Output[Optional['outputs.MnqQueueSqs']]:
        """
        The SQS attributes of the queue
        """
        return pulumi.get(self, "sqs")

