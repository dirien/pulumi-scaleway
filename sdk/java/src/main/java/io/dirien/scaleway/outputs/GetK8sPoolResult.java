// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.outputs;

import com.pulumi.core.annotations.CustomType;
import io.dirien.scaleway.outputs.GetK8sPoolNode;
import io.dirien.scaleway.outputs.GetK8sPoolUpgradePolicy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetK8sPoolResult {
    /**
     * @return True if the autohealing feature is enabled for this pool.
     * 
     */
    private Boolean autohealing;
    /**
     * @return True if the autoscaling feature is enabled for this pool.
     * 
     */
    private Boolean autoscaling;
    private @Nullable String clusterId;
    /**
     * @return The container runtime of the pool.
     * 
     */
    private String containerRuntime;
    /**
     * @return The creation date of the pool.
     * 
     */
    private String createdAt;
    private Integer currentSize;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Map<String,String> kubeletArgs;
    /**
     * @return The maximum size of the pool, used by the autoscaling feature.
     * 
     */
    private Integer maxSize;
    /**
     * @return The minimum size of the pool, used by the autoscaling feature.
     * 
     */
    private Integer minSize;
    /**
     * @return The name of the node.
     * 
     */
    private @Nullable String name;
    /**
     * @return The commercial type of the pool instances.
     * 
     */
    private String nodeType;
    /**
     * @return (List of) The nodes in the default pool.
     * 
     */
    private List<GetK8sPoolNode> nodes;
    /**
     * @return [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool are attached to.
     * 
     */
    private String placementGroupId;
    private @Nullable String poolId;
    private @Nullable String region;
    private Integer rootVolumeSizeInGb;
    private String rootVolumeType;
    /**
     * @return The size of the pool.
     * 
     */
    private @Nullable Integer size;
    /**
     * @return The status of the node.
     * 
     */
    private String status;
    /**
     * @return The tags associated with the pool.
     * 
     */
    private List<String> tags;
    /**
     * @return The last update date of the pool.
     * 
     */
    private String updatedAt;
    private List<GetK8sPoolUpgradePolicy> upgradePolicies;
    /**
     * @return The version of the pool.
     * 
     */
    private String version;
    private Boolean waitForPoolReady;
    private String zone;

    private GetK8sPoolResult() {}
    /**
     * @return True if the autohealing feature is enabled for this pool.
     * 
     */
    public Boolean autohealing() {
        return this.autohealing;
    }
    /**
     * @return True if the autoscaling feature is enabled for this pool.
     * 
     */
    public Boolean autoscaling() {
        return this.autoscaling;
    }
    public Optional<String> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }
    /**
     * @return The container runtime of the pool.
     * 
     */
    public String containerRuntime() {
        return this.containerRuntime;
    }
    /**
     * @return The creation date of the pool.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    public Integer currentSize() {
        return this.currentSize;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Map<String,String> kubeletArgs() {
        return this.kubeletArgs;
    }
    /**
     * @return The maximum size of the pool, used by the autoscaling feature.
     * 
     */
    public Integer maxSize() {
        return this.maxSize;
    }
    /**
     * @return The minimum size of the pool, used by the autoscaling feature.
     * 
     */
    public Integer minSize() {
        return this.minSize;
    }
    /**
     * @return The name of the node.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The commercial type of the pool instances.
     * 
     */
    public String nodeType() {
        return this.nodeType;
    }
    /**
     * @return (List of) The nodes in the default pool.
     * 
     */
    public List<GetK8sPoolNode> nodes() {
        return this.nodes;
    }
    /**
     * @return [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool are attached to.
     * 
     */
    public String placementGroupId() {
        return this.placementGroupId;
    }
    public Optional<String> poolId() {
        return Optional.ofNullable(this.poolId);
    }
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public Integer rootVolumeSizeInGb() {
        return this.rootVolumeSizeInGb;
    }
    public String rootVolumeType() {
        return this.rootVolumeType;
    }
    /**
     * @return The size of the pool.
     * 
     */
    public Optional<Integer> size() {
        return Optional.ofNullable(this.size);
    }
    /**
     * @return The status of the node.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The tags associated with the pool.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return The last update date of the pool.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }
    public List<GetK8sPoolUpgradePolicy> upgradePolicies() {
        return this.upgradePolicies;
    }
    /**
     * @return The version of the pool.
     * 
     */
    public String version() {
        return this.version;
    }
    public Boolean waitForPoolReady() {
        return this.waitForPoolReady;
    }
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetK8sPoolResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean autohealing;
        private Boolean autoscaling;
        private @Nullable String clusterId;
        private String containerRuntime;
        private String createdAt;
        private Integer currentSize;
        private String id;
        private Map<String,String> kubeletArgs;
        private Integer maxSize;
        private Integer minSize;
        private @Nullable String name;
        private String nodeType;
        private List<GetK8sPoolNode> nodes;
        private String placementGroupId;
        private @Nullable String poolId;
        private @Nullable String region;
        private Integer rootVolumeSizeInGb;
        private String rootVolumeType;
        private @Nullable Integer size;
        private String status;
        private List<String> tags;
        private String updatedAt;
        private List<GetK8sPoolUpgradePolicy> upgradePolicies;
        private String version;
        private Boolean waitForPoolReady;
        private String zone;
        public Builder() {}
        public Builder(GetK8sPoolResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autohealing = defaults.autohealing;
    	      this.autoscaling = defaults.autoscaling;
    	      this.clusterId = defaults.clusterId;
    	      this.containerRuntime = defaults.containerRuntime;
    	      this.createdAt = defaults.createdAt;
    	      this.currentSize = defaults.currentSize;
    	      this.id = defaults.id;
    	      this.kubeletArgs = defaults.kubeletArgs;
    	      this.maxSize = defaults.maxSize;
    	      this.minSize = defaults.minSize;
    	      this.name = defaults.name;
    	      this.nodeType = defaults.nodeType;
    	      this.nodes = defaults.nodes;
    	      this.placementGroupId = defaults.placementGroupId;
    	      this.poolId = defaults.poolId;
    	      this.region = defaults.region;
    	      this.rootVolumeSizeInGb = defaults.rootVolumeSizeInGb;
    	      this.rootVolumeType = defaults.rootVolumeType;
    	      this.size = defaults.size;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.updatedAt = defaults.updatedAt;
    	      this.upgradePolicies = defaults.upgradePolicies;
    	      this.version = defaults.version;
    	      this.waitForPoolReady = defaults.waitForPoolReady;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder autohealing(Boolean autohealing) {
            this.autohealing = Objects.requireNonNull(autohealing);
            return this;
        }
        @CustomType.Setter
        public Builder autoscaling(Boolean autoscaling) {
            this.autoscaling = Objects.requireNonNull(autoscaling);
            return this;
        }
        @CustomType.Setter
        public Builder clusterId(@Nullable String clusterId) {
            this.clusterId = clusterId;
            return this;
        }
        @CustomType.Setter
        public Builder containerRuntime(String containerRuntime) {
            this.containerRuntime = Objects.requireNonNull(containerRuntime);
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        @CustomType.Setter
        public Builder currentSize(Integer currentSize) {
            this.currentSize = Objects.requireNonNull(currentSize);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder kubeletArgs(Map<String,String> kubeletArgs) {
            this.kubeletArgs = Objects.requireNonNull(kubeletArgs);
            return this;
        }
        @CustomType.Setter
        public Builder maxSize(Integer maxSize) {
            this.maxSize = Objects.requireNonNull(maxSize);
            return this;
        }
        @CustomType.Setter
        public Builder minSize(Integer minSize) {
            this.minSize = Objects.requireNonNull(minSize);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nodeType(String nodeType) {
            this.nodeType = Objects.requireNonNull(nodeType);
            return this;
        }
        @CustomType.Setter
        public Builder nodes(List<GetK8sPoolNode> nodes) {
            this.nodes = Objects.requireNonNull(nodes);
            return this;
        }
        public Builder nodes(GetK8sPoolNode... nodes) {
            return nodes(List.of(nodes));
        }
        @CustomType.Setter
        public Builder placementGroupId(String placementGroupId) {
            this.placementGroupId = Objects.requireNonNull(placementGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder poolId(@Nullable String poolId) {
            this.poolId = poolId;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder rootVolumeSizeInGb(Integer rootVolumeSizeInGb) {
            this.rootVolumeSizeInGb = Objects.requireNonNull(rootVolumeSizeInGb);
            return this;
        }
        @CustomType.Setter
        public Builder rootVolumeType(String rootVolumeType) {
            this.rootVolumeType = Objects.requireNonNull(rootVolumeType);
            return this;
        }
        @CustomType.Setter
        public Builder size(@Nullable Integer size) {
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt);
            return this;
        }
        @CustomType.Setter
        public Builder upgradePolicies(List<GetK8sPoolUpgradePolicy> upgradePolicies) {
            this.upgradePolicies = Objects.requireNonNull(upgradePolicies);
            return this;
        }
        public Builder upgradePolicies(GetK8sPoolUpgradePolicy... upgradePolicies) {
            return upgradePolicies(List.of(upgradePolicies));
        }
        @CustomType.Setter
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        @CustomType.Setter
        public Builder waitForPoolReady(Boolean waitForPoolReady) {
            this.waitForPoolReady = Objects.requireNonNull(waitForPoolReady);
            return this;
        }
        @CustomType.Setter
        public Builder zone(String zone) {
            this.zone = Objects.requireNonNull(zone);
            return this;
        }
        public GetK8sPoolResult build() {
            final var o = new GetK8sPoolResult();
            o.autohealing = autohealing;
            o.autoscaling = autoscaling;
            o.clusterId = clusterId;
            o.containerRuntime = containerRuntime;
            o.createdAt = createdAt;
            o.currentSize = currentSize;
            o.id = id;
            o.kubeletArgs = kubeletArgs;
            o.maxSize = maxSize;
            o.minSize = minSize;
            o.name = name;
            o.nodeType = nodeType;
            o.nodes = nodes;
            o.placementGroupId = placementGroupId;
            o.poolId = poolId;
            o.region = region;
            o.rootVolumeSizeInGb = rootVolumeSizeInGb;
            o.rootVolumeType = rootVolumeType;
            o.size = size;
            o.status = status;
            o.tags = tags;
            o.updatedAt = updatedAt;
            o.upgradePolicies = upgradePolicies;
            o.version = version;
            o.waitForPoolReady = waitForPoolReady;
            o.zone = zone;
            return o;
        }
    }
}
