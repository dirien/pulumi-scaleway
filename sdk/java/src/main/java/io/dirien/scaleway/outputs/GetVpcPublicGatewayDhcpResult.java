// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetVpcPublicGatewayDhcpResult {
    private String address;
    private String createdAt;
    private String dhcpId;
    private String dnsLocalName;
    private List<String> dnsSearches;
    private List<String> dnsServersOverrides;
    private Boolean enableDynamic;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String organizationId;
    private String poolHigh;
    private String poolLow;
    private String projectId;
    private Boolean pushDefaultRoute;
    private Boolean pushDnsServer;
    private Integer rebindTimer;
    private Integer renewTimer;
    private String subnet;
    private String updatedAt;
    private Integer validLifetime;
    private String zone;

    private GetVpcPublicGatewayDhcpResult() {}
    public String address() {
        return this.address;
    }
    public String createdAt() {
        return this.createdAt;
    }
    public String dhcpId() {
        return this.dhcpId;
    }
    public String dnsLocalName() {
        return this.dnsLocalName;
    }
    public List<String> dnsSearches() {
        return this.dnsSearches;
    }
    public List<String> dnsServersOverrides() {
        return this.dnsServersOverrides;
    }
    public Boolean enableDynamic() {
        return this.enableDynamic;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String organizationId() {
        return this.organizationId;
    }
    public String poolHigh() {
        return this.poolHigh;
    }
    public String poolLow() {
        return this.poolLow;
    }
    public String projectId() {
        return this.projectId;
    }
    public Boolean pushDefaultRoute() {
        return this.pushDefaultRoute;
    }
    public Boolean pushDnsServer() {
        return this.pushDnsServer;
    }
    public Integer rebindTimer() {
        return this.rebindTimer;
    }
    public Integer renewTimer() {
        return this.renewTimer;
    }
    public String subnet() {
        return this.subnet;
    }
    public String updatedAt() {
        return this.updatedAt;
    }
    public Integer validLifetime() {
        return this.validLifetime;
    }
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVpcPublicGatewayDhcpResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private String createdAt;
        private String dhcpId;
        private String dnsLocalName;
        private List<String> dnsSearches;
        private List<String> dnsServersOverrides;
        private Boolean enableDynamic;
        private String id;
        private String organizationId;
        private String poolHigh;
        private String poolLow;
        private String projectId;
        private Boolean pushDefaultRoute;
        private Boolean pushDnsServer;
        private Integer rebindTimer;
        private Integer renewTimer;
        private String subnet;
        private String updatedAt;
        private Integer validLifetime;
        private String zone;
        public Builder() {}
        public Builder(GetVpcPublicGatewayDhcpResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.createdAt = defaults.createdAt;
    	      this.dhcpId = defaults.dhcpId;
    	      this.dnsLocalName = defaults.dnsLocalName;
    	      this.dnsSearches = defaults.dnsSearches;
    	      this.dnsServersOverrides = defaults.dnsServersOverrides;
    	      this.enableDynamic = defaults.enableDynamic;
    	      this.id = defaults.id;
    	      this.organizationId = defaults.organizationId;
    	      this.poolHigh = defaults.poolHigh;
    	      this.poolLow = defaults.poolLow;
    	      this.projectId = defaults.projectId;
    	      this.pushDefaultRoute = defaults.pushDefaultRoute;
    	      this.pushDnsServer = defaults.pushDnsServer;
    	      this.rebindTimer = defaults.rebindTimer;
    	      this.renewTimer = defaults.renewTimer;
    	      this.subnet = defaults.subnet;
    	      this.updatedAt = defaults.updatedAt;
    	      this.validLifetime = defaults.validLifetime;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder address(String address) {
            this.address = Objects.requireNonNull(address);
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        @CustomType.Setter
        public Builder dhcpId(String dhcpId) {
            this.dhcpId = Objects.requireNonNull(dhcpId);
            return this;
        }
        @CustomType.Setter
        public Builder dnsLocalName(String dnsLocalName) {
            this.dnsLocalName = Objects.requireNonNull(dnsLocalName);
            return this;
        }
        @CustomType.Setter
        public Builder dnsSearches(List<String> dnsSearches) {
            this.dnsSearches = Objects.requireNonNull(dnsSearches);
            return this;
        }
        public Builder dnsSearches(String... dnsSearches) {
            return dnsSearches(List.of(dnsSearches));
        }
        @CustomType.Setter
        public Builder dnsServersOverrides(List<String> dnsServersOverrides) {
            this.dnsServersOverrides = Objects.requireNonNull(dnsServersOverrides);
            return this;
        }
        public Builder dnsServersOverrides(String... dnsServersOverrides) {
            return dnsServersOverrides(List.of(dnsServersOverrides));
        }
        @CustomType.Setter
        public Builder enableDynamic(Boolean enableDynamic) {
            this.enableDynamic = Objects.requireNonNull(enableDynamic);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder organizationId(String organizationId) {
            this.organizationId = Objects.requireNonNull(organizationId);
            return this;
        }
        @CustomType.Setter
        public Builder poolHigh(String poolHigh) {
            this.poolHigh = Objects.requireNonNull(poolHigh);
            return this;
        }
        @CustomType.Setter
        public Builder poolLow(String poolLow) {
            this.poolLow = Objects.requireNonNull(poolLow);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder pushDefaultRoute(Boolean pushDefaultRoute) {
            this.pushDefaultRoute = Objects.requireNonNull(pushDefaultRoute);
            return this;
        }
        @CustomType.Setter
        public Builder pushDnsServer(Boolean pushDnsServer) {
            this.pushDnsServer = Objects.requireNonNull(pushDnsServer);
            return this;
        }
        @CustomType.Setter
        public Builder rebindTimer(Integer rebindTimer) {
            this.rebindTimer = Objects.requireNonNull(rebindTimer);
            return this;
        }
        @CustomType.Setter
        public Builder renewTimer(Integer renewTimer) {
            this.renewTimer = Objects.requireNonNull(renewTimer);
            return this;
        }
        @CustomType.Setter
        public Builder subnet(String subnet) {
            this.subnet = Objects.requireNonNull(subnet);
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt);
            return this;
        }
        @CustomType.Setter
        public Builder validLifetime(Integer validLifetime) {
            this.validLifetime = Objects.requireNonNull(validLifetime);
            return this;
        }
        @CustomType.Setter
        public Builder zone(String zone) {
            this.zone = Objects.requireNonNull(zone);
            return this;
        }
        public GetVpcPublicGatewayDhcpResult build() {
            final var o = new GetVpcPublicGatewayDhcpResult();
            o.address = address;
            o.createdAt = createdAt;
            o.dhcpId = dhcpId;
            o.dnsLocalName = dnsLocalName;
            o.dnsSearches = dnsSearches;
            o.dnsServersOverrides = dnsServersOverrides;
            o.enableDynamic = enableDynamic;
            o.id = id;
            o.organizationId = organizationId;
            o.poolHigh = poolHigh;
            o.poolLow = poolLow;
            o.projectId = projectId;
            o.pushDefaultRoute = pushDefaultRoute;
            o.pushDnsServer = pushDnsServer;
            o.rebindTimer = rebindTimer;
            o.renewTimer = renewTimer;
            o.subnet = subnet;
            o.updatedAt = updatedAt;
            o.validLifetime = validLifetime;
            o.zone = zone;
            return o;
        }
    }
}
