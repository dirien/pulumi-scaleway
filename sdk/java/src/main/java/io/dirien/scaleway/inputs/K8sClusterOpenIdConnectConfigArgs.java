// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class K8sClusterOpenIdConnectConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final K8sClusterOpenIdConnectConfigArgs Empty = new K8sClusterOpenIdConnectConfigArgs();

    /**
     * A client id that all tokens must be issued for
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return A client id that all tokens must be issued for
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * JWT claim to use as the user&#39;s group
     * 
     */
    @Import(name="groupsClaims")
    private @Nullable Output<List<String>> groupsClaims;

    /**
     * @return JWT claim to use as the user&#39;s group
     * 
     */
    public Optional<Output<List<String>>> groupsClaims() {
        return Optional.ofNullable(this.groupsClaims);
    }

    /**
     * Prefix prepended to group claims
     * 
     */
    @Import(name="groupsPrefix")
    private @Nullable Output<String> groupsPrefix;

    /**
     * @return Prefix prepended to group claims
     * 
     */
    public Optional<Output<String>> groupsPrefix() {
        return Optional.ofNullable(this.groupsPrefix);
    }

    /**
     * URL of the provider which allows the API server to discover public signing keys
     * 
     */
    @Import(name="issuerUrl", required=true)
    private Output<String> issuerUrl;

    /**
     * @return URL of the provider which allows the API server to discover public signing keys
     * 
     */
    public Output<String> issuerUrl() {
        return this.issuerUrl;
    }

    /**
     * Multiple key=value pairs that describes a required claim in the ID Token
     * 
     */
    @Import(name="requiredClaims")
    private @Nullable Output<List<String>> requiredClaims;

    /**
     * @return Multiple key=value pairs that describes a required claim in the ID Token
     * 
     */
    public Optional<Output<List<String>>> requiredClaims() {
        return Optional.ofNullable(this.requiredClaims);
    }

    /**
     * JWT claim to use as the user name
     * 
     */
    @Import(name="usernameClaim")
    private @Nullable Output<String> usernameClaim;

    /**
     * @return JWT claim to use as the user name
     * 
     */
    public Optional<Output<String>> usernameClaim() {
        return Optional.ofNullable(this.usernameClaim);
    }

    /**
     * Prefix prepended to username
     * 
     */
    @Import(name="usernamePrefix")
    private @Nullable Output<String> usernamePrefix;

    /**
     * @return Prefix prepended to username
     * 
     */
    public Optional<Output<String>> usernamePrefix() {
        return Optional.ofNullable(this.usernamePrefix);
    }

    private K8sClusterOpenIdConnectConfigArgs() {}

    private K8sClusterOpenIdConnectConfigArgs(K8sClusterOpenIdConnectConfigArgs $) {
        this.clientId = $.clientId;
        this.groupsClaims = $.groupsClaims;
        this.groupsPrefix = $.groupsPrefix;
        this.issuerUrl = $.issuerUrl;
        this.requiredClaims = $.requiredClaims;
        this.usernameClaim = $.usernameClaim;
        this.usernamePrefix = $.usernamePrefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(K8sClusterOpenIdConnectConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private K8sClusterOpenIdConnectConfigArgs $;

        public Builder() {
            $ = new K8sClusterOpenIdConnectConfigArgs();
        }

        public Builder(K8sClusterOpenIdConnectConfigArgs defaults) {
            $ = new K8sClusterOpenIdConnectConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId A client id that all tokens must be issued for
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId A client id that all tokens must be issued for
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param groupsClaims JWT claim to use as the user&#39;s group
         * 
         * @return builder
         * 
         */
        public Builder groupsClaims(@Nullable Output<List<String>> groupsClaims) {
            $.groupsClaims = groupsClaims;
            return this;
        }

        /**
         * @param groupsClaims JWT claim to use as the user&#39;s group
         * 
         * @return builder
         * 
         */
        public Builder groupsClaims(List<String> groupsClaims) {
            return groupsClaims(Output.of(groupsClaims));
        }

        /**
         * @param groupsClaims JWT claim to use as the user&#39;s group
         * 
         * @return builder
         * 
         */
        public Builder groupsClaims(String... groupsClaims) {
            return groupsClaims(List.of(groupsClaims));
        }

        /**
         * @param groupsPrefix Prefix prepended to group claims
         * 
         * @return builder
         * 
         */
        public Builder groupsPrefix(@Nullable Output<String> groupsPrefix) {
            $.groupsPrefix = groupsPrefix;
            return this;
        }

        /**
         * @param groupsPrefix Prefix prepended to group claims
         * 
         * @return builder
         * 
         */
        public Builder groupsPrefix(String groupsPrefix) {
            return groupsPrefix(Output.of(groupsPrefix));
        }

        /**
         * @param issuerUrl URL of the provider which allows the API server to discover public signing keys
         * 
         * @return builder
         * 
         */
        public Builder issuerUrl(Output<String> issuerUrl) {
            $.issuerUrl = issuerUrl;
            return this;
        }

        /**
         * @param issuerUrl URL of the provider which allows the API server to discover public signing keys
         * 
         * @return builder
         * 
         */
        public Builder issuerUrl(String issuerUrl) {
            return issuerUrl(Output.of(issuerUrl));
        }

        /**
         * @param requiredClaims Multiple key=value pairs that describes a required claim in the ID Token
         * 
         * @return builder
         * 
         */
        public Builder requiredClaims(@Nullable Output<List<String>> requiredClaims) {
            $.requiredClaims = requiredClaims;
            return this;
        }

        /**
         * @param requiredClaims Multiple key=value pairs that describes a required claim in the ID Token
         * 
         * @return builder
         * 
         */
        public Builder requiredClaims(List<String> requiredClaims) {
            return requiredClaims(Output.of(requiredClaims));
        }

        /**
         * @param requiredClaims Multiple key=value pairs that describes a required claim in the ID Token
         * 
         * @return builder
         * 
         */
        public Builder requiredClaims(String... requiredClaims) {
            return requiredClaims(List.of(requiredClaims));
        }

        /**
         * @param usernameClaim JWT claim to use as the user name
         * 
         * @return builder
         * 
         */
        public Builder usernameClaim(@Nullable Output<String> usernameClaim) {
            $.usernameClaim = usernameClaim;
            return this;
        }

        /**
         * @param usernameClaim JWT claim to use as the user name
         * 
         * @return builder
         * 
         */
        public Builder usernameClaim(String usernameClaim) {
            return usernameClaim(Output.of(usernameClaim));
        }

        /**
         * @param usernamePrefix Prefix prepended to username
         * 
         * @return builder
         * 
         */
        public Builder usernamePrefix(@Nullable Output<String> usernamePrefix) {
            $.usernamePrefix = usernamePrefix;
            return this;
        }

        /**
         * @param usernamePrefix Prefix prepended to username
         * 
         * @return builder
         * 
         */
        public Builder usernamePrefix(String usernamePrefix) {
            return usernamePrefix(Output.of(usernamePrefix));
        }

        public K8sClusterOpenIdConnectConfigArgs build() {
            $.clientId = Objects.requireNonNull($.clientId, "expected parameter 'clientId' to be non-null");
            $.issuerUrl = Objects.requireNonNull($.issuerUrl, "expected parameter 'issuerUrl' to be non-null");
            return $;
        }
    }

}
