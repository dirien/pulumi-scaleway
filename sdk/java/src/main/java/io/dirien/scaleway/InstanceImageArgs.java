// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceImageArgs Empty = new InstanceImageArgs();

    /**
     * List of IDs of the snapshots of the additional volumes to be attached to the image.
     * 
     * &gt; **Important:** For now it is only possible to have 1 additional_volume.
     * 
     */
    @Import(name="additionalVolumeIds")
    private @Nullable Output<String> additionalVolumeIds;

    /**
     * @return List of IDs of the snapshots of the additional volumes to be attached to the image.
     * 
     * &gt; **Important:** For now it is only possible to have 1 additional_volume.
     * 
     */
    public Optional<Output<String>> additionalVolumeIds() {
        return Optional.ofNullable(this.additionalVolumeIds);
    }

    /**
     * The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.
     * 
     */
    @Import(name="architecture")
    private @Nullable Output<String> architecture;

    /**
     * @return The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.
     * 
     */
    public Optional<Output<String>> architecture() {
        return Optional.ofNullable(this.architecture);
    }

    /**
     * The name of the image. If not provided it will be randomly generated.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the image. If not provided it will be randomly generated.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project the image is associated with.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The ID of the project the image is associated with.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Set to `true` if the image is public.
     * 
     */
    @Import(name="public")
    private @Nullable Output<Boolean> public_;

    /**
     * @return Set to `true` if the image is public.
     * 
     */
    public Optional<Output<Boolean>> public_() {
        return Optional.ofNullable(this.public_);
    }

    /**
     * The ID of the snapshot of the volume to be used as root in the image.
     * 
     */
    @Import(name="rootVolumeId", required=true)
    private Output<String> rootVolumeId;

    /**
     * @return The ID of the snapshot of the volume to be used as root in the image.
     * 
     */
    public Output<String> rootVolumeId() {
        return this.rootVolumeId;
    }

    /**
     * A list of tags to apply to the image.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of tags to apply to the image.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The zone in which the image should be created.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return The zone in which the image should be created.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private InstanceImageArgs() {}

    private InstanceImageArgs(InstanceImageArgs $) {
        this.additionalVolumeIds = $.additionalVolumeIds;
        this.architecture = $.architecture;
        this.name = $.name;
        this.projectId = $.projectId;
        this.public_ = $.public_;
        this.rootVolumeId = $.rootVolumeId;
        this.tags = $.tags;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceImageArgs $;

        public Builder() {
            $ = new InstanceImageArgs();
        }

        public Builder(InstanceImageArgs defaults) {
            $ = new InstanceImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalVolumeIds List of IDs of the snapshots of the additional volumes to be attached to the image.
         * 
         * &gt; **Important:** For now it is only possible to have 1 additional_volume.
         * 
         * @return builder
         * 
         */
        public Builder additionalVolumeIds(@Nullable Output<String> additionalVolumeIds) {
            $.additionalVolumeIds = additionalVolumeIds;
            return this;
        }

        /**
         * @param additionalVolumeIds List of IDs of the snapshots of the additional volumes to be attached to the image.
         * 
         * &gt; **Important:** For now it is only possible to have 1 additional_volume.
         * 
         * @return builder
         * 
         */
        public Builder additionalVolumeIds(String additionalVolumeIds) {
            return additionalVolumeIds(Output.of(additionalVolumeIds));
        }

        /**
         * @param architecture The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.
         * 
         * @return builder
         * 
         */
        public Builder architecture(@Nullable Output<String> architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param architecture The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.
         * 
         * @return builder
         * 
         */
        public Builder architecture(String architecture) {
            return architecture(Output.of(architecture));
        }

        /**
         * @param name The name of the image. If not provided it will be randomly generated.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the image. If not provided it will be randomly generated.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId The ID of the project the image is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project the image is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param public_ Set to `true` if the image is public.
         * 
         * @return builder
         * 
         */
        public Builder public_(@Nullable Output<Boolean> public_) {
            $.public_ = public_;
            return this;
        }

        /**
         * @param public_ Set to `true` if the image is public.
         * 
         * @return builder
         * 
         */
        public Builder public_(Boolean public_) {
            return public_(Output.of(public_));
        }

        /**
         * @param rootVolumeId The ID of the snapshot of the volume to be used as root in the image.
         * 
         * @return builder
         * 
         */
        public Builder rootVolumeId(Output<String> rootVolumeId) {
            $.rootVolumeId = rootVolumeId;
            return this;
        }

        /**
         * @param rootVolumeId The ID of the snapshot of the volume to be used as root in the image.
         * 
         * @return builder
         * 
         */
        public Builder rootVolumeId(String rootVolumeId) {
            return rootVolumeId(Output.of(rootVolumeId));
        }

        /**
         * @param tags A list of tags to apply to the image.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tags to apply to the image.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of tags to apply to the image.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param zone The zone in which the image should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The zone in which the image should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public InstanceImageArgs build() {
            $.rootVolumeId = Objects.requireNonNull($.rootVolumeId, "expected parameter 'rootVolumeId' to be non-null");
            return $;
        }
    }

}
