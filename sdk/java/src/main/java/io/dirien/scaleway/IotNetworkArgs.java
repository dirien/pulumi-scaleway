// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IotNetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final IotNetworkArgs Empty = new IotNetworkArgs();

    /**
     * The hub ID to which the Network will be attached to.
     * 
     */
    @Import(name="hubId", required=true)
    private Output<String> hubId;

    /**
     * @return The hub ID to which the Network will be attached to.
     * 
     */
    public Output<String> hubId() {
        return this.hubId;
    }

    /**
     * The name of the IoT Network you want to create (e.g. `my-net`).
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the IoT Network you want to create (e.g. `my-net`).
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The prefix that will be prepended to all topics for this Network.
     * 
     */
    @Import(name="topicPrefix")
    private @Nullable Output<String> topicPrefix;

    /**
     * @return The prefix that will be prepended to all topics for this Network.
     * 
     */
    public Optional<Output<String>> topicPrefix() {
        return Optional.ofNullable(this.topicPrefix);
    }

    /**
     * The network type to create (e.g. `sigfox`).
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The network type to create (e.g. `sigfox`).
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private IotNetworkArgs() {}

    private IotNetworkArgs(IotNetworkArgs $) {
        this.hubId = $.hubId;
        this.name = $.name;
        this.topicPrefix = $.topicPrefix;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IotNetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IotNetworkArgs $;

        public Builder() {
            $ = new IotNetworkArgs();
        }

        public Builder(IotNetworkArgs defaults) {
            $ = new IotNetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hubId The hub ID to which the Network will be attached to.
         * 
         * @return builder
         * 
         */
        public Builder hubId(Output<String> hubId) {
            $.hubId = hubId;
            return this;
        }

        /**
         * @param hubId The hub ID to which the Network will be attached to.
         * 
         * @return builder
         * 
         */
        public Builder hubId(String hubId) {
            return hubId(Output.of(hubId));
        }

        /**
         * @param name The name of the IoT Network you want to create (e.g. `my-net`).
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the IoT Network you want to create (e.g. `my-net`).
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param topicPrefix The prefix that will be prepended to all topics for this Network.
         * 
         * @return builder
         * 
         */
        public Builder topicPrefix(@Nullable Output<String> topicPrefix) {
            $.topicPrefix = topicPrefix;
            return this;
        }

        /**
         * @param topicPrefix The prefix that will be prepended to all topics for this Network.
         * 
         * @return builder
         * 
         */
        public Builder topicPrefix(String topicPrefix) {
            return topicPrefix(Output.of(topicPrefix));
        }

        /**
         * @param type The network type to create (e.g. `sigfox`).
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The network type to create (e.g. `sigfox`).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public IotNetworkArgs build() {
            $.hubId = Objects.requireNonNull($.hubId, "expected parameter 'hubId' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
