// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.dirien.scaleway.ContainerArgs;
import io.dirien.scaleway.Utilities;
import io.dirien.scaleway.inputs.ContainerState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates and manages Scaleway Container.
 * 
 * For more information consult the [documentation](https://www.scaleway.com/en/docs/faq/serverless-containers/).
 * 
 * For more details about the limitation check [containers-limitations](https://www.scaleway.com/en/docs/compute/containers/reference-content/containers-limitations/).
 * 
 * You can check also our [containers guide](https://www.scaleway.com/en/docs/compute/containers/concepts/).
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.ContainerNamespace;
 * import com.pulumi.scaleway.ContainerNamespaceArgs;
 * import com.pulumi.scaleway.Container;
 * import com.pulumi.scaleway.ContainerArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var mainContainerNamespace = new ContainerNamespace(&#34;mainContainerNamespace&#34;, ContainerNamespaceArgs.builder()        
 *             .description(&#34;test container&#34;)
 *             .build());
 * 
 *         var mainContainer = new Container(&#34;mainContainer&#34;, ContainerArgs.builder()        
 *             .description(&#34;environment variables test&#34;)
 *             .namespaceId(mainContainerNamespace.id())
 *             .registryImage(mainContainerNamespace.registryEndpoint().applyValue(registryEndpoint -&gt; String.format(&#34;%s/alpine:test&#34;, registryEndpoint)))
 *             .port(9997)
 *             .cpuLimit(140)
 *             .memoryLimit(256)
 *             .minScale(3)
 *             .maxScale(5)
 *             .timeout(600)
 *             .maxConcurrency(80)
 *             .privacy(&#34;private&#34;)
 *             .protocol(&#34;h2c&#34;)
 *             .deploy(true)
 *             .environmentVariables(Map.of(&#34;foo&#34;, &#34;var&#34;))
 *             .secretEnvironmentVariables(Map.of(&#34;key&#34;, &#34;secret&#34;))
 *             .build());
 * 
 *     }
 * }
 * ```
 * ## Protocols
 * 
 * The supported protocols are:
 * 
 * * `h2c`: HTTP/2 over TCP.
 * * `http1`: Hypertext Transfer Protocol.
 * 
 * **Important:** For details about the protocols check [this](https://httpd.apache.org/docs/2.4/howto/http2.html)
 * 
 * ## Privacy
 * 
 * By default, creating a container will make it `public`, meaning that anybody knowing the endpoint could execute it.
 * A container can be made `private` with the privacy parameter.
 * 
 * Please check our [authentication](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8) section
 * 
 * ## Memory and vCPUs configuration
 * 
 * The vCPU represents a portion or share of the underlying, physical CPU that is assigned to a particular virtual machine (VM).
 * 
 * You may decide how much computing resources to allocate to each container.
 * The `memory_limit` (in MB) must correspond with the right amount of vCPU.
 * 
 * **Important:** The right choice for your container&#39;s resources is very important, as you will be billed based on compute usage over time and the number of Containers executions.
 * 
 * Please check our [price](https://www.scaleway.com/en/docs/faq/serverless-containers/#prices) section for more details.
 * 
 * | Memory (in MB) | vCPU |
 * |----------------|------|
 * | 128            | 70m  |
 * | 256            | 140m |
 * | 512            | 280m |
 * | 1024           | 560m |
 * 
 * **Note:** 560mCPU accounts roughly for half of one CPU power of a Scaleway General Purpose instance
 * 
 * ## Import
 * 
 * Container can be imported using the `{region}/{id}`, e.g. bash
 * 
 * ```sh
 *  $ pulumi import scaleway:index/container:Container main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 * 
 */
@ResourceType(type="scaleway:index/container:Container")
public class Container extends com.pulumi.resources.CustomResource {
    /**
     * The amount of vCPU computing resources to allocate to each container. Defaults to 70.
     * 
     */
    @Export(name="cpuLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> cpuLimit;

    /**
     * @return The amount of vCPU computing resources to allocate to each container. Defaults to 70.
     * 
     */
    public Output<Integer> cpuLimit() {
        return this.cpuLimit;
    }
    /**
     * The cron status of the container.
     * 
     */
    @Export(name="cronStatus", refs={String.class}, tree="[0]")
    private Output<String> cronStatus;

    /**
     * @return The cron status of the container.
     * 
     */
    public Output<String> cronStatus() {
        return this.cronStatus;
    }
    /**
     * Boolean controlling whether the container is on a production environment.
     * 
     * Note that if you want to use your own configuration, you must consult our configuration [restrictions](https://www.scaleway.com/en/docs/compute/containers/reference-content/containers-limitations/#configuration-restrictions) section.
     * 
     */
    @Export(name="deploy", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deploy;

    /**
     * @return Boolean controlling whether the container is on a production environment.
     * 
     * Note that if you want to use your own configuration, you must consult our configuration [restrictions](https://www.scaleway.com/en/docs/compute/containers/reference-content/containers-limitations/#configuration-restrictions) section.
     * 
     */
    public Output<Optional<Boolean>> deploy() {
        return Codegen.optional(this.deploy);
    }
    /**
     * The description of the container.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the container.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The native domain name of the container
     * 
     */
    @Export(name="domainName", refs={String.class}, tree="[0]")
    private Output<String> domainName;

    /**
     * @return The native domain name of the container
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }
    /**
     * The [environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#environment-variables) variables of the container.
     * 
     */
    @Export(name="environmentVariables", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> environmentVariables;

    /**
     * @return The [environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#environment-variables) variables of the container.
     * 
     */
    public Output<Map<String,String>> environmentVariables() {
        return this.environmentVariables;
    }
    /**
     * The error message of the container.
     * 
     */
    @Export(name="errorMessage", refs={String.class}, tree="[0]")
    private Output<String> errorMessage;

    /**
     * @return The error message of the container.
     * 
     */
    public Output<String> errorMessage() {
        return this.errorMessage;
    }
    /**
     * HTTP traffic configuration
     * 
     */
    @Export(name="httpOption", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> httpOption;

    /**
     * @return HTTP traffic configuration
     * 
     */
    public Output<Optional<String>> httpOption() {
        return Codegen.optional(this.httpOption);
    }
    /**
     * The maximum number of simultaneous requests your container can handle at the same time. Defaults to 50.
     * 
     */
    @Export(name="maxConcurrency", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxConcurrency;

    /**
     * @return The maximum number of simultaneous requests your container can handle at the same time. Defaults to 50.
     * 
     */
    public Output<Integer> maxConcurrency() {
        return this.maxConcurrency;
    }
    /**
     * The maximum of number of instances this container can scale to. Default to 20.
     * 
     */
    @Export(name="maxScale", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxScale;

    /**
     * @return The maximum of number of instances this container can scale to. Default to 20.
     * 
     */
    public Output<Integer> maxScale() {
        return this.maxScale;
    }
    /**
     * The memory computing resources in MB to allocate to each container. Defaults to 128.
     * 
     */
    @Export(name="memoryLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> memoryLimit;

    /**
     * @return The memory computing resources in MB to allocate to each container. Defaults to 128.
     * 
     */
    public Output<Integer> memoryLimit() {
        return this.memoryLimit;
    }
    /**
     * The minimum of running container instances continuously. Defaults to 0.
     * 
     */
    @Export(name="minScale", refs={Integer.class}, tree="[0]")
    private Output<Integer> minScale;

    /**
     * @return The minimum of running container instances continuously. Defaults to 0.
     * 
     */
    public Output<Integer> minScale() {
        return this.minScale;
    }
    /**
     * The unique name of the container name.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The unique name of the container name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The container namespace ID of the container.
     * 
     * &gt; **Important** Updates to `name` will recreate the container.
     * 
     * The following arguments are optional:
     * 
     */
    @Export(name="namespaceId", refs={String.class}, tree="[0]")
    private Output<String> namespaceId;

    /**
     * @return The container namespace ID of the container.
     * 
     * &gt; **Important** Updates to `name` will recreate the container.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> namespaceId() {
        return this.namespaceId;
    }
    /**
     * The port to expose the container. Defaults to 8080.
     * 
     */
    @Export(name="port", refs={Integer.class}, tree="[0]")
    private Output<Integer> port;

    /**
     * @return The port to expose the container. Defaults to 8080.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }
    /**
     * The privacy type define the way to authenticate to your container. Please check our dedicated [section](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8).
     * 
     */
    @Export(name="privacy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> privacy;

    /**
     * @return The privacy type define the way to authenticate to your container. Please check our dedicated [section](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8).
     * 
     */
    public Output<Optional<String>> privacy() {
        return Codegen.optional(this.privacy);
    }
    /**
     * The communication [protocol](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8) http1 or h2c. Defaults to http1.
     * 
     */
    @Export(name="protocol", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> protocol;

    /**
     * @return The communication [protocol](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8) http1 or h2c. Defaults to http1.
     * 
     */
    public Output<Optional<String>> protocol() {
        return Codegen.optional(this.protocol);
    }
    /**
     * (Defaults to provider `region`) The region in which the container was created.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return (Defaults to provider `region`) The region in which the container was created.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * The registry image address. e.g: **&#34;rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE&#34;**.
     * 
     */
    @Export(name="registryImage", refs={String.class}, tree="[0]")
    private Output<String> registryImage;

    /**
     * @return The registry image address. e.g: **&#34;rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE&#34;**.
     * 
     */
    public Output<String> registryImage() {
        return this.registryImage;
    }
    /**
     * The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string
     * 
     */
    @Export(name="registrySha256", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> registrySha256;

    /**
     * @return The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string
     * 
     */
    public Output<Optional<String>> registrySha256() {
        return Codegen.optional(this.registrySha256);
    }
    /**
     * The [secret environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#secrets) variables of the container.
     * 
     */
    @Export(name="secretEnvironmentVariables", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> secretEnvironmentVariables;

    /**
     * @return The [secret environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#secrets) variables of the container.
     * 
     */
    public Output<Optional<Map<String,String>>> secretEnvironmentVariables() {
        return Codegen.optional(this.secretEnvironmentVariables);
    }
    /**
     * The container status.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The container status.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to 300s.
     * 
     */
    @Export(name="timeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> timeout;

    /**
     * @return The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to 300s.
     * 
     */
    public Output<Integer> timeout() {
        return this.timeout;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Container(String name) {
        this(name, ContainerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Container(String name, ContainerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Container(String name, ContainerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/container:Container", name, args == null ? ContainerArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Container(String name, Output<String> id, @Nullable ContainerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/container:Container", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "secretEnvironmentVariables"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Container get(String name, Output<String> id, @Nullable ContainerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Container(name, id, state, options);
    }
}
