// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.dirien.scaleway.InstanceSnapshotArgs;
import io.dirien.scaleway.Utilities;
import io.dirien.scaleway.inputs.InstanceSnapshotState;
import io.dirien.scaleway.outputs.InstanceSnapshotImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates and manages Scaleway Compute Snapshots.
 * For more information,
 * see [the documentation](https://developers.scaleway.com/en/products/instance/api/#snapshots-756fae).
 * 
 * ## Example
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.InstanceSnapshot;
 * import com.pulumi.scaleway.InstanceSnapshotArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var main = new InstanceSnapshot(&#34;main&#34;, InstanceSnapshotArgs.builder()        
 *             .volumeId(&#34;11111111-1111-1111-1111-111111111111&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Example with Unified type
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.InstanceVolume;
 * import com.pulumi.scaleway.InstanceVolumeArgs;
 * import com.pulumi.scaleway.InstanceServer;
 * import com.pulumi.scaleway.InstanceServerArgs;
 * import com.pulumi.scaleway.inputs.InstanceServerRootVolumeArgs;
 * import com.pulumi.scaleway.InstanceSnapshot;
 * import com.pulumi.scaleway.InstanceSnapshotArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var mainInstanceVolume = new InstanceVolume(&#34;mainInstanceVolume&#34;, InstanceVolumeArgs.builder()        
 *             .type(&#34;l_ssd&#34;)
 *             .sizeInGb(10)
 *             .build());
 * 
 *         var mainInstanceServer = new InstanceServer(&#34;mainInstanceServer&#34;, InstanceServerArgs.builder()        
 *             .image(&#34;ubuntu_jammy&#34;)
 *             .type(&#34;DEV1-S&#34;)
 *             .rootVolume(InstanceServerRootVolumeArgs.builder()
 *                 .sizeInGb(10)
 *                 .volumeType(&#34;l_ssd&#34;)
 *                 .build())
 *             .additionalVolumeIds(mainInstanceVolume.id())
 *             .build());
 * 
 *         var mainInstanceSnapshot = new InstanceSnapshot(&#34;mainInstanceSnapshot&#34;, InstanceSnapshotArgs.builder()        
 *             .volumeId(mainInstanceVolume.id())
 *             .type(&#34;unified&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(mainInstanceServer)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import a local qcow2 file
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.ObjectBucket;
 * import com.pulumi.scaleway.ObjectItem;
 * import com.pulumi.scaleway.ObjectItemArgs;
 * import com.pulumi.scaleway.InstanceSnapshot;
 * import com.pulumi.scaleway.InstanceSnapshotArgs;
 * import com.pulumi.scaleway.inputs.InstanceSnapshotImportArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var bucket = new ObjectBucket(&#34;bucket&#34;);
 * 
 *         var qcow = new ObjectItem(&#34;qcow&#34;, ObjectItemArgs.builder()        
 *             .bucket(bucket.name())
 *             .key(&#34;server.qcow2&#34;)
 *             .file(&#34;myqcow.qcow2&#34;)
 *             .build());
 * 
 *         var snapshot = new InstanceSnapshot(&#34;snapshot&#34;, InstanceSnapshotArgs.builder()        
 *             .type(&#34;unified&#34;)
 *             .import_(InstanceSnapshotImportArgs.builder()
 *                 .bucket(qcow.bucket())
 *                 .key(qcow.key())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Snapshots can be imported using the `{zone}/{id}`, e.g. bash
 * 
 * ```sh
 *  $ pulumi import scaleway:index/instanceSnapshot:InstanceSnapshot main fr-par-1/11111111-1111-1111-1111-111111111111
 * ```
 * 
 */
@ResourceType(type="scaleway:index/instanceSnapshot:InstanceSnapshot")
public class InstanceSnapshot extends com.pulumi.resources.CustomResource {
    /**
     * The snapshot creation time.
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return The snapshot creation time.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * Import a snapshot from a qcow2 file located in a bucket
     * 
     */
    @Export(name="import", refs={InstanceSnapshotImport.class}, tree="[0]")
    private Output</* @Nullable */ InstanceSnapshotImport> import_;

    /**
     * @return Import a snapshot from a qcow2 file located in a bucket
     * 
     */
    public Output<Optional<InstanceSnapshotImport>> import_() {
        return Codegen.optional(this.import_);
    }
    /**
     * The name of the snapshot. If not provided it will be randomly generated.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the snapshot. If not provided it will be randomly generated.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The organization ID the snapshot is associated with.
     * 
     */
    @Export(name="organizationId", refs={String.class}, tree="[0]")
    private Output<String> organizationId;

    /**
     * @return The organization ID the snapshot is associated with.
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }
    /**
     * `project_id`) The ID of the project the snapshot is
     * associated with.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return `project_id`) The ID of the project the snapshot is
     * associated with.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * (Optional) The size of the snapshot.
     * 
     */
    @Export(name="sizeInGb", refs={Integer.class}, tree="[0]")
    private Output<Integer> sizeInGb;

    /**
     * @return (Optional) The size of the snapshot.
     * 
     */
    public Output<Integer> sizeInGb() {
        return this.sizeInGb;
    }
    /**
     * A list of tags to apply to the snapshot.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return A list of tags to apply to the snapshot.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The snapshot&#39;s volume type.  The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD) and `unified`.
     * Updates to this field will recreate a new resource.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The snapshot&#39;s volume type.  The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD) and `unified`.
     * Updates to this field will recreate a new resource.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * The ID of the volume to take a snapshot from.
     * 
     */
    @Export(name="volumeId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> volumeId;

    /**
     * @return The ID of the volume to take a snapshot from.
     * 
     */
    public Output<Optional<String>> volumeId() {
        return Codegen.optional(this.volumeId);
    }
    /**
     * `zone`) The zone in which
     * the snapshot should be created.
     * 
     */
    @Export(name="zone", refs={String.class}, tree="[0]")
    private Output<String> zone;

    /**
     * @return `zone`) The zone in which
     * the snapshot should be created.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public InstanceSnapshot(String name) {
        this(name, InstanceSnapshotArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public InstanceSnapshot(String name, @Nullable InstanceSnapshotArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public InstanceSnapshot(String name, @Nullable InstanceSnapshotArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/instanceSnapshot:InstanceSnapshot", name, args == null ? InstanceSnapshotArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private InstanceSnapshot(String name, Output<String> id, @Nullable InstanceSnapshotState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/instanceSnapshot:InstanceSnapshot", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static InstanceSnapshot get(String name, Output<String> id, @Nullable InstanceSnapshotState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new InstanceSnapshot(name, id, state, options);
    }
}
