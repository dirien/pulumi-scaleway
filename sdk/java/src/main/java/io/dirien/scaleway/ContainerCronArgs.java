// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class ContainerCronArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerCronArgs Empty = new ContainerCronArgs();

    /**
     * The key-value mapping to define arguments that will be passed to your container’s event object
     * during
     * 
     */
    @Import(name="args", required=true)
    private Output<String> args;

    /**
     * @return The key-value mapping to define arguments that will be passed to your container’s event object
     * during
     * 
     */
    public Output<String> args() {
        return this.args;
    }

    /**
     * The container ID to link with your cron.
     * 
     */
    @Import(name="containerId", required=true)
    private Output<String> containerId;

    /**
     * @return The container ID to link with your cron.
     * 
     */
    public Output<String> containerId() {
        return this.containerId;
    }

    /**
     * Cron format string, e.g. @hourly, as schedule time of its jobs to be created and
     * executed.
     * 
     */
    @Import(name="schedule", required=true)
    private Output<String> schedule;

    /**
     * @return Cron format string, e.g. @hourly, as schedule time of its jobs to be created and
     * executed.
     * 
     */
    public Output<String> schedule() {
        return this.schedule;
    }

    private ContainerCronArgs() {}

    private ContainerCronArgs(ContainerCronArgs $) {
        this.args = $.args;
        this.containerId = $.containerId;
        this.schedule = $.schedule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerCronArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerCronArgs $;

        public Builder() {
            $ = new ContainerCronArgs();
        }

        public Builder(ContainerCronArgs defaults) {
            $ = new ContainerCronArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param args The key-value mapping to define arguments that will be passed to your container’s event object
         * during
         * 
         * @return builder
         * 
         */
        public Builder args(Output<String> args) {
            $.args = args;
            return this;
        }

        /**
         * @param args The key-value mapping to define arguments that will be passed to your container’s event object
         * during
         * 
         * @return builder
         * 
         */
        public Builder args(String args) {
            return args(Output.of(args));
        }

        /**
         * @param containerId The container ID to link with your cron.
         * 
         * @return builder
         * 
         */
        public Builder containerId(Output<String> containerId) {
            $.containerId = containerId;
            return this;
        }

        /**
         * @param containerId The container ID to link with your cron.
         * 
         * @return builder
         * 
         */
        public Builder containerId(String containerId) {
            return containerId(Output.of(containerId));
        }

        /**
         * @param schedule Cron format string, e.g. @hourly, as schedule time of its jobs to be created and
         * executed.
         * 
         * @return builder
         * 
         */
        public Builder schedule(Output<String> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule Cron format string, e.g. @hourly, as schedule time of its jobs to be created and
         * executed.
         * 
         * @return builder
         * 
         */
        public Builder schedule(String schedule) {
            return schedule(Output.of(schedule));
        }

        public ContainerCronArgs build() {
            $.args = Objects.requireNonNull($.args, "expected parameter 'args' to be non-null");
            $.containerId = Objects.requireNonNull($.containerId, "expected parameter 'containerId' to be non-null");
            $.schedule = Objects.requireNonNull($.schedule, "expected parameter 'schedule' to be non-null");
            return $;
        }
    }

}
