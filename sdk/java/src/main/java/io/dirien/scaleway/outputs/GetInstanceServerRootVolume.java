// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInstanceServerRootVolume {
    private Boolean boot;
    /**
     * @return Forces deletion of the root volume on instance termination.
     * 
     */
    private Boolean deleteOnTermination;
    /**
     * @return The server name. Only one of `name` and `server_id` should be specified.
     * 
     */
    private String name;
    /**
     * @return Size of the root volume in gigabytes.
     * 
     */
    private Integer sizeInGb;
    /**
     * @return The volume ID of the root volume of the server.
     * 
     */
    private String volumeId;
    private String volumeType;

    private GetInstanceServerRootVolume() {}
    public Boolean boot() {
        return this.boot;
    }
    /**
     * @return Forces deletion of the root volume on instance termination.
     * 
     */
    public Boolean deleteOnTermination() {
        return this.deleteOnTermination;
    }
    /**
     * @return The server name. Only one of `name` and `server_id` should be specified.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Size of the root volume in gigabytes.
     * 
     */
    public Integer sizeInGb() {
        return this.sizeInGb;
    }
    /**
     * @return The volume ID of the root volume of the server.
     * 
     */
    public String volumeId() {
        return this.volumeId;
    }
    public String volumeType() {
        return this.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceServerRootVolume defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean boot;
        private Boolean deleteOnTermination;
        private String name;
        private Integer sizeInGb;
        private String volumeId;
        private String volumeType;
        public Builder() {}
        public Builder(GetInstanceServerRootVolume defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.boot = defaults.boot;
    	      this.deleteOnTermination = defaults.deleteOnTermination;
    	      this.name = defaults.name;
    	      this.sizeInGb = defaults.sizeInGb;
    	      this.volumeId = defaults.volumeId;
    	      this.volumeType = defaults.volumeType;
        }

        @CustomType.Setter
        public Builder boot(Boolean boot) {
            this.boot = Objects.requireNonNull(boot);
            return this;
        }
        @CustomType.Setter
        public Builder deleteOnTermination(Boolean deleteOnTermination) {
            this.deleteOnTermination = Objects.requireNonNull(deleteOnTermination);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder sizeInGb(Integer sizeInGb) {
            this.sizeInGb = Objects.requireNonNull(sizeInGb);
            return this;
        }
        @CustomType.Setter
        public Builder volumeId(String volumeId) {
            this.volumeId = Objects.requireNonNull(volumeId);
            return this;
        }
        @CustomType.Setter
        public Builder volumeType(String volumeType) {
            this.volumeType = Objects.requireNonNull(volumeType);
            return this;
        }
        public GetInstanceServerRootVolume build() {
            final var o = new GetInstanceServerRootVolume();
            o.boot = boot;
            o.deleteOnTermination = deleteOnTermination;
            o.name = name;
            o.sizeInGb = sizeInGb;
            o.volumeId = volumeId;
            o.volumeType = volumeType;
            return o;
        }
    }
}
