// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerCronState extends com.pulumi.resources.ResourceArgs {

    public static final ContainerCronState Empty = new ContainerCronState();

    /**
     * The key-value mapping to define arguments that will be passed to your container’s event object
     * during
     * 
     */
    @Import(name="args")
    private @Nullable Output<String> args;

    /**
     * @return The key-value mapping to define arguments that will be passed to your container’s event object
     * during
     * 
     */
    public Optional<Output<String>> args() {
        return Optional.ofNullable(this.args);
    }

    /**
     * The container ID to link with your cron.
     * 
     */
    @Import(name="containerId")
    private @Nullable Output<String> containerId;

    /**
     * @return The container ID to link with your cron.
     * 
     */
    public Optional<Output<String>> containerId() {
        return Optional.ofNullable(this.containerId);
    }

    /**
     * (Defaults to provider `region`) The region
     * in where the job was created.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return (Defaults to provider `region`) The region
     * in where the job was created.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Cron format string, e.g. @hourly, as schedule time of its jobs to be created and
     * executed.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<String> schedule;

    /**
     * @return Cron format string, e.g. @hourly, as schedule time of its jobs to be created and
     * executed.
     * 
     */
    public Optional<Output<String>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * The cron status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The cron status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private ContainerCronState() {}

    private ContainerCronState(ContainerCronState $) {
        this.args = $.args;
        this.containerId = $.containerId;
        this.region = $.region;
        this.schedule = $.schedule;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerCronState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerCronState $;

        public Builder() {
            $ = new ContainerCronState();
        }

        public Builder(ContainerCronState defaults) {
            $ = new ContainerCronState(Objects.requireNonNull(defaults));
        }

        /**
         * @param args The key-value mapping to define arguments that will be passed to your container’s event object
         * during
         * 
         * @return builder
         * 
         */
        public Builder args(@Nullable Output<String> args) {
            $.args = args;
            return this;
        }

        /**
         * @param args The key-value mapping to define arguments that will be passed to your container’s event object
         * during
         * 
         * @return builder
         * 
         */
        public Builder args(String args) {
            return args(Output.of(args));
        }

        /**
         * @param containerId The container ID to link with your cron.
         * 
         * @return builder
         * 
         */
        public Builder containerId(@Nullable Output<String> containerId) {
            $.containerId = containerId;
            return this;
        }

        /**
         * @param containerId The container ID to link with your cron.
         * 
         * @return builder
         * 
         */
        public Builder containerId(String containerId) {
            return containerId(Output.of(containerId));
        }

        /**
         * @param region (Defaults to provider `region`) The region
         * in where the job was created.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region (Defaults to provider `region`) The region
         * in where the job was created.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param schedule Cron format string, e.g. @hourly, as schedule time of its jobs to be created and
         * executed.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<String> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule Cron format string, e.g. @hourly, as schedule time of its jobs to be created and
         * executed.
         * 
         * @return builder
         * 
         */
        public Builder schedule(String schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param status The cron status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The cron status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public ContainerCronState build() {
            return $;
        }
    }

}
