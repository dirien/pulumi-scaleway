// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceImageAdditionalVolume {
    /**
     * @return Date of the volume creation.
     * 
     */
    private @Nullable String creationDate;
    /**
     * @return The export URI of the volume.
     * 
     */
    private @Nullable String exportUri;
    /**
     * @return ID of the server containing the volume.
     * 
     */
    private @Nullable String id;
    /**
     * @return Date of volume latest update.
     * 
     */
    private @Nullable String modificationDate;
    /**
     * @return The name of the image. If not provided it will be randomly generated.
     * 
     */
    private @Nullable String name;
    /**
     * @return The organization ID the volume is associated with.
     * 
     */
    private @Nullable String organization;
    /**
     * @return ID of the project the volume is associated with
     * 
     */
    private @Nullable String project;
    /**
     * @return Description of the server containing the volume (in case the image is a backup from a server).
     * 
     */
    private @Nullable Map<String,String> server;
    /**
     * @return The size of the volume.
     * 
     */
    private @Nullable Integer size;
    /**
     * @return State of the volume.
     * 
     */
    private @Nullable String state;
    /**
     * @return A list of tags to apply to the image.
     * 
     */
    private @Nullable List<String> tags;
    /**
     * @return The type of volume, possible values are `l_ssd` and `b_ssd`.
     * 
     */
    private @Nullable String volumeType;
    /**
     * @return The zone in which the image should be created.
     * 
     */
    private @Nullable String zone;

    private InstanceImageAdditionalVolume() {}
    /**
     * @return Date of the volume creation.
     * 
     */
    public Optional<String> creationDate() {
        return Optional.ofNullable(this.creationDate);
    }
    /**
     * @return The export URI of the volume.
     * 
     */
    public Optional<String> exportUri() {
        return Optional.ofNullable(this.exportUri);
    }
    /**
     * @return ID of the server containing the volume.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Date of volume latest update.
     * 
     */
    public Optional<String> modificationDate() {
        return Optional.ofNullable(this.modificationDate);
    }
    /**
     * @return The name of the image. If not provided it will be randomly generated.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The organization ID the volume is associated with.
     * 
     */
    public Optional<String> organization() {
        return Optional.ofNullable(this.organization);
    }
    /**
     * @return ID of the project the volume is associated with
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    /**
     * @return Description of the server containing the volume (in case the image is a backup from a server).
     * 
     */
    public Map<String,String> server() {
        return this.server == null ? Map.of() : this.server;
    }
    /**
     * @return The size of the volume.
     * 
     */
    public Optional<Integer> size() {
        return Optional.ofNullable(this.size);
    }
    /**
     * @return State of the volume.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return A list of tags to apply to the image.
     * 
     */
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return The type of volume, possible values are `l_ssd` and `b_ssd`.
     * 
     */
    public Optional<String> volumeType() {
        return Optional.ofNullable(this.volumeType);
    }
    /**
     * @return The zone in which the image should be created.
     * 
     */
    public Optional<String> zone() {
        return Optional.ofNullable(this.zone);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceImageAdditionalVolume defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String creationDate;
        private @Nullable String exportUri;
        private @Nullable String id;
        private @Nullable String modificationDate;
        private @Nullable String name;
        private @Nullable String organization;
        private @Nullable String project;
        private @Nullable Map<String,String> server;
        private @Nullable Integer size;
        private @Nullable String state;
        private @Nullable List<String> tags;
        private @Nullable String volumeType;
        private @Nullable String zone;
        public Builder() {}
        public Builder(InstanceImageAdditionalVolume defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationDate = defaults.creationDate;
    	      this.exportUri = defaults.exportUri;
    	      this.id = defaults.id;
    	      this.modificationDate = defaults.modificationDate;
    	      this.name = defaults.name;
    	      this.organization = defaults.organization;
    	      this.project = defaults.project;
    	      this.server = defaults.server;
    	      this.size = defaults.size;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
    	      this.volumeType = defaults.volumeType;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder creationDate(@Nullable String creationDate) {
            this.creationDate = creationDate;
            return this;
        }
        @CustomType.Setter
        public Builder exportUri(@Nullable String exportUri) {
            this.exportUri = exportUri;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder modificationDate(@Nullable String modificationDate) {
            this.modificationDate = modificationDate;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder organization(@Nullable String organization) {
            this.organization = organization;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder server(@Nullable Map<String,String> server) {
            this.server = server;
            return this;
        }
        @CustomType.Setter
        public Builder size(@Nullable Integer size) {
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder volumeType(@Nullable String volumeType) {
            this.volumeType = volumeType;
            return this;
        }
        @CustomType.Setter
        public Builder zone(@Nullable String zone) {
            this.zone = zone;
            return this;
        }
        public InstanceImageAdditionalVolume build() {
            final var o = new InstanceImageAdditionalVolume();
            o.creationDate = creationDate;
            o.exportUri = exportUri;
            o.id = id;
            o.modificationDate = modificationDate;
            o.name = name;
            o.organization = organization;
            o.project = project;
            o.server = server;
            o.size = size;
            o.state = state;
            o.tags = tags;
            o.volumeType = volumeType;
            o.zone = zone;
            return o;
        }
    }
}
