// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.dirien.scaleway.InstanceImageArgs;
import io.dirien.scaleway.Utilities;
import io.dirien.scaleway.inputs.InstanceImageState;
import io.dirien.scaleway.outputs.InstanceImageAdditionalVolume;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates and manages Scaleway Compute Images.
 * For more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#images-41389b).
 * 
 * ## Example
 * 
 * ### From a volume
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.InstanceVolume;
 * import com.pulumi.scaleway.InstanceVolumeArgs;
 * import com.pulumi.scaleway.InstanceSnapshot;
 * import com.pulumi.scaleway.InstanceSnapshotArgs;
 * import com.pulumi.scaleway.InstanceImage;
 * import com.pulumi.scaleway.InstanceImageArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var volume = new InstanceVolume(&#34;volume&#34;, InstanceVolumeArgs.builder()        
 *             .type(&#34;b_ssd&#34;)
 *             .sizeInGb(20)
 *             .build());
 * 
 *         var volumeSnapshot = new InstanceSnapshot(&#34;volumeSnapshot&#34;, InstanceSnapshotArgs.builder()        
 *             .volumeId(volume.id())
 *             .build());
 * 
 *         var volumeImage = new InstanceImage(&#34;volumeImage&#34;, InstanceImageArgs.builder()        
 *             .rootVolumeId(volumeSnapshot.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ### From a server
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.InstanceServer;
 * import com.pulumi.scaleway.InstanceServerArgs;
 * import com.pulumi.scaleway.InstanceSnapshot;
 * import com.pulumi.scaleway.InstanceSnapshotArgs;
 * import com.pulumi.scaleway.InstanceImage;
 * import com.pulumi.scaleway.InstanceImageArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var server = new InstanceServer(&#34;server&#34;, InstanceServerArgs.builder()        
 *             .image(&#34;ubuntu_jammy&#34;)
 *             .type(&#34;DEV1-S&#34;)
 *             .build());
 * 
 *         var serverSnapshot = new InstanceSnapshot(&#34;serverSnapshot&#34;, InstanceSnapshotArgs.builder()        
 *             .volumeId(scaleway_instance_server.main().root_volume()[0].volume_id())
 *             .build());
 * 
 *         var serverImage = new InstanceImage(&#34;serverImage&#34;, InstanceImageArgs.builder()        
 *             .rootVolumeId(serverSnapshot.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ### With additional volumes
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.InstanceServer;
 * import com.pulumi.scaleway.InstanceServerArgs;
 * import com.pulumi.scaleway.InstanceVolume;
 * import com.pulumi.scaleway.InstanceVolumeArgs;
 * import com.pulumi.scaleway.InstanceSnapshot;
 * import com.pulumi.scaleway.InstanceSnapshotArgs;
 * import com.pulumi.scaleway.InstanceImage;
 * import com.pulumi.scaleway.InstanceImageArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var server = new InstanceServer(&#34;server&#34;, InstanceServerArgs.builder()        
 *             .image(&#34;ubuntu_jammy&#34;)
 *             .type(&#34;DEV1-S&#34;)
 *             .build());
 * 
 *         var volume = new InstanceVolume(&#34;volume&#34;, InstanceVolumeArgs.builder()        
 *             .type(&#34;b_ssd&#34;)
 *             .sizeInGb(20)
 *             .build());
 * 
 *         var volumeSnapshot = new InstanceSnapshot(&#34;volumeSnapshot&#34;, InstanceSnapshotArgs.builder()        
 *             .volumeId(volume.id())
 *             .build());
 * 
 *         var serverSnapshot = new InstanceSnapshot(&#34;serverSnapshot&#34;, InstanceSnapshotArgs.builder()        
 *             .volumeId(scaleway_instance_server.main().root_volume()[0].volume_id())
 *             .build());
 * 
 *         var image = new InstanceImage(&#34;image&#34;, InstanceImageArgs.builder()        
 *             .rootVolumeId(serverSnapshot.id())
 *             .additionalVolumes(volumeSnapshot.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Images can be imported using the `{zone}/{id}`, e.g. bash
 * 
 * ```sh
 *  $ pulumi import scaleway:index/instanceImage:InstanceImage main fr-par-1/11111111-1111-1111-1111-111111111111
 * ```
 * 
 */
@ResourceType(type="scaleway:index/instanceImage:InstanceImage")
public class InstanceImage extends com.pulumi.resources.CustomResource {
    /**
     * List of IDs of the snapshots of the additional volumes to be attached to the image.
     * 
     */
    @Export(name="additionalVolumeIds", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> additionalVolumeIds;

    /**
     * @return List of IDs of the snapshots of the additional volumes to be attached to the image.
     * 
     */
    public Output<Optional<String>> additionalVolumeIds() {
        return Codegen.optional(this.additionalVolumeIds);
    }
    /**
     * The description of the extra volumes attached to the image.
     * 
     */
    @Export(name="additionalVolumes", refs={List.class,InstanceImageAdditionalVolume.class}, tree="[0,1]")
    private Output<List<InstanceImageAdditionalVolume>> additionalVolumes;

    /**
     * @return The description of the extra volumes attached to the image.
     * 
     */
    public Output<List<InstanceImageAdditionalVolume>> additionalVolumes() {
        return this.additionalVolumes;
    }
    /**
     * The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.
     * 
     */
    @Export(name="architecture", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> architecture;

    /**
     * @return The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.
     * 
     */
    public Output<Optional<String>> architecture() {
        return Codegen.optional(this.architecture);
    }
    /**
     * Date of the volume creation.
     * 
     */
    @Export(name="creationDate", refs={String.class}, tree="[0]")
    private Output<String> creationDate;

    /**
     * @return Date of the volume creation.
     * 
     */
    public Output<String> creationDate() {
        return this.creationDate;
    }
    /**
     * ID of the server the image is based on (in case it is a backup).
     * 
     */
    @Export(name="fromServerId", refs={String.class}, tree="[0]")
    private Output<String> fromServerId;

    /**
     * @return ID of the server the image is based on (in case it is a backup).
     * 
     */
    public Output<String> fromServerId() {
        return this.fromServerId;
    }
    /**
     * Date of volume latest update.
     * 
     */
    @Export(name="modificationDate", refs={String.class}, tree="[0]")
    private Output<String> modificationDate;

    /**
     * @return Date of volume latest update.
     * 
     */
    public Output<String> modificationDate() {
        return this.modificationDate;
    }
    /**
     * The name of the image. If not provided it will be randomly generated.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the image. If not provided it will be randomly generated.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The organization ID the image is associated with.
     * 
     */
    @Export(name="organizationId", refs={String.class}, tree="[0]")
    private Output<String> organizationId;

    /**
     * @return The organization ID the image is associated with.
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }
    /**
     * The ID of the project the image is associated with.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return The ID of the project the image is associated with.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Set to `true` if the image is public.
     * 
     */
    @Export(name="public", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> public_;

    /**
     * @return Set to `true` if the image is public.
     * 
     */
    public Output<Optional<Boolean>> public_() {
        return Codegen.optional(this.public_);
    }
    /**
     * The ID of the snapshot of the volume to be used as root in the image.
     * 
     */
    @Export(name="rootVolumeId", refs={String.class}, tree="[0]")
    private Output<String> rootVolumeId;

    /**
     * @return The ID of the snapshot of the volume to be used as root in the image.
     * 
     */
    public Output<String> rootVolumeId() {
        return this.rootVolumeId;
    }
    /**
     * State of the volume.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return State of the volume.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * A list of tags to apply to the image.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return A list of tags to apply to the image.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The zone in which the image should be created.
     * 
     */
    @Export(name="zone", refs={String.class}, tree="[0]")
    private Output<String> zone;

    /**
     * @return The zone in which the image should be created.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public InstanceImage(String name) {
        this(name, InstanceImageArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public InstanceImage(String name, InstanceImageArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public InstanceImage(String name, InstanceImageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/instanceImage:InstanceImage", name, args == null ? InstanceImageArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private InstanceImage(String name, Output<String> id, @Nullable InstanceImageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/instanceImage:InstanceImage", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static InstanceImage get(String name, Output<String> id, @Nullable InstanceImageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new InstanceImage(name, id, state, options);
    }
}
