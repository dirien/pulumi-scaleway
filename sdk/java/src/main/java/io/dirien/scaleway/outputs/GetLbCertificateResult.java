// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.outputs;

import com.pulumi.core.annotations.CustomType;
import io.dirien.scaleway.outputs.GetLbCertificateCustomCertificate;
import io.dirien.scaleway.outputs.GetLbCertificateLetsencrypt;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLbCertificateResult {
    private @Nullable String certificateId;
    private String commonName;
    private List<GetLbCertificateCustomCertificate> customCertificates;
    private String fingerprint;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String lbId;
    private List<GetLbCertificateLetsencrypt> letsencrypts;
    private @Nullable String name;
    private String notValidAfter;
    private String notValidBefore;
    private String status;
    private List<String> subjectAlternativeNames;

    private GetLbCertificateResult() {}
    public Optional<String> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }
    public String commonName() {
        return this.commonName;
    }
    public List<GetLbCertificateCustomCertificate> customCertificates() {
        return this.customCertificates;
    }
    public String fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> lbId() {
        return Optional.ofNullable(this.lbId);
    }
    public List<GetLbCertificateLetsencrypt> letsencrypts() {
        return this.letsencrypts;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public String notValidAfter() {
        return this.notValidAfter;
    }
    public String notValidBefore() {
        return this.notValidBefore;
    }
    public String status() {
        return this.status;
    }
    public List<String> subjectAlternativeNames() {
        return this.subjectAlternativeNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLbCertificateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String certificateId;
        private String commonName;
        private List<GetLbCertificateCustomCertificate> customCertificates;
        private String fingerprint;
        private String id;
        private @Nullable String lbId;
        private List<GetLbCertificateLetsencrypt> letsencrypts;
        private @Nullable String name;
        private String notValidAfter;
        private String notValidBefore;
        private String status;
        private List<String> subjectAlternativeNames;
        public Builder() {}
        public Builder(GetLbCertificateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateId = defaults.certificateId;
    	      this.commonName = defaults.commonName;
    	      this.customCertificates = defaults.customCertificates;
    	      this.fingerprint = defaults.fingerprint;
    	      this.id = defaults.id;
    	      this.lbId = defaults.lbId;
    	      this.letsencrypts = defaults.letsencrypts;
    	      this.name = defaults.name;
    	      this.notValidAfter = defaults.notValidAfter;
    	      this.notValidBefore = defaults.notValidBefore;
    	      this.status = defaults.status;
    	      this.subjectAlternativeNames = defaults.subjectAlternativeNames;
        }

        @CustomType.Setter
        public Builder certificateId(@Nullable String certificateId) {
            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder commonName(String commonName) {
            this.commonName = Objects.requireNonNull(commonName);
            return this;
        }
        @CustomType.Setter
        public Builder customCertificates(List<GetLbCertificateCustomCertificate> customCertificates) {
            this.customCertificates = Objects.requireNonNull(customCertificates);
            return this;
        }
        public Builder customCertificates(GetLbCertificateCustomCertificate... customCertificates) {
            return customCertificates(List.of(customCertificates));
        }
        @CustomType.Setter
        public Builder fingerprint(String fingerprint) {
            this.fingerprint = Objects.requireNonNull(fingerprint);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lbId(@Nullable String lbId) {
            this.lbId = lbId;
            return this;
        }
        @CustomType.Setter
        public Builder letsencrypts(List<GetLbCertificateLetsencrypt> letsencrypts) {
            this.letsencrypts = Objects.requireNonNull(letsencrypts);
            return this;
        }
        public Builder letsencrypts(GetLbCertificateLetsencrypt... letsencrypts) {
            return letsencrypts(List.of(letsencrypts));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notValidAfter(String notValidAfter) {
            this.notValidAfter = Objects.requireNonNull(notValidAfter);
            return this;
        }
        @CustomType.Setter
        public Builder notValidBefore(String notValidBefore) {
            this.notValidBefore = Objects.requireNonNull(notValidBefore);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder subjectAlternativeNames(List<String> subjectAlternativeNames) {
            this.subjectAlternativeNames = Objects.requireNonNull(subjectAlternativeNames);
            return this;
        }
        public Builder subjectAlternativeNames(String... subjectAlternativeNames) {
            return subjectAlternativeNames(List.of(subjectAlternativeNames));
        }
        public GetLbCertificateResult build() {
            final var o = new GetLbCertificateResult();
            o.certificateId = certificateId;
            o.commonName = commonName;
            o.customCertificates = customCertificates;
            o.fingerprint = fingerprint;
            o.id = id;
            o.lbId = lbId;
            o.letsencrypts = letsencrypts;
            o.name = name;
            o.notValidAfter = notValidAfter;
            o.notValidBefore = notValidBefore;
            o.status = status;
            o.subjectAlternativeNames = subjectAlternativeNames;
            return o;
        }
    }
}
