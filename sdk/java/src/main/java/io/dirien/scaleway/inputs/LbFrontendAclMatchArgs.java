// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LbFrontendAclMatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final LbFrontendAclMatchArgs Empty = new LbFrontendAclMatchArgs();

    /**
     * The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
     * It extracts the request&#39;s URL path, which starts at the first slash and ends before the question mark (without the host part).
     * Possible values are: `acl_http_filter_none`, `path_begin`, `path_end`, `http_header_match` or `regex`.
     * 
     */
    @Import(name="httpFilter")
    private @Nullable Output<String> httpFilter;

    /**
     * @return The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
     * It extracts the request&#39;s URL path, which starts at the first slash and ends before the question mark (without the host part).
     * Possible values are: `acl_http_filter_none`, `path_begin`, `path_end`, `http_header_match` or `regex`.
     * 
     */
    public Optional<Output<String>> httpFilter() {
        return Optional.ofNullable(this.httpFilter);
    }

    @Import(name="httpFilterOption")
    private @Nullable Output<String> httpFilterOption;

    public Optional<Output<String>> httpFilterOption() {
        return Optional.ofNullable(this.httpFilterOption);
    }

    /**
     * A list of possible values to match for the given HTTP filter.
     * Keep in mind that in the case of `http_header_match` the HTTP header field name is case-insensitive.
     * 
     */
    @Import(name="httpFilterValues")
    private @Nullable Output<List<String>> httpFilterValues;

    /**
     * @return A list of possible values to match for the given HTTP filter.
     * Keep in mind that in the case of `http_header_match` the HTTP header field name is case-insensitive.
     * 
     */
    public Optional<Output<List<String>>> httpFilterValues() {
        return Optional.ofNullable(this.httpFilterValues);
    }

    /**
     * If set to `true`, the condition will be of type &#34;unless&#34;.
     * 
     */
    @Import(name="invert")
    private @Nullable Output<Boolean> invert;

    /**
     * @return If set to `true`, the condition will be of type &#34;unless&#34;.
     * 
     */
    public Optional<Output<Boolean>> invert() {
        return Optional.ofNullable(this.invert);
    }

    /**
     * A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
     * 
     */
    @Import(name="ipSubnets")
    private @Nullable Output<List<String>> ipSubnets;

    /**
     * @return A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
     * 
     */
    public Optional<Output<List<String>>> ipSubnets() {
        return Optional.ofNullable(this.ipSubnets);
    }

    private LbFrontendAclMatchArgs() {}

    private LbFrontendAclMatchArgs(LbFrontendAclMatchArgs $) {
        this.httpFilter = $.httpFilter;
        this.httpFilterOption = $.httpFilterOption;
        this.httpFilterValues = $.httpFilterValues;
        this.invert = $.invert;
        this.ipSubnets = $.ipSubnets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LbFrontendAclMatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LbFrontendAclMatchArgs $;

        public Builder() {
            $ = new LbFrontendAclMatchArgs();
        }

        public Builder(LbFrontendAclMatchArgs defaults) {
            $ = new LbFrontendAclMatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param httpFilter The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
         * It extracts the request&#39;s URL path, which starts at the first slash and ends before the question mark (without the host part).
         * Possible values are: `acl_http_filter_none`, `path_begin`, `path_end`, `http_header_match` or `regex`.
         * 
         * @return builder
         * 
         */
        public Builder httpFilter(@Nullable Output<String> httpFilter) {
            $.httpFilter = httpFilter;
            return this;
        }

        /**
         * @param httpFilter The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
         * It extracts the request&#39;s URL path, which starts at the first slash and ends before the question mark (without the host part).
         * Possible values are: `acl_http_filter_none`, `path_begin`, `path_end`, `http_header_match` or `regex`.
         * 
         * @return builder
         * 
         */
        public Builder httpFilter(String httpFilter) {
            return httpFilter(Output.of(httpFilter));
        }

        public Builder httpFilterOption(@Nullable Output<String> httpFilterOption) {
            $.httpFilterOption = httpFilterOption;
            return this;
        }

        public Builder httpFilterOption(String httpFilterOption) {
            return httpFilterOption(Output.of(httpFilterOption));
        }

        /**
         * @param httpFilterValues A list of possible values to match for the given HTTP filter.
         * Keep in mind that in the case of `http_header_match` the HTTP header field name is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder httpFilterValues(@Nullable Output<List<String>> httpFilterValues) {
            $.httpFilterValues = httpFilterValues;
            return this;
        }

        /**
         * @param httpFilterValues A list of possible values to match for the given HTTP filter.
         * Keep in mind that in the case of `http_header_match` the HTTP header field name is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder httpFilterValues(List<String> httpFilterValues) {
            return httpFilterValues(Output.of(httpFilterValues));
        }

        /**
         * @param httpFilterValues A list of possible values to match for the given HTTP filter.
         * Keep in mind that in the case of `http_header_match` the HTTP header field name is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder httpFilterValues(String... httpFilterValues) {
            return httpFilterValues(List.of(httpFilterValues));
        }

        /**
         * @param invert If set to `true`, the condition will be of type &#34;unless&#34;.
         * 
         * @return builder
         * 
         */
        public Builder invert(@Nullable Output<Boolean> invert) {
            $.invert = invert;
            return this;
        }

        /**
         * @param invert If set to `true`, the condition will be of type &#34;unless&#34;.
         * 
         * @return builder
         * 
         */
        public Builder invert(Boolean invert) {
            return invert(Output.of(invert));
        }

        /**
         * @param ipSubnets A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
         * 
         * @return builder
         * 
         */
        public Builder ipSubnets(@Nullable Output<List<String>> ipSubnets) {
            $.ipSubnets = ipSubnets;
            return this;
        }

        /**
         * @param ipSubnets A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
         * 
         * @return builder
         * 
         */
        public Builder ipSubnets(List<String> ipSubnets) {
            return ipSubnets(Output.of(ipSubnets));
        }

        /**
         * @param ipSubnets A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
         * 
         * @return builder
         * 
         */
        public Builder ipSubnets(String... ipSubnets) {
            return ipSubnets(List.of(ipSubnets));
        }

        public LbFrontendAclMatchArgs build() {
            return $;
        }
    }

}
