// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDomainRecordPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDomainRecordPlainArgs Empty = new GetDomainRecordPlainArgs();

    /**
     * The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
     * Cannot be used with `record_id`.
     * 
     */
    @Import(name="data")
    private @Nullable String data;

    /**
     * @return The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
     * Cannot be used with `record_id`.
     * 
     */
    public Optional<String> data() {
        return Optional.ofNullable(this.data);
    }

    /**
     * The IP address.
     * 
     */
    @Import(name="dnsZone")
    private @Nullable String dnsZone;

    /**
     * @return The IP address.
     * 
     */
    public Optional<String> dnsZone() {
        return Optional.ofNullable(this.dnsZone);
    }

    /**
     * The name of the record (can be an empty string for a root record).
     * Cannot be used with `record_id`.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the record (can be an empty string for a root record).
     * Cannot be used with `record_id`.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The record ID.
     * Cannot be used with `name`, `type` and `data`.
     * 
     */
    @Import(name="recordId")
    private @Nullable String recordId;

    /**
     * @return The record ID.
     * Cannot be used with `name`, `type` and `data`.
     * 
     */
    public Optional<String> recordId() {
        return Optional.ofNullable(this.recordId);
    }

    /**
     * The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
     * Cannot be used with `record_id`.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
     * Cannot be used with `record_id`.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private GetDomainRecordPlainArgs() {}

    private GetDomainRecordPlainArgs(GetDomainRecordPlainArgs $) {
        this.data = $.data;
        this.dnsZone = $.dnsZone;
        this.name = $.name;
        this.recordId = $.recordId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDomainRecordPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDomainRecordPlainArgs $;

        public Builder() {
            $ = new GetDomainRecordPlainArgs();
        }

        public Builder(GetDomainRecordPlainArgs defaults) {
            $ = new GetDomainRecordPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param data The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
         * Cannot be used with `record_id`.
         * 
         * @return builder
         * 
         */
        public Builder data(@Nullable String data) {
            $.data = data;
            return this;
        }

        /**
         * @param dnsZone The IP address.
         * 
         * @return builder
         * 
         */
        public Builder dnsZone(@Nullable String dnsZone) {
            $.dnsZone = dnsZone;
            return this;
        }

        /**
         * @param name The name of the record (can be an empty string for a root record).
         * Cannot be used with `record_id`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param recordId The record ID.
         * Cannot be used with `name`, `type` and `data`.
         * 
         * @return builder
         * 
         */
        public Builder recordId(@Nullable String recordId) {
            $.recordId = recordId;
            return this;
        }

        /**
         * @param type The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
         * Cannot be used with `record_id`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public GetDomainRecordPlainArgs build() {
            return $;
        }
    }

}
