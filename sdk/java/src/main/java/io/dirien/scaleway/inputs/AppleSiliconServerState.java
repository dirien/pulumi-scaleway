// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppleSiliconServerState extends com.pulumi.resources.ResourceArgs {

    public static final AppleSiliconServerState Empty = new AppleSiliconServerState();

    /**
     * The date and time of the creation of the server
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The date and time of the creation of the server
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The minimal date and time on which you can delete this server due to Apple licence
     * 
     */
    @Import(name="deletableAt")
    private @Nullable Output<String> deletableAt;

    /**
     * @return The minimal date and time on which you can delete this server due to Apple licence
     * 
     */
    public Optional<Output<String>> deletableAt() {
        return Optional.ofNullable(this.deletableAt);
    }

    /**
     * IPv4 address of the server
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return IPv4 address of the server
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * Name of the server
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the server
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The organization_id you want to attach the resource to
     * 
     */
    @Import(name="organizationId")
    private @Nullable Output<String> organizationId;

    /**
     * @return The organization_id you want to attach the resource to
     * 
     */
    public Optional<Output<String>> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    /**
     * The project_id you want to attach the resource to
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The project_id you want to attach the resource to
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The state of the server
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the server
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Type of the server
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of the server
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The date and time of the last update of the server
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return The date and time of the last update of the server
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * VNC url use to connect remotely to the desktop GUI
     * 
     */
    @Import(name="vncUrl")
    private @Nullable Output<String> vncUrl;

    /**
     * @return VNC url use to connect remotely to the desktop GUI
     * 
     */
    public Optional<Output<String>> vncUrl() {
        return Optional.ofNullable(this.vncUrl);
    }

    /**
     * The zone you want to attach the resource to
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return The zone you want to attach the resource to
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private AppleSiliconServerState() {}

    private AppleSiliconServerState(AppleSiliconServerState $) {
        this.createdAt = $.createdAt;
        this.deletableAt = $.deletableAt;
        this.ip = $.ip;
        this.name = $.name;
        this.organizationId = $.organizationId;
        this.projectId = $.projectId;
        this.state = $.state;
        this.type = $.type;
        this.updatedAt = $.updatedAt;
        this.vncUrl = $.vncUrl;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppleSiliconServerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppleSiliconServerState $;

        public Builder() {
            $ = new AppleSiliconServerState();
        }

        public Builder(AppleSiliconServerState defaults) {
            $ = new AppleSiliconServerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt The date and time of the creation of the server
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The date and time of the creation of the server
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param deletableAt The minimal date and time on which you can delete this server due to Apple licence
         * 
         * @return builder
         * 
         */
        public Builder deletableAt(@Nullable Output<String> deletableAt) {
            $.deletableAt = deletableAt;
            return this;
        }

        /**
         * @param deletableAt The minimal date and time on which you can delete this server due to Apple licence
         * 
         * @return builder
         * 
         */
        public Builder deletableAt(String deletableAt) {
            return deletableAt(Output.of(deletableAt));
        }

        /**
         * @param ip IPv4 address of the server
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip IPv4 address of the server
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param name Name of the server
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the server
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param organizationId The organization_id you want to attach the resource to
         * 
         * @return builder
         * 
         */
        public Builder organizationId(@Nullable Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId The organization_id you want to attach the resource to
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param projectId The project_id you want to attach the resource to
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project_id you want to attach the resource to
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param state The state of the server
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the server
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param type Type of the server
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the server
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param updatedAt The date and time of the last update of the server
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt The date and time of the last update of the server
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param vncUrl VNC url use to connect remotely to the desktop GUI
         * 
         * @return builder
         * 
         */
        public Builder vncUrl(@Nullable Output<String> vncUrl) {
            $.vncUrl = vncUrl;
            return this;
        }

        /**
         * @param vncUrl VNC url use to connect remotely to the desktop GUI
         * 
         * @return builder
         * 
         */
        public Builder vncUrl(String vncUrl) {
            return vncUrl(Output.of(vncUrl));
        }

        /**
         * @param zone The zone you want to attach the resource to
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The zone you want to attach the resource to
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public AppleSiliconServerState build() {
            return $;
        }
    }

}
