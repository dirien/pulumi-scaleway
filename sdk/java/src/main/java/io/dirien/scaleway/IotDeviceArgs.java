// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.dirien.scaleway.inputs.IotDeviceCertificateArgs;
import io.dirien.scaleway.inputs.IotDeviceMessageFiltersArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IotDeviceArgs extends com.pulumi.resources.ResourceArgs {

    public static final IotDeviceArgs Empty = new IotDeviceArgs();

    /**
     * Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.
     * 
     */
    @Import(name="allowInsecure")
    private @Nullable Output<Boolean> allowInsecure;

    /**
     * @return Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.
     * 
     */
    public Optional<Output<Boolean>> allowInsecure() {
        return Optional.ofNullable(this.allowInsecure);
    }

    /**
     * Allow more than one simultaneous connection using the same device credentials.
     * 
     */
    @Import(name="allowMultipleConnections")
    private @Nullable Output<Boolean> allowMultipleConnections;

    /**
     * @return Allow more than one simultaneous connection using the same device credentials.
     * 
     */
    public Optional<Output<Boolean>> allowMultipleConnections() {
        return Optional.ofNullable(this.allowMultipleConnections);
    }

    /**
     * The certificate bundle of the device.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<IotDeviceCertificateArgs> certificate;

    /**
     * @return The certificate bundle of the device.
     * 
     */
    public Optional<Output<IotDeviceCertificateArgs>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * The description of the IoT device (e.g. `living room`).
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the IoT device (e.g. `living room`).
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the hub on which this device will be created.
     * 
     */
    @Import(name="hubId", required=true)
    private Output<String> hubId;

    /**
     * @return The ID of the hub on which this device will be created.
     * 
     */
    public Output<String> hubId() {
        return this.hubId;
    }

    /**
     * Rules that define which messages are authorized or denied based on their topic.
     * 
     */
    @Import(name="messageFilters")
    private @Nullable Output<IotDeviceMessageFiltersArgs> messageFilters;

    /**
     * @return Rules that define which messages are authorized or denied based on their topic.
     * 
     */
    public Optional<Output<IotDeviceMessageFiltersArgs>> messageFilters() {
        return Optional.ofNullable(this.messageFilters);
    }

    /**
     * The name of the IoT device you want to create (e.g. `my-device`).
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the IoT device you want to create (e.g. `my-device`).
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The region you want to attach the resource to
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region you want to attach the resource to
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private IotDeviceArgs() {}

    private IotDeviceArgs(IotDeviceArgs $) {
        this.allowInsecure = $.allowInsecure;
        this.allowMultipleConnections = $.allowMultipleConnections;
        this.certificate = $.certificate;
        this.description = $.description;
        this.hubId = $.hubId;
        this.messageFilters = $.messageFilters;
        this.name = $.name;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IotDeviceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IotDeviceArgs $;

        public Builder() {
            $ = new IotDeviceArgs();
        }

        public Builder(IotDeviceArgs defaults) {
            $ = new IotDeviceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowInsecure Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.
         * 
         * @return builder
         * 
         */
        public Builder allowInsecure(@Nullable Output<Boolean> allowInsecure) {
            $.allowInsecure = allowInsecure;
            return this;
        }

        /**
         * @param allowInsecure Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.
         * 
         * @return builder
         * 
         */
        public Builder allowInsecure(Boolean allowInsecure) {
            return allowInsecure(Output.of(allowInsecure));
        }

        /**
         * @param allowMultipleConnections Allow more than one simultaneous connection using the same device credentials.
         * 
         * @return builder
         * 
         */
        public Builder allowMultipleConnections(@Nullable Output<Boolean> allowMultipleConnections) {
            $.allowMultipleConnections = allowMultipleConnections;
            return this;
        }

        /**
         * @param allowMultipleConnections Allow more than one simultaneous connection using the same device credentials.
         * 
         * @return builder
         * 
         */
        public Builder allowMultipleConnections(Boolean allowMultipleConnections) {
            return allowMultipleConnections(Output.of(allowMultipleConnections));
        }

        /**
         * @param certificate The certificate bundle of the device.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<IotDeviceCertificateArgs> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate The certificate bundle of the device.
         * 
         * @return builder
         * 
         */
        public Builder certificate(IotDeviceCertificateArgs certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param description The description of the IoT device (e.g. `living room`).
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the IoT device (e.g. `living room`).
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param hubId The ID of the hub on which this device will be created.
         * 
         * @return builder
         * 
         */
        public Builder hubId(Output<String> hubId) {
            $.hubId = hubId;
            return this;
        }

        /**
         * @param hubId The ID of the hub on which this device will be created.
         * 
         * @return builder
         * 
         */
        public Builder hubId(String hubId) {
            return hubId(Output.of(hubId));
        }

        /**
         * @param messageFilters Rules that define which messages are authorized or denied based on their topic.
         * 
         * @return builder
         * 
         */
        public Builder messageFilters(@Nullable Output<IotDeviceMessageFiltersArgs> messageFilters) {
            $.messageFilters = messageFilters;
            return this;
        }

        /**
         * @param messageFilters Rules that define which messages are authorized or denied based on their topic.
         * 
         * @return builder
         * 
         */
        public Builder messageFilters(IotDeviceMessageFiltersArgs messageFilters) {
            return messageFilters(Output.of(messageFilters));
        }

        /**
         * @param name The name of the IoT device you want to create (e.g. `my-device`).
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the IoT device you want to create (e.g. `my-device`).
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The region you want to attach the resource to
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region you want to attach the resource to
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public IotDeviceArgs build() {
            $.hubId = Objects.requireNonNull($.hubId, "expected parameter 'hubId' to be non-null");
            return $;
        }
    }

}
