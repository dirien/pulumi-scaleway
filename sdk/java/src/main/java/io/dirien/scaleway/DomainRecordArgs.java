// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.dirien.scaleway.inputs.DomainRecordGeoIpArgs;
import io.dirien.scaleway.inputs.DomainRecordHttpServiceArgs;
import io.dirien.scaleway.inputs.DomainRecordViewArgs;
import io.dirien.scaleway.inputs.DomainRecordWeightedArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainRecordArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainRecordArgs Empty = new DomainRecordArgs();

    /**
     * The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
     * 
     */
    @Import(name="data", required=true)
    private Output<String> data;

    /**
     * @return The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
     * 
     */
    public Output<String> data() {
        return this.data;
    }

    /**
     * The DNS Zone of the domain. If the DNS zone doesn&#39;t exist, it will be automatically created.
     * 
     */
    @Import(name="dnsZone", required=true)
    private Output<String> dnsZone;

    /**
     * @return The DNS Zone of the domain. If the DNS zone doesn&#39;t exist, it will be automatically created.
     * 
     */
    public Output<String> dnsZone() {
        return this.dnsZone;
    }

    /**
     * The Geo IP feature provides DNS resolution, based on the user’s geographical location. You can define a default IP that resolves if no Geo IP rule matches, and specify IPs for each geographical zone. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#geo-ip-records)
     * 
     */
    @Import(name="geoIp")
    private @Nullable Output<DomainRecordGeoIpArgs> geoIp;

    /**
     * @return The Geo IP feature provides DNS resolution, based on the user’s geographical location. You can define a default IP that resolves if no Geo IP rule matches, and specify IPs for each geographical zone. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#geo-ip-records)
     * 
     */
    public Optional<Output<DomainRecordGeoIpArgs>> geoIp() {
        return Optional.ofNullable(this.geoIp);
    }

    /**
     * The DNS service checks the provided URL on the configured IPs and resolves the request to one of the IPs by excluding the ones not responding to the given string to check. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#healthcheck-records)
     * 
     */
    @Import(name="httpService")
    private @Nullable Output<DomainRecordHttpServiceArgs> httpService;

    /**
     * @return The DNS service checks the provided URL on the configured IPs and resolves the request to one of the IPs by excluding the ones not responding to the given string to check. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#healthcheck-records)
     * 
     */
    public Optional<Output<DomainRecordHttpServiceArgs>> httpService() {
        return Optional.ofNullable(this.httpService);
    }

    /**
     * When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Please note, each zone not deleted will [cost you money](https://www.scaleway.com/en/dns/)
     * 
     */
    @Import(name="keepEmptyZone")
    private @Nullable Output<Boolean> keepEmptyZone;

    /**
     * @return When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Please note, each zone not deleted will [cost you money](https://www.scaleway.com/en/dns/)
     * 
     */
    public Optional<Output<Boolean>> keepEmptyZone() {
        return Optional.ofNullable(this.keepEmptyZone);
    }

    /**
     * The name of the record (can be an empty string for a root record).
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the record (can be an empty string for a root record).
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The priority of the record (mostly used with an `MX` record)
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return The priority of the record (mostly used with an `MX` record)
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The project_id you want to attach the resource to
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The project_id you want to attach the resource to
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Time To Live of the record in seconds.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return Time To Live of the record in seconds.
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The answer to a DNS request is based on the client’s (resolver) subnet. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#views-records)
     * 
     */
    @Import(name="views")
    private @Nullable Output<List<DomainRecordViewArgs>> views;

    /**
     * @return The answer to a DNS request is based on the client’s (resolver) subnet. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#views-records)
     * 
     */
    public Optional<Output<List<DomainRecordViewArgs>>> views() {
        return Optional.ofNullable(this.views);
    }

    /**
     * You provide a list of IPs with their corresponding weights. These weights are used to proportionally direct requests to each IP. Depending on the weight of a record more or fewer requests are answered with its related IP compared to the others in the list. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#weight-records)
     * 
     */
    @Import(name="weighteds")
    private @Nullable Output<List<DomainRecordWeightedArgs>> weighteds;

    /**
     * @return You provide a list of IPs with their corresponding weights. These weights are used to proportionally direct requests to each IP. Depending on the weight of a record more or fewer requests are answered with its related IP compared to the others in the list. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#weight-records)
     * 
     */
    public Optional<Output<List<DomainRecordWeightedArgs>>> weighteds() {
        return Optional.ofNullable(this.weighteds);
    }

    private DomainRecordArgs() {}

    private DomainRecordArgs(DomainRecordArgs $) {
        this.data = $.data;
        this.dnsZone = $.dnsZone;
        this.geoIp = $.geoIp;
        this.httpService = $.httpService;
        this.keepEmptyZone = $.keepEmptyZone;
        this.name = $.name;
        this.priority = $.priority;
        this.projectId = $.projectId;
        this.ttl = $.ttl;
        this.type = $.type;
        this.views = $.views;
        this.weighteds = $.weighteds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainRecordArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainRecordArgs $;

        public Builder() {
            $ = new DomainRecordArgs();
        }

        public Builder(DomainRecordArgs defaults) {
            $ = new DomainRecordArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param data The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
         * 
         * @return builder
         * 
         */
        public Builder data(Output<String> data) {
            $.data = data;
            return this;
        }

        /**
         * @param data The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
         * 
         * @return builder
         * 
         */
        public Builder data(String data) {
            return data(Output.of(data));
        }

        /**
         * @param dnsZone The DNS Zone of the domain. If the DNS zone doesn&#39;t exist, it will be automatically created.
         * 
         * @return builder
         * 
         */
        public Builder dnsZone(Output<String> dnsZone) {
            $.dnsZone = dnsZone;
            return this;
        }

        /**
         * @param dnsZone The DNS Zone of the domain. If the DNS zone doesn&#39;t exist, it will be automatically created.
         * 
         * @return builder
         * 
         */
        public Builder dnsZone(String dnsZone) {
            return dnsZone(Output.of(dnsZone));
        }

        /**
         * @param geoIp The Geo IP feature provides DNS resolution, based on the user’s geographical location. You can define a default IP that resolves if no Geo IP rule matches, and specify IPs for each geographical zone. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#geo-ip-records)
         * 
         * @return builder
         * 
         */
        public Builder geoIp(@Nullable Output<DomainRecordGeoIpArgs> geoIp) {
            $.geoIp = geoIp;
            return this;
        }

        /**
         * @param geoIp The Geo IP feature provides DNS resolution, based on the user’s geographical location. You can define a default IP that resolves if no Geo IP rule matches, and specify IPs for each geographical zone. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#geo-ip-records)
         * 
         * @return builder
         * 
         */
        public Builder geoIp(DomainRecordGeoIpArgs geoIp) {
            return geoIp(Output.of(geoIp));
        }

        /**
         * @param httpService The DNS service checks the provided URL on the configured IPs and resolves the request to one of the IPs by excluding the ones not responding to the given string to check. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#healthcheck-records)
         * 
         * @return builder
         * 
         */
        public Builder httpService(@Nullable Output<DomainRecordHttpServiceArgs> httpService) {
            $.httpService = httpService;
            return this;
        }

        /**
         * @param httpService The DNS service checks the provided URL on the configured IPs and resolves the request to one of the IPs by excluding the ones not responding to the given string to check. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#healthcheck-records)
         * 
         * @return builder
         * 
         */
        public Builder httpService(DomainRecordHttpServiceArgs httpService) {
            return httpService(Output.of(httpService));
        }

        /**
         * @param keepEmptyZone When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Please note, each zone not deleted will [cost you money](https://www.scaleway.com/en/dns/)
         * 
         * @return builder
         * 
         */
        public Builder keepEmptyZone(@Nullable Output<Boolean> keepEmptyZone) {
            $.keepEmptyZone = keepEmptyZone;
            return this;
        }

        /**
         * @param keepEmptyZone When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Please note, each zone not deleted will [cost you money](https://www.scaleway.com/en/dns/)
         * 
         * @return builder
         * 
         */
        public Builder keepEmptyZone(Boolean keepEmptyZone) {
            return keepEmptyZone(Output.of(keepEmptyZone));
        }

        /**
         * @param name The name of the record (can be an empty string for a root record).
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the record (can be an empty string for a root record).
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority The priority of the record (mostly used with an `MX` record)
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority of the record (mostly used with an `MX` record)
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param projectId The project_id you want to attach the resource to
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project_id you want to attach the resource to
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param ttl Time To Live of the record in seconds.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl Time To Live of the record in seconds.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        /**
         * @param type The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param views The answer to a DNS request is based on the client’s (resolver) subnet. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#views-records)
         * 
         * @return builder
         * 
         */
        public Builder views(@Nullable Output<List<DomainRecordViewArgs>> views) {
            $.views = views;
            return this;
        }

        /**
         * @param views The answer to a DNS request is based on the client’s (resolver) subnet. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#views-records)
         * 
         * @return builder
         * 
         */
        public Builder views(List<DomainRecordViewArgs> views) {
            return views(Output.of(views));
        }

        /**
         * @param views The answer to a DNS request is based on the client’s (resolver) subnet. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#views-records)
         * 
         * @return builder
         * 
         */
        public Builder views(DomainRecordViewArgs... views) {
            return views(List.of(views));
        }

        /**
         * @param weighteds You provide a list of IPs with their corresponding weights. These weights are used to proportionally direct requests to each IP. Depending on the weight of a record more or fewer requests are answered with its related IP compared to the others in the list. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#weight-records)
         * 
         * @return builder
         * 
         */
        public Builder weighteds(@Nullable Output<List<DomainRecordWeightedArgs>> weighteds) {
            $.weighteds = weighteds;
            return this;
        }

        /**
         * @param weighteds You provide a list of IPs with their corresponding weights. These weights are used to proportionally direct requests to each IP. Depending on the weight of a record more or fewer requests are answered with its related IP compared to the others in the list. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#weight-records)
         * 
         * @return builder
         * 
         */
        public Builder weighteds(List<DomainRecordWeightedArgs> weighteds) {
            return weighteds(Output.of(weighteds));
        }

        /**
         * @param weighteds You provide a list of IPs with their corresponding weights. These weights are used to proportionally direct requests to each IP. Depending on the weight of a record more or fewer requests are answered with its related IP compared to the others in the list. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#weight-records)
         * 
         * @return builder
         * 
         */
        public Builder weighteds(DomainRecordWeightedArgs... weighteds) {
            return weighteds(List.of(weighteds));
        }

        public DomainRecordArgs build() {
            $.data = Objects.requireNonNull($.data, "expected parameter 'data' to be non-null");
            $.dnsZone = Objects.requireNonNull($.dnsZone, "expected parameter 'dnsZone' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
