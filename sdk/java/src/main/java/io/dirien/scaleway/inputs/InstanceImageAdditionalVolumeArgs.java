// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceImageAdditionalVolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceImageAdditionalVolumeArgs Empty = new InstanceImageAdditionalVolumeArgs();

    /**
     * Date of the volume creation.
     * 
     */
    @Import(name="creationDate")
    private @Nullable Output<String> creationDate;

    /**
     * @return Date of the volume creation.
     * 
     */
    public Optional<Output<String>> creationDate() {
        return Optional.ofNullable(this.creationDate);
    }

    /**
     * The export URI of the volume.
     * 
     */
    @Import(name="exportUri")
    private @Nullable Output<String> exportUri;

    /**
     * @return The export URI of the volume.
     * 
     */
    public Optional<Output<String>> exportUri() {
        return Optional.ofNullable(this.exportUri);
    }

    /**
     * ID of the server containing the volume.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return ID of the server containing the volume.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Date of volume latest update.
     * 
     */
    @Import(name="modificationDate")
    private @Nullable Output<String> modificationDate;

    /**
     * @return Date of volume latest update.
     * 
     */
    public Optional<Output<String>> modificationDate() {
        return Optional.ofNullable(this.modificationDate);
    }

    /**
     * The name of the image. If not provided it will be randomly generated.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the image. If not provided it will be randomly generated.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The organization ID the volume is associated with.
     * 
     */
    @Import(name="organization")
    private @Nullable Output<String> organization;

    /**
     * @return The organization ID the volume is associated with.
     * 
     */
    public Optional<Output<String>> organization() {
        return Optional.ofNullable(this.organization);
    }

    /**
     * ID of the project the volume is associated with
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return ID of the project the volume is associated with
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Description of the server containing the volume (in case the image is a backup from a server).
     * 
     */
    @Import(name="server")
    private @Nullable Output<Map<String,String>> server;

    /**
     * @return Description of the server containing the volume (in case the image is a backup from a server).
     * 
     */
    public Optional<Output<Map<String,String>>> server() {
        return Optional.ofNullable(this.server);
    }

    /**
     * The size of the volume.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return The size of the volume.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * State of the volume.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of the volume.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A list of tags to apply to the image.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of tags to apply to the image.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The type of volume, possible values are `l_ssd` and `b_ssd`.
     * 
     */
    @Import(name="volumeType")
    private @Nullable Output<String> volumeType;

    /**
     * @return The type of volume, possible values are `l_ssd` and `b_ssd`.
     * 
     */
    public Optional<Output<String>> volumeType() {
        return Optional.ofNullable(this.volumeType);
    }

    /**
     * The zone in which the image should be created.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return The zone in which the image should be created.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private InstanceImageAdditionalVolumeArgs() {}

    private InstanceImageAdditionalVolumeArgs(InstanceImageAdditionalVolumeArgs $) {
        this.creationDate = $.creationDate;
        this.exportUri = $.exportUri;
        this.id = $.id;
        this.modificationDate = $.modificationDate;
        this.name = $.name;
        this.organization = $.organization;
        this.project = $.project;
        this.server = $.server;
        this.size = $.size;
        this.state = $.state;
        this.tags = $.tags;
        this.volumeType = $.volumeType;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceImageAdditionalVolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceImageAdditionalVolumeArgs $;

        public Builder() {
            $ = new InstanceImageAdditionalVolumeArgs();
        }

        public Builder(InstanceImageAdditionalVolumeArgs defaults) {
            $ = new InstanceImageAdditionalVolumeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param creationDate Date of the volume creation.
         * 
         * @return builder
         * 
         */
        public Builder creationDate(@Nullable Output<String> creationDate) {
            $.creationDate = creationDate;
            return this;
        }

        /**
         * @param creationDate Date of the volume creation.
         * 
         * @return builder
         * 
         */
        public Builder creationDate(String creationDate) {
            return creationDate(Output.of(creationDate));
        }

        /**
         * @param exportUri The export URI of the volume.
         * 
         * @return builder
         * 
         */
        public Builder exportUri(@Nullable Output<String> exportUri) {
            $.exportUri = exportUri;
            return this;
        }

        /**
         * @param exportUri The export URI of the volume.
         * 
         * @return builder
         * 
         */
        public Builder exportUri(String exportUri) {
            return exportUri(Output.of(exportUri));
        }

        /**
         * @param id ID of the server containing the volume.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of the server containing the volume.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param modificationDate Date of volume latest update.
         * 
         * @return builder
         * 
         */
        public Builder modificationDate(@Nullable Output<String> modificationDate) {
            $.modificationDate = modificationDate;
            return this;
        }

        /**
         * @param modificationDate Date of volume latest update.
         * 
         * @return builder
         * 
         */
        public Builder modificationDate(String modificationDate) {
            return modificationDate(Output.of(modificationDate));
        }

        /**
         * @param name The name of the image. If not provided it will be randomly generated.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the image. If not provided it will be randomly generated.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param organization The organization ID the volume is associated with.
         * 
         * @return builder
         * 
         */
        public Builder organization(@Nullable Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization The organization ID the volume is associated with.
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param project ID of the project the volume is associated with
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project ID of the project the volume is associated with
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param server Description of the server containing the volume (in case the image is a backup from a server).
         * 
         * @return builder
         * 
         */
        public Builder server(@Nullable Output<Map<String,String>> server) {
            $.server = server;
            return this;
        }

        /**
         * @param server Description of the server containing the volume (in case the image is a backup from a server).
         * 
         * @return builder
         * 
         */
        public Builder server(Map<String,String> server) {
            return server(Output.of(server));
        }

        /**
         * @param size The size of the volume.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The size of the volume.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param state State of the volume.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the volume.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param tags A list of tags to apply to the image.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tags to apply to the image.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of tags to apply to the image.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param volumeType The type of volume, possible values are `l_ssd` and `b_ssd`.
         * 
         * @return builder
         * 
         */
        public Builder volumeType(@Nullable Output<String> volumeType) {
            $.volumeType = volumeType;
            return this;
        }

        /**
         * @param volumeType The type of volume, possible values are `l_ssd` and `b_ssd`.
         * 
         * @return builder
         * 
         */
        public Builder volumeType(String volumeType) {
            return volumeType(Output.of(volumeType));
        }

        /**
         * @param zone The zone in which the image should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The zone in which the image should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public InstanceImageAdditionalVolumeArgs build() {
            return $;
        }
    }

}
