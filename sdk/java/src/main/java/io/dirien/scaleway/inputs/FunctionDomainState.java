// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FunctionDomainState extends com.pulumi.resources.ResourceArgs {

    public static final FunctionDomainState Empty = new FunctionDomainState();

    /**
     * The ID of the function you want to create a domain with.
     * 
     */
    @Import(name="functionId")
    private @Nullable Output<String> functionId;

    /**
     * @return The ID of the function you want to create a domain with.
     * 
     */
    public Optional<Output<String>> functionId() {
        return Optional.ofNullable(this.functionId);
    }

    /**
     * The hostname that should resolve to your function id native domain.
     * You should use a CNAME domain record that point to your native function `domain_name` for it.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The hostname that should resolve to your function id native domain.
     * You should use a CNAME domain record that point to your native function `domain_name` for it.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * (Defaults to provider `region`) The region in where the domain was created.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return (Defaults to provider `region`) The region in where the domain was created.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The URL that triggers the function
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The URL that triggers the function
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private FunctionDomainState() {}

    private FunctionDomainState(FunctionDomainState $) {
        this.functionId = $.functionId;
        this.hostname = $.hostname;
        this.region = $.region;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionDomainState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionDomainState $;

        public Builder() {
            $ = new FunctionDomainState();
        }

        public Builder(FunctionDomainState defaults) {
            $ = new FunctionDomainState(Objects.requireNonNull(defaults));
        }

        /**
         * @param functionId The ID of the function you want to create a domain with.
         * 
         * @return builder
         * 
         */
        public Builder functionId(@Nullable Output<String> functionId) {
            $.functionId = functionId;
            return this;
        }

        /**
         * @param functionId The ID of the function you want to create a domain with.
         * 
         * @return builder
         * 
         */
        public Builder functionId(String functionId) {
            return functionId(Output.of(functionId));
        }

        /**
         * @param hostname The hostname that should resolve to your function id native domain.
         * You should use a CNAME domain record that point to your native function `domain_name` for it.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The hostname that should resolve to your function id native domain.
         * You should use a CNAME domain record that point to your native function `domain_name` for it.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param region (Defaults to provider `region`) The region in where the domain was created.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region (Defaults to provider `region`) The region in where the domain was created.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param url The URL that triggers the function
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL that triggers the function
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public FunctionDomainState build() {
            return $;
        }
    }

}
