// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceServerRootVolume {
    private @Nullable Boolean boot;
    /**
     * @return Forces deletion of the root volume on instance termination.
     * 
     */
    private @Nullable Boolean deleteOnTermination;
    /**
     * @return The name of the server.
     * 
     */
    private @Nullable String name;
    /**
     * @return Size of the root volume in gigabytes.
     * To find the right size use [this endpoint](https://api.scaleway.com/instance/v1/zones/fr-par-1/products/servers) and
     * check the `volumes_constraint.{min|max}_size` (in bytes) for your `commercial_type`.
     * Updates to this field will recreate a new resource.
     * 
     */
    private @Nullable Integer sizeInGb;
    /**
     * @return The volume ID of the root volume of the server, allows you to create server with an existing volume. If empty, will be computed to a created volume ID.
     * 
     */
    private @Nullable String volumeId;
    /**
     * @return Volume type of root volume, can be `b_ssd` or `l_ssd`, default value depends on server type
     * 
     */
    private @Nullable String volumeType;

    private InstanceServerRootVolume() {}
    public Optional<Boolean> boot() {
        return Optional.ofNullable(this.boot);
    }
    /**
     * @return Forces deletion of the root volume on instance termination.
     * 
     */
    public Optional<Boolean> deleteOnTermination() {
        return Optional.ofNullable(this.deleteOnTermination);
    }
    /**
     * @return The name of the server.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Size of the root volume in gigabytes.
     * To find the right size use [this endpoint](https://api.scaleway.com/instance/v1/zones/fr-par-1/products/servers) and
     * check the `volumes_constraint.{min|max}_size` (in bytes) for your `commercial_type`.
     * Updates to this field will recreate a new resource.
     * 
     */
    public Optional<Integer> sizeInGb() {
        return Optional.ofNullable(this.sizeInGb);
    }
    /**
     * @return The volume ID of the root volume of the server, allows you to create server with an existing volume. If empty, will be computed to a created volume ID.
     * 
     */
    public Optional<String> volumeId() {
        return Optional.ofNullable(this.volumeId);
    }
    /**
     * @return Volume type of root volume, can be `b_ssd` or `l_ssd`, default value depends on server type
     * 
     */
    public Optional<String> volumeType() {
        return Optional.ofNullable(this.volumeType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceServerRootVolume defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean boot;
        private @Nullable Boolean deleteOnTermination;
        private @Nullable String name;
        private @Nullable Integer sizeInGb;
        private @Nullable String volumeId;
        private @Nullable String volumeType;
        public Builder() {}
        public Builder(InstanceServerRootVolume defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.boot = defaults.boot;
    	      this.deleteOnTermination = defaults.deleteOnTermination;
    	      this.name = defaults.name;
    	      this.sizeInGb = defaults.sizeInGb;
    	      this.volumeId = defaults.volumeId;
    	      this.volumeType = defaults.volumeType;
        }

        @CustomType.Setter
        public Builder boot(@Nullable Boolean boot) {
            this.boot = boot;
            return this;
        }
        @CustomType.Setter
        public Builder deleteOnTermination(@Nullable Boolean deleteOnTermination) {
            this.deleteOnTermination = deleteOnTermination;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder sizeInGb(@Nullable Integer sizeInGb) {
            this.sizeInGb = sizeInGb;
            return this;
        }
        @CustomType.Setter
        public Builder volumeId(@Nullable String volumeId) {
            this.volumeId = volumeId;
            return this;
        }
        @CustomType.Setter
        public Builder volumeType(@Nullable String volumeType) {
            this.volumeType = volumeType;
            return this;
        }
        public InstanceServerRootVolume build() {
            final var o = new InstanceServerRootVolume();
            o.boot = boot;
            o.deleteOnTermination = deleteOnTermination;
            o.name = name;
            o.sizeInGb = sizeInGb;
            o.volumeId = volumeId;
            o.volumeType = volumeType;
            return o;
        }
    }
}
