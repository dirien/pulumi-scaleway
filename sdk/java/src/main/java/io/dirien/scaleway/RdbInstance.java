// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.dirien.scaleway.RdbInstanceArgs;
import io.dirien.scaleway.Utilities;
import io.dirien.scaleway.inputs.RdbInstanceState;
import io.dirien.scaleway.outputs.RdbInstanceLoadBalancer;
import io.dirien.scaleway.outputs.RdbInstancePrivateNetwork;
import io.dirien.scaleway.outputs.RdbInstanceReadReplica;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates and manages Scaleway Database Instances.
 * For more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).
 * 
 * ## Examples
 * 
 * ### Example Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.RdbInstance;
 * import com.pulumi.scaleway.RdbInstanceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var main = new RdbInstance(&#34;main&#34;, RdbInstanceArgs.builder()        
 *             .disableBackup(true)
 *             .engine(&#34;PostgreSQL-11&#34;)
 *             .isHaCluster(true)
 *             .nodeType(&#34;DB-DEV-S&#34;)
 *             .password(&#34;thiZ_is_v&amp;ry_s3cret&#34;)
 *             .userName(&#34;my_initial_user&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ### Example With IPAM
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.VpcPrivateNetwork;
 * import com.pulumi.scaleway.RdbInstance;
 * import com.pulumi.scaleway.RdbInstanceArgs;
 * import com.pulumi.scaleway.inputs.RdbInstancePrivateNetworkArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var pn = new VpcPrivateNetwork(&#34;pn&#34;);
 * 
 *         var main = new RdbInstance(&#34;main&#34;, RdbInstanceArgs.builder()        
 *             .nodeType(&#34;DB-DEV-S&#34;)
 *             .engine(&#34;PostgreSQL-11&#34;)
 *             .isHaCluster(true)
 *             .disableBackup(true)
 *             .userName(&#34;my_initial_user&#34;)
 *             .password(&#34;thiZ_is_v&amp;ry_s3cret&#34;)
 *             .privateNetwork(RdbInstancePrivateNetworkArgs.builder()
 *                 .pnId(pn.id())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ### Example with Settings
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.RdbInstance;
 * import com.pulumi.scaleway.RdbInstanceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var main = new RdbInstance(&#34;main&#34;, RdbInstanceArgs.builder()        
 *             .disableBackup(true)
 *             .engine(&#34;MySQL-8&#34;)
 *             .initSettings(Map.of(&#34;lower_case_table_names&#34;, 1))
 *             .nodeType(&#34;db-dev-s&#34;)
 *             .password(&#34;thiZ_is_v&amp;ry_s3cret&#34;)
 *             .settings(Map.of(&#34;max_connections&#34;, &#34;350&#34;))
 *             .userName(&#34;my_initial_user&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ### Example with backup schedule
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.RdbInstance;
 * import com.pulumi.scaleway.RdbInstanceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var main = new RdbInstance(&#34;main&#34;, RdbInstanceArgs.builder()        
 *             .backupScheduleFrequency(24)
 *             .backupScheduleRetention(7)
 *             .disableBackup(false)
 *             .engine(&#34;PostgreSQL-11&#34;)
 *             .isHaCluster(true)
 *             .nodeType(&#34;DB-DEV-S&#34;)
 *             .password(&#34;thiZ_is_v&amp;ry_s3cret&#34;)
 *             .userName(&#34;my_initial_user&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ### Example with private network and dhcp configuration
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.VpcPrivateNetwork;
 * import com.pulumi.scaleway.VpcPublicGatewayDhcp;
 * import com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;
 * import com.pulumi.scaleway.VpcPublicGatewayIp;
 * import com.pulumi.scaleway.VpcPublicGateway;
 * import com.pulumi.scaleway.VpcPublicGatewayArgs;
 * import com.pulumi.scaleway.VpcGatewayNetwork;
 * import com.pulumi.scaleway.VpcGatewayNetworkArgs;
 * import com.pulumi.scaleway.RdbInstance;
 * import com.pulumi.scaleway.RdbInstanceArgs;
 * import com.pulumi.scaleway.inputs.RdbInstancePrivateNetworkArgs;
 * import com.pulumi.scaleway.VpcPublicGatewayPatRule;
 * import com.pulumi.scaleway.VpcPublicGatewayPatRuleArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var pn02 = new VpcPrivateNetwork(&#34;pn02&#34;);
 * 
 *         var mainVpcPublicGatewayDhcp = new VpcPublicGatewayDhcp(&#34;mainVpcPublicGatewayDhcp&#34;, VpcPublicGatewayDhcpArgs.builder()        
 *             .subnet(&#34;192.168.1.0/24&#34;)
 *             .build());
 * 
 *         var mainVpcPublicGatewayIp = new VpcPublicGatewayIp(&#34;mainVpcPublicGatewayIp&#34;);
 * 
 *         var mainVpcPublicGateway = new VpcPublicGateway(&#34;mainVpcPublicGateway&#34;, VpcPublicGatewayArgs.builder()        
 *             .type(&#34;VPC-GW-S&#34;)
 *             .ipId(mainVpcPublicGatewayIp.id())
 *             .build());
 * 
 *         var mainVpcGatewayNetwork = new VpcGatewayNetwork(&#34;mainVpcGatewayNetwork&#34;, VpcGatewayNetworkArgs.builder()        
 *             .gatewayId(mainVpcPublicGateway.id())
 *             .privateNetworkId(pn02.id())
 *             .dhcpId(mainVpcPublicGatewayDhcp.id())
 *             .cleanupDhcp(true)
 *             .enableMasquerade(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     mainVpcPublicGatewayIp,
 *                     pn02)
 *                 .build());
 * 
 *         var mainRdbInstance = new RdbInstance(&#34;mainRdbInstance&#34;, RdbInstanceArgs.builder()        
 *             .nodeType(&#34;db-dev-s&#34;)
 *             .engine(&#34;PostgreSQL-11&#34;)
 *             .isHaCluster(false)
 *             .disableBackup(true)
 *             .userName(&#34;my_initial_user&#34;)
 *             .password(&#34;thiZ_is_v&amp;ry_s3cret&#34;)
 *             .region(&#34;fr-par&#34;)
 *             .tags(            
 *                 &#34;terraform-test&#34;,
 *                 &#34;scaleway_rdb_instance&#34;,
 *                 &#34;volume&#34;,
 *                 &#34;rdb_pn&#34;)
 *             .volumeType(&#34;bssd&#34;)
 *             .volumeSizeInGb(10)
 *             .privateNetwork(RdbInstancePrivateNetworkArgs.builder()
 *                 .ipNet(&#34;192.168.1.254/24&#34;)
 *                 .pnId(pn02.id())
 *                 .build())
 *             .build());
 * 
 *         var mainVpcPublicGatewayPatRule = new VpcPublicGatewayPatRule(&#34;mainVpcPublicGatewayPatRule&#34;, VpcPublicGatewayPatRuleArgs.builder()        
 *             .gatewayId(mainVpcPublicGateway.id())
 *             .privateIp(mainVpcPublicGatewayDhcp.address())
 *             .privatePort(mainRdbInstance.privateNetwork().applyValue(privateNetwork -&gt; privateNetwork.port()))
 *             .publicPort(42)
 *             .protocol(&#34;both&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     mainVpcGatewayNetwork,
 *                     pn02)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Settings
 * 
 * Please consult
 * the [GoDoc](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@v1.0.0-beta.9/api/rdb/v1#EngineVersion) to list all
 * available `settings` and `init_settings` on your `node_type` of your convenient.
 * 
 * ## Private Network
 * 
 * &gt; **Important:** Updates to `private_network` will recreate the attachment Instance.
 * 
 * - `ip_net` - (Optional) The IP network address within the private subnet. This must be an IPv4 address with a
 *   CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
 *   service if not set.
 * - `pn_id` - (Required) The ID of the private network.
 * 
 * ## Limitations
 * 
 * The Managed Database product is only compliant with the private network in the default availability zone (AZ).
 * i.e. `fr-par-1`, `nl-ams-1`, `pl-waw-1`. To learn more, read our
 * section [How to connect a PostgreSQL and MySQL Database Instance to a Private Network](https://www.scaleway.com/en/docs/managed-databases/postgresql-and-mysql/how-to/connect-database-private-network/)
 * 
 * ## Import
 * 
 * Database Instance can be imported using the `{region}/{id}`, e.g. bash
 * 
 * ```sh
 *  $ pulumi import scaleway:index/rdbInstance:RdbInstance rdb01 fr-par/11111111-1111-1111-1111-111111111111
 * ```
 * 
 */
@ResourceType(type="scaleway:index/rdbInstance:RdbInstance")
public class RdbInstance extends com.pulumi.resources.CustomResource {
    /**
     * Boolean to store logical backups in the same region as the database instance.
     * 
     */
    @Export(name="backupSameRegion", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> backupSameRegion;

    /**
     * @return Boolean to store logical backups in the same region as the database instance.
     * 
     */
    public Output<Boolean> backupSameRegion() {
        return this.backupSameRegion;
    }
    /**
     * Backup schedule frequency in hours.
     * 
     */
    @Export(name="backupScheduleFrequency", refs={Integer.class}, tree="[0]")
    private Output<Integer> backupScheduleFrequency;

    /**
     * @return Backup schedule frequency in hours.
     * 
     */
    public Output<Integer> backupScheduleFrequency() {
        return this.backupScheduleFrequency;
    }
    /**
     * Backup schedule retention in days.
     * 
     */
    @Export(name="backupScheduleRetention", refs={Integer.class}, tree="[0]")
    private Output<Integer> backupScheduleRetention;

    /**
     * @return Backup schedule retention in days.
     * 
     */
    public Output<Integer> backupScheduleRetention() {
        return this.backupScheduleRetention;
    }
    /**
     * Certificate of the database instance.
     * 
     */
    @Export(name="certificate", refs={String.class}, tree="[0]")
    private Output<String> certificate;

    /**
     * @return Certificate of the database instance.
     * 
     */
    public Output<String> certificate() {
        return this.certificate;
    }
    /**
     * Disable automated backup for the database instance.
     * 
     */
    @Export(name="disableBackup", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disableBackup;

    /**
     * @return Disable automated backup for the database instance.
     * 
     */
    public Output<Optional<Boolean>> disableBackup() {
        return Codegen.optional(this.disableBackup);
    }
    /**
     * (Deprecated) The IP of the Database Instance.
     * 
     * @deprecated
     * Please use the private_network or the load_balancer attribute
     * 
     */
    @Deprecated /* Please use the private_network or the load_balancer attribute */
    @Export(name="endpointIp", refs={String.class}, tree="[0]")
    private Output<String> endpointIp;

    /**
     * @return (Deprecated) The IP of the Database Instance.
     * 
     */
    public Output<String> endpointIp() {
        return this.endpointIp;
    }
    /**
     * (Deprecated) The port of the Database Instance.
     * 
     */
    @Export(name="endpointPort", refs={Integer.class}, tree="[0]")
    private Output<Integer> endpointPort;

    /**
     * @return (Deprecated) The port of the Database Instance.
     * 
     */
    public Output<Integer> endpointPort() {
        return this.endpointPort;
    }
    /**
     * Database Instance&#39;s engine version (e.g. `PostgreSQL-11`).
     * 
     */
    @Export(name="engine", refs={String.class}, tree="[0]")
    private Output<String> engine;

    /**
     * @return Database Instance&#39;s engine version (e.g. `PostgreSQL-11`).
     * 
     */
    public Output<String> engine() {
        return this.engine;
    }
    /**
     * Map of engine settings to be set at database initialisation.
     * 
     */
    @Export(name="initSettings", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> initSettings;

    /**
     * @return Map of engine settings to be set at database initialisation.
     * 
     */
    public Output<Optional<Map<String,String>>> initSettings() {
        return Codegen.optional(this.initSettings);
    }
    /**
     * Enable or disable high availability for the database instance.
     * 
     */
    @Export(name="isHaCluster", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isHaCluster;

    /**
     * @return Enable or disable high availability for the database instance.
     * 
     */
    public Output<Optional<Boolean>> isHaCluster() {
        return Codegen.optional(this.isHaCluster);
    }
    /**
     * List of load balancer endpoints of the database instance.
     * 
     */
    @Export(name="loadBalancers", refs={List.class,RdbInstanceLoadBalancer.class}, tree="[0,1]")
    private Output<List<RdbInstanceLoadBalancer>> loadBalancers;

    /**
     * @return List of load balancer endpoints of the database instance.
     * 
     */
    public Output<List<RdbInstanceLoadBalancer>> loadBalancers() {
        return this.loadBalancers;
    }
    /**
     * The name of the Database Instance.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the Database Instance.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The type of database instance you want to create (e.g. `db-dev-s`).
     * 
     */
    @Export(name="nodeType", refs={String.class}, tree="[0]")
    private Output<String> nodeType;

    /**
     * @return The type of database instance you want to create (e.g. `db-dev-s`).
     * 
     */
    public Output<String> nodeType() {
        return this.nodeType;
    }
    /**
     * The organization ID the Database Instance is associated with.
     * 
     */
    @Export(name="organizationId", refs={String.class}, tree="[0]")
    private Output<String> organizationId;

    /**
     * @return The organization ID the Database Instance is associated with.
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }
    /**
     * Password for the first user of the database instance.
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> password;

    /**
     * @return Password for the first user of the database instance.
     * 
     */
    public Output<Optional<String>> password() {
        return Codegen.optional(this.password);
    }
    /**
     * List of private networks endpoints of the database instance.
     * 
     */
    @Export(name="privateNetwork", refs={RdbInstancePrivateNetwork.class}, tree="[0]")
    private Output</* @Nullable */ RdbInstancePrivateNetwork> privateNetwork;

    /**
     * @return List of private networks endpoints of the database instance.
     * 
     */
    public Output<Optional<RdbInstancePrivateNetwork>> privateNetwork() {
        return Codegen.optional(this.privateNetwork);
    }
    /**
     * `project_id`) The ID of the project the Database
     * Instance is associated with.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return `project_id`) The ID of the project the Database
     * Instance is associated with.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * List of read replicas of the database instance.
     * 
     */
    @Export(name="readReplicas", refs={List.class,RdbInstanceReadReplica.class}, tree="[0,1]")
    private Output<List<RdbInstanceReadReplica>> readReplicas;

    /**
     * @return List of read replicas of the database instance.
     * 
     */
    public Output<List<RdbInstanceReadReplica>> readReplicas() {
        return this.readReplicas;
    }
    /**
     * `region`) The region
     * in which the Database Instance should be created.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return `region`) The region
     * in which the Database Instance should be created.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * Map of engine settings to be set. Using this option will override default config.
     * 
     */
    @Export(name="settings", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> settings;

    /**
     * @return Map of engine settings to be set. Using this option will override default config.
     * 
     */
    public Output<Map<String,String>> settings() {
        return this.settings;
    }
    /**
     * The tags associated with the Database Instance.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return The tags associated with the Database Instance.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Identifier for the first user of the database instance.
     * 
     */
    @Export(name="userName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userName;

    /**
     * @return Identifier for the first user of the database instance.
     * 
     */
    public Output<Optional<String>> userName() {
        return Codegen.optional(this.userName);
    }
    /**
     * Volume size (in GB) when `volume_type` is set to `bssd`.
     * 
     */
    @Export(name="volumeSizeInGb", refs={Integer.class}, tree="[0]")
    private Output<Integer> volumeSizeInGb;

    /**
     * @return Volume size (in GB) when `volume_type` is set to `bssd`.
     * 
     */
    public Output<Integer> volumeSizeInGb() {
        return this.volumeSizeInGb;
    }
    /**
     * Type of volume where data are stored (`bssd` or `lssd`).
     * 
     */
    @Export(name="volumeType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> volumeType;

    /**
     * @return Type of volume where data are stored (`bssd` or `lssd`).
     * 
     */
    public Output<Optional<String>> volumeType() {
        return Codegen.optional(this.volumeType);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RdbInstance(String name) {
        this(name, RdbInstanceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RdbInstance(String name, RdbInstanceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RdbInstance(String name, RdbInstanceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/rdbInstance:RdbInstance", name, args == null ? RdbInstanceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private RdbInstance(String name, Output<String> id, @Nullable RdbInstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/rdbInstance:RdbInstance", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "password"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RdbInstance get(String name, Output<String> id, @Nullable RdbInstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RdbInstance(name, id, state, options);
    }
}
