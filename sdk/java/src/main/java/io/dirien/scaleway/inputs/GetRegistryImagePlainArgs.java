// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRegistryImagePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRegistryImagePlainArgs Empty = new GetRegistryImagePlainArgs();

    /**
     * The image ID.
     * Only one of `name` and `image_id` should be specified.
     * 
     */
    @Import(name="imageId")
    private @Nullable String imageId;

    /**
     * @return The image ID.
     * Only one of `name` and `image_id` should be specified.
     * 
     */
    public Optional<String> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * The image name.
     * Only one of `name` and `image_id` should be specified.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The image name.
     * Only one of `name` and `image_id` should be specified.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace ID in which the image is.
     * 
     */
    @Import(name="namespaceId")
    private @Nullable String namespaceId;

    /**
     * @return The namespace ID in which the image is.
     * 
     */
    public Optional<String> namespaceId() {
        return Optional.ofNullable(this.namespaceId);
    }

    /**
     * `project_id`) The ID of the project the image is associated with.
     * 
     */
    @Import(name="projectId")
    private @Nullable String projectId;

    /**
     * @return `project_id`) The ID of the project the image is associated with.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * `region`) The region in which the image exists.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return `region`) The region in which the image exists.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The tags associated with the registry image
     * 
     */
    @Import(name="tags")
    private @Nullable List<String> tags;

    /**
     * @return The tags associated with the registry image
     * 
     */
    public Optional<List<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GetRegistryImagePlainArgs() {}

    private GetRegistryImagePlainArgs(GetRegistryImagePlainArgs $) {
        this.imageId = $.imageId;
        this.name = $.name;
        this.namespaceId = $.namespaceId;
        this.projectId = $.projectId;
        this.region = $.region;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRegistryImagePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRegistryImagePlainArgs $;

        public Builder() {
            $ = new GetRegistryImagePlainArgs();
        }

        public Builder(GetRegistryImagePlainArgs defaults) {
            $ = new GetRegistryImagePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param imageId The image ID.
         * Only one of `name` and `image_id` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable String imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param name The image name.
         * Only one of `name` and `image_id` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param namespaceId The namespace ID in which the image is.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(@Nullable String namespaceId) {
            $.namespaceId = namespaceId;
            return this;
        }

        /**
         * @param projectId `project_id`) The ID of the project the image is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable String projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param region `region`) The region in which the image exists.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param tags The tags associated with the registry image
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable List<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags associated with the registry image
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public GetRegistryImagePlainArgs build() {
            return $;
        }
    }

}
