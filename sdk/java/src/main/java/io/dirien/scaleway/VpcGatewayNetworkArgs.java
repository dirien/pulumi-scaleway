// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcGatewayNetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpcGatewayNetworkArgs Empty = new VpcGatewayNetworkArgs();

    /**
     * Remove DHCP config on this network on destroy. It requires DHCP id.
     * 
     */
    @Import(name="cleanupDhcp")
    private @Nullable Output<Boolean> cleanupDhcp;

    /**
     * @return Remove DHCP config on this network on destroy. It requires DHCP id.
     * 
     */
    public Optional<Output<Boolean>> cleanupDhcp() {
        return Optional.ofNullable(this.cleanupDhcp);
    }

    /**
     * The ID of the public gateway DHCP config. Only one of `dhcp_id` and `static_address` should be specified.
     * 
     */
    @Import(name="dhcpId")
    private @Nullable Output<String> dhcpId;

    /**
     * @return The ID of the public gateway DHCP config. Only one of `dhcp_id` and `static_address` should be specified.
     * 
     */
    public Optional<Output<String>> dhcpId() {
        return Optional.ofNullable(this.dhcpId);
    }

    /**
     * Enable DHCP config on this network. It requires DHCP id.
     * 
     */
    @Import(name="enableDhcp")
    private @Nullable Output<Boolean> enableDhcp;

    /**
     * @return Enable DHCP config on this network. It requires DHCP id.
     * 
     */
    public Optional<Output<Boolean>> enableDhcp() {
        return Optional.ofNullable(this.enableDhcp);
    }

    /**
     * Enable masquerade on this network
     * 
     */
    @Import(name="enableMasquerade")
    private @Nullable Output<Boolean> enableMasquerade;

    /**
     * @return Enable masquerade on this network
     * 
     */
    public Optional<Output<Boolean>> enableMasquerade() {
        return Optional.ofNullable(this.enableMasquerade);
    }

    /**
     * The ID of the public gateway.
     * 
     */
    @Import(name="gatewayId", required=true)
    private Output<String> gatewayId;

    /**
     * @return The ID of the public gateway.
     * 
     */
    public Output<String> gatewayId() {
        return this.gatewayId;
    }

    /**
     * The ID of the private network.
     * 
     */
    @Import(name="privateNetworkId", required=true)
    private Output<String> privateNetworkId;

    /**
     * @return The ID of the private network.
     * 
     */
    public Output<String> privateNetworkId() {
        return this.privateNetworkId;
    }

    /**
     * Enable DHCP config on this network. Only one of `dhcp_id` and `static_address` should be specified.
     * 
     */
    @Import(name="staticAddress")
    private @Nullable Output<String> staticAddress;

    /**
     * @return Enable DHCP config on this network. Only one of `dhcp_id` and `static_address` should be specified.
     * 
     */
    public Optional<Output<String>> staticAddress() {
        return Optional.ofNullable(this.staticAddress);
    }

    /**
     * `zone`) The zone in which the gateway network should be created.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return `zone`) The zone in which the gateway network should be created.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private VpcGatewayNetworkArgs() {}

    private VpcGatewayNetworkArgs(VpcGatewayNetworkArgs $) {
        this.cleanupDhcp = $.cleanupDhcp;
        this.dhcpId = $.dhcpId;
        this.enableDhcp = $.enableDhcp;
        this.enableMasquerade = $.enableMasquerade;
        this.gatewayId = $.gatewayId;
        this.privateNetworkId = $.privateNetworkId;
        this.staticAddress = $.staticAddress;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcGatewayNetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcGatewayNetworkArgs $;

        public Builder() {
            $ = new VpcGatewayNetworkArgs();
        }

        public Builder(VpcGatewayNetworkArgs defaults) {
            $ = new VpcGatewayNetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cleanupDhcp Remove DHCP config on this network on destroy. It requires DHCP id.
         * 
         * @return builder
         * 
         */
        public Builder cleanupDhcp(@Nullable Output<Boolean> cleanupDhcp) {
            $.cleanupDhcp = cleanupDhcp;
            return this;
        }

        /**
         * @param cleanupDhcp Remove DHCP config on this network on destroy. It requires DHCP id.
         * 
         * @return builder
         * 
         */
        public Builder cleanupDhcp(Boolean cleanupDhcp) {
            return cleanupDhcp(Output.of(cleanupDhcp));
        }

        /**
         * @param dhcpId The ID of the public gateway DHCP config. Only one of `dhcp_id` and `static_address` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder dhcpId(@Nullable Output<String> dhcpId) {
            $.dhcpId = dhcpId;
            return this;
        }

        /**
         * @param dhcpId The ID of the public gateway DHCP config. Only one of `dhcp_id` and `static_address` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder dhcpId(String dhcpId) {
            return dhcpId(Output.of(dhcpId));
        }

        /**
         * @param enableDhcp Enable DHCP config on this network. It requires DHCP id.
         * 
         * @return builder
         * 
         */
        public Builder enableDhcp(@Nullable Output<Boolean> enableDhcp) {
            $.enableDhcp = enableDhcp;
            return this;
        }

        /**
         * @param enableDhcp Enable DHCP config on this network. It requires DHCP id.
         * 
         * @return builder
         * 
         */
        public Builder enableDhcp(Boolean enableDhcp) {
            return enableDhcp(Output.of(enableDhcp));
        }

        /**
         * @param enableMasquerade Enable masquerade on this network
         * 
         * @return builder
         * 
         */
        public Builder enableMasquerade(@Nullable Output<Boolean> enableMasquerade) {
            $.enableMasquerade = enableMasquerade;
            return this;
        }

        /**
         * @param enableMasquerade Enable masquerade on this network
         * 
         * @return builder
         * 
         */
        public Builder enableMasquerade(Boolean enableMasquerade) {
            return enableMasquerade(Output.of(enableMasquerade));
        }

        /**
         * @param gatewayId The ID of the public gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(Output<String> gatewayId) {
            $.gatewayId = gatewayId;
            return this;
        }

        /**
         * @param gatewayId The ID of the public gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(String gatewayId) {
            return gatewayId(Output.of(gatewayId));
        }

        /**
         * @param privateNetworkId The ID of the private network.
         * 
         * @return builder
         * 
         */
        public Builder privateNetworkId(Output<String> privateNetworkId) {
            $.privateNetworkId = privateNetworkId;
            return this;
        }

        /**
         * @param privateNetworkId The ID of the private network.
         * 
         * @return builder
         * 
         */
        public Builder privateNetworkId(String privateNetworkId) {
            return privateNetworkId(Output.of(privateNetworkId));
        }

        /**
         * @param staticAddress Enable DHCP config on this network. Only one of `dhcp_id` and `static_address` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder staticAddress(@Nullable Output<String> staticAddress) {
            $.staticAddress = staticAddress;
            return this;
        }

        /**
         * @param staticAddress Enable DHCP config on this network. Only one of `dhcp_id` and `static_address` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder staticAddress(String staticAddress) {
            return staticAddress(Output.of(staticAddress));
        }

        /**
         * @param zone `zone`) The zone in which the gateway network should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone `zone`) The zone in which the gateway network should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public VpcGatewayNetworkArgs build() {
            $.gatewayId = Objects.requireNonNull($.gatewayId, "expected parameter 'gatewayId' to be non-null");
            $.privateNetworkId = Objects.requireNonNull($.privateNetworkId, "expected parameter 'privateNetworkId' to be non-null");
            return $;
        }
    }

}
