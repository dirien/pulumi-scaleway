// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcPublicGatewayIpReverseDnsState extends com.pulumi.resources.ResourceArgs {

    public static final VpcPublicGatewayIpReverseDnsState Empty = new VpcPublicGatewayIpReverseDnsState();

    /**
     * The public gateway IP ID
     * 
     */
    @Import(name="gatewayIpId")
    private @Nullable Output<String> gatewayIpId;

    /**
     * @return The public gateway IP ID
     * 
     */
    public Optional<Output<String>> gatewayIpId() {
        return Optional.ofNullable(this.gatewayIpId);
    }

    /**
     * The reverse domain name for this IP address
     * 
     */
    @Import(name="reverse")
    private @Nullable Output<String> reverse;

    /**
     * @return The reverse domain name for this IP address
     * 
     */
    public Optional<Output<String>> reverse() {
        return Optional.ofNullable(this.reverse);
    }

    /**
     * `zone`) The zone in which the IP should be reserved.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return `zone`) The zone in which the IP should be reserved.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private VpcPublicGatewayIpReverseDnsState() {}

    private VpcPublicGatewayIpReverseDnsState(VpcPublicGatewayIpReverseDnsState $) {
        this.gatewayIpId = $.gatewayIpId;
        this.reverse = $.reverse;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcPublicGatewayIpReverseDnsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcPublicGatewayIpReverseDnsState $;

        public Builder() {
            $ = new VpcPublicGatewayIpReverseDnsState();
        }

        public Builder(VpcPublicGatewayIpReverseDnsState defaults) {
            $ = new VpcPublicGatewayIpReverseDnsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param gatewayIpId The public gateway IP ID
         * 
         * @return builder
         * 
         */
        public Builder gatewayIpId(@Nullable Output<String> gatewayIpId) {
            $.gatewayIpId = gatewayIpId;
            return this;
        }

        /**
         * @param gatewayIpId The public gateway IP ID
         * 
         * @return builder
         * 
         */
        public Builder gatewayIpId(String gatewayIpId) {
            return gatewayIpId(Output.of(gatewayIpId));
        }

        /**
         * @param reverse The reverse domain name for this IP address
         * 
         * @return builder
         * 
         */
        public Builder reverse(@Nullable Output<String> reverse) {
            $.reverse = reverse;
            return this;
        }

        /**
         * @param reverse The reverse domain name for this IP address
         * 
         * @return builder
         * 
         */
        public Builder reverse(String reverse) {
            return reverse(Output.of(reverse));
        }

        /**
         * @param zone `zone`) The zone in which the IP should be reserved.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone `zone`) The zone in which the IP should be reserved.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public VpcPublicGatewayIpReverseDnsState build() {
            return $;
        }
    }

}
