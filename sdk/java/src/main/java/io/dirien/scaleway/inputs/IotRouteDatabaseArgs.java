// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class IotRouteDatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final IotRouteDatabaseArgs Empty = new IotRouteDatabaseArgs();

    @Import(name="dbname", required=true)
    private Output<String> dbname;

    public Output<String> dbname() {
        return this.dbname;
    }

    @Import(name="host", required=true)
    private Output<String> host;

    public Output<String> host() {
        return this.host;
    }

    @Import(name="password", required=true)
    private Output<String> password;

    public Output<String> password() {
        return this.password;
    }

    @Import(name="port", required=true)
    private Output<Integer> port;

    public Output<Integer> port() {
        return this.port;
    }

    @Import(name="query", required=true)
    private Output<String> query;

    public Output<String> query() {
        return this.query;
    }

    @Import(name="username", required=true)
    private Output<String> username;

    public Output<String> username() {
        return this.username;
    }

    private IotRouteDatabaseArgs() {}

    private IotRouteDatabaseArgs(IotRouteDatabaseArgs $) {
        this.dbname = $.dbname;
        this.host = $.host;
        this.password = $.password;
        this.port = $.port;
        this.query = $.query;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IotRouteDatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IotRouteDatabaseArgs $;

        public Builder() {
            $ = new IotRouteDatabaseArgs();
        }

        public Builder(IotRouteDatabaseArgs defaults) {
            $ = new IotRouteDatabaseArgs(Objects.requireNonNull(defaults));
        }

        public Builder dbname(Output<String> dbname) {
            $.dbname = dbname;
            return this;
        }

        public Builder dbname(String dbname) {
            return dbname(Output.of(dbname));
        }

        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        public Builder host(String host) {
            return host(Output.of(host));
        }

        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        public Builder query(String query) {
            return query(Output.of(query));
        }

        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        public Builder username(String username) {
            return username(Output.of(username));
        }

        public IotRouteDatabaseArgs build() {
            $.dbname = Objects.requireNonNull($.dbname, "expected parameter 'dbname' to be non-null");
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.query = Objects.requireNonNull($.query, "expected parameter 'query' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
