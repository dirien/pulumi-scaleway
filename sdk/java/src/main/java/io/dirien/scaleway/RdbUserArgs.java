// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RdbUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final RdbUserArgs Empty = new RdbUserArgs();

    /**
     * UUID of the rdb instance.
     * 
     * &gt; **Important:** Updates to `instance_id` will recreate the Database User.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return UUID of the rdb instance.
     * 
     * &gt; **Important:** Updates to `instance_id` will recreate the Database User.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * Grant admin permissions to the Database User.
     * 
     */
    @Import(name="isAdmin")
    private @Nullable Output<Boolean> isAdmin;

    /**
     * @return Grant admin permissions to the Database User.
     * 
     */
    public Optional<Output<Boolean>> isAdmin() {
        return Optional.ofNullable(this.isAdmin);
    }

    /**
     * Database User name.
     * 
     * &gt; **Important:** Updates to `name` will recreate the Database User.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Database User name.
     * 
     * &gt; **Important:** Updates to `name` will recreate the Database User.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Database User password.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return Database User password.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * The Scaleway region this resource resides in.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The Scaleway region this resource resides in.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private RdbUserArgs() {}

    private RdbUserArgs(RdbUserArgs $) {
        this.instanceId = $.instanceId;
        this.isAdmin = $.isAdmin;
        this.name = $.name;
        this.password = $.password;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RdbUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RdbUserArgs $;

        public Builder() {
            $ = new RdbUserArgs();
        }

        public Builder(RdbUserArgs defaults) {
            $ = new RdbUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceId UUID of the rdb instance.
         * 
         * &gt; **Important:** Updates to `instance_id` will recreate the Database User.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId UUID of the rdb instance.
         * 
         * &gt; **Important:** Updates to `instance_id` will recreate the Database User.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param isAdmin Grant admin permissions to the Database User.
         * 
         * @return builder
         * 
         */
        public Builder isAdmin(@Nullable Output<Boolean> isAdmin) {
            $.isAdmin = isAdmin;
            return this;
        }

        /**
         * @param isAdmin Grant admin permissions to the Database User.
         * 
         * @return builder
         * 
         */
        public Builder isAdmin(Boolean isAdmin) {
            return isAdmin(Output.of(isAdmin));
        }

        /**
         * @param name Database User name.
         * 
         * &gt; **Important:** Updates to `name` will recreate the Database User.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Database User name.
         * 
         * &gt; **Important:** Updates to `name` will recreate the Database User.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password Database User password.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Database User password.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param region The Scaleway region this resource resides in.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The Scaleway region this resource resides in.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public RdbUserArgs build() {
            $.instanceId = Objects.requireNonNull($.instanceId, "expected parameter 'instanceId' to be non-null");
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            return $;
        }
    }

}
