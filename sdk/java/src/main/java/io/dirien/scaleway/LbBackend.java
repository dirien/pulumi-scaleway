// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.dirien.scaleway.LbBackendArgs;
import io.dirien.scaleway.Utilities;
import io.dirien.scaleway.inputs.LbBackendState;
import io.dirien.scaleway.outputs.LbBackendHealthCheckHttp;
import io.dirien.scaleway.outputs.LbBackendHealthCheckHttps;
import io.dirien.scaleway.outputs.LbBackendHealthCheckTcp;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates and manages Scaleway Load-Balancer Backends.
 * For more information, see [the documentation](https://developers.scaleway.com/en/products/lb/zoned_api).
 * 
 * ## Examples
 * 
 * ### Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.LbBackend;
 * import com.pulumi.scaleway.LbBackendArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var backend01 = new LbBackend(&#34;backend01&#34;, LbBackendArgs.builder()        
 *             .lbId(scaleway_lb.lb01().id())
 *             .forwardProtocol(&#34;http&#34;)
 *             .forwardPort(&#34;80&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ### With HTTP Health Check
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.LbBackend;
 * import com.pulumi.scaleway.LbBackendArgs;
 * import com.pulumi.scaleway.inputs.LbBackendHealthCheckHttpArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var backend01 = new LbBackend(&#34;backend01&#34;, LbBackendArgs.builder()        
 *             .lbId(scaleway_lb.lb01().id())
 *             .forwardProtocol(&#34;http&#34;)
 *             .forwardPort(&#34;80&#34;)
 *             .healthCheckHttp(LbBackendHealthCheckHttpArgs.builder()
 *                 .uri(&#34;www.test.com/health&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Load-Balancer backend can be imported using the `{zone}/{id}`, e.g. bash
 * 
 * ```sh
 *  $ pulumi import scaleway:index/lbBackend:LbBackend backend01 fr-par-1/11111111-1111-1111-1111-111111111111
 * ```
 * 
 */
@ResourceType(type="scaleway:index/lbBackend:LbBackend")
public class LbBackend extends com.pulumi.resources.CustomResource {
    /**
     * Scaleway S3 bucket website to be served in case all backend servers are down.
     * &gt; **Note:** Only the host part of the Scaleway S3 bucket website is expected:
     * e.g. &#39;failover-website.s3-website.fr-par.scw.cloud&#39; if your bucket website URL is &#39;https://failover-website.s3-website.fr-par.scw.cloud/&#39;.
     * 
     */
    @Export(name="failoverHost", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> failoverHost;

    /**
     * @return Scaleway S3 bucket website to be served in case all backend servers are down.
     * &gt; **Note:** Only the host part of the Scaleway S3 bucket website is expected:
     * e.g. &#39;failover-website.s3-website.fr-par.scw.cloud&#39; if your bucket website URL is &#39;https://failover-website.s3-website.fr-par.scw.cloud/&#39;.
     * 
     */
    public Output<Optional<String>> failoverHost() {
        return Codegen.optional(this.failoverHost);
    }
    /**
     * User sessions will be forwarded to this port of backend servers.
     * 
     */
    @Export(name="forwardPort", refs={Integer.class}, tree="[0]")
    private Output<Integer> forwardPort;

    /**
     * @return User sessions will be forwarded to this port of backend servers.
     * 
     */
    public Output<Integer> forwardPort() {
        return this.forwardPort;
    }
    /**
     * Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.
     * 
     */
    @Export(name="forwardPortAlgorithm", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> forwardPortAlgorithm;

    /**
     * @return Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.
     * 
     */
    public Output<Optional<String>> forwardPortAlgorithm() {
        return Codegen.optional(this.forwardPortAlgorithm);
    }
    /**
     * Backend protocol. Possible values are: `tcp` or `http`.
     * 
     */
    @Export(name="forwardProtocol", refs={String.class}, tree="[0]")
    private Output<String> forwardProtocol;

    /**
     * @return Backend protocol. Possible values are: `tcp` or `http`.
     * 
     */
    public Output<String> forwardProtocol() {
        return this.forwardProtocol;
    }
    /**
     * Interval between two HC requests.
     * 
     */
    @Export(name="healthCheckDelay", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> healthCheckDelay;

    /**
     * @return Interval between two HC requests.
     * 
     */
    public Output<Optional<String>> healthCheckDelay() {
        return Codegen.optional(this.healthCheckDelay);
    }
    /**
     * This block enable HTTP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.
     * 
     */
    @Export(name="healthCheckHttp", refs={LbBackendHealthCheckHttp.class}, tree="[0]")
    private Output</* @Nullable */ LbBackendHealthCheckHttp> healthCheckHttp;

    /**
     * @return This block enable HTTP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.
     * 
     */
    public Output<Optional<LbBackendHealthCheckHttp>> healthCheckHttp() {
        return Codegen.optional(this.healthCheckHttp);
    }
    /**
     * This block enable HTTPS health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.
     * 
     */
    @Export(name="healthCheckHttps", refs={LbBackendHealthCheckHttps.class}, tree="[0]")
    private Output</* @Nullable */ LbBackendHealthCheckHttps> healthCheckHttps;

    /**
     * @return This block enable HTTPS health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.
     * 
     */
    public Output<Optional<LbBackendHealthCheckHttps>> healthCheckHttps() {
        return Codegen.optional(this.healthCheckHttps);
    }
    /**
     * Number of allowed failed HC requests before the backend server is marked down.
     * 
     */
    @Export(name="healthCheckMaxRetries", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> healthCheckMaxRetries;

    /**
     * @return Number of allowed failed HC requests before the backend server is marked down.
     * 
     */
    public Output<Optional<Integer>> healthCheckMaxRetries() {
        return Codegen.optional(this.healthCheckMaxRetries);
    }
    /**
     * Port the HC requests will be send to.
     * 
     */
    @Export(name="healthCheckPort", refs={Integer.class}, tree="[0]")
    private Output<Integer> healthCheckPort;

    /**
     * @return Port the HC requests will be send to.
     * 
     */
    public Output<Integer> healthCheckPort() {
        return this.healthCheckPort;
    }
    /**
     * This block enable TCP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.
     * 
     */
    @Export(name="healthCheckTcp", refs={LbBackendHealthCheckTcp.class}, tree="[0]")
    private Output<LbBackendHealthCheckTcp> healthCheckTcp;

    /**
     * @return This block enable TCP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.
     * 
     */
    public Output<LbBackendHealthCheckTcp> healthCheckTcp() {
        return this.healthCheckTcp;
    }
    /**
     * Timeout before we consider a HC request failed.
     * 
     */
    @Export(name="healthCheckTimeout", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> healthCheckTimeout;

    /**
     * @return Timeout before we consider a HC request failed.
     * 
     */
    public Output<Optional<String>> healthCheckTimeout() {
        return Codegen.optional(this.healthCheckTimeout);
    }
    /**
     * Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection.
     * 
     */
    @Export(name="ignoreSslServerVerify", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ignoreSslServerVerify;

    /**
     * @return Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection.
     * 
     */
    public Output<Optional<Boolean>> ignoreSslServerVerify() {
        return Codegen.optional(this.ignoreSslServerVerify);
    }
    /**
     * The load-balancer ID this backend is attached to.
     * &gt; **Important:** Updates to `lb_id` will recreate the backend.
     * 
     */
    @Export(name="lbId", refs={String.class}, tree="[0]")
    private Output<String> lbId;

    /**
     * @return The load-balancer ID this backend is attached to.
     * &gt; **Important:** Updates to `lb_id` will recreate the backend.
     * 
     */
    public Output<String> lbId() {
        return this.lbId;
    }
    /**
     * The name of the load-balancer backend.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the load-balancer backend.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdown_sessions`.
     * 
     */
    @Export(name="onMarkedDownAction", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> onMarkedDownAction;

    /**
     * @return Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdown_sessions`.
     * 
     */
    public Output<Optional<String>> onMarkedDownAction() {
        return Codegen.optional(this.onMarkedDownAction);
    }
    /**
     * Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2_ssl`, `v2_ssl_cn`)
     * 
     */
    @Export(name="proxyProtocol", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> proxyProtocol;

    /**
     * @return Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2_ssl`, `v2_ssl_cn`)
     * 
     */
    public Output<Optional<String>> proxyProtocol() {
        return Codegen.optional(this.proxyProtocol);
    }
    /**
     * DEPRECATED please use `proxy_protocol` instead - (Default: `false`) Enables PROXY protocol version 2.
     * 
     * @deprecated
     * Please use proxy_protocol instead
     * 
     */
    @Deprecated /* Please use proxy_protocol instead */
    @Export(name="sendProxyV2", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> sendProxyV2;

    /**
     * @return DEPRECATED please use `proxy_protocol` instead - (Default: `false`) Enables PROXY protocol version 2.
     * 
     */
    public Output<Optional<Boolean>> sendProxyV2() {
        return Codegen.optional(this.sendProxyV2);
    }
    /**
     * List of backend server IP addresses. Addresses can be either IPv4 or IPv6.
     * 
     */
    @Export(name="serverIps", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> serverIps;

    /**
     * @return List of backend server IP addresses. Addresses can be either IPv4 or IPv6.
     * 
     */
    public Output<Optional<List<String>>> serverIps() {
        return Codegen.optional(this.serverIps);
    }
    /**
     * Enables SSL between load balancer and backend servers.
     * 
     */
    @Export(name="sslBridging", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> sslBridging;

    /**
     * @return Enables SSL between load balancer and backend servers.
     * 
     */
    public Output<Optional<Boolean>> sslBridging() {
        return Codegen.optional(this.sslBridging);
    }
    /**
     * Load balancing algorithm. Possible values are: `none`, `cookie` and `table`.
     * 
     */
    @Export(name="stickySessions", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> stickySessions;

    /**
     * @return Load balancing algorithm. Possible values are: `none`, `cookie` and `table`.
     * 
     */
    public Output<Optional<String>> stickySessions() {
        return Codegen.optional(this.stickySessions);
    }
    /**
     * Cookie name for for sticky sessions. Only applicable when sticky_sessions is set to `cookie`.
     * 
     */
    @Export(name="stickySessionsCookieName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> stickySessionsCookieName;

    /**
     * @return Cookie name for for sticky sessions. Only applicable when sticky_sessions is set to `cookie`.
     * 
     */
    public Output<Optional<String>> stickySessionsCookieName() {
        return Codegen.optional(this.stickySessionsCookieName);
    }
    /**
     * Maximum initial server connection establishment time. (e.g.: `1s`)
     * 
     */
    @Export(name="timeoutConnect", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timeoutConnect;

    /**
     * @return Maximum initial server connection establishment time. (e.g.: `1s`)
     * 
     */
    public Output<Optional<String>> timeoutConnect() {
        return Codegen.optional(this.timeoutConnect);
    }
    /**
     * Maximum server connection inactivity time. (e.g.: `1s`)
     * 
     */
    @Export(name="timeoutServer", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timeoutServer;

    /**
     * @return Maximum server connection inactivity time. (e.g.: `1s`)
     * 
     */
    public Output<Optional<String>> timeoutServer() {
        return Codegen.optional(this.timeoutServer);
    }
    /**
     * Maximum tunnel inactivity time. (e.g.: `1s`)
     * 
     */
    @Export(name="timeoutTunnel", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timeoutTunnel;

    /**
     * @return Maximum tunnel inactivity time. (e.g.: `1s`)
     * 
     */
    public Output<Optional<String>> timeoutTunnel() {
        return Codegen.optional(this.timeoutTunnel);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LbBackend(String name) {
        this(name, LbBackendArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LbBackend(String name, LbBackendArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LbBackend(String name, LbBackendArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/lbBackend:LbBackend", name, args == null ? LbBackendArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private LbBackend(String name, Output<String> id, @Nullable LbBackendState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/lbBackend:LbBackend", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LbBackend get(String name, Output<String> id, @Nullable LbBackendState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LbBackend(name, id, state, options);
    }
}
