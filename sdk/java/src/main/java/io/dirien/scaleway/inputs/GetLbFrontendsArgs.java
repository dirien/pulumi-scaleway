// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLbFrontendsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLbFrontendsArgs Empty = new GetLbFrontendsArgs();

    /**
     * The load-balancer ID this frontend is attached to. frontends with a LB ID like it are listed.
     * 
     */
    @Import(name="lbId", required=true)
    private Output<String> lbId;

    /**
     * @return The load-balancer ID this frontend is attached to. frontends with a LB ID like it are listed.
     * 
     */
    public Output<String> lbId() {
        return this.lbId;
    }

    /**
     * The frontend name used as filter. Frontends with a name like it are listed.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The frontend name used as filter. Frontends with a name like it are listed.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * `zone`) The zone in which frontends exist.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return `zone`) The zone in which frontends exist.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private GetLbFrontendsArgs() {}

    private GetLbFrontendsArgs(GetLbFrontendsArgs $) {
        this.lbId = $.lbId;
        this.name = $.name;
        this.projectId = $.projectId;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLbFrontendsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLbFrontendsArgs $;

        public Builder() {
            $ = new GetLbFrontendsArgs();
        }

        public Builder(GetLbFrontendsArgs defaults) {
            $ = new GetLbFrontendsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param lbId The load-balancer ID this frontend is attached to. frontends with a LB ID like it are listed.
         * 
         * @return builder
         * 
         */
        public Builder lbId(Output<String> lbId) {
            $.lbId = lbId;
            return this;
        }

        /**
         * @param lbId The load-balancer ID this frontend is attached to. frontends with a LB ID like it are listed.
         * 
         * @return builder
         * 
         */
        public Builder lbId(String lbId) {
            return lbId(Output.of(lbId));
        }

        /**
         * @param name The frontend name used as filter. Frontends with a name like it are listed.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The frontend name used as filter. Frontends with a name like it are listed.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param zone `zone`) The zone in which frontends exist.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone `zone`) The zone in which frontends exist.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public GetLbFrontendsArgs build() {
            $.lbId = Objects.requireNonNull($.lbId, "expected parameter 'lbId' to be non-null");
            return $;
        }
    }

}
