// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.outputs;

import com.pulumi.core.annotations.CustomType;
import io.dirien.scaleway.outputs.GetLbBackendHealthCheckHttp;
import io.dirien.scaleway.outputs.GetLbBackendHealthCheckTcp;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLbBackendResult {
    private @Nullable String backendId;
    private String failoverHost;
    private Integer forwardPort;
    private String forwardPortAlgorithm;
    private String forwardProtocol;
    private String healthCheckDelay;
    private List<GetLbBackendHealthCheckHttp> healthCheckHttp;
    private List<GetLbBackendHealthCheckHttp> healthCheckHttps;
    private Integer healthCheckMaxRetries;
    private Integer healthCheckPort;
    private List<GetLbBackendHealthCheckTcp> healthCheckTcps;
    private String healthCheckTimeout;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Boolean ignoreSslServerVerify;
    private @Nullable String lbId;
    private @Nullable String name;
    private String onMarkedDownAction;
    private String proxyProtocol;
    private Boolean sendProxyV2;
    private List<String> serverIps;
    private Boolean sslBridging;
    private String stickySessions;
    private String stickySessionsCookieName;
    private String timeoutConnect;
    private String timeoutServer;
    private String timeoutTunnel;

    private GetLbBackendResult() {}
    public Optional<String> backendId() {
        return Optional.ofNullable(this.backendId);
    }
    public String failoverHost() {
        return this.failoverHost;
    }
    public Integer forwardPort() {
        return this.forwardPort;
    }
    public String forwardPortAlgorithm() {
        return this.forwardPortAlgorithm;
    }
    public String forwardProtocol() {
        return this.forwardProtocol;
    }
    public String healthCheckDelay() {
        return this.healthCheckDelay;
    }
    public List<GetLbBackendHealthCheckHttp> healthCheckHttp() {
        return this.healthCheckHttp;
    }
    public List<GetLbBackendHealthCheckHttp> healthCheckHttps() {
        return this.healthCheckHttps;
    }
    public Integer healthCheckMaxRetries() {
        return this.healthCheckMaxRetries;
    }
    public Integer healthCheckPort() {
        return this.healthCheckPort;
    }
    public List<GetLbBackendHealthCheckTcp> healthCheckTcps() {
        return this.healthCheckTcps;
    }
    public String healthCheckTimeout() {
        return this.healthCheckTimeout;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean ignoreSslServerVerify() {
        return this.ignoreSslServerVerify;
    }
    public Optional<String> lbId() {
        return Optional.ofNullable(this.lbId);
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public String onMarkedDownAction() {
        return this.onMarkedDownAction;
    }
    public String proxyProtocol() {
        return this.proxyProtocol;
    }
    public Boolean sendProxyV2() {
        return this.sendProxyV2;
    }
    public List<String> serverIps() {
        return this.serverIps;
    }
    public Boolean sslBridging() {
        return this.sslBridging;
    }
    public String stickySessions() {
        return this.stickySessions;
    }
    public String stickySessionsCookieName() {
        return this.stickySessionsCookieName;
    }
    public String timeoutConnect() {
        return this.timeoutConnect;
    }
    public String timeoutServer() {
        return this.timeoutServer;
    }
    public String timeoutTunnel() {
        return this.timeoutTunnel;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLbBackendResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String backendId;
        private String failoverHost;
        private Integer forwardPort;
        private String forwardPortAlgorithm;
        private String forwardProtocol;
        private String healthCheckDelay;
        private List<GetLbBackendHealthCheckHttp> healthCheckHttp;
        private List<GetLbBackendHealthCheckHttp> healthCheckHttps;
        private Integer healthCheckMaxRetries;
        private Integer healthCheckPort;
        private List<GetLbBackendHealthCheckTcp> healthCheckTcps;
        private String healthCheckTimeout;
        private String id;
        private Boolean ignoreSslServerVerify;
        private @Nullable String lbId;
        private @Nullable String name;
        private String onMarkedDownAction;
        private String proxyProtocol;
        private Boolean sendProxyV2;
        private List<String> serverIps;
        private Boolean sslBridging;
        private String stickySessions;
        private String stickySessionsCookieName;
        private String timeoutConnect;
        private String timeoutServer;
        private String timeoutTunnel;
        public Builder() {}
        public Builder(GetLbBackendResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendId = defaults.backendId;
    	      this.failoverHost = defaults.failoverHost;
    	      this.forwardPort = defaults.forwardPort;
    	      this.forwardPortAlgorithm = defaults.forwardPortAlgorithm;
    	      this.forwardProtocol = defaults.forwardProtocol;
    	      this.healthCheckDelay = defaults.healthCheckDelay;
    	      this.healthCheckHttp = defaults.healthCheckHttp;
    	      this.healthCheckHttps = defaults.healthCheckHttps;
    	      this.healthCheckMaxRetries = defaults.healthCheckMaxRetries;
    	      this.healthCheckPort = defaults.healthCheckPort;
    	      this.healthCheckTcps = defaults.healthCheckTcps;
    	      this.healthCheckTimeout = defaults.healthCheckTimeout;
    	      this.id = defaults.id;
    	      this.ignoreSslServerVerify = defaults.ignoreSslServerVerify;
    	      this.lbId = defaults.lbId;
    	      this.name = defaults.name;
    	      this.onMarkedDownAction = defaults.onMarkedDownAction;
    	      this.proxyProtocol = defaults.proxyProtocol;
    	      this.sendProxyV2 = defaults.sendProxyV2;
    	      this.serverIps = defaults.serverIps;
    	      this.sslBridging = defaults.sslBridging;
    	      this.stickySessions = defaults.stickySessions;
    	      this.stickySessionsCookieName = defaults.stickySessionsCookieName;
    	      this.timeoutConnect = defaults.timeoutConnect;
    	      this.timeoutServer = defaults.timeoutServer;
    	      this.timeoutTunnel = defaults.timeoutTunnel;
        }

        @CustomType.Setter
        public Builder backendId(@Nullable String backendId) {
            this.backendId = backendId;
            return this;
        }
        @CustomType.Setter
        public Builder failoverHost(String failoverHost) {
            this.failoverHost = Objects.requireNonNull(failoverHost);
            return this;
        }
        @CustomType.Setter
        public Builder forwardPort(Integer forwardPort) {
            this.forwardPort = Objects.requireNonNull(forwardPort);
            return this;
        }
        @CustomType.Setter
        public Builder forwardPortAlgorithm(String forwardPortAlgorithm) {
            this.forwardPortAlgorithm = Objects.requireNonNull(forwardPortAlgorithm);
            return this;
        }
        @CustomType.Setter
        public Builder forwardProtocol(String forwardProtocol) {
            this.forwardProtocol = Objects.requireNonNull(forwardProtocol);
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckDelay(String healthCheckDelay) {
            this.healthCheckDelay = Objects.requireNonNull(healthCheckDelay);
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckHttp(List<GetLbBackendHealthCheckHttp> healthCheckHttp) {
            this.healthCheckHttp = Objects.requireNonNull(healthCheckHttp);
            return this;
        }
        public Builder healthCheckHttp(GetLbBackendHealthCheckHttp... healthCheckHttp) {
            return healthCheckHttp(List.of(healthCheckHttp));
        }
        @CustomType.Setter
        public Builder healthCheckHttps(List<GetLbBackendHealthCheckHttp> healthCheckHttps) {
            this.healthCheckHttps = Objects.requireNonNull(healthCheckHttps);
            return this;
        }
        public Builder healthCheckHttps(GetLbBackendHealthCheckHttp... healthCheckHttps) {
            return healthCheckHttps(List.of(healthCheckHttps));
        }
        @CustomType.Setter
        public Builder healthCheckMaxRetries(Integer healthCheckMaxRetries) {
            this.healthCheckMaxRetries = Objects.requireNonNull(healthCheckMaxRetries);
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckPort(Integer healthCheckPort) {
            this.healthCheckPort = Objects.requireNonNull(healthCheckPort);
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckTcps(List<GetLbBackendHealthCheckTcp> healthCheckTcps) {
            this.healthCheckTcps = Objects.requireNonNull(healthCheckTcps);
            return this;
        }
        public Builder healthCheckTcps(GetLbBackendHealthCheckTcp... healthCheckTcps) {
            return healthCheckTcps(List.of(healthCheckTcps));
        }
        @CustomType.Setter
        public Builder healthCheckTimeout(String healthCheckTimeout) {
            this.healthCheckTimeout = Objects.requireNonNull(healthCheckTimeout);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ignoreSslServerVerify(Boolean ignoreSslServerVerify) {
            this.ignoreSslServerVerify = Objects.requireNonNull(ignoreSslServerVerify);
            return this;
        }
        @CustomType.Setter
        public Builder lbId(@Nullable String lbId) {
            this.lbId = lbId;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder onMarkedDownAction(String onMarkedDownAction) {
            this.onMarkedDownAction = Objects.requireNonNull(onMarkedDownAction);
            return this;
        }
        @CustomType.Setter
        public Builder proxyProtocol(String proxyProtocol) {
            this.proxyProtocol = Objects.requireNonNull(proxyProtocol);
            return this;
        }
        @CustomType.Setter
        public Builder sendProxyV2(Boolean sendProxyV2) {
            this.sendProxyV2 = Objects.requireNonNull(sendProxyV2);
            return this;
        }
        @CustomType.Setter
        public Builder serverIps(List<String> serverIps) {
            this.serverIps = Objects.requireNonNull(serverIps);
            return this;
        }
        public Builder serverIps(String... serverIps) {
            return serverIps(List.of(serverIps));
        }
        @CustomType.Setter
        public Builder sslBridging(Boolean sslBridging) {
            this.sslBridging = Objects.requireNonNull(sslBridging);
            return this;
        }
        @CustomType.Setter
        public Builder stickySessions(String stickySessions) {
            this.stickySessions = Objects.requireNonNull(stickySessions);
            return this;
        }
        @CustomType.Setter
        public Builder stickySessionsCookieName(String stickySessionsCookieName) {
            this.stickySessionsCookieName = Objects.requireNonNull(stickySessionsCookieName);
            return this;
        }
        @CustomType.Setter
        public Builder timeoutConnect(String timeoutConnect) {
            this.timeoutConnect = Objects.requireNonNull(timeoutConnect);
            return this;
        }
        @CustomType.Setter
        public Builder timeoutServer(String timeoutServer) {
            this.timeoutServer = Objects.requireNonNull(timeoutServer);
            return this;
        }
        @CustomType.Setter
        public Builder timeoutTunnel(String timeoutTunnel) {
            this.timeoutTunnel = Objects.requireNonNull(timeoutTunnel);
            return this;
        }
        public GetLbBackendResult build() {
            final var o = new GetLbBackendResult();
            o.backendId = backendId;
            o.failoverHost = failoverHost;
            o.forwardPort = forwardPort;
            o.forwardPortAlgorithm = forwardPortAlgorithm;
            o.forwardProtocol = forwardProtocol;
            o.healthCheckDelay = healthCheckDelay;
            o.healthCheckHttp = healthCheckHttp;
            o.healthCheckHttps = healthCheckHttps;
            o.healthCheckMaxRetries = healthCheckMaxRetries;
            o.healthCheckPort = healthCheckPort;
            o.healthCheckTcps = healthCheckTcps;
            o.healthCheckTimeout = healthCheckTimeout;
            o.id = id;
            o.ignoreSslServerVerify = ignoreSslServerVerify;
            o.lbId = lbId;
            o.name = name;
            o.onMarkedDownAction = onMarkedDownAction;
            o.proxyProtocol = proxyProtocol;
            o.sendProxyV2 = sendProxyV2;
            o.serverIps = serverIps;
            o.sslBridging = sslBridging;
            o.stickySessions = stickySessions;
            o.stickySessionsCookieName = stickySessionsCookieName;
            o.timeoutConnect = timeoutConnect;
            o.timeoutServer = timeoutServer;
            o.timeoutTunnel = timeoutTunnel;
            return o;
        }
    }
}
