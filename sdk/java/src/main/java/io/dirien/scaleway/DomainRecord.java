// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.dirien.scaleway.DomainRecordArgs;
import io.dirien.scaleway.Utilities;
import io.dirien.scaleway.inputs.DomainRecordState;
import io.dirien.scaleway.outputs.DomainRecordGeoIp;
import io.dirien.scaleway.outputs.DomainRecordHttpService;
import io.dirien.scaleway.outputs.DomainRecordView;
import io.dirien.scaleway.outputs.DomainRecordWeighted;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates and manages Scaleway Domain record.\
 * For more information, see [the documentation](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/).
 * 
 * ## Examples
 * 
 * ### Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.DomainRecord;
 * import com.pulumi.scaleway.DomainRecordArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var www = new DomainRecord(&#34;www&#34;, DomainRecordArgs.builder()        
 *             .data(&#34;1.2.3.4&#34;)
 *             .dnsZone(&#34;domain.tld&#34;)
 *             .ttl(3600)
 *             .type(&#34;A&#34;)
 *             .build());
 * 
 *         var www2 = new DomainRecord(&#34;www2&#34;, DomainRecordArgs.builder()        
 *             .data(&#34;1.2.3.5&#34;)
 *             .dnsZone(&#34;domain.tld&#34;)
 *             .ttl(3600)
 *             .type(&#34;A&#34;)
 *             .build());
 * 
 *         var mx = new DomainRecord(&#34;mx&#34;, DomainRecordArgs.builder()        
 *             .data(&#34;mx.online.net.&#34;)
 *             .dnsZone(&#34;domain.tld&#34;)
 *             .priority(10)
 *             .ttl(3600)
 *             .type(&#34;MX&#34;)
 *             .build());
 * 
 *         var mx2 = new DomainRecord(&#34;mx2&#34;, DomainRecordArgs.builder()        
 *             .data(&#34;mx-cache.online.net.&#34;)
 *             .dnsZone(&#34;domain.tld&#34;)
 *             .priority(20)
 *             .ttl(3600)
 *             .type(&#34;MX&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ### With dynamic records
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.DomainRecord;
 * import com.pulumi.scaleway.DomainRecordArgs;
 * import com.pulumi.scaleway.inputs.DomainRecordGeoIpArgs;
 * import com.pulumi.scaleway.inputs.DomainRecordHttpServiceArgs;
 * import com.pulumi.scaleway.inputs.DomainRecordViewArgs;
 * import com.pulumi.scaleway.inputs.DomainRecordWeightedArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var geoIp = new DomainRecord(&#34;geoIp&#34;, DomainRecordArgs.builder()        
 *             .data(&#34;1.2.3.4&#34;)
 *             .dnsZone(&#34;domain.tld&#34;)
 *             .geoIp(DomainRecordGeoIpArgs.builder()
 *                 .matches(                
 *                     DomainRecordGeoIpMatchArgs.builder()
 *                         .continents(&#34;EU&#34;)
 *                         .countries(&#34;FR&#34;)
 *                         .data(&#34;1.2.3.5&#34;)
 *                         .build(),
 *                     DomainRecordGeoIpMatchArgs.builder()
 *                         .continents(&#34;NA&#34;)
 *                         .data(&#34;4.3.2.1&#34;)
 *                         .build())
 *                 .build())
 *             .ttl(3600)
 *             .type(&#34;A&#34;)
 *             .build());
 * 
 *         var httpService = new DomainRecord(&#34;httpService&#34;, DomainRecordArgs.builder()        
 *             .data(&#34;1.2.3.4&#34;)
 *             .dnsZone(&#34;domain.tld&#34;)
 *             .httpService(DomainRecordHttpServiceArgs.builder()
 *                 .ips(                
 *                     &#34;1.2.3.5&#34;,
 *                     &#34;1.2.3.6&#34;)
 *                 .mustContain(&#34;up&#34;)
 *                 .strategy(&#34;hashed&#34;)
 *                 .url(&#34;http://mywebsite.com/health&#34;)
 *                 .userAgent(&#34;scw_service_up&#34;)
 *                 .build())
 *             .ttl(3600)
 *             .type(&#34;A&#34;)
 *             .build());
 * 
 *         var view = new DomainRecord(&#34;view&#34;, DomainRecordArgs.builder()        
 *             .data(&#34;1.2.3.4&#34;)
 *             .dnsZone(&#34;domain.tld&#34;)
 *             .ttl(3600)
 *             .type(&#34;A&#34;)
 *             .views(            
 *                 DomainRecordViewArgs.builder()
 *                     .data(&#34;1.2.3.5&#34;)
 *                     .subnet(&#34;100.0.0.0/16&#34;)
 *                     .build(),
 *                 DomainRecordViewArgs.builder()
 *                     .data(&#34;1.2.3.6&#34;)
 *                     .subnet(&#34;100.1.0.0/16&#34;)
 *                     .build())
 *             .build());
 * 
 *         var weighted = new DomainRecord(&#34;weighted&#34;, DomainRecordArgs.builder()        
 *             .data(&#34;1.2.3.4&#34;)
 *             .dnsZone(&#34;domain.tld&#34;)
 *             .ttl(3600)
 *             .type(&#34;A&#34;)
 *             .weighteds(            
 *                 DomainRecordWeightedArgs.builder()
 *                     .ip(&#34;1.2.3.5&#34;)
 *                     .weight(1)
 *                     .build(),
 *                 DomainRecordWeightedArgs.builder()
 *                     .ip(&#34;1.2.3.6&#34;)
 *                     .weight(2)
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ### Create an instance and add records with the new instance IP
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.InstanceIp;
 * import com.pulumi.scaleway.InstanceIpArgs;
 * import com.pulumi.scaleway.InstanceServer;
 * import com.pulumi.scaleway.InstanceServerArgs;
 * import com.pulumi.scaleway.inputs.InstanceServerRootVolumeArgs;
 * import com.pulumi.scaleway.DomainRecord;
 * import com.pulumi.scaleway.DomainRecordArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var projectId = config.get(&#34;projectId&#34;);
 *         final var dnsZone = config.get(&#34;dnsZone&#34;);
 *         var publicIp = new InstanceIp(&#34;publicIp&#34;, InstanceIpArgs.builder()        
 *             .projectId(projectId)
 *             .build());
 * 
 *         var web = new InstanceServer(&#34;web&#34;, InstanceServerArgs.builder()        
 *             .projectId(projectId)
 *             .type(&#34;DEV1-S&#34;)
 *             .image(&#34;ubuntu_jammy&#34;)
 *             .tags(            
 *                 &#34;front&#34;,
 *                 &#34;web&#34;)
 *             .ipId(publicIp.id())
 *             .rootVolume(InstanceServerRootVolumeArgs.builder()
 *                 .sizeInGb(20)
 *                 .build())
 *             .build());
 * 
 *         var webA = new DomainRecord(&#34;webA&#34;, DomainRecordArgs.builder()        
 *             .dnsZone(dnsZone)
 *             .type(&#34;A&#34;)
 *             .data(web.publicIp())
 *             .ttl(3600)
 *             .build());
 * 
 *         var webCname = new DomainRecord(&#34;webCname&#34;, DomainRecordArgs.builder()        
 *             .dnsZone(dnsZone)
 *             .type(&#34;CNAME&#34;)
 *             .data(String.format(&#34;web.%s.&#34;, dnsZone))
 *             .ttl(3600)
 *             .build());
 * 
 *         var webAlias = new DomainRecord(&#34;webAlias&#34;, DomainRecordArgs.builder()        
 *             .dnsZone(dnsZone)
 *             .type(&#34;ALIAS&#34;)
 *             .data(String.format(&#34;web.%s.&#34;, dnsZone))
 *             .ttl(3600)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Multiple records
 * 
 * Some record types can have multiple `data` with the same `name` (eg: `A`, `AAAA`, `MX`, `NS`...).\
 * You can duplicate a resource `scaleway.DomainRecord` with the same `name`, the records will be added.
 * 
 * Please note, some record (eg: `CNAME`, Multiple dynamic records of different types...) has to be unique.
 * 
 * ## Import
 * 
 * Record can be imported using the `{dns_zone}/{id}`, e.g. bash
 * 
 * ```sh
 *  $ pulumi import scaleway:index/domainRecord:DomainRecord www subdomain.domain.tld/11111111-1111-1111-1111-111111111111
 * ```
 * 
 */
@ResourceType(type="scaleway:index/domainRecord:DomainRecord")
public class DomainRecord extends com.pulumi.resources.CustomResource {
    /**
     * The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
     * 
     */
    @Export(name="data", refs={String.class}, tree="[0]")
    private Output<String> data;

    /**
     * @return The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
     * 
     */
    public Output<String> data() {
        return this.data;
    }
    /**
     * The DNS Zone of the domain. If the DNS zone doesn&#39;t exist, it will be automatically created.
     * 
     */
    @Export(name="dnsZone", refs={String.class}, tree="[0]")
    private Output<String> dnsZone;

    /**
     * @return The DNS Zone of the domain. If the DNS zone doesn&#39;t exist, it will be automatically created.
     * 
     */
    public Output<String> dnsZone() {
        return this.dnsZone;
    }
    /**
     * The Geo IP feature provides DNS resolution, based on the user’s geographical location. You can define a default IP that resolves if no Geo IP rule matches, and specify IPs for each geographical zone. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#geo-ip-records)
     * 
     */
    @Export(name="geoIp", refs={DomainRecordGeoIp.class}, tree="[0]")
    private Output</* @Nullable */ DomainRecordGeoIp> geoIp;

    /**
     * @return The Geo IP feature provides DNS resolution, based on the user’s geographical location. You can define a default IP that resolves if no Geo IP rule matches, and specify IPs for each geographical zone. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#geo-ip-records)
     * 
     */
    public Output<Optional<DomainRecordGeoIp>> geoIp() {
        return Codegen.optional(this.geoIp);
    }
    /**
     * The DNS service checks the provided URL on the configured IPs and resolves the request to one of the IPs by excluding the ones not responding to the given string to check. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#healthcheck-records)
     * 
     */
    @Export(name="httpService", refs={DomainRecordHttpService.class}, tree="[0]")
    private Output</* @Nullable */ DomainRecordHttpService> httpService;

    /**
     * @return The DNS service checks the provided URL on the configured IPs and resolves the request to one of the IPs by excluding the ones not responding to the given string to check. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#healthcheck-records)
     * 
     */
    public Output<Optional<DomainRecordHttpService>> httpService() {
        return Codegen.optional(this.httpService);
    }
    /**
     * When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Please note, each zone not deleted will [cost you money](https://www.scaleway.com/en/dns/)
     * 
     */
    @Export(name="keepEmptyZone", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> keepEmptyZone;

    /**
     * @return When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Please note, each zone not deleted will [cost you money](https://www.scaleway.com/en/dns/)
     * 
     */
    public Output<Optional<Boolean>> keepEmptyZone() {
        return Codegen.optional(this.keepEmptyZone);
    }
    /**
     * The name of the record (can be an empty string for a root record).
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the record (can be an empty string for a root record).
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The priority of the record (mostly used with an `MX` record)
     * 
     */
    @Export(name="priority", refs={Integer.class}, tree="[0]")
    private Output<Integer> priority;

    /**
     * @return The priority of the record (mostly used with an `MX` record)
     * 
     */
    public Output<Integer> priority() {
        return this.priority;
    }
    /**
     * The project_id you want to attach the resource to
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return The project_id you want to attach the resource to
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Does the DNS zone is the root zone or not
     * 
     */
    @Export(name="rootZone", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> rootZone;

    /**
     * @return Does the DNS zone is the root zone or not
     * 
     */
    public Output<Boolean> rootZone() {
        return this.rootZone;
    }
    /**
     * Time To Live of the record in seconds.
     * 
     */
    @Export(name="ttl", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ttl;

    /**
     * @return Time To Live of the record in seconds.
     * 
     */
    public Output<Optional<Integer>> ttl() {
        return Codegen.optional(this.ttl);
    }
    /**
     * The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * The answer to a DNS request is based on the client’s (resolver) subnet. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#views-records)
     * 
     */
    @Export(name="views", refs={List.class,DomainRecordView.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DomainRecordView>> views;

    /**
     * @return The answer to a DNS request is based on the client’s (resolver) subnet. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#views-records)
     * 
     */
    public Output<Optional<List<DomainRecordView>>> views() {
        return Codegen.optional(this.views);
    }
    /**
     * You provide a list of IPs with their corresponding weights. These weights are used to proportionally direct requests to each IP. Depending on the weight of a record more or fewer requests are answered with its related IP compared to the others in the list. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#weight-records)
     * 
     */
    @Export(name="weighteds", refs={List.class,DomainRecordWeighted.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DomainRecordWeighted>> weighteds;

    /**
     * @return You provide a list of IPs with their corresponding weights. These weights are used to proportionally direct requests to each IP. Depending on the weight of a record more or fewer requests are answered with its related IP compared to the others in the list. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#weight-records)
     * 
     */
    public Output<Optional<List<DomainRecordWeighted>>> weighteds() {
        return Codegen.optional(this.weighteds);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DomainRecord(String name) {
        this(name, DomainRecordArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DomainRecord(String name, DomainRecordArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DomainRecord(String name, DomainRecordArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/domainRecord:DomainRecord", name, args == null ? DomainRecordArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DomainRecord(String name, Output<String> id, @Nullable DomainRecordState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/domainRecord:DomainRecord", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DomainRecord get(String name, Output<String> id, @Nullable DomainRecordState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DomainRecord(name, id, state, options);
    }
}
