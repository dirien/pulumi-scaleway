// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainRecordHttpServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainRecordHttpServiceArgs Empty = new DomainRecordHttpServiceArgs();

    /**
     * List of IPs to check
     * 
     */
    @Import(name="ips", required=true)
    private Output<List<String>> ips;

    /**
     * @return List of IPs to check
     * 
     */
    public Output<List<String>> ips() {
        return this.ips;
    }

    /**
     * Text to search
     * 
     */
    @Import(name="mustContain", required=true)
    private Output<String> mustContain;

    /**
     * @return Text to search
     * 
     */
    public Output<String> mustContain() {
        return this.mustContain;
    }

    /**
     * Strategy to return an IP from the IPs list. Can be `random` or `hashed`
     * 
     */
    @Import(name="strategy", required=true)
    private Output<String> strategy;

    /**
     * @return Strategy to return an IP from the IPs list. Can be `random` or `hashed`
     * 
     */
    public Output<String> strategy() {
        return this.strategy;
    }

    /**
     * URL to match the `must_contain` text to validate an IP
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return URL to match the `must_contain` text to validate an IP
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     * User-agent used when checking the URL
     * 
     */
    @Import(name="userAgent")
    private @Nullable Output<String> userAgent;

    /**
     * @return User-agent used when checking the URL
     * 
     */
    public Optional<Output<String>> userAgent() {
        return Optional.ofNullable(this.userAgent);
    }

    private DomainRecordHttpServiceArgs() {}

    private DomainRecordHttpServiceArgs(DomainRecordHttpServiceArgs $) {
        this.ips = $.ips;
        this.mustContain = $.mustContain;
        this.strategy = $.strategy;
        this.url = $.url;
        this.userAgent = $.userAgent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainRecordHttpServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainRecordHttpServiceArgs $;

        public Builder() {
            $ = new DomainRecordHttpServiceArgs();
        }

        public Builder(DomainRecordHttpServiceArgs defaults) {
            $ = new DomainRecordHttpServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ips List of IPs to check
         * 
         * @return builder
         * 
         */
        public Builder ips(Output<List<String>> ips) {
            $.ips = ips;
            return this;
        }

        /**
         * @param ips List of IPs to check
         * 
         * @return builder
         * 
         */
        public Builder ips(List<String> ips) {
            return ips(Output.of(ips));
        }

        /**
         * @param ips List of IPs to check
         * 
         * @return builder
         * 
         */
        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }

        /**
         * @param mustContain Text to search
         * 
         * @return builder
         * 
         */
        public Builder mustContain(Output<String> mustContain) {
            $.mustContain = mustContain;
            return this;
        }

        /**
         * @param mustContain Text to search
         * 
         * @return builder
         * 
         */
        public Builder mustContain(String mustContain) {
            return mustContain(Output.of(mustContain));
        }

        /**
         * @param strategy Strategy to return an IP from the IPs list. Can be `random` or `hashed`
         * 
         * @return builder
         * 
         */
        public Builder strategy(Output<String> strategy) {
            $.strategy = strategy;
            return this;
        }

        /**
         * @param strategy Strategy to return an IP from the IPs list. Can be `random` or `hashed`
         * 
         * @return builder
         * 
         */
        public Builder strategy(String strategy) {
            return strategy(Output.of(strategy));
        }

        /**
         * @param url URL to match the `must_contain` text to validate an IP
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url URL to match the `must_contain` text to validate an IP
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param userAgent User-agent used when checking the URL
         * 
         * @return builder
         * 
         */
        public Builder userAgent(@Nullable Output<String> userAgent) {
            $.userAgent = userAgent;
            return this;
        }

        /**
         * @param userAgent User-agent used when checking the URL
         * 
         * @return builder
         * 
         */
        public Builder userAgent(String userAgent) {
            return userAgent(Output.of(userAgent));
        }

        public DomainRecordHttpServiceArgs build() {
            $.ips = Objects.requireNonNull($.ips, "expected parameter 'ips' to be non-null");
            $.mustContain = Objects.requireNonNull($.mustContain, "expected parameter 'mustContain' to be non-null");
            $.strategy = Objects.requireNonNull($.strategy, "expected parameter 'strategy' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
