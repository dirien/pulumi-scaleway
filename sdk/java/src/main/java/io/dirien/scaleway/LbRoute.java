// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.dirien.scaleway.LbRouteArgs;
import io.dirien.scaleway.Utilities;
import io.dirien.scaleway.inputs.LbRouteState;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates and manages Scaleway Load-Balancer Routes. For more information, see [the documentation](https://developers.scaleway.com/en/products/lb/zoned_api/#route-ff94b7).
 * It is useful to manage the Service Name Indicator (SNI) for a route between a frontend and a backend.
 * 
 * ## Examples
 * 
 * ### With SNI
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.LbIp;
 * import com.pulumi.scaleway.Lb;
 * import com.pulumi.scaleway.LbArgs;
 * import com.pulumi.scaleway.LbBackend;
 * import com.pulumi.scaleway.LbBackendArgs;
 * import com.pulumi.scaleway.LbFrontend;
 * import com.pulumi.scaleway.LbFrontendArgs;
 * import com.pulumi.scaleway.LbRoute;
 * import com.pulumi.scaleway.LbRouteArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var ip01 = new LbIp(&#34;ip01&#34;);
 * 
 *         var lb01 = new Lb(&#34;lb01&#34;, LbArgs.builder()        
 *             .ipId(ip01.id())
 *             .type(&#34;lb-s&#34;)
 *             .build());
 * 
 *         var bkd01 = new LbBackend(&#34;bkd01&#34;, LbBackendArgs.builder()        
 *             .lbId(lb01.id())
 *             .forwardProtocol(&#34;tcp&#34;)
 *             .forwardPort(80)
 *             .proxyProtocol(&#34;none&#34;)
 *             .build());
 * 
 *         var frt01 = new LbFrontend(&#34;frt01&#34;, LbFrontendArgs.builder()        
 *             .lbId(lb01.id())
 *             .backendId(bkd01.id())
 *             .inboundPort(80)
 *             .build());
 * 
 *         var rt01 = new LbRoute(&#34;rt01&#34;, LbRouteArgs.builder()        
 *             .frontendId(frt01.id())
 *             .backendId(bkd01.id())
 *             .matchSni(&#34;sni.scaleway.com&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ### With host-header
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.LbIp;
 * import com.pulumi.scaleway.Lb;
 * import com.pulumi.scaleway.LbArgs;
 * import com.pulumi.scaleway.LbBackend;
 * import com.pulumi.scaleway.LbBackendArgs;
 * import com.pulumi.scaleway.LbFrontend;
 * import com.pulumi.scaleway.LbFrontendArgs;
 * import com.pulumi.scaleway.LbRoute;
 * import com.pulumi.scaleway.LbRouteArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var ip01 = new LbIp(&#34;ip01&#34;);
 * 
 *         var lb01 = new Lb(&#34;lb01&#34;, LbArgs.builder()        
 *             .ipId(ip01.id())
 *             .type(&#34;lb-s&#34;)
 *             .build());
 * 
 *         var bkd01 = new LbBackend(&#34;bkd01&#34;, LbBackendArgs.builder()        
 *             .lbId(lb01.id())
 *             .forwardProtocol(&#34;tcp&#34;)
 *             .forwardPort(80)
 *             .proxyProtocol(&#34;none&#34;)
 *             .build());
 * 
 *         var frt01 = new LbFrontend(&#34;frt01&#34;, LbFrontendArgs.builder()        
 *             .lbId(lb01.id())
 *             .backendId(bkd01.id())
 *             .inboundPort(80)
 *             .build());
 * 
 *         var rt01 = new LbRoute(&#34;rt01&#34;, LbRouteArgs.builder()        
 *             .frontendId(frt01.id())
 *             .backendId(bkd01.id())
 *             .matchHostHeader(&#34;host.scaleway.com&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Load-Balancer frontend can be imported using the `{zone}/{id}`, e.g. bash
 * 
 * ```sh
 *  $ pulumi import scaleway:index/lbRoute:LbRoute main fr-par-1/11111111-1111-1111-1111-111111111111
 * ```
 * 
 */
@ResourceType(type="scaleway:index/lbRoute:LbRoute")
public class LbRoute extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the backend to which the route is associated.
     * 
     */
    @Export(name="backendId", refs={String.class}, tree="[0]")
    private Output<String> backendId;

    /**
     * @return The ID of the backend to which the route is associated.
     * 
     */
    public Output<String> backendId() {
        return this.backendId;
    }
    /**
     * The date at which the route was created.
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return The date at which the route was created.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * The ID of the frontend to which the route is associated.
     * 
     */
    @Export(name="frontendId", refs={String.class}, tree="[0]")
    private Output<String> frontendId;

    /**
     * @return The ID of the frontend to which the route is associated.
     * 
     */
    public Output<String> frontendId() {
        return this.frontendId;
    }
    /**
     * The Host request header specifies the host of the server to which the request is being sent.
     * Only one of `match_sni` and `match_host_header` should be specified.
     * 
     */
    @Export(name="matchHostHeader", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> matchHostHeader;

    /**
     * @return The Host request header specifies the host of the server to which the request is being sent.
     * Only one of `match_sni` and `match_host_header` should be specified.
     * 
     */
    public Output<Optional<String>> matchHostHeader() {
        return Codegen.optional(this.matchHostHeader);
    }
    /**
     * The Server Name Indication TLS extension field from an incoming connection made via an SSL/TLS transport layer.
     * Only one of `match_sni` and `match_host_header` should be specified.
     * 
     */
    @Export(name="matchSni", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> matchSni;

    /**
     * @return The Server Name Indication TLS extension field from an incoming connection made via an SSL/TLS transport layer.
     * Only one of `match_sni` and `match_host_header` should be specified.
     * 
     */
    public Output<Optional<String>> matchSni() {
        return Codegen.optional(this.matchSni);
    }
    /**
     * The date at which the route was last updated.
     * 
     */
    @Export(name="updatedAt", refs={String.class}, tree="[0]")
    private Output<String> updatedAt;

    /**
     * @return The date at which the route was last updated.
     * 
     */
    public Output<String> updatedAt() {
        return this.updatedAt;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LbRoute(String name) {
        this(name, LbRouteArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LbRoute(String name, LbRouteArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LbRoute(String name, LbRouteArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/lbRoute:LbRoute", name, args == null ? LbRouteArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private LbRoute(String name, Output<String> id, @Nullable LbRouteState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/lbRoute:LbRoute", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LbRoute get(String name, Output<String> id, @Nullable LbRouteState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LbRoute(name, id, state, options);
    }
}
