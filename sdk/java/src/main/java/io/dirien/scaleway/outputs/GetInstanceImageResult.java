// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInstanceImageResult {
    /**
     * @return IDs of the additional volumes in this image.
     * 
     */
    private List<String> additionalVolumeIds;
    private @Nullable String architecture;
    /**
     * @return Date of the image creation.
     * 
     */
    private String creationDate;
    /**
     * @return ID of the default bootscript for this image.
     * 
     */
    private String defaultBootscriptId;
    /**
     * @return ID of the server the image if based from.
     * 
     */
    private String fromServerId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String imageId;
    private @Nullable Boolean latest;
    /**
     * @return Date of image latest update.
     * 
     */
    private String modificationDate;
    private @Nullable String name;
    /**
     * @return The ID of the organization the image is associated with.
     * 
     */
    private String organizationId;
    /**
     * @return The ID of the project the image is associated with.
     * 
     */
    private String projectId;
    /**
     * @return Set to `true` if the image is public.
     * 
     */
    private Boolean public_;
    /**
     * @return ID of the root volume in this image.
     * 
     */
    private String rootVolumeId;
    /**
     * @return State of the image. Possible values are: `available`, `creating` or `error`.
     * 
     */
    private String state;
    private String zone;

    private GetInstanceImageResult() {}
    /**
     * @return IDs of the additional volumes in this image.
     * 
     */
    public List<String> additionalVolumeIds() {
        return this.additionalVolumeIds;
    }
    public Optional<String> architecture() {
        return Optional.ofNullable(this.architecture);
    }
    /**
     * @return Date of the image creation.
     * 
     */
    public String creationDate() {
        return this.creationDate;
    }
    /**
     * @return ID of the default bootscript for this image.
     * 
     */
    public String defaultBootscriptId() {
        return this.defaultBootscriptId;
    }
    /**
     * @return ID of the server the image if based from.
     * 
     */
    public String fromServerId() {
        return this.fromServerId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> imageId() {
        return Optional.ofNullable(this.imageId);
    }
    public Optional<Boolean> latest() {
        return Optional.ofNullable(this.latest);
    }
    /**
     * @return Date of image latest update.
     * 
     */
    public String modificationDate() {
        return this.modificationDate;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The ID of the organization the image is associated with.
     * 
     */
    public String organizationId() {
        return this.organizationId;
    }
    /**
     * @return The ID of the project the image is associated with.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Set to `true` if the image is public.
     * 
     */
    public Boolean public_() {
        return this.public_;
    }
    /**
     * @return ID of the root volume in this image.
     * 
     */
    public String rootVolumeId() {
        return this.rootVolumeId;
    }
    /**
     * @return State of the image. Possible values are: `available`, `creating` or `error`.
     * 
     */
    public String state() {
        return this.state;
    }
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceImageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> additionalVolumeIds;
        private @Nullable String architecture;
        private String creationDate;
        private String defaultBootscriptId;
        private String fromServerId;
        private String id;
        private @Nullable String imageId;
        private @Nullable Boolean latest;
        private String modificationDate;
        private @Nullable String name;
        private String organizationId;
        private String projectId;
        private Boolean public_;
        private String rootVolumeId;
        private String state;
        private String zone;
        public Builder() {}
        public Builder(GetInstanceImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalVolumeIds = defaults.additionalVolumeIds;
    	      this.architecture = defaults.architecture;
    	      this.creationDate = defaults.creationDate;
    	      this.defaultBootscriptId = defaults.defaultBootscriptId;
    	      this.fromServerId = defaults.fromServerId;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.latest = defaults.latest;
    	      this.modificationDate = defaults.modificationDate;
    	      this.name = defaults.name;
    	      this.organizationId = defaults.organizationId;
    	      this.projectId = defaults.projectId;
    	      this.public_ = defaults.public_;
    	      this.rootVolumeId = defaults.rootVolumeId;
    	      this.state = defaults.state;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder additionalVolumeIds(List<String> additionalVolumeIds) {
            this.additionalVolumeIds = Objects.requireNonNull(additionalVolumeIds);
            return this;
        }
        public Builder additionalVolumeIds(String... additionalVolumeIds) {
            return additionalVolumeIds(List.of(additionalVolumeIds));
        }
        @CustomType.Setter
        public Builder architecture(@Nullable String architecture) {
            this.architecture = architecture;
            return this;
        }
        @CustomType.Setter
        public Builder creationDate(String creationDate) {
            this.creationDate = Objects.requireNonNull(creationDate);
            return this;
        }
        @CustomType.Setter
        public Builder defaultBootscriptId(String defaultBootscriptId) {
            this.defaultBootscriptId = Objects.requireNonNull(defaultBootscriptId);
            return this;
        }
        @CustomType.Setter
        public Builder fromServerId(String fromServerId) {
            this.fromServerId = Objects.requireNonNull(fromServerId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder imageId(@Nullable String imageId) {
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder latest(@Nullable Boolean latest) {
            this.latest = latest;
            return this;
        }
        @CustomType.Setter
        public Builder modificationDate(String modificationDate) {
            this.modificationDate = Objects.requireNonNull(modificationDate);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder organizationId(String organizationId) {
            this.organizationId = Objects.requireNonNull(organizationId);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter("public")
        public Builder public_(Boolean public_) {
            this.public_ = Objects.requireNonNull(public_);
            return this;
        }
        @CustomType.Setter
        public Builder rootVolumeId(String rootVolumeId) {
            this.rootVolumeId = Objects.requireNonNull(rootVolumeId);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder zone(String zone) {
            this.zone = Objects.requireNonNull(zone);
            return this;
        }
        public GetInstanceImageResult build() {
            final var o = new GetInstanceImageResult();
            o.additionalVolumeIds = additionalVolumeIds;
            o.architecture = architecture;
            o.creationDate = creationDate;
            o.defaultBootscriptId = defaultBootscriptId;
            o.fromServerId = fromServerId;
            o.id = id;
            o.imageId = imageId;
            o.latest = latest;
            o.modificationDate = modificationDate;
            o.name = name;
            o.organizationId = organizationId;
            o.projectId = projectId;
            o.public_ = public_;
            o.rootVolumeId = rootVolumeId;
            o.state = state;
            o.zone = zone;
            return o;
        }
    }
}
