// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcPublicGatewayDhcpReservationState extends com.pulumi.resources.ResourceArgs {

    public static final VpcPublicGatewayDhcpReservationState Empty = new VpcPublicGatewayDhcpReservationState();

    /**
     * The date and time of the creation of the public gateway DHCP config.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The date and time of the creation of the public gateway DHCP config.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The ID of the owning GatewayNetwork.
     * 
     */
    @Import(name="gatewayNetworkId")
    private @Nullable Output<String> gatewayNetworkId;

    /**
     * @return The ID of the owning GatewayNetwork.
     * 
     */
    public Optional<Output<String>> gatewayNetworkId() {
        return Optional.ofNullable(this.gatewayNetworkId);
    }

    /**
     * The Hostname of the client machine.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The Hostname of the client machine.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * The IP address to give to the machine (IP address).
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return The IP address to give to the machine (IP address).
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The MAC address to give a static entry to.
     * 
     */
    @Import(name="macAddress")
    private @Nullable Output<String> macAddress;

    /**
     * @return The MAC address to give a static entry to.
     * 
     */
    public Optional<Output<String>> macAddress() {
        return Optional.ofNullable(this.macAddress);
    }

    /**
     * The reservation type, either static (DHCP reservation) or dynamic (DHCP lease). Possible values are reservation and lease.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The reservation type, either static (DHCP reservation) or dynamic (DHCP lease). Possible values are reservation and lease.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The date and time of the last update of the public gateway DHCP config.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return The date and time of the last update of the public gateway DHCP config.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * `zone`) The zone in which the public gateway DHCP config should be created.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return `zone`) The zone in which the public gateway DHCP config should be created.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private VpcPublicGatewayDhcpReservationState() {}

    private VpcPublicGatewayDhcpReservationState(VpcPublicGatewayDhcpReservationState $) {
        this.createdAt = $.createdAt;
        this.gatewayNetworkId = $.gatewayNetworkId;
        this.hostname = $.hostname;
        this.ipAddress = $.ipAddress;
        this.macAddress = $.macAddress;
        this.type = $.type;
        this.updatedAt = $.updatedAt;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcPublicGatewayDhcpReservationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcPublicGatewayDhcpReservationState $;

        public Builder() {
            $ = new VpcPublicGatewayDhcpReservationState();
        }

        public Builder(VpcPublicGatewayDhcpReservationState defaults) {
            $ = new VpcPublicGatewayDhcpReservationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt The date and time of the creation of the public gateway DHCP config.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The date and time of the creation of the public gateway DHCP config.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param gatewayNetworkId The ID of the owning GatewayNetwork.
         * 
         * @return builder
         * 
         */
        public Builder gatewayNetworkId(@Nullable Output<String> gatewayNetworkId) {
            $.gatewayNetworkId = gatewayNetworkId;
            return this;
        }

        /**
         * @param gatewayNetworkId The ID of the owning GatewayNetwork.
         * 
         * @return builder
         * 
         */
        public Builder gatewayNetworkId(String gatewayNetworkId) {
            return gatewayNetworkId(Output.of(gatewayNetworkId));
        }

        /**
         * @param hostname The Hostname of the client machine.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The Hostname of the client machine.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param ipAddress The IP address to give to the machine (IP address).
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The IP address to give to the machine (IP address).
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param macAddress The MAC address to give a static entry to.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(@Nullable Output<String> macAddress) {
            $.macAddress = macAddress;
            return this;
        }

        /**
         * @param macAddress The MAC address to give a static entry to.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(String macAddress) {
            return macAddress(Output.of(macAddress));
        }

        /**
         * @param type The reservation type, either static (DHCP reservation) or dynamic (DHCP lease). Possible values are reservation and lease.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The reservation type, either static (DHCP reservation) or dynamic (DHCP lease). Possible values are reservation and lease.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param updatedAt The date and time of the last update of the public gateway DHCP config.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt The date and time of the last update of the public gateway DHCP config.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param zone `zone`) The zone in which the public gateway DHCP config should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone `zone`) The zone in which the public gateway DHCP config should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public VpcPublicGatewayDhcpReservationState build() {
            return $;
        }
    }

}
