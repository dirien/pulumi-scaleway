// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcGatewayNetworkState extends com.pulumi.resources.ResourceArgs {

    public static final VpcGatewayNetworkState Empty = new VpcGatewayNetworkState();

    /**
     * Remove DHCP config on this network on destroy. It requires DHCP id.
     * 
     */
    @Import(name="cleanupDhcp")
    private @Nullable Output<Boolean> cleanupDhcp;

    /**
     * @return Remove DHCP config on this network on destroy. It requires DHCP id.
     * 
     */
    public Optional<Output<Boolean>> cleanupDhcp() {
        return Optional.ofNullable(this.cleanupDhcp);
    }

    /**
     * The date and time of the creation of the gateway network.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The date and time of the creation of the gateway network.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The ID of the public gateway DHCP config. Only one of `dhcp_id` and `static_address` should be specified.
     * 
     */
    @Import(name="dhcpId")
    private @Nullable Output<String> dhcpId;

    /**
     * @return The ID of the public gateway DHCP config. Only one of `dhcp_id` and `static_address` should be specified.
     * 
     */
    public Optional<Output<String>> dhcpId() {
        return Optional.ofNullable(this.dhcpId);
    }

    /**
     * Enable DHCP config on this network. It requires DHCP id.
     * 
     */
    @Import(name="enableDhcp")
    private @Nullable Output<Boolean> enableDhcp;

    /**
     * @return Enable DHCP config on this network. It requires DHCP id.
     * 
     */
    public Optional<Output<Boolean>> enableDhcp() {
        return Optional.ofNullable(this.enableDhcp);
    }

    /**
     * Enable masquerade on this network
     * 
     */
    @Import(name="enableMasquerade")
    private @Nullable Output<Boolean> enableMasquerade;

    /**
     * @return Enable masquerade on this network
     * 
     */
    public Optional<Output<Boolean>> enableMasquerade() {
        return Optional.ofNullable(this.enableMasquerade);
    }

    /**
     * The ID of the public gateway.
     * 
     */
    @Import(name="gatewayId")
    private @Nullable Output<String> gatewayId;

    /**
     * @return The ID of the public gateway.
     * 
     */
    public Optional<Output<String>> gatewayId() {
        return Optional.ofNullable(this.gatewayId);
    }

    /**
     * The mac address of the creation of the gateway network.
     * 
     */
    @Import(name="macAddress")
    private @Nullable Output<String> macAddress;

    /**
     * @return The mac address of the creation of the gateway network.
     * 
     */
    public Optional<Output<String>> macAddress() {
        return Optional.ofNullable(this.macAddress);
    }

    /**
     * The ID of the private network.
     * 
     */
    @Import(name="privateNetworkId")
    private @Nullable Output<String> privateNetworkId;

    /**
     * @return The ID of the private network.
     * 
     */
    public Optional<Output<String>> privateNetworkId() {
        return Optional.ofNullable(this.privateNetworkId);
    }

    /**
     * Enable DHCP config on this network. Only one of `dhcp_id` and `static_address` should be specified.
     * 
     */
    @Import(name="staticAddress")
    private @Nullable Output<String> staticAddress;

    /**
     * @return Enable DHCP config on this network. Only one of `dhcp_id` and `static_address` should be specified.
     * 
     */
    public Optional<Output<String>> staticAddress() {
        return Optional.ofNullable(this.staticAddress);
    }

    /**
     * The date and time of the last update of the gateway network.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return The date and time of the last update of the gateway network.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * `zone`) The zone in which the gateway network should be created.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return `zone`) The zone in which the gateway network should be created.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private VpcGatewayNetworkState() {}

    private VpcGatewayNetworkState(VpcGatewayNetworkState $) {
        this.cleanupDhcp = $.cleanupDhcp;
        this.createdAt = $.createdAt;
        this.dhcpId = $.dhcpId;
        this.enableDhcp = $.enableDhcp;
        this.enableMasquerade = $.enableMasquerade;
        this.gatewayId = $.gatewayId;
        this.macAddress = $.macAddress;
        this.privateNetworkId = $.privateNetworkId;
        this.staticAddress = $.staticAddress;
        this.updatedAt = $.updatedAt;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcGatewayNetworkState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcGatewayNetworkState $;

        public Builder() {
            $ = new VpcGatewayNetworkState();
        }

        public Builder(VpcGatewayNetworkState defaults) {
            $ = new VpcGatewayNetworkState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cleanupDhcp Remove DHCP config on this network on destroy. It requires DHCP id.
         * 
         * @return builder
         * 
         */
        public Builder cleanupDhcp(@Nullable Output<Boolean> cleanupDhcp) {
            $.cleanupDhcp = cleanupDhcp;
            return this;
        }

        /**
         * @param cleanupDhcp Remove DHCP config on this network on destroy. It requires DHCP id.
         * 
         * @return builder
         * 
         */
        public Builder cleanupDhcp(Boolean cleanupDhcp) {
            return cleanupDhcp(Output.of(cleanupDhcp));
        }

        /**
         * @param createdAt The date and time of the creation of the gateway network.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The date and time of the creation of the gateway network.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param dhcpId The ID of the public gateway DHCP config. Only one of `dhcp_id` and `static_address` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder dhcpId(@Nullable Output<String> dhcpId) {
            $.dhcpId = dhcpId;
            return this;
        }

        /**
         * @param dhcpId The ID of the public gateway DHCP config. Only one of `dhcp_id` and `static_address` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder dhcpId(String dhcpId) {
            return dhcpId(Output.of(dhcpId));
        }

        /**
         * @param enableDhcp Enable DHCP config on this network. It requires DHCP id.
         * 
         * @return builder
         * 
         */
        public Builder enableDhcp(@Nullable Output<Boolean> enableDhcp) {
            $.enableDhcp = enableDhcp;
            return this;
        }

        /**
         * @param enableDhcp Enable DHCP config on this network. It requires DHCP id.
         * 
         * @return builder
         * 
         */
        public Builder enableDhcp(Boolean enableDhcp) {
            return enableDhcp(Output.of(enableDhcp));
        }

        /**
         * @param enableMasquerade Enable masquerade on this network
         * 
         * @return builder
         * 
         */
        public Builder enableMasquerade(@Nullable Output<Boolean> enableMasquerade) {
            $.enableMasquerade = enableMasquerade;
            return this;
        }

        /**
         * @param enableMasquerade Enable masquerade on this network
         * 
         * @return builder
         * 
         */
        public Builder enableMasquerade(Boolean enableMasquerade) {
            return enableMasquerade(Output.of(enableMasquerade));
        }

        /**
         * @param gatewayId The ID of the public gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(@Nullable Output<String> gatewayId) {
            $.gatewayId = gatewayId;
            return this;
        }

        /**
         * @param gatewayId The ID of the public gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(String gatewayId) {
            return gatewayId(Output.of(gatewayId));
        }

        /**
         * @param macAddress The mac address of the creation of the gateway network.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(@Nullable Output<String> macAddress) {
            $.macAddress = macAddress;
            return this;
        }

        /**
         * @param macAddress The mac address of the creation of the gateway network.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(String macAddress) {
            return macAddress(Output.of(macAddress));
        }

        /**
         * @param privateNetworkId The ID of the private network.
         * 
         * @return builder
         * 
         */
        public Builder privateNetworkId(@Nullable Output<String> privateNetworkId) {
            $.privateNetworkId = privateNetworkId;
            return this;
        }

        /**
         * @param privateNetworkId The ID of the private network.
         * 
         * @return builder
         * 
         */
        public Builder privateNetworkId(String privateNetworkId) {
            return privateNetworkId(Output.of(privateNetworkId));
        }

        /**
         * @param staticAddress Enable DHCP config on this network. Only one of `dhcp_id` and `static_address` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder staticAddress(@Nullable Output<String> staticAddress) {
            $.staticAddress = staticAddress;
            return this;
        }

        /**
         * @param staticAddress Enable DHCP config on this network. Only one of `dhcp_id` and `static_address` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder staticAddress(String staticAddress) {
            return staticAddress(Output.of(staticAddress));
        }

        /**
         * @param updatedAt The date and time of the last update of the gateway network.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt The date and time of the last update of the gateway network.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param zone `zone`) The zone in which the gateway network should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone `zone`) The zone in which the gateway network should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public VpcGatewayNetworkState build() {
            return $;
        }
    }

}
