// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcPublicGatewayPatRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpcPublicGatewayPatRuleArgs Empty = new VpcPublicGatewayPatRuleArgs();

    /**
     * The ID of the public gateway.
     * 
     */
    @Import(name="gatewayId", required=true)
    private Output<String> gatewayId;

    /**
     * @return The ID of the public gateway.
     * 
     */
    public Output<String> gatewayId() {
        return this.gatewayId;
    }

    /**
     * The Private IP to forward data to (IP address).
     * 
     */
    @Import(name="privateIp", required=true)
    private Output<String> privateIp;

    /**
     * @return The Private IP to forward data to (IP address).
     * 
     */
    public Output<String> privateIp() {
        return this.privateIp;
    }

    /**
     * The Private port to translate to.
     * 
     */
    @Import(name="privatePort", required=true)
    private Output<Integer> privatePort;

    /**
     * @return The Private port to translate to.
     * 
     */
    public Output<Integer> privatePort() {
        return this.privatePort;
    }

    /**
     * The Protocol the rule should apply to. Possible values are both, tcp and udp.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The Protocol the rule should apply to. Possible values are both, tcp and udp.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The Public port to listen on.
     * 
     */
    @Import(name="publicPort", required=true)
    private Output<Integer> publicPort;

    /**
     * @return The Public port to listen on.
     * 
     */
    public Output<Integer> publicPort() {
        return this.publicPort;
    }

    /**
     * `zone`) The zone in which the public gateway DHCP config should be created.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return `zone`) The zone in which the public gateway DHCP config should be created.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private VpcPublicGatewayPatRuleArgs() {}

    private VpcPublicGatewayPatRuleArgs(VpcPublicGatewayPatRuleArgs $) {
        this.gatewayId = $.gatewayId;
        this.privateIp = $.privateIp;
        this.privatePort = $.privatePort;
        this.protocol = $.protocol;
        this.publicPort = $.publicPort;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcPublicGatewayPatRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcPublicGatewayPatRuleArgs $;

        public Builder() {
            $ = new VpcPublicGatewayPatRuleArgs();
        }

        public Builder(VpcPublicGatewayPatRuleArgs defaults) {
            $ = new VpcPublicGatewayPatRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param gatewayId The ID of the public gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(Output<String> gatewayId) {
            $.gatewayId = gatewayId;
            return this;
        }

        /**
         * @param gatewayId The ID of the public gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(String gatewayId) {
            return gatewayId(Output.of(gatewayId));
        }

        /**
         * @param privateIp The Private IP to forward data to (IP address).
         * 
         * @return builder
         * 
         */
        public Builder privateIp(Output<String> privateIp) {
            $.privateIp = privateIp;
            return this;
        }

        /**
         * @param privateIp The Private IP to forward data to (IP address).
         * 
         * @return builder
         * 
         */
        public Builder privateIp(String privateIp) {
            return privateIp(Output.of(privateIp));
        }

        /**
         * @param privatePort The Private port to translate to.
         * 
         * @return builder
         * 
         */
        public Builder privatePort(Output<Integer> privatePort) {
            $.privatePort = privatePort;
            return this;
        }

        /**
         * @param privatePort The Private port to translate to.
         * 
         * @return builder
         * 
         */
        public Builder privatePort(Integer privatePort) {
            return privatePort(Output.of(privatePort));
        }

        /**
         * @param protocol The Protocol the rule should apply to. Possible values are both, tcp and udp.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The Protocol the rule should apply to. Possible values are both, tcp and udp.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param publicPort The Public port to listen on.
         * 
         * @return builder
         * 
         */
        public Builder publicPort(Output<Integer> publicPort) {
            $.publicPort = publicPort;
            return this;
        }

        /**
         * @param publicPort The Public port to listen on.
         * 
         * @return builder
         * 
         */
        public Builder publicPort(Integer publicPort) {
            return publicPort(Output.of(publicPort));
        }

        /**
         * @param zone `zone`) The zone in which the public gateway DHCP config should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone `zone`) The zone in which the public gateway DHCP config should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public VpcPublicGatewayPatRuleArgs build() {
            $.gatewayId = Objects.requireNonNull($.gatewayId, "expected parameter 'gatewayId' to be non-null");
            $.privateIp = Objects.requireNonNull($.privateIp, "expected parameter 'privateIp' to be non-null");
            $.privatePort = Objects.requireNonNull($.privatePort, "expected parameter 'privatePort' to be non-null");
            $.publicPort = Objects.requireNonNull($.publicPort, "expected parameter 'publicPort' to be non-null");
            return $;
        }
    }

}
