// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainZoneState extends com.pulumi.resources.ResourceArgs {

    public static final DomainZoneState Empty = new DomainZoneState();

    /**
     * The domain where the DNS zone will be created.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The domain where the DNS zone will be created.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Message
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return Message
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * NameServer list for zone.
     * 
     */
    @Import(name="ns")
    private @Nullable Output<List<String>> ns;

    /**
     * @return NameServer list for zone.
     * 
     */
    public Optional<Output<List<String>>> ns() {
        return Optional.ofNullable(this.ns);
    }

    /**
     * NameServer default list for zone.
     * 
     */
    @Import(name="nsDefaults")
    private @Nullable Output<List<String>> nsDefaults;

    /**
     * @return NameServer default list for zone.
     * 
     */
    public Optional<Output<List<String>>> nsDefaults() {
        return Optional.ofNullable(this.nsDefaults);
    }

    /**
     * NameServer master list for zone.
     * 
     */
    @Import(name="nsMasters")
    private @Nullable Output<List<String>> nsMasters;

    /**
     * @return NameServer master list for zone.
     * 
     */
    public Optional<Output<List<String>>> nsMasters() {
        return Optional.ofNullable(this.nsMasters);
    }

    /**
     * `project_id`) The ID of the project the domain is associated with.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return `project_id`) The ID of the project the domain is associated with.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The domain zone status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The domain zone status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The subdomain(zone name) to create in the domain.
     * 
     */
    @Import(name="subdomain")
    private @Nullable Output<String> subdomain;

    /**
     * @return The subdomain(zone name) to create in the domain.
     * 
     */
    public Optional<Output<String>> subdomain() {
        return Optional.ofNullable(this.subdomain);
    }

    /**
     * The date and time of the last update of the DNS zone.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return The date and time of the last update of the DNS zone.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private DomainZoneState() {}

    private DomainZoneState(DomainZoneState $) {
        this.domain = $.domain;
        this.message = $.message;
        this.ns = $.ns;
        this.nsDefaults = $.nsDefaults;
        this.nsMasters = $.nsMasters;
        this.projectId = $.projectId;
        this.status = $.status;
        this.subdomain = $.subdomain;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainZoneState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainZoneState $;

        public Builder() {
            $ = new DomainZoneState();
        }

        public Builder(DomainZoneState defaults) {
            $ = new DomainZoneState(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain The domain where the DNS zone will be created.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The domain where the DNS zone will be created.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param message Message
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message Message
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param ns NameServer list for zone.
         * 
         * @return builder
         * 
         */
        public Builder ns(@Nullable Output<List<String>> ns) {
            $.ns = ns;
            return this;
        }

        /**
         * @param ns NameServer list for zone.
         * 
         * @return builder
         * 
         */
        public Builder ns(List<String> ns) {
            return ns(Output.of(ns));
        }

        /**
         * @param ns NameServer list for zone.
         * 
         * @return builder
         * 
         */
        public Builder ns(String... ns) {
            return ns(List.of(ns));
        }

        /**
         * @param nsDefaults NameServer default list for zone.
         * 
         * @return builder
         * 
         */
        public Builder nsDefaults(@Nullable Output<List<String>> nsDefaults) {
            $.nsDefaults = nsDefaults;
            return this;
        }

        /**
         * @param nsDefaults NameServer default list for zone.
         * 
         * @return builder
         * 
         */
        public Builder nsDefaults(List<String> nsDefaults) {
            return nsDefaults(Output.of(nsDefaults));
        }

        /**
         * @param nsDefaults NameServer default list for zone.
         * 
         * @return builder
         * 
         */
        public Builder nsDefaults(String... nsDefaults) {
            return nsDefaults(List.of(nsDefaults));
        }

        /**
         * @param nsMasters NameServer master list for zone.
         * 
         * @return builder
         * 
         */
        public Builder nsMasters(@Nullable Output<List<String>> nsMasters) {
            $.nsMasters = nsMasters;
            return this;
        }

        /**
         * @param nsMasters NameServer master list for zone.
         * 
         * @return builder
         * 
         */
        public Builder nsMasters(List<String> nsMasters) {
            return nsMasters(Output.of(nsMasters));
        }

        /**
         * @param nsMasters NameServer master list for zone.
         * 
         * @return builder
         * 
         */
        public Builder nsMasters(String... nsMasters) {
            return nsMasters(List.of(nsMasters));
        }

        /**
         * @param projectId `project_id`) The ID of the project the domain is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId `project_id`) The ID of the project the domain is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param status The domain zone status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The domain zone status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subdomain The subdomain(zone name) to create in the domain.
         * 
         * @return builder
         * 
         */
        public Builder subdomain(@Nullable Output<String> subdomain) {
            $.subdomain = subdomain;
            return this;
        }

        /**
         * @param subdomain The subdomain(zone name) to create in the domain.
         * 
         * @return builder
         * 
         */
        public Builder subdomain(String subdomain) {
            return subdomain(Output.of(subdomain));
        }

        /**
         * @param updatedAt The date and time of the last update of the DNS zone.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt The date and time of the last update of the DNS zone.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public DomainZoneState build() {
            return $;
        }
    }

}
