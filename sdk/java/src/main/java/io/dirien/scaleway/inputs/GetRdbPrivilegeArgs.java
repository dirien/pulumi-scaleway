// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRdbPrivilegeArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRdbPrivilegeArgs Empty = new GetRdbPrivilegeArgs();

    /**
     * The database name.
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    /**
     * @return The database name.
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * The RDB instance ID.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The RDB instance ID.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * `region`) The region in which the resource exists.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return `region`) The region in which the resource exists.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The user name.
     * 
     */
    @Import(name="userName", required=true)
    private Output<String> userName;

    /**
     * @return The user name.
     * 
     */
    public Output<String> userName() {
        return this.userName;
    }

    private GetRdbPrivilegeArgs() {}

    private GetRdbPrivilegeArgs(GetRdbPrivilegeArgs $) {
        this.databaseName = $.databaseName;
        this.instanceId = $.instanceId;
        this.region = $.region;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRdbPrivilegeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRdbPrivilegeArgs $;

        public Builder() {
            $ = new GetRdbPrivilegeArgs();
        }

        public Builder(GetRdbPrivilegeArgs defaults) {
            $ = new GetRdbPrivilegeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseName The database name.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName The database name.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param instanceId The RDB instance ID.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The RDB instance ID.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param region `region`) The region in which the resource exists.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region `region`) The region in which the resource exists.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param userName The user name.
         * 
         * @return builder
         * 
         */
        public Builder userName(Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName The user name.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public GetRdbPrivilegeArgs build() {
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            $.instanceId = Objects.requireNonNull($.instanceId, "expected parameter 'instanceId' to be non-null");
            $.userName = Objects.requireNonNull($.userName, "expected parameter 'userName' to be non-null");
            return $;
        }
    }

}
