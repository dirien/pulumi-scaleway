// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.dirien.scaleway.LbFrontendArgs;
import io.dirien.scaleway.Utilities;
import io.dirien.scaleway.inputs.LbFrontendState;
import io.dirien.scaleway.outputs.LbFrontendAcl;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates and manages Scaleway Load-Balancer Frontends. For more information, see [the documentation](https://developers.scaleway.com/en/products/lb/zoned_api).
 * 
 * ## Examples Usage
 * 
 * ### Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.LbFrontend;
 * import com.pulumi.scaleway.LbFrontendArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var frontend01 = new LbFrontend(&#34;frontend01&#34;, LbFrontendArgs.builder()        
 *             .lbId(scaleway_lb.lb01().id())
 *             .backendId(scaleway_lb_backend.backend01().id())
 *             .inboundPort(&#34;80&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## With ACLs
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.LbFrontend;
 * import com.pulumi.scaleway.LbFrontendArgs;
 * import com.pulumi.scaleway.inputs.LbFrontendAclArgs;
 * import com.pulumi.scaleway.inputs.LbFrontendAclActionArgs;
 * import com.pulumi.scaleway.inputs.LbFrontendAclMatchArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var frontend01 = new LbFrontend(&#34;frontend01&#34;, LbFrontendArgs.builder()        
 *             .lbId(scaleway_lb.lb01().id())
 *             .backendId(scaleway_lb_backend.backend01().id())
 *             .inboundPort(&#34;80&#34;)
 *             .acls(            
 *                 LbFrontendAclArgs.builder()
 *                     .name(&#34;blacklist wellknwon IPs&#34;)
 *                     .action(LbFrontendAclActionArgs.builder()
 *                         .type(&#34;allow&#34;)
 *                         .build())
 *                     .match(LbFrontendAclMatchArgs.builder()
 *                         .ipSubnets(                        
 *                             &#34;192.168.0.1&#34;,
 *                             &#34;192.168.0.2&#34;,
 *                             &#34;192.168.10.0/24&#34;)
 *                         .build())
 *                     .build(),
 *                 LbFrontendAclArgs.builder()
 *                     .action(LbFrontendAclActionArgs.builder()
 *                         .type(&#34;deny&#34;)
 *                         .build())
 *                     .match(LbFrontendAclMatchArgs.builder()
 *                         .ipSubnets(&#34;51.51.51.51&#34;)
 *                         .httpFilter(&#34;regex&#34;)
 *                         .httpFilterValues(&#34;^foo*bar$&#34;)
 *                         .build())
 *                     .build(),
 *                 LbFrontendAclArgs.builder()
 *                     .action(LbFrontendAclActionArgs.builder()
 *                         .type(&#34;allow&#34;)
 *                         .build())
 *                     .match(LbFrontendAclMatchArgs.builder()
 *                         .httpFilter(&#34;path_begin&#34;)
 *                         .httpFilterValues(                        
 *                             &#34;foo&#34;,
 *                             &#34;bar&#34;)
 *                         .build())
 *                     .build(),
 *                 LbFrontendAclArgs.builder()
 *                     .action(LbFrontendAclActionArgs.builder()
 *                         .type(&#34;allow&#34;)
 *                         .build())
 *                     .match(LbFrontendAclMatchArgs.builder()
 *                         .httpFilter(&#34;path_begin&#34;)
 *                         .httpFilterValues(&#34;hi&#34;)
 *                         .invert(&#34;true&#34;)
 *                         .build())
 *                     .build(),
 *                 LbFrontendAclArgs.builder()
 *                     .action(LbFrontendAclActionArgs.builder()
 *                         .type(&#34;allow&#34;)
 *                         .build())
 *                     .match(LbFrontendAclMatchArgs.builder()
 *                         .httpFilter(&#34;http_header_match&#34;)
 *                         .httpFilterValues(&#34;foo&#34;)
 *                         .httpValueOption(&#34;bar&#34;)
 *                         .build())
 *                     .build(),
 *                 LbFrontendAclArgs.builder()
 *                     .action(LbFrontendAclActionArgs.builder()
 *                         .type(&#34;redirect&#34;)
 *                         .redirects(LbFrontendAclActionRedirectArgs.builder()
 *                             .type(&#34;location&#34;)
 *                             .target(&#34;https://example.com&#34;)
 *                             .code(307)
 *                             .build())
 *                         .build())
 *                     .match(LbFrontendAclMatchArgs.builder()
 *                         .ipSubnets(&#34;10.0.0.10&#34;)
 *                         .httpFilter(&#34;path_begin&#34;)
 *                         .httpFilterValues(                        
 *                             &#34;foo&#34;,
 *                             &#34;bar&#34;)
 *                         .build())
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Load-Balancer frontend can be imported using the `{zone}/{id}`, e.g. bash
 * 
 * ```sh
 *  $ pulumi import scaleway:index/lbFrontend:LbFrontend frontend01 fr-par-1/11111111-1111-1111-1111-111111111111
 * ```
 * 
 */
@ResourceType(type="scaleway:index/lbFrontend:LbFrontend")
public class LbFrontend extends com.pulumi.resources.CustomResource {
    /**
     * A list of ACL rules to apply to the load-balancer frontend.  Defined below.
     * 
     */
    @Export(name="acls", refs={List.class,LbFrontendAcl.class}, tree="[0,1]")
    private Output</* @Nullable */ List<LbFrontendAcl>> acls;

    /**
     * @return A list of ACL rules to apply to the load-balancer frontend.  Defined below.
     * 
     */
    public Output<Optional<List<LbFrontendAcl>>> acls() {
        return Codegen.optional(this.acls);
    }
    /**
     * The load-balancer backend ID this frontend is attached to.
     * 
     * &gt; **Important:** Updates to `lb_id` or `backend_id` will recreate the frontend.
     * 
     */
    @Export(name="backendId", refs={String.class}, tree="[0]")
    private Output<String> backendId;

    /**
     * @return The load-balancer backend ID this frontend is attached to.
     * 
     * &gt; **Important:** Updates to `lb_id` or `backend_id` will recreate the frontend.
     * 
     */
    public Output<String> backendId() {
        return this.backendId;
    }
    /**
     * (Deprecated) first certificate ID used by the frontend.
     * 
     * @deprecated
     * Please use certificate_ids
     * 
     */
    @Deprecated /* Please use certificate_ids */
    @Export(name="certificateId", refs={String.class}, tree="[0]")
    private Output<String> certificateId;

    /**
     * @return (Deprecated) first certificate ID used by the frontend.
     * 
     */
    public Output<String> certificateId() {
        return this.certificateId;
    }
    /**
     * List of Certificate IDs that should be used by the frontend.
     * 
     * &gt; **Important:** Certificates are not allowed on port 80.
     * 
     */
    @Export(name="certificateIds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> certificateIds;

    /**
     * @return List of Certificate IDs that should be used by the frontend.
     * 
     * &gt; **Important:** Certificates are not allowed on port 80.
     * 
     */
    public Output<Optional<List<String>>> certificateIds() {
        return Codegen.optional(this.certificateIds);
    }
    /**
     * Activates HTTP/3 protocol.
     * 
     */
    @Export(name="enableHttp3", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableHttp3;

    /**
     * @return Activates HTTP/3 protocol.
     * 
     */
    public Output<Optional<Boolean>> enableHttp3() {
        return Codegen.optional(this.enableHttp3);
    }
    /**
     * TCP port to listen on the front side.
     * 
     */
    @Export(name="inboundPort", refs={Integer.class}, tree="[0]")
    private Output<Integer> inboundPort;

    /**
     * @return TCP port to listen on the front side.
     * 
     */
    public Output<Integer> inboundPort() {
        return this.inboundPort;
    }
    /**
     * The load-balancer ID this frontend is attached to.
     * 
     */
    @Export(name="lbId", refs={String.class}, tree="[0]")
    private Output<String> lbId;

    /**
     * @return The load-balancer ID this frontend is attached to.
     * 
     */
    public Output<String> lbId() {
        return this.lbId;
    }
    /**
     * The ACL name. If not provided it will be randomly generated.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The ACL name. If not provided it will be randomly generated.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Maximum inactivity time on the client side. (e.g.: `1s`)
     * 
     */
    @Export(name="timeoutClient", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timeoutClient;

    /**
     * @return Maximum inactivity time on the client side. (e.g.: `1s`)
     * 
     */
    public Output<Optional<String>> timeoutClient() {
        return Codegen.optional(this.timeoutClient);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LbFrontend(String name) {
        this(name, LbFrontendArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LbFrontend(String name, LbFrontendArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LbFrontend(String name, LbFrontendArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/lbFrontend:LbFrontend", name, args == null ? LbFrontendArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private LbFrontend(String name, Output<String> id, @Nullable LbFrontendState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/lbFrontend:LbFrontend", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LbFrontend get(String name, Output<String> id, @Nullable LbFrontendState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LbFrontend(name, id, state, options);
    }
}
