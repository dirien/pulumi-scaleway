// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.dirien.scaleway.inputs.InstanceServerPrivateNetworkArgs;
import io.dirien.scaleway.inputs.InstanceServerRootVolumeArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceServerArgs Empty = new InstanceServerArgs();

    /**
     * The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)
     * attached to the server. Updates to this field will trigger a stop/start of the server.
     * 
     * &gt; **Important:** If this field contains local volumes, the `state` must be set to `stopped`, otherwise it will fail.
     * 
     * &gt; **Important:** If this field contains local volumes, you have to first detach them, in one apply, and then delete the volume in another apply.
     * 
     */
    @Import(name="additionalVolumeIds")
    private @Nullable Output<List<String>> additionalVolumeIds;

    /**
     * @return The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)
     * attached to the server. Updates to this field will trigger a stop/start of the server.
     * 
     * &gt; **Important:** If this field contains local volumes, the `state` must be set to `stopped`, otherwise it will fail.
     * 
     * &gt; **Important:** If this field contains local volumes, you have to first detach them, in one apply, and then delete the volume in another apply.
     * 
     */
    public Optional<Output<List<String>>> additionalVolumeIds() {
        return Optional.ofNullable(this.additionalVolumeIds);
    }

    /**
     * The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
     * 
     */
    @Import(name="bootType")
    private @Nullable Output<String> bootType;

    /**
     * @return The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
     * 
     */
    public Optional<Output<String>> bootType() {
        return Optional.ofNullable(this.bootType);
    }

    /**
     * The ID of the bootscript to use  (set boot_type to `bootscript`).
     * 
     */
    @Import(name="bootscriptId")
    private @Nullable Output<String> bootscriptId;

    /**
     * @return The ID of the bootscript to use  (set boot_type to `bootscript`).
     * 
     */
    public Optional<Output<String>> bootscriptId() {
        return Optional.ofNullable(this.bootscriptId);
    }

    /**
     * The cloud init script associated with this server
     * 
     */
    @Import(name="cloudInit")
    private @Nullable Output<String> cloudInit;

    /**
     * @return The cloud init script associated with this server
     * 
     */
    public Optional<Output<String>> cloudInit() {
        return Optional.ofNullable(this.cloudInit);
    }

    /**
     * If true a dynamic IP will be attached to the server.
     * 
     */
    @Import(name="enableDynamicIp")
    private @Nullable Output<Boolean> enableDynamicIp;

    /**
     * @return If true a dynamic IP will be attached to the server.
     * 
     */
    public Optional<Output<Boolean>> enableDynamicIp() {
        return Optional.ofNullable(this.enableDynamicIp);
    }

    /**
     * Determines if IPv6 is enabled for the server.
     * 
     */
    @Import(name="enableIpv6")
    private @Nullable Output<Boolean> enableIpv6;

    /**
     * @return Determines if IPv6 is enabled for the server.
     * 
     */
    public Optional<Output<Boolean>> enableIpv6() {
        return Optional.ofNullable(this.enableIpv6);
    }

    /**
     * The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1&amp;per_page=100)
     * to find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.
     * 
     * You can check the available labels with our [CLI](https://www.scaleway.com/en/docs/compute/instances/api-cli/creating-managing-instances-with-cliv2/). ```scw marketplace image list```
     * 
     * To retrieve more information by label please use: ```scw marketplace image get label=&lt;LABEL&gt;```
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1&amp;per_page=100)
     * to find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.
     * 
     * You can check the available labels with our [CLI](https://www.scaleway.com/en/docs/compute/instances/api-cli/creating-managing-instances-with-cliv2/). ```scw marketplace image list```
     * 
     * To retrieve more information by label please use: ```scw marketplace image get label=&lt;LABEL&gt;```
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * = (Optional) The ID of the reserved IP that is attached to the server.
     * 
     */
    @Import(name="ipId")
    private @Nullable Output<String> ipId;

    /**
     * @return = (Optional) The ID of the reserved IP that is attached to the server.
     * 
     */
    public Optional<Output<String>> ipId() {
        return Optional.ofNullable(this.ipId);
    }

    /**
     * The name of the server.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the server.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
     * 
     * &gt; **Important:** When updating `placement_group_id` the `state` must be set to `stopped`, otherwise it will fail.
     * 
     */
    @Import(name="placementGroupId")
    private @Nullable Output<String> placementGroupId;

    /**
     * @return The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
     * 
     * &gt; **Important:** When updating `placement_group_id` the `state` must be set to `stopped`, otherwise it will fail.
     * 
     */
    public Optional<Output<String>> placementGroupId() {
        return Optional.ofNullable(this.placementGroupId);
    }

    /**
     * The private network associated with the server.
     * Use the `pn_id` key to attach a [private_network](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.
     * 
     */
    @Import(name="privateNetworks")
    private @Nullable Output<List<InstanceServerPrivateNetworkArgs>> privateNetworks;

    /**
     * @return The private network associated with the server.
     * Use the `pn_id` key to attach a [private_network](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.
     * 
     */
    public Optional<Output<List<InstanceServerPrivateNetworkArgs>>> privateNetworks() {
        return Optional.ofNullable(this.privateNetworks);
    }

    /**
     * `project_id`) The ID of the project the server is associated with.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return `project_id`) The ID of the project the server is associated with.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.
     * 
     */
    @Import(name="rootVolume")
    private @Nullable Output<InstanceServerRootVolumeArgs> rootVolume;

    /**
     * @return Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.
     * 
     */
    public Optional<Output<InstanceServerRootVolumeArgs>> rootVolume() {
        return Optional.ofNullable(this.rootVolume);
    }

    /**
     * The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
     * 
     */
    @Import(name="securityGroupId")
    private @Nullable Output<String> securityGroupId;

    /**
     * @return The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
     * 
     */
    public Optional<Output<String>> securityGroupId() {
        return Optional.ofNullable(this.securityGroupId);
    }

    /**
     * The state of the server. Possible values are: `started`, `stopped` or `standby`.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the server. Possible values are: `started`, `stopped` or `standby`.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The tags associated with the server.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The tags associated with the server.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The commercial type of the server.
     * You find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).
     * Updates to this field will recreate a new resource.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The commercial type of the server.
     * You find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).
     * Updates to this field will recreate a new resource.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The user data associated with the server.
     * Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.
     * You can define values using:
     * - string
     * - UTF-8 encoded file content using file
     * - Binary files using filebase64.
     * 
     */
    @Import(name="userData")
    private @Nullable Output<Map<String,String>> userData;

    /**
     * @return The user data associated with the server.
     * Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.
     * You can define values using:
     * - string
     * - UTF-8 encoded file content using file
     * - Binary files using filebase64.
     * 
     */
    public Optional<Output<Map<String,String>>> userData() {
        return Optional.ofNullable(this.userData);
    }

    /**
     * `zone`) The zone in which the server should be created.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return `zone`) The zone in which the server should be created.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private InstanceServerArgs() {}

    private InstanceServerArgs(InstanceServerArgs $) {
        this.additionalVolumeIds = $.additionalVolumeIds;
        this.bootType = $.bootType;
        this.bootscriptId = $.bootscriptId;
        this.cloudInit = $.cloudInit;
        this.enableDynamicIp = $.enableDynamicIp;
        this.enableIpv6 = $.enableIpv6;
        this.image = $.image;
        this.ipId = $.ipId;
        this.name = $.name;
        this.placementGroupId = $.placementGroupId;
        this.privateNetworks = $.privateNetworks;
        this.projectId = $.projectId;
        this.rootVolume = $.rootVolume;
        this.securityGroupId = $.securityGroupId;
        this.state = $.state;
        this.tags = $.tags;
        this.type = $.type;
        this.userData = $.userData;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceServerArgs $;

        public Builder() {
            $ = new InstanceServerArgs();
        }

        public Builder(InstanceServerArgs defaults) {
            $ = new InstanceServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalVolumeIds The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)
         * attached to the server. Updates to this field will trigger a stop/start of the server.
         * 
         * &gt; **Important:** If this field contains local volumes, the `state` must be set to `stopped`, otherwise it will fail.
         * 
         * &gt; **Important:** If this field contains local volumes, you have to first detach them, in one apply, and then delete the volume in another apply.
         * 
         * @return builder
         * 
         */
        public Builder additionalVolumeIds(@Nullable Output<List<String>> additionalVolumeIds) {
            $.additionalVolumeIds = additionalVolumeIds;
            return this;
        }

        /**
         * @param additionalVolumeIds The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)
         * attached to the server. Updates to this field will trigger a stop/start of the server.
         * 
         * &gt; **Important:** If this field contains local volumes, the `state` must be set to `stopped`, otherwise it will fail.
         * 
         * &gt; **Important:** If this field contains local volumes, you have to first detach them, in one apply, and then delete the volume in another apply.
         * 
         * @return builder
         * 
         */
        public Builder additionalVolumeIds(List<String> additionalVolumeIds) {
            return additionalVolumeIds(Output.of(additionalVolumeIds));
        }

        /**
         * @param additionalVolumeIds The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)
         * attached to the server. Updates to this field will trigger a stop/start of the server.
         * 
         * &gt; **Important:** If this field contains local volumes, the `state` must be set to `stopped`, otherwise it will fail.
         * 
         * &gt; **Important:** If this field contains local volumes, you have to first detach them, in one apply, and then delete the volume in another apply.
         * 
         * @return builder
         * 
         */
        public Builder additionalVolumeIds(String... additionalVolumeIds) {
            return additionalVolumeIds(List.of(additionalVolumeIds));
        }

        /**
         * @param bootType The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
         * 
         * @return builder
         * 
         */
        public Builder bootType(@Nullable Output<String> bootType) {
            $.bootType = bootType;
            return this;
        }

        /**
         * @param bootType The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
         * 
         * @return builder
         * 
         */
        public Builder bootType(String bootType) {
            return bootType(Output.of(bootType));
        }

        /**
         * @param bootscriptId The ID of the bootscript to use  (set boot_type to `bootscript`).
         * 
         * @return builder
         * 
         */
        public Builder bootscriptId(@Nullable Output<String> bootscriptId) {
            $.bootscriptId = bootscriptId;
            return this;
        }

        /**
         * @param bootscriptId The ID of the bootscript to use  (set boot_type to `bootscript`).
         * 
         * @return builder
         * 
         */
        public Builder bootscriptId(String bootscriptId) {
            return bootscriptId(Output.of(bootscriptId));
        }

        /**
         * @param cloudInit The cloud init script associated with this server
         * 
         * @return builder
         * 
         */
        public Builder cloudInit(@Nullable Output<String> cloudInit) {
            $.cloudInit = cloudInit;
            return this;
        }

        /**
         * @param cloudInit The cloud init script associated with this server
         * 
         * @return builder
         * 
         */
        public Builder cloudInit(String cloudInit) {
            return cloudInit(Output.of(cloudInit));
        }

        /**
         * @param enableDynamicIp If true a dynamic IP will be attached to the server.
         * 
         * @return builder
         * 
         */
        public Builder enableDynamicIp(@Nullable Output<Boolean> enableDynamicIp) {
            $.enableDynamicIp = enableDynamicIp;
            return this;
        }

        /**
         * @param enableDynamicIp If true a dynamic IP will be attached to the server.
         * 
         * @return builder
         * 
         */
        public Builder enableDynamicIp(Boolean enableDynamicIp) {
            return enableDynamicIp(Output.of(enableDynamicIp));
        }

        /**
         * @param enableIpv6 Determines if IPv6 is enabled for the server.
         * 
         * @return builder
         * 
         */
        public Builder enableIpv6(@Nullable Output<Boolean> enableIpv6) {
            $.enableIpv6 = enableIpv6;
            return this;
        }

        /**
         * @param enableIpv6 Determines if IPv6 is enabled for the server.
         * 
         * @return builder
         * 
         */
        public Builder enableIpv6(Boolean enableIpv6) {
            return enableIpv6(Output.of(enableIpv6));
        }

        /**
         * @param image The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1&amp;per_page=100)
         * to find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.
         * 
         * You can check the available labels with our [CLI](https://www.scaleway.com/en/docs/compute/instances/api-cli/creating-managing-instances-with-cliv2/). ```scw marketplace image list```
         * 
         * To retrieve more information by label please use: ```scw marketplace image get label=&lt;LABEL&gt;```
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1&amp;per_page=100)
         * to find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.
         * 
         * You can check the available labels with our [CLI](https://www.scaleway.com/en/docs/compute/instances/api-cli/creating-managing-instances-with-cliv2/). ```scw marketplace image list```
         * 
         * To retrieve more information by label please use: ```scw marketplace image get label=&lt;LABEL&gt;```
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param ipId = (Optional) The ID of the reserved IP that is attached to the server.
         * 
         * @return builder
         * 
         */
        public Builder ipId(@Nullable Output<String> ipId) {
            $.ipId = ipId;
            return this;
        }

        /**
         * @param ipId = (Optional) The ID of the reserved IP that is attached to the server.
         * 
         * @return builder
         * 
         */
        public Builder ipId(String ipId) {
            return ipId(Output.of(ipId));
        }

        /**
         * @param name The name of the server.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the server.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param placementGroupId The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
         * 
         * &gt; **Important:** When updating `placement_group_id` the `state` must be set to `stopped`, otherwise it will fail.
         * 
         * @return builder
         * 
         */
        public Builder placementGroupId(@Nullable Output<String> placementGroupId) {
            $.placementGroupId = placementGroupId;
            return this;
        }

        /**
         * @param placementGroupId The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
         * 
         * &gt; **Important:** When updating `placement_group_id` the `state` must be set to `stopped`, otherwise it will fail.
         * 
         * @return builder
         * 
         */
        public Builder placementGroupId(String placementGroupId) {
            return placementGroupId(Output.of(placementGroupId));
        }

        /**
         * @param privateNetworks The private network associated with the server.
         * Use the `pn_id` key to attach a [private_network](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.
         * 
         * @return builder
         * 
         */
        public Builder privateNetworks(@Nullable Output<List<InstanceServerPrivateNetworkArgs>> privateNetworks) {
            $.privateNetworks = privateNetworks;
            return this;
        }

        /**
         * @param privateNetworks The private network associated with the server.
         * Use the `pn_id` key to attach a [private_network](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.
         * 
         * @return builder
         * 
         */
        public Builder privateNetworks(List<InstanceServerPrivateNetworkArgs> privateNetworks) {
            return privateNetworks(Output.of(privateNetworks));
        }

        /**
         * @param privateNetworks The private network associated with the server.
         * Use the `pn_id` key to attach a [private_network](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.
         * 
         * @return builder
         * 
         */
        public Builder privateNetworks(InstanceServerPrivateNetworkArgs... privateNetworks) {
            return privateNetworks(List.of(privateNetworks));
        }

        /**
         * @param projectId `project_id`) The ID of the project the server is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId `project_id`) The ID of the project the server is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param rootVolume Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.
         * 
         * @return builder
         * 
         */
        public Builder rootVolume(@Nullable Output<InstanceServerRootVolumeArgs> rootVolume) {
            $.rootVolume = rootVolume;
            return this;
        }

        /**
         * @param rootVolume Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.
         * 
         * @return builder
         * 
         */
        public Builder rootVolume(InstanceServerRootVolumeArgs rootVolume) {
            return rootVolume(Output.of(rootVolume));
        }

        /**
         * @param securityGroupId The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(@Nullable Output<String> securityGroupId) {
            $.securityGroupId = securityGroupId;
            return this;
        }

        /**
         * @param securityGroupId The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(String securityGroupId) {
            return securityGroupId(Output.of(securityGroupId));
        }

        /**
         * @param state The state of the server. Possible values are: `started`, `stopped` or `standby`.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the server. Possible values are: `started`, `stopped` or `standby`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param tags The tags associated with the server.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags associated with the server.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags associated with the server.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type The commercial type of the server.
         * You find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).
         * Updates to this field will recreate a new resource.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The commercial type of the server.
         * You find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).
         * Updates to this field will recreate a new resource.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param userData The user data associated with the server.
         * Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.
         * You can define values using:
         * - string
         * - UTF-8 encoded file content using file
         * - Binary files using filebase64.
         * 
         * @return builder
         * 
         */
        public Builder userData(@Nullable Output<Map<String,String>> userData) {
            $.userData = userData;
            return this;
        }

        /**
         * @param userData The user data associated with the server.
         * Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.
         * You can define values using:
         * - string
         * - UTF-8 encoded file content using file
         * - Binary files using filebase64.
         * 
         * @return builder
         * 
         */
        public Builder userData(Map<String,String> userData) {
            return userData(Output.of(userData));
        }

        /**
         * @param zone `zone`) The zone in which the server should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone `zone`) The zone in which the server should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public InstanceServerArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
