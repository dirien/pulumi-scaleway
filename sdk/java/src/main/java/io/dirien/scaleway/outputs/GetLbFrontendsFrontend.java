// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetLbFrontendsFrontend {
    /**
     * @return The load-balancer backend ID this frontend is attached to.
     * &gt; **Important:** LB backends&#39; IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
     * 
     */
    private String backendId;
    /**
     * @return List of Certificate IDs that are used by the frontend.
     * 
     */
    private List<String> certificateIds;
    /**
     * @return The date at which the frontend was created (RFC 3339 format).
     * 
     */
    private String createdAt;
    /**
     * @return If HTTP/3 protocol is activated.
     * 
     */
    private Boolean enableHttp3;
    /**
     * @return The associated frontend ID.
     * &gt; **Important:** LB frontends&#39; IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
     * 
     */
    private String id;
    /**
     * @return TCP port the frontend listen to.
     * 
     */
    private Integer inboundPort;
    /**
     * @return The load-balancer ID this frontend is attached to. frontends with a LB ID like it are listed.
     * 
     */
    private String lbId;
    /**
     * @return The frontend name used as filter. Frontends with a name like it are listed.
     * 
     */
    private String name;
    /**
     * @return Maximum inactivity time on the client side.
     * 
     */
    private String timeoutClient;
    /**
     * @return The date at which the frontend was last updated (RFC 3339 format).
     * 
     */
    private String updateAt;

    private GetLbFrontendsFrontend() {}
    /**
     * @return The load-balancer backend ID this frontend is attached to.
     * &gt; **Important:** LB backends&#39; IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
     * 
     */
    public String backendId() {
        return this.backendId;
    }
    /**
     * @return List of Certificate IDs that are used by the frontend.
     * 
     */
    public List<String> certificateIds() {
        return this.certificateIds;
    }
    /**
     * @return The date at which the frontend was created (RFC 3339 format).
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return If HTTP/3 protocol is activated.
     * 
     */
    public Boolean enableHttp3() {
        return this.enableHttp3;
    }
    /**
     * @return The associated frontend ID.
     * &gt; **Important:** LB frontends&#39; IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return TCP port the frontend listen to.
     * 
     */
    public Integer inboundPort() {
        return this.inboundPort;
    }
    /**
     * @return The load-balancer ID this frontend is attached to. frontends with a LB ID like it are listed.
     * 
     */
    public String lbId() {
        return this.lbId;
    }
    /**
     * @return The frontend name used as filter. Frontends with a name like it are listed.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Maximum inactivity time on the client side.
     * 
     */
    public String timeoutClient() {
        return this.timeoutClient;
    }
    /**
     * @return The date at which the frontend was last updated (RFC 3339 format).
     * 
     */
    public String updateAt() {
        return this.updateAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLbFrontendsFrontend defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backendId;
        private List<String> certificateIds;
        private String createdAt;
        private Boolean enableHttp3;
        private String id;
        private Integer inboundPort;
        private String lbId;
        private String name;
        private String timeoutClient;
        private String updateAt;
        public Builder() {}
        public Builder(GetLbFrontendsFrontend defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendId = defaults.backendId;
    	      this.certificateIds = defaults.certificateIds;
    	      this.createdAt = defaults.createdAt;
    	      this.enableHttp3 = defaults.enableHttp3;
    	      this.id = defaults.id;
    	      this.inboundPort = defaults.inboundPort;
    	      this.lbId = defaults.lbId;
    	      this.name = defaults.name;
    	      this.timeoutClient = defaults.timeoutClient;
    	      this.updateAt = defaults.updateAt;
        }

        @CustomType.Setter
        public Builder backendId(String backendId) {
            this.backendId = Objects.requireNonNull(backendId);
            return this;
        }
        @CustomType.Setter
        public Builder certificateIds(List<String> certificateIds) {
            this.certificateIds = Objects.requireNonNull(certificateIds);
            return this;
        }
        public Builder certificateIds(String... certificateIds) {
            return certificateIds(List.of(certificateIds));
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        @CustomType.Setter
        public Builder enableHttp3(Boolean enableHttp3) {
            this.enableHttp3 = Objects.requireNonNull(enableHttp3);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder inboundPort(Integer inboundPort) {
            this.inboundPort = Objects.requireNonNull(inboundPort);
            return this;
        }
        @CustomType.Setter
        public Builder lbId(String lbId) {
            this.lbId = Objects.requireNonNull(lbId);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder timeoutClient(String timeoutClient) {
            this.timeoutClient = Objects.requireNonNull(timeoutClient);
            return this;
        }
        @CustomType.Setter
        public Builder updateAt(String updateAt) {
            this.updateAt = Objects.requireNonNull(updateAt);
            return this;
        }
        public GetLbFrontendsFrontend build() {
            final var o = new GetLbFrontendsFrontend();
            o.backendId = backendId;
            o.certificateIds = certificateIds;
            o.createdAt = createdAt;
            o.enableHttp3 = enableHttp3;
            o.id = id;
            o.inboundPort = inboundPort;
            o.lbId = lbId;
            o.name = name;
            o.timeoutClient = timeoutClient;
            o.updateAt = updateAt;
            return o;
        }
    }
}
