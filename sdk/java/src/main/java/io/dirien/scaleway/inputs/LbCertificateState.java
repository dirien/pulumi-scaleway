// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.dirien.scaleway.inputs.LbCertificateCustomCertificateArgs;
import io.dirien.scaleway.inputs.LbCertificateLetsencryptArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LbCertificateState extends com.pulumi.resources.ResourceArgs {

    public static final LbCertificateState Empty = new LbCertificateState();

    /**
     * Main domain of the certificate. A new certificate will be created if this field is changed.
     * 
     */
    @Import(name="commonName")
    private @Nullable Output<String> commonName;

    /**
     * @return Main domain of the certificate. A new certificate will be created if this field is changed.
     * 
     */
    public Optional<Output<String>> commonName() {
        return Optional.ofNullable(this.commonName);
    }

    /**
     * Configuration block for custom certificate chain. Only one of `letsencrypt` and `custom_certificate` should be specified.
     * 
     */
    @Import(name="customCertificate")
    private @Nullable Output<LbCertificateCustomCertificateArgs> customCertificate;

    /**
     * @return Configuration block for custom certificate chain. Only one of `letsencrypt` and `custom_certificate` should be specified.
     * 
     */
    public Optional<Output<LbCertificateCustomCertificateArgs>> customCertificate() {
        return Optional.ofNullable(this.customCertificate);
    }

    /**
     * The identifier (SHA-1) of the certificate
     * 
     */
    @Import(name="fingerprint")
    private @Nullable Output<String> fingerprint;

    /**
     * @return The identifier (SHA-1) of the certificate
     * 
     */
    public Optional<Output<String>> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }

    /**
     * The load-balancer ID this certificate is attached to.
     * 
     * &gt; **Important:** Updates to `lb_id` will recreate the load-balancer certificate.
     * 
     */
    @Import(name="lbId")
    private @Nullable Output<String> lbId;

    /**
     * @return The load-balancer ID this certificate is attached to.
     * 
     * &gt; **Important:** Updates to `lb_id` will recreate the load-balancer certificate.
     * 
     */
    public Optional<Output<String>> lbId() {
        return Optional.ofNullable(this.lbId);
    }

    /**
     * Configuration block for Let&#39;s Encrypt configuration. Only one of `letsencrypt` and `custom_certificate` should be specified.
     * 
     */
    @Import(name="letsencrypt")
    private @Nullable Output<LbCertificateLetsencryptArgs> letsencrypt;

    /**
     * @return Configuration block for Let&#39;s Encrypt configuration. Only one of `letsencrypt` and `custom_certificate` should be specified.
     * 
     */
    public Optional<Output<LbCertificateLetsencryptArgs>> letsencrypt() {
        return Optional.ofNullable(this.letsencrypt);
    }

    /**
     * The name of the certificate backend.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the certificate backend.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The not valid after validity bound timestamp
     * 
     */
    @Import(name="notValidAfter")
    private @Nullable Output<String> notValidAfter;

    /**
     * @return The not valid after validity bound timestamp
     * 
     */
    public Optional<Output<String>> notValidAfter() {
        return Optional.ofNullable(this.notValidAfter);
    }

    /**
     * The not valid before validity bound timestamp
     * 
     */
    @Import(name="notValidBefore")
    private @Nullable Output<String> notValidBefore;

    /**
     * @return The not valid before validity bound timestamp
     * 
     */
    public Optional<Output<String>> notValidBefore() {
        return Optional.ofNullable(this.notValidBefore);
    }

    /**
     * Certificate status
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Certificate status
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Array of alternative domain names.  A new certificate will be created if this field is changed.
     * 
     * &gt; **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.
     * 
     */
    @Import(name="subjectAlternativeNames")
    private @Nullable Output<List<String>> subjectAlternativeNames;

    /**
     * @return Array of alternative domain names.  A new certificate will be created if this field is changed.
     * 
     * &gt; **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.
     * 
     */
    public Optional<Output<List<String>>> subjectAlternativeNames() {
        return Optional.ofNullable(this.subjectAlternativeNames);
    }

    private LbCertificateState() {}

    private LbCertificateState(LbCertificateState $) {
        this.commonName = $.commonName;
        this.customCertificate = $.customCertificate;
        this.fingerprint = $.fingerprint;
        this.lbId = $.lbId;
        this.letsencrypt = $.letsencrypt;
        this.name = $.name;
        this.notValidAfter = $.notValidAfter;
        this.notValidBefore = $.notValidBefore;
        this.status = $.status;
        this.subjectAlternativeNames = $.subjectAlternativeNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LbCertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LbCertificateState $;

        public Builder() {
            $ = new LbCertificateState();
        }

        public Builder(LbCertificateState defaults) {
            $ = new LbCertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param commonName Main domain of the certificate. A new certificate will be created if this field is changed.
         * 
         * @return builder
         * 
         */
        public Builder commonName(@Nullable Output<String> commonName) {
            $.commonName = commonName;
            return this;
        }

        /**
         * @param commonName Main domain of the certificate. A new certificate will be created if this field is changed.
         * 
         * @return builder
         * 
         */
        public Builder commonName(String commonName) {
            return commonName(Output.of(commonName));
        }

        /**
         * @param customCertificate Configuration block for custom certificate chain. Only one of `letsencrypt` and `custom_certificate` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder customCertificate(@Nullable Output<LbCertificateCustomCertificateArgs> customCertificate) {
            $.customCertificate = customCertificate;
            return this;
        }

        /**
         * @param customCertificate Configuration block for custom certificate chain. Only one of `letsencrypt` and `custom_certificate` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder customCertificate(LbCertificateCustomCertificateArgs customCertificate) {
            return customCertificate(Output.of(customCertificate));
        }

        /**
         * @param fingerprint The identifier (SHA-1) of the certificate
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param fingerprint The identifier (SHA-1) of the certificate
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        /**
         * @param lbId The load-balancer ID this certificate is attached to.
         * 
         * &gt; **Important:** Updates to `lb_id` will recreate the load-balancer certificate.
         * 
         * @return builder
         * 
         */
        public Builder lbId(@Nullable Output<String> lbId) {
            $.lbId = lbId;
            return this;
        }

        /**
         * @param lbId The load-balancer ID this certificate is attached to.
         * 
         * &gt; **Important:** Updates to `lb_id` will recreate the load-balancer certificate.
         * 
         * @return builder
         * 
         */
        public Builder lbId(String lbId) {
            return lbId(Output.of(lbId));
        }

        /**
         * @param letsencrypt Configuration block for Let&#39;s Encrypt configuration. Only one of `letsencrypt` and `custom_certificate` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder letsencrypt(@Nullable Output<LbCertificateLetsencryptArgs> letsencrypt) {
            $.letsencrypt = letsencrypt;
            return this;
        }

        /**
         * @param letsencrypt Configuration block for Let&#39;s Encrypt configuration. Only one of `letsencrypt` and `custom_certificate` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder letsencrypt(LbCertificateLetsencryptArgs letsencrypt) {
            return letsencrypt(Output.of(letsencrypt));
        }

        /**
         * @param name The name of the certificate backend.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the certificate backend.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notValidAfter The not valid after validity bound timestamp
         * 
         * @return builder
         * 
         */
        public Builder notValidAfter(@Nullable Output<String> notValidAfter) {
            $.notValidAfter = notValidAfter;
            return this;
        }

        /**
         * @param notValidAfter The not valid after validity bound timestamp
         * 
         * @return builder
         * 
         */
        public Builder notValidAfter(String notValidAfter) {
            return notValidAfter(Output.of(notValidAfter));
        }

        /**
         * @param notValidBefore The not valid before validity bound timestamp
         * 
         * @return builder
         * 
         */
        public Builder notValidBefore(@Nullable Output<String> notValidBefore) {
            $.notValidBefore = notValidBefore;
            return this;
        }

        /**
         * @param notValidBefore The not valid before validity bound timestamp
         * 
         * @return builder
         * 
         */
        public Builder notValidBefore(String notValidBefore) {
            return notValidBefore(Output.of(notValidBefore));
        }

        /**
         * @param status Certificate status
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Certificate status
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subjectAlternativeNames Array of alternative domain names.  A new certificate will be created if this field is changed.
         * 
         * &gt; **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(@Nullable Output<List<String>> subjectAlternativeNames) {
            $.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }

        /**
         * @param subjectAlternativeNames Array of alternative domain names.  A new certificate will be created if this field is changed.
         * 
         * &gt; **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(List<String> subjectAlternativeNames) {
            return subjectAlternativeNames(Output.of(subjectAlternativeNames));
        }

        /**
         * @param subjectAlternativeNames Array of alternative domain names.  A new certificate will be created if this field is changed.
         * 
         * &gt; **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(String... subjectAlternativeNames) {
            return subjectAlternativeNames(List.of(subjectAlternativeNames));
        }

        public LbCertificateState build() {
            return $;
        }
    }

}
