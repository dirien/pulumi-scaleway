// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.dirien.scaleway.inputs.LbFrontendAclArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LbFrontendArgs extends com.pulumi.resources.ResourceArgs {

    public static final LbFrontendArgs Empty = new LbFrontendArgs();

    /**
     * A list of ACL rules to apply to the load-balancer frontend.  Defined below.
     * 
     */
    @Import(name="acls")
    private @Nullable Output<List<LbFrontendAclArgs>> acls;

    /**
     * @return A list of ACL rules to apply to the load-balancer frontend.  Defined below.
     * 
     */
    public Optional<Output<List<LbFrontendAclArgs>>> acls() {
        return Optional.ofNullable(this.acls);
    }

    /**
     * The load-balancer backend ID this frontend is attached to.
     * 
     * &gt; **Important:** Updates to `lb_id` or `backend_id` will recreate the frontend.
     * 
     */
    @Import(name="backendId", required=true)
    private Output<String> backendId;

    /**
     * @return The load-balancer backend ID this frontend is attached to.
     * 
     * &gt; **Important:** Updates to `lb_id` or `backend_id` will recreate the frontend.
     * 
     */
    public Output<String> backendId() {
        return this.backendId;
    }

    /**
     * List of Certificate IDs that should be used by the frontend.
     * 
     * &gt; **Important:** Certificates are not allowed on port 80.
     * 
     */
    @Import(name="certificateIds")
    private @Nullable Output<List<String>> certificateIds;

    /**
     * @return List of Certificate IDs that should be used by the frontend.
     * 
     * &gt; **Important:** Certificates are not allowed on port 80.
     * 
     */
    public Optional<Output<List<String>>> certificateIds() {
        return Optional.ofNullable(this.certificateIds);
    }

    /**
     * Activates HTTP/3 protocol.
     * 
     */
    @Import(name="enableHttp3")
    private @Nullable Output<Boolean> enableHttp3;

    /**
     * @return Activates HTTP/3 protocol.
     * 
     */
    public Optional<Output<Boolean>> enableHttp3() {
        return Optional.ofNullable(this.enableHttp3);
    }

    /**
     * TCP port to listen on the front side.
     * 
     */
    @Import(name="inboundPort", required=true)
    private Output<Integer> inboundPort;

    /**
     * @return TCP port to listen on the front side.
     * 
     */
    public Output<Integer> inboundPort() {
        return this.inboundPort;
    }

    /**
     * The load-balancer ID this frontend is attached to.
     * 
     */
    @Import(name="lbId", required=true)
    private Output<String> lbId;

    /**
     * @return The load-balancer ID this frontend is attached to.
     * 
     */
    public Output<String> lbId() {
        return this.lbId;
    }

    /**
     * The ACL name. If not provided it will be randomly generated.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The ACL name. If not provided it will be randomly generated.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Maximum inactivity time on the client side. (e.g.: `1s`)
     * 
     */
    @Import(name="timeoutClient")
    private @Nullable Output<String> timeoutClient;

    /**
     * @return Maximum inactivity time on the client side. (e.g.: `1s`)
     * 
     */
    public Optional<Output<String>> timeoutClient() {
        return Optional.ofNullable(this.timeoutClient);
    }

    private LbFrontendArgs() {}

    private LbFrontendArgs(LbFrontendArgs $) {
        this.acls = $.acls;
        this.backendId = $.backendId;
        this.certificateIds = $.certificateIds;
        this.enableHttp3 = $.enableHttp3;
        this.inboundPort = $.inboundPort;
        this.lbId = $.lbId;
        this.name = $.name;
        this.timeoutClient = $.timeoutClient;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LbFrontendArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LbFrontendArgs $;

        public Builder() {
            $ = new LbFrontendArgs();
        }

        public Builder(LbFrontendArgs defaults) {
            $ = new LbFrontendArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acls A list of ACL rules to apply to the load-balancer frontend.  Defined below.
         * 
         * @return builder
         * 
         */
        public Builder acls(@Nullable Output<List<LbFrontendAclArgs>> acls) {
            $.acls = acls;
            return this;
        }

        /**
         * @param acls A list of ACL rules to apply to the load-balancer frontend.  Defined below.
         * 
         * @return builder
         * 
         */
        public Builder acls(List<LbFrontendAclArgs> acls) {
            return acls(Output.of(acls));
        }

        /**
         * @param acls A list of ACL rules to apply to the load-balancer frontend.  Defined below.
         * 
         * @return builder
         * 
         */
        public Builder acls(LbFrontendAclArgs... acls) {
            return acls(List.of(acls));
        }

        /**
         * @param backendId The load-balancer backend ID this frontend is attached to.
         * 
         * &gt; **Important:** Updates to `lb_id` or `backend_id` will recreate the frontend.
         * 
         * @return builder
         * 
         */
        public Builder backendId(Output<String> backendId) {
            $.backendId = backendId;
            return this;
        }

        /**
         * @param backendId The load-balancer backend ID this frontend is attached to.
         * 
         * &gt; **Important:** Updates to `lb_id` or `backend_id` will recreate the frontend.
         * 
         * @return builder
         * 
         */
        public Builder backendId(String backendId) {
            return backendId(Output.of(backendId));
        }

        /**
         * @param certificateIds List of Certificate IDs that should be used by the frontend.
         * 
         * &gt; **Important:** Certificates are not allowed on port 80.
         * 
         * @return builder
         * 
         */
        public Builder certificateIds(@Nullable Output<List<String>> certificateIds) {
            $.certificateIds = certificateIds;
            return this;
        }

        /**
         * @param certificateIds List of Certificate IDs that should be used by the frontend.
         * 
         * &gt; **Important:** Certificates are not allowed on port 80.
         * 
         * @return builder
         * 
         */
        public Builder certificateIds(List<String> certificateIds) {
            return certificateIds(Output.of(certificateIds));
        }

        /**
         * @param certificateIds List of Certificate IDs that should be used by the frontend.
         * 
         * &gt; **Important:** Certificates are not allowed on port 80.
         * 
         * @return builder
         * 
         */
        public Builder certificateIds(String... certificateIds) {
            return certificateIds(List.of(certificateIds));
        }

        /**
         * @param enableHttp3 Activates HTTP/3 protocol.
         * 
         * @return builder
         * 
         */
        public Builder enableHttp3(@Nullable Output<Boolean> enableHttp3) {
            $.enableHttp3 = enableHttp3;
            return this;
        }

        /**
         * @param enableHttp3 Activates HTTP/3 protocol.
         * 
         * @return builder
         * 
         */
        public Builder enableHttp3(Boolean enableHttp3) {
            return enableHttp3(Output.of(enableHttp3));
        }

        /**
         * @param inboundPort TCP port to listen on the front side.
         * 
         * @return builder
         * 
         */
        public Builder inboundPort(Output<Integer> inboundPort) {
            $.inboundPort = inboundPort;
            return this;
        }

        /**
         * @param inboundPort TCP port to listen on the front side.
         * 
         * @return builder
         * 
         */
        public Builder inboundPort(Integer inboundPort) {
            return inboundPort(Output.of(inboundPort));
        }

        /**
         * @param lbId The load-balancer ID this frontend is attached to.
         * 
         * @return builder
         * 
         */
        public Builder lbId(Output<String> lbId) {
            $.lbId = lbId;
            return this;
        }

        /**
         * @param lbId The load-balancer ID this frontend is attached to.
         * 
         * @return builder
         * 
         */
        public Builder lbId(String lbId) {
            return lbId(Output.of(lbId));
        }

        /**
         * @param name The ACL name. If not provided it will be randomly generated.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The ACL name. If not provided it will be randomly generated.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param timeoutClient Maximum inactivity time on the client side. (e.g.: `1s`)
         * 
         * @return builder
         * 
         */
        public Builder timeoutClient(@Nullable Output<String> timeoutClient) {
            $.timeoutClient = timeoutClient;
            return this;
        }

        /**
         * @param timeoutClient Maximum inactivity time on the client side. (e.g.: `1s`)
         * 
         * @return builder
         * 
         */
        public Builder timeoutClient(String timeoutClient) {
            return timeoutClient(Output.of(timeoutClient));
        }

        public LbFrontendArgs build() {
            $.backendId = Objects.requireNonNull($.backendId, "expected parameter 'backendId' to be non-null");
            $.inboundPort = Objects.requireNonNull($.inboundPort, "expected parameter 'inboundPort' to be non-null");
            $.lbId = Objects.requireNonNull($.lbId, "expected parameter 'lbId' to be non-null");
            return $;
        }
    }

}
