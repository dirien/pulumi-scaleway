// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetK8sClusterAutoscalerConfig {
    /**
     * @return True if detecting similar node groups and balance the number of nodes between them is enabled.
     * 
     */
    private Boolean balanceSimilarNodeGroups;
    /**
     * @return True if the scale down feature of the autoscaler is disabled.
     * 
     */
    private Boolean disableScaleDown;
    /**
     * @return The type of resource estimator used in scale up.
     * 
     */
    private String estimator;
    /**
     * @return The type of node group expander be used in scale up.
     * 
     */
    private String expander;
    /**
     * @return Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don&#39;t cause scale up. Pods with null priority (PodPriority disabled) are non expendable.
     * 
     */
    private Integer expendablePodsPriorityCutoff;
    /**
     * @return True if ignoring DaemonSet pods when calculating resource utilization for scaling down is enabled.
     * 
     */
    private Boolean ignoreDaemonsetsUtilization;
    private Integer maxGracefulTerminationSec;
    /**
     * @return The duration after scale up that scale down evaluation resumes.
     * 
     */
    private String scaleDownDelayAfterAdd;
    /**
     * @return The duration a node should be unneeded before it is eligible for scale down.
     * 
     */
    private String scaleDownUnneededTime;
    private Double scaleDownUtilizationThreshold;

    private GetK8sClusterAutoscalerConfig() {}
    /**
     * @return True if detecting similar node groups and balance the number of nodes between them is enabled.
     * 
     */
    public Boolean balanceSimilarNodeGroups() {
        return this.balanceSimilarNodeGroups;
    }
    /**
     * @return True if the scale down feature of the autoscaler is disabled.
     * 
     */
    public Boolean disableScaleDown() {
        return this.disableScaleDown;
    }
    /**
     * @return The type of resource estimator used in scale up.
     * 
     */
    public String estimator() {
        return this.estimator;
    }
    /**
     * @return The type of node group expander be used in scale up.
     * 
     */
    public String expander() {
        return this.expander;
    }
    /**
     * @return Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don&#39;t cause scale up. Pods with null priority (PodPriority disabled) are non expendable.
     * 
     */
    public Integer expendablePodsPriorityCutoff() {
        return this.expendablePodsPriorityCutoff;
    }
    /**
     * @return True if ignoring DaemonSet pods when calculating resource utilization for scaling down is enabled.
     * 
     */
    public Boolean ignoreDaemonsetsUtilization() {
        return this.ignoreDaemonsetsUtilization;
    }
    public Integer maxGracefulTerminationSec() {
        return this.maxGracefulTerminationSec;
    }
    /**
     * @return The duration after scale up that scale down evaluation resumes.
     * 
     */
    public String scaleDownDelayAfterAdd() {
        return this.scaleDownDelayAfterAdd;
    }
    /**
     * @return The duration a node should be unneeded before it is eligible for scale down.
     * 
     */
    public String scaleDownUnneededTime() {
        return this.scaleDownUnneededTime;
    }
    public Double scaleDownUtilizationThreshold() {
        return this.scaleDownUtilizationThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetK8sClusterAutoscalerConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean balanceSimilarNodeGroups;
        private Boolean disableScaleDown;
        private String estimator;
        private String expander;
        private Integer expendablePodsPriorityCutoff;
        private Boolean ignoreDaemonsetsUtilization;
        private Integer maxGracefulTerminationSec;
        private String scaleDownDelayAfterAdd;
        private String scaleDownUnneededTime;
        private Double scaleDownUtilizationThreshold;
        public Builder() {}
        public Builder(GetK8sClusterAutoscalerConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.balanceSimilarNodeGroups = defaults.balanceSimilarNodeGroups;
    	      this.disableScaleDown = defaults.disableScaleDown;
    	      this.estimator = defaults.estimator;
    	      this.expander = defaults.expander;
    	      this.expendablePodsPriorityCutoff = defaults.expendablePodsPriorityCutoff;
    	      this.ignoreDaemonsetsUtilization = defaults.ignoreDaemonsetsUtilization;
    	      this.maxGracefulTerminationSec = defaults.maxGracefulTerminationSec;
    	      this.scaleDownDelayAfterAdd = defaults.scaleDownDelayAfterAdd;
    	      this.scaleDownUnneededTime = defaults.scaleDownUnneededTime;
    	      this.scaleDownUtilizationThreshold = defaults.scaleDownUtilizationThreshold;
        }

        @CustomType.Setter
        public Builder balanceSimilarNodeGroups(Boolean balanceSimilarNodeGroups) {
            this.balanceSimilarNodeGroups = Objects.requireNonNull(balanceSimilarNodeGroups);
            return this;
        }
        @CustomType.Setter
        public Builder disableScaleDown(Boolean disableScaleDown) {
            this.disableScaleDown = Objects.requireNonNull(disableScaleDown);
            return this;
        }
        @CustomType.Setter
        public Builder estimator(String estimator) {
            this.estimator = Objects.requireNonNull(estimator);
            return this;
        }
        @CustomType.Setter
        public Builder expander(String expander) {
            this.expander = Objects.requireNonNull(expander);
            return this;
        }
        @CustomType.Setter
        public Builder expendablePodsPriorityCutoff(Integer expendablePodsPriorityCutoff) {
            this.expendablePodsPriorityCutoff = Objects.requireNonNull(expendablePodsPriorityCutoff);
            return this;
        }
        @CustomType.Setter
        public Builder ignoreDaemonsetsUtilization(Boolean ignoreDaemonsetsUtilization) {
            this.ignoreDaemonsetsUtilization = Objects.requireNonNull(ignoreDaemonsetsUtilization);
            return this;
        }
        @CustomType.Setter
        public Builder maxGracefulTerminationSec(Integer maxGracefulTerminationSec) {
            this.maxGracefulTerminationSec = Objects.requireNonNull(maxGracefulTerminationSec);
            return this;
        }
        @CustomType.Setter
        public Builder scaleDownDelayAfterAdd(String scaleDownDelayAfterAdd) {
            this.scaleDownDelayAfterAdd = Objects.requireNonNull(scaleDownDelayAfterAdd);
            return this;
        }
        @CustomType.Setter
        public Builder scaleDownUnneededTime(String scaleDownUnneededTime) {
            this.scaleDownUnneededTime = Objects.requireNonNull(scaleDownUnneededTime);
            return this;
        }
        @CustomType.Setter
        public Builder scaleDownUtilizationThreshold(Double scaleDownUtilizationThreshold) {
            this.scaleDownUtilizationThreshold = Objects.requireNonNull(scaleDownUtilizationThreshold);
            return this;
        }
        public GetK8sClusterAutoscalerConfig build() {
            final var o = new GetK8sClusterAutoscalerConfig();
            o.balanceSimilarNodeGroups = balanceSimilarNodeGroups;
            o.disableScaleDown = disableScaleDown;
            o.estimator = estimator;
            o.expander = expander;
            o.expendablePodsPriorityCutoff = expendablePodsPriorityCutoff;
            o.ignoreDaemonsetsUtilization = ignoreDaemonsetsUtilization;
            o.maxGracefulTerminationSec = maxGracefulTerminationSec;
            o.scaleDownDelayAfterAdd = scaleDownDelayAfterAdd;
            o.scaleDownUnneededTime = scaleDownUnneededTime;
            o.scaleDownUtilizationThreshold = scaleDownUtilizationThreshold;
            return o;
        }
    }
}
