// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceUserDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceUserDataArgs Empty = new InstanceUserDataArgs();

    /**
     * Key of the user data.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return Key of the user data.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * The ID of the server associated with.
     * 
     */
    @Import(name="serverId", required=true)
    private Output<String> serverId;

    /**
     * @return The ID of the server associated with.
     * 
     */
    public Output<String> serverId() {
        return this.serverId;
    }

    /**
     * Value associated with your key
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return Value associated with your key
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    /**
     * `zone`) The zone in which the server should be created.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return `zone`) The zone in which the server should be created.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private InstanceUserDataArgs() {}

    private InstanceUserDataArgs(InstanceUserDataArgs $) {
        this.key = $.key;
        this.serverId = $.serverId;
        this.value = $.value;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceUserDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceUserDataArgs $;

        public Builder() {
            $ = new InstanceUserDataArgs();
        }

        public Builder(InstanceUserDataArgs defaults) {
            $ = new InstanceUserDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param key Key of the user data.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Key of the user data.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param serverId The ID of the server associated with.
         * 
         * @return builder
         * 
         */
        public Builder serverId(Output<String> serverId) {
            $.serverId = serverId;
            return this;
        }

        /**
         * @param serverId The ID of the server associated with.
         * 
         * @return builder
         * 
         */
        public Builder serverId(String serverId) {
            return serverId(Output.of(serverId));
        }

        /**
         * @param value Value associated with your key
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Value associated with your key
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        /**
         * @param zone `zone`) The zone in which the server should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone `zone`) The zone in which the server should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public InstanceUserDataArgs build() {
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.serverId = Objects.requireNonNull($.serverId, "expected parameter 'serverId' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
