// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.dirien.scaleway.inputs.RdbInstancePrivateNetworkArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RdbInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final RdbInstanceArgs Empty = new RdbInstanceArgs();

    /**
     * Boolean to store logical backups in the same region as the database instance.
     * 
     */
    @Import(name="backupSameRegion")
    private @Nullable Output<Boolean> backupSameRegion;

    /**
     * @return Boolean to store logical backups in the same region as the database instance.
     * 
     */
    public Optional<Output<Boolean>> backupSameRegion() {
        return Optional.ofNullable(this.backupSameRegion);
    }

    /**
     * Backup schedule frequency in hours.
     * 
     */
    @Import(name="backupScheduleFrequency")
    private @Nullable Output<Integer> backupScheduleFrequency;

    /**
     * @return Backup schedule frequency in hours.
     * 
     */
    public Optional<Output<Integer>> backupScheduleFrequency() {
        return Optional.ofNullable(this.backupScheduleFrequency);
    }

    /**
     * Backup schedule retention in days.
     * 
     */
    @Import(name="backupScheduleRetention")
    private @Nullable Output<Integer> backupScheduleRetention;

    /**
     * @return Backup schedule retention in days.
     * 
     */
    public Optional<Output<Integer>> backupScheduleRetention() {
        return Optional.ofNullable(this.backupScheduleRetention);
    }

    /**
     * Disable automated backup for the database instance.
     * 
     */
    @Import(name="disableBackup")
    private @Nullable Output<Boolean> disableBackup;

    /**
     * @return Disable automated backup for the database instance.
     * 
     */
    public Optional<Output<Boolean>> disableBackup() {
        return Optional.ofNullable(this.disableBackup);
    }

    /**
     * Database Instance&#39;s engine version (e.g. `PostgreSQL-11`).
     * 
     * &gt; **Important:** Updates to `engine` will recreate the Database Instance.
     * 
     */
    @Import(name="engine", required=true)
    private Output<String> engine;

    /**
     * @return Database Instance&#39;s engine version (e.g. `PostgreSQL-11`).
     * 
     * &gt; **Important:** Updates to `engine` will recreate the Database Instance.
     * 
     */
    public Output<String> engine() {
        return this.engine;
    }

    /**
     * Map of engine settings to be set at database initialisation.
     * 
     * &gt; **Important:** Updates to `init_settings` will recreate the Database Instance.
     * 
     */
    @Import(name="initSettings")
    private @Nullable Output<Map<String,String>> initSettings;

    /**
     * @return Map of engine settings to be set at database initialisation.
     * 
     * &gt; **Important:** Updates to `init_settings` will recreate the Database Instance.
     * 
     */
    public Optional<Output<Map<String,String>>> initSettings() {
        return Optional.ofNullable(this.initSettings);
    }

    /**
     * Enable or disable high availability for the database instance.
     * 
     * &gt; **Important:** Updates to `is_ha_cluster` will recreate the Database Instance.
     * 
     */
    @Import(name="isHaCluster")
    private @Nullable Output<Boolean> isHaCluster;

    /**
     * @return Enable or disable high availability for the database instance.
     * 
     * &gt; **Important:** Updates to `is_ha_cluster` will recreate the Database Instance.
     * 
     */
    public Optional<Output<Boolean>> isHaCluster() {
        return Optional.ofNullable(this.isHaCluster);
    }

    /**
     * The name of the Database Instance.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Database Instance.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The type of database instance you want to create (e.g. `db-dev-s`).
     * 
     * &gt; **Important:** Updates to `node_type` will upgrade the Database Instance to the desired `node_type` without any
     * interruption. Keep in mind that you cannot downgrade a Database Instance.
     * 
     */
    @Import(name="nodeType", required=true)
    private Output<String> nodeType;

    /**
     * @return The type of database instance you want to create (e.g. `db-dev-s`).
     * 
     * &gt; **Important:** Updates to `node_type` will upgrade the Database Instance to the desired `node_type` without any
     * interruption. Keep in mind that you cannot downgrade a Database Instance.
     * 
     */
    public Output<String> nodeType() {
        return this.nodeType;
    }

    /**
     * Password for the first user of the database instance.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password for the first user of the database instance.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * List of private networks endpoints of the database instance.
     * 
     */
    @Import(name="privateNetwork")
    private @Nullable Output<RdbInstancePrivateNetworkArgs> privateNetwork;

    /**
     * @return List of private networks endpoints of the database instance.
     * 
     */
    public Optional<Output<RdbInstancePrivateNetworkArgs>> privateNetwork() {
        return Optional.ofNullable(this.privateNetwork);
    }

    /**
     * `project_id`) The ID of the project the Database
     * Instance is associated with.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return `project_id`) The ID of the project the Database
     * Instance is associated with.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * `region`) The region
     * in which the Database Instance should be created.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return `region`) The region
     * in which the Database Instance should be created.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Map of engine settings to be set. Using this option will override default config.
     * 
     */
    @Import(name="settings")
    private @Nullable Output<Map<String,String>> settings;

    /**
     * @return Map of engine settings to be set. Using this option will override default config.
     * 
     */
    public Optional<Output<Map<String,String>>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * The tags associated with the Database Instance.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The tags associated with the Database Instance.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Identifier for the first user of the database instance.
     * 
     * &gt; **Important:** Updates to `user_name` will recreate the Database Instance.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return Identifier for the first user of the database instance.
     * 
     * &gt; **Important:** Updates to `user_name` will recreate the Database Instance.
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    /**
     * Volume size (in GB) when `volume_type` is set to `bssd`.
     * 
     */
    @Import(name="volumeSizeInGb")
    private @Nullable Output<Integer> volumeSizeInGb;

    /**
     * @return Volume size (in GB) when `volume_type` is set to `bssd`.
     * 
     */
    public Optional<Output<Integer>> volumeSizeInGb() {
        return Optional.ofNullable(this.volumeSizeInGb);
    }

    /**
     * Type of volume where data are stored (`bssd` or `lssd`).
     * 
     */
    @Import(name="volumeType")
    private @Nullable Output<String> volumeType;

    /**
     * @return Type of volume where data are stored (`bssd` or `lssd`).
     * 
     */
    public Optional<Output<String>> volumeType() {
        return Optional.ofNullable(this.volumeType);
    }

    private RdbInstanceArgs() {}

    private RdbInstanceArgs(RdbInstanceArgs $) {
        this.backupSameRegion = $.backupSameRegion;
        this.backupScheduleFrequency = $.backupScheduleFrequency;
        this.backupScheduleRetention = $.backupScheduleRetention;
        this.disableBackup = $.disableBackup;
        this.engine = $.engine;
        this.initSettings = $.initSettings;
        this.isHaCluster = $.isHaCluster;
        this.name = $.name;
        this.nodeType = $.nodeType;
        this.password = $.password;
        this.privateNetwork = $.privateNetwork;
        this.projectId = $.projectId;
        this.region = $.region;
        this.settings = $.settings;
        this.tags = $.tags;
        this.userName = $.userName;
        this.volumeSizeInGb = $.volumeSizeInGb;
        this.volumeType = $.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RdbInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RdbInstanceArgs $;

        public Builder() {
            $ = new RdbInstanceArgs();
        }

        public Builder(RdbInstanceArgs defaults) {
            $ = new RdbInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupSameRegion Boolean to store logical backups in the same region as the database instance.
         * 
         * @return builder
         * 
         */
        public Builder backupSameRegion(@Nullable Output<Boolean> backupSameRegion) {
            $.backupSameRegion = backupSameRegion;
            return this;
        }

        /**
         * @param backupSameRegion Boolean to store logical backups in the same region as the database instance.
         * 
         * @return builder
         * 
         */
        public Builder backupSameRegion(Boolean backupSameRegion) {
            return backupSameRegion(Output.of(backupSameRegion));
        }

        /**
         * @param backupScheduleFrequency Backup schedule frequency in hours.
         * 
         * @return builder
         * 
         */
        public Builder backupScheduleFrequency(@Nullable Output<Integer> backupScheduleFrequency) {
            $.backupScheduleFrequency = backupScheduleFrequency;
            return this;
        }

        /**
         * @param backupScheduleFrequency Backup schedule frequency in hours.
         * 
         * @return builder
         * 
         */
        public Builder backupScheduleFrequency(Integer backupScheduleFrequency) {
            return backupScheduleFrequency(Output.of(backupScheduleFrequency));
        }

        /**
         * @param backupScheduleRetention Backup schedule retention in days.
         * 
         * @return builder
         * 
         */
        public Builder backupScheduleRetention(@Nullable Output<Integer> backupScheduleRetention) {
            $.backupScheduleRetention = backupScheduleRetention;
            return this;
        }

        /**
         * @param backupScheduleRetention Backup schedule retention in days.
         * 
         * @return builder
         * 
         */
        public Builder backupScheduleRetention(Integer backupScheduleRetention) {
            return backupScheduleRetention(Output.of(backupScheduleRetention));
        }

        /**
         * @param disableBackup Disable automated backup for the database instance.
         * 
         * @return builder
         * 
         */
        public Builder disableBackup(@Nullable Output<Boolean> disableBackup) {
            $.disableBackup = disableBackup;
            return this;
        }

        /**
         * @param disableBackup Disable automated backup for the database instance.
         * 
         * @return builder
         * 
         */
        public Builder disableBackup(Boolean disableBackup) {
            return disableBackup(Output.of(disableBackup));
        }

        /**
         * @param engine Database Instance&#39;s engine version (e.g. `PostgreSQL-11`).
         * 
         * &gt; **Important:** Updates to `engine` will recreate the Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder engine(Output<String> engine) {
            $.engine = engine;
            return this;
        }

        /**
         * @param engine Database Instance&#39;s engine version (e.g. `PostgreSQL-11`).
         * 
         * &gt; **Important:** Updates to `engine` will recreate the Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder engine(String engine) {
            return engine(Output.of(engine));
        }

        /**
         * @param initSettings Map of engine settings to be set at database initialisation.
         * 
         * &gt; **Important:** Updates to `init_settings` will recreate the Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder initSettings(@Nullable Output<Map<String,String>> initSettings) {
            $.initSettings = initSettings;
            return this;
        }

        /**
         * @param initSettings Map of engine settings to be set at database initialisation.
         * 
         * &gt; **Important:** Updates to `init_settings` will recreate the Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder initSettings(Map<String,String> initSettings) {
            return initSettings(Output.of(initSettings));
        }

        /**
         * @param isHaCluster Enable or disable high availability for the database instance.
         * 
         * &gt; **Important:** Updates to `is_ha_cluster` will recreate the Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder isHaCluster(@Nullable Output<Boolean> isHaCluster) {
            $.isHaCluster = isHaCluster;
            return this;
        }

        /**
         * @param isHaCluster Enable or disable high availability for the database instance.
         * 
         * &gt; **Important:** Updates to `is_ha_cluster` will recreate the Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder isHaCluster(Boolean isHaCluster) {
            return isHaCluster(Output.of(isHaCluster));
        }

        /**
         * @param name The name of the Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeType The type of database instance you want to create (e.g. `db-dev-s`).
         * 
         * &gt; **Important:** Updates to `node_type` will upgrade the Database Instance to the desired `node_type` without any
         * interruption. Keep in mind that you cannot downgrade a Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder nodeType(Output<String> nodeType) {
            $.nodeType = nodeType;
            return this;
        }

        /**
         * @param nodeType The type of database instance you want to create (e.g. `db-dev-s`).
         * 
         * &gt; **Important:** Updates to `node_type` will upgrade the Database Instance to the desired `node_type` without any
         * interruption. Keep in mind that you cannot downgrade a Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder nodeType(String nodeType) {
            return nodeType(Output.of(nodeType));
        }

        /**
         * @param password Password for the first user of the database instance.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password for the first user of the database instance.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param privateNetwork List of private networks endpoints of the database instance.
         * 
         * @return builder
         * 
         */
        public Builder privateNetwork(@Nullable Output<RdbInstancePrivateNetworkArgs> privateNetwork) {
            $.privateNetwork = privateNetwork;
            return this;
        }

        /**
         * @param privateNetwork List of private networks endpoints of the database instance.
         * 
         * @return builder
         * 
         */
        public Builder privateNetwork(RdbInstancePrivateNetworkArgs privateNetwork) {
            return privateNetwork(Output.of(privateNetwork));
        }

        /**
         * @param projectId `project_id`) The ID of the project the Database
         * Instance is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId `project_id`) The ID of the project the Database
         * Instance is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region `region`) The region
         * in which the Database Instance should be created.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region `region`) The region
         * in which the Database Instance should be created.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param settings Map of engine settings to be set. Using this option will override default config.
         * 
         * @return builder
         * 
         */
        public Builder settings(@Nullable Output<Map<String,String>> settings) {
            $.settings = settings;
            return this;
        }

        /**
         * @param settings Map of engine settings to be set. Using this option will override default config.
         * 
         * @return builder
         * 
         */
        public Builder settings(Map<String,String> settings) {
            return settings(Output.of(settings));
        }

        /**
         * @param tags The tags associated with the Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags associated with the Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags associated with the Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param userName Identifier for the first user of the database instance.
         * 
         * &gt; **Important:** Updates to `user_name` will recreate the Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName Identifier for the first user of the database instance.
         * 
         * &gt; **Important:** Updates to `user_name` will recreate the Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        /**
         * @param volumeSizeInGb Volume size (in GB) when `volume_type` is set to `bssd`.
         * 
         * @return builder
         * 
         */
        public Builder volumeSizeInGb(@Nullable Output<Integer> volumeSizeInGb) {
            $.volumeSizeInGb = volumeSizeInGb;
            return this;
        }

        /**
         * @param volumeSizeInGb Volume size (in GB) when `volume_type` is set to `bssd`.
         * 
         * @return builder
         * 
         */
        public Builder volumeSizeInGb(Integer volumeSizeInGb) {
            return volumeSizeInGb(Output.of(volumeSizeInGb));
        }

        /**
         * @param volumeType Type of volume where data are stored (`bssd` or `lssd`).
         * 
         * @return builder
         * 
         */
        public Builder volumeType(@Nullable Output<String> volumeType) {
            $.volumeType = volumeType;
            return this;
        }

        /**
         * @param volumeType Type of volume where data are stored (`bssd` or `lssd`).
         * 
         * @return builder
         * 
         */
        public Builder volumeType(String volumeType) {
            return volumeType(Output.of(volumeType));
        }

        public RdbInstanceArgs build() {
            $.engine = Objects.requireNonNull($.engine, "expected parameter 'engine' to be non-null");
            $.nodeType = Objects.requireNonNull($.nodeType, "expected parameter 'nodeType' to be non-null");
            return $;
        }
    }

}
