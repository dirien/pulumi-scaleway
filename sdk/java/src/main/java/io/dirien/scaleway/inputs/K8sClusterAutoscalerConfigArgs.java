// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class K8sClusterAutoscalerConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final K8sClusterAutoscalerConfigArgs Empty = new K8sClusterAutoscalerConfigArgs();

    /**
     * Detect similar node groups and balance the number of nodes between them.
     * 
     */
    @Import(name="balanceSimilarNodeGroups")
    private @Nullable Output<Boolean> balanceSimilarNodeGroups;

    /**
     * @return Detect similar node groups and balance the number of nodes between them.
     * 
     */
    public Optional<Output<Boolean>> balanceSimilarNodeGroups() {
        return Optional.ofNullable(this.balanceSimilarNodeGroups);
    }

    /**
     * Disables the scale down feature of the autoscaler.
     * 
     */
    @Import(name="disableScaleDown")
    private @Nullable Output<Boolean> disableScaleDown;

    /**
     * @return Disables the scale down feature of the autoscaler.
     * 
     */
    public Optional<Output<Boolean>> disableScaleDown() {
        return Optional.ofNullable(this.disableScaleDown);
    }

    /**
     * Type of resource estimator to be used in scale up.
     * 
     */
    @Import(name="estimator")
    private @Nullable Output<String> estimator;

    /**
     * @return Type of resource estimator to be used in scale up.
     * 
     */
    public Optional<Output<String>> estimator() {
        return Optional.ofNullable(this.estimator);
    }

    /**
     * Type of node group expander to be used in scale up.
     * 
     */
    @Import(name="expander")
    private @Nullable Output<String> expander;

    /**
     * @return Type of node group expander to be used in scale up.
     * 
     */
    public Optional<Output<String>> expander() {
        return Optional.ofNullable(this.expander);
    }

    /**
     * Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don&#39;t cause scale up. Pods with null priority (PodPriority disabled) are non expendable.
     * 
     */
    @Import(name="expendablePodsPriorityCutoff")
    private @Nullable Output<Integer> expendablePodsPriorityCutoff;

    /**
     * @return Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don&#39;t cause scale up. Pods with null priority (PodPriority disabled) are non expendable.
     * 
     */
    public Optional<Output<Integer>> expendablePodsPriorityCutoff() {
        return Optional.ofNullable(this.expendablePodsPriorityCutoff);
    }

    /**
     * Ignore DaemonSet pods when calculating resource utilization for scaling down.
     * 
     */
    @Import(name="ignoreDaemonsetsUtilization")
    private @Nullable Output<Boolean> ignoreDaemonsetsUtilization;

    /**
     * @return Ignore DaemonSet pods when calculating resource utilization for scaling down.
     * 
     */
    public Optional<Output<Boolean>> ignoreDaemonsetsUtilization() {
        return Optional.ofNullable(this.ignoreDaemonsetsUtilization);
    }

    /**
     * Maximum number of seconds the cluster autoscaler waits for pod termination when trying to scale down a node
     * 
     */
    @Import(name="maxGracefulTerminationSec")
    private @Nullable Output<Integer> maxGracefulTerminationSec;

    /**
     * @return Maximum number of seconds the cluster autoscaler waits for pod termination when trying to scale down a node
     * 
     */
    public Optional<Output<Integer>> maxGracefulTerminationSec() {
        return Optional.ofNullable(this.maxGracefulTerminationSec);
    }

    /**
     * How long after scale up that scale down evaluation resumes.
     * 
     */
    @Import(name="scaleDownDelayAfterAdd")
    private @Nullable Output<String> scaleDownDelayAfterAdd;

    /**
     * @return How long after scale up that scale down evaluation resumes.
     * 
     */
    public Optional<Output<String>> scaleDownDelayAfterAdd() {
        return Optional.ofNullable(this.scaleDownDelayAfterAdd);
    }

    /**
     * How long a node should be unneeded before it is eligible for scale down.
     * 
     */
    @Import(name="scaleDownUnneededTime")
    private @Nullable Output<String> scaleDownUnneededTime;

    /**
     * @return How long a node should be unneeded before it is eligible for scale down.
     * 
     */
    public Optional<Output<String>> scaleDownUnneededTime() {
        return Optional.ofNullable(this.scaleDownUnneededTime);
    }

    /**
     * Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down
     * 
     */
    @Import(name="scaleDownUtilizationThreshold")
    private @Nullable Output<Double> scaleDownUtilizationThreshold;

    /**
     * @return Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down
     * 
     */
    public Optional<Output<Double>> scaleDownUtilizationThreshold() {
        return Optional.ofNullable(this.scaleDownUtilizationThreshold);
    }

    private K8sClusterAutoscalerConfigArgs() {}

    private K8sClusterAutoscalerConfigArgs(K8sClusterAutoscalerConfigArgs $) {
        this.balanceSimilarNodeGroups = $.balanceSimilarNodeGroups;
        this.disableScaleDown = $.disableScaleDown;
        this.estimator = $.estimator;
        this.expander = $.expander;
        this.expendablePodsPriorityCutoff = $.expendablePodsPriorityCutoff;
        this.ignoreDaemonsetsUtilization = $.ignoreDaemonsetsUtilization;
        this.maxGracefulTerminationSec = $.maxGracefulTerminationSec;
        this.scaleDownDelayAfterAdd = $.scaleDownDelayAfterAdd;
        this.scaleDownUnneededTime = $.scaleDownUnneededTime;
        this.scaleDownUtilizationThreshold = $.scaleDownUtilizationThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(K8sClusterAutoscalerConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private K8sClusterAutoscalerConfigArgs $;

        public Builder() {
            $ = new K8sClusterAutoscalerConfigArgs();
        }

        public Builder(K8sClusterAutoscalerConfigArgs defaults) {
            $ = new K8sClusterAutoscalerConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param balanceSimilarNodeGroups Detect similar node groups and balance the number of nodes between them.
         * 
         * @return builder
         * 
         */
        public Builder balanceSimilarNodeGroups(@Nullable Output<Boolean> balanceSimilarNodeGroups) {
            $.balanceSimilarNodeGroups = balanceSimilarNodeGroups;
            return this;
        }

        /**
         * @param balanceSimilarNodeGroups Detect similar node groups and balance the number of nodes between them.
         * 
         * @return builder
         * 
         */
        public Builder balanceSimilarNodeGroups(Boolean balanceSimilarNodeGroups) {
            return balanceSimilarNodeGroups(Output.of(balanceSimilarNodeGroups));
        }

        /**
         * @param disableScaleDown Disables the scale down feature of the autoscaler.
         * 
         * @return builder
         * 
         */
        public Builder disableScaleDown(@Nullable Output<Boolean> disableScaleDown) {
            $.disableScaleDown = disableScaleDown;
            return this;
        }

        /**
         * @param disableScaleDown Disables the scale down feature of the autoscaler.
         * 
         * @return builder
         * 
         */
        public Builder disableScaleDown(Boolean disableScaleDown) {
            return disableScaleDown(Output.of(disableScaleDown));
        }

        /**
         * @param estimator Type of resource estimator to be used in scale up.
         * 
         * @return builder
         * 
         */
        public Builder estimator(@Nullable Output<String> estimator) {
            $.estimator = estimator;
            return this;
        }

        /**
         * @param estimator Type of resource estimator to be used in scale up.
         * 
         * @return builder
         * 
         */
        public Builder estimator(String estimator) {
            return estimator(Output.of(estimator));
        }

        /**
         * @param expander Type of node group expander to be used in scale up.
         * 
         * @return builder
         * 
         */
        public Builder expander(@Nullable Output<String> expander) {
            $.expander = expander;
            return this;
        }

        /**
         * @param expander Type of node group expander to be used in scale up.
         * 
         * @return builder
         * 
         */
        public Builder expander(String expander) {
            return expander(Output.of(expander));
        }

        /**
         * @param expendablePodsPriorityCutoff Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don&#39;t cause scale up. Pods with null priority (PodPriority disabled) are non expendable.
         * 
         * @return builder
         * 
         */
        public Builder expendablePodsPriorityCutoff(@Nullable Output<Integer> expendablePodsPriorityCutoff) {
            $.expendablePodsPriorityCutoff = expendablePodsPriorityCutoff;
            return this;
        }

        /**
         * @param expendablePodsPriorityCutoff Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don&#39;t cause scale up. Pods with null priority (PodPriority disabled) are non expendable.
         * 
         * @return builder
         * 
         */
        public Builder expendablePodsPriorityCutoff(Integer expendablePodsPriorityCutoff) {
            return expendablePodsPriorityCutoff(Output.of(expendablePodsPriorityCutoff));
        }

        /**
         * @param ignoreDaemonsetsUtilization Ignore DaemonSet pods when calculating resource utilization for scaling down.
         * 
         * @return builder
         * 
         */
        public Builder ignoreDaemonsetsUtilization(@Nullable Output<Boolean> ignoreDaemonsetsUtilization) {
            $.ignoreDaemonsetsUtilization = ignoreDaemonsetsUtilization;
            return this;
        }

        /**
         * @param ignoreDaemonsetsUtilization Ignore DaemonSet pods when calculating resource utilization for scaling down.
         * 
         * @return builder
         * 
         */
        public Builder ignoreDaemonsetsUtilization(Boolean ignoreDaemonsetsUtilization) {
            return ignoreDaemonsetsUtilization(Output.of(ignoreDaemonsetsUtilization));
        }

        /**
         * @param maxGracefulTerminationSec Maximum number of seconds the cluster autoscaler waits for pod termination when trying to scale down a node
         * 
         * @return builder
         * 
         */
        public Builder maxGracefulTerminationSec(@Nullable Output<Integer> maxGracefulTerminationSec) {
            $.maxGracefulTerminationSec = maxGracefulTerminationSec;
            return this;
        }

        /**
         * @param maxGracefulTerminationSec Maximum number of seconds the cluster autoscaler waits for pod termination when trying to scale down a node
         * 
         * @return builder
         * 
         */
        public Builder maxGracefulTerminationSec(Integer maxGracefulTerminationSec) {
            return maxGracefulTerminationSec(Output.of(maxGracefulTerminationSec));
        }

        /**
         * @param scaleDownDelayAfterAdd How long after scale up that scale down evaluation resumes.
         * 
         * @return builder
         * 
         */
        public Builder scaleDownDelayAfterAdd(@Nullable Output<String> scaleDownDelayAfterAdd) {
            $.scaleDownDelayAfterAdd = scaleDownDelayAfterAdd;
            return this;
        }

        /**
         * @param scaleDownDelayAfterAdd How long after scale up that scale down evaluation resumes.
         * 
         * @return builder
         * 
         */
        public Builder scaleDownDelayAfterAdd(String scaleDownDelayAfterAdd) {
            return scaleDownDelayAfterAdd(Output.of(scaleDownDelayAfterAdd));
        }

        /**
         * @param scaleDownUnneededTime How long a node should be unneeded before it is eligible for scale down.
         * 
         * @return builder
         * 
         */
        public Builder scaleDownUnneededTime(@Nullable Output<String> scaleDownUnneededTime) {
            $.scaleDownUnneededTime = scaleDownUnneededTime;
            return this;
        }

        /**
         * @param scaleDownUnneededTime How long a node should be unneeded before it is eligible for scale down.
         * 
         * @return builder
         * 
         */
        public Builder scaleDownUnneededTime(String scaleDownUnneededTime) {
            return scaleDownUnneededTime(Output.of(scaleDownUnneededTime));
        }

        /**
         * @param scaleDownUtilizationThreshold Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down
         * 
         * @return builder
         * 
         */
        public Builder scaleDownUtilizationThreshold(@Nullable Output<Double> scaleDownUtilizationThreshold) {
            $.scaleDownUtilizationThreshold = scaleDownUtilizationThreshold;
            return this;
        }

        /**
         * @param scaleDownUtilizationThreshold Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down
         * 
         * @return builder
         * 
         */
        public Builder scaleDownUtilizationThreshold(Double scaleDownUtilizationThreshold) {
            return scaleDownUtilizationThreshold(Output.of(scaleDownUtilizationThreshold));
        }

        public K8sClusterAutoscalerConfigArgs build() {
            return $;
        }
    }

}
