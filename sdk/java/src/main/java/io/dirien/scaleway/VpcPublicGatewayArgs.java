// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcPublicGatewayArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpcPublicGatewayArgs Empty = new VpcPublicGatewayArgs();

    /**
     * Enable SSH bastion on the gateway
     * 
     */
    @Import(name="bastionEnabled")
    private @Nullable Output<Boolean> bastionEnabled;

    /**
     * @return Enable SSH bastion on the gateway
     * 
     */
    public Optional<Output<Boolean>> bastionEnabled() {
        return Optional.ofNullable(this.bastionEnabled);
    }

    /**
     * The port on which the SSH bastion will listen.
     * 
     */
    @Import(name="bastionPort")
    private @Nullable Output<Integer> bastionPort;

    /**
     * @return The port on which the SSH bastion will listen.
     * 
     */
    public Optional<Output<Integer>> bastionPort() {
        return Optional.ofNullable(this.bastionPort);
    }

    /**
     * Enable SMTP on the gateway
     * 
     */
    @Import(name="enableSmtp")
    private @Nullable Output<Boolean> enableSmtp;

    /**
     * @return Enable SMTP on the gateway
     * 
     */
    public Optional<Output<Boolean>> enableSmtp() {
        return Optional.ofNullable(this.enableSmtp);
    }

    /**
     * attach an existing flexible IP to the gateway
     * 
     */
    @Import(name="ipId")
    private @Nullable Output<String> ipId;

    /**
     * @return attach an existing flexible IP to the gateway
     * 
     */
    public Optional<Output<String>> ipId() {
        return Optional.ofNullable(this.ipId);
    }

    /**
     * The name of the public gateway. If not provided it will be randomly generated.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the public gateway. If not provided it will be randomly generated.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * `project_id`) The ID of the project the public gateway is associated with.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return `project_id`) The ID of the project the public gateway is associated with.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The tags associated with the public gateway.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The tags associated with the public gateway.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The gateway type.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The gateway type.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * override the gateway&#39;s default recursive DNS servers, if DNS features are enabled.
     * 
     */
    @Import(name="upstreamDnsServers")
    private @Nullable Output<List<String>> upstreamDnsServers;

    /**
     * @return override the gateway&#39;s default recursive DNS servers, if DNS features are enabled.
     * 
     */
    public Optional<Output<List<String>>> upstreamDnsServers() {
        return Optional.ofNullable(this.upstreamDnsServers);
    }

    /**
     * `zone`) The zone in which the public gateway should be created.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return `zone`) The zone in which the public gateway should be created.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private VpcPublicGatewayArgs() {}

    private VpcPublicGatewayArgs(VpcPublicGatewayArgs $) {
        this.bastionEnabled = $.bastionEnabled;
        this.bastionPort = $.bastionPort;
        this.enableSmtp = $.enableSmtp;
        this.ipId = $.ipId;
        this.name = $.name;
        this.projectId = $.projectId;
        this.tags = $.tags;
        this.type = $.type;
        this.upstreamDnsServers = $.upstreamDnsServers;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcPublicGatewayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcPublicGatewayArgs $;

        public Builder() {
            $ = new VpcPublicGatewayArgs();
        }

        public Builder(VpcPublicGatewayArgs defaults) {
            $ = new VpcPublicGatewayArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bastionEnabled Enable SSH bastion on the gateway
         * 
         * @return builder
         * 
         */
        public Builder bastionEnabled(@Nullable Output<Boolean> bastionEnabled) {
            $.bastionEnabled = bastionEnabled;
            return this;
        }

        /**
         * @param bastionEnabled Enable SSH bastion on the gateway
         * 
         * @return builder
         * 
         */
        public Builder bastionEnabled(Boolean bastionEnabled) {
            return bastionEnabled(Output.of(bastionEnabled));
        }

        /**
         * @param bastionPort The port on which the SSH bastion will listen.
         * 
         * @return builder
         * 
         */
        public Builder bastionPort(@Nullable Output<Integer> bastionPort) {
            $.bastionPort = bastionPort;
            return this;
        }

        /**
         * @param bastionPort The port on which the SSH bastion will listen.
         * 
         * @return builder
         * 
         */
        public Builder bastionPort(Integer bastionPort) {
            return bastionPort(Output.of(bastionPort));
        }

        /**
         * @param enableSmtp Enable SMTP on the gateway
         * 
         * @return builder
         * 
         */
        public Builder enableSmtp(@Nullable Output<Boolean> enableSmtp) {
            $.enableSmtp = enableSmtp;
            return this;
        }

        /**
         * @param enableSmtp Enable SMTP on the gateway
         * 
         * @return builder
         * 
         */
        public Builder enableSmtp(Boolean enableSmtp) {
            return enableSmtp(Output.of(enableSmtp));
        }

        /**
         * @param ipId attach an existing flexible IP to the gateway
         * 
         * @return builder
         * 
         */
        public Builder ipId(@Nullable Output<String> ipId) {
            $.ipId = ipId;
            return this;
        }

        /**
         * @param ipId attach an existing flexible IP to the gateway
         * 
         * @return builder
         * 
         */
        public Builder ipId(String ipId) {
            return ipId(Output.of(ipId));
        }

        /**
         * @param name The name of the public gateway. If not provided it will be randomly generated.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the public gateway. If not provided it will be randomly generated.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId `project_id`) The ID of the project the public gateway is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId `project_id`) The ID of the project the public gateway is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param tags The tags associated with the public gateway.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags associated with the public gateway.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags associated with the public gateway.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type The gateway type.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The gateway type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param upstreamDnsServers override the gateway&#39;s default recursive DNS servers, if DNS features are enabled.
         * 
         * @return builder
         * 
         */
        public Builder upstreamDnsServers(@Nullable Output<List<String>> upstreamDnsServers) {
            $.upstreamDnsServers = upstreamDnsServers;
            return this;
        }

        /**
         * @param upstreamDnsServers override the gateway&#39;s default recursive DNS servers, if DNS features are enabled.
         * 
         * @return builder
         * 
         */
        public Builder upstreamDnsServers(List<String> upstreamDnsServers) {
            return upstreamDnsServers(Output.of(upstreamDnsServers));
        }

        /**
         * @param upstreamDnsServers override the gateway&#39;s default recursive DNS servers, if DNS features are enabled.
         * 
         * @return builder
         * 
         */
        public Builder upstreamDnsServers(String... upstreamDnsServers) {
            return upstreamDnsServers(List.of(upstreamDnsServers));
        }

        /**
         * @param zone `zone`) The zone in which the public gateway should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone `zone`) The zone in which the public gateway should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public VpcPublicGatewayArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
