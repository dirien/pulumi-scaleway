// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.dirien.scaleway.inputs.MnqCredentialNatsCredentialsArgs;
import io.dirien.scaleway.inputs.MnqCredentialSqsSnsCredentialsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MnqCredentialState extends com.pulumi.resources.ResourceArgs {

    public static final MnqCredentialState Empty = new MnqCredentialState();

    /**
     * The credential name..
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The credential name..
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace containing the Credential.
     * 
     */
    @Import(name="namespaceId")
    private @Nullable Output<String> namespaceId;

    /**
     * @return The namespace containing the Credential.
     * 
     */
    public Optional<Output<String>> namespaceId() {
        return Optional.ofNullable(this.namespaceId);
    }

    /**
     * Credentials file used to connect to the NATS service. Only one of `nats_credentials` and `sqs_sns_credentials` may be set.
     * 
     */
    @Import(name="natsCredentials")
    private @Nullable Output<MnqCredentialNatsCredentialsArgs> natsCredentials;

    /**
     * @return Credentials file used to connect to the NATS service. Only one of `nats_credentials` and `sqs_sns_credentials` may be set.
     * 
     */
    public Optional<Output<MnqCredentialNatsCredentialsArgs>> natsCredentials() {
        return Optional.ofNullable(this.natsCredentials);
    }

    /**
     * The protocol associated to the Credential. Possible values are `nats` and `sqs_sns`.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The protocol associated to the Credential. Possible values are `nats` and `sqs_sns`.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * (Defaults to provider `region`). The region
     * in which the namespace should be created.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return (Defaults to provider `region`). The region
     * in which the namespace should be created.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Credential used to connect to the SQS/SNS service. Only one of `nats_credentials`
     * and `sqs_sns_credentials` may be set.
     * 
     */
    @Import(name="sqsSnsCredentials")
    private @Nullable Output<MnqCredentialSqsSnsCredentialsArgs> sqsSnsCredentials;

    /**
     * @return Credential used to connect to the SQS/SNS service. Only one of `nats_credentials`
     * and `sqs_sns_credentials` may be set.
     * 
     */
    public Optional<Output<MnqCredentialSqsSnsCredentialsArgs>> sqsSnsCredentials() {
        return Optional.ofNullable(this.sqsSnsCredentials);
    }

    private MnqCredentialState() {}

    private MnqCredentialState(MnqCredentialState $) {
        this.name = $.name;
        this.namespaceId = $.namespaceId;
        this.natsCredentials = $.natsCredentials;
        this.protocol = $.protocol;
        this.region = $.region;
        this.sqsSnsCredentials = $.sqsSnsCredentials;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MnqCredentialState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MnqCredentialState $;

        public Builder() {
            $ = new MnqCredentialState();
        }

        public Builder(MnqCredentialState defaults) {
            $ = new MnqCredentialState(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The credential name..
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The credential name..
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespaceId The namespace containing the Credential.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(@Nullable Output<String> namespaceId) {
            $.namespaceId = namespaceId;
            return this;
        }

        /**
         * @param namespaceId The namespace containing the Credential.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(String namespaceId) {
            return namespaceId(Output.of(namespaceId));
        }

        /**
         * @param natsCredentials Credentials file used to connect to the NATS service. Only one of `nats_credentials` and `sqs_sns_credentials` may be set.
         * 
         * @return builder
         * 
         */
        public Builder natsCredentials(@Nullable Output<MnqCredentialNatsCredentialsArgs> natsCredentials) {
            $.natsCredentials = natsCredentials;
            return this;
        }

        /**
         * @param natsCredentials Credentials file used to connect to the NATS service. Only one of `nats_credentials` and `sqs_sns_credentials` may be set.
         * 
         * @return builder
         * 
         */
        public Builder natsCredentials(MnqCredentialNatsCredentialsArgs natsCredentials) {
            return natsCredentials(Output.of(natsCredentials));
        }

        /**
         * @param protocol The protocol associated to the Credential. Possible values are `nats` and `sqs_sns`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol associated to the Credential. Possible values are `nats` and `sqs_sns`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param region (Defaults to provider `region`). The region
         * in which the namespace should be created.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region (Defaults to provider `region`). The region
         * in which the namespace should be created.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param sqsSnsCredentials Credential used to connect to the SQS/SNS service. Only one of `nats_credentials`
         * and `sqs_sns_credentials` may be set.
         * 
         * @return builder
         * 
         */
        public Builder sqsSnsCredentials(@Nullable Output<MnqCredentialSqsSnsCredentialsArgs> sqsSnsCredentials) {
            $.sqsSnsCredentials = sqsSnsCredentials;
            return this;
        }

        /**
         * @param sqsSnsCredentials Credential used to connect to the SQS/SNS service. Only one of `nats_credentials`
         * and `sqs_sns_credentials` may be set.
         * 
         * @return builder
         * 
         */
        public Builder sqsSnsCredentials(MnqCredentialSqsSnsCredentialsArgs sqsSnsCredentials) {
            return sqsSnsCredentials(Output.of(sqsSnsCredentials));
        }

        public MnqCredentialState build() {
            return $;
        }
    }

}
