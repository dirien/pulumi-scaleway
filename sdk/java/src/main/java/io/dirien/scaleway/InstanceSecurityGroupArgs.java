// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.dirien.scaleway.inputs.InstanceSecurityGroupInboundRuleArgs;
import io.dirien.scaleway.inputs.InstanceSecurityGroupOutboundRuleArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceSecurityGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceSecurityGroupArgs Empty = new InstanceSecurityGroupArgs();

    /**
     * The description of the security group.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the security group.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).
     * 
     */
    @Import(name="enableDefaultSecurity")
    private @Nullable Output<Boolean> enableDefaultSecurity;

    /**
     * @return Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).
     * 
     */
    public Optional<Output<Boolean>> enableDefaultSecurity() {
        return Optional.ofNullable(this.enableDefaultSecurity);
    }

    /**
     * A boolean to specify whether to use instance_security_group_rules.
     * If `external_rules` is set to `true`, `inbound_rule` and `outbound_rule` can not be set directly in the security group.
     * 
     */
    @Import(name="externalRules")
    private @Nullable Output<Boolean> externalRules;

    /**
     * @return A boolean to specify whether to use instance_security_group_rules.
     * If `external_rules` is set to `true`, `inbound_rule` and `outbound_rule` can not be set directly in the security group.
     * 
     */
    public Optional<Output<Boolean>> externalRules() {
        return Optional.ofNullable(this.externalRules);
    }

    /**
     * The default policy on incoming traffic. Possible values are: `accept` or `drop`.
     * 
     */
    @Import(name="inboundDefaultPolicy")
    private @Nullable Output<String> inboundDefaultPolicy;

    /**
     * @return The default policy on incoming traffic. Possible values are: `accept` or `drop`.
     * 
     */
    public Optional<Output<String>> inboundDefaultPolicy() {
        return Optional.ofNullable(this.inboundDefaultPolicy);
    }

    /**
     * A list of inbound rule to add to the security group. (Structure is documented below.)
     * 
     */
    @Import(name="inboundRules")
    private @Nullable Output<List<InstanceSecurityGroupInboundRuleArgs>> inboundRules;

    /**
     * @return A list of inbound rule to add to the security group. (Structure is documented below.)
     * 
     */
    public Optional<Output<List<InstanceSecurityGroupInboundRuleArgs>>> inboundRules() {
        return Optional.ofNullable(this.inboundRules);
    }

    /**
     * The name of the security group.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the security group.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The default policy on outgoing traffic. Possible values are: `accept` or `drop`.
     * 
     */
    @Import(name="outboundDefaultPolicy")
    private @Nullable Output<String> outboundDefaultPolicy;

    /**
     * @return The default policy on outgoing traffic. Possible values are: `accept` or `drop`.
     * 
     */
    public Optional<Output<String>> outboundDefaultPolicy() {
        return Optional.ofNullable(this.outboundDefaultPolicy);
    }

    /**
     * A list of outbound rule to add to the security group. (Structure is documented below.)
     * 
     */
    @Import(name="outboundRules")
    private @Nullable Output<List<InstanceSecurityGroupOutboundRuleArgs>> outboundRules;

    /**
     * @return A list of outbound rule to add to the security group. (Structure is documented below.)
     * 
     */
    public Optional<Output<List<InstanceSecurityGroupOutboundRuleArgs>>> outboundRules() {
        return Optional.ofNullable(this.outboundRules);
    }

    /**
     * `project_id`) The ID of the project the security group is associated with.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return `project_id`) The ID of the project the security group is associated with.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * A boolean to specify whether the security group should be stateful or not.
     * 
     */
    @Import(name="stateful")
    private @Nullable Output<Boolean> stateful;

    /**
     * @return A boolean to specify whether the security group should be stateful or not.
     * 
     */
    public Optional<Output<Boolean>> stateful() {
        return Optional.ofNullable(this.stateful);
    }

    /**
     * The tags of the security group.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The tags of the security group.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * `zone`) The zone in which the security group should be created.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return `zone`) The zone in which the security group should be created.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private InstanceSecurityGroupArgs() {}

    private InstanceSecurityGroupArgs(InstanceSecurityGroupArgs $) {
        this.description = $.description;
        this.enableDefaultSecurity = $.enableDefaultSecurity;
        this.externalRules = $.externalRules;
        this.inboundDefaultPolicy = $.inboundDefaultPolicy;
        this.inboundRules = $.inboundRules;
        this.name = $.name;
        this.outboundDefaultPolicy = $.outboundDefaultPolicy;
        this.outboundRules = $.outboundRules;
        this.projectId = $.projectId;
        this.stateful = $.stateful;
        this.tags = $.tags;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceSecurityGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceSecurityGroupArgs $;

        public Builder() {
            $ = new InstanceSecurityGroupArgs();
        }

        public Builder(InstanceSecurityGroupArgs defaults) {
            $ = new InstanceSecurityGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the security group.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the security group.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enableDefaultSecurity Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).
         * 
         * @return builder
         * 
         */
        public Builder enableDefaultSecurity(@Nullable Output<Boolean> enableDefaultSecurity) {
            $.enableDefaultSecurity = enableDefaultSecurity;
            return this;
        }

        /**
         * @param enableDefaultSecurity Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).
         * 
         * @return builder
         * 
         */
        public Builder enableDefaultSecurity(Boolean enableDefaultSecurity) {
            return enableDefaultSecurity(Output.of(enableDefaultSecurity));
        }

        /**
         * @param externalRules A boolean to specify whether to use instance_security_group_rules.
         * If `external_rules` is set to `true`, `inbound_rule` and `outbound_rule` can not be set directly in the security group.
         * 
         * @return builder
         * 
         */
        public Builder externalRules(@Nullable Output<Boolean> externalRules) {
            $.externalRules = externalRules;
            return this;
        }

        /**
         * @param externalRules A boolean to specify whether to use instance_security_group_rules.
         * If `external_rules` is set to `true`, `inbound_rule` and `outbound_rule` can not be set directly in the security group.
         * 
         * @return builder
         * 
         */
        public Builder externalRules(Boolean externalRules) {
            return externalRules(Output.of(externalRules));
        }

        /**
         * @param inboundDefaultPolicy The default policy on incoming traffic. Possible values are: `accept` or `drop`.
         * 
         * @return builder
         * 
         */
        public Builder inboundDefaultPolicy(@Nullable Output<String> inboundDefaultPolicy) {
            $.inboundDefaultPolicy = inboundDefaultPolicy;
            return this;
        }

        /**
         * @param inboundDefaultPolicy The default policy on incoming traffic. Possible values are: `accept` or `drop`.
         * 
         * @return builder
         * 
         */
        public Builder inboundDefaultPolicy(String inboundDefaultPolicy) {
            return inboundDefaultPolicy(Output.of(inboundDefaultPolicy));
        }

        /**
         * @param inboundRules A list of inbound rule to add to the security group. (Structure is documented below.)
         * 
         * @return builder
         * 
         */
        public Builder inboundRules(@Nullable Output<List<InstanceSecurityGroupInboundRuleArgs>> inboundRules) {
            $.inboundRules = inboundRules;
            return this;
        }

        /**
         * @param inboundRules A list of inbound rule to add to the security group. (Structure is documented below.)
         * 
         * @return builder
         * 
         */
        public Builder inboundRules(List<InstanceSecurityGroupInboundRuleArgs> inboundRules) {
            return inboundRules(Output.of(inboundRules));
        }

        /**
         * @param inboundRules A list of inbound rule to add to the security group. (Structure is documented below.)
         * 
         * @return builder
         * 
         */
        public Builder inboundRules(InstanceSecurityGroupInboundRuleArgs... inboundRules) {
            return inboundRules(List.of(inboundRules));
        }

        /**
         * @param name The name of the security group.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the security group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param outboundDefaultPolicy The default policy on outgoing traffic. Possible values are: `accept` or `drop`.
         * 
         * @return builder
         * 
         */
        public Builder outboundDefaultPolicy(@Nullable Output<String> outboundDefaultPolicy) {
            $.outboundDefaultPolicy = outboundDefaultPolicy;
            return this;
        }

        /**
         * @param outboundDefaultPolicy The default policy on outgoing traffic. Possible values are: `accept` or `drop`.
         * 
         * @return builder
         * 
         */
        public Builder outboundDefaultPolicy(String outboundDefaultPolicy) {
            return outboundDefaultPolicy(Output.of(outboundDefaultPolicy));
        }

        /**
         * @param outboundRules A list of outbound rule to add to the security group. (Structure is documented below.)
         * 
         * @return builder
         * 
         */
        public Builder outboundRules(@Nullable Output<List<InstanceSecurityGroupOutboundRuleArgs>> outboundRules) {
            $.outboundRules = outboundRules;
            return this;
        }

        /**
         * @param outboundRules A list of outbound rule to add to the security group. (Structure is documented below.)
         * 
         * @return builder
         * 
         */
        public Builder outboundRules(List<InstanceSecurityGroupOutboundRuleArgs> outboundRules) {
            return outboundRules(Output.of(outboundRules));
        }

        /**
         * @param outboundRules A list of outbound rule to add to the security group. (Structure is documented below.)
         * 
         * @return builder
         * 
         */
        public Builder outboundRules(InstanceSecurityGroupOutboundRuleArgs... outboundRules) {
            return outboundRules(List.of(outboundRules));
        }

        /**
         * @param projectId `project_id`) The ID of the project the security group is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId `project_id`) The ID of the project the security group is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param stateful A boolean to specify whether the security group should be stateful or not.
         * 
         * @return builder
         * 
         */
        public Builder stateful(@Nullable Output<Boolean> stateful) {
            $.stateful = stateful;
            return this;
        }

        /**
         * @param stateful A boolean to specify whether the security group should be stateful or not.
         * 
         * @return builder
         * 
         */
        public Builder stateful(Boolean stateful) {
            return stateful(Output.of(stateful));
        }

        /**
         * @param tags The tags of the security group.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags of the security group.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags of the security group.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param zone `zone`) The zone in which the security group should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone `zone`) The zone in which the security group should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public InstanceSecurityGroupArgs build() {
            return $;
        }
    }

}
