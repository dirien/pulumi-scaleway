// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class K8sClusterOpenIdConnectConfig {
    /**
     * @return A client id that all tokens must be issued for
     * 
     */
    private String clientId;
    /**
     * @return JWT claim to use as the user&#39;s group
     * 
     */
    private @Nullable List<String> groupsClaims;
    /**
     * @return Prefix prepended to group claims
     * 
     */
    private @Nullable String groupsPrefix;
    /**
     * @return URL of the provider which allows the API server to discover public signing keys
     * 
     */
    private String issuerUrl;
    /**
     * @return Multiple key=value pairs that describes a required claim in the ID Token
     * 
     */
    private @Nullable List<String> requiredClaims;
    /**
     * @return JWT claim to use as the user name
     * 
     */
    private @Nullable String usernameClaim;
    /**
     * @return Prefix prepended to username
     * 
     */
    private @Nullable String usernamePrefix;

    private K8sClusterOpenIdConnectConfig() {}
    /**
     * @return A client id that all tokens must be issued for
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return JWT claim to use as the user&#39;s group
     * 
     */
    public List<String> groupsClaims() {
        return this.groupsClaims == null ? List.of() : this.groupsClaims;
    }
    /**
     * @return Prefix prepended to group claims
     * 
     */
    public Optional<String> groupsPrefix() {
        return Optional.ofNullable(this.groupsPrefix);
    }
    /**
     * @return URL of the provider which allows the API server to discover public signing keys
     * 
     */
    public String issuerUrl() {
        return this.issuerUrl;
    }
    /**
     * @return Multiple key=value pairs that describes a required claim in the ID Token
     * 
     */
    public List<String> requiredClaims() {
        return this.requiredClaims == null ? List.of() : this.requiredClaims;
    }
    /**
     * @return JWT claim to use as the user name
     * 
     */
    public Optional<String> usernameClaim() {
        return Optional.ofNullable(this.usernameClaim);
    }
    /**
     * @return Prefix prepended to username
     * 
     */
    public Optional<String> usernamePrefix() {
        return Optional.ofNullable(this.usernamePrefix);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(K8sClusterOpenIdConnectConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clientId;
        private @Nullable List<String> groupsClaims;
        private @Nullable String groupsPrefix;
        private String issuerUrl;
        private @Nullable List<String> requiredClaims;
        private @Nullable String usernameClaim;
        private @Nullable String usernamePrefix;
        public Builder() {}
        public Builder(K8sClusterOpenIdConnectConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientId = defaults.clientId;
    	      this.groupsClaims = defaults.groupsClaims;
    	      this.groupsPrefix = defaults.groupsPrefix;
    	      this.issuerUrl = defaults.issuerUrl;
    	      this.requiredClaims = defaults.requiredClaims;
    	      this.usernameClaim = defaults.usernameClaim;
    	      this.usernamePrefix = defaults.usernamePrefix;
        }

        @CustomType.Setter
        public Builder clientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        @CustomType.Setter
        public Builder groupsClaims(@Nullable List<String> groupsClaims) {
            this.groupsClaims = groupsClaims;
            return this;
        }
        public Builder groupsClaims(String... groupsClaims) {
            return groupsClaims(List.of(groupsClaims));
        }
        @CustomType.Setter
        public Builder groupsPrefix(@Nullable String groupsPrefix) {
            this.groupsPrefix = groupsPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder issuerUrl(String issuerUrl) {
            this.issuerUrl = Objects.requireNonNull(issuerUrl);
            return this;
        }
        @CustomType.Setter
        public Builder requiredClaims(@Nullable List<String> requiredClaims) {
            this.requiredClaims = requiredClaims;
            return this;
        }
        public Builder requiredClaims(String... requiredClaims) {
            return requiredClaims(List.of(requiredClaims));
        }
        @CustomType.Setter
        public Builder usernameClaim(@Nullable String usernameClaim) {
            this.usernameClaim = usernameClaim;
            return this;
        }
        @CustomType.Setter
        public Builder usernamePrefix(@Nullable String usernamePrefix) {
            this.usernamePrefix = usernamePrefix;
            return this;
        }
        public K8sClusterOpenIdConnectConfig build() {
            final var o = new K8sClusterOpenIdConnectConfig();
            o.clientId = clientId;
            o.groupsClaims = groupsClaims;
            o.groupsPrefix = groupsPrefix;
            o.issuerUrl = issuerUrl;
            o.requiredClaims = requiredClaims;
            o.usernameClaim = usernameClaim;
            o.usernamePrefix = usernamePrefix;
            return o;
        }
    }
}
