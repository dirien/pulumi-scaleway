// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.dirien.scaleway.MnqQueueArgs;
import io.dirien.scaleway.Utilities;
import io.dirien.scaleway.inputs.MnqQueueState;
import io.dirien.scaleway.outputs.MnqQueueNats;
import io.dirien.scaleway.outputs.MnqQueueSqs;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates and manages Scaleway Messaging and Queuing queues.
 * 
 * For more information about MNQ, see [the documentation](https://www.scaleway.com/en/developers/api/messaging-and-queuing/).
 * 
 * ## Examples
 * 
 * ### NATS
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.MnqNamespace;
 * import com.pulumi.scaleway.MnqNamespaceArgs;
 * import com.pulumi.scaleway.MnqCredential;
 * import com.pulumi.scaleway.MnqCredentialArgs;
 * import com.pulumi.scaleway.MnqQueue;
 * import com.pulumi.scaleway.MnqQueueArgs;
 * import com.pulumi.scaleway.inputs.MnqQueueNatsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var mainMnqNamespace = new MnqNamespace(&#34;mainMnqNamespace&#34;, MnqNamespaceArgs.builder()        
 *             .protocol(&#34;nats&#34;)
 *             .build());
 * 
 *         var mainMnqCredential = new MnqCredential(&#34;mainMnqCredential&#34;, MnqCredentialArgs.builder()        
 *             .namespaceId(mainMnqNamespace.id())
 *             .build());
 * 
 *         var myQueue = new MnqQueue(&#34;myQueue&#34;, MnqQueueArgs.builder()        
 *             .namespaceId(mainMnqNamespace.id())
 *             .nats(MnqQueueNatsArgs.builder()
 *                 .credentials(mainMnqCredential.natsCredentials().applyValue(natsCredentials -&gt; natsCredentials.content()))
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ### SQS
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.MnqNamespace;
 * import com.pulumi.scaleway.MnqNamespaceArgs;
 * import com.pulumi.scaleway.MnqCredential;
 * import com.pulumi.scaleway.MnqCredentialArgs;
 * import com.pulumi.scaleway.inputs.MnqCredentialSqsSnsCredentialsArgs;
 * import com.pulumi.scaleway.inputs.MnqCredentialSqsSnsCredentialsPermissionsArgs;
 * import com.pulumi.scaleway.MnqQueue;
 * import com.pulumi.scaleway.MnqQueueArgs;
 * import com.pulumi.scaleway.inputs.MnqQueueSqsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var mainMnqNamespace = new MnqNamespace(&#34;mainMnqNamespace&#34;, MnqNamespaceArgs.builder()        
 *             .protocol(&#34;sqs_sns&#34;)
 *             .build());
 * 
 *         var mainMnqCredential = new MnqCredential(&#34;mainMnqCredential&#34;, MnqCredentialArgs.builder()        
 *             .namespaceId(mainMnqNamespace.id())
 *             .sqsSnsCredentials(MnqCredentialSqsSnsCredentialsArgs.builder()
 *                 .permissions(MnqCredentialSqsSnsCredentialsPermissionsArgs.builder()
 *                     .canPublish(true)
 *                     .canReceive(true)
 *                     .canManage(true)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var myQueue = new MnqQueue(&#34;myQueue&#34;, MnqQueueArgs.builder()        
 *             .namespaceId(mainMnqNamespace.id())
 *             .sqs(MnqQueueSqsArgs.builder()
 *                 .accessKey(mainMnqCredential.sqsSnsCredentials().applyValue(sqsSnsCredentials -&gt; sqsSnsCredentials.accessKey()))
 *                 .secretKey(mainMnqCredential.sqsSnsCredentials().applyValue(sqsSnsCredentials -&gt; sqsSnsCredentials.secretKey()))
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ### Argument Reference
 * 
 * The following arguments are supported:
 * 
 * * `namespace_id` - (Required) The ID of the Namespace associated to.
 * 
 * * `name` - (Optional) The name of the queue. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.
 * 
 * * `name_prefix` - (Optional) Creates a unique name beginning with the specified prefix. Conflicts with `name`.
 * 
 * * `message_max_age` - (Optional) The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.
 * 
 * * `message_max_size` - (Optional) The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.
 * 
 * * `sqs` - (Optional) The SQS attributes of the queue. Conflicts with `nats`.
 *     - `endpoint` - (Optional) The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `http://sqs-sns.mnq.{region}.scw.cloud`.
 *     - `access_key` - (Required) The access key of the SQS queue.
 *     - `secret_key` - (Required) The secret key of the SQS queue.
 *     - `fifo_queue` - (Optional) Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.
 *     - `content_based_deduplication` - (Optional) Specifies whether to enable content-based deduplication. Defaults to `false`.
 *     - `receive_wait_time_seconds` - (Optional) The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.
 *     - `visibility_timeout_seconds` - (Optional) The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.
 *     - For more information about the SQS limitations, see [the documentation](https://www.scaleway.com/en/developers/api/messaging-and-queuing/#technical-limitations).
 * 
 * * `nats` - (Optional) The NATS attributes of the queue. Conflicts with `sqs`.
 *     - `endpoint` - (Optional) The endpoint of the NATS queue. Can contain a {region} placeholder. Defaults to `nats://nats.mnq.{region}.scw.cloud:4222`.
 *     - `credentials` - (Required) Line jump separated key and seed.
 *     - `retention_policy` - (Optional) The retention policy of the queue. See https://docs.nats.io/nats-concepts/jetstream/streams#retentionpolicy for more information. Defaults to `workqueue`.
 * 
 * ### Attribute Reference
 * 
 * In addition to all arguments above, the following attributes are exported:
 * 
 * * `sqs` - The SQS attributes of the queue.
 *   ~ `url` - The URL of the queue.
 * 
 */
@ResourceType(type="scaleway:index/mnqQueue:MnqQueue")
public class MnqQueue extends com.pulumi.resources.CustomResource {
    /**
     * The number of seconds the queue retains a message.
     * 
     */
    @Export(name="messageMaxAge", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> messageMaxAge;

    /**
     * @return The number of seconds the queue retains a message.
     * 
     */
    public Output<Optional<Integer>> messageMaxAge() {
        return Codegen.optional(this.messageMaxAge);
    }
    /**
     * The maximum size of a message. Should be in bytes.
     * 
     */
    @Export(name="messageMaxSize", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> messageMaxSize;

    /**
     * @return The maximum size of a message. Should be in bytes.
     * 
     */
    public Output<Optional<Integer>> messageMaxSize() {
        return Codegen.optional(this.messageMaxSize);
    }
    /**
     * The name of the queue. Conflicts with name_prefix.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the queue. Conflicts with name_prefix.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with name.
     * 
     */
    @Export(name="namePrefix", refs={String.class}, tree="[0]")
    private Output<String> namePrefix;

    /**
     * @return Creates a unique name beginning with the specified prefix. Conflicts with name.
     * 
     */
    public Output<String> namePrefix() {
        return this.namePrefix;
    }
    /**
     * The ID of the Namespace associated to
     * 
     */
    @Export(name="namespaceId", refs={String.class}, tree="[0]")
    private Output<String> namespaceId;

    /**
     * @return The ID of the Namespace associated to
     * 
     */
    public Output<String> namespaceId() {
        return this.namespaceId;
    }
    /**
     * The NATS attributes of the queue
     * 
     */
    @Export(name="nats", refs={MnqQueueNats.class}, tree="[0]")
    private Output</* @Nullable */ MnqQueueNats> nats;

    /**
     * @return The NATS attributes of the queue
     * 
     */
    public Output<Optional<MnqQueueNats>> nats() {
        return Codegen.optional(this.nats);
    }
    /**
     * The SQS attributes of the queue
     * 
     */
    @Export(name="sqs", refs={MnqQueueSqs.class}, tree="[0]")
    private Output</* @Nullable */ MnqQueueSqs> sqs;

    /**
     * @return The SQS attributes of the queue
     * 
     */
    public Output<Optional<MnqQueueSqs>> sqs() {
        return Codegen.optional(this.sqs);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MnqQueue(String name) {
        this(name, MnqQueueArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MnqQueue(String name, MnqQueueArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MnqQueue(String name, MnqQueueArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/mnqQueue:MnqQueue", name, args == null ? MnqQueueArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private MnqQueue(String name, Output<String> id, @Nullable MnqQueueState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/mnqQueue:MnqQueue", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MnqQueue get(String name, Output<String> id, @Nullable MnqQueueState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MnqQueue(name, id, state, options);
    }
}
