// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.dirien.scaleway.inputs.IamPolicyRuleArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IamPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final IamPolicyArgs Empty = new IamPolicyArgs();

    /**
     * ID of the Application the policy will be linked to
     * 
     */
    @Import(name="applicationId")
    private @Nullable Output<String> applicationId;

    /**
     * @return ID of the Application the policy will be linked to
     * 
     */
    public Optional<Output<String>> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    /**
     * The description of the iam policy.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the iam policy.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * ID of the Group the policy will be linked to
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<String> groupId;

    /**
     * @return ID of the Group the policy will be linked to
     * 
     */
    public Optional<Output<String>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * .The name of the iam policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return .The name of the iam policy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * If the policy doesn&#39;t apply to a principal.
     * 
     * &gt; **Important** Only one of `user_id`, `group_id`, `application_id` and `no_principal`  may be set.
     * 
     */
    @Import(name="noPrincipal")
    private @Nullable Output<Boolean> noPrincipal;

    /**
     * @return If the policy doesn&#39;t apply to a principal.
     * 
     * &gt; **Important** Only one of `user_id`, `group_id`, `application_id` and `no_principal`  may be set.
     * 
     */
    public Optional<Output<Boolean>> noPrincipal() {
        return Optional.ofNullable(this.noPrincipal);
    }

    /**
     * ID of organization scoped to the rule.
     * 
     */
    @Import(name="organizationId")
    private @Nullable Output<String> organizationId;

    /**
     * @return ID of organization scoped to the rule.
     * 
     */
    public Optional<Output<String>> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    /**
     * List of rules in the policy.
     * 
     */
    @Import(name="rules", required=true)
    private Output<List<IamPolicyRuleArgs>> rules;

    /**
     * @return List of rules in the policy.
     * 
     */
    public Output<List<IamPolicyRuleArgs>> rules() {
        return this.rules;
    }

    /**
     * ID of the User the policy will be linked to
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return ID of the User the policy will be linked to
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private IamPolicyArgs() {}

    private IamPolicyArgs(IamPolicyArgs $) {
        this.applicationId = $.applicationId;
        this.description = $.description;
        this.groupId = $.groupId;
        this.name = $.name;
        this.noPrincipal = $.noPrincipal;
        this.organizationId = $.organizationId;
        this.rules = $.rules;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IamPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IamPolicyArgs $;

        public Builder() {
            $ = new IamPolicyArgs();
        }

        public Builder(IamPolicyArgs defaults) {
            $ = new IamPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId ID of the Application the policy will be linked to
         * 
         * @return builder
         * 
         */
        public Builder applicationId(@Nullable Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId ID of the Application the policy will be linked to
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param description The description of the iam policy.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the iam policy.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param groupId ID of the Group the policy will be linked to
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId ID of the Group the policy will be linked to
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param name .The name of the iam policy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name .The name of the iam policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param noPrincipal If the policy doesn&#39;t apply to a principal.
         * 
         * &gt; **Important** Only one of `user_id`, `group_id`, `application_id` and `no_principal`  may be set.
         * 
         * @return builder
         * 
         */
        public Builder noPrincipal(@Nullable Output<Boolean> noPrincipal) {
            $.noPrincipal = noPrincipal;
            return this;
        }

        /**
         * @param noPrincipal If the policy doesn&#39;t apply to a principal.
         * 
         * &gt; **Important** Only one of `user_id`, `group_id`, `application_id` and `no_principal`  may be set.
         * 
         * @return builder
         * 
         */
        public Builder noPrincipal(Boolean noPrincipal) {
            return noPrincipal(Output.of(noPrincipal));
        }

        /**
         * @param organizationId ID of organization scoped to the rule.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(@Nullable Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId ID of organization scoped to the rule.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param rules List of rules in the policy.
         * 
         * @return builder
         * 
         */
        public Builder rules(Output<List<IamPolicyRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules List of rules in the policy.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<IamPolicyRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules List of rules in the policy.
         * 
         * @return builder
         * 
         */
        public Builder rules(IamPolicyRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param userId ID of the User the policy will be linked to
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId ID of the User the policy will be linked to
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public IamPolicyArgs build() {
            $.rules = Objects.requireNonNull($.rules, "expected parameter 'rules' to be non-null");
            return $;
        }
    }

}
