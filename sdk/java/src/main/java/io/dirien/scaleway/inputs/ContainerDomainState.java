// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerDomainState extends com.pulumi.resources.ResourceArgs {

    public static final ContainerDomainState Empty = new ContainerDomainState();

    /**
     * The ID of the container.
     * 
     */
    @Import(name="containerId")
    private @Nullable Output<String> containerId;

    /**
     * @return The ID of the container.
     * 
     */
    public Optional<Output<String>> containerId() {
        return Optional.ofNullable(this.containerId);
    }

    /**
     * The hostname with a CNAME record.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The hostname with a CNAME record.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * `region`) The region in which the container exists
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return `region`) The region in which the container exists
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The URL used to query the container
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The URL used to query the container
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private ContainerDomainState() {}

    private ContainerDomainState(ContainerDomainState $) {
        this.containerId = $.containerId;
        this.hostname = $.hostname;
        this.region = $.region;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerDomainState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerDomainState $;

        public Builder() {
            $ = new ContainerDomainState();
        }

        public Builder(ContainerDomainState defaults) {
            $ = new ContainerDomainState(Objects.requireNonNull(defaults));
        }

        /**
         * @param containerId The ID of the container.
         * 
         * @return builder
         * 
         */
        public Builder containerId(@Nullable Output<String> containerId) {
            $.containerId = containerId;
            return this;
        }

        /**
         * @param containerId The ID of the container.
         * 
         * @return builder
         * 
         */
        public Builder containerId(String containerId) {
            return containerId(Output.of(containerId));
        }

        /**
         * @param hostname The hostname with a CNAME record.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The hostname with a CNAME record.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param region `region`) The region in which the container exists
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region `region`) The region in which the container exists
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param url The URL used to query the container
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL used to query the container
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ContainerDomainState build() {
            return $;
        }
    }

}
