// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainRecordGeoIpMatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainRecordGeoIpMatchArgs Empty = new DomainRecordGeoIpMatchArgs();

    /**
     * List of continents (eg: `EU` for Europe, `NA` for North America, `AS` for Asia...). [List of all continents code](https://api.scaleway.com/domain-private/v2beta1/continents)
     * 
     */
    @Import(name="continents")
    private @Nullable Output<List<String>> continents;

    /**
     * @return List of continents (eg: `EU` for Europe, `NA` for North America, `AS` for Asia...). [List of all continents code](https://api.scaleway.com/domain-private/v2beta1/continents)
     * 
     */
    public Optional<Output<List<String>>> continents() {
        return Optional.ofNullable(this.continents);
    }

    /**
     * List of countries (eg: `FR` for France, `US` for the United States, `GB` for Great Britain...). [List of all countries code](https://api.scaleway.com/domain-private/v2beta1/countries)
     * 
     */
    @Import(name="countries")
    private @Nullable Output<List<String>> countries;

    /**
     * @return List of countries (eg: `FR` for France, `US` for the United States, `GB` for Great Britain...). [List of all countries code](https://api.scaleway.com/domain-private/v2beta1/countries)
     * 
     */
    public Optional<Output<List<String>>> countries() {
        return Optional.ofNullable(this.countries);
    }

    /**
     * The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
     * 
     */
    @Import(name="data", required=true)
    private Output<String> data;

    /**
     * @return The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
     * 
     */
    public Output<String> data() {
        return this.data;
    }

    private DomainRecordGeoIpMatchArgs() {}

    private DomainRecordGeoIpMatchArgs(DomainRecordGeoIpMatchArgs $) {
        this.continents = $.continents;
        this.countries = $.countries;
        this.data = $.data;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainRecordGeoIpMatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainRecordGeoIpMatchArgs $;

        public Builder() {
            $ = new DomainRecordGeoIpMatchArgs();
        }

        public Builder(DomainRecordGeoIpMatchArgs defaults) {
            $ = new DomainRecordGeoIpMatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param continents List of continents (eg: `EU` for Europe, `NA` for North America, `AS` for Asia...). [List of all continents code](https://api.scaleway.com/domain-private/v2beta1/continents)
         * 
         * @return builder
         * 
         */
        public Builder continents(@Nullable Output<List<String>> continents) {
            $.continents = continents;
            return this;
        }

        /**
         * @param continents List of continents (eg: `EU` for Europe, `NA` for North America, `AS` for Asia...). [List of all continents code](https://api.scaleway.com/domain-private/v2beta1/continents)
         * 
         * @return builder
         * 
         */
        public Builder continents(List<String> continents) {
            return continents(Output.of(continents));
        }

        /**
         * @param continents List of continents (eg: `EU` for Europe, `NA` for North America, `AS` for Asia...). [List of all continents code](https://api.scaleway.com/domain-private/v2beta1/continents)
         * 
         * @return builder
         * 
         */
        public Builder continents(String... continents) {
            return continents(List.of(continents));
        }

        /**
         * @param countries List of countries (eg: `FR` for France, `US` for the United States, `GB` for Great Britain...). [List of all countries code](https://api.scaleway.com/domain-private/v2beta1/countries)
         * 
         * @return builder
         * 
         */
        public Builder countries(@Nullable Output<List<String>> countries) {
            $.countries = countries;
            return this;
        }

        /**
         * @param countries List of countries (eg: `FR` for France, `US` for the United States, `GB` for Great Britain...). [List of all countries code](https://api.scaleway.com/domain-private/v2beta1/countries)
         * 
         * @return builder
         * 
         */
        public Builder countries(List<String> countries) {
            return countries(Output.of(countries));
        }

        /**
         * @param countries List of countries (eg: `FR` for France, `US` for the United States, `GB` for Great Britain...). [List of all countries code](https://api.scaleway.com/domain-private/v2beta1/countries)
         * 
         * @return builder
         * 
         */
        public Builder countries(String... countries) {
            return countries(List.of(countries));
        }

        /**
         * @param data The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
         * 
         * @return builder
         * 
         */
        public Builder data(Output<String> data) {
            $.data = data;
            return this;
        }

        /**
         * @param data The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
         * 
         * @return builder
         * 
         */
        public Builder data(String data) {
            return data(Output.of(data));
        }

        public DomainRecordGeoIpMatchArgs build() {
            $.data = Objects.requireNonNull($.data, "expected parameter 'data' to be non-null");
            return $;
        }
    }

}
