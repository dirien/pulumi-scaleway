{
    "name": "scaleway",
    "displayName": "Scaleway",
    "description": "A Pulumi package for creating and managing Scaleway resources.",
    "keywords": [
        "pulumi",
        "scaleway",
        "category/utility"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`scaleway` Terraform Provider](https://github.com/scaleway/terraform-provider-scaleway).",
    "repository": "https://github.com/dirien/pulumi-scaleway",
    "pluginDownloadURL": "github://api.github.com/dirien/pulumi-scaleway",
    "publisher": "dirien",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "ediri"
        },
        "go": {
            "importBasePath": "github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "java": {
            "basePackage": "io.dirien",
            "buildFiles": "",
            "gradleNexusPublishPluginVersion": "",
            "gradleTest": ""
        },
        "nodejs": {
            "packageName": "@ediri/scaleway",
            "packageDescription": "A Pulumi package for creating and managing Scaleway resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/scaleway/terraform-provider-scaleway)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-scaleway` repo](https://github.com/dirien/pulumi-scaleway/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-scaleway` repo](https://github.com/scaleway/terraform-provider-scaleway/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "ediri_scaleway",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/scaleway/terraform-provider-scaleway)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-scaleway` repo](https://github.com/dirien/pulumi-scaleway/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-scaleway` repo](https://github.com/scaleway/terraform-provider-scaleway/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "accessKey": {
                "type": "string",
                "description": "The Scaleway access key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_ACCESS_KEY"
                    ]
                },
                "secret": true
            },
            "apiUrl": {
                "type": "string",
                "description": "The Scaleway API URL to use.\n"
            },
            "organizationId": {
                "type": "string",
                "description": "The Scaleway organization ID.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_ORGANIZATION_ID"
                    ]
                }
            },
            "profile": {
                "type": "string",
                "description": "The Scaleway profile to use.\n"
            },
            "projectId": {
                "type": "string",
                "description": "The Scaleway project ID.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_PROJECT_ID"
                    ]
                }
            },
            "region": {
                "type": "string",
                "description": "The region you want to attach the resource to\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_REGION"
                    ]
                }
            },
            "secretKey": {
                "type": "string",
                "description": "The Scaleway secret Key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_SECRET_KEY"
                    ]
                },
                "secret": true
            },
            "zone": {
                "type": "string",
                "description": "The zone you want to attach the resource to\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_ZONE"
                    ]
                }
            }
        },
        "defaults": [
            "region",
            "zone"
        ]
    },
    "types": {
        "scaleway:index/BaremetalServerIp:BaremetalServerIp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the IPv6.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The id of the private network to attach.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse of the IPv6.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The type of the IPv6.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "id",
                        "reverse",
                        "version"
                    ]
                }
            }
        },
        "scaleway:index/BaremetalServerIpv4:BaremetalServerIpv4": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the IPv6.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The id of the private network to attach.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse of the IPv6.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The type of the IPv6.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "id",
                        "reverse",
                        "version"
                    ]
                }
            }
        },
        "scaleway:index/BaremetalServerIpv6:BaremetalServerIpv6": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the IPv6.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The id of the private network to attach.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse of the IPv6.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The type of the IPv6.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "id",
                        "reverse",
                        "version"
                    ]
                }
            }
        },
        "scaleway:index/BaremetalServerOption:BaremetalServerOption": {
            "properties": {
                "expiresAt": {
                    "type": "string",
                    "description": "The auto expiration date for compatible options\n"
                },
                "id": {
                    "type": "string",
                    "description": "The id of the private network to attach.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expiresAt",
                        "id",
                        "name"
                    ]
                }
            }
        },
        "scaleway:index/BaremetalServerPrivateNetwork:BaremetalServerPrivateNetwork": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the private network.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The id of the private network to attach.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The private network status.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the private network.\n"
                },
                "vlan": {
                    "type": "integer",
                    "description": "The VLAN ID associated to the private network.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdAt",
                        "id",
                        "status",
                        "updatedAt",
                        "vlan"
                    ]
                }
            }
        },
        "scaleway:index/CockpitEndpoint:CockpitEndpoint": {
            "properties": {
                "alertmanagerUrl": {
                    "type": "string",
                    "description": "The alertmanager URL.\n"
                },
                "grafanaUrl": {
                    "type": "string",
                    "description": "The grafana URL.\n"
                },
                "logsUrl": {
                    "type": "string",
                    "description": "The logs URL.\n"
                },
                "metricsUrl": {
                    "type": "string",
                    "description": "The metrics URL.\n"
                },
                "tracesUrl": {
                    "type": "string",
                    "description": "The traces URL.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "alertmanagerUrl",
                        "grafanaUrl",
                        "logsUrl",
                        "metricsUrl",
                        "tracesUrl"
                    ]
                }
            }
        },
        "scaleway:index/CockpitTokenScopes:CockpitTokenScopes": {
            "properties": {
                "queryLogs": {
                    "type": "boolean",
                    "description": "Query logs.\n",
                    "willReplaceOnChanges": true
                },
                "queryMetrics": {
                    "type": "boolean",
                    "description": "Query metrics.\n",
                    "willReplaceOnChanges": true
                },
                "queryTraces": {
                    "type": "boolean",
                    "description": "Query traces.\n",
                    "willReplaceOnChanges": true
                },
                "setupAlerts": {
                    "type": "boolean",
                    "description": "Setup alerts.\n",
                    "willReplaceOnChanges": true
                },
                "setupLogsRules": {
                    "type": "boolean",
                    "description": "Setup logs rules.\n",
                    "willReplaceOnChanges": true
                },
                "setupMetricsRules": {
                    "type": "boolean",
                    "description": "Setup metrics rules.\n",
                    "willReplaceOnChanges": true
                },
                "writeLogs": {
                    "type": "boolean",
                    "description": "Write logs.\n",
                    "willReplaceOnChanges": true
                },
                "writeMetrics": {
                    "type": "boolean",
                    "description": "Write metrics.\n",
                    "willReplaceOnChanges": true
                },
                "writeTraces": {
                    "type": "boolean",
                    "description": "Write traces.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "scaleway:index/ContainerTriggerNats:ContainerTriggerNats": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "ID of the mnq nats account.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project that contain the mnq nats account, defaults to provider's project\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The subject to listen to\n"
                }
            },
            "type": "object",
            "required": [
                "subject"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "projectId",
                        "region",
                        "subject"
                    ]
                }
            }
        },
        "scaleway:index/ContainerTriggerSqs:ContainerTriggerSqs": {
            "properties": {
                "namespaceId": {
                    "type": "string",
                    "description": "ID of the mnq namespace. Deprecated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project that contain the mnq nats account, defaults to provider's project\n"
                },
                "queue": {
                    "type": "string",
                    "description": "Name of the queue\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                }
            },
            "type": "object",
            "required": [
                "queue"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "projectId",
                        "queue",
                        "region"
                    ]
                }
            }
        },
        "scaleway:index/DocumentDBReadReplicaDirectAccess:DocumentDBReadReplicaDirectAccess": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint of the read replica.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the endpoint. Only one of ip and hostname may be set.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the endpoint.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "TCP port of the endpoint.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "hostname",
                        "ip",
                        "name",
                        "port"
                    ]
                }
            }
        },
        "scaleway:index/DocumentDBReadReplicaPrivateNetwork:DocumentDBReadReplicaPrivateNetwork": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint of the read replica.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the endpoint. Only one of ip and hostname may be set.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the endpoint.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "TCP port of the endpoint.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "UUID of the private network to be connected to the read replica.\n"
                },
                "serviceIp": {
                    "type": "string",
                    "description": "The IP network address within the private subnet. This must be an IPv4 address with a\nCIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)\nservice if not set.\n"
                },
                "zone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "privateNetworkId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "hostname",
                        "ip",
                        "name",
                        "port",
                        "privateNetworkId",
                        "serviceIp",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/DomainRecordGeoIp:DomainRecordGeoIp": {
            "properties": {
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordGeoIpMatch:DomainRecordGeoIpMatch"
                    },
                    "description": "The list of matches. *(Can be more than 1)*\n"
                }
            },
            "type": "object",
            "required": [
                "matches"
            ]
        },
        "scaleway:index/DomainRecordGeoIpMatch:DomainRecordGeoIpMatch": {
            "properties": {
                "continents": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of continents (eg: `EU` for Europe, `NA` for North America, `AS` for Asia...). [List of all continents code](https://api.scaleway.com/domain-private/v2beta1/continents)\n"
                },
                "countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of countries (eg: `FR` for France, `US` for the United States, `GB` for Great Britain...). [List of all countries code](https://api.scaleway.com/domain-private/v2beta1/countries)\n"
                },
                "data": {
                    "type": "string",
                    "description": "The content of the record (an IPv4 for an `A`, a string for a `TXT`...).\n"
                }
            },
            "type": "object",
            "required": [
                "data"
            ]
        },
        "scaleway:index/DomainRecordHttpService:DomainRecordHttpService": {
            "properties": {
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs to check\n"
                },
                "mustContain": {
                    "type": "string",
                    "description": "Text to search\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Strategy to return an IP from the IPs list. Can be `random`, `hashed` or `all`\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL to match the `must_contain` text to validate an IP\n"
                },
                "userAgent": {
                    "type": "string",
                    "description": "User-agent used when checking the URL\n"
                }
            },
            "type": "object",
            "required": [
                "ips",
                "mustContain",
                "strategy",
                "url"
            ]
        },
        "scaleway:index/DomainRecordView:DomainRecordView": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "The content of the record (an IPv4 for an `A`, a string for a `TXT`...).\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet of the view\n"
                }
            },
            "type": "object",
            "required": [
                "data",
                "subnet"
            ]
        },
        "scaleway:index/DomainRecordWeighted:DomainRecordWeighted": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "The weighted IP\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the IP as an integer UInt32.\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "weight"
            ]
        },
        "scaleway:index/FunctionTriggerNats:FunctionTriggerNats": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "ID of the mnq nats account.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project that contain the mnq nats account, defaults to provider's project\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The subject to listen to\n"
                }
            },
            "type": "object",
            "required": [
                "subject"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "projectId",
                        "region",
                        "subject"
                    ]
                }
            }
        },
        "scaleway:index/FunctionTriggerSqs:FunctionTriggerSqs": {
            "properties": {
                "namespaceId": {
                    "type": "string",
                    "description": "ID of the mnq namespace. Deprecated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project that contain the mnq nats account, defaults to provider's project\n"
                },
                "queue": {
                    "type": "string",
                    "description": "Name of the queue\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                }
            },
            "type": "object",
            "required": [
                "queue"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "projectId",
                        "queue",
                        "region"
                    ]
                }
            }
        },
        "scaleway:index/IamPolicyRule:IamPolicyRule": {
            "properties": {
                "organizationId": {
                    "type": "string",
                    "description": "ID of organization scoped to the rule.\n"
                },
                "permissionSetNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Names of permission sets bound to the rule.\n\n**_TIP:_**  You can use the Scaleway CLI to list the permissions details. e.g:\n\n"
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of project IDs scoped to the rule.\n\n\u003e **Important** One of `organization_id` or `project_ids`  must be set per rule.\n"
                }
            },
            "type": "object",
            "required": [
                "permissionSetNames"
            ]
        },
        "scaleway:index/InstanceImageAdditionalVolume:InstanceImageAdditionalVolume": {
            "properties": {
                "creationDate": {
                    "type": "string",
                    "description": "Date of the volume creation.\n"
                },
                "exportUri": {
                    "type": "string",
                    "description": "The export URI of the volume.\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the server containing the volume.\n"
                },
                "modificationDate": {
                    "type": "string",
                    "description": "Date of volume latest update.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the image. If not provided it will be randomly generated.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The organization ID the volume is associated with.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project the volume is associated with\n"
                },
                "server": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Description of the server containing the volume (in case the image is a backup from a server).\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the volume.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the volume.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the image.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "The type of volume, possible values are `l_ssd` and `b_ssd`.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone in which the image should be created.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "creationDate",
                        "exportUri",
                        "id",
                        "modificationDate",
                        "name",
                        "organization",
                        "project",
                        "server",
                        "size",
                        "state",
                        "tags",
                        "volumeType",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The ip this rule apply to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "deprecationMessage": "Ip address is deprecated. Please use ip_range instead"
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port this rule applies to. If no `port` nor `port_range` are specified, the rule will apply to all port. Only one of `port` and `port_range` should be specified.\n"
                },
                "portRange": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.\n"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:index/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The ip this rule apply to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "deprecationMessage": "Ip address is deprecated. Please use ip_range instead"
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port this rule applies to. If no `port` nor `port_range` are specified, the rule will apply to all port. Only one of `port` and `port_range` should be specified.\n"
                },
                "portRange": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.\n"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:index/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The ip this rule apply to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "deprecationMessage": "Ip address is deprecated. Please use ip_range instead"
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port this rule apply to. If no port is specified, rule will apply to all port.\n"
                },
                "portRange": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.\n"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:index/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The ip this rule apply to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "deprecationMessage": "Ip address is deprecated. Please use ip_range instead"
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port this rule apply to. If no port is specified, rule will apply to all port.\n"
                },
                "portRange": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.\n"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:index/InstanceServerPrivateNetwork:InstanceServerPrivateNetwork": {
            "properties": {
                "macAddress": {
                    "type": "string"
                },
                "pnId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "pnId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "macAddress",
                        "pnId",
                        "status",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/InstanceServerPublicIp:InstanceServerPublicIp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the IP\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the IP\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "id"
                    ]
                }
            }
        },
        "scaleway:index/InstanceServerRootVolume:InstanceServerRootVolume": {
            "properties": {
                "boot": {
                    "type": "boolean"
                },
                "deleteOnTermination": {
                    "type": "boolean",
                    "description": "Forces deletion of the root volume on instance termination.\n\n\u003e **Important:** Updates to `root_volume.size_in_gb` will be ignored after the creation of the server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "Size of the root volume in gigabytes.\nTo find the right size use [this endpoint](https://api.scaleway.com/instance/v1/zones/fr-par-1/products/servers) and\ncheck the `volumes_constraint.{min|max}_size` (in bytes) for your `commercial_type`.\nUpdates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "volumeId": {
                    "type": "string",
                    "description": "The volume ID of the root volume of the server, allows you to create server with an existing volume. If empty, will be computed to a created volume ID.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Volume type of root volume, can be `b_ssd` or `l_ssd`, default value depends on server type\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "sizeInGb",
                        "volumeId",
                        "volumeType"
                    ]
                }
            }
        },
        "scaleway:index/InstanceSnapshotImport:InstanceSnapshotImport": {
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "Bucket name containing [qcow2](https://en.wikipedia.org/wiki/Qcow) to import\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key of the object to import\n\n\u003e **Note:** The type `unified` could be instantiated on both `l_ssd` and `b_ssd` volumes.\n"
                }
            },
            "type": "object",
            "required": [
                "bucket",
                "key"
            ]
        },
        "scaleway:index/IotDeviceCertificate:IotDeviceCertificate": {
            "properties": {
                "crt": {
                    "type": "string",
                    "secret": true
                },
                "key": {
                    "type": "string",
                    "description": "The private key of the device, in case it is generated by Scaleway.\n",
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "crt",
                        "key"
                    ]
                }
            }
        },
        "scaleway:index/IotDeviceMessageFilters:IotDeviceMessageFilters": {
            "properties": {
                "publish": {
                    "$ref": "#/types/scaleway:index/IotDeviceMessageFiltersPublish:IotDeviceMessageFiltersPublish",
                    "description": "Rules used to restrict topics the device can publish to.\n"
                },
                "subscribe": {
                    "$ref": "#/types/scaleway:index/IotDeviceMessageFiltersSubscribe:IotDeviceMessageFiltersSubscribe",
                    "description": "Rules used to restrict topics the device can subscribe to.\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/IotDeviceMessageFiltersPublish:IotDeviceMessageFiltersPublish": {
            "properties": {
                "policy": {
                    "type": "string",
                    "description": "Same as publish rules.\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Same as publish rules.\n\n- `certificate.crt` - (Optional) The certificate of the device, either generated by Scaleway or provided.\n\n\u003e **Important:** Updates to `certificate.crt` will disconnect connected devices and the previous certificate will be deleted and won't be recoverable.\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/IotDeviceMessageFiltersSubscribe:IotDeviceMessageFiltersSubscribe": {
            "properties": {
                "policy": {
                    "type": "string",
                    "description": "Same as publish rules.\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Same as publish rules.\n\n- `certificate.crt` - (Optional) The certificate of the device, either generated by Scaleway or provided.\n\n\u003e **Important:** Updates to `certificate.crt` will disconnect connected devices and the previous certificate will be deleted and won't be recoverable.\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/IotRouteDatabase:IotRouteDatabase": {
            "properties": {
                "dbname": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "host": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "query": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "dbname",
                "host",
                "password",
                "port",
                "query",
                "username"
            ]
        },
        "scaleway:index/IotRouteRest:IotRouteRest": {
            "properties": {
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "willReplaceOnChanges": true
                },
                "uri": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "verb": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "headers",
                "uri",
                "verb"
            ]
        },
        "scaleway:index/IotRouteS3:IotRouteS3": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "bucketRegion": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "objectPrefix": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "strategy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "bucketRegion",
                "strategy"
            ]
        },
        "scaleway:index/IpamIpResource:IpamIpResource": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource that the IP is bound to.\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC Address of the resource the IP is attached to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource the IP is attached to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of resource the IP is attached to.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "macAddress",
                        "name",
                        "type"
                    ]
                }
            }
        },
        "scaleway:index/IpamIpSource:IpamIpSource": {
            "properties": {
                "privateNetworkId": {
                    "type": "string",
                    "description": "The private network the IP lives in if the IP is a private IP.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The private network subnet the IP lives in if the IP is a private IP in a private network.\n"
                },
                "zonal": {
                    "type": "string",
                    "description": "The zone the IP lives in if the IP is a public zoned one\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "privateNetworkId",
                        "subnetId",
                        "zonal"
                    ]
                }
            }
        },
        "scaleway:index/K8sClusterAutoUpgrade:K8sClusterAutoUpgrade": {
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Set to `true` to enable Kubernetes patch version auto upgrades.\n\u003e **Important:** When enabling auto upgrades, the `version` field take a minor version like x.y (ie 1.18).\n"
                },
                "maintenanceWindowDay": {
                    "type": "string",
                    "description": "The day of the auto upgrade maintenance window (`monday` to `sunday`, or `any`).\n"
                },
                "maintenanceWindowStartHour": {
                    "type": "integer",
                    "description": "The start hour (UTC) of the 2-hour auto upgrade maintenance window (0 to 23).\n"
                }
            },
            "type": "object",
            "required": [
                "enable",
                "maintenanceWindowDay",
                "maintenanceWindowStartHour"
            ]
        },
        "scaleway:index/K8sClusterAutoscalerConfig:K8sClusterAutoscalerConfig": {
            "properties": {
                "balanceSimilarNodeGroups": {
                    "type": "boolean",
                    "description": "Detect similar node groups and balance the number of nodes between them.\n"
                },
                "disableScaleDown": {
                    "type": "boolean",
                    "description": "Disables the scale down feature of the autoscaler.\n"
                },
                "estimator": {
                    "type": "string",
                    "description": "Type of resource estimator to be used in scale up.\n"
                },
                "expander": {
                    "type": "string",
                    "description": "Type of node group expander to be used in scale up.\n"
                },
                "expendablePodsPriorityCutoff": {
                    "type": "integer",
                    "description": "Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don't cause scale up. Pods with null priority (PodPriority disabled) are non expendable.\n"
                },
                "ignoreDaemonsetsUtilization": {
                    "type": "boolean",
                    "description": "Ignore DaemonSet pods when calculating resource utilization for scaling down.\n"
                },
                "maxGracefulTerminationSec": {
                    "type": "integer",
                    "description": "Maximum number of seconds the cluster autoscaler waits for pod termination when trying to scale down a node\n"
                },
                "scaleDownDelayAfterAdd": {
                    "type": "string",
                    "description": "How long after scale up that scale down evaluation resumes.\n"
                },
                "scaleDownUnneededTime": {
                    "type": "string",
                    "description": "How long a node should be unneeded before it is eligible for scale down.\n"
                },
                "scaleDownUtilizationThreshold": {
                    "type": "number",
                    "description": "Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/K8sClusterKubeconfig:K8sClusterKubeconfig": {
            "properties": {
                "clusterCaCertificate": {
                    "type": "string",
                    "description": "The CA certificate of the Kubernetes API server.\n"
                },
                "configFile": {
                    "type": "string",
                    "description": "The raw kubeconfig file.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The URL of the Kubernetes API server.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token to connect to the Kubernetes API server.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterCaCertificate",
                        "configFile",
                        "host",
                        "token"
                    ]
                }
            }
        },
        "scaleway:index/K8sClusterOpenIdConnectConfig:K8sClusterOpenIdConnectConfig": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "A client id that all tokens must be issued for\n"
                },
                "groupsClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "JWT claim to use as the user's group\n"
                },
                "groupsPrefix": {
                    "type": "string",
                    "description": "Prefix prepended to group claims\n"
                },
                "issuerUrl": {
                    "type": "string",
                    "description": "URL of the provider which allows the API server to discover public signing keys\n"
                },
                "requiredClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Multiple key=value pairs that describes a required claim in the ID Token\n"
                },
                "usernameClaim": {
                    "type": "string",
                    "description": "JWT claim to use as the user name\n"
                },
                "usernamePrefix": {
                    "type": "string",
                    "description": "Prefix prepended to username\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "issuerUrl"
            ]
        },
        "scaleway:index/K8sPoolNode:K8sPoolNode": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IPv4.\n"
                },
                "publicIpV6": {
                    "type": "string",
                    "description": "The public IPv6.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "publicIp",
                        "publicIpV6",
                        "status"
                    ]
                }
            }
        },
        "scaleway:index/K8sPoolUpgradePolicy:K8sPoolUpgradePolicy": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "description": "The maximum number of nodes to be created during the upgrade\n"
                },
                "maxUnavailable": {
                    "type": "integer",
                    "description": "The maximum number of nodes that can be not ready at the same time\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/LbAclAction:LbAclAction": {
            "properties": {
                "redirects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LbAclActionRedirect:LbAclActionRedirect"
                    },
                    "description": "Redirect parameters when using an ACL with `redirect` action.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The redirect type. Possible values are: `location` or `scheme`.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "scaleway:index/LbAclActionRedirect:LbAclActionRedirect": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.\n"
                },
                "target": {
                    "type": "string",
                    "description": "An URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The redirect type. Possible values are: `location` or `scheme`.\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/LbAclMatch:LbAclMatch": {
            "properties": {
                "httpFilter": {
                    "type": "string",
                    "description": "The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.\nIt extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).\nPossible values are: `acl_http_filter_none`, `path_begin`, `path_end`, `http_header_match` or `regex`.\n"
                },
                "httpFilterOption": {
                    "type": "string"
                },
                "httpFilterValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of possible values to match for the given HTTP filter.\nKeep in mind that in the case of `http_header_match` the HTTP header field name is case-insensitive.\n"
                },
                "invert": {
                    "type": "boolean",
                    "description": "If set to `true`, the condition will be of type \"unless\".\n"
                },
                "ipSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPs or CIDR v4/v6 addresses of the client of the session to match.\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/LbBackendHealthCheckHttp:LbBackendHealthCheckHttp": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The expected HTTP status code.\n"
                },
                "hostHeader": {
                    "type": "string",
                    "description": "The HTTP host header to use for HC requests.\n"
                },
                "method": {
                    "type": "string",
                    "description": "The HTTP method to use for HC requests.\n"
                },
                "uri": {
                    "type": "string",
                    "description": "The HTTPS endpoint URL to call for HC requests.\n"
                }
            },
            "type": "object",
            "required": [
                "uri"
            ]
        },
        "scaleway:index/LbBackendHealthCheckHttps:LbBackendHealthCheckHttps": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The expected HTTP status code.\n"
                },
                "hostHeader": {
                    "type": "string",
                    "description": "The HTTP host header to use for HC requests.\n"
                },
                "method": {
                    "type": "string",
                    "description": "The HTTP method to use for HC requests.\n"
                },
                "sni": {
                    "type": "string",
                    "description": "The SNI to use for HC requests over SSL.\n"
                },
                "uri": {
                    "type": "string",
                    "description": "The HTTPS endpoint URL to call for HC requests.\n"
                }
            },
            "type": "object",
            "required": [
                "uri"
            ]
        },
        "scaleway:index/LbBackendHealthCheckTcp:LbBackendHealthCheckTcp": {
            "type": "object"
        },
        "scaleway:index/LbCertificateCustomCertificate:LbCertificateCustomCertificate": {
            "properties": {
                "certificateChain": {
                    "type": "string",
                    "description": "Full PEM-formatted certificate chain.\n\n\u003e **Important:** Updates to `custom_certificate` will recreate the load-balancer certificate.\n"
                }
            },
            "type": "object",
            "required": [
                "certificateChain"
            ]
        },
        "scaleway:index/LbCertificateLetsencrypt:LbCertificateLetsencrypt": {
            "properties": {
                "commonName": {
                    "type": "string",
                    "description": "Main domain of the certificate. A new certificate will be created if this field is changed.\n",
                    "willReplaceOnChanges": true
                },
                "subjectAlternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of alternative domain names.  A new certificate will be created if this field is changed.\n\n\u003e **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "commonName"
            ]
        },
        "scaleway:index/LbFrontendAcl:LbFrontendAcl": {
            "properties": {
                "action": {
                    "$ref": "#/types/scaleway:index/LbFrontendAclAction:LbFrontendAclAction",
                    "description": "Action to undertake when an ACL filter matches.\n"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "match": {
                    "$ref": "#/types/scaleway:index/LbFrontendAclMatch:LbFrontendAclMatch",
                    "description": "The ACL match rule. At least `ip_subnet` or `http_filter` and `http_filter_value` are required.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ACL name. If not provided it will be randomly generated.\n"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "action",
                "match"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "createdAt",
                        "match",
                        "name",
                        "updatedAt"
                    ]
                }
            }
        },
        "scaleway:index/LbFrontendAclAction:LbFrontendAclAction": {
            "properties": {
                "redirects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LbFrontendAclActionRedirect:LbFrontendAclActionRedirect"
                    },
                    "description": "Redirect parameters when using an ACL with `redirect` action.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The redirect type. Possible values are: `location` or `scheme`.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "scaleway:index/LbFrontendAclActionRedirect:LbFrontendAclActionRedirect": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.\n"
                },
                "target": {
                    "type": "string",
                    "description": "An URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The redirect type. Possible values are: `location` or `scheme`.\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/LbFrontendAclMatch:LbFrontendAclMatch": {
            "properties": {
                "httpFilter": {
                    "type": "string",
                    "description": "The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.\nIt extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).\nPossible values are: `acl_http_filter_none`, `path_begin`, `path_end`, `http_header_match` or `regex`.\n"
                },
                "httpFilterOption": {
                    "type": "string"
                },
                "httpFilterValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of possible values to match for the given HTTP filter.\nKeep in mind that in the case of `http_header_match` the HTTP header field name is case-insensitive.\n"
                },
                "invert": {
                    "type": "boolean",
                    "description": "If set to `true`, the condition will be of type \"unless\".\n"
                },
                "ipSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPs or CIDR v4/v6 addresses of the client of the session to match.\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/LbPrivateNetwork:LbPrivateNetwork": {
            "properties": {
                "dhcpConfig": {
                    "type": "boolean",
                    "description": "(Optional) Set to true if you want to let DHCP assign IP addresses. See below.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "(Required) The ID of the Private Network to associate.\n"
                },
                "staticConfig": {
                    "type": "string",
                    "description": "(Optional) Define a local ip address of your choice for the load balancer instance. See below.\n"
                },
                "status": {
                    "type": "string"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone of the load-balancer.\n"
                }
            },
            "type": "object",
            "required": [
                "privateNetworkId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dhcpConfig",
                        "privateNetworkId",
                        "status",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/MnqCredentialNatsCredentials:MnqCredentialNatsCredentials": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "Raw content of the NATS credentials file.\n",
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "content"
                    ]
                }
            }
        },
        "scaleway:index/MnqCredentialSqsSnsCredentials:MnqCredentialSqsSnsCredentials": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The ID of the key.\n"
                },
                "permissions": {
                    "$ref": "#/types/scaleway:index/MnqCredentialSqsSnsCredentialsPermissions:MnqCredentialSqsSnsCredentialsPermissions",
                    "description": "List of permissions associated to this Credential. Only one of permissions may be set.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The Secret value of the key.\n",
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessKey",
                        "secretKey"
                    ]
                }
            }
        },
        "scaleway:index/MnqCredentialSqsSnsCredentialsPermissions:MnqCredentialSqsSnsCredentialsPermissions": {
            "properties": {
                "canManage": {
                    "type": "boolean",
                    "description": ". Defines if user can manage the associated resource(s).\n"
                },
                "canPublish": {
                    "type": "boolean",
                    "description": ". Defines if user can publish messages to the service.\n"
                },
                "canReceive": {
                    "type": "boolean",
                    "description": ". Defines if user can receive messages from the service.\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/MnqQueueNats:MnqQueueNats": {
            "properties": {
                "credentials": {
                    "type": "string",
                    "secret": true
                },
                "endpoint": {
                    "type": "string"
                },
                "retentionPolicy": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentials"
            ]
        },
        "scaleway:index/MnqQueueSqs:MnqQueueSqs": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "secret": true
                },
                "contentBasedDeduplication": {
                    "type": "boolean"
                },
                "endpoint": {
                    "type": "string"
                },
                "fifoQueue": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "receiveWaitTimeSeconds": {
                    "type": "integer"
                },
                "secretKey": {
                    "type": "string",
                    "secret": true
                },
                "url": {
                    "type": "string"
                },
                "visibilityTimeoutSeconds": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "secretKey"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessKey",
                        "secretKey",
                        "url"
                    ]
                }
            }
        },
        "scaleway:index/MnqSqsCredentialsPermissions:MnqSqsCredentialsPermissions": {
            "properties": {
                "canManage": {
                    "type": "boolean",
                    "description": ". Defines if user can manage the associated resource(s).\n"
                },
                "canPublish": {
                    "type": "boolean",
                    "description": ". Defines if user can publish messages to the service.\n"
                },
                "canReceive": {
                    "type": "boolean",
                    "description": ". Defines if user can receive messages from the service.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "canManage",
                        "canPublish",
                        "canReceive"
                    ]
                }
            }
        },
        "scaleway:index/ObjectBucketAclAccessControlPolicy:ObjectBucketAclAccessControlPolicy": {
            "properties": {
                "grants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketAclAccessControlPolicyGrant:ObjectBucketAclAccessControlPolicyGrant"
                    }
                },
                "owner": {
                    "$ref": "#/types/scaleway:index/ObjectBucketAclAccessControlPolicyOwner:ObjectBucketAclAccessControlPolicyOwner"
                }
            },
            "type": "object",
            "required": [
                "owner"
            ]
        },
        "scaleway:index/ObjectBucketAclAccessControlPolicyGrant:ObjectBucketAclAccessControlPolicyGrant": {
            "properties": {
                "grantee": {
                    "$ref": "#/types/scaleway:index/ObjectBucketAclAccessControlPolicyGrantGrantee:ObjectBucketAclAccessControlPolicyGrantGrantee"
                },
                "permission": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "permission"
            ]
        },
        "scaleway:index/ObjectBucketAclAccessControlPolicyGrantGrantee:ObjectBucketAclAccessControlPolicyGrantGrantee": {
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The `region`,`bucket` and `acl` separated by (`/`).\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "id",
                        "type"
                    ]
                }
            }
        },
        "scaleway:index/ObjectBucketAclAccessControlPolicyOwner:ObjectBucketAclAccessControlPolicyOwner": {
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The `region`,`bucket` and `acl` separated by (`/`).\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "id"
                    ]
                }
            }
        },
        "scaleway:index/ObjectBucketCorsRule:ObjectBucketCorsRule": {
            "properties": {
                "allowedHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which headers are allowed.\n"
                },
                "allowedMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.\n"
                },
                "allowedOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which origins are allowed.\n"
                },
                "exposeHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies expose header in the response.\n"
                },
                "maxAgeSeconds": {
                    "type": "integer",
                    "description": "Specifies time in seconds that browser can cache the response for a preflight request.\n"
                }
            },
            "type": "object",
            "required": [
                "allowedMethods",
                "allowedOrigins"
            ]
        },
        "scaleway:index/ObjectBucketLifecycleRule:ObjectBucketLifecycleRule": {
            "properties": {
                "abortIncompleteMultipartUploadDays": {
                    "type": "integer",
                    "description": "Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.\n\n* \u003e **Important:** It's not recommended using `prefix` for `AbortIncompleteMultipartUpload` as any incomplete multipart upload will be billed\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The element value can be either Enabled or Disabled. If a rule is disabled, Scaleway S3 doesn't perform any of the actions defined in the rule.\n"
                },
                "expiration": {
                    "$ref": "#/types/scaleway:index/ObjectBucketLifecycleRuleExpiration:ObjectBucketLifecycleRuleExpiration",
                    "description": "Specifies a period in the object's expire (documented below).\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier for the rule. Must be less than or equal to 255 characters in length.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "Object key prefix identifying one or more objects to which the rule applies.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies object tags key and value.\n"
                },
                "transitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketLifecycleRuleTransition:ObjectBucketLifecycleRuleTransition"
                    },
                    "description": "Specifies a period in the object's transitions (documented below).\n\nAt least one of `abort_incomplete_multipart_upload_days`, `expiration`, `transition` must be specified.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "id"
                    ]
                }
            }
        },
        "scaleway:index/ObjectBucketLifecycleRuleExpiration:ObjectBucketLifecycleRuleExpiration": {
            "properties": {
                "days": {
                    "type": "integer",
                    "description": "Specifies the number of days after object creation when the specific rule action takes effect.\n\n\u003e **Important:**  If versioning is enabled, this rule only deletes the current version of an object.\n"
                }
            },
            "type": "object",
            "required": [
                "days"
            ]
        },
        "scaleway:index/ObjectBucketLifecycleRuleTransition:ObjectBucketLifecycleRuleTransition": {
            "properties": {
                "days": {
                    "type": "integer",
                    "description": "Specifies the number of days after object creation when the specific rule action takes effect.\n"
                },
                "storageClass": {
                    "type": "string",
                    "description": "Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/storage/object/concepts/#storage-class) `STANDARD`, `GLACIER`, `ONEZONE_IA`  to which you want the object to transition.\n\n\u003e **Important:**  `ONEZONE_IA` is only available in `fr-par` region. The storage class `GLACIER` is not available in `pl-waw` region.\n"
                }
            },
            "type": "object",
            "required": [
                "storageClass"
            ]
        },
        "scaleway:index/ObjectBucketLockConfigurationRule:ObjectBucketLockConfigurationRule": {
            "properties": {
                "defaultRetention": {
                    "$ref": "#/types/scaleway:index/ObjectBucketLockConfigurationRuleDefaultRetention:ObjectBucketLockConfigurationRuleDefaultRetention"
                }
            },
            "type": "object",
            "required": [
                "defaultRetention"
            ]
        },
        "scaleway:index/ObjectBucketLockConfigurationRuleDefaultRetention:ObjectBucketLockConfigurationRuleDefaultRetention": {
            "properties": {
                "days": {
                    "type": "integer"
                },
                "mode": {
                    "type": "string"
                },
                "years": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "scaleway:index/ObjectBucketVersioning:ObjectBucketVersioning": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "scaleway:index/ObjectBucketWebsiteConfigurationErrorDocument:ObjectBucketWebsiteConfigurationErrorDocument": {
            "properties": {
                "key": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "scaleway:index/ObjectBucketWebsiteConfigurationIndexDocument:ObjectBucketWebsiteConfigurationIndexDocument": {
            "properties": {
                "suffix": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "suffix"
            ]
        },
        "scaleway:index/RdbAclAclRule:RdbAclAclRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A text describing this rule. Default description: `IP allowed`\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)\n"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "ip"
                    ]
                }
            }
        },
        "scaleway:index/RdbInstanceLoadBalancer:RdbInstanceLoadBalancer": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the endpoint.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address on the network.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port in the Private Network.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "hostname",
                        "ip",
                        "name",
                        "port"
                    ]
                }
            }
        },
        "scaleway:index/RdbInstancePrivateNetwork:RdbInstancePrivateNetwork": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the endpoint.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address on the network.\n"
                },
                "ipNet": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n"
                },
                "pnId": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "Port in the Private Network.\n"
                },
                "zone": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "pnId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "hostname",
                        "ip",
                        "ipNet",
                        "name",
                        "pnId",
                        "port",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/RdbInstanceReadReplica:RdbInstanceReadReplica": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IPv4 address on the network.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port in the Private Network.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "name",
                        "port"
                    ]
                }
            }
        },
        "scaleway:index/RdbReadReplicaDirectAccess:RdbReadReplicaDirectAccess": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint of the read replica.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the endpoint. Only one of ip and hostname may be set.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the endpoint.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "TCP port of the endpoint.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "hostname",
                        "ip",
                        "name",
                        "port"
                    ]
                }
            }
        },
        "scaleway:index/RdbReadReplicaPrivateNetwork:RdbReadReplicaPrivateNetwork": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint of the read replica.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the endpoint. Only one of ip and hostname may be set.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the endpoint.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "TCP port of the endpoint.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "UUID of the private network to be connected to the read replica.\n"
                },
                "serviceIp": {
                    "type": "string",
                    "description": "The IP network address within the private subnet. This must be an IPv4 address with a\nCIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)\nservice if not set.\n"
                },
                "zone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "privateNetworkId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "hostname",
                        "ip",
                        "name",
                        "port",
                        "privateNetworkId",
                        "serviceIp",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/RedisClusterAcl:RedisClusterAcl": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A text describing this rule. Default description: `Allow IP`\n\n\u003e The `acl` conflict with `private_network`. Only one should be specified.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The UUID of the private network resource.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The ip range to whitelist\nin [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)\n"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "id",
                        "ip"
                    ]
                }
            }
        },
        "scaleway:index/RedisClusterPrivateNetwork:RedisClusterPrivateNetwork": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The UUID of the private network resource.\n"
                },
                "serviceIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Endpoint IPv4 addresses\nin [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation). You must provide at\nleast one IP per node or The IP network address within the private subnet is determined by the IP Address Management (IPAM)\nservice if not set.\n\n\u003e The `private_network` conflict with `acl`. Only one should be specified.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the\nRedis Cluster should be created.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "id",
                        "serviceIps",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/RedisClusterPublicNetwork:RedisClusterPublicNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The UUID of the private network resource.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Lis of IPv4 address of the endpoint (IP address).\n"
                },
                "port": {
                    "type": "integer",
                    "description": "TCP port of the endpoint.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "ips",
                        "port"
                    ]
                }
            }
        },
        "scaleway:index/TemDomainReputation:TemDomainReputation": {
            "properties": {
                "previousScore": {
                    "type": "integer",
                    "description": "The previously-calculated domain's reputation score.\n"
                },
                "previousScoredAt": {
                    "type": "string",
                    "description": "The time and date the previous reputation score was calculated.\n"
                },
                "score": {
                    "type": "integer",
                    "description": "A range from 0 to 100 that determines your domain's reputation score.\n"
                },
                "scoredAt": {
                    "type": "string",
                    "description": "The time and date the score was calculated.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the domain's reputation.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "previousScore",
                        "previousScoredAt",
                        "score",
                        "scoredAt",
                        "status"
                    ]
                }
            }
        },
        "scaleway:index/VpcGatewayNetworkIpamConfig:VpcGatewayNetworkIpamConfig": {
            "properties": {
                "pushDefaultRoute": {
                    "type": "boolean",
                    "description": "Defines whether the default route is enabled on that Gateway Network. Only one of `dhcp_id`, `static_address` and `ipam_config` should be specified.\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/VpcPrivateNetworkIpv4Subnet:VpcPrivateNetworkIpv4Subnet": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The network address of the subnet in dotted decimal notation, e.g., '192.168.0.0' for a '192.168.0.0/24' subnet.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the subnet.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The subnet ID.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "The length of the network prefix, e.g., 24 for a 255.255.255.0 mask.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet CIDR.\n",
                    "willReplaceOnChanges": true
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask expressed in dotted decimal notation, e.g., '255.255.255.0' for a /24 subnet\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the subnet.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "createdAt",
                        "id",
                        "prefixLength",
                        "subnet",
                        "subnetMask",
                        "updatedAt"
                    ]
                }
            }
        },
        "scaleway:index/VpcPrivateNetworkIpv6Subnet:VpcPrivateNetworkIpv6Subnet": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The network address of the subnet in dotted decimal notation, e.g., '192.168.0.0' for a '192.168.0.0/24' subnet.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the subnet.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The subnet ID.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "The length of the network prefix, e.g., 24 for a 255.255.255.0 mask.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet CIDR.\n",
                    "willReplaceOnChanges": true
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask expressed in dotted decimal notation, e.g., '255.255.255.0' for a /24 subnet\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the subnet.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "createdAt",
                        "id",
                        "prefixLength",
                        "subnet",
                        "subnetMask",
                        "updatedAt"
                    ]
                }
            }
        },
        "scaleway:index/WebHostingCpanelUrl:WebHostingCpanelUrl": {
            "properties": {
                "dashboard": {
                    "type": "string",
                    "description": "The URL of the Dashboard.\n"
                },
                "webmail": {
                    "type": "string",
                    "description": "The URL of the Webmail interface.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dashboard",
                        "webmail"
                    ]
                }
            }
        },
        "scaleway:index/WebHostingOption:WebHostingOption": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The option ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The option name.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name"
                    ]
                }
            }
        },
        "scaleway:index/getBaremetalOfferCpus:getBaremetalOfferCpus": {
            "properties": {
                "coreCount": {
                    "type": "integer",
                    "description": "Number of core on this CPU.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "Frequency of the memory in MHz.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The offer name. Only one of `name` and `offer_id` should be specified.\n"
                },
                "threadCount": {
                    "type": "integer",
                    "description": "Number of thread on this CPU.\n"
                }
            },
            "type": "object",
            "required": [
                "coreCount",
                "frequency",
                "name",
                "threadCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalOfferDisk:getBaremetalOfferDisk": {
            "properties": {
                "capacity": {
                    "type": "integer",
                    "description": "Capacity of the memory in GB.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of memory.\n"
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalOfferMemory:getBaremetalOfferMemory": {
            "properties": {
                "capacity": {
                    "type": "integer",
                    "description": "Capacity of the memory in GB.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "Frequency of the memory in MHz.\n"
                },
                "isEcc": {
                    "type": "boolean",
                    "description": "True if error-correcting code is available on this memory.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of memory.\n"
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "frequency",
                "isEcc",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalServerIp:getBaremetalServerIp": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server.\n"
                },
                "reverse": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "address",
                "id",
                "reverse",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalServerIpv4:getBaremetalServerIpv4": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server.\n"
                },
                "reverse": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "address",
                "id",
                "reverse",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalServerIpv6:getBaremetalServerIpv6": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server.\n"
                },
                "reverse": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "address",
                "id",
                "reverse",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalServerOption:getBaremetalServerOption": {
            "properties": {
                "expiresAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The server name. Only one of `name` and `server_id` should be specified.\n"
                }
            },
            "type": "object",
            "required": [
                "expiresAt",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalServerPrivateNetwork:getBaremetalServerPrivateNetwork": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server.\n"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "vlan": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "id",
                "status",
                "updatedAt",
                "vlan"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBillingConsumptionsConsumption:getBillingConsumptionsConsumption": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "operationPath": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "category",
                "description",
                "operationPath",
                "projectId",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBillingInvoicesInvoice:getBillingInvoicesInvoice": {
            "properties": {
                "dueDate": {
                    "type": "string",
                    "description": "The payment time limit, set according to the Organization's payment conditions (RFC 3339 format).\n"
                },
                "id": {
                    "type": "string",
                    "description": "The associated invoice ID.\n"
                },
                "invoiceType": {
                    "type": "string",
                    "description": "Invoices with the given type are listed. Valid values are `periodic` and `purchase`.\n"
                },
                "issuedDate": {
                    "type": "string",
                    "description": "The date when the invoice was sent to the customer (RFC 3339 format).\n"
                },
                "number": {
                    "type": "integer",
                    "description": "The invoice number.\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The start date of the billing period (RFC 3339 format).\n"
                },
                "totalTaxed": {
                    "type": "string",
                    "description": "The total amount, taxed.\n"
                },
                "totalUntaxed": {
                    "type": "string",
                    "description": "The total amount, untaxed.\n"
                }
            },
            "type": "object",
            "required": [
                "dueDate",
                "id",
                "invoiceType",
                "issuedDate",
                "number",
                "startDate",
                "totalTaxed",
                "totalUntaxed"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getCockpitEndpoint:getCockpitEndpoint": {
            "properties": {
                "alertmanagerUrl": {
                    "type": "string",
                    "description": "The alertmanager URL\n"
                },
                "grafanaUrl": {
                    "type": "string",
                    "description": "The grafana URL\n"
                },
                "logsUrl": {
                    "type": "string",
                    "description": "The logs URL\n"
                },
                "metricsUrl": {
                    "type": "string",
                    "description": "The metrics URL\n"
                },
                "tracesUrl": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "alertmanagerUrl",
                "grafanaUrl",
                "logsUrl",
                "metricsUrl",
                "tracesUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordGeoIp:getDomainRecordGeoIp": {
            "properties": {
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getDomainRecordGeoIpMatch:getDomainRecordGeoIpMatch"
                    }
                }
            },
            "type": "object",
            "required": [
                "matches"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordGeoIpMatch:getDomainRecordGeoIpMatch": {
            "properties": {
                "continents": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "data": {
                    "type": "string",
                    "description": "The content of the record (an IPv4 for an `A`, a string for a `TXT`...).\nCannot be used with `record_id`.\n"
                }
            },
            "type": "object",
            "required": [
                "continents",
                "countries",
                "data"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordHttpService:getDomainRecordHttpService": {
            "properties": {
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mustContain": {
                    "type": "string"
                },
                "strategy": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "userAgent": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ips",
                "mustContain",
                "strategy",
                "url",
                "userAgent"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordView:getDomainRecordView": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "The content of the record (an IPv4 for an `A`, a string for a `TXT`...).\nCannot be used with `record_id`.\n"
                },
                "subnet": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "data",
                "subnet"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordWeighted:getDomainRecordWeighted": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getFlexibleIpsIp:getFlexibleIpsIp": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date on which the flexible IP was created (RFC 3339 format).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the flexible IP.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The MAC address ID.\n"
                },
                "ipAddress": {
                    "type": "string"
                },
                "macAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getFlexibleIpsIpMacAddress:getFlexibleIpsIpMacAddress"
                    },
                    "description": "The MAC address of the Virtual MAC.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "(Defaults to provider `organization_id`) The ID of the organization the IP is in.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "(Defaults to provider `project_id`) The ID of the project the IP is in.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain associated with this IP.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of virtual MAC.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tags used as filter. IPs with these exact tags are listed.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date on which the flexible IP was last updated (RFC 3339 format).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which IPs exist.\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "description",
                "id",
                "ipAddress",
                "macAddresses",
                "organizationId",
                "projectId",
                "reverse",
                "status",
                "tags",
                "updatedAt",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getFlexibleIpsIpMacAddress:getFlexibleIpsIpMacAddress": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date on which the flexible IP was created (RFC 3339 format).\n"
                },
                "id": {
                    "type": "string",
                    "description": "The MAC address ID.\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address of the Virtual MAC.\n"
                },
                "macType": {
                    "type": "string",
                    "description": "The type of virtual MAC.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of virtual MAC.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date on which the flexible IP was last updated (RFC 3339 format).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which IPs exist.\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "id",
                "macAddress",
                "macType",
                "status",
                "updatedAt",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceSecurityGroupInboundRule:getInstanceSecurityGroupInboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The ip this rule apply to.\n"
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range (e.g `192.168.1.0/24`) this rule apply to.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port this rule apply to. If no port is specified, rule will apply to all port.\n"
                },
                "portRange": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "ip",
                "ipRange",
                "port",
                "portRange",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceSecurityGroupOutboundRule:getInstanceSecurityGroupOutboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The ip this rule apply to.\n"
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range (e.g `192.168.1.0/24`) this rule apply to.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port this rule apply to. If no port is specified, rule will apply to all port.\n"
                },
                "portRange": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "ip",
                "ipRange",
                "port",
                "portRange",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceServerPrivateNetwork:getInstanceServerPrivateNetwork": {
            "properties": {
                "macAddress": {
                    "type": "string"
                },
                "pnId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server exists.\n"
                }
            },
            "type": "object",
            "required": [
                "macAddress",
                "pnId",
                "status",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceServerPublicIp:getInstanceServerPublicIp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the IP\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the IP\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceServerRootVolume:getInstanceServerRootVolume": {
            "properties": {
                "boot": {
                    "type": "boolean"
                },
                "deleteOnTermination": {
                    "type": "boolean",
                    "description": "Forces deletion of the root volume on instance termination.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The server name. Only one of `name` and `server_id` should be specified.\n"
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "Size of the root volume in gigabytes.\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "The volume ID of the root volume of the server.\n"
                },
                "volumeType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "boot",
                "deleteOnTermination",
                "name",
                "sizeInGb",
                "volumeId",
                "volumeType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceServersServer:getInstanceServersServer": {
            "properties": {
                "bootType": {
                    "type": "string",
                    "description": "The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.\n"
                },
                "bootscriptId": {
                    "type": "string",
                    "description": "The ID of the bootscript.\n"
                },
                "enableDynamicIp": {
                    "type": "boolean",
                    "description": "If true a dynamic IP will be attached to the server.\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Determines if IPv6 is enabled for the server.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the IP\n"
                },
                "image": {
                    "type": "string",
                    "description": "The UUID or the label of the base image used by the server.\n"
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "The default ipv6 address routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                },
                "ipv6Gateway": {
                    "type": "string",
                    "description": "The ipv6 gateway address. ( Only set when enable_ipv6 is set to true )\n"
                },
                "ipv6PrefixLength": {
                    "type": "integer",
                    "description": "The prefix length of the ipv6 subnet routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                },
                "name": {
                    "type": "string",
                    "description": "The server name used as filter. Servers with a name like it are listed.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the server is associated with.\n"
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.\n"
                },
                "placementGroupPolicyRespected": {
                    "type": "boolean"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The Scaleway internal IP address of the server.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project the server is associated with.\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IP address of the server.\n"
                },
                "publicIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getInstanceServersServerPublicIp:getInstanceServersServerPublicIp"
                    },
                    "description": "The list of public IPs of the server\n"
                },
                "routedIpEnabled": {
                    "type": "boolean",
                    "description": "True if the server support routed ip only.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tags used as filter. Servers with these exact tags are listed.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The commercial type of the server.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which servers exist.\n"
                }
            },
            "type": "object",
            "required": [
                "bootType",
                "bootscriptId",
                "enableDynamicIp",
                "enableIpv6",
                "id",
                "image",
                "ipv6Address",
                "ipv6Gateway",
                "ipv6PrefixLength",
                "name",
                "organizationId",
                "placementGroupId",
                "placementGroupPolicyRespected",
                "privateIp",
                "projectId",
                "publicIp",
                "publicIps",
                "routedIpEnabled",
                "securityGroupId",
                "state",
                "tags",
                "type",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceServersServerPublicIp:getInstanceServersServerPublicIp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the IP\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the IP\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceSnapshotImport:getInstanceSnapshotImport": {
            "properties": {
                "bucket": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "bucket",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getIotDeviceCertificate:getIotDeviceCertificate": {
            "properties": {
                "crt": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "crt",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getIotDeviceMessageFilter:getIotDeviceMessageFilter": {
            "properties": {
                "publishes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getIotDeviceMessageFilterPublish:getIotDeviceMessageFilterPublish"
                    }
                },
                "subscribes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getIotDeviceMessageFilterSubscribe:getIotDeviceMessageFilterSubscribe"
                    }
                }
            },
            "type": "object",
            "required": [
                "publishes",
                "subscribes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getIotDeviceMessageFilterPublish:getIotDeviceMessageFilterPublish": {
            "properties": {
                "policy": {
                    "type": "string"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "policy",
                "topics"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getIotDeviceMessageFilterSubscribe:getIotDeviceMessageFilterSubscribe": {
            "properties": {
                "policy": {
                    "type": "string"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "policy",
                "topics"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getIpamIpResource:getIpamIpResource": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource that the IP is bound to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource to get the IP from.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the resource to get the IP from. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1#pkg-constants) with type list.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "scaleway:index/getK8sClusterAutoUpgrade:getK8sClusterAutoUpgrade": {
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "True if Kubernetes patch version auto upgrades is enabled.\n"
                },
                "maintenanceWindowDay": {
                    "type": "string",
                    "description": "The day of the auto upgrade maintenance window (`monday` to `sunday`, or `any`).\n"
                },
                "maintenanceWindowStartHour": {
                    "type": "integer",
                    "description": "The start hour (UTC) of the 2-hour auto upgrade maintenance window (0 to 23).\n"
                }
            },
            "type": "object",
            "required": [
                "enable",
                "maintenanceWindowDay",
                "maintenanceWindowStartHour"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getK8sClusterAutoscalerConfig:getK8sClusterAutoscalerConfig": {
            "properties": {
                "balanceSimilarNodeGroups": {
                    "type": "boolean",
                    "description": "True if detecting similar node groups and balance the number of nodes between them is enabled.\n"
                },
                "disableScaleDown": {
                    "type": "boolean",
                    "description": "True if the scale down feature of the autoscaler is disabled.\n"
                },
                "estimator": {
                    "type": "string",
                    "description": "The type of resource estimator used in scale up.\n"
                },
                "expander": {
                    "type": "string",
                    "description": "The type of node group expander be used in scale up.\n"
                },
                "expendablePodsPriorityCutoff": {
                    "type": "integer",
                    "description": "Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don't cause scale up. Pods with null priority (PodPriority disabled) are non expendable.\n"
                },
                "ignoreDaemonsetsUtilization": {
                    "type": "boolean",
                    "description": "True if ignoring DaemonSet pods when calculating resource utilization for scaling down is enabled.\n"
                },
                "maxGracefulTerminationSec": {
                    "type": "integer"
                },
                "scaleDownDelayAfterAdd": {
                    "type": "string",
                    "description": "The duration after scale up that scale down evaluation resumes.\n"
                },
                "scaleDownUnneededTime": {
                    "type": "string",
                    "description": "The duration a node should be unneeded before it is eligible for scale down.\n"
                },
                "scaleDownUtilizationThreshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "balanceSimilarNodeGroups",
                "disableScaleDown",
                "estimator",
                "expander",
                "expendablePodsPriorityCutoff",
                "ignoreDaemonsetsUtilization",
                "maxGracefulTerminationSec",
                "scaleDownDelayAfterAdd",
                "scaleDownUnneededTime",
                "scaleDownUtilizationThreshold"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getK8sClusterKubeconfig:getK8sClusterKubeconfig": {
            "properties": {
                "clusterCaCertificate": {
                    "type": "string",
                    "description": "The CA certificate of the Kubernetes API server.\n"
                },
                "configFile": {
                    "type": "string",
                    "description": "The raw kubeconfig file.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The URL of the Kubernetes API server.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token to connect to the Kubernetes API server.\n"
                }
            },
            "type": "object",
            "required": [
                "clusterCaCertificate",
                "configFile",
                "host",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getK8sClusterOpenIdConnectConfig:getK8sClusterOpenIdConnectConfig": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "groupsClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupsPrefix": {
                    "type": "string"
                },
                "issuerUrl": {
                    "type": "string"
                },
                "requiredClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "usernameClaim": {
                    "type": "string"
                },
                "usernamePrefix": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "groupsClaims",
                "groupsPrefix",
                "issuerUrl",
                "requiredClaims",
                "usernameClaim",
                "usernamePrefix"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getK8sPoolNode:getK8sPoolNode": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The pool name. Only one of `name` and `pool_id` should be specified. `cluster_id` should be specified with `name`.\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IPv4.\n"
                },
                "publicIpV6": {
                    "type": "string",
                    "description": "The public IPv6.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "publicIp",
                "publicIpV6",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getK8sPoolUpgradePolicy:getK8sPoolUpgradePolicy": {
            "properties": {
                "maxSurge": {
                    "type": "integer"
                },
                "maxUnavailable": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "maxSurge",
                "maxUnavailable"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbAclsAcl:getLbAclsAcl": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbAclsAclAction:getLbAclsAclAction"
                    },
                    "description": "The action that has been undertaken when an ACL filter had matched.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date at which the ACL was created (RFC 3339 format).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the ACL resource.\n"
                },
                "frontendId": {
                    "type": "string",
                    "description": "The frontend ID this ACL is attached to. ACLs with a frontend ID like it are listed.\n\u003e **Important:** LB Frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`\n"
                },
                "id": {
                    "type": "string",
                    "description": "The associated ACL ID.\n\u003e **Important:** LB ACLs' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`\n"
                },
                "index": {
                    "type": "integer",
                    "description": "The order between the ACLs.\n"
                },
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbAclsAclMatch:getLbAclsAclMatch"
                    },
                    "description": "The ACL match rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ACL name used as filter. ACLs with a name like it are listed.\n"
                },
                "updateAt": {
                    "type": "string",
                    "description": "The date at which the ACL was last updated (RFC 3339 format).\n"
                }
            },
            "type": "object",
            "required": [
                "actions",
                "createdAt",
                "description",
                "frontendId",
                "id",
                "index",
                "matches",
                "name",
                "updateAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbAclsAclAction:getLbAclsAclAction": {
            "properties": {
                "redirects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbAclsAclActionRedirect:getLbAclsAclActionRedirect"
                    },
                    "description": "Redirect parameters when using an ACL with `redirect` action.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The redirect type.\n"
                }
            },
            "type": "object",
            "required": [
                "redirects",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbAclsAclActionRedirect:getLbAclsAclActionRedirect": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The HTTP redirect code used.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The URL used in case of a location redirect or the scheme name that replaces the request's original scheme.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The redirect type.\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "target",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbAclsAclMatch:getLbAclsAclMatch": {
            "properties": {
                "httpFilter": {
                    "type": "string",
                    "description": "The matched HTTP filter.\n"
                },
                "httpFilterOption": {
                    "type": "string"
                },
                "httpFilterValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The possible values matched for a given HTTP filter.\n"
                },
                "invert": {
                    "type": "boolean",
                    "description": "The condition will be of type \"unless\" if invert is set to `true`\n"
                },
                "ipSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of matched IPs or CIDR v4/v6 addresses of the client of the session.\n"
                }
            },
            "type": "object",
            "required": [
                "httpFilter",
                "httpFilterOption",
                "httpFilterValues",
                "invert",
                "ipSubnets"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbBackendHealthCheckHttp:getLbBackendHealthCheckHttp": {
            "properties": {
                "code": {
                    "type": "integer"
                },
                "hostHeader": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "sni": {
                    "type": "string"
                },
                "uri": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "code",
                "hostHeader",
                "method",
                "sni",
                "uri"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbBackendHealthCheckTcp:getLbBackendHealthCheckTcp": {
            "type": "object"
        },
        "scaleway:index/getLbBackendsBackend:getLbBackendsBackend": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date at which the backend was created (RFC 3339 format).\n"
                },
                "failoverHost": {
                    "type": "string",
                    "description": "Scaleway S3 bucket website to be served in case all backend servers are down.\n"
                },
                "forwardPort": {
                    "type": "integer",
                    "description": "User sessions will be forwarded to this port of backend servers.\n"
                },
                "forwardPortAlgorithm": {
                    "type": "string",
                    "description": "Load balancing algorithm.\n"
                },
                "forwardProtocol": {
                    "type": "string",
                    "description": "Backend protocol.\n"
                },
                "healthCheckDelay": {
                    "type": "string",
                    "description": "Interval between two HC requests.\n"
                },
                "healthCheckHttp": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbBackendsBackendHealthCheckHttp:getLbBackendsBackendHealthCheckHttp"
                    },
                    "description": "This block enable HTTP health check.\n"
                },
                "healthCheckHttps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbBackendsBackendHealthCheckHttp:getLbBackendsBackendHealthCheckHttp"
                    },
                    "description": "This block enable HTTPS health check.\n"
                },
                "healthCheckMaxRetries": {
                    "type": "integer",
                    "description": "Number of allowed failed HC requests before the backend server is marked down.\n"
                },
                "healthCheckPort": {
                    "type": "integer",
                    "description": "Port the HC requests will be sent to.\n"
                },
                "healthCheckTcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbBackendsBackendHealthCheckTcp:getLbBackendsBackendHealthCheckTcp"
                    },
                    "description": "This block enable TCP health check.\n"
                },
                "healthCheckTimeout": {
                    "type": "string",
                    "description": "Timeout before we consider a HC request failed.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The associated backend ID.\n"
                },
                "ignoreSslServerVerify": {
                    "type": "boolean",
                    "description": "Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this backend is attached to. backends with a LB ID like it are listed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The backend name used as filter. Backends with a name like it are listed.\n"
                },
                "onMarkedDownAction": {
                    "type": "string",
                    "description": "Modify what occurs when a backend server is marked down.\n"
                },
                "proxyProtocol": {
                    "type": "string",
                    "description": "The type of PROXY protocol.\n"
                },
                "serverIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of backend server IP addresses.\n"
                },
                "sslBridging": {
                    "type": "boolean",
                    "description": "Enables SSL between load balancer and backend servers.\n"
                },
                "stickySessions": {
                    "type": "string",
                    "description": "Enables cookie-based session persistence.\n"
                },
                "stickySessionsCookieName": {
                    "type": "string",
                    "description": "Cookie name for sticky sessions.\n"
                },
                "timeoutConnect": {
                    "type": "string",
                    "description": "Maximum initial server connection establishment time.\n"
                },
                "timeoutServer": {
                    "type": "string",
                    "description": "Maximum server connection inactivity time.\n"
                },
                "timeoutTunnel": {
                    "type": "string",
                    "description": "Maximum tunnel inactivity time.\n"
                },
                "updateAt": {
                    "type": "string",
                    "description": "The date at which the backend was last updated (RFC 3339 format).\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "failoverHost",
                "forwardPort",
                "forwardPortAlgorithm",
                "forwardProtocol",
                "healthCheckDelay",
                "healthCheckHttp",
                "healthCheckHttps",
                "healthCheckMaxRetries",
                "healthCheckPort",
                "healthCheckTcps",
                "healthCheckTimeout",
                "id",
                "ignoreSslServerVerify",
                "lbId",
                "name",
                "onMarkedDownAction",
                "proxyProtocol",
                "serverIps",
                "sslBridging",
                "stickySessions",
                "stickySessionsCookieName",
                "timeoutConnect",
                "timeoutServer",
                "timeoutTunnel",
                "updateAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbBackendsBackendHealthCheckHttp:getLbBackendsBackendHealthCheckHttp": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The expected HTTP status code.\n"
                },
                "hostHeader": {
                    "type": "string",
                    "description": "The HTTP host header to use for HC requests.\n"
                },
                "method": {
                    "type": "string",
                    "description": "The HTTP method to use for HC requests.\n"
                },
                "sni": {
                    "type": "string",
                    "description": "The SNI to use for HC requests over SSL.\n"
                },
                "uri": {
                    "type": "string",
                    "description": "The HTTPS endpoint URL to call for HC requests.\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "hostHeader",
                "method",
                "sni",
                "uri"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbBackendsBackendHealthCheckTcp:getLbBackendsBackendHealthCheckTcp": {
            "type": "object"
        },
        "scaleway:index/getLbCertificateCustomCertificate:getLbCertificateCustomCertificate": {
            "properties": {
                "certificateChain": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "certificateChain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbCertificateLetsencrypt:getLbCertificateLetsencrypt": {
            "properties": {
                "commonName": {
                    "type": "string"
                },
                "subjectAlternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commonName",
                "subjectAlternativeNames"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbFrontendAcl:getLbFrontendAcl": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbFrontendAclAction:getLbFrontendAclAction"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbFrontendAclMatch:getLbFrontendAclMatch"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the frontend.\n- When using the `name` you should specify the `lb-id`\n"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "actions",
                "createdAt",
                "description",
                "matches",
                "name",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbFrontendAclAction:getLbFrontendAclAction": {
            "properties": {
                "redirects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbFrontendAclActionRedirect:getLbFrontendAclActionRedirect"
                    }
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "redirects",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbFrontendAclActionRedirect:getLbFrontendAclActionRedirect": {
            "properties": {
                "code": {
                    "type": "integer"
                },
                "target": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "code",
                "target",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbFrontendAclMatch:getLbFrontendAclMatch": {
            "properties": {
                "httpFilter": {
                    "type": "string"
                },
                "httpFilterOption": {
                    "type": "string"
                },
                "httpFilterValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "invert": {
                    "type": "boolean"
                },
                "ipSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "httpFilter",
                "httpFilterOption",
                "httpFilterValues",
                "invert",
                "ipSubnets"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbFrontendsFrontend:getLbFrontendsFrontend": {
            "properties": {
                "backendId": {
                    "type": "string",
                    "description": "The load-balancer backend ID this frontend is attached to.\n\u003e **Important:** LB backends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`\n"
                },
                "certificateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Certificate IDs that are used by the frontend.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date at which the frontend was created (RFC 3339 format).\n"
                },
                "enableHttp3": {
                    "type": "boolean",
                    "description": "If HTTP/3 protocol is activated.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The associated frontend ID.\n\u003e **Important:** LB frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`\n"
                },
                "inboundPort": {
                    "type": "integer",
                    "description": "TCP port the frontend listen to.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this frontend is attached to. frontends with a LB ID like it are listed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The frontend name used as filter. Frontends with a name like it are listed.\n"
                },
                "timeoutClient": {
                    "type": "string",
                    "description": "Maximum inactivity time on the client side.\n"
                },
                "updateAt": {
                    "type": "string",
                    "description": "The date at which the frontend was last updated (RFC 3339 format).\n"
                }
            },
            "type": "object",
            "required": [
                "backendId",
                "certificateIds",
                "createdAt",
                "enableHttp3",
                "id",
                "inboundPort",
                "lbId",
                "name",
                "timeoutClient",
                "updateAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbIpsIp:getLbIpsIp": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The associated IP ID.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP Address\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The associated load-balancer ID if any\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the load-balancer is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project the load-balancer is associated with.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain associated with this IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which IPs exist.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "ipAddress",
                "lbId",
                "organizationId",
                "projectId",
                "reverse",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbPrivateNetwork:getLbPrivateNetwork": {
            "properties": {
                "dhcpConfig": {
                    "type": "boolean"
                },
                "privateNetworkId": {
                    "type": "string"
                },
                "staticConfigs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "zone": {
                    "type": "string",
                    "description": "(Defaults to provider `zone`) The zone in which the LB exists.\n"
                }
            },
            "type": "object",
            "required": [
                "dhcpConfig",
                "privateNetworkId",
                "staticConfigs",
                "status",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbRoutesRoute:getLbRoutesRoute": {
            "properties": {
                "backendId": {
                    "type": "string",
                    "description": "The backend ID destination of redirection\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date at which the route was created (RFC 3339 format).\n"
                },
                "frontendId": {
                    "type": "string",
                    "description": "The frontend ID origin of redirection used as a filter. routes with a frontend ID like it are listed.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The associated route ID.\n"
                },
                "matchHostHeader": {
                    "type": "string",
                    "description": "Specifies the host of the server to which the request is being sent.\n"
                },
                "matchSni": {
                    "type": "string",
                    "description": "Server Name Indication TLS extension field from an incoming connection made via an SSL/TLS transport layer.\n"
                },
                "updateAt": {
                    "type": "string",
                    "description": "The date at which the route was last updated (RFC 3339 format).\n"
                }
            },
            "type": "object",
            "required": [
                "backendId",
                "createdAt",
                "frontendId",
                "id",
                "matchHostHeader",
                "matchSni",
                "updateAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbsLb:getLbsLb": {
            "properties": {
                "backendCount": {
                    "type": "integer",
                    "description": "Number of backends the Load balancer has.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date at which the Load balancer was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the load-balancer.\n"
                },
                "frontendCount": {
                    "type": "integer",
                    "description": "Number of frontends the Load balancer has.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the load-balancer.\n"
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbsLbInstance:getLbsLbInstance"
                    },
                    "description": "List of underlying instances.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbsLbIp:getLbsLbIp"
                    },
                    "description": "List of IPs attached to the Load balancer.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The load balancer name used as a filter. LBs with a name like it are listed.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the load-balancer is associated with.\n"
                },
                "privateNetworkCount": {
                    "type": "integer",
                    "description": "Number of private networks attached to the Load balancer.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project the load-balancer is associated with.\n"
                },
                "routeCount": {
                    "type": "integer",
                    "description": "Number of routes the Load balancer has.\n"
                },
                "sslCompatibilityLevel": {
                    "type": "string",
                    "description": "Determines the minimal SSL version which needs to be supported on client side.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The state of the LB's instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.\n"
                },
                "subscriber": {
                    "type": "string",
                    "description": "The subscriber information.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the load-balancer.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The offer type of the load-balancer.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date at which the Load balancer was updated.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which LBs exist.\n"
                }
            },
            "type": "object",
            "required": [
                "backendCount",
                "createdAt",
                "description",
                "frontendCount",
                "id",
                "instances",
                "ips",
                "name",
                "organizationId",
                "privateNetworkCount",
                "projectId",
                "routeCount",
                "sslCompatibilityLevel",
                "status",
                "subscriber",
                "tags",
                "type",
                "updatedAt",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbsLbInstance:getLbsLbInstance": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date at which the Load balancer was created.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the load-balancer.\n"
                },
                "ipAddress": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "The state of the LB's instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date at which the Load balancer was updated.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which LBs exist.\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "id",
                "ipAddress",
                "status",
                "updatedAt",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbsLbIp:getLbsLbIp": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the load-balancer.\n"
                },
                "ipAddress": {
                    "type": "string"
                },
                "lbId": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the load-balancer is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project the load-balancer is associated with.\n"
                },
                "reverse": {
                    "type": "string"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which LBs exist.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "ipAddress",
                "lbId",
                "organizationId",
                "projectId",
                "reverse",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getObjectBucketCorsRule:getObjectBucketCorsRule": {
            "properties": {
                "allowedHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowedMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowedOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "exposeHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maxAgeSeconds": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "allowedHeaders",
                "allowedMethods",
                "allowedOrigins",
                "exposeHeaders",
                "maxAgeSeconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getObjectBucketLifecycleRule:getObjectBucketLifecycleRule": {
            "properties": {
                "abortIncompleteMultipartUploadDays": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "expirations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getObjectBucketLifecycleRuleExpiration:getObjectBucketLifecycleRuleExpiration"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique name of the bucket.\n"
                },
                "prefix": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "transitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getObjectBucketLifecycleRuleTransition:getObjectBucketLifecycleRuleTransition"
                    }
                }
            },
            "type": "object",
            "required": [
                "abortIncompleteMultipartUploadDays",
                "enabled",
                "expirations",
                "id",
                "prefix",
                "tags",
                "transitions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getObjectBucketLifecycleRuleExpiration:getObjectBucketLifecycleRuleExpiration": {
            "properties": {
                "days": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "days"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getObjectBucketLifecycleRuleTransition:getObjectBucketLifecycleRuleTransition": {
            "properties": {
                "days": {
                    "type": "integer"
                },
                "storageClass": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "days",
                "storageClass"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getObjectBucketVersioning:getObjectBucketVersioning": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getRdbAclAclRule:getRdbAclAclRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A simple text describing this rule\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getRdbInstanceLoadBalancer:getRdbInstanceLoadBalancer": {
            "properties": {
                "endpointId": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the RDB instance.\nOnly one of `name` and `instance_id` should be specified.\n"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "endpointId",
                "hostname",
                "ip",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getRdbInstancePrivateNetwork:getRdbInstancePrivateNetwork": {
            "properties": {
                "endpointId": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "ipNet": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the RDB instance.\nOnly one of `name` and `instance_id` should be specified.\n"
                },
                "pnId": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "zone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "endpointId",
                "hostname",
                "ip",
                "ipNet",
                "name",
                "pnId",
                "port",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getRdbInstanceReadReplica:getRdbInstanceReadReplica": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the RDB instance.\nOnly one of `name` and `instance_id` should be specified.\n"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getRedisClusterAcl:getRedisClusterAcl": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Redis cluster.\n"
                },
                "ip": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getRedisClusterPrivateNetwork:getRedisClusterPrivateNetwork": {
            "properties": {
                "endpointId": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Redis cluster.\n"
                },
                "serviceIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "`region`) The zone in which the server exists.\n"
                }
            },
            "type": "object",
            "required": [
                "endpointId",
                "id",
                "serviceIps",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getRedisClusterPublicNetwork:getRedisClusterPublicNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Redis cluster.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "id",
                "ips",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getTemDomainReputation:getTemDomainReputation": {
            "properties": {
                "previousScore": {
                    "type": "integer"
                },
                "previousScoredAt": {
                    "type": "string"
                },
                "score": {
                    "type": "integer"
                },
                "scoredAt": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "previousScore",
                "previousScoredAt",
                "score",
                "scoredAt",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getVpcGatewayNetworkIpamConfig:getVpcGatewayNetworkIpamConfig": {
            "properties": {
                "pushDefaultRoute": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "pushDefaultRoute"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getVpcPrivateNetworkIpv4Subnet:getVpcPrivateNetworkIpv4Subnet": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the private network.\n"
                },
                "prefixLength": {
                    "type": "integer"
                },
                "subnet": {
                    "type": "string"
                },
                "subnetMask": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "address",
                "createdAt",
                "id",
                "prefixLength",
                "subnet",
                "subnetMask",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getVpcPrivateNetworkIpv6Subnet:getVpcPrivateNetworkIpv6Subnet": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the private network.\n"
                },
                "prefixLength": {
                    "type": "integer"
                },
                "subnet": {
                    "type": "string"
                },
                "subnetMask": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "address",
                "createdAt",
                "id",
                "prefixLength",
                "subnet",
                "subnetMask",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getVpcsVpc:getVpcsVpc": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date and time of VPC's creation (RFC 3339 format).\n"
                },
                "id": {
                    "type": "string",
                    "description": "The associated VPC ID.\n\u003e **Important:** VPCs' IDs are regional, which means they are of the form `{region}/{id}`, e.g. `fr-par/11111111-1111-1111-1111-111111111111\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Defines whether the VPC is the default one for its Project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The VPC name used as filter. VPCs with a name like it are listed.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the VPC is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project the VPC is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which vpcs exist.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tags used as filter. VPCs with these exact tags are listed.\n"
                },
                "updateAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "id",
                "isDefault",
                "name",
                "organizationId",
                "projectId",
                "region",
                "tags",
                "updateAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getWebHostOfferProduct:getWebHostOfferProduct": {
            "properties": {
                "databasesQuota": {
                    "type": "integer",
                    "description": "The quota of databases.\n"
                },
                "emailAccountsQuota": {
                    "type": "integer",
                    "description": "The quota of email accounts.\n"
                },
                "emailStorageQuota": {
                    "type": "integer",
                    "description": "The quota of email storage.\n"
                },
                "hostingStorageQuota": {
                    "type": "integer",
                    "description": "The quota of hosting storage.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The offer name. Only one of `name` and `offer_id` should be specified.\n"
                },
                "option": {
                    "type": "boolean",
                    "description": "The product option.\n"
                },
                "ram": {
                    "type": "integer",
                    "description": "The capacity of the memory in GB.\n"
                },
                "supportIncluded": {
                    "type": "boolean",
                    "description": "If support is included.\n"
                },
                "vCpu": {
                    "type": "integer",
                    "description": "The number of cores.\n"
                }
            },
            "type": "object",
            "required": [
                "databasesQuota",
                "emailAccountsQuota",
                "emailStorageQuota",
                "hostingStorageQuota",
                "name",
                "option",
                "ram",
                "supportIncluded",
                "vCpu"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getWebhostingCpanelUrl:getWebhostingCpanelUrl": {
            "properties": {
                "dashboard": {
                    "type": "string"
                },
                "webmail": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dashboard",
                "webmail"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getWebhostingOption:getWebhostingOption": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the scaleway package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accessKey": {
                "type": "string",
                "description": "The Scaleway access key.\n",
                "secret": true
            },
            "apiUrl": {
                "type": "string",
                "description": "The Scaleway API URL to use.\n"
            },
            "organizationId": {
                "type": "string",
                "description": "The Scaleway organization ID.\n"
            },
            "profile": {
                "type": "string",
                "description": "The Scaleway profile to use.\n"
            },
            "projectId": {
                "type": "string",
                "description": "The Scaleway project ID.\n"
            },
            "region": {
                "type": "string",
                "description": "The region you want to attach the resource to\n",
                "willReplaceOnChanges": true
            },
            "secretKey": {
                "type": "string",
                "description": "The Scaleway secret Key.\n",
                "secret": true
            },
            "zone": {
                "type": "string",
                "description": "The zone you want to attach the resource to\n",
                "willReplaceOnChanges": true
            }
        },
        "inputProperties": {
            "accessKey": {
                "type": "string",
                "description": "The Scaleway access key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_ACCESS_KEY"
                    ]
                },
                "secret": true
            },
            "apiUrl": {
                "type": "string",
                "description": "The Scaleway API URL to use.\n"
            },
            "organizationId": {
                "type": "string",
                "description": "The Scaleway organization ID.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_ORGANIZATION_ID"
                    ]
                }
            },
            "profile": {
                "type": "string",
                "description": "The Scaleway profile to use.\n"
            },
            "projectId": {
                "type": "string",
                "description": "The Scaleway project ID.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_PROJECT_ID"
                    ]
                }
            },
            "region": {
                "type": "string",
                "description": "The region you want to attach the resource to\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_REGION"
                    ]
                },
                "willReplaceOnChanges": true
            },
            "secretKey": {
                "type": "string",
                "description": "The Scaleway secret Key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_SECRET_KEY"
                    ]
                },
                "secret": true
            },
            "zone": {
                "type": "string",
                "description": "The zone you want to attach the resource to\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_ZONE"
                    ]
                },
                "willReplaceOnChanges": true
            }
        }
    },
    "resources": {
        "scaleway:index/accountProject:AccountProject": {
            "description": "Manages organization's projects on Scaleway.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst project = new scaleway.AccountProject(\"project\", {});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nproject = scaleway.AccountProject(\"project\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var project = new Scaleway.AccountProject(\"project\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewAccountProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.AccountProject;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var project = new AccountProject(\"project\");\n\n    }\n}\n```\n```yaml\nresources:\n  project:\n    type: scaleway:AccountProject\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nProjects can be imported using the `id`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/accountProject:AccountProject project 11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The Project creation time.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Project.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "`organization_id`)The organization ID the Project is associated with. Please note that any change in `organization_id` will recreate the resource.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The Project last update time.\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "organizationId",
                "updatedAt"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Project.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "`organization_id`)The organization ID the Project is associated with. Please note that any change in `organization_id` will recreate the resource.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountProject resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The Project creation time.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Project.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Project.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "`organization_id`)The organization ID the Project is associated with. Please note that any change in `organization_id` will recreate the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The Project last update time.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/accountSshKey:AccountSshKey": {
            "description": "Manages user SSH keys to access servers provisioned on Scaleway.\n\n\u003e **Important:**  The resource `scaleway.AccountSshKey` has been deprecated and will no longer be supported. Instead, use `scaleway.IamSshKey`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.AccountSshKey(\"main\", {publicKey: \"\u003cYOUR-PUBLIC-SSH-KEY\u003e\"});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.AccountSshKey(\"main\", public_key=\"\u003cYOUR-PUBLIC-SSH-KEY\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.AccountSshKey(\"main\", new()\n    {\n        PublicKey = \"\u003cYOUR-PUBLIC-SSH-KEY\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewAccountSshKey(ctx, \"main\", \u0026scaleway.AccountSshKeyArgs{\n\t\t\tPublicKey: pulumi.String(\"\u003cYOUR-PUBLIC-SSH-KEY\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.AccountSshKey;\nimport com.pulumi.scaleway.AccountSshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new AccountSshKey(\"main\", AccountSshKeyArgs.builder()        \n            .publicKey(\"\u003cYOUR-PUBLIC-SSH-KEY\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:AccountSshKey\n    properties:\n      publicKey: \u003cYOUR-PUBLIC-SSH-KEY\u003e\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSSH keys can be imported using the `id`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/accountSshKey:AccountSshKey main 11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the iam SSH Key\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "The SSH key status\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the iam SSH key\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the SSH key is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the SSH key is associated with.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public SSH key to be added.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the iam SSH Key\n"
                }
            },
            "required": [
                "createdAt",
                "fingerprint",
                "name",
                "organizationId",
                "projectId",
                "publicKey",
                "updatedAt"
            ],
            "inputProperties": {
                "disabled": {
                    "type": "boolean",
                    "description": "The SSH key status\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the SSH key is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public SSH key to be added.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountSshKey resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the iam SSH Key\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "The SSH key status\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the iam SSH key\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the SSH key is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the SSH key is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public SSH key to be added.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the iam SSH Key\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/appleSiliconServer:AppleSiliconServer": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the server\n"
                },
                "deletableAt": {
                    "type": "string",
                    "description": "The minimal date and time on which you can delete this server due to Apple licence\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address of the server\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the server\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the server\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the server\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the server\n"
                },
                "vncUrl": {
                    "type": "string",
                    "description": "VNC url use to connect remotely to the desktop GUI\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "required": [
                "createdAt",
                "deletableAt",
                "ip",
                "name",
                "organizationId",
                "projectId",
                "state",
                "type",
                "updatedAt",
                "vncUrl",
                "zone"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the server\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of the server\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppleSiliconServer resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the server\n"
                    },
                    "deletableAt": {
                        "type": "string",
                        "description": "The minimal date and time on which you can delete this server due to Apple licence\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "IPv4 address of the server\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the server\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project_id you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the server\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the server\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the server\n"
                    },
                    "vncUrl": {
                        "type": "string",
                        "description": "VNC url use to connect remotely to the desktop GUI\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/baremetalServer:BaremetalServer": {
            "description": "Creates and manages Scaleway Compute Baremetal servers. For more information, see [the documentation](https://developers.scaleway.com/en/products/baremetal/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = scaleway.getAccountSshKey({\n    name: \"main\",\n});\nconst base = new scaleway.BaremetalServer(\"base\", {\n    zone: \"fr-par-2\",\n    offer: \"GP-BM1-S\",\n    os: \"d17d6872-0412-45d9-a198-af82c34d3c5c\",\n    sshKeyIds: [main.then(main =\u003e main.id)],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.get_account_ssh_key(name=\"main\")\nbase = scaleway.BaremetalServer(\"base\",\n    zone=\"fr-par-2\",\n    offer=\"GP-BM1-S\",\n    os=\"d17d6872-0412-45d9-a198-af82c34d3c5c\",\n    ssh_key_ids=[main.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Scaleway.GetAccountSshKey.Invoke(new()\n    {\n        Name = \"main\",\n    });\n\n    var @base = new Scaleway.BaremetalServer(\"base\", new()\n    {\n        Zone = \"fr-par-2\",\n        Offer = \"GP-BM1-S\",\n        Os = \"d17d6872-0412-45d9-a198-af82c34d3c5c\",\n        SshKeyIds = new[]\n        {\n            main.Apply(getAccountSshKeyResult =\u003e getAccountSshKeyResult.Id),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.LookupAccountSshKey(ctx, \u0026scaleway.LookupAccountSshKeyArgs{\n\t\t\tName: pulumi.StringRef(\"main\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewBaremetalServer(ctx, \"base\", \u0026scaleway.BaremetalServerArgs{\n\t\t\tZone:  pulumi.String(\"fr-par-2\"),\n\t\t\tOffer: pulumi.String(\"GP-BM1-S\"),\n\t\t\tOs:    pulumi.String(\"d17d6872-0412-45d9-a198-af82c34d3c5c\"),\n\t\t\tSshKeyIds: pulumi.StringArray{\n\t\t\t\t*pulumi.String(main.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetAccountSshKeyArgs;\nimport com.pulumi.scaleway.BaremetalServer;\nimport com.pulumi.scaleway.BaremetalServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = ScalewayFunctions.getAccountSshKey(GetAccountSshKeyArgs.builder()\n            .name(\"main\")\n            .build());\n\n        var base = new BaremetalServer(\"base\", BaremetalServerArgs.builder()        \n            .zone(\"fr-par-2\")\n            .offer(\"GP-BM1-S\")\n            .os(\"d17d6872-0412-45d9-a198-af82c34d3c5c\")\n            .sshKeyIds(main.applyValue(getAccountSshKeyResult -\u003e getAccountSshKeyResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  base:\n    type: scaleway:BaremetalServer\n    properties:\n      zone: fr-par-2\n      offer: GP-BM1-S\n      os: d17d6872-0412-45d9-a198-af82c34d3c5c\n      sshKeyIds:\n        - ${main.id}\nvariables:\n  main:\n    fn::invoke:\n      Function: scaleway:getAccountSshKey\n      Arguments:\n        name: main\n```\n\n### Without install config\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myOffer = scaleway.getBaremetalOffer({\n    zone: \"fr-par-2\",\n    name: \"EM-B112X-SSD\",\n});\nconst base = new scaleway.BaremetalServer(\"base\", {\n    zone: \"fr-par-2\",\n    offer: myOffer.then(myOffer =\u003e myOffer.offerId),\n    installConfigAfterward: true,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmy_offer = scaleway.get_baremetal_offer(zone=\"fr-par-2\",\n    name=\"EM-B112X-SSD\")\nbase = scaleway.BaremetalServer(\"base\",\n    zone=\"fr-par-2\",\n    offer=my_offer.offer_id,\n    install_config_afterward=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myOffer = Scaleway.GetBaremetalOffer.Invoke(new()\n    {\n        Zone = \"fr-par-2\",\n        Name = \"EM-B112X-SSD\",\n    });\n\n    var @base = new Scaleway.BaremetalServer(\"base\", new()\n    {\n        Zone = \"fr-par-2\",\n        Offer = myOffer.Apply(getBaremetalOfferResult =\u003e getBaremetalOfferResult.OfferId),\n        InstallConfigAfterward = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyOffer, err := scaleway.GetBaremetalOffer(ctx, \u0026scaleway.GetBaremetalOfferArgs{\n\t\t\tZone: pulumi.StringRef(\"fr-par-2\"),\n\t\t\tName: pulumi.StringRef(\"EM-B112X-SSD\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewBaremetalServer(ctx, \"base\", \u0026scaleway.BaremetalServerArgs{\n\t\t\tZone:                   pulumi.String(\"fr-par-2\"),\n\t\t\tOffer:                  *pulumi.String(myOffer.OfferId),\n\t\t\tInstallConfigAfterward: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBaremetalOfferArgs;\nimport com.pulumi.scaleway.BaremetalServer;\nimport com.pulumi.scaleway.BaremetalServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myOffer = ScalewayFunctions.getBaremetalOffer(GetBaremetalOfferArgs.builder()\n            .zone(\"fr-par-2\")\n            .name(\"EM-B112X-SSD\")\n            .build());\n\n        var base = new BaremetalServer(\"base\", BaremetalServerArgs.builder()        \n            .zone(\"fr-par-2\")\n            .offer(myOffer.applyValue(getBaremetalOfferResult -\u003e getBaremetalOfferResult.offerId()))\n            .installConfigAfterward(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  base:\n    type: scaleway:BaremetalServer\n    properties:\n      zone: fr-par-2\n      offer: ${myOffer.offerId}\n      installConfigAfterward: true\nvariables:\n  myOffer:\n    fn::invoke:\n      Function: scaleway:getBaremetalOffer\n      Arguments:\n        zone: fr-par-2\n        name: EM-B112X-SSD\n```\n\n\n## Import\n\nBaremetal servers can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/baremetalServer:BaremetalServer web fr-par-2/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description for the server.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the server.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the server.\n"
                },
                "installConfigAfterward": {
                    "type": "boolean",
                    "description": "If True, this boolean allows to create a server without the install config if you want to provide it later.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/BaremetalServerIp:BaremetalServerIp"
                    },
                    "description": "(List of) The IPs of the server.\n"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/BaremetalServerIpv4:BaremetalServerIpv4"
                    },
                    "description": "(List of) The IPv4 addresses of the server.\n"
                },
                "ipv6s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/BaremetalServerIpv6:BaremetalServerIpv6"
                    },
                    "description": "(List of) The IPv6 addresses of the server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "offer": {
                    "type": "string",
                    "description": "The offer name or UUID of the baremetal server.\nUse [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.\n\n\u003e **Important:** Updates to `offer` will recreate the server.\n"
                },
                "offerId": {
                    "type": "string",
                    "description": "The ID of the offer.\n"
                },
                "offerName": {
                    "type": "string",
                    "description": "The name of the offer.\n"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/BaremetalServerOption:BaremetalServerOption"
                    },
                    "description": "The options to enable on the server.\n\u003e The `options` block supports:\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the server is associated with.\n"
                },
                "os": {
                    "type": "string",
                    "description": "The UUID of the os to install on the server.\nUse [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.\n\u003e **Important:** Updates to `os` will reinstall the server.\n"
                },
                "osName": {
                    "type": "string",
                    "description": "The name of the os.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used for the installation. May be required depending on used os.\n",
                    "secret": true
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/BaremetalServerPrivateNetwork:BaremetalServerPrivateNetwork"
                    },
                    "description": "The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is associated with.\n"
                },
                "reinstallOnConfigChanges": {
                    "type": "boolean",
                    "description": "If True, this boolean allows to reinstall the server on install config changes.\n\u003e **Important:** Updates to `ssh_key_ids`, `user`, `password`, `service_user` or `service_password` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.\n"
                },
                "servicePassword": {
                    "type": "string",
                    "description": "Password used for the service to install. May be required depending on used os.\n",
                    "secret": true
                },
                "serviceUser": {
                    "type": "string",
                    "description": "User used for the service to install.\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SSH keys allowed to connect to the server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User used for the installation.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n"
                }
            },
            "required": [
                "domain",
                "ips",
                "ipv4s",
                "ipv6s",
                "name",
                "offer",
                "offerId",
                "offerName",
                "organizationId",
                "osName",
                "projectId",
                "serviceUser",
                "tags",
                "user",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description for the server.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the server.\n"
                },
                "installConfigAfterward": {
                    "type": "boolean",
                    "description": "If True, this boolean allows to create a server without the install config if you want to provide it later.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "offer": {
                    "type": "string",
                    "description": "The offer name or UUID of the baremetal server.\nUse [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.\n\n\u003e **Important:** Updates to `offer` will recreate the server.\n",
                    "willReplaceOnChanges": true
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/BaremetalServerOption:BaremetalServerOption"
                    },
                    "description": "The options to enable on the server.\n\u003e The `options` block supports:\n"
                },
                "os": {
                    "type": "string",
                    "description": "The UUID of the os to install on the server.\nUse [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.\n\u003e **Important:** Updates to `os` will reinstall the server.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used for the installation. May be required depending on used os.\n",
                    "secret": true
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/BaremetalServerPrivateNetwork:BaremetalServerPrivateNetwork"
                    },
                    "description": "The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "reinstallOnConfigChanges": {
                    "type": "boolean",
                    "description": "If True, this boolean allows to reinstall the server on install config changes.\n\u003e **Important:** Updates to `ssh_key_ids`, `user`, `password`, `service_user` or `service_password` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.\n"
                },
                "servicePassword": {
                    "type": "string",
                    "description": "Password used for the service to install. May be required depending on used os.\n",
                    "secret": true
                },
                "serviceUser": {
                    "type": "string",
                    "description": "User used for the service to install.\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SSH keys allowed to connect to the server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User used for the installation.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "offer"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BaremetalServer resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description for the server.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain of the server.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the server.\n"
                    },
                    "installConfigAfterward": {
                        "type": "boolean",
                        "description": "If True, this boolean allows to create a server without the install config if you want to provide it later.\n"
                    },
                    "ips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/BaremetalServerIp:BaremetalServerIp"
                        },
                        "description": "(List of) The IPs of the server.\n"
                    },
                    "ipv4s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/BaremetalServerIpv4:BaremetalServerIpv4"
                        },
                        "description": "(List of) The IPv4 addresses of the server.\n"
                    },
                    "ipv6s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/BaremetalServerIpv6:BaremetalServerIpv6"
                        },
                        "description": "(List of) The IPv6 addresses of the server.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server.\n"
                    },
                    "offer": {
                        "type": "string",
                        "description": "The offer name or UUID of the baremetal server.\nUse [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.\n\n\u003e **Important:** Updates to `offer` will recreate the server.\n",
                        "willReplaceOnChanges": true
                    },
                    "offerId": {
                        "type": "string",
                        "description": "The ID of the offer.\n"
                    },
                    "offerName": {
                        "type": "string",
                        "description": "The name of the offer.\n"
                    },
                    "options": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/BaremetalServerOption:BaremetalServerOption"
                        },
                        "description": "The options to enable on the server.\n\u003e The `options` block supports:\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the server is associated with.\n"
                    },
                    "os": {
                        "type": "string",
                        "description": "The UUID of the os to install on the server.\nUse [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.\n\u003e **Important:** Updates to `os` will reinstall the server.\n"
                    },
                    "osName": {
                        "type": "string",
                        "description": "The name of the os.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password used for the installation. May be required depending on used os.\n",
                        "secret": true
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/BaremetalServerPrivateNetwork:BaremetalServerPrivateNetwork"
                        },
                        "description": "The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the server is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "reinstallOnConfigChanges": {
                        "type": "boolean",
                        "description": "If True, this boolean allows to reinstall the server on install config changes.\n\u003e **Important:** Updates to `ssh_key_ids`, `user`, `password`, `service_user` or `service_password` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.\n"
                    },
                    "servicePassword": {
                        "type": "string",
                        "description": "Password used for the service to install. May be required depending on used os.\n",
                        "secret": true
                    },
                    "serviceUser": {
                        "type": "string",
                        "description": "User used for the service to install.\n"
                    },
                    "sshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of SSH keys allowed to connect to the server.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the server.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "User used for the installation.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/cockpit:Cockpit": {
            "description": "\n\n\n## Import\n\nCockpits can be imported using the `{project_id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/cockpit:Cockpit main 11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/CockpitEndpoint:CockpitEndpoint"
                    },
                    "description": "Endpoints.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "Name or ID of the plan to use.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "The ID of the current plan.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the cockpit is associated with.\n"
                }
            },
            "required": [
                "endpoints",
                "planId",
                "projectId"
            ],
            "inputProperties": {
                "plan": {
                    "type": "string",
                    "description": "Name or ID of the plan to use.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the cockpit is associated with.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cockpit resources.\n",
                "properties": {
                    "endpoints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/CockpitEndpoint:CockpitEndpoint"
                        },
                        "description": "Endpoints.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "Name or ID of the plan to use.\n"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The ID of the current plan.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the cockpit is associated with.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/cockpitGrafanaUser:CockpitGrafanaUser": {
            "description": "Creates and manages Scaleway Cockpit Grafana Users.\n\nFor more information consult the [documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#grafana-users).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst mainCockpit = scaleway.getCockpit({});\n// Create an editor grafana user for the cockpit\nconst mainCockpitGrafanaUser = new scaleway.CockpitGrafanaUser(\"mainCockpitGrafanaUser\", {\n    projectId: mainCockpit.then(mainCockpit =\u003e mainCockpit.projectId),\n    login: \"my-awesome-user\",\n    role: \"editor\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain_cockpit = scaleway.get_cockpit()\n# Create an editor grafana user for the cockpit\nmain_cockpit_grafana_user = scaleway.CockpitGrafanaUser(\"mainCockpitGrafanaUser\",\n    project_id=main_cockpit.project_id,\n    login=\"my-awesome-user\",\n    role=\"editor\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainCockpit = Scaleway.GetCockpit.Invoke();\n\n    // Create an editor grafana user for the cockpit\n    var mainCockpitGrafanaUser = new Scaleway.CockpitGrafanaUser(\"mainCockpitGrafanaUser\", new()\n    {\n        ProjectId = mainCockpit.Apply(getCockpitResult =\u003e getCockpitResult.ProjectId),\n        Login = \"my-awesome-user\",\n        Role = \"editor\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainCockpit, err := scaleway.LookupCockpit(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewCockpitGrafanaUser(ctx, \"mainCockpitGrafanaUser\", \u0026scaleway.CockpitGrafanaUserArgs{\n\t\t\tProjectId: *pulumi.String(mainCockpit.ProjectId),\n\t\t\tLogin:     pulumi.String(\"my-awesome-user\"),\n\t\t\tRole:      pulumi.String(\"editor\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetCockpitArgs;\nimport com.pulumi.scaleway.CockpitGrafanaUser;\nimport com.pulumi.scaleway.CockpitGrafanaUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mainCockpit = ScalewayFunctions.getCockpit();\n\n        var mainCockpitGrafanaUser = new CockpitGrafanaUser(\"mainCockpitGrafanaUser\", CockpitGrafanaUserArgs.builder()        \n            .projectId(mainCockpit.applyValue(getCockpitResult -\u003e getCockpitResult.projectId()))\n            .login(\"my-awesome-user\")\n            .role(\"editor\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create an editor grafana user for the cockpit\n  mainCockpitGrafanaUser:\n    type: scaleway:CockpitGrafanaUser\n    properties:\n      projectId: ${mainCockpit.projectId}\n      login: my-awesome-user\n      role: editor\nvariables:\n  mainCockpit:\n    fn::invoke:\n      Function: scaleway:getCockpit\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCockpits Grafana Users can be imported using the project ID and the grafana user ID formatted `{project_id}/{grafana_user_id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/cockpitGrafanaUser:CockpitGrafanaUser main 11111111-1111-1111-1111-111111111111/2\n```\n\n ",
            "properties": {
                "login": {
                    "type": "string",
                    "description": "The login of the grafana user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the grafana user\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the cockpit is associated with.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role of the grafana user. Must be `editor` or `viewer`.\n"
                }
            },
            "required": [
                "login",
                "password",
                "projectId",
                "role"
            ],
            "inputProperties": {
                "login": {
                    "type": "string",
                    "description": "The login of the grafana user.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the cockpit is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string",
                    "description": "The role of the grafana user. Must be `editor` or `viewer`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "login",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CockpitGrafanaUser resources.\n",
                "properties": {
                    "login": {
                        "type": "string",
                        "description": "The login of the grafana user.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the grafana user\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the cockpit is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "role": {
                        "type": "string",
                        "description": "The role of the grafana user. Must be `editor` or `viewer`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/cockpitToken:CockpitToken": {
            "description": "Creates and manages Scaleway Cockpit Tokens.\n\nFor more information consult the [documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#tokens).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst mainCockpit = scaleway.getCockpit({});\n// Create a token for the cockpit that can write metrics and logs\nconst mainCockpitToken = new scaleway.CockpitToken(\"mainCockpitToken\", {projectId: mainCockpit.then(mainCockpit =\u003e mainCockpit.projectId)});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain_cockpit = scaleway.get_cockpit()\n# Create a token for the cockpit that can write metrics and logs\nmain_cockpit_token = scaleway.CockpitToken(\"mainCockpitToken\", project_id=main_cockpit.project_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainCockpit = Scaleway.GetCockpit.Invoke();\n\n    // Create a token for the cockpit that can write metrics and logs\n    var mainCockpitToken = new Scaleway.CockpitToken(\"mainCockpitToken\", new()\n    {\n        ProjectId = mainCockpit.Apply(getCockpitResult =\u003e getCockpitResult.ProjectId),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainCockpit, err := scaleway.LookupCockpit(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewCockpitToken(ctx, \"mainCockpitToken\", \u0026scaleway.CockpitTokenArgs{\n\t\t\tProjectId: *pulumi.String(mainCockpit.ProjectId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetCockpitArgs;\nimport com.pulumi.scaleway.CockpitToken;\nimport com.pulumi.scaleway.CockpitTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mainCockpit = ScalewayFunctions.getCockpit();\n\n        var mainCockpitToken = new CockpitToken(\"mainCockpitToken\", CockpitTokenArgs.builder()        \n            .projectId(mainCockpit.applyValue(getCockpitResult -\u003e getCockpitResult.projectId()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a token for the cockpit that can write metrics and logs\n  mainCockpitToken:\n    type: scaleway:CockpitToken\n    properties:\n      projectId: ${mainCockpit.projectId}\nvariables:\n  mainCockpit:\n    fn::invoke:\n      Function: scaleway:getCockpit\n      Arguments: {}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst mainCockpit = scaleway.getCockpit({});\n// Create a token for the cockpit that can read metrics and logs but not write\nconst mainCockpitToken = new scaleway.CockpitToken(\"mainCockpitToken\", {\n    projectId: mainCockpit.then(mainCockpit =\u003e mainCockpit.projectId),\n    scopes: {\n        queryMetrics: true,\n        writeMetrics: false,\n        queryLogs: true,\n        writeLogs: false,\n    },\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain_cockpit = scaleway.get_cockpit()\n# Create a token for the cockpit that can read metrics and logs but not write\nmain_cockpit_token = scaleway.CockpitToken(\"mainCockpitToken\",\n    project_id=main_cockpit.project_id,\n    scopes=scaleway.CockpitTokenScopesArgs(\n        query_metrics=True,\n        write_metrics=False,\n        query_logs=True,\n        write_logs=False,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainCockpit = Scaleway.GetCockpit.Invoke();\n\n    // Create a token for the cockpit that can read metrics and logs but not write\n    var mainCockpitToken = new Scaleway.CockpitToken(\"mainCockpitToken\", new()\n    {\n        ProjectId = mainCockpit.Apply(getCockpitResult =\u003e getCockpitResult.ProjectId),\n        Scopes = new Scaleway.Inputs.CockpitTokenScopesArgs\n        {\n            QueryMetrics = true,\n            WriteMetrics = false,\n            QueryLogs = true,\n            WriteLogs = false,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainCockpit, err := scaleway.LookupCockpit(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewCockpitToken(ctx, \"mainCockpitToken\", \u0026scaleway.CockpitTokenArgs{\n\t\t\tProjectId: *pulumi.String(mainCockpit.ProjectId),\n\t\t\tScopes: \u0026scaleway.CockpitTokenScopesArgs{\n\t\t\t\tQueryMetrics: pulumi.Bool(true),\n\t\t\t\tWriteMetrics: pulumi.Bool(false),\n\t\t\t\tQueryLogs:    pulumi.Bool(true),\n\t\t\t\tWriteLogs:    pulumi.Bool(false),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetCockpitArgs;\nimport com.pulumi.scaleway.CockpitToken;\nimport com.pulumi.scaleway.CockpitTokenArgs;\nimport com.pulumi.scaleway.inputs.CockpitTokenScopesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mainCockpit = ScalewayFunctions.getCockpit();\n\n        var mainCockpitToken = new CockpitToken(\"mainCockpitToken\", CockpitTokenArgs.builder()        \n            .projectId(mainCockpit.applyValue(getCockpitResult -\u003e getCockpitResult.projectId()))\n            .scopes(CockpitTokenScopesArgs.builder()\n                .queryMetrics(true)\n                .writeMetrics(false)\n                .queryLogs(true)\n                .writeLogs(false)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a token for the cockpit that can read metrics and logs but not write\n  mainCockpitToken:\n    type: scaleway:CockpitToken\n    properties:\n      projectId: ${mainCockpit.projectId}\n      scopes:\n        queryMetrics: true\n        writeMetrics: false\n        queryLogs: true\n        writeLogs: false\nvariables:\n  mainCockpit:\n    fn::invoke:\n      Function: scaleway:getCockpit\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCockpits can be imported using the token ID, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/cockpitToken:CockpitToken main 11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the token.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the cockpit is associated with.\n"
                },
                "scopes": {
                    "$ref": "#/types/scaleway:index/CockpitTokenScopes:CockpitTokenScopes",
                    "description": "Allowed scopes.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key of the token.\n",
                    "secret": true
                }
            },
            "required": [
                "name",
                "projectId",
                "scopes",
                "secretKey"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the token.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the cockpit is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "scopes": {
                    "$ref": "#/types/scaleway:index/CockpitTokenScopes:CockpitTokenScopes",
                    "description": "Allowed scopes.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CockpitToken resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the cockpit is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "scopes": {
                        "$ref": "#/types/scaleway:index/CockpitTokenScopes:CockpitTokenScopes",
                        "description": "Allowed scopes.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The secret key of the token.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/container:Container": {
            "description": "Creates and manages Scaleway Container.\n\nFor more information consult the [documentation](https://www.scaleway.com/en/docs/faq/serverless-containers/).\n\nFor more details about the limitation check [containers-limitations](https://www.scaleway.com/en/docs/compute/containers/reference-content/containers-limitations/).\n\nYou can check also our [containers guide](https://www.scaleway.com/en/docs/compute/containers/concepts/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainContainerNamespace = new scaleway.ContainerNamespace(\"mainContainerNamespace\", {description: \"test container\"});\nconst mainContainer = new scaleway.Container(\"mainContainer\", {\n    description: \"environment variables test\",\n    namespaceId: mainContainerNamespace.id,\n    registryImage: pulumi.interpolate`${mainContainerNamespace.registryEndpoint}/alpine:test`,\n    port: 9997,\n    cpuLimit: 140,\n    memoryLimit: 256,\n    minScale: 3,\n    maxScale: 5,\n    timeout: 600,\n    maxConcurrency: 80,\n    privacy: \"private\",\n    protocol: \"http1\",\n    deploy: true,\n    environmentVariables: {\n        foo: \"var\",\n    },\n    secretEnvironmentVariables: {\n        key: \"secret\",\n    },\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain_container_namespace = scaleway.ContainerNamespace(\"mainContainerNamespace\", description=\"test container\")\nmain_container = scaleway.Container(\"mainContainer\",\n    description=\"environment variables test\",\n    namespace_id=main_container_namespace.id,\n    registry_image=main_container_namespace.registry_endpoint.apply(lambda registry_endpoint: f\"{registry_endpoint}/alpine:test\"),\n    port=9997,\n    cpu_limit=140,\n    memory_limit=256,\n    min_scale=3,\n    max_scale=5,\n    timeout=600,\n    max_concurrency=80,\n    privacy=\"private\",\n    protocol=\"http1\",\n    deploy=True,\n    environment_variables={\n        \"foo\": \"var\",\n    },\n    secret_environment_variables={\n        \"key\": \"secret\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainContainerNamespace = new Scaleway.ContainerNamespace(\"mainContainerNamespace\", new()\n    {\n        Description = \"test container\",\n    });\n\n    var mainContainer = new Scaleway.Container(\"mainContainer\", new()\n    {\n        Description = \"environment variables test\",\n        NamespaceId = mainContainerNamespace.Id,\n        RegistryImage = mainContainerNamespace.RegistryEndpoint.Apply(registryEndpoint =\u003e $\"{registryEndpoint}/alpine:test\"),\n        Port = 9997,\n        CpuLimit = 140,\n        MemoryLimit = 256,\n        MinScale = 3,\n        MaxScale = 5,\n        Timeout = 600,\n        MaxConcurrency = 80,\n        Privacy = \"private\",\n        Protocol = \"http1\",\n        Deploy = true,\n        EnvironmentVariables = \n        {\n            { \"foo\", \"var\" },\n        },\n        SecretEnvironmentVariables = \n        {\n            { \"key\", \"secret\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainContainerNamespace, err := scaleway.NewContainerNamespace(ctx, \"mainContainerNamespace\", \u0026scaleway.ContainerNamespaceArgs{\n\t\t\tDescription: pulumi.String(\"test container\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewContainer(ctx, \"mainContainer\", \u0026scaleway.ContainerArgs{\n\t\t\tDescription: pulumi.String(\"environment variables test\"),\n\t\t\tNamespaceId: mainContainerNamespace.ID(),\n\t\t\tRegistryImage: mainContainerNamespace.RegistryEndpoint.ApplyT(func(registryEndpoint string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"%v/alpine:test\", registryEndpoint), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tPort:           pulumi.Int(9997),\n\t\t\tCpuLimit:       pulumi.Int(140),\n\t\t\tMemoryLimit:    pulumi.Int(256),\n\t\t\tMinScale:       pulumi.Int(3),\n\t\t\tMaxScale:       pulumi.Int(5),\n\t\t\tTimeout:        pulumi.Int(600),\n\t\t\tMaxConcurrency: pulumi.Int(80),\n\t\t\tPrivacy:        pulumi.String(\"private\"),\n\t\t\tProtocol:       pulumi.String(\"http1\"),\n\t\t\tDeploy:         pulumi.Bool(true),\n\t\t\tEnvironmentVariables: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"var\"),\n\t\t\t},\n\t\t\tSecretEnvironmentVariables: pulumi.StringMap{\n\t\t\t\t\"key\": pulumi.String(\"secret\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerNamespace;\nimport com.pulumi.scaleway.ContainerNamespaceArgs;\nimport com.pulumi.scaleway.Container;\nimport com.pulumi.scaleway.ContainerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainContainerNamespace = new ContainerNamespace(\"mainContainerNamespace\", ContainerNamespaceArgs.builder()        \n            .description(\"test container\")\n            .build());\n\n        var mainContainer = new Container(\"mainContainer\", ContainerArgs.builder()        \n            .description(\"environment variables test\")\n            .namespaceId(mainContainerNamespace.id())\n            .registryImage(mainContainerNamespace.registryEndpoint().applyValue(registryEndpoint -\u003e String.format(\"%s/alpine:test\", registryEndpoint)))\n            .port(9997)\n            .cpuLimit(140)\n            .memoryLimit(256)\n            .minScale(3)\n            .maxScale(5)\n            .timeout(600)\n            .maxConcurrency(80)\n            .privacy(\"private\")\n            .protocol(\"http1\")\n            .deploy(true)\n            .environmentVariables(Map.of(\"foo\", \"var\"))\n            .secretEnvironmentVariables(Map.of(\"key\", \"secret\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainContainerNamespace:\n    type: scaleway:ContainerNamespace\n    properties:\n      description: test container\n  mainContainer:\n    type: scaleway:Container\n    properties:\n      description: environment variables test\n      namespaceId: ${mainContainerNamespace.id}\n      registryImage: ${mainContainerNamespace.registryEndpoint}/alpine:test\n      port: 9997\n      cpuLimit: 140\n      memoryLimit: 256\n      minScale: 3\n      maxScale: 5\n      timeout: 600\n      maxConcurrency: 80\n      privacy: private\n      protocol: http1\n      deploy: true\n      environmentVariables:\n        foo: var\n      secretEnvironmentVariables:\n        key: secret\n```\n{{% /example %}}\n{{% /examples %}}\n## Protocols\n\nThe supported protocols are:\n\n* `h2c`: HTTP/2 over TCP.\n* `http1`: Hypertext Transfer Protocol.\n\n**Important:** For details about the protocols check [this](https://httpd.apache.org/docs/2.4/howto/http2.html)\n\n## Privacy\n\nBy default, creating a container will make it `public`, meaning that anybody knowing the endpoint could execute it.\nA container can be made `private` with the privacy parameter.\n\nPlease check our [authentication](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8) section\n\n## Memory and vCPUs configuration\n\nThe vCPU represents a portion or share of the underlying, physical CPU that is assigned to a particular virtual machine (VM).\n\nYou may decide how much computing resources to allocate to each container.\nThe `memory_limit` (in MB) must correspond with the right amount of vCPU.\n\n**Important:** The right choice for your container's resources is very important, as you will be billed based on compute usage over time and the number of Containers executions.\n\nPlease check our [price](https://www.scaleway.com/en/docs/faq/serverless-containers/#prices) section for more details.\n\n| Memory (in MB) | vCPU |\n|----------------|------|\n| 128            | 70m  |\n| 256            | 140m |\n| 512            | 280m |\n| 1024           | 560m |\n\n**Note:** 560mCPU accounts roughly for half of one CPU power of a Scaleway General Purpose instance\n\n\n## Import\n\nContainer can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/container:Container main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "cpuLimit": {
                    "type": "integer",
                    "description": "The amount of vCPU computing resources to allocate to each container. Defaults to 140.\n"
                },
                "cronStatus": {
                    "type": "string",
                    "description": "The cron status of the container.\n"
                },
                "deploy": {
                    "type": "boolean",
                    "description": "Boolean controlling whether the container is on a production environment.\n\nNote that if you want to use your own configuration, you must consult our configuration [restrictions](https://www.scaleway.com/en/docs/compute/containers/reference-content/containers-limitations/#configuration-restrictions) section.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the container.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "The native domain name of the container\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#environment-variables) variables of the container.\n"
                },
                "errorMessage": {
                    "type": "string",
                    "description": "The error message of the container.\n"
                },
                "httpOption": {
                    "type": "string",
                    "description": "HTTP traffic configuration\n"
                },
                "maxConcurrency": {
                    "type": "integer",
                    "description": "The maximum number of simultaneous requests your container can handle at the same time. Defaults to 50.\n"
                },
                "maxScale": {
                    "type": "integer",
                    "description": "The maximum of number of instances this container can scale to. Default to 20.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "The memory computing resources in MB to allocate to each container. Defaults to 256.\n"
                },
                "minScale": {
                    "type": "integer",
                    "description": "The minimum of running container instances continuously. Defaults to 0.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the container name.\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The container namespace ID of the container.\n\n\u003e **Important** Updates to `name` will recreate the container.\n\nThe following arguments are optional:\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to expose the container. Defaults to 8080.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "The privacy type define the way to authenticate to your container. Please check our dedicated [section](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8).\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The communication [protocol](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8) http1 or h2c. Defaults to http1.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region in which the container was created.\n"
                },
                "registryImage": {
                    "type": "string",
                    "description": "The registry image address. e.g: **\"rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE\"**.\n"
                },
                "registrySha256": {
                    "type": "string",
                    "description": "The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string\n"
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [secret environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#secrets) variables of the container.\n",
                    "secret": true
                },
                "status": {
                    "type": "string",
                    "description": "The container status.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to 300s.\n"
                }
            },
            "required": [
                "cpuLimit",
                "cronStatus",
                "domainName",
                "environmentVariables",
                "errorMessage",
                "maxConcurrency",
                "maxScale",
                "memoryLimit",
                "minScale",
                "name",
                "namespaceId",
                "port",
                "region",
                "registryImage",
                "status",
                "timeout"
            ],
            "inputProperties": {
                "cpuLimit": {
                    "type": "integer",
                    "description": "The amount of vCPU computing resources to allocate to each container. Defaults to 140.\n"
                },
                "deploy": {
                    "type": "boolean",
                    "description": "Boolean controlling whether the container is on a production environment.\n\nNote that if you want to use your own configuration, you must consult our configuration [restrictions](https://www.scaleway.com/en/docs/compute/containers/reference-content/containers-limitations/#configuration-restrictions) section.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the container.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#environment-variables) variables of the container.\n"
                },
                "httpOption": {
                    "type": "string",
                    "description": "HTTP traffic configuration\n"
                },
                "maxConcurrency": {
                    "type": "integer",
                    "description": "The maximum number of simultaneous requests your container can handle at the same time. Defaults to 50.\n"
                },
                "maxScale": {
                    "type": "integer",
                    "description": "The maximum of number of instances this container can scale to. Default to 20.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "The memory computing resources in MB to allocate to each container. Defaults to 256.\n"
                },
                "minScale": {
                    "type": "integer",
                    "description": "The minimum of running container instances continuously. Defaults to 0.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the container name.\n",
                    "willReplaceOnChanges": true
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The container namespace ID of the container.\n\n\u003e **Important** Updates to `name` will recreate the container.\n\nThe following arguments are optional:\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to expose the container. Defaults to 8080.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "The privacy type define the way to authenticate to your container. Please check our dedicated [section](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8).\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The communication [protocol](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8) http1 or h2c. Defaults to http1.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region in which the container was created.\n",
                    "willReplaceOnChanges": true
                },
                "registryImage": {
                    "type": "string",
                    "description": "The registry image address. e.g: **\"rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE\"**.\n"
                },
                "registrySha256": {
                    "type": "string",
                    "description": "The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string\n"
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [secret environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#secrets) variables of the container.\n",
                    "secret": true
                },
                "status": {
                    "type": "string",
                    "description": "The container status.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to 300s.\n"
                }
            },
            "requiredInputs": [
                "namespaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Container resources.\n",
                "properties": {
                    "cpuLimit": {
                        "type": "integer",
                        "description": "The amount of vCPU computing resources to allocate to each container. Defaults to 140.\n"
                    },
                    "cronStatus": {
                        "type": "string",
                        "description": "The cron status of the container.\n"
                    },
                    "deploy": {
                        "type": "boolean",
                        "description": "Boolean controlling whether the container is on a production environment.\n\nNote that if you want to use your own configuration, you must consult our configuration [restrictions](https://www.scaleway.com/en/docs/compute/containers/reference-content/containers-limitations/#configuration-restrictions) section.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the container.\n"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "The native domain name of the container\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The [environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#environment-variables) variables of the container.\n"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "The error message of the container.\n"
                    },
                    "httpOption": {
                        "type": "string",
                        "description": "HTTP traffic configuration\n"
                    },
                    "maxConcurrency": {
                        "type": "integer",
                        "description": "The maximum number of simultaneous requests your container can handle at the same time. Defaults to 50.\n"
                    },
                    "maxScale": {
                        "type": "integer",
                        "description": "The maximum of number of instances this container can scale to. Default to 20.\n"
                    },
                    "memoryLimit": {
                        "type": "integer",
                        "description": "The memory computing resources in MB to allocate to each container. Defaults to 256.\n"
                    },
                    "minScale": {
                        "type": "integer",
                        "description": "The minimum of running container instances continuously. Defaults to 0.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the container name.\n",
                        "willReplaceOnChanges": true
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The container namespace ID of the container.\n\n\u003e **Important** Updates to `name` will recreate the container.\n\nThe following arguments are optional:\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port to expose the container. Defaults to 8080.\n"
                    },
                    "privacy": {
                        "type": "string",
                        "description": "The privacy type define the way to authenticate to your container. Please check our dedicated [section](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8).\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The communication [protocol](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8) http1 or h2c. Defaults to http1.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Defaults to provider `region`) The region in which the container was created.\n",
                        "willReplaceOnChanges": true
                    },
                    "registryImage": {
                        "type": "string",
                        "description": "The registry image address. e.g: **\"rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE\"**.\n"
                    },
                    "registrySha256": {
                        "type": "string",
                        "description": "The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string\n"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The [secret environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#secrets) variables of the container.\n",
                        "secret": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The container status.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to 300s.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/containerCron:ContainerCron": {
            "description": "Creates and manages Scaleway Container Triggers. For the moment, the feature is limited to CRON Schedule (time-based).\n\nFor more information consult\nthe [documentation](https://www.scaleway.com/en/docs/serverless/containers/)\n.\n\nFor more details about the limitation\ncheck [containers-limitations](https://www.scaleway.com/en/docs/compute/containers/reference-content/containers-limitations/)\n.\n\nYou can check also\nour [containers cron api documentation](https://developers.scaleway.com/en/products/containers/api/#crons-942bf4).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainContainerNamespace = new scaleway.ContainerNamespace(\"mainContainerNamespace\", {});\nconst mainContainer = new scaleway.Container(\"mainContainer\", {namespaceId: mainContainerNamespace.id});\nconst mainContainerCron = new scaleway.ContainerCron(\"mainContainerCron\", {\n    containerId: mainContainer.id,\n    schedule: \"5 4 1 * *\",\n    args: JSON.stringify({\n        address: {\n            city: \"Paris\",\n            country: \"FR\",\n        },\n        age: 23,\n        firstName: \"John\",\n        isAlive: true,\n        lastName: \"Smith\",\n    }),\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport json\n\nmain_container_namespace = scaleway.ContainerNamespace(\"mainContainerNamespace\")\nmain_container = scaleway.Container(\"mainContainer\", namespace_id=main_container_namespace.id)\nmain_container_cron = scaleway.ContainerCron(\"mainContainerCron\",\n    container_id=main_container.id,\n    schedule=\"5 4 1 * *\",\n    args=json.dumps({\n        \"address\": {\n            \"city\": \"Paris\",\n            \"country\": \"FR\",\n        },\n        \"age\": 23,\n        \"firstName\": \"John\",\n        \"isAlive\": True,\n        \"lastName\": \"Smith\",\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainContainerNamespace = new Scaleway.ContainerNamespace(\"mainContainerNamespace\");\n\n    var mainContainer = new Scaleway.Container(\"mainContainer\", new()\n    {\n        NamespaceId = mainContainerNamespace.Id,\n    });\n\n    var mainContainerCron = new Scaleway.ContainerCron(\"mainContainerCron\", new()\n    {\n        ContainerId = mainContainer.Id,\n        Schedule = \"5 4 1 * *\",\n        Args = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"address\"] = new Dictionary\u003cstring, object?\u003e\n            {\n                [\"city\"] = \"Paris\",\n                [\"country\"] = \"FR\",\n            },\n            [\"age\"] = 23,\n            [\"firstName\"] = \"John\",\n            [\"isAlive\"] = true,\n            [\"lastName\"] = \"Smith\",\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainContainerNamespace, err := scaleway.NewContainerNamespace(ctx, \"mainContainerNamespace\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainContainer, err := scaleway.NewContainer(ctx, \"mainContainer\", \u0026scaleway.ContainerArgs{\n\t\t\tNamespaceId: mainContainerNamespace.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"address\": map[string]interface{}{\n\t\t\t\t\"city\":    \"Paris\",\n\t\t\t\t\"country\": \"FR\",\n\t\t\t},\n\t\t\t\"age\":       23,\n\t\t\t\"firstName\": \"John\",\n\t\t\t\"isAlive\":   true,\n\t\t\t\"lastName\":  \"Smith\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = scaleway.NewContainerCron(ctx, \"mainContainerCron\", \u0026scaleway.ContainerCronArgs{\n\t\t\tContainerId: mainContainer.ID(),\n\t\t\tSchedule:    pulumi.String(\"5 4 1 * *\"),\n\t\t\tArgs:        pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerNamespace;\nimport com.pulumi.scaleway.Container;\nimport com.pulumi.scaleway.ContainerArgs;\nimport com.pulumi.scaleway.ContainerCron;\nimport com.pulumi.scaleway.ContainerCronArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainContainerNamespace = new ContainerNamespace(\"mainContainerNamespace\");\n\n        var mainContainer = new Container(\"mainContainer\", ContainerArgs.builder()        \n            .namespaceId(mainContainerNamespace.id())\n            .build());\n\n        var mainContainerCron = new ContainerCron(\"mainContainerCron\", ContainerCronArgs.builder()        \n            .containerId(mainContainer.id())\n            .schedule(\"5 4 1 * *\")\n            .args(serializeJson(\n                jsonObject(\n                    jsonProperty(\"address\", jsonObject(\n                        jsonProperty(\"city\", \"Paris\"),\n                        jsonProperty(\"country\", \"FR\")\n                    )),\n                    jsonProperty(\"age\", 23),\n                    jsonProperty(\"firstName\", \"John\"),\n                    jsonProperty(\"isAlive\", true),\n                    jsonProperty(\"lastName\", \"Smith\")\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainContainerNamespace:\n    type: scaleway:ContainerNamespace\n  mainContainer:\n    type: scaleway:Container\n    properties:\n      namespaceId: ${mainContainerNamespace.id}\n  mainContainerCron:\n    type: scaleway:ContainerCron\n    properties:\n      containerId: ${mainContainer.id}\n      schedule: 5 4 1 * *\n      #cron at 04:05 on day-of-month 1\n      args:\n        fn::toJSON:\n          address:\n            city: Paris\n            country: FR\n          age: 23\n          firstName: John\n          isAlive: true\n          lastName: Smith\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nContainer Cron can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/containerCron:ContainerCron main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "args": {
                    "type": "string",
                    "description": "The key-value mapping to define arguments that will be passed to your container’s event object\nduring\n"
                },
                "containerId": {
                    "type": "string",
                    "description": "The container ID to link with your cron.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region\nin where the job was created.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "Cron format string, e.g. @hourly, as schedule time of its jobs to be created and\nexecuted.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The cron status.\n"
                }
            },
            "required": [
                "args",
                "containerId",
                "region",
                "schedule",
                "status"
            ],
            "inputProperties": {
                "args": {
                    "type": "string",
                    "description": "The key-value mapping to define arguments that will be passed to your container’s event object\nduring\n"
                },
                "containerId": {
                    "type": "string",
                    "description": "The container ID to link with your cron.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region\nin where the job was created.\n",
                    "willReplaceOnChanges": true
                },
                "schedule": {
                    "type": "string",
                    "description": "Cron format string, e.g. @hourly, as schedule time of its jobs to be created and\nexecuted.\n"
                }
            },
            "requiredInputs": [
                "args",
                "containerId",
                "schedule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerCron resources.\n",
                "properties": {
                    "args": {
                        "type": "string",
                        "description": "The key-value mapping to define arguments that will be passed to your container’s event object\nduring\n"
                    },
                    "containerId": {
                        "type": "string",
                        "description": "The container ID to link with your cron.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Defaults to provider `region`) The region\nin where the job was created.\n",
                        "willReplaceOnChanges": true
                    },
                    "schedule": {
                        "type": "string",
                        "description": "Cron format string, e.g. @hourly, as schedule time of its jobs to be created and\nexecuted.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The cron status.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/containerDomain:ContainerDomain": {
            "description": "Creates and manages Scaleway Container domain name bindings.\nYou can check our [containers guide](https://www.scaleway.com/en/docs/compute/containers/how-to/add-a-custom-domain-to-a-container/) for further information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Simple\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst appContainer = new scaleway.Container(\"appContainer\", {});\nconst appContainerDomain = new scaleway.ContainerDomain(\"appContainerDomain\", {\n    containerId: appContainer.id,\n    hostname: \"container.domain.tld\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\napp_container = scaleway.Container(\"appContainer\")\napp_container_domain = scaleway.ContainerDomain(\"appContainerDomain\",\n    container_id=app_container.id,\n    hostname=\"container.domain.tld\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var appContainer = new Scaleway.Container(\"appContainer\");\n\n    var appContainerDomain = new Scaleway.ContainerDomain(\"appContainerDomain\", new()\n    {\n        ContainerId = appContainer.Id,\n        Hostname = \"container.domain.tld\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tappContainer, err := scaleway.NewContainer(ctx, \"appContainer\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewContainerDomain(ctx, \"appContainerDomain\", \u0026scaleway.ContainerDomainArgs{\n\t\t\tContainerId: appContainer.ID(),\n\t\t\tHostname:    pulumi.String(\"container.domain.tld\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Container;\nimport com.pulumi.scaleway.ContainerDomain;\nimport com.pulumi.scaleway.ContainerDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var appContainer = new Container(\"appContainer\");\n\n        var appContainerDomain = new ContainerDomain(\"appContainerDomain\", ContainerDomainArgs.builder()        \n            .containerId(appContainer.id())\n            .hostname(\"container.domain.tld\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  appContainer:\n    type: scaleway:Container\n  appContainerDomain:\n    type: scaleway:ContainerDomain\n    properties:\n      containerId: ${appContainer.id}\n      hostname: container.domain.tld\n```\n{{% /example %}}\n{{% example %}}\n### Complete example with domain\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.ContainerNamespace(\"main\", {description: \"test container\"});\nconst appContainer = new scaleway.Container(\"appContainer\", {\n    namespaceId: main.id,\n    registryImage: pulumi.interpolate`${main.registryEndpoint}/nginx:alpine`,\n    port: 80,\n    cpuLimit: 140,\n    memoryLimit: 256,\n    minScale: 1,\n    maxScale: 1,\n    timeout: 600,\n    maxConcurrency: 80,\n    privacy: \"public\",\n    protocol: \"http1\",\n    deploy: true,\n});\nconst appDomainRecord = new scaleway.DomainRecord(\"appDomainRecord\", {\n    dnsZone: \"domain.tld\",\n    type: \"CNAME\",\n    data: pulumi.interpolate`${appContainer.domainName}.`,\n    ttl: 3600,\n});\nconst appContainerDomain = new scaleway.ContainerDomain(\"appContainerDomain\", {\n    containerId: appContainer.id,\n    hostname: pulumi.interpolate`${appDomainRecord.name}.${appDomainRecord.dnsZone}`,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.ContainerNamespace(\"main\", description=\"test container\")\napp_container = scaleway.Container(\"appContainer\",\n    namespace_id=main.id,\n    registry_image=main.registry_endpoint.apply(lambda registry_endpoint: f\"{registry_endpoint}/nginx:alpine\"),\n    port=80,\n    cpu_limit=140,\n    memory_limit=256,\n    min_scale=1,\n    max_scale=1,\n    timeout=600,\n    max_concurrency=80,\n    privacy=\"public\",\n    protocol=\"http1\",\n    deploy=True)\napp_domain_record = scaleway.DomainRecord(\"appDomainRecord\",\n    dns_zone=\"domain.tld\",\n    type=\"CNAME\",\n    data=app_container.domain_name.apply(lambda domain_name: f\"{domain_name}.\"),\n    ttl=3600)\napp_container_domain = scaleway.ContainerDomain(\"appContainerDomain\",\n    container_id=app_container.id,\n    hostname=pulumi.Output.all(app_domain_record.name, app_domain_record.dns_zone).apply(lambda name, dns_zone: f\"{name}.{dns_zone}\"))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ContainerNamespace(\"main\", new()\n    {\n        Description = \"test container\",\n    });\n\n    var appContainer = new Scaleway.Container(\"appContainer\", new()\n    {\n        NamespaceId = main.Id,\n        RegistryImage = main.RegistryEndpoint.Apply(registryEndpoint =\u003e $\"{registryEndpoint}/nginx:alpine\"),\n        Port = 80,\n        CpuLimit = 140,\n        MemoryLimit = 256,\n        MinScale = 1,\n        MaxScale = 1,\n        Timeout = 600,\n        MaxConcurrency = 80,\n        Privacy = \"public\",\n        Protocol = \"http1\",\n        Deploy = true,\n    });\n\n    var appDomainRecord = new Scaleway.DomainRecord(\"appDomainRecord\", new()\n    {\n        DnsZone = \"domain.tld\",\n        Type = \"CNAME\",\n        Data = appContainer.DomainName.Apply(domainName =\u003e $\"{domainName}.\"),\n        Ttl = 3600,\n    });\n\n    var appContainerDomain = new Scaleway.ContainerDomain(\"appContainerDomain\", new()\n    {\n        ContainerId = appContainer.Id,\n        Hostname = Output.Tuple(appDomainRecord.Name, appDomainRecord.DnsZone).Apply(values =\u003e\n        {\n            var name = values.Item1;\n            var dnsZone = values.Item2;\n            return $\"{name}.{dnsZone}\";\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewContainerNamespace(ctx, \"main\", \u0026scaleway.ContainerNamespaceArgs{\n\t\t\tDescription: pulumi.String(\"test container\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tappContainer, err := scaleway.NewContainer(ctx, \"appContainer\", \u0026scaleway.ContainerArgs{\n\t\t\tNamespaceId: main.ID(),\n\t\t\tRegistryImage: main.RegistryEndpoint.ApplyT(func(registryEndpoint string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"%v/nginx:alpine\", registryEndpoint), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tPort:           pulumi.Int(80),\n\t\t\tCpuLimit:       pulumi.Int(140),\n\t\t\tMemoryLimit:    pulumi.Int(256),\n\t\t\tMinScale:       pulumi.Int(1),\n\t\t\tMaxScale:       pulumi.Int(1),\n\t\t\tTimeout:        pulumi.Int(600),\n\t\t\tMaxConcurrency: pulumi.Int(80),\n\t\t\tPrivacy:        pulumi.String(\"public\"),\n\t\t\tProtocol:       pulumi.String(\"http1\"),\n\t\t\tDeploy:         pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tappDomainRecord, err := scaleway.NewDomainRecord(ctx, \"appDomainRecord\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tType:    pulumi.String(\"CNAME\"),\n\t\t\tData: appContainer.DomainName.ApplyT(func(domainName string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"%v.\", domainName), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tTtl: pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewContainerDomain(ctx, \"appContainerDomain\", \u0026scaleway.ContainerDomainArgs{\n\t\t\tContainerId: appContainer.ID(),\n\t\t\tHostname: pulumi.All(appDomainRecord.Name, appDomainRecord.DnsZone).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\tname := _args[0].(string)\n\t\t\t\tdnsZone := _args[1].(string)\n\t\t\t\treturn fmt.Sprintf(\"%v.%v\", name, dnsZone), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerNamespace;\nimport com.pulumi.scaleway.ContainerNamespaceArgs;\nimport com.pulumi.scaleway.Container;\nimport com.pulumi.scaleway.ContainerArgs;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport com.pulumi.scaleway.ContainerDomain;\nimport com.pulumi.scaleway.ContainerDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ContainerNamespace(\"main\", ContainerNamespaceArgs.builder()        \n            .description(\"test container\")\n            .build());\n\n        var appContainer = new Container(\"appContainer\", ContainerArgs.builder()        \n            .namespaceId(main.id())\n            .registryImage(main.registryEndpoint().applyValue(registryEndpoint -\u003e String.format(\"%s/nginx:alpine\", registryEndpoint)))\n            .port(80)\n            .cpuLimit(140)\n            .memoryLimit(256)\n            .minScale(1)\n            .maxScale(1)\n            .timeout(600)\n            .maxConcurrency(80)\n            .privacy(\"public\")\n            .protocol(\"http1\")\n            .deploy(true)\n            .build());\n\n        var appDomainRecord = new DomainRecord(\"appDomainRecord\", DomainRecordArgs.builder()        \n            .dnsZone(\"domain.tld\")\n            .type(\"CNAME\")\n            .data(appContainer.domainName().applyValue(domainName -\u003e String.format(\"%s.\", domainName)))\n            .ttl(3600)\n            .build());\n\n        var appContainerDomain = new ContainerDomain(\"appContainerDomain\", ContainerDomainArgs.builder()        \n            .containerId(appContainer.id())\n            .hostname(Output.tuple(appDomainRecord.name(), appDomainRecord.dnsZone()).applyValue(values -\u003e {\n                var name = values.t1;\n                var dnsZone = values.t2;\n                return String.format(\"%s.%s\", name,dnsZone);\n            }))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ContainerNamespace\n    properties:\n      description: test container\n  appContainer:\n    type: scaleway:Container\n    properties:\n      namespaceId: ${main.id}\n      registryImage: ${main.registryEndpoint}/nginx:alpine\n      port: 80\n      cpuLimit: 140\n      memoryLimit: 256\n      minScale: 1\n      maxScale: 1\n      timeout: 600\n      maxConcurrency: 80\n      privacy: public\n      protocol: http1\n      deploy: true\n  appDomainRecord:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: domain.tld\n      type: CNAME\n      data: ${appContainer.domainName}.\n      # Trailing dot is important in CNAME\n      ttl: 3600\n  appContainerDomain:\n    type: scaleway:ContainerDomain\n    properties:\n      containerId: ${appContainer.id}\n      hostname: ${appDomainRecord.name}.${appDomainRecord.dnsZone}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nContainer domain binding can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/containerDomain:ContainerDomain main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "containerId": {
                    "type": "string",
                    "description": "The ID of the container.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname with a CNAME record.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the container exists\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL used to query the container\n"
                }
            },
            "required": [
                "containerId",
                "hostname",
                "region",
                "url"
            ],
            "inputProperties": {
                "containerId": {
                    "type": "string",
                    "description": "The ID of the container.\n",
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname with a CNAME record.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the container exists\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "containerId",
                "hostname"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerDomain resources.\n",
                "properties": {
                    "containerId": {
                        "type": "string",
                        "description": "The ID of the container.\n",
                        "willReplaceOnChanges": true
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname with a CNAME record.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the container exists\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL used to query the container\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/containerNamespace:ContainerNamespace": {
            "description": "Creates and manages Scaleway Serverless Container Namespace.\nFor more information see [the documentation](https://developers.scaleway.com/en/products/containers/api/#namespaces-cdce79).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.ContainerNamespace(\"main\", {description: \"Main container namespace\"});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.ContainerNamespace(\"main\", description=\"Main container namespace\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ContainerNamespace(\"main\", new()\n    {\n        Description = \"Main container namespace\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewContainerNamespace(ctx, \"main\", \u0026scaleway.ContainerNamespaceArgs{\n\t\t\tDescription: pulumi.String(\"Main container namespace\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerNamespace;\nimport com.pulumi.scaleway.ContainerNamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ContainerNamespace(\"main\", ContainerNamespaceArgs.builder()        \n            .description(\"Main container namespace\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ContainerNamespace\n    properties:\n      description: Main container namespace\n```\n\n\n## Import\n\nNamespaces can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/containerNamespace:ContainerNamespace main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "destroyRegistry": {
                    "type": "boolean",
                    "description": "Destroy registry on deletion\n",
                    "deprecationMessage": "Registry namespace is automatically destroyed with namespace"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables of the namespace.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the container namespace.\n\n\u003e **Important** Updates to `name` will recreate the namespace.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the namespace is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                },
                "registryEndpoint": {
                    "type": "string",
                    "description": "The registry endpoint of the namespace.\n"
                },
                "registryNamespaceId": {
                    "type": "string",
                    "description": "The registry namespace ID of the namespace.\n"
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The secret environment variables of the namespace.\n",
                    "secret": true
                }
            },
            "required": [
                "name",
                "organizationId",
                "projectId",
                "region",
                "registryEndpoint",
                "registryNamespaceId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "destroyRegistry": {
                    "type": "boolean",
                    "description": "Destroy registry on deletion\n",
                    "deprecationMessage": "Registry namespace is automatically destroyed with namespace"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables of the namespace.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the container namespace.\n\n\u003e **Important** Updates to `name` will recreate the namespace.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n",
                    "willReplaceOnChanges": true
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The secret environment variables of the namespace.\n",
                    "secret": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerNamespace resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the namespace.\n"
                    },
                    "destroyRegistry": {
                        "type": "boolean",
                        "description": "Destroy registry on deletion\n",
                        "deprecationMessage": "Registry namespace is automatically destroyed with namespace"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The environment variables of the namespace.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the container namespace.\n\n\u003e **Important** Updates to `name` will recreate the namespace.\n",
                        "willReplaceOnChanges": true
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the namespace is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the namespace is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "registryEndpoint": {
                        "type": "string",
                        "description": "The registry endpoint of the namespace.\n"
                    },
                    "registryNamespaceId": {
                        "type": "string",
                        "description": "The registry namespace ID of the namespace.\n"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The secret environment variables of the namespace.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/containerToken:ContainerToken": {
            "description": "Creates and manages Scaleway Container Token.\nFor more information see [the documentation](https://developers.scaleway.com/en/products/containers/api/#tokens-26b085).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainContainerNamespace = new scaleway.ContainerNamespace(\"mainContainerNamespace\", {});\nconst mainContainer = new scaleway.Container(\"mainContainer\", {namespaceId: mainContainerNamespace.id});\n// Namespace Token\nconst namespace = new scaleway.ContainerToken(\"namespace\", {\n    namespaceId: mainContainerNamespace.id,\n    expiresAt: \"2022-10-18T11:35:15+02:00\",\n});\n// Container Token\nconst container = new scaleway.ContainerToken(\"container\", {containerId: mainContainer.id});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain_container_namespace = scaleway.ContainerNamespace(\"mainContainerNamespace\")\nmain_container = scaleway.Container(\"mainContainer\", namespace_id=main_container_namespace.id)\n# Namespace Token\nnamespace = scaleway.ContainerToken(\"namespace\",\n    namespace_id=main_container_namespace.id,\n    expires_at=\"2022-10-18T11:35:15+02:00\")\n# Container Token\ncontainer = scaleway.ContainerToken(\"container\", container_id=main_container.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainContainerNamespace = new Scaleway.ContainerNamespace(\"mainContainerNamespace\");\n\n    var mainContainer = new Scaleway.Container(\"mainContainer\", new()\n    {\n        NamespaceId = mainContainerNamespace.Id,\n    });\n\n    // Namespace Token\n    var @namespace = new Scaleway.ContainerToken(\"namespace\", new()\n    {\n        NamespaceId = mainContainerNamespace.Id,\n        ExpiresAt = \"2022-10-18T11:35:15+02:00\",\n    });\n\n    // Container Token\n    var container = new Scaleway.ContainerToken(\"container\", new()\n    {\n        ContainerId = mainContainer.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainContainerNamespace, err := scaleway.NewContainerNamespace(ctx, \"mainContainerNamespace\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainContainer, err := scaleway.NewContainer(ctx, \"mainContainer\", \u0026scaleway.ContainerArgs{\n\t\t\tNamespaceId: mainContainerNamespace.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewContainerToken(ctx, \"namespace\", \u0026scaleway.ContainerTokenArgs{\n\t\t\tNamespaceId: mainContainerNamespace.ID(),\n\t\t\tExpiresAt:   pulumi.String(\"2022-10-18T11:35:15+02:00\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewContainerToken(ctx, \"container\", \u0026scaleway.ContainerTokenArgs{\n\t\t\tContainerId: mainContainer.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerNamespace;\nimport com.pulumi.scaleway.Container;\nimport com.pulumi.scaleway.ContainerArgs;\nimport com.pulumi.scaleway.ContainerToken;\nimport com.pulumi.scaleway.ContainerTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainContainerNamespace = new ContainerNamespace(\"mainContainerNamespace\");\n\n        var mainContainer = new Container(\"mainContainer\", ContainerArgs.builder()        \n            .namespaceId(mainContainerNamespace.id())\n            .build());\n\n        var namespace = new ContainerToken(\"namespace\", ContainerTokenArgs.builder()        \n            .namespaceId(mainContainerNamespace.id())\n            .expiresAt(\"2022-10-18T11:35:15+02:00\")\n            .build());\n\n        var container = new ContainerToken(\"container\", ContainerTokenArgs.builder()        \n            .containerId(mainContainer.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainContainerNamespace:\n    type: scaleway:ContainerNamespace\n  mainContainer:\n    type: scaleway:Container\n    properties:\n      namespaceId: ${mainContainerNamespace.id}\n  # Namespace Token\n  namespace:\n    type: scaleway:ContainerToken\n    properties:\n      namespaceId: ${mainContainerNamespace.id}\n      expiresAt: 2022-10-18T11:35:15+02:00\n  # Container Token\n  container:\n    type: scaleway:ContainerToken\n    properties:\n      containerId: ${mainContainer.id}\n```\n\n\n## Import\n\nTokens can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/containerToken:ContainerToken main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "containerId": {
                    "type": "string",
                    "description": "The ID of the container.\n\n\u003e Only one of `namespace_id` or `container_id` must be set.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the token.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The expiration date of the token.\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The ID of the container namespace.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n\n\u003e **Important** Updates to any fields will recreate the token.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token.\n",
                    "secret": true
                }
            },
            "required": [
                "region",
                "token"
            ],
            "inputProperties": {
                "containerId": {
                    "type": "string",
                    "description": "The ID of the container.\n\n\u003e Only one of `namespace_id` or `container_id` must be set.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the token.\n",
                    "willReplaceOnChanges": true
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The expiration date of the token.\n",
                    "willReplaceOnChanges": true
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The ID of the container namespace.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n\n\u003e **Important** Updates to any fields will recreate the token.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerToken resources.\n",
                "properties": {
                    "containerId": {
                        "type": "string",
                        "description": "The ID of the container.\n\n\u003e Only one of `namespace_id` or `container_id` must be set.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "The expiration date of the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The ID of the container namespace.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace should be created.\n\n\u003e **Important** Updates to any fields will recreate the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "token": {
                        "type": "string",
                        "description": "The token.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/containerTrigger:ContainerTrigger": {
            "description": "Creates and manages Scaleway Container Triggers.\nFor more information see [the documentation](https://www.scaleway.com/en/developers/api/serverless-containers/#path-triggers).\n\n## Examples\n\n### SQS\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.ContainerTrigger(\"main\", {\n    containerId: scaleway_container.main.id,\n    sqs: {\n        projectId: scaleway_mnq_sqs.main.project_id,\n        queue: \"MyQueue\",\n        region: scaleway_mnq_sqs.main.region,\n    },\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.ContainerTrigger(\"main\",\n    container_id=scaleway_container[\"main\"][\"id\"],\n    sqs=scaleway.ContainerTriggerSqsArgs(\n        project_id=scaleway_mnq_sqs[\"main\"][\"project_id\"],\n        queue=\"MyQueue\",\n        region=scaleway_mnq_sqs[\"main\"][\"region\"],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ContainerTrigger(\"main\", new()\n    {\n        ContainerId = scaleway_container.Main.Id,\n        Sqs = new Scaleway.Inputs.ContainerTriggerSqsArgs\n        {\n            ProjectId = scaleway_mnq_sqs.Main.Project_id,\n            Queue = \"MyQueue\",\n            Region = scaleway_mnq_sqs.Main.Region,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewContainerTrigger(ctx, \"main\", \u0026scaleway.ContainerTriggerArgs{\n\t\t\tContainerId: pulumi.Any(scaleway_container.Main.Id),\n\t\t\tSqs: \u0026scaleway.ContainerTriggerSqsArgs{\n\t\t\t\tProjectId: pulumi.Any(scaleway_mnq_sqs.Main.Project_id),\n\t\t\t\tQueue:     pulumi.String(\"MyQueue\"),\n\t\t\t\tRegion:    pulumi.Any(scaleway_mnq_sqs.Main.Region),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerTrigger;\nimport com.pulumi.scaleway.ContainerTriggerArgs;\nimport com.pulumi.scaleway.inputs.ContainerTriggerSqsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ContainerTrigger(\"main\", ContainerTriggerArgs.builder()        \n            .containerId(scaleway_container.main().id())\n            .sqs(ContainerTriggerSqsArgs.builder()\n                .projectId(scaleway_mnq_sqs.main().project_id())\n                .queue(\"MyQueue\")\n                .region(scaleway_mnq_sqs.main().region())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ContainerTrigger\n    properties:\n      containerId: ${scaleway_container.main.id}\n      sqs:\n        projectId: ${scaleway_mnq_sqs.main.project_id}\n        queue: MyQueue\n        region: ${scaleway_mnq_sqs.main.region}\n```\n\n### Nats\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.ContainerTrigger(\"main\", {\n    containerId: scaleway_container.main.id,\n    nats: {\n        accountId: scaleway_mnq_nats_account.main.id,\n        subject: \"MySubject\",\n        region: scaleway_mnq_nats_account.main.region,\n    },\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.ContainerTrigger(\"main\",\n    container_id=scaleway_container[\"main\"][\"id\"],\n    nats=scaleway.ContainerTriggerNatsArgs(\n        account_id=scaleway_mnq_nats_account[\"main\"][\"id\"],\n        subject=\"MySubject\",\n        region=scaleway_mnq_nats_account[\"main\"][\"region\"],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ContainerTrigger(\"main\", new()\n    {\n        ContainerId = scaleway_container.Main.Id,\n        Nats = new Scaleway.Inputs.ContainerTriggerNatsArgs\n        {\n            AccountId = scaleway_mnq_nats_account.Main.Id,\n            Subject = \"MySubject\",\n            Region = scaleway_mnq_nats_account.Main.Region,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewContainerTrigger(ctx, \"main\", \u0026scaleway.ContainerTriggerArgs{\n\t\t\tContainerId: pulumi.Any(scaleway_container.Main.Id),\n\t\t\tNats: \u0026scaleway.ContainerTriggerNatsArgs{\n\t\t\t\tAccountId: pulumi.Any(scaleway_mnq_nats_account.Main.Id),\n\t\t\t\tSubject:   pulumi.String(\"MySubject\"),\n\t\t\t\tRegion:    pulumi.Any(scaleway_mnq_nats_account.Main.Region),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerTrigger;\nimport com.pulumi.scaleway.ContainerTriggerArgs;\nimport com.pulumi.scaleway.inputs.ContainerTriggerNatsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ContainerTrigger(\"main\", ContainerTriggerArgs.builder()        \n            .containerId(scaleway_container.main().id())\n            .nats(ContainerTriggerNatsArgs.builder()\n                .accountId(scaleway_mnq_nats_account.main().id())\n                .subject(\"MySubject\")\n                .region(scaleway_mnq_nats_account.main().region())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ContainerTrigger\n    properties:\n      containerId: ${scaleway_container.main.id}\n      nats:\n        accountId: ${scaleway_mnq_nats_account.main.id}\n        subject: MySubject\n        region: ${scaleway_mnq_nats_account.main.region}\n```\n\n\n## Import\n\nContainer Triggers can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/containerTrigger:ContainerTrigger main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "containerId": {
                    "type": "string",
                    "description": "The ID of the container to create a trigger for\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the trigger. Default to a generated name.\n"
                },
                "nats": {
                    "$ref": "#/types/scaleway:index/ContainerTriggerNats:ContainerTriggerNats",
                    "description": "The configuration for the Scaleway's Nats used by the trigger\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                },
                "sqs": {
                    "$ref": "#/types/scaleway:index/ContainerTriggerSqs:ContainerTriggerSqs",
                    "description": "The configuration of the Scaleway's SQS used by the trigger\n"
                }
            },
            "required": [
                "containerId",
                "name",
                "region"
            ],
            "inputProperties": {
                "containerId": {
                    "type": "string",
                    "description": "The ID of the container to create a trigger for\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the trigger. Default to a generated name.\n"
                },
                "nats": {
                    "$ref": "#/types/scaleway:index/ContainerTriggerNats:ContainerTriggerNats",
                    "description": "The configuration for the Scaleway's Nats used by the trigger\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n",
                    "willReplaceOnChanges": true
                },
                "sqs": {
                    "$ref": "#/types/scaleway:index/ContainerTriggerSqs:ContainerTriggerSqs",
                    "description": "The configuration of the Scaleway's SQS used by the trigger\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "containerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerTrigger resources.\n",
                "properties": {
                    "containerId": {
                        "type": "string",
                        "description": "The ID of the container to create a trigger for\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the trigger.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the trigger. Default to a generated name.\n"
                    },
                    "nats": {
                        "$ref": "#/types/scaleway:index/ContainerTriggerNats:ContainerTriggerNats",
                        "description": "The configuration for the Scaleway's Nats used by the trigger\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "sqs": {
                        "$ref": "#/types/scaleway:index/ContainerTriggerSqs:ContainerTriggerSqs",
                        "description": "The configuration of the Scaleway's SQS used by the trigger\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/documentDBDatabase:DocumentDBDatabase": {
            "description": "Creates and manages Scaleway DocumentDB database.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.DocumentDBDatabase(\"main\", {instanceId: \"11111111-1111-1111-1111-111111111111\"});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.DocumentDBDatabase(\"main\", instance_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DocumentDBDatabase(\"main\", new()\n    {\n        InstanceId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDocumentDBDatabase(ctx, \"main\", \u0026scaleway.DocumentDBDatabaseArgs{\n\t\t\tInstanceId: pulumi.String(\"11111111-1111-1111-1111-111111111111\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DocumentDBDatabase;\nimport com.pulumi.scaleway.DocumentDBDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DocumentDBDatabase(\"main\", DocumentDBDatabaseArgs.builder()        \n            .instanceId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DocumentDBDatabase\n    properties:\n      instanceId: 11111111-1111-1111-1111-111111111111\n```\n\n\n## Import\n\nDocumentDB Database can be imported using the `{region}/{id}/{DBNAME}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/documentDBDatabase:DocumentDBDatabase mydb fr-par/11111111-1111-1111-1111-111111111111/mydb\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the documentdb instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Whether the database is managed or not.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-new-database`).\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The name of the owner of the database.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n"
                },
                "size": {
                    "type": "string",
                    "description": "Size in gigabytes of the database.\n"
                }
            },
            "required": [
                "instanceId",
                "managed",
                "name",
                "owner",
                "projectId",
                "region",
                "size"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the documentdb instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-new-database`).\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DocumentDBDatabase resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the documentdb instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database.\n",
                        "willReplaceOnChanges": true
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Whether the database is managed or not.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the database (e.g. `my-new-database`).\n",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "The name of the owner of the database.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project_id you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the resource exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "string",
                        "description": "Size in gigabytes of the database.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/documentDBInstance:DocumentDBInstance": {
            "description": "Creates and manages Scaleway Database Instances.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/document_db/).\n\n## Examples\n\n### Example Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.DocumentDBInstance(\"main\", {\n    engine: \"FerretDB-1\",\n    nodeType: \"docdb-play2-pico\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    tags: [\n        \"terraform-test\",\n        \"scaleway_documentdb_instance\",\n        \"minimal\",\n    ],\n    userName: \"my_initial_user\",\n    volumeSizeInGb: 20,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.DocumentDBInstance(\"main\",\n    engine=\"FerretDB-1\",\n    node_type=\"docdb-play2-pico\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    tags=[\n        \"terraform-test\",\n        \"scaleway_documentdb_instance\",\n        \"minimal\",\n    ],\n    user_name=\"my_initial_user\",\n    volume_size_in_gb=20)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DocumentDBInstance(\"main\", new()\n    {\n        Engine = \"FerretDB-1\",\n        NodeType = \"docdb-play2-pico\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        Tags = new[]\n        {\n            \"terraform-test\",\n            \"scaleway_documentdb_instance\",\n            \"minimal\",\n        },\n        UserName = \"my_initial_user\",\n        VolumeSizeInGb = 20,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDocumentDBInstance(ctx, \"main\", \u0026scaleway.DocumentDBInstanceArgs{\n\t\t\tEngine:   pulumi.String(\"FerretDB-1\"),\n\t\t\tNodeType: pulumi.String(\"docdb-play2-pico\"),\n\t\t\tPassword: pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"terraform-test\"),\n\t\t\t\tpulumi.String(\"scaleway_documentdb_instance\"),\n\t\t\t\tpulumi.String(\"minimal\"),\n\t\t\t},\n\t\t\tUserName:       pulumi.String(\"my_initial_user\"),\n\t\t\tVolumeSizeInGb: pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DocumentDBInstance;\nimport com.pulumi.scaleway.DocumentDBInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DocumentDBInstance(\"main\", DocumentDBInstanceArgs.builder()        \n            .engine(\"FerretDB-1\")\n            .nodeType(\"docdb-play2-pico\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .tags(            \n                \"terraform-test\",\n                \"scaleway_documentdb_instance\",\n                \"minimal\")\n            .userName(\"my_initial_user\")\n            .volumeSizeInGb(20)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DocumentDBInstance\n    properties:\n      engine: FerretDB-1\n      nodeType: docdb-play2-pico\n      password: thiZ_is_v\u0026ry_s3cret\n      tags:\n        - terraform-test\n        - scaleway_documentdb_instance\n        - minimal\n      userName: my_initial_user\n      volumeSizeInGb: 20\n```\n\n\n## Import\n\nDatabase Instance can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/documentDBInstance:DocumentDBInstance db fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "engine": {
                    "type": "string",
                    "description": "Database Instance's engine version (e.g. `FerretDB-1`).\n\n\u003e **Important:** Updates to `engine` will recreate the Database Instance.\n"
                },
                "isHaCluster": {
                    "type": "boolean",
                    "description": "Enable or disable high availability for the database instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of database instance you want to create (e.g. `docdb-play2-pico`).\n\n\u003e **Important:** Updates to `node_type` will upgrade the Database Instance to the desired `node_type` without any\ninterruption. Keep in mind that you cannot downgrade a Database Instance.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the database instance.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Database\nInstance is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the Database Instance should be created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Database Instance.\n"
                },
                "telemetryEnabled": {
                    "type": "boolean",
                    "description": "Enable telemetry to collects basic anonymous usage data and sends them to FerretDB telemetry service. More about the telemetry [here](https://docs.ferretdb.io/telemetry/#configure-telemetry).\n\n\u003e **Important:** Updates to `is_ha_cluster` will recreate the Database Instance.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the database instance.\n\n\u003e **Important:** Updates to `user_name` will recreate the Database Instance.\n"
                },
                "volumeSizeInGb": {
                    "type": "integer",
                    "description": "Volume size (in GB) when `volume_type` is set to `bssd`.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Type of volume where data are stored (`bssd` or `lssd`).\n"
                }
            },
            "required": [
                "engine",
                "name",
                "nodeType",
                "projectId",
                "region",
                "volumeSizeInGb"
            ],
            "inputProperties": {
                "engine": {
                    "type": "string",
                    "description": "Database Instance's engine version (e.g. `FerretDB-1`).\n\n\u003e **Important:** Updates to `engine` will recreate the Database Instance.\n",
                    "willReplaceOnChanges": true
                },
                "isHaCluster": {
                    "type": "boolean",
                    "description": "Enable or disable high availability for the database instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of database instance you want to create (e.g. `docdb-play2-pico`).\n\n\u003e **Important:** Updates to `node_type` will upgrade the Database Instance to the desired `node_type` without any\ninterruption. Keep in mind that you cannot downgrade a Database Instance.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the database instance.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Database\nInstance is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the Database Instance should be created.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Database Instance.\n"
                },
                "telemetryEnabled": {
                    "type": "boolean",
                    "description": "Enable telemetry to collects basic anonymous usage data and sends them to FerretDB telemetry service. More about the telemetry [here](https://docs.ferretdb.io/telemetry/#configure-telemetry).\n\n\u003e **Important:** Updates to `is_ha_cluster` will recreate the Database Instance.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the database instance.\n\n\u003e **Important:** Updates to `user_name` will recreate the Database Instance.\n",
                    "willReplaceOnChanges": true
                },
                "volumeSizeInGb": {
                    "type": "integer",
                    "description": "Volume size (in GB) when `volume_type` is set to `bssd`.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Type of volume where data are stored (`bssd` or `lssd`).\n"
                }
            },
            "requiredInputs": [
                "engine",
                "nodeType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DocumentDBInstance resources.\n",
                "properties": {
                    "engine": {
                        "type": "string",
                        "description": "Database Instance's engine version (e.g. `FerretDB-1`).\n\n\u003e **Important:** Updates to `engine` will recreate the Database Instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "isHaCluster": {
                        "type": "boolean",
                        "description": "Enable or disable high availability for the database instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Database Instance.\n"
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "The type of database instance you want to create (e.g. `docdb-play2-pico`).\n\n\u003e **Important:** Updates to `node_type` will upgrade the Database Instance to the desired `node_type` without any\ninterruption. Keep in mind that you cannot downgrade a Database Instance.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for the first user of the database instance.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the Database\nInstance is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region\nin which the Database Instance should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Database Instance.\n"
                    },
                    "telemetryEnabled": {
                        "type": "boolean",
                        "description": "Enable telemetry to collects basic anonymous usage data and sends them to FerretDB telemetry service. More about the telemetry [here](https://docs.ferretdb.io/telemetry/#configure-telemetry).\n\n\u003e **Important:** Updates to `is_ha_cluster` will recreate the Database Instance.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Identifier for the first user of the database instance.\n\n\u003e **Important:** Updates to `user_name` will recreate the Database Instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "volumeSizeInGb": {
                        "type": "integer",
                        "description": "Volume size (in GB) when `volume_type` is set to `bssd`.\n"
                    },
                    "volumeType": {
                        "type": "string",
                        "description": "Type of volume where data are stored (`bssd` or `lssd`).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/documentDBPrivateNetworkEndpoint:DocumentDBPrivateNetworkEndpoint": {
            "description": "\n\n\n## Import\n\nDatabase Instance Endpoint can be imported using the `{region}/{endpoint_id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/documentDBPrivateNetworkEndpoint:DocumentDBPrivateNetworkEndpoint end fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the endpoint.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the documentdb instance.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address on the network.\n"
                },
                "ipNet": {
                    "type": "string",
                    "description": "The IP network address within the private subnet. This must be an IPv4 address with a\nCIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)\nservice if not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the endpoint.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port in the Private Network.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "required": [
                "hostname",
                "instanceId",
                "ip",
                "ipNet",
                "name",
                "port",
                "privateNetworkId",
                "region",
                "zone"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the documentdb instance.\n"
                },
                "ipNet": {
                    "type": "string",
                    "description": "The IP network address within the private subnet. This must be an IPv4 address with a\nCIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)\nservice if not set.\n",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port in the Private Network.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId",
                "privateNetworkId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DocumentDBPrivateNetworkEndpoint resources.\n",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "Hostname of the endpoint.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the documentdb instance.\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "IPv4 address on the network.\n"
                    },
                    "ipNet": {
                        "type": "string",
                        "description": "The IP network address within the private subnet. This must be an IPv4 address with a\nCIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)\nservice if not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the endpoint.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port in the Private Network.\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "The ID of the private network.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/documentDBPrivilege:DocumentDBPrivilege": {
            "description": "Create and manage Scaleway DocumentDB database privilege.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/document_db/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.DocumentDBPrivilege(\"main\", {\n    databaseName: \"my-db-name\",\n    instanceId: \"11111111-1111-1111-1111-111111111111\",\n    permission: \"all\",\n    userName: \"my-db-user\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.DocumentDBPrivilege(\"main\",\n    database_name=\"my-db-name\",\n    instance_id=\"11111111-1111-1111-1111-111111111111\",\n    permission=\"all\",\n    user_name=\"my-db-user\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DocumentDBPrivilege(\"main\", new()\n    {\n        DatabaseName = \"my-db-name\",\n        InstanceId = \"11111111-1111-1111-1111-111111111111\",\n        Permission = \"all\",\n        UserName = \"my-db-user\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDocumentDBPrivilege(ctx, \"main\", \u0026scaleway.DocumentDBPrivilegeArgs{\n\t\t\tDatabaseName: pulumi.String(\"my-db-name\"),\n\t\t\tInstanceId:   pulumi.String(\"11111111-1111-1111-1111-111111111111\"),\n\t\t\tPermission:   pulumi.String(\"all\"),\n\t\t\tUserName:     pulumi.String(\"my-db-user\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DocumentDBPrivilege;\nimport com.pulumi.scaleway.DocumentDBPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DocumentDBPrivilege(\"main\", DocumentDBPrivilegeArgs.builder()        \n            .databaseName(\"my-db-name\")\n            .instanceId(\"11111111-1111-1111-1111-111111111111\")\n            .permission(\"all\")\n            .userName(\"my-db-user\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DocumentDBPrivilege\n    properties:\n      databaseName: my-db-name\n      instanceId: 11111111-1111-1111-1111-111111111111\n      permission: all\n      userName: my-db-user\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThe user privileges can be imported using the `{region}/{instance_id}/{database_name}/{user_name}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/documentDBPrivilege:DocumentDBPrivilege o fr-par/11111111-1111-1111-1111-111111111111/database_name/foo\n```\n\n ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-db-name`).\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the rdb instance.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Name of the user (e.g. `my-db-user`).\n"
                }
            },
            "required": [
                "databaseName",
                "instanceId",
                "permission",
                "region",
                "userName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-db-name`).\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the rdb instance.\n",
                    "willReplaceOnChanges": true
                },
                "permission": {
                    "type": "string",
                    "description": "Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "Name of the user (e.g. `my-db-user`).\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "instanceId",
                "permission",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DocumentDBPrivilege resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Name of the database (e.g. `my-db-name`).\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the rdb instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "permission": {
                        "type": "string",
                        "description": "Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the resource exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "description": "Name of the user (e.g. `my-db-user`).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/documentDBReadReplica:DocumentDBReadReplica": {
            "description": "Creates and manages Scaleway DocumentDB Database read replicas.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/document_db/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst replica = new scaleway.DocumentDBReadReplica(\"replica\", {\n    directAccess: {},\n    instanceId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nreplica = scaleway.DocumentDBReadReplica(\"replica\",\n    direct_access=scaleway.DocumentDBReadReplicaDirectAccessArgs(),\n    instance_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var replica = new Scaleway.DocumentDBReadReplica(\"replica\", new()\n    {\n        DirectAccess = null,\n        InstanceId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDocumentDBReadReplica(ctx, \"replica\", \u0026scaleway.DocumentDBReadReplicaArgs{\n\t\t\tDirectAccess: nil,\n\t\t\tInstanceId:   pulumi.String(\"11111111-1111-1111-1111-111111111111\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DocumentDBReadReplica;\nimport com.pulumi.scaleway.DocumentDBReadReplicaArgs;\nimport com.pulumi.scaleway.inputs.DocumentDBReadReplicaDirectAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var replica = new DocumentDBReadReplica(\"replica\", DocumentDBReadReplicaArgs.builder()        \n            .directAccess()\n            .instanceId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  replica:\n    type: scaleway:DocumentDBReadReplica\n    properties:\n      directAccess: {}\n      instanceId: 11111111-1111-1111-1111-111111111111\n```\n\n### Private network\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {});\nconst replica = new scaleway.DocumentDBReadReplica(\"replica\", {\n    instanceId: scaleway_rdb_instance.instance.id,\n    privateNetwork: {\n        privateNetworkId: pn.id,\n        serviceIp: \"192.168.1.254/24\",\n    },\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\npn = scaleway.VpcPrivateNetwork(\"pn\")\nreplica = scaleway.DocumentDBReadReplica(\"replica\",\n    instance_id=scaleway_rdb_instance[\"instance\"][\"id\"],\n    private_network=scaleway.DocumentDBReadReplicaPrivateNetworkArgs(\n        private_network_id=pn.id,\n        service_ip=\"192.168.1.254/24\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\");\n\n    var replica = new Scaleway.DocumentDBReadReplica(\"replica\", new()\n    {\n        InstanceId = scaleway_rdb_instance.Instance.Id,\n        PrivateNetwork = new Scaleway.Inputs.DocumentDBReadReplicaPrivateNetworkArgs\n        {\n            PrivateNetworkId = pn.Id,\n            ServiceIp = \"192.168.1.254/24\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDocumentDBReadReplica(ctx, \"replica\", \u0026scaleway.DocumentDBReadReplicaArgs{\n\t\t\tInstanceId: pulumi.Any(scaleway_rdb_instance.Instance.Id),\n\t\t\tPrivateNetwork: \u0026scaleway.DocumentDBReadReplicaPrivateNetworkArgs{\n\t\t\t\tPrivateNetworkId: pn.ID(),\n\t\t\t\tServiceIp:        pulumi.String(\"192.168.1.254/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.DocumentDBReadReplica;\nimport com.pulumi.scaleway.DocumentDBReadReplicaArgs;\nimport com.pulumi.scaleway.inputs.DocumentDBReadReplicaPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn = new VpcPrivateNetwork(\"pn\");\n\n        var replica = new DocumentDBReadReplica(\"replica\", DocumentDBReadReplicaArgs.builder()        \n            .instanceId(scaleway_rdb_instance.instance().id())\n            .privateNetwork(DocumentDBReadReplicaPrivateNetworkArgs.builder()\n                .privateNetworkId(pn.id())\n                .serviceIp(\"192.168.1.254/24\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn:\n    type: scaleway:VpcPrivateNetwork\n  replica:\n    type: scaleway:DocumentDBReadReplica\n    properties:\n      instanceId: ${scaleway_rdb_instance.instance.id}\n      privateNetwork:\n        privateNetworkId: ${pn.id}\n        serviceIp: 192.168.1.254/24\n```\n\n\n## Import\n\nDatabase Read replica can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/documentDBReadReplica:DocumentDBReadReplica rr fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "directAccess": {
                    "$ref": "#/types/scaleway:index/DocumentDBReadReplicaDirectAccess:DocumentDBReadReplicaDirectAccess",
                    "description": "Creates a direct access endpoint to documentdb replica.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the documentdb instance.\n\n\u003e **Important:** The replica musts contains at least one of `direct_access` or `private_network`. It can contain both.\n"
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/DocumentDBReadReplicaPrivateNetwork:DocumentDBReadReplicaPrivateNetwork",
                    "description": "Create an endpoint in a private network.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the Database read replica should be created.\n"
                }
            },
            "required": [
                "instanceId",
                "region"
            ],
            "inputProperties": {
                "directAccess": {
                    "$ref": "#/types/scaleway:index/DocumentDBReadReplicaDirectAccess:DocumentDBReadReplicaDirectAccess",
                    "description": "Creates a direct access endpoint to documentdb replica.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the documentdb instance.\n\n\u003e **Important:** The replica musts contains at least one of `direct_access` or `private_network`. It can contain both.\n"
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/DocumentDBReadReplicaPrivateNetwork:DocumentDBReadReplicaPrivateNetwork",
                    "description": "Create an endpoint in a private network.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the Database read replica should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DocumentDBReadReplica resources.\n",
                "properties": {
                    "directAccess": {
                        "$ref": "#/types/scaleway:index/DocumentDBReadReplicaDirectAccess:DocumentDBReadReplicaDirectAccess",
                        "description": "Creates a direct access endpoint to documentdb replica.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the documentdb instance.\n\n\u003e **Important:** The replica musts contains at least one of `direct_access` or `private_network`. It can contain both.\n"
                    },
                    "privateNetwork": {
                        "$ref": "#/types/scaleway:index/DocumentDBReadReplicaPrivateNetwork:DocumentDBReadReplicaPrivateNetwork",
                        "description": "Create an endpoint in a private network.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region\nin which the Database read replica should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/documentDBUser:DocumentDBUser": {
            "description": "Creates and manages Scaleway Database DocumentDB Users.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/document_db/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as random from \"@pulumi/random\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst dbPassword = new random.RandomPassword(\"dbPassword\", {\n    length: 16,\n    special: true,\n});\nconst dbAdmin = new scaleway.DocumentDBUser(\"dbAdmin\", {\n    instanceId: \"11111111-1111-1111-1111-111111111111\",\n    password: dbPassword.result,\n    isAdmin: true,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_random as random\n\ndb_password = random.RandomPassword(\"dbPassword\",\n    length=16,\n    special=True)\ndb_admin = scaleway.DocumentDBUser(\"dbAdmin\",\n    instance_id=\"11111111-1111-1111-1111-111111111111\",\n    password=db_password.result,\n    is_admin=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Random = Pulumi.Random;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dbPassword = new Random.RandomPassword(\"dbPassword\", new()\n    {\n        Length = 16,\n        Special = true,\n    });\n\n    var dbAdmin = new Scaleway.DocumentDBUser(\"dbAdmin\", new()\n    {\n        InstanceId = \"11111111-1111-1111-1111-111111111111\",\n        Password = dbPassword.Result,\n        IsAdmin = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi-random/sdk/v4/go/random\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdbPassword, err := random.NewRandomPassword(ctx, \"dbPassword\", \u0026random.RandomPasswordArgs{\n\t\t\tLength:  pulumi.Int(16),\n\t\t\tSpecial: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDocumentDBUser(ctx, \"dbAdmin\", \u0026scaleway.DocumentDBUserArgs{\n\t\t\tInstanceId: pulumi.String(\"11111111-1111-1111-1111-111111111111\"),\n\t\t\tPassword:   dbPassword.Result,\n\t\t\tIsAdmin:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.random.RandomPassword;\nimport com.pulumi.random.RandomPasswordArgs;\nimport com.pulumi.scaleway.DocumentDBUser;\nimport com.pulumi.scaleway.DocumentDBUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dbPassword = new RandomPassword(\"dbPassword\", RandomPasswordArgs.builder()        \n            .length(16)\n            .special(true)\n            .build());\n\n        var dbAdmin = new DocumentDBUser(\"dbAdmin\", DocumentDBUserArgs.builder()        \n            .instanceId(\"11111111-1111-1111-1111-111111111111\")\n            .password(dbPassword.result())\n            .isAdmin(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dbPassword:\n    type: random:RandomPassword\n    properties:\n      length: 16\n      special: true\n  dbAdmin:\n    type: scaleway:DocumentDBUser\n    properties:\n      instanceId: 11111111-1111-1111-1111-111111111111\n      password: ${dbPassword.result}\n      isAdmin: true\n```\n\n\n## Import\n\nDatabase User can be imported using `{region}/{instance_id}/{user_name}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/documentDBUser:DocumentDBUser admin fr-par/11111111-1111-1111-1111-111111111111/admin\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the documentDB instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database User.\n"
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Grant admin permissions to the Database User.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Database Username.\n\n\u003e **Important:** Updates to `name` will recreate the Database User.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Database User password.\n",
                    "secret": true
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region this resource resides in.\n"
                }
            },
            "required": [
                "instanceId",
                "name",
                "password",
                "region"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the documentDB instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database User.\n",
                    "willReplaceOnChanges": true
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Grant admin permissions to the Database User.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Database Username.\n\n\u003e **Important:** Updates to `name` will recreate the Database User.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "Database User password.\n",
                    "secret": true
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region this resource resides in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId",
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DocumentDBUser resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the documentDB instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database User.\n",
                        "willReplaceOnChanges": true
                    },
                    "isAdmin": {
                        "type": "boolean",
                        "description": "Grant admin permissions to the Database User.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Database Username.\n\n\u003e **Important:** Updates to `name` will recreate the Database User.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "Database User password.\n",
                        "secret": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The Scaleway region this resource resides in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/domainRecord:DomainRecord": {
            "description": "Creates and manages Scaleway Domain record.  \nFor more information, see [the documentation](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst www = new scaleway.DomainRecord(\"www\", {\n    data: \"1.2.3.4\",\n    dnsZone: \"domain.tld\",\n    ttl: 3600,\n    type: \"A\",\n});\nconst www2 = new scaleway.DomainRecord(\"www2\", {\n    data: \"1.2.3.5\",\n    dnsZone: \"domain.tld\",\n    ttl: 3600,\n    type: \"A\",\n});\nconst mx = new scaleway.DomainRecord(\"mx\", {\n    data: \"mx.online.net.\",\n    dnsZone: \"domain.tld\",\n    priority: 10,\n    ttl: 3600,\n    type: \"MX\",\n});\nconst mx2 = new scaleway.DomainRecord(\"mx2\", {\n    data: \"mx-cache.online.net.\",\n    dnsZone: \"domain.tld\",\n    priority: 20,\n    ttl: 3600,\n    type: \"MX\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nwww = scaleway.DomainRecord(\"www\",\n    data=\"1.2.3.4\",\n    dns_zone=\"domain.tld\",\n    ttl=3600,\n    type=\"A\")\nwww2 = scaleway.DomainRecord(\"www2\",\n    data=\"1.2.3.5\",\n    dns_zone=\"domain.tld\",\n    ttl=3600,\n    type=\"A\")\nmx = scaleway.DomainRecord(\"mx\",\n    data=\"mx.online.net.\",\n    dns_zone=\"domain.tld\",\n    priority=10,\n    ttl=3600,\n    type=\"MX\")\nmx2 = scaleway.DomainRecord(\"mx2\",\n    data=\"mx-cache.online.net.\",\n    dns_zone=\"domain.tld\",\n    priority=20,\n    ttl=3600,\n    type=\"MX\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var www = new Scaleway.DomainRecord(\"www\", new()\n    {\n        Data = \"1.2.3.4\",\n        DnsZone = \"domain.tld\",\n        Ttl = 3600,\n        Type = \"A\",\n    });\n\n    var www2 = new Scaleway.DomainRecord(\"www2\", new()\n    {\n        Data = \"1.2.3.5\",\n        DnsZone = \"domain.tld\",\n        Ttl = 3600,\n        Type = \"A\",\n    });\n\n    var mx = new Scaleway.DomainRecord(\"mx\", new()\n    {\n        Data = \"mx.online.net.\",\n        DnsZone = \"domain.tld\",\n        Priority = 10,\n        Ttl = 3600,\n        Type = \"MX\",\n    });\n\n    var mx2 = new Scaleway.DomainRecord(\"mx2\", new()\n    {\n        Data = \"mx-cache.online.net.\",\n        DnsZone = \"domain.tld\",\n        Priority = 20,\n        Ttl = 3600,\n        Type = \"MX\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDomainRecord(ctx, \"www\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"www2\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:    pulumi.String(\"1.2.3.5\"),\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"mx\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:     pulumi.String(\"mx.online.net.\"),\n\t\t\tDnsZone:  pulumi.String(\"domain.tld\"),\n\t\t\tPriority: pulumi.Int(10),\n\t\t\tTtl:      pulumi.Int(3600),\n\t\t\tType:     pulumi.String(\"MX\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"mx2\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:     pulumi.String(\"mx-cache.online.net.\"),\n\t\t\tDnsZone:  pulumi.String(\"domain.tld\"),\n\t\t\tPriority: pulumi.Int(20),\n\t\t\tTtl:      pulumi.Int(3600),\n\t\t\tType:     pulumi.String(\"MX\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var www = new DomainRecord(\"www\", DomainRecordArgs.builder()        \n            .data(\"1.2.3.4\")\n            .dnsZone(\"domain.tld\")\n            .ttl(3600)\n            .type(\"A\")\n            .build());\n\n        var www2 = new DomainRecord(\"www2\", DomainRecordArgs.builder()        \n            .data(\"1.2.3.5\")\n            .dnsZone(\"domain.tld\")\n            .ttl(3600)\n            .type(\"A\")\n            .build());\n\n        var mx = new DomainRecord(\"mx\", DomainRecordArgs.builder()        \n            .data(\"mx.online.net.\")\n            .dnsZone(\"domain.tld\")\n            .priority(10)\n            .ttl(3600)\n            .type(\"MX\")\n            .build());\n\n        var mx2 = new DomainRecord(\"mx2\", DomainRecordArgs.builder()        \n            .data(\"mx-cache.online.net.\")\n            .dnsZone(\"domain.tld\")\n            .priority(20)\n            .ttl(3600)\n            .type(\"MX\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  www:\n    type: scaleway:DomainRecord\n    properties:\n      data: 1.2.3.4\n      dnsZone: domain.tld\n      ttl: 3600\n      type: A\n  www2:\n    type: scaleway:DomainRecord\n    properties:\n      data: 1.2.3.5\n      dnsZone: domain.tld\n      ttl: 3600\n      type: A\n  mx:\n    type: scaleway:DomainRecord\n    properties:\n      data: mx.online.net.\n      dnsZone: domain.tld\n      priority: 10\n      ttl: 3600\n      type: MX\n  mx2:\n    type: scaleway:DomainRecord\n    properties:\n      data: mx-cache.online.net.\n      dnsZone: domain.tld\n      priority: 20\n      ttl: 3600\n      type: MX\n```\n\n### With dynamic records\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst geoIp = new scaleway.DomainRecord(\"geoIp\", {\n    data: \"1.2.3.4\",\n    dnsZone: \"domain.tld\",\n    geoIp: {\n        matches: [\n            {\n                continents: [\"EU\"],\n                countries: [\"FR\"],\n                data: \"1.2.3.5\",\n            },\n            {\n                continents: [\"NA\"],\n                data: \"4.3.2.1\",\n            },\n        ],\n    },\n    ttl: 3600,\n    type: \"A\",\n});\nconst httpService = new scaleway.DomainRecord(\"httpService\", {\n    data: \"1.2.3.4\",\n    dnsZone: \"domain.tld\",\n    httpService: {\n        ips: [\n            \"1.2.3.5\",\n            \"1.2.3.6\",\n        ],\n        mustContain: \"up\",\n        strategy: \"hashed\",\n        url: \"http://mywebsite.com/health\",\n        userAgent: \"scw_service_up\",\n    },\n    ttl: 3600,\n    type: \"A\",\n});\nconst view = new scaleway.DomainRecord(\"view\", {\n    data: \"1.2.3.4\",\n    dnsZone: \"domain.tld\",\n    ttl: 3600,\n    type: \"A\",\n    views: [\n        {\n            data: \"1.2.3.5\",\n            subnet: \"100.0.0.0/16\",\n        },\n        {\n            data: \"1.2.3.6\",\n            subnet: \"100.1.0.0/16\",\n        },\n    ],\n});\nconst weighted = new scaleway.DomainRecord(\"weighted\", {\n    data: \"1.2.3.4\",\n    dnsZone: \"domain.tld\",\n    ttl: 3600,\n    type: \"A\",\n    weighteds: [\n        {\n            ip: \"1.2.3.5\",\n            weight: 1,\n        },\n        {\n            ip: \"1.2.3.6\",\n            weight: 2,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\ngeo_ip = scaleway.DomainRecord(\"geoIp\",\n    data=\"1.2.3.4\",\n    dns_zone=\"domain.tld\",\n    geo_ip=scaleway.DomainRecordGeoIpArgs(\n        matches=[\n            scaleway.DomainRecordGeoIpMatchArgs(\n                continents=[\"EU\"],\n                countries=[\"FR\"],\n                data=\"1.2.3.5\",\n            ),\n            scaleway.DomainRecordGeoIpMatchArgs(\n                continents=[\"NA\"],\n                data=\"4.3.2.1\",\n            ),\n        ],\n    ),\n    ttl=3600,\n    type=\"A\")\nhttp_service = scaleway.DomainRecord(\"httpService\",\n    data=\"1.2.3.4\",\n    dns_zone=\"domain.tld\",\n    http_service=scaleway.DomainRecordHttpServiceArgs(\n        ips=[\n            \"1.2.3.5\",\n            \"1.2.3.6\",\n        ],\n        must_contain=\"up\",\n        strategy=\"hashed\",\n        url=\"http://mywebsite.com/health\",\n        user_agent=\"scw_service_up\",\n    ),\n    ttl=3600,\n    type=\"A\")\nview = scaleway.DomainRecord(\"view\",\n    data=\"1.2.3.4\",\n    dns_zone=\"domain.tld\",\n    ttl=3600,\n    type=\"A\",\n    views=[\n        scaleway.DomainRecordViewArgs(\n            data=\"1.2.3.5\",\n            subnet=\"100.0.0.0/16\",\n        ),\n        scaleway.DomainRecordViewArgs(\n            data=\"1.2.3.6\",\n            subnet=\"100.1.0.0/16\",\n        ),\n    ])\nweighted = scaleway.DomainRecord(\"weighted\",\n    data=\"1.2.3.4\",\n    dns_zone=\"domain.tld\",\n    ttl=3600,\n    type=\"A\",\n    weighteds=[\n        scaleway.DomainRecordWeightedArgs(\n            ip=\"1.2.3.5\",\n            weight=1,\n        ),\n        scaleway.DomainRecordWeightedArgs(\n            ip=\"1.2.3.6\",\n            weight=2,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var geoIp = new Scaleway.DomainRecord(\"geoIp\", new()\n    {\n        Data = \"1.2.3.4\",\n        DnsZone = \"domain.tld\",\n        GeoIp = new Scaleway.Inputs.DomainRecordGeoIpArgs\n        {\n            Matches = new[]\n            {\n                new Scaleway.Inputs.DomainRecordGeoIpMatchArgs\n                {\n                    Continents = new[]\n                    {\n                        \"EU\",\n                    },\n                    Countries = new[]\n                    {\n                        \"FR\",\n                    },\n                    Data = \"1.2.3.5\",\n                },\n                new Scaleway.Inputs.DomainRecordGeoIpMatchArgs\n                {\n                    Continents = new[]\n                    {\n                        \"NA\",\n                    },\n                    Data = \"4.3.2.1\",\n                },\n            },\n        },\n        Ttl = 3600,\n        Type = \"A\",\n    });\n\n    var httpService = new Scaleway.DomainRecord(\"httpService\", new()\n    {\n        Data = \"1.2.3.4\",\n        DnsZone = \"domain.tld\",\n        HttpService = new Scaleway.Inputs.DomainRecordHttpServiceArgs\n        {\n            Ips = new[]\n            {\n                \"1.2.3.5\",\n                \"1.2.3.6\",\n            },\n            MustContain = \"up\",\n            Strategy = \"hashed\",\n            Url = \"http://mywebsite.com/health\",\n            UserAgent = \"scw_service_up\",\n        },\n        Ttl = 3600,\n        Type = \"A\",\n    });\n\n    var view = new Scaleway.DomainRecord(\"view\", new()\n    {\n        Data = \"1.2.3.4\",\n        DnsZone = \"domain.tld\",\n        Ttl = 3600,\n        Type = \"A\",\n        Views = new[]\n        {\n            new Scaleway.Inputs.DomainRecordViewArgs\n            {\n                Data = \"1.2.3.5\",\n                Subnet = \"100.0.0.0/16\",\n            },\n            new Scaleway.Inputs.DomainRecordViewArgs\n            {\n                Data = \"1.2.3.6\",\n                Subnet = \"100.1.0.0/16\",\n            },\n        },\n    });\n\n    var weighted = new Scaleway.DomainRecord(\"weighted\", new()\n    {\n        Data = \"1.2.3.4\",\n        DnsZone = \"domain.tld\",\n        Ttl = 3600,\n        Type = \"A\",\n        Weighteds = new[]\n        {\n            new Scaleway.Inputs.DomainRecordWeightedArgs\n            {\n                Ip = \"1.2.3.5\",\n                Weight = 1,\n            },\n            new Scaleway.Inputs.DomainRecordWeightedArgs\n            {\n                Ip = \"1.2.3.6\",\n                Weight = 2,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDomainRecord(ctx, \"geoIp\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tGeoIp: \u0026scaleway.DomainRecordGeoIpArgs{\n\t\t\t\tMatches: scaleway.DomainRecordGeoIpMatchArray{\n\t\t\t\t\t\u0026scaleway.DomainRecordGeoIpMatchArgs{\n\t\t\t\t\t\tContinents: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"EU\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tCountries: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"FR\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tData: pulumi.String(\"1.2.3.5\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026scaleway.DomainRecordGeoIpMatchArgs{\n\t\t\t\t\t\tContinents: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"NA\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tData: pulumi.String(\"4.3.2.1\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTtl:  pulumi.Int(3600),\n\t\t\tType: pulumi.String(\"A\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"httpService\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tHttpService: \u0026scaleway.DomainRecordHttpServiceArgs{\n\t\t\t\tIps: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"1.2.3.5\"),\n\t\t\t\t\tpulumi.String(\"1.2.3.6\"),\n\t\t\t\t},\n\t\t\t\tMustContain: pulumi.String(\"up\"),\n\t\t\t\tStrategy:    pulumi.String(\"hashed\"),\n\t\t\t\tUrl:         pulumi.String(\"http://mywebsite.com/health\"),\n\t\t\t\tUserAgent:   pulumi.String(\"scw_service_up\"),\n\t\t\t},\n\t\t\tTtl:  pulumi.Int(3600),\n\t\t\tType: pulumi.String(\"A\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"view\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t\tViews: scaleway.DomainRecordViewArray{\n\t\t\t\t\u0026scaleway.DomainRecordViewArgs{\n\t\t\t\t\tData:   pulumi.String(\"1.2.3.5\"),\n\t\t\t\t\tSubnet: pulumi.String(\"100.0.0.0/16\"),\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.DomainRecordViewArgs{\n\t\t\t\t\tData:   pulumi.String(\"1.2.3.6\"),\n\t\t\t\t\tSubnet: pulumi.String(\"100.1.0.0/16\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"weighted\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t\tWeighteds: scaleway.DomainRecordWeightedArray{\n\t\t\t\t\u0026scaleway.DomainRecordWeightedArgs{\n\t\t\t\t\tIp:     pulumi.String(\"1.2.3.5\"),\n\t\t\t\t\tWeight: pulumi.Int(1),\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.DomainRecordWeightedArgs{\n\t\t\t\t\tIp:     pulumi.String(\"1.2.3.6\"),\n\t\t\t\t\tWeight: pulumi.Int(2),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport com.pulumi.scaleway.inputs.DomainRecordGeoIpArgs;\nimport com.pulumi.scaleway.inputs.DomainRecordHttpServiceArgs;\nimport com.pulumi.scaleway.inputs.DomainRecordViewArgs;\nimport com.pulumi.scaleway.inputs.DomainRecordWeightedArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var geoIp = new DomainRecord(\"geoIp\", DomainRecordArgs.builder()        \n            .data(\"1.2.3.4\")\n            .dnsZone(\"domain.tld\")\n            .geoIp(DomainRecordGeoIpArgs.builder()\n                .matches(                \n                    DomainRecordGeoIpMatchArgs.builder()\n                        .continents(\"EU\")\n                        .countries(\"FR\")\n                        .data(\"1.2.3.5\")\n                        .build(),\n                    DomainRecordGeoIpMatchArgs.builder()\n                        .continents(\"NA\")\n                        .data(\"4.3.2.1\")\n                        .build())\n                .build())\n            .ttl(3600)\n            .type(\"A\")\n            .build());\n\n        var httpService = new DomainRecord(\"httpService\", DomainRecordArgs.builder()        \n            .data(\"1.2.3.4\")\n            .dnsZone(\"domain.tld\")\n            .httpService(DomainRecordHttpServiceArgs.builder()\n                .ips(                \n                    \"1.2.3.5\",\n                    \"1.2.3.6\")\n                .mustContain(\"up\")\n                .strategy(\"hashed\")\n                .url(\"http://mywebsite.com/health\")\n                .userAgent(\"scw_service_up\")\n                .build())\n            .ttl(3600)\n            .type(\"A\")\n            .build());\n\n        var view = new DomainRecord(\"view\", DomainRecordArgs.builder()        \n            .data(\"1.2.3.4\")\n            .dnsZone(\"domain.tld\")\n            .ttl(3600)\n            .type(\"A\")\n            .views(            \n                DomainRecordViewArgs.builder()\n                    .data(\"1.2.3.5\")\n                    .subnet(\"100.0.0.0/16\")\n                    .build(),\n                DomainRecordViewArgs.builder()\n                    .data(\"1.2.3.6\")\n                    .subnet(\"100.1.0.0/16\")\n                    .build())\n            .build());\n\n        var weighted = new DomainRecord(\"weighted\", DomainRecordArgs.builder()        \n            .data(\"1.2.3.4\")\n            .dnsZone(\"domain.tld\")\n            .ttl(3600)\n            .type(\"A\")\n            .weighteds(            \n                DomainRecordWeightedArgs.builder()\n                    .ip(\"1.2.3.5\")\n                    .weight(1)\n                    .build(),\n                DomainRecordWeightedArgs.builder()\n                    .ip(\"1.2.3.6\")\n                    .weight(2)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  geoIp:\n    type: scaleway:DomainRecord\n    properties:\n      data: 1.2.3.4\n      dnsZone: domain.tld\n      geoIp:\n        matches:\n          - continents:\n              - EU\n            countries:\n              - FR\n            data: 1.2.3.5\n          - continents:\n              - NA\n            data: 4.3.2.1\n      ttl: 3600\n      type: A\n  httpService:\n    type: scaleway:DomainRecord\n    properties:\n      data: 1.2.3.4\n      dnsZone: domain.tld\n      httpService:\n        ips:\n          - 1.2.3.5\n          - 1.2.3.6\n        mustContain: up\n        strategy: hashed\n        url: http://mywebsite.com/health\n        userAgent: scw_service_up\n      ttl: 3600\n      type: A\n  view:\n    type: scaleway:DomainRecord\n    properties:\n      data: 1.2.3.4\n      dnsZone: domain.tld\n      ttl: 3600\n      type: A\n      views:\n        - data: 1.2.3.5\n          subnet: 100.0.0.0/16\n        - data: 1.2.3.6\n          subnet: 100.1.0.0/16\n  weighted:\n    type: scaleway:DomainRecord\n    properties:\n      data: 1.2.3.4\n      dnsZone: domain.tld\n      ttl: 3600\n      type: A\n      weighteds:\n        - ip: 1.2.3.5\n          weight: 1\n        - ip: 1.2.3.6\n          weight: 2\n```\n\n### Create an instance and add records with the new instance IP\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst config = new pulumi.Config();\nconst projectId = config.require(\"projectId\");\nconst dnsZone = config.require(\"dnsZone\");\nconst publicIp = new scaleway.InstanceIp(\"publicIp\", {projectId: projectId});\nconst web = new scaleway.InstanceServer(\"web\", {\n    projectId: projectId,\n    type: \"DEV1-S\",\n    image: \"ubuntu_jammy\",\n    tags: [\n        \"front\",\n        \"web\",\n    ],\n    ipId: publicIp.id,\n    rootVolume: {\n        sizeInGb: 20,\n    },\n});\nconst webA = new scaleway.DomainRecord(\"webA\", {\n    dnsZone: dnsZone,\n    type: \"A\",\n    data: web.publicIp,\n    ttl: 3600,\n});\nconst webCname = new scaleway.DomainRecord(\"webCname\", {\n    dnsZone: dnsZone,\n    type: \"CNAME\",\n    data: `web.${dnsZone}.`,\n    ttl: 3600,\n});\nconst webAlias = new scaleway.DomainRecord(\"webAlias\", {\n    dnsZone: dnsZone,\n    type: \"ALIAS\",\n    data: `web.${dnsZone}.`,\n    ttl: 3600,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nconfig = pulumi.Config()\nproject_id = config.require(\"projectId\")\ndns_zone = config.require(\"dnsZone\")\npublic_ip = scaleway.InstanceIp(\"publicIp\", project_id=project_id)\nweb = scaleway.InstanceServer(\"web\",\n    project_id=project_id,\n    type=\"DEV1-S\",\n    image=\"ubuntu_jammy\",\n    tags=[\n        \"front\",\n        \"web\",\n    ],\n    ip_id=public_ip.id,\n    root_volume=scaleway.InstanceServerRootVolumeArgs(\n        size_in_gb=20,\n    ))\nweb_a = scaleway.DomainRecord(\"webA\",\n    dns_zone=dns_zone,\n    type=\"A\",\n    data=web.public_ip,\n    ttl=3600)\nweb_cname = scaleway.DomainRecord(\"webCname\",\n    dns_zone=dns_zone,\n    type=\"CNAME\",\n    data=f\"web.{dns_zone}.\",\n    ttl=3600)\nweb_alias = scaleway.DomainRecord(\"webAlias\",\n    dns_zone=dns_zone,\n    type=\"ALIAS\",\n    data=f\"web.{dns_zone}.\",\n    ttl=3600)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var projectId = config.Require(\"projectId\");\n    var dnsZone = config.Require(\"dnsZone\");\n    var publicIp = new Scaleway.InstanceIp(\"publicIp\", new()\n    {\n        ProjectId = projectId,\n    });\n\n    var web = new Scaleway.InstanceServer(\"web\", new()\n    {\n        ProjectId = projectId,\n        Type = \"DEV1-S\",\n        Image = \"ubuntu_jammy\",\n        Tags = new[]\n        {\n            \"front\",\n            \"web\",\n        },\n        IpId = publicIp.Id,\n        RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs\n        {\n            SizeInGb = 20,\n        },\n    });\n\n    var webA = new Scaleway.DomainRecord(\"webA\", new()\n    {\n        DnsZone = dnsZone,\n        Type = \"A\",\n        Data = web.PublicIp,\n        Ttl = 3600,\n    });\n\n    var webCname = new Scaleway.DomainRecord(\"webCname\", new()\n    {\n        DnsZone = dnsZone,\n        Type = \"CNAME\",\n        Data = $\"web.{dnsZone}.\",\n        Ttl = 3600,\n    });\n\n    var webAlias = new Scaleway.DomainRecord(\"webAlias\", new()\n    {\n        DnsZone = dnsZone,\n        Type = \"ALIAS\",\n        Data = $\"web.{dnsZone}.\",\n        Ttl = 3600,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tprojectId := cfg.Require(\"projectId\")\n\t\tdnsZone := cfg.Require(\"dnsZone\")\n\t\tpublicIp, err := scaleway.NewInstanceIp(ctx, \"publicIp\", \u0026scaleway.InstanceIpArgs{\n\t\t\tProjectId: pulumi.String(projectId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tweb, err := scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tProjectId: pulumi.String(projectId),\n\t\t\tType:      pulumi.String(\"DEV1-S\"),\n\t\t\tImage:     pulumi.String(\"ubuntu_jammy\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"front\"),\n\t\t\t\tpulumi.String(\"web\"),\n\t\t\t},\n\t\t\tIpId: publicIp.ID(),\n\t\t\tRootVolume: \u0026scaleway.InstanceServerRootVolumeArgs{\n\t\t\t\tSizeInGb: pulumi.Int(20),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"webA\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(dnsZone),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t\tData:    web.PublicIp,\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"webCname\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(dnsZone),\n\t\t\tType:    pulumi.String(\"CNAME\"),\n\t\t\tData:    pulumi.String(fmt.Sprintf(\"web.%v.\", dnsZone)),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"webAlias\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(dnsZone),\n\t\t\tType:    pulumi.String(\"ALIAS\"),\n\t\t\tData:    pulumi.String(fmt.Sprintf(\"web.%v.\", dnsZone)),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceIp;\nimport com.pulumi.scaleway.InstanceIpArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerRootVolumeArgs;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var projectId = config.get(\"projectId\");\n        final var dnsZone = config.get(\"dnsZone\");\n        var publicIp = new InstanceIp(\"publicIp\", InstanceIpArgs.builder()        \n            .projectId(projectId)\n            .build());\n\n        var web = new InstanceServer(\"web\", InstanceServerArgs.builder()        \n            .projectId(projectId)\n            .type(\"DEV1-S\")\n            .image(\"ubuntu_jammy\")\n            .tags(            \n                \"front\",\n                \"web\")\n            .ipId(publicIp.id())\n            .rootVolume(InstanceServerRootVolumeArgs.builder()\n                .sizeInGb(20)\n                .build())\n            .build());\n\n        var webA = new DomainRecord(\"webA\", DomainRecordArgs.builder()        \n            .dnsZone(dnsZone)\n            .type(\"A\")\n            .data(web.publicIp())\n            .ttl(3600)\n            .build());\n\n        var webCname = new DomainRecord(\"webCname\", DomainRecordArgs.builder()        \n            .dnsZone(dnsZone)\n            .type(\"CNAME\")\n            .data(String.format(\"web.%s.\", dnsZone))\n            .ttl(3600)\n            .build());\n\n        var webAlias = new DomainRecord(\"webAlias\", DomainRecordArgs.builder()        \n            .dnsZone(dnsZone)\n            .type(\"ALIAS\")\n            .data(String.format(\"web.%s.\", dnsZone))\n            .ttl(3600)\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  projectId:\n    type: string\n  dnsZone:\n    type: string\nresources:\n  publicIp:\n    type: scaleway:InstanceIp\n    properties:\n      projectId: ${projectId}\n  web:\n    type: scaleway:InstanceServer\n    properties:\n      projectId: ${projectId}\n      type: DEV1-S\n      image: ubuntu_jammy\n      tags:\n        - front\n        - web\n      ipId: ${publicIp.id}\n      rootVolume:\n        sizeInGb: 20\n  webA:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: ${dnsZone}\n      type: A\n      data: ${web.publicIp}\n      ttl: 3600\n  webCname:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: ${dnsZone}\n      type: CNAME\n      data: web.${dnsZone}.\n      ttl: 3600\n  webAlias:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: ${dnsZone}\n      type: ALIAS\n      data: web.${dnsZone}.\n      ttl: 3600\n```\n\n## Multiple records\n\nSome record types can have multiple `data` with the same `name` (eg: `A`, `AAAA`, `MX`, `NS`...).  \nYou can duplicate a resource `scaleway.DomainRecord` with the same `name`, the records will be added.\n\nPlease note, some record (eg: `CNAME`, Multiple dynamic records of different types...) has to be unique.\n\n\n## Import\n\nRecord can be imported using the `{dns_zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/domainRecord:DomainRecord www subdomain.domain.tld/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "data": {
                    "type": "string",
                    "description": "The content of the record (an IPv4 for an `A`, a string for a `TXT`...).\n"
                },
                "dnsZone": {
                    "type": "string",
                    "description": "The DNS Zone of the domain. If the DNS zone doesn't exist, it will be automatically created.\n"
                },
                "geoIp": {
                    "$ref": "#/types/scaleway:index/DomainRecordGeoIp:DomainRecordGeoIp",
                    "description": "The Geo IP feature provides DNS resolution, based on the user’s geographical location. You can define a default IP that resolves if no Geo IP rule matches, and specify IPs for each geographical zone. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#geo-ip-records)\n"
                },
                "httpService": {
                    "$ref": "#/types/scaleway:index/DomainRecordHttpService:DomainRecordHttpService",
                    "description": "The DNS service checks the provided URL on the configured IPs and resolves the request to one of the IPs by excluding the ones not responding to the given string to check. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#healthcheck-records)\n"
                },
                "keepEmptyZone": {
                    "type": "boolean",
                    "description": "When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Please note, each zone not deleted will [cost you money](https://www.scaleway.com/en/dns/)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the record (can be an empty string for a root record).\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the record (mostly used with an `MX` record)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "rootZone": {
                    "type": "boolean",
                    "description": "Does the DNS zone is the root zone or not\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "Time To Live of the record in seconds.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).\n"
                },
                "views": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordView:DomainRecordView"
                    },
                    "description": "The answer to a DNS request is based on the client’s (resolver) subnet. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#views-records)\n"
                },
                "weighteds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordWeighted:DomainRecordWeighted"
                    },
                    "description": "You provide a list of IPs with their corresponding weights. These weights are used to proportionally direct requests to each IP. Depending on the weight of a record more or fewer requests are answered with its related IP compared to the others in the list. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#weight-records)\n"
                }
            },
            "required": [
                "data",
                "dnsZone",
                "name",
                "priority",
                "projectId",
                "rootZone",
                "type"
            ],
            "inputProperties": {
                "data": {
                    "type": "string",
                    "description": "The content of the record (an IPv4 for an `A`, a string for a `TXT`...).\n"
                },
                "dnsZone": {
                    "type": "string",
                    "description": "The DNS Zone of the domain. If the DNS zone doesn't exist, it will be automatically created.\n",
                    "willReplaceOnChanges": true
                },
                "geoIp": {
                    "$ref": "#/types/scaleway:index/DomainRecordGeoIp:DomainRecordGeoIp",
                    "description": "The Geo IP feature provides DNS resolution, based on the user’s geographical location. You can define a default IP that resolves if no Geo IP rule matches, and specify IPs for each geographical zone. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#geo-ip-records)\n"
                },
                "httpService": {
                    "$ref": "#/types/scaleway:index/DomainRecordHttpService:DomainRecordHttpService",
                    "description": "The DNS service checks the provided URL on the configured IPs and resolves the request to one of the IPs by excluding the ones not responding to the given string to check. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#healthcheck-records)\n"
                },
                "keepEmptyZone": {
                    "type": "boolean",
                    "description": "When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Please note, each zone not deleted will [cost you money](https://www.scaleway.com/en/dns/)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the record (can be an empty string for a root record).\n",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the record (mostly used with an `MX` record)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                },
                "ttl": {
                    "type": "integer",
                    "description": "Time To Live of the record in seconds.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).\n",
                    "willReplaceOnChanges": true
                },
                "views": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordView:DomainRecordView"
                    },
                    "description": "The answer to a DNS request is based on the client’s (resolver) subnet. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#views-records)\n"
                },
                "weighteds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordWeighted:DomainRecordWeighted"
                    },
                    "description": "You provide a list of IPs with their corresponding weights. These weights are used to proportionally direct requests to each IP. Depending on the weight of a record more or fewer requests are answered with its related IP compared to the others in the list. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#weight-records)\n"
                }
            },
            "requiredInputs": [
                "data",
                "dnsZone",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DomainRecord resources.\n",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The content of the record (an IPv4 for an `A`, a string for a `TXT`...).\n"
                    },
                    "dnsZone": {
                        "type": "string",
                        "description": "The DNS Zone of the domain. If the DNS zone doesn't exist, it will be automatically created.\n",
                        "willReplaceOnChanges": true
                    },
                    "geoIp": {
                        "$ref": "#/types/scaleway:index/DomainRecordGeoIp:DomainRecordGeoIp",
                        "description": "The Geo IP feature provides DNS resolution, based on the user’s geographical location. You can define a default IP that resolves if no Geo IP rule matches, and specify IPs for each geographical zone. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#geo-ip-records)\n"
                    },
                    "httpService": {
                        "$ref": "#/types/scaleway:index/DomainRecordHttpService:DomainRecordHttpService",
                        "description": "The DNS service checks the provided URL on the configured IPs and resolves the request to one of the IPs by excluding the ones not responding to the given string to check. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#healthcheck-records)\n"
                    },
                    "keepEmptyZone": {
                        "type": "boolean",
                        "description": "When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Please note, each zone not deleted will [cost you money](https://www.scaleway.com/en/dns/)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the record (can be an empty string for a root record).\n",
                        "willReplaceOnChanges": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "The priority of the record (mostly used with an `MX` record)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project_id you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "rootZone": {
                        "type": "boolean",
                        "description": "Does the DNS zone is the root zone or not\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "Time To Live of the record in seconds.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).\n",
                        "willReplaceOnChanges": true
                    },
                    "views": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/DomainRecordView:DomainRecordView"
                        },
                        "description": "The answer to a DNS request is based on the client’s (resolver) subnet. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#views-records)\n"
                    },
                    "weighteds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/DomainRecordWeighted:DomainRecordWeighted"
                        },
                        "description": "You provide a list of IPs with their corresponding weights. These weights are used to proportionally direct requests to each IP. Depending on the weight of a record more or fewer requests are answered with its related IP compared to the others in the list. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#weight-records)\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/domainZone:DomainZone": {
            "description": "Creates and manages Scaleway Domain zone.  \nFor more information, see [the documentation](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/configure-dns-zones/).\n\n## Examples\n\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst test = new scaleway.DomainZone(\"test\", {\n    domain: \"scaleway-terraform.com\",\n    subdomain: \"test\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\ntest = scaleway.DomainZone(\"test\",\n    domain=\"scaleway-terraform.com\",\n    subdomain=\"test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Scaleway.DomainZone(\"test\", new()\n    {\n        Domain = \"scaleway-terraform.com\",\n        Subdomain = \"test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDomainZone(ctx, \"test\", \u0026scaleway.DomainZoneArgs{\n\t\t\tDomain:    pulumi.String(\"scaleway-terraform.com\"),\n\t\t\tSubdomain: pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DomainZone;\nimport com.pulumi.scaleway.DomainZoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new DomainZone(\"test\", DomainZoneArgs.builder()        \n            .domain(\"scaleway-terraform.com\")\n            .subdomain(\"test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: scaleway:DomainZone\n    properties:\n      domain: scaleway-terraform.com\n      subdomain: test\n```\n\n\n## Import\n\nZone can be imported using the `{subdomain}.{domain}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/domainZone:DomainZone test test.scaleway-terraform.com\n```\n\n ",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The domain where the DNS zone will be created.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Message\n"
                },
                "ns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "NameServer list for zone.\n"
                },
                "nsDefaults": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "NameServer default list for zone.\n"
                },
                "nsMasters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "NameServer master list for zone.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the domain is associated with.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The domain zone status.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "The subdomain(zone name) to create in the domain.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the DNS zone.\n"
                }
            },
            "required": [
                "domain",
                "message",
                "ns",
                "nsDefaults",
                "nsMasters",
                "projectId",
                "status",
                "subdomain",
                "updatedAt"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The domain where the DNS zone will be created.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the domain is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "The subdomain(zone name) to create in the domain.\n"
                }
            },
            "requiredInputs": [
                "domain",
                "subdomain"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DomainZone resources.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The domain where the DNS zone will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "message": {
                        "type": "string",
                        "description": "Message\n"
                    },
                    "ns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "NameServer list for zone.\n"
                    },
                    "nsDefaults": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "NameServer default list for zone.\n"
                    },
                    "nsMasters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "NameServer master list for zone.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the domain is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The domain zone status.\n"
                    },
                    "subdomain": {
                        "type": "string",
                        "description": "The subdomain(zone name) to create in the domain.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the DNS zone.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/flexibleIp:FlexibleIp": {
            "description": "Creates and manages Scaleway flexible IPs.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/flexible-ip/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.FlexibleIp(\"main\", {reverse: \"my-reverse.com\"});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.FlexibleIp(\"main\", reverse=\"my-reverse.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.FlexibleIp(\"main\", new()\n    {\n        Reverse = \"my-reverse.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewFlexibleIp(ctx, \"main\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tReverse: pulumi.String(\"my-reverse.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FlexibleIp;\nimport com.pulumi.scaleway.FlexibleIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new FlexibleIp(\"main\", FlexibleIpArgs.builder()        \n            .reverse(\"my-reverse.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FlexibleIp\n    properties:\n      reverse: my-reverse.com\n```\n\n### With zone\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.FlexibleIp(\"main\", {zone: \"fr-par-2\"});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.FlexibleIp(\"main\", zone=\"fr-par-2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.FlexibleIp(\"main\", new()\n    {\n        Zone = \"fr-par-2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewFlexibleIp(ctx, \"main\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tZone: pulumi.String(\"fr-par-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FlexibleIp;\nimport com.pulumi.scaleway.FlexibleIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new FlexibleIp(\"main\", FlexibleIpArgs.builder()        \n            .zone(\"fr-par-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FlexibleIp\n    properties:\n      zone: fr-par-2\n```\n\n### With IPv6\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.FlexibleIp(\"main\", {isIpv6: true});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.FlexibleIp(\"main\", is_ipv6=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.FlexibleIp(\"main\", new()\n    {\n        IsIpv6 = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewFlexibleIp(ctx, \"main\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tIsIpv6: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FlexibleIp;\nimport com.pulumi.scaleway.FlexibleIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new FlexibleIp(\"main\", FlexibleIpArgs.builder()        \n            .isIpv6(\"true\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FlexibleIp\n    properties:\n      isIpv6: 'true'\n```\n\n### With baremetal server\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst mainAccountSshKey = new scaleway.AccountSshKey(\"mainAccountSshKey\", {publicKey: \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com\"});\nconst byId = scaleway.getBaremetalOs({\n    zone: \"fr-par-2\",\n    name: \"Ubuntu\",\n    version: \"20.04 LTS (Focal Fossa)\",\n});\nconst myOffer = scaleway.getBaremetalOffer({\n    zone: \"fr-par-2\",\n    name: \"EM-A210R-HDD\",\n});\nconst base = new scaleway.BaremetalServer(\"base\", {\n    zone: \"fr-par-2\",\n    offer: myOffer.then(myOffer =\u003e myOffer.offerId),\n    os: byId.then(byId =\u003e byId.osId),\n    sshKeyIds: mainAccountSshKey.id,\n});\nconst mainFlexibleIp = new scaleway.FlexibleIp(\"mainFlexibleIp\", {\n    serverId: base.id,\n    zone: \"fr-par-2\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain_account_ssh_key = scaleway.AccountSshKey(\"mainAccountSshKey\", public_key=\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com\")\nby_id = scaleway.get_baremetal_os(zone=\"fr-par-2\",\n    name=\"Ubuntu\",\n    version=\"20.04 LTS (Focal Fossa)\")\nmy_offer = scaleway.get_baremetal_offer(zone=\"fr-par-2\",\n    name=\"EM-A210R-HDD\")\nbase = scaleway.BaremetalServer(\"base\",\n    zone=\"fr-par-2\",\n    offer=my_offer.offer_id,\n    os=by_id.os_id,\n    ssh_key_ids=main_account_ssh_key.id)\nmain_flexible_ip = scaleway.FlexibleIp(\"mainFlexibleIp\",\n    server_id=base.id,\n    zone=\"fr-par-2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainAccountSshKey = new Scaleway.AccountSshKey(\"mainAccountSshKey\", new()\n    {\n        PublicKey = \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com\",\n    });\n\n    var byId = Scaleway.GetBaremetalOs.Invoke(new()\n    {\n        Zone = \"fr-par-2\",\n        Name = \"Ubuntu\",\n        Version = \"20.04 LTS (Focal Fossa)\",\n    });\n\n    var myOffer = Scaleway.GetBaremetalOffer.Invoke(new()\n    {\n        Zone = \"fr-par-2\",\n        Name = \"EM-A210R-HDD\",\n    });\n\n    var @base = new Scaleway.BaremetalServer(\"base\", new()\n    {\n        Zone = \"fr-par-2\",\n        Offer = myOffer.Apply(getBaremetalOfferResult =\u003e getBaremetalOfferResult.OfferId),\n        Os = byId.Apply(getBaremetalOsResult =\u003e getBaremetalOsResult.OsId),\n        SshKeyIds = mainAccountSshKey.Id,\n    });\n\n    var mainFlexibleIp = new Scaleway.FlexibleIp(\"mainFlexibleIp\", new()\n    {\n        ServerId = @base.Id,\n        Zone = \"fr-par-2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainAccountSshKey, err := scaleway.NewAccountSshKey(ctx, \"mainAccountSshKey\", \u0026scaleway.AccountSshKeyArgs{\n\t\t\tPublicKey: pulumi.String(\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbyId, err := scaleway.GetBaremetalOs(ctx, \u0026scaleway.GetBaremetalOsArgs{\n\t\t\tZone:    pulumi.StringRef(\"fr-par-2\"),\n\t\t\tName:    pulumi.StringRef(\"Ubuntu\"),\n\t\t\tVersion: pulumi.StringRef(\"20.04 LTS (Focal Fossa)\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyOffer, err := scaleway.GetBaremetalOffer(ctx, \u0026scaleway.GetBaremetalOfferArgs{\n\t\t\tZone: pulumi.StringRef(\"fr-par-2\"),\n\t\t\tName: pulumi.StringRef(\"EM-A210R-HDD\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbase, err := scaleway.NewBaremetalServer(ctx, \"base\", \u0026scaleway.BaremetalServerArgs{\n\t\t\tZone:      pulumi.String(\"fr-par-2\"),\n\t\t\tOffer:     *pulumi.String(myOffer.OfferId),\n\t\t\tOs:        *pulumi.String(byId.OsId),\n\t\t\tSshKeyIds: mainAccountSshKey.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFlexibleIp(ctx, \"mainFlexibleIp\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tServerId: base.ID(),\n\t\t\tZone:     pulumi.String(\"fr-par-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.AccountSshKey;\nimport com.pulumi.scaleway.AccountSshKeyArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBaremetalOsArgs;\nimport com.pulumi.scaleway.inputs.GetBaremetalOfferArgs;\nimport com.pulumi.scaleway.BaremetalServer;\nimport com.pulumi.scaleway.BaremetalServerArgs;\nimport com.pulumi.scaleway.FlexibleIp;\nimport com.pulumi.scaleway.FlexibleIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainAccountSshKey = new AccountSshKey(\"mainAccountSshKey\", AccountSshKeyArgs.builder()        \n            .publicKey(\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com\")\n            .build());\n\n        final var byId = ScalewayFunctions.getBaremetalOs(GetBaremetalOsArgs.builder()\n            .zone(\"fr-par-2\")\n            .name(\"Ubuntu\")\n            .version(\"20.04 LTS (Focal Fossa)\")\n            .build());\n\n        final var myOffer = ScalewayFunctions.getBaremetalOffer(GetBaremetalOfferArgs.builder()\n            .zone(\"fr-par-2\")\n            .name(\"EM-A210R-HDD\")\n            .build());\n\n        var base = new BaremetalServer(\"base\", BaremetalServerArgs.builder()        \n            .zone(\"fr-par-2\")\n            .offer(myOffer.applyValue(getBaremetalOfferResult -\u003e getBaremetalOfferResult.offerId()))\n            .os(byId.applyValue(getBaremetalOsResult -\u003e getBaremetalOsResult.osId()))\n            .sshKeyIds(mainAccountSshKey.id())\n            .build());\n\n        var mainFlexibleIp = new FlexibleIp(\"mainFlexibleIp\", FlexibleIpArgs.builder()        \n            .serverId(base.id())\n            .zone(\"fr-par-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainAccountSshKey:\n    type: scaleway:AccountSshKey\n    properties:\n      publicKey: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com\n  base:\n    type: scaleway:BaremetalServer\n    properties:\n      zone: fr-par-2\n      offer: ${myOffer.offerId}\n      os: ${byId.osId}\n      sshKeyIds: ${mainAccountSshKey.id}\n  mainFlexibleIp:\n    type: scaleway:FlexibleIp\n    properties:\n      serverId: ${base.id}\n      zone: fr-par-2\nvariables:\n  byId:\n    fn::invoke:\n      Function: scaleway:getBaremetalOs\n      Arguments:\n        zone: fr-par-2\n        name: Ubuntu\n        version: 20.04 LTS (Focal Fossa)\n  myOffer:\n    fn::invoke:\n      Function: scaleway:getBaremetalOffer\n      Arguments:\n        zone: fr-par-2\n        name: EM-A210R-HDD\n```\n\n\n## Import\n\nFlexible IPs can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/flexibleIp:FlexibleIp main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the Flexible IP (Format ISO 8601).\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the flexible IP.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address of the Flexible IP.\n"
                },
                "isIpv6": {
                    "type": "boolean",
                    "description": "Defines whether the flexible IP has an IPv6 address.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization of the Flexible IP.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project of the Flexible IP.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain associated with this flexible IP.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the associated server.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the flexible IP.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the flexible IP.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the Flexible IP (Format ISO 8601).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone of the Flexible IP.\n"
                }
            },
            "required": [
                "createdAt",
                "ipAddress",
                "organizationId",
                "projectId",
                "reverse",
                "status",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description of the flexible IP.\n"
                },
                "isIpv6": {
                    "type": "boolean",
                    "description": "Defines whether the flexible IP has an IPv6 address.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The project of the Flexible IP.\n",
                    "willReplaceOnChanges": true
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain associated with this flexible IP.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the associated server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the flexible IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone of the Flexible IP.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FlexibleIp resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the Flexible IP (Format ISO 8601).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the flexible IP.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address of the Flexible IP.\n"
                    },
                    "isIpv6": {
                        "type": "boolean",
                        "description": "Defines whether the flexible IP has an IPv6 address.\n",
                        "willReplaceOnChanges": true
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization of the Flexible IP.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project of the Flexible IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain associated with this flexible IP.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The ID of the associated server.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the flexible IP.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to apply to the flexible IP.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the Flexible IP (Format ISO 8601).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone of the Flexible IP.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/flexibleIpMacAddress:FlexibleIpMacAddress": {
            "description": "Creates and manages Scaleway Flexible IP Mac Addresses.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/flexible-ip/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainFlexibleIp = new scaleway.FlexibleIp(\"mainFlexibleIp\", {});\nconst mainFlexibleIpMacAddress = new scaleway.FlexibleIpMacAddress(\"mainFlexibleIpMacAddress\", {\n    flexibleIpId: mainFlexibleIp.id,\n    type: \"kvm\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain_flexible_ip = scaleway.FlexibleIp(\"mainFlexibleIp\")\nmain_flexible_ip_mac_address = scaleway.FlexibleIpMacAddress(\"mainFlexibleIpMacAddress\",\n    flexible_ip_id=main_flexible_ip.id,\n    type=\"kvm\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainFlexibleIp = new Scaleway.FlexibleIp(\"mainFlexibleIp\");\n\n    var mainFlexibleIpMacAddress = new Scaleway.FlexibleIpMacAddress(\"mainFlexibleIpMacAddress\", new()\n    {\n        FlexibleIpId = mainFlexibleIp.Id,\n        Type = \"kvm\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainFlexibleIp, err := scaleway.NewFlexibleIp(ctx, \"mainFlexibleIp\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFlexibleIpMacAddress(ctx, \"mainFlexibleIpMacAddress\", \u0026scaleway.FlexibleIpMacAddressArgs{\n\t\t\tFlexibleIpId: mainFlexibleIp.ID(),\n\t\t\tType:         pulumi.String(\"kvm\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FlexibleIp;\nimport com.pulumi.scaleway.FlexibleIpMacAddress;\nimport com.pulumi.scaleway.FlexibleIpMacAddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainFlexibleIp = new FlexibleIp(\"mainFlexibleIp\");\n\n        var mainFlexibleIpMacAddress = new FlexibleIpMacAddress(\"mainFlexibleIpMacAddress\", FlexibleIpMacAddressArgs.builder()        \n            .flexibleIpId(mainFlexibleIp.id())\n            .type(\"kvm\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainFlexibleIp:\n    type: scaleway:FlexibleIp\n  mainFlexibleIpMacAddress:\n    type: scaleway:FlexibleIpMacAddress\n    properties:\n      flexibleIpId: ${mainFlexibleIp.id}\n      type: kvm\n```\n\n### Duplicate on many other flexible IPs\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myOffer = scaleway.getBaremetalOffer({\n    name: \"EM-B112X-SSD\",\n});\nconst base = new scaleway.BaremetalServer(\"base\", {\n    offer: myOffer.then(myOffer =\u003e myOffer.offerId),\n    installConfigAfterward: true,\n});\nconst ip01 = new scaleway.FlexibleIp(\"ip01\", {serverId: base.id});\nconst ip02 = new scaleway.FlexibleIp(\"ip02\", {serverId: base.id});\nconst ip03 = new scaleway.FlexibleIp(\"ip03\", {serverId: base.id});\nconst main = new scaleway.FlexibleIpMacAddress(\"main\", {\n    flexibleIpId: ip01.id,\n    type: \"kvm\",\n    flexibleIpIdsToDuplicates: [\n        ip02.id,\n        ip03.id,\n    ],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmy_offer = scaleway.get_baremetal_offer(name=\"EM-B112X-SSD\")\nbase = scaleway.BaremetalServer(\"base\",\n    offer=my_offer.offer_id,\n    install_config_afterward=True)\nip01 = scaleway.FlexibleIp(\"ip01\", server_id=base.id)\nip02 = scaleway.FlexibleIp(\"ip02\", server_id=base.id)\nip03 = scaleway.FlexibleIp(\"ip03\", server_id=base.id)\nmain = scaleway.FlexibleIpMacAddress(\"main\",\n    flexible_ip_id=ip01.id,\n    type=\"kvm\",\n    flexible_ip_ids_to_duplicates=[\n        ip02.id,\n        ip03.id,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myOffer = Scaleway.GetBaremetalOffer.Invoke(new()\n    {\n        Name = \"EM-B112X-SSD\",\n    });\n\n    var @base = new Scaleway.BaremetalServer(\"base\", new()\n    {\n        Offer = myOffer.Apply(getBaremetalOfferResult =\u003e getBaremetalOfferResult.OfferId),\n        InstallConfigAfterward = true,\n    });\n\n    var ip01 = new Scaleway.FlexibleIp(\"ip01\", new()\n    {\n        ServerId = @base.Id,\n    });\n\n    var ip02 = new Scaleway.FlexibleIp(\"ip02\", new()\n    {\n        ServerId = @base.Id,\n    });\n\n    var ip03 = new Scaleway.FlexibleIp(\"ip03\", new()\n    {\n        ServerId = @base.Id,\n    });\n\n    var main = new Scaleway.FlexibleIpMacAddress(\"main\", new()\n    {\n        FlexibleIpId = ip01.Id,\n        Type = \"kvm\",\n        FlexibleIpIdsToDuplicates = new[]\n        {\n            ip02.Id,\n            ip03.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyOffer, err := scaleway.GetBaremetalOffer(ctx, \u0026scaleway.GetBaremetalOfferArgs{\n\t\t\tName: pulumi.StringRef(\"EM-B112X-SSD\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbase, err := scaleway.NewBaremetalServer(ctx, \"base\", \u0026scaleway.BaremetalServerArgs{\n\t\t\tOffer:                  *pulumi.String(myOffer.OfferId),\n\t\t\tInstallConfigAfterward: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tip01, err := scaleway.NewFlexibleIp(ctx, \"ip01\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tServerId: base.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tip02, err := scaleway.NewFlexibleIp(ctx, \"ip02\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tServerId: base.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tip03, err := scaleway.NewFlexibleIp(ctx, \"ip03\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tServerId: base.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFlexibleIpMacAddress(ctx, \"main\", \u0026scaleway.FlexibleIpMacAddressArgs{\n\t\t\tFlexibleIpId: ip01.ID(),\n\t\t\tType:         pulumi.String(\"kvm\"),\n\t\t\tFlexibleIpIdsToDuplicates: pulumi.StringArray{\n\t\t\t\tip02.ID(),\n\t\t\t\tip03.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBaremetalOfferArgs;\nimport com.pulumi.scaleway.BaremetalServer;\nimport com.pulumi.scaleway.BaremetalServerArgs;\nimport com.pulumi.scaleway.FlexibleIp;\nimport com.pulumi.scaleway.FlexibleIpArgs;\nimport com.pulumi.scaleway.FlexibleIpMacAddress;\nimport com.pulumi.scaleway.FlexibleIpMacAddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myOffer = ScalewayFunctions.getBaremetalOffer(GetBaremetalOfferArgs.builder()\n            .name(\"EM-B112X-SSD\")\n            .build());\n\n        var base = new BaremetalServer(\"base\", BaremetalServerArgs.builder()        \n            .offer(myOffer.applyValue(getBaremetalOfferResult -\u003e getBaremetalOfferResult.offerId()))\n            .installConfigAfterward(true)\n            .build());\n\n        var ip01 = new FlexibleIp(\"ip01\", FlexibleIpArgs.builder()        \n            .serverId(base.id())\n            .build());\n\n        var ip02 = new FlexibleIp(\"ip02\", FlexibleIpArgs.builder()        \n            .serverId(base.id())\n            .build());\n\n        var ip03 = new FlexibleIp(\"ip03\", FlexibleIpArgs.builder()        \n            .serverId(base.id())\n            .build());\n\n        var main = new FlexibleIpMacAddress(\"main\", FlexibleIpMacAddressArgs.builder()        \n            .flexibleIpId(ip01.id())\n            .type(\"kvm\")\n            .flexibleIpIdsToDuplicates(            \n                ip02.id(),\n                ip03.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  base:\n    type: scaleway:BaremetalServer\n    properties:\n      offer: ${myOffer.offerId}\n      installConfigAfterward: true\n  ip01:\n    type: scaleway:FlexibleIp\n    properties:\n      serverId: ${base.id}\n  ip02:\n    type: scaleway:FlexibleIp\n    properties:\n      serverId: ${base.id}\n  ip03:\n    type: scaleway:FlexibleIp\n    properties:\n      serverId: ${base.id}\n  main:\n    type: scaleway:FlexibleIpMacAddress\n    properties:\n      flexibleIpId: ${ip01.id}\n      type: kvm\n      flexibleIpIdsToDuplicates:\n        - ${ip02.id}\n        - ${ip03.id}\nvariables:\n  myOffer:\n    fn::invoke:\n      Function: scaleway:getBaremetalOffer\n      Arguments:\n        name: EM-B112X-SSD\n```\n\n\n## Import\n\nFlexible IP Mac Addresses can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/flexibleIpMacAddress:FlexibleIpMacAddress main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The Virtual MAC address.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date at which the Virtual Mac Address was created (RFC 3339 format).\n"
                },
                "flexibleIpId": {
                    "type": "string",
                    "description": "The ID of the flexible IP for which to generate a virtual MAC.\n"
                },
                "flexibleIpIdsToDuplicates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the flexible IPs on which to duplicate the virtual MAC.\n\u003e **Important:** The flexible IPs need to be attached to the same server for the operation to work.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The Virtual MAC status.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the virtual MAC.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date at which the Virtual Mac Address was last updated (RFC 3339 format).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone of the Virtual Mac Address.\n"
                }
            },
            "required": [
                "address",
                "createdAt",
                "flexibleIpId",
                "status",
                "type",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "flexibleIpId": {
                    "type": "string",
                    "description": "The ID of the flexible IP for which to generate a virtual MAC.\n"
                },
                "flexibleIpIdsToDuplicates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the flexible IPs on which to duplicate the virtual MAC.\n\u003e **Important:** The flexible IPs need to be attached to the same server for the operation to work.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the virtual MAC.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone of the Virtual Mac Address.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "flexibleIpId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FlexibleIpMacAddress resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The Virtual MAC address.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date at which the Virtual Mac Address was created (RFC 3339 format).\n"
                    },
                    "flexibleIpId": {
                        "type": "string",
                        "description": "The ID of the flexible IP for which to generate a virtual MAC.\n"
                    },
                    "flexibleIpIdsToDuplicates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of the flexible IPs on which to duplicate the virtual MAC.\n\u003e **Important:** The flexible IPs need to be attached to the same server for the operation to work.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The Virtual MAC status.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the virtual MAC.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date at which the Virtual Mac Address was last updated (RFC 3339 format).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone of the Virtual Mac Address.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/function:Function": {
            "description": "Creates and manages Scaleway Functions.\nFor more information see [the documentation](https://developers.scaleway.com/en/products/functions/api/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainFunctionNamespace = new scaleway.FunctionNamespace(\"mainFunctionNamespace\", {description: \"Main function namespace\"});\nconst mainFunction = new scaleway.Function(\"mainFunction\", {\n    namespaceId: mainFunctionNamespace.id,\n    runtime: \"go118\",\n    handler: \"Handle\",\n    privacy: \"private\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain_function_namespace = scaleway.FunctionNamespace(\"mainFunctionNamespace\", description=\"Main function namespace\")\nmain_function = scaleway.Function(\"mainFunction\",\n    namespace_id=main_function_namespace.id,\n    runtime=\"go118\",\n    handler=\"Handle\",\n    privacy=\"private\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainFunctionNamespace = new Scaleway.FunctionNamespace(\"mainFunctionNamespace\", new()\n    {\n        Description = \"Main function namespace\",\n    });\n\n    var mainFunction = new Scaleway.Function(\"mainFunction\", new()\n    {\n        NamespaceId = mainFunctionNamespace.Id,\n        Runtime = \"go118\",\n        Handler = \"Handle\",\n        Privacy = \"private\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainFunctionNamespace, err := scaleway.NewFunctionNamespace(ctx, \"mainFunctionNamespace\", \u0026scaleway.FunctionNamespaceArgs{\n\t\t\tDescription: pulumi.String(\"Main function namespace\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFunction(ctx, \"mainFunction\", \u0026scaleway.FunctionArgs{\n\t\t\tNamespaceId: mainFunctionNamespace.ID(),\n\t\t\tRuntime:     pulumi.String(\"go118\"),\n\t\t\tHandler:     pulumi.String(\"Handle\"),\n\t\t\tPrivacy:     pulumi.String(\"private\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FunctionNamespace;\nimport com.pulumi.scaleway.FunctionNamespaceArgs;\nimport com.pulumi.scaleway.Function;\nimport com.pulumi.scaleway.FunctionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainFunctionNamespace = new FunctionNamespace(\"mainFunctionNamespace\", FunctionNamespaceArgs.builder()        \n            .description(\"Main function namespace\")\n            .build());\n\n        var mainFunction = new Function(\"mainFunction\", FunctionArgs.builder()        \n            .namespaceId(mainFunctionNamespace.id())\n            .runtime(\"go118\")\n            .handler(\"Handle\")\n            .privacy(\"private\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainFunctionNamespace:\n    type: scaleway:FunctionNamespace\n    properties:\n      description: Main function namespace\n  mainFunction:\n    type: scaleway:Function\n    properties:\n      namespaceId: ${mainFunctionNamespace.id}\n      runtime: go118\n      handler: Handle\n      privacy: private\n```\n\n\n## Import\n\nFunctions can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/function:Function main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "cpuLimit": {
                    "type": "integer",
                    "description": "The CPU limit in mCPU for your function. More infos on resources [here](https://developers.scaleway.com/en/products/functions/api/#functions)\n"
                },
                "deploy": {
                    "type": "boolean",
                    "description": "Define if the function should be deployed, terraform will wait for function to be deployed\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the function.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "The native domain name of the function\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables of the function.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "Handler of the function. Depends on the runtime ([function guide](https://developers.scaleway.com/en/products/functions/api/#create-a-function))\n"
                },
                "httpOption": {
                    "type": "string",
                    "description": "HTTP traffic configuration\n"
                },
                "maxScale": {
                    "type": "integer",
                    "description": "Maximum replicas for your function (defaults to 20), our system will scale your functions automatically based on incoming workload, but will never scale the number of replicas above the configured max_scale.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "Memory limit in MB for your function, defaults to 128MB\n"
                },
                "minScale": {
                    "type": "integer",
                    "description": "Minimum replicas for your function, defaults to 0, Note that a function is billed when it gets executed, and using a min_scale greater than 0 will cause your function container to run constantly.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the function.\n\n\u003e **Important** Updates to `name` will recreate the function.\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace ID associated with this function\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the function is associated with.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "Privacy of the function. Can be either `private` or `public`. Read more on [authentication](https://developers.scaleway.com/en/products/functions/api/#authentication)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                },
                "runtime": {
                    "type": "string",
                    "description": "Runtime of the function. Runtimes can be fetched using [specific route](https://developers.scaleway.com/en/products/functions/api/#get-f7de6a)\n"
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [secret environment](https://www.scaleway.com/en/docs/compute/functions/concepts/#secrets) variables of the function.\n",
                    "secret": true
                },
                "timeout": {
                    "type": "integer",
                    "description": "Holds the max duration (in seconds) the function is allowed for responding to a request\n"
                },
                "zipFile": {
                    "type": "string",
                    "description": "Location of the zip file to upload containing your function sources\n"
                },
                "zipHash": {
                    "type": "string",
                    "description": "The hash of your source zip file, changing it will re-apply function. Can be any string\n"
                }
            },
            "required": [
                "cpuLimit",
                "domainName",
                "handler",
                "name",
                "namespaceId",
                "organizationId",
                "privacy",
                "projectId",
                "region",
                "runtime",
                "timeout"
            ],
            "inputProperties": {
                "deploy": {
                    "type": "boolean",
                    "description": "Define if the function should be deployed, terraform will wait for function to be deployed\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the function.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables of the function.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "Handler of the function. Depends on the runtime ([function guide](https://developers.scaleway.com/en/products/functions/api/#create-a-function))\n"
                },
                "httpOption": {
                    "type": "string",
                    "description": "HTTP traffic configuration\n"
                },
                "maxScale": {
                    "type": "integer",
                    "description": "Maximum replicas for your function (defaults to 20), our system will scale your functions automatically based on incoming workload, but will never scale the number of replicas above the configured max_scale.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "Memory limit in MB for your function, defaults to 128MB\n"
                },
                "minScale": {
                    "type": "integer",
                    "description": "Minimum replicas for your function, defaults to 0, Note that a function is billed when it gets executed, and using a min_scale greater than 0 will cause your function container to run constantly.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the function.\n\n\u003e **Important** Updates to `name` will recreate the function.\n",
                    "willReplaceOnChanges": true
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace ID associated with this function\n",
                    "willReplaceOnChanges": true
                },
                "privacy": {
                    "type": "string",
                    "description": "Privacy of the function. Can be either `private` or `public`. Read more on [authentication](https://developers.scaleway.com/en/products/functions/api/#authentication)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n",
                    "willReplaceOnChanges": true
                },
                "runtime": {
                    "type": "string",
                    "description": "Runtime of the function. Runtimes can be fetched using [specific route](https://developers.scaleway.com/en/products/functions/api/#get-f7de6a)\n"
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [secret environment](https://www.scaleway.com/en/docs/compute/functions/concepts/#secrets) variables of the function.\n",
                    "secret": true
                },
                "timeout": {
                    "type": "integer",
                    "description": "Holds the max duration (in seconds) the function is allowed for responding to a request\n"
                },
                "zipFile": {
                    "type": "string",
                    "description": "Location of the zip file to upload containing your function sources\n"
                },
                "zipHash": {
                    "type": "string",
                    "description": "The hash of your source zip file, changing it will re-apply function. Can be any string\n"
                }
            },
            "requiredInputs": [
                "handler",
                "namespaceId",
                "privacy",
                "runtime"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Function resources.\n",
                "properties": {
                    "cpuLimit": {
                        "type": "integer",
                        "description": "The CPU limit in mCPU for your function. More infos on resources [here](https://developers.scaleway.com/en/products/functions/api/#functions)\n"
                    },
                    "deploy": {
                        "type": "boolean",
                        "description": "Define if the function should be deployed, terraform will wait for function to be deployed\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the function.\n"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "The native domain name of the function\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The environment variables of the function.\n"
                    },
                    "handler": {
                        "type": "string",
                        "description": "Handler of the function. Depends on the runtime ([function guide](https://developers.scaleway.com/en/products/functions/api/#create-a-function))\n"
                    },
                    "httpOption": {
                        "type": "string",
                        "description": "HTTP traffic configuration\n"
                    },
                    "maxScale": {
                        "type": "integer",
                        "description": "Maximum replicas for your function (defaults to 20), our system will scale your functions automatically based on incoming workload, but will never scale the number of replicas above the configured max_scale.\n"
                    },
                    "memoryLimit": {
                        "type": "integer",
                        "description": "Memory limit in MB for your function, defaults to 128MB\n"
                    },
                    "minScale": {
                        "type": "integer",
                        "description": "Minimum replicas for your function, defaults to 0, Note that a function is billed when it gets executed, and using a min_scale greater than 0 will cause your function container to run constantly.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the function.\n\n\u003e **Important** Updates to `name` will recreate the function.\n",
                        "willReplaceOnChanges": true
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace ID associated with this function\n",
                        "willReplaceOnChanges": true
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the function is associated with.\n"
                    },
                    "privacy": {
                        "type": "string",
                        "description": "Privacy of the function. Can be either `private` or `public`. Read more on [authentication](https://developers.scaleway.com/en/products/functions/api/#authentication)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the namespace is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "runtime": {
                        "type": "string",
                        "description": "Runtime of the function. Runtimes can be fetched using [specific route](https://developers.scaleway.com/en/products/functions/api/#get-f7de6a)\n"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The [secret environment](https://www.scaleway.com/en/docs/compute/functions/concepts/#secrets) variables of the function.\n",
                        "secret": true
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "Holds the max duration (in seconds) the function is allowed for responding to a request\n"
                    },
                    "zipFile": {
                        "type": "string",
                        "description": "Location of the zip file to upload containing your function sources\n"
                    },
                    "zipHash": {
                        "type": "string",
                        "description": "The hash of your source zip file, changing it will re-apply function. Can be any string\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/functionCron:FunctionCron": {
            "description": "Creates and manages Scaleway Function Triggers. For the moment, the feature is limited to CRON Schedule (time-based).\n\nFor more details about the limitation\ncheck [functions-limitations](https://www.scaleway.com/en/docs/compute/functions/reference-content/functions-limitations/).\n\nYou can check also\nour [functions cron api documentation](https://developers.scaleway.com/en/products/functions/api/#crons-942bf4).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainFunctionNamespace = new scaleway.FunctionNamespace(\"mainFunctionNamespace\", {});\nconst mainFunction = new scaleway.Function(\"mainFunction\", {\n    namespaceId: mainFunctionNamespace.id,\n    runtime: \"node14\",\n    privacy: \"private\",\n    handler: \"handler.handle\",\n});\nconst mainFunctionCron = new scaleway.FunctionCron(\"mainFunctionCron\", {\n    functionId: mainFunction.id,\n    schedule: \"0 0 * * *\",\n    args: JSON.stringify({\n        test: \"scw\",\n    }),\n});\nconst func = new scaleway.FunctionCron(\"func\", {\n    functionId: mainFunction.id,\n    schedule: \"0 1 * * *\",\n    args: JSON.stringify({\n        my_var: \"terraform\",\n    }),\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport json\n\nmain_function_namespace = scaleway.FunctionNamespace(\"mainFunctionNamespace\")\nmain_function = scaleway.Function(\"mainFunction\",\n    namespace_id=main_function_namespace.id,\n    runtime=\"node14\",\n    privacy=\"private\",\n    handler=\"handler.handle\")\nmain_function_cron = scaleway.FunctionCron(\"mainFunctionCron\",\n    function_id=main_function.id,\n    schedule=\"0 0 * * *\",\n    args=json.dumps({\n        \"test\": \"scw\",\n    }))\nfunc = scaleway.FunctionCron(\"func\",\n    function_id=main_function.id,\n    schedule=\"0 1 * * *\",\n    args=json.dumps({\n        \"my_var\": \"terraform\",\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainFunctionNamespace = new Scaleway.FunctionNamespace(\"mainFunctionNamespace\");\n\n    var mainFunction = new Scaleway.Function(\"mainFunction\", new()\n    {\n        NamespaceId = mainFunctionNamespace.Id,\n        Runtime = \"node14\",\n        Privacy = \"private\",\n        Handler = \"handler.handle\",\n    });\n\n    var mainFunctionCron = new Scaleway.FunctionCron(\"mainFunctionCron\", new()\n    {\n        FunctionId = mainFunction.Id,\n        Schedule = \"0 0 * * *\",\n        Args = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"test\"] = \"scw\",\n        }),\n    });\n\n    var func = new Scaleway.FunctionCron(\"func\", new()\n    {\n        FunctionId = mainFunction.Id,\n        Schedule = \"0 1 * * *\",\n        Args = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"my_var\"] = \"terraform\",\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainFunctionNamespace, err := scaleway.NewFunctionNamespace(ctx, \"mainFunctionNamespace\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainFunction, err := scaleway.NewFunction(ctx, \"mainFunction\", \u0026scaleway.FunctionArgs{\n\t\t\tNamespaceId: mainFunctionNamespace.ID(),\n\t\t\tRuntime:     pulumi.String(\"node14\"),\n\t\t\tPrivacy:     pulumi.String(\"private\"),\n\t\t\tHandler:     pulumi.String(\"handler.handle\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"test\": \"scw\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = scaleway.NewFunctionCron(ctx, \"mainFunctionCron\", \u0026scaleway.FunctionCronArgs{\n\t\t\tFunctionId: mainFunction.ID(),\n\t\t\tSchedule:   pulumi.String(\"0 0 * * *\"),\n\t\t\tArgs:       pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"my_var\": \"terraform\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\t_, err = scaleway.NewFunctionCron(ctx, \"func\", \u0026scaleway.FunctionCronArgs{\n\t\t\tFunctionId: mainFunction.ID(),\n\t\t\tSchedule:   pulumi.String(\"0 1 * * *\"),\n\t\t\tArgs:       pulumi.String(json1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FunctionNamespace;\nimport com.pulumi.scaleway.Function;\nimport com.pulumi.scaleway.FunctionArgs;\nimport com.pulumi.scaleway.FunctionCron;\nimport com.pulumi.scaleway.FunctionCronArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainFunctionNamespace = new FunctionNamespace(\"mainFunctionNamespace\");\n\n        var mainFunction = new Function(\"mainFunction\", FunctionArgs.builder()        \n            .namespaceId(mainFunctionNamespace.id())\n            .runtime(\"node14\")\n            .privacy(\"private\")\n            .handler(\"handler.handle\")\n            .build());\n\n        var mainFunctionCron = new FunctionCron(\"mainFunctionCron\", FunctionCronArgs.builder()        \n            .functionId(mainFunction.id())\n            .schedule(\"0 0 * * *\")\n            .args(serializeJson(\n                jsonObject(\n                    jsonProperty(\"test\", \"scw\")\n                )))\n            .build());\n\n        var func = new FunctionCron(\"func\", FunctionCronArgs.builder()        \n            .functionId(mainFunction.id())\n            .schedule(\"0 1 * * *\")\n            .args(serializeJson(\n                jsonObject(\n                    jsonProperty(\"my_var\", \"terraform\")\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainFunctionNamespace:\n    type: scaleway:FunctionNamespace\n  mainFunction:\n    type: scaleway:Function\n    properties:\n      namespaceId: ${mainFunctionNamespace.id}\n      runtime: node14\n      privacy: private\n      handler: handler.handle\n  mainFunctionCron:\n    type: scaleway:FunctionCron\n    properties:\n      functionId: ${mainFunction.id}\n      schedule: 0 0 * * *\n      args:\n        fn::toJSON:\n          test: scw\n  func:\n    type: scaleway:FunctionCron\n    properties:\n      functionId: ${mainFunction.id}\n      schedule: 0 1 * * *\n      args:\n        fn::toJSON:\n          my_var: terraform\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nContainer Cron can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/functionCron:FunctionCron main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "args": {
                    "type": "string",
                    "description": "The key-value mapping to define arguments that will be passed to your function’s event object\nduring\n"
                },
                "functionId": {
                    "type": "string",
                    "description": "The function ID to link with your cron.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region\nin where the job was created.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "Cron format string, e.g. @hourly, as schedule time of its jobs to be created and\nexecuted.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The cron status.\n"
                }
            },
            "required": [
                "args",
                "functionId",
                "region",
                "schedule",
                "status"
            ],
            "inputProperties": {
                "args": {
                    "type": "string",
                    "description": "The key-value mapping to define arguments that will be passed to your function’s event object\nduring\n"
                },
                "functionId": {
                    "type": "string",
                    "description": "The function ID to link with your cron.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region\nin where the job was created.\n",
                    "willReplaceOnChanges": true
                },
                "schedule": {
                    "type": "string",
                    "description": "Cron format string, e.g. @hourly, as schedule time of its jobs to be created and\nexecuted.\n"
                }
            },
            "requiredInputs": [
                "args",
                "functionId",
                "schedule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionCron resources.\n",
                "properties": {
                    "args": {
                        "type": "string",
                        "description": "The key-value mapping to define arguments that will be passed to your function’s event object\nduring\n"
                    },
                    "functionId": {
                        "type": "string",
                        "description": "The function ID to link with your cron.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Defaults to provider `region`) The region\nin where the job was created.\n",
                        "willReplaceOnChanges": true
                    },
                    "schedule": {
                        "type": "string",
                        "description": "Cron format string, e.g. @hourly, as schedule time of its jobs to be created and\nexecuted.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The cron status.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/functionDomain:FunctionDomain": {
            "description": "Creates and manages Scaleway Function Domain bindings.\nFor more information see [the documentation](https://developers.scaleway.com/en/products/functions/api/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainFunctionNamespace = new scaleway.FunctionNamespace(\"mainFunctionNamespace\", {});\nconst mainFunction = new scaleway.Function(\"mainFunction\", {\n    namespaceId: mainFunctionNamespace.id,\n    runtime: \"go118\",\n    privacy: \"private\",\n    handler: \"Handle\",\n    zipFile: \"testfixture/gofunction.zip\",\n    deploy: true,\n});\nconst mainFunctionDomain = new scaleway.FunctionDomain(\"mainFunctionDomain\", {\n    functionId: mainFunction.id,\n    hostname: \"example.com\",\n}, {\n    dependsOn: [mainFunction],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain_function_namespace = scaleway.FunctionNamespace(\"mainFunctionNamespace\")\nmain_function = scaleway.Function(\"mainFunction\",\n    namespace_id=main_function_namespace.id,\n    runtime=\"go118\",\n    privacy=\"private\",\n    handler=\"Handle\",\n    zip_file=\"testfixture/gofunction.zip\",\n    deploy=True)\nmain_function_domain = scaleway.FunctionDomain(\"mainFunctionDomain\",\n    function_id=main_function.id,\n    hostname=\"example.com\",\n    opts=pulumi.ResourceOptions(depends_on=[main_function]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainFunctionNamespace = new Scaleway.FunctionNamespace(\"mainFunctionNamespace\");\n\n    var mainFunction = new Scaleway.Function(\"mainFunction\", new()\n    {\n        NamespaceId = mainFunctionNamespace.Id,\n        Runtime = \"go118\",\n        Privacy = \"private\",\n        Handler = \"Handle\",\n        ZipFile = \"testfixture/gofunction.zip\",\n        Deploy = true,\n    });\n\n    var mainFunctionDomain = new Scaleway.FunctionDomain(\"mainFunctionDomain\", new()\n    {\n        FunctionId = mainFunction.Id,\n        Hostname = \"example.com\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            mainFunction,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainFunctionNamespace, err := scaleway.NewFunctionNamespace(ctx, \"mainFunctionNamespace\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainFunction, err := scaleway.NewFunction(ctx, \"mainFunction\", \u0026scaleway.FunctionArgs{\n\t\t\tNamespaceId: mainFunctionNamespace.ID(),\n\t\t\tRuntime:     pulumi.String(\"go118\"),\n\t\t\tPrivacy:     pulumi.String(\"private\"),\n\t\t\tHandler:     pulumi.String(\"Handle\"),\n\t\t\tZipFile:     pulumi.String(\"testfixture/gofunction.zip\"),\n\t\t\tDeploy:      pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFunctionDomain(ctx, \"mainFunctionDomain\", \u0026scaleway.FunctionDomainArgs{\n\t\t\tFunctionId: mainFunction.ID(),\n\t\t\tHostname:   pulumi.String(\"example.com\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmainFunction,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FunctionNamespace;\nimport com.pulumi.scaleway.Function;\nimport com.pulumi.scaleway.FunctionArgs;\nimport com.pulumi.scaleway.FunctionDomain;\nimport com.pulumi.scaleway.FunctionDomainArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainFunctionNamespace = new FunctionNamespace(\"mainFunctionNamespace\");\n\n        var mainFunction = new Function(\"mainFunction\", FunctionArgs.builder()        \n            .namespaceId(mainFunctionNamespace.id())\n            .runtime(\"go118\")\n            .privacy(\"private\")\n            .handler(\"Handle\")\n            .zipFile(\"testfixture/gofunction.zip\")\n            .deploy(true)\n            .build());\n\n        var mainFunctionDomain = new FunctionDomain(\"mainFunctionDomain\", FunctionDomainArgs.builder()        \n            .functionId(mainFunction.id())\n            .hostname(\"example.com\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(mainFunction)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainFunctionDomain:\n    type: scaleway:FunctionDomain\n    properties:\n      functionId: ${mainFunction.id}\n      hostname: example.com\n    options:\n      dependson:\n        - ${mainFunction}\n  mainFunctionNamespace:\n    type: scaleway:FunctionNamespace\n  mainFunction:\n    type: scaleway:Function\n    properties:\n      namespaceId: ${mainFunctionNamespace.id}\n      runtime: go118\n      privacy: private\n      handler: Handle\n      zipFile: testfixture/gofunction.zip\n      deploy: true\n```\n\n\n## Import\n\nDomain can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/functionDomain:FunctionDomain main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "functionId": {
                    "type": "string",
                    "description": "The ID of the function you want to create a domain with.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname that should resolve to your function id native domain.\nYou should use a CNAME domain record that point to your native function `domain_name` for it.\n\n\u003e **Important** Updates to `function_id` or `hostname` will recreate the domain.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region in where the domain was created.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL that triggers the function\n"
                }
            },
            "required": [
                "functionId",
                "hostname",
                "region",
                "url"
            ],
            "inputProperties": {
                "functionId": {
                    "type": "string",
                    "description": "The ID of the function you want to create a domain with.\n",
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname that should resolve to your function id native domain.\nYou should use a CNAME domain record that point to your native function `domain_name` for it.\n\n\u003e **Important** Updates to `function_id` or `hostname` will recreate the domain.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region in where the domain was created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "functionId",
                "hostname"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionDomain resources.\n",
                "properties": {
                    "functionId": {
                        "type": "string",
                        "description": "The ID of the function you want to create a domain with.\n",
                        "willReplaceOnChanges": true
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname that should resolve to your function id native domain.\nYou should use a CNAME domain record that point to your native function `domain_name` for it.\n\n\u003e **Important** Updates to `function_id` or `hostname` will recreate the domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "(Defaults to provider `region`) The region in where the domain was created.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL that triggers the function\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/functionNamespace:FunctionNamespace": {
            "description": "Creates and manages Scaleway Function Namespace.\nFor more information see [the documentation](https://developers.scaleway.com/en/products/functions/api/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.FunctionNamespace(\"main\", {description: \"Main function namespace\"});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.FunctionNamespace(\"main\", description=\"Main function namespace\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.FunctionNamespace(\"main\", new()\n    {\n        Description = \"Main function namespace\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewFunctionNamespace(ctx, \"main\", \u0026scaleway.FunctionNamespaceArgs{\n\t\t\tDescription: pulumi.String(\"Main function namespace\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FunctionNamespace;\nimport com.pulumi.scaleway.FunctionNamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new FunctionNamespace(\"main\", FunctionNamespaceArgs.builder()        \n            .description(\"Main function namespace\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FunctionNamespace\n    properties:\n      description: Main function namespace\n```\n\n\n## Import\n\nNamespaces can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/functionNamespace:FunctionNamespace main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables of the namespace.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the function namespace.\n\n\u003e **Important** Updates to `name` will recreate the namespace.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the namespace is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                },
                "registryEndpoint": {
                    "type": "string",
                    "description": "The registry endpoint of the namespace.\n"
                },
                "registryNamespaceId": {
                    "type": "string",
                    "description": "The registry namespace ID of the namespace.\n"
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [secret environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#secrets) variables of the namespace.\n",
                    "secret": true
                }
            },
            "required": [
                "name",
                "organizationId",
                "projectId",
                "region",
                "registryEndpoint",
                "registryNamespaceId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables of the namespace.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the function namespace.\n\n\u003e **Important** Updates to `name` will recreate the namespace.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n",
                    "willReplaceOnChanges": true
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [secret environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#secrets) variables of the namespace.\n",
                    "secret": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionNamespace resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the namespace.\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The environment variables of the namespace.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the function namespace.\n\n\u003e **Important** Updates to `name` will recreate the namespace.\n",
                        "willReplaceOnChanges": true
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the namespace is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the namespace is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "registryEndpoint": {
                        "type": "string",
                        "description": "The registry endpoint of the namespace.\n"
                    },
                    "registryNamespaceId": {
                        "type": "string",
                        "description": "The registry namespace ID of the namespace.\n"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The [secret environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#secrets) variables of the namespace.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/functionToken:FunctionToken": {
            "description": "Creates and manages Scaleway Function Token.\nFor more information see [the documentation](https://developers.scaleway.com/en/products/functions/api/#tokens-26b085).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainFunctionNamespace = new scaleway.FunctionNamespace(\"mainFunctionNamespace\", {});\nconst mainFunction = new scaleway.Function(\"mainFunction\", {\n    namespaceId: mainFunctionNamespace.id,\n    runtime: \"go118\",\n    handler: \"Handle\",\n    privacy: \"private\",\n});\n// Namespace Token\nconst namespace = new scaleway.FunctionToken(\"namespace\", {\n    namespaceId: mainFunctionNamespace.id,\n    expiresAt: \"2022-10-18T11:35:15+02:00\",\n});\n// Function Token\nconst _function = new scaleway.FunctionToken(\"function\", {functionId: mainFunction.id});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain_function_namespace = scaleway.FunctionNamespace(\"mainFunctionNamespace\")\nmain_function = scaleway.Function(\"mainFunction\",\n    namespace_id=main_function_namespace.id,\n    runtime=\"go118\",\n    handler=\"Handle\",\n    privacy=\"private\")\n# Namespace Token\nnamespace = scaleway.FunctionToken(\"namespace\",\n    namespace_id=main_function_namespace.id,\n    expires_at=\"2022-10-18T11:35:15+02:00\")\n# Function Token\nfunction = scaleway.FunctionToken(\"function\", function_id=main_function.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainFunctionNamespace = new Scaleway.FunctionNamespace(\"mainFunctionNamespace\");\n\n    var mainFunction = new Scaleway.Function(\"mainFunction\", new()\n    {\n        NamespaceId = mainFunctionNamespace.Id,\n        Runtime = \"go118\",\n        Handler = \"Handle\",\n        Privacy = \"private\",\n    });\n\n    // Namespace Token\n    var @namespace = new Scaleway.FunctionToken(\"namespace\", new()\n    {\n        NamespaceId = mainFunctionNamespace.Id,\n        ExpiresAt = \"2022-10-18T11:35:15+02:00\",\n    });\n\n    // Function Token\n    var function = new Scaleway.FunctionToken(\"function\", new()\n    {\n        FunctionId = mainFunction.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainFunctionNamespace, err := scaleway.NewFunctionNamespace(ctx, \"mainFunctionNamespace\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainFunction, err := scaleway.NewFunction(ctx, \"mainFunction\", \u0026scaleway.FunctionArgs{\n\t\t\tNamespaceId: mainFunctionNamespace.ID(),\n\t\t\tRuntime:     pulumi.String(\"go118\"),\n\t\t\tHandler:     pulumi.String(\"Handle\"),\n\t\t\tPrivacy:     pulumi.String(\"private\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFunctionToken(ctx, \"namespace\", \u0026scaleway.FunctionTokenArgs{\n\t\t\tNamespaceId: mainFunctionNamespace.ID(),\n\t\t\tExpiresAt:   pulumi.String(\"2022-10-18T11:35:15+02:00\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFunctionToken(ctx, \"function\", \u0026scaleway.FunctionTokenArgs{\n\t\t\tFunctionId: mainFunction.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FunctionNamespace;\nimport com.pulumi.scaleway.Function;\nimport com.pulumi.scaleway.FunctionArgs;\nimport com.pulumi.scaleway.FunctionToken;\nimport com.pulumi.scaleway.FunctionTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainFunctionNamespace = new FunctionNamespace(\"mainFunctionNamespace\");\n\n        var mainFunction = new Function(\"mainFunction\", FunctionArgs.builder()        \n            .namespaceId(mainFunctionNamespace.id())\n            .runtime(\"go118\")\n            .handler(\"Handle\")\n            .privacy(\"private\")\n            .build());\n\n        var namespace = new FunctionToken(\"namespace\", FunctionTokenArgs.builder()        \n            .namespaceId(mainFunctionNamespace.id())\n            .expiresAt(\"2022-10-18T11:35:15+02:00\")\n            .build());\n\n        var function = new FunctionToken(\"function\", FunctionTokenArgs.builder()        \n            .functionId(mainFunction.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainFunctionNamespace:\n    type: scaleway:FunctionNamespace\n  mainFunction:\n    type: scaleway:Function\n    properties:\n      namespaceId: ${mainFunctionNamespace.id}\n      runtime: go118\n      handler: Handle\n      privacy: private\n  # Namespace Token\n  namespace:\n    type: scaleway:FunctionToken\n    properties:\n      namespaceId: ${mainFunctionNamespace.id}\n      expiresAt: 2022-10-18T11:35:15+02:00\n  # Function Token\n  function:\n    type: scaleway:FunctionToken\n    properties:\n      functionId: ${mainFunction.id}\n```\n\n\n## Import\n\nTokens can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/functionToken:FunctionToken main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the token.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The expiration date of the token.\n"
                },
                "functionId": {
                    "type": "string",
                    "description": "The ID of the function.\n\n\u003e Only one of `namespace_id` or `function_id` must be set.\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The ID of the function namespace.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n\n\u003e **Important** Updates to any fields will recreate the token.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token.\n",
                    "secret": true
                }
            },
            "required": [
                "region",
                "token"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the token.\n",
                    "willReplaceOnChanges": true
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The expiration date of the token.\n",
                    "willReplaceOnChanges": true
                },
                "functionId": {
                    "type": "string",
                    "description": "The ID of the function.\n\n\u003e Only one of `namespace_id` or `function_id` must be set.\n",
                    "willReplaceOnChanges": true
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The ID of the function namespace.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n\n\u003e **Important** Updates to any fields will recreate the token.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionToken resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "The expiration date of the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "functionId": {
                        "type": "string",
                        "description": "The ID of the function.\n\n\u003e Only one of `namespace_id` or `function_id` must be set.\n",
                        "willReplaceOnChanges": true
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The ID of the function namespace.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace should be created.\n\n\u003e **Important** Updates to any fields will recreate the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "token": {
                        "type": "string",
                        "description": "The token.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/functionTrigger:FunctionTrigger": {
            "description": "Creates and manages Scaleway Function Triggers.\nFor more information see [the documentation](https://www.scaleway.com/en/developers/api/serverless-functions/#path-triggers).\n\n## Examples\n\n### SQS\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.FunctionTrigger(\"main\", {\n    functionId: scaleway_function.main.id,\n    sqs: {\n        projectId: scaleway_mnq_sqs.main.project_id,\n        queue: \"MyQueue\",\n        region: scaleway_mnq_sqs.main.region,\n    },\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.FunctionTrigger(\"main\",\n    function_id=scaleway_function[\"main\"][\"id\"],\n    sqs=scaleway.FunctionTriggerSqsArgs(\n        project_id=scaleway_mnq_sqs[\"main\"][\"project_id\"],\n        queue=\"MyQueue\",\n        region=scaleway_mnq_sqs[\"main\"][\"region\"],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.FunctionTrigger(\"main\", new()\n    {\n        FunctionId = scaleway_function.Main.Id,\n        Sqs = new Scaleway.Inputs.FunctionTriggerSqsArgs\n        {\n            ProjectId = scaleway_mnq_sqs.Main.Project_id,\n            Queue = \"MyQueue\",\n            Region = scaleway_mnq_sqs.Main.Region,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewFunctionTrigger(ctx, \"main\", \u0026scaleway.FunctionTriggerArgs{\n\t\t\tFunctionId: pulumi.Any(scaleway_function.Main.Id),\n\t\t\tSqs: \u0026scaleway.FunctionTriggerSqsArgs{\n\t\t\t\tProjectId: pulumi.Any(scaleway_mnq_sqs.Main.Project_id),\n\t\t\t\tQueue:     pulumi.String(\"MyQueue\"),\n\t\t\t\tRegion:    pulumi.Any(scaleway_mnq_sqs.Main.Region),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FunctionTrigger;\nimport com.pulumi.scaleway.FunctionTriggerArgs;\nimport com.pulumi.scaleway.inputs.FunctionTriggerSqsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new FunctionTrigger(\"main\", FunctionTriggerArgs.builder()        \n            .functionId(scaleway_function.main().id())\n            .sqs(FunctionTriggerSqsArgs.builder()\n                .projectId(scaleway_mnq_sqs.main().project_id())\n                .queue(\"MyQueue\")\n                .region(scaleway_mnq_sqs.main().region())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FunctionTrigger\n    properties:\n      functionId: ${scaleway_function.main.id}\n      sqs:\n        projectId: ${scaleway_mnq_sqs.main.project_id}\n        queue: MyQueue\n        region: ${scaleway_mnq_sqs.main.region}\n```\n\n### Nats\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FunctionTrigger;\nimport com.pulumi.scaleway.FunctionTriggerArgs;\nimport com.pulumi.scaleway.inputs.FunctionTriggerNatsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new FunctionTrigger(\"main\", FunctionTriggerArgs.builder()        \n            .containerId(scaleway_container.main().id())\n            .nats(FunctionTriggerNatsArgs.builder()\n                .accountId(scaleway_mnq_nats_account.main().id())\n                .subject(\"MySubject\")\n                .region(scaleway_mnq_nats_account.main().region())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FunctionTrigger\n    properties:\n      containerId: ${scaleway_container.main.id}\n      nats:\n        accountId: ${scaleway_mnq_nats_account.main.id}\n        subject: MySubject\n        region: ${scaleway_mnq_nats_account.main.region}\n```\n\n\n## Import\n\nFunction Triggers can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/functionTrigger:FunctionTrigger main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the trigger.\n"
                },
                "functionId": {
                    "type": "string",
                    "description": "The ID of the function to create a trigger for\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the trigger. Default to a generated name.\n"
                },
                "nats": {
                    "$ref": "#/types/scaleway:index/FunctionTriggerNats:FunctionTriggerNats",
                    "description": "The configuration for the Scaleway's Nats used by the trigger\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                },
                "sqs": {
                    "$ref": "#/types/scaleway:index/FunctionTriggerSqs:FunctionTriggerSqs",
                    "description": "The configuration of the Scaleway's SQS used by the trigger\n"
                }
            },
            "required": [
                "functionId",
                "name",
                "region"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the trigger.\n"
                },
                "functionId": {
                    "type": "string",
                    "description": "The ID of the function to create a trigger for\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the trigger. Default to a generated name.\n"
                },
                "nats": {
                    "$ref": "#/types/scaleway:index/FunctionTriggerNats:FunctionTriggerNats",
                    "description": "The configuration for the Scaleway's Nats used by the trigger\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n",
                    "willReplaceOnChanges": true
                },
                "sqs": {
                    "$ref": "#/types/scaleway:index/FunctionTriggerSqs:FunctionTriggerSqs",
                    "description": "The configuration of the Scaleway's SQS used by the trigger\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "functionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionTrigger resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the trigger.\n"
                    },
                    "functionId": {
                        "type": "string",
                        "description": "The ID of the function to create a trigger for\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the trigger. Default to a generated name.\n"
                    },
                    "nats": {
                        "$ref": "#/types/scaleway:index/FunctionTriggerNats:FunctionTriggerNats",
                        "description": "The configuration for the Scaleway's Nats used by the trigger\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "sqs": {
                        "$ref": "#/types/scaleway:index/FunctionTriggerSqs:FunctionTriggerSqs",
                        "description": "The configuration of the Scaleway's SQS used by the trigger\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iamApiKey:IamApiKey": {
            "description": "Creates and manages Scaleway IAM API Keys. For more information, please\ncheck [the documentation](https://developers.scaleway.com/en/products/iam/api/v1alpha1/#api-keys-3665ae)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst ciCd = new scaleway.IamApplication(\"ciCd\", {});\nconst main = new scaleway.IamApiKey(\"main\", {\n    applicationId: scaleway_iam_application.main.id,\n    description: \"a description\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nci_cd = scaleway.IamApplication(\"ciCd\")\nmain = scaleway.IamApiKey(\"main\",\n    application_id=scaleway_iam_application[\"main\"][\"id\"],\n    description=\"a description\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ciCd = new Scaleway.IamApplication(\"ciCd\");\n\n    var main = new Scaleway.IamApiKey(\"main\", new()\n    {\n        ApplicationId = scaleway_iam_application.Main.Id,\n        Description = \"a description\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewIamApplication(ctx, \"ciCd\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIamApiKey(ctx, \"main\", \u0026scaleway.IamApiKeyArgs{\n\t\t\tApplicationId: pulumi.Any(scaleway_iam_application.Main.Id),\n\t\t\tDescription:   pulumi.String(\"a description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IamApplication;\nimport com.pulumi.scaleway.IamApiKey;\nimport com.pulumi.scaleway.IamApiKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ciCd = new IamApplication(\"ciCd\");\n\n        var main = new IamApiKey(\"main\", IamApiKeyArgs.builder()        \n            .applicationId(scaleway_iam_application.main().id())\n            .description(\"a description\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ciCd:\n    type: scaleway:IamApplication\n  main:\n    type: scaleway:IamApiKey\n    properties:\n      applicationId: ${scaleway_iam_application.main.id}\n      description: a description\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApi keys can be imported using the `{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/iamApiKey:IamApiKey main 11111111111111111111\n```\n\n ",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key of the iam api key.\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "ID of the application attached to the api key.\nOnly one of the `application_id` and `user_id` should be specified.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the iam api key.\n"
                },
                "creationIp": {
                    "type": "string",
                    "description": "The IP Address of the device which created the API key.\n"
                },
                "defaultProjectId": {
                    "type": "string",
                    "description": "The default project ID to use with object storage.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the iam api key.\n"
                },
                "editable": {
                    "type": "boolean",
                    "description": "Whether the iam api key is editable.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The date and time of the expiration of the iam api key. Please note that in case of change,\nthe resource will be recreated.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret Key of the iam api key.\n",
                    "secret": true
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the iam api key.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user attached to the api key.\nOnly one of the `application_id` and `user_id` should be specified.\n"
                }
            },
            "required": [
                "accessKey",
                "createdAt",
                "creationIp",
                "defaultProjectId",
                "editable",
                "secretKey",
                "updatedAt"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "ID of the application attached to the api key.\nOnly one of the `application_id` and `user_id` should be specified.\n",
                    "willReplaceOnChanges": true
                },
                "defaultProjectId": {
                    "type": "string",
                    "description": "The default project ID to use with object storage.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the iam api key.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The date and time of the expiration of the iam api key. Please note that in case of change,\nthe resource will be recreated.\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user attached to the api key.\nOnly one of the `application_id` and `user_id` should be specified.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamApiKey resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The access key of the iam api key.\n"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "ID of the application attached to the api key.\nOnly one of the `application_id` and `user_id` should be specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the iam api key.\n"
                    },
                    "creationIp": {
                        "type": "string",
                        "description": "The IP Address of the device which created the API key.\n"
                    },
                    "defaultProjectId": {
                        "type": "string",
                        "description": "The default project ID to use with object storage.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the iam api key.\n"
                    },
                    "editable": {
                        "type": "boolean",
                        "description": "Whether the iam api key is editable.\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "The date and time of the expiration of the iam api key. Please note that in case of change,\nthe resource will be recreated.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The secret Key of the iam api key.\n",
                        "secret": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the iam api key.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user attached to the api key.\nOnly one of the `application_id` and `user_id` should be specified.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iamApplication:IamApplication": {
            "description": "Creates and manages Scaleway IAM Applications. For more information, see [the documentation](https://developers.scaleway.com/en/products/iam/api/v1alpha1/#applications-83ce5e).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.IamApplication(\"main\", {description: \"a description\"});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.IamApplication(\"main\", description=\"a description\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.IamApplication(\"main\", new()\n    {\n        Description = \"a description\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewIamApplication(ctx, \"main\", \u0026scaleway.IamApplicationArgs{\n\t\t\tDescription: pulumi.String(\"a description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IamApplication;\nimport com.pulumi.scaleway.IamApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new IamApplication(\"main\", IamApplicationArgs.builder()        \n            .description(\"a description\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:IamApplication\n    properties:\n      description: a description\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApplications can be imported using the `{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/iamApplication:IamApplication main 11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the application.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the iam application.\n"
                },
                "editable": {
                    "type": "boolean",
                    "description": "Whether the application is editable.\n"
                },
                "name": {
                    "type": "string",
                    "description": ".The name of the iam application.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "`organization_id`) The ID of the organization the application is associated with.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the application.\n"
                }
            },
            "required": [
                "createdAt",
                "editable",
                "name",
                "organizationId",
                "updatedAt"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the iam application.\n"
                },
                "name": {
                    "type": "string",
                    "description": ".The name of the iam application.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "`organization_id`) The ID of the organization the application is associated with.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamApplication resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the application.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the iam application.\n"
                    },
                    "editable": {
                        "type": "boolean",
                        "description": "Whether the application is editable.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": ".The name of the iam application.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "`organization_id`) The ID of the organization the application is associated with.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the application.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iamGroup:IamGroup": {
            "description": "Creates and manages Scaleway IAM Groups.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/iam/api/v1alpha1/#groups-f592eb).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst basic = new scaleway.IamGroup(\"basic\", {\n    applicationIds: [],\n    description: \"basic description\",\n    userIds: [],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nbasic = scaleway.IamGroup(\"basic\",\n    application_ids=[],\n    description=\"basic description\",\n    user_ids=[])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var basic = new Scaleway.IamGroup(\"basic\", new()\n    {\n        ApplicationIds = new[] {},\n        Description = \"basic description\",\n        UserIds = new[] {},\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewIamGroup(ctx, \"basic\", \u0026scaleway.IamGroupArgs{\n\t\t\tApplicationIds: pulumi.StringArray{},\n\t\t\tDescription:    pulumi.String(\"basic description\"),\n\t\t\tUserIds:        pulumi.StringArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IamGroup;\nimport com.pulumi.scaleway.IamGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var basic = new IamGroup(\"basic\", IamGroupArgs.builder()        \n            .applicationIds()\n            .description(\"basic description\")\n            .userIds()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  basic:\n    type: scaleway:IamGroup\n    properties:\n      applicationIds: []\n      description: basic description\n      userIds: []\n```\n\n### With applications\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst app = new scaleway.IamApplication(\"app\", {});\nconst withApp = new scaleway.IamGroup(\"withApp\", {\n    applicationIds: [app.id],\n    userIds: [],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\napp = scaleway.IamApplication(\"app\")\nwith_app = scaleway.IamGroup(\"withApp\",\n    application_ids=[app.id],\n    user_ids=[])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = new Scaleway.IamApplication(\"app\");\n\n    var withApp = new Scaleway.IamGroup(\"withApp\", new()\n    {\n        ApplicationIds = new[]\n        {\n            app.Id,\n        },\n        UserIds = new[] {},\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tapp, err := scaleway.NewIamApplication(ctx, \"app\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIamGroup(ctx, \"withApp\", \u0026scaleway.IamGroupArgs{\n\t\t\tApplicationIds: pulumi.StringArray{\n\t\t\t\tapp.ID(),\n\t\t\t},\n\t\t\tUserIds: pulumi.StringArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IamApplication;\nimport com.pulumi.scaleway.IamGroup;\nimport com.pulumi.scaleway.IamGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var app = new IamApplication(\"app\");\n\n        var withApp = new IamGroup(\"withApp\", IamGroupArgs.builder()        \n            .applicationIds(app.id())\n            .userIds()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  app:\n    type: scaleway:IamApplication\n  withApp:\n    type: scaleway:IamGroup\n    properties:\n      applicationIds:\n        - ${app.id}\n      userIds: []\n```\n\n\n## Import\n\nIAM groups can be imported using the `{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/iamGroup:IamGroup basic 11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "applicationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IDs of the applications attached to the group.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the group\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the IAM group.\n"
                },
                "externalMembership": {
                    "type": "boolean",
                    "description": "Manage membership externally. This make the resource ignore user_ids and application_ids. Should be used when using iam_group_membership\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IAM group.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "`organization_id`) The ID of the organization the group is associated with.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the group\n"
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IDs of the users attached to the group.\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "organizationId",
                "updatedAt"
            ],
            "inputProperties": {
                "applicationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IDs of the applications attached to the group.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the IAM group.\n"
                },
                "externalMembership": {
                    "type": "boolean",
                    "description": "Manage membership externally. This make the resource ignore user_ids and application_ids. Should be used when using iam_group_membership\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IAM group.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "`organization_id`) The ID of the organization the group is associated with.\n"
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IDs of the users attached to the group.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamGroup resources.\n",
                "properties": {
                    "applicationIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of IDs of the applications attached to the group.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the group\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the IAM group.\n"
                    },
                    "externalMembership": {
                        "type": "boolean",
                        "description": "Manage membership externally. This make the resource ignore user_ids and application_ids. Should be used when using iam_group_membership\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IAM group.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "`organization_id`) The ID of the organization the group is associated with.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the group\n"
                    },
                    "userIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of IDs of the users attached to the group.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iamGroupMembership:IamGroupMembership": {
            "description": "Add members to an IAM group.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/iam/api/v1alpha1/#groups-f592eb).\n\n## Examples\n\n### Application Membership\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst group = new scaleway.IamGroup(\"group\", {externalMembership: true});\nconst app = new scaleway.IamApplication(\"app\", {});\nconst member = new scaleway.IamGroupMembership(\"member\", {\n    groupId: group.id,\n    applicationId: app.id,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\ngroup = scaleway.IamGroup(\"group\", external_membership=True)\napp = scaleway.IamApplication(\"app\")\nmember = scaleway.IamGroupMembership(\"member\",\n    group_id=group.id,\n    application_id=app.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @group = new Scaleway.IamGroup(\"group\", new()\n    {\n        ExternalMembership = true,\n    });\n\n    var app = new Scaleway.IamApplication(\"app\");\n\n    var member = new Scaleway.IamGroupMembership(\"member\", new()\n    {\n        GroupId = @group.Id,\n        ApplicationId = app.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgroup, err := scaleway.NewIamGroup(ctx, \"group\", \u0026scaleway.IamGroupArgs{\n\t\t\tExternalMembership: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tapp, err := scaleway.NewIamApplication(ctx, \"app\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIamGroupMembership(ctx, \"member\", \u0026scaleway.IamGroupMembershipArgs{\n\t\t\tGroupId:       group.ID(),\n\t\t\tApplicationId: app.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IamGroup;\nimport com.pulumi.scaleway.IamGroupArgs;\nimport com.pulumi.scaleway.IamApplication;\nimport com.pulumi.scaleway.IamGroupMembership;\nimport com.pulumi.scaleway.IamGroupMembershipArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var group = new IamGroup(\"group\", IamGroupArgs.builder()        \n            .externalMembership(true)\n            .build());\n\n        var app = new IamApplication(\"app\");\n\n        var member = new IamGroupMembership(\"member\", IamGroupMembershipArgs.builder()        \n            .groupId(group.id())\n            .applicationId(app.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  group:\n    type: scaleway:IamGroup\n    properties:\n      externalMembership: true\n  app:\n    type: scaleway:IamApplication\n  member:\n    type: scaleway:IamGroupMembership\n    properties:\n      groupId: ${group.id}\n      applicationId: ${app.id}\n```\n\n\n## Import\n\nIAM group memberships can be imported using two format- For user`{group_id}/user/{user_id}` - For application`{group_id}/app/{application_id}` bash\n\n```sh\n $ pulumi import scaleway:index/iamGroupMembership:IamGroupMembership app 11111111-1111-1111-1111-111111111111/app/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The ID of the application that will be added to the group.\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "ID of the group to add members to.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user that will be added to the group\n\n- \u003e Only one of `application_id` or `user_id` must be specified\n"
                }
            },
            "required": [
                "groupId"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The ID of the application that will be added to the group.\n",
                    "willReplaceOnChanges": true
                },
                "groupId": {
                    "type": "string",
                    "description": "ID of the group to add members to.\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user that will be added to the group\n\n- \u003e Only one of `application_id` or `user_id` must be specified\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "groupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamGroupMembership resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The ID of the application that will be added to the group.\n",
                        "willReplaceOnChanges": true
                    },
                    "groupId": {
                        "type": "string",
                        "description": "ID of the group to add members to.\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user that will be added to the group\n\n- \u003e Only one of `application_id` or `user_id` must be specified\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iamPolicy:IamPolicy": {
            "description": "Creates and manages Scaleway IAM Policies. For more information, see [the documentation](https://developers.scaleway.com/en/products/iam/api/v1alpha1/#policies-54b8a7).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Create a policy for an organization's project\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst default = scaleway.getAccountProject({\n    name: \"default\",\n});\nconst app = new scaleway.IamApplication(\"app\", {});\nconst objectReadOnly = new scaleway.IamPolicy(\"objectReadOnly\", {\n    description: \"gives app readonly access to object storage in project\",\n    applicationId: app.id,\n    rules: [{\n        projectIds: [_default.then(_default =\u003e _default.id)],\n        permissionSetNames: [\"ObjectStorageReadOnly\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\ndefault = scaleway.get_account_project(name=\"default\")\napp = scaleway.IamApplication(\"app\")\nobject_read_only = scaleway.IamPolicy(\"objectReadOnly\",\n    description=\"gives app readonly access to object storage in project\",\n    application_id=app.id,\n    rules=[scaleway.IamPolicyRuleArgs(\n        project_ids=[default.id],\n        permission_set_names=[\"ObjectStorageReadOnly\"],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Scaleway.GetAccountProject.Invoke(new()\n    {\n        Name = \"default\",\n    });\n\n    var app = new Scaleway.IamApplication(\"app\");\n\n    var objectReadOnly = new Scaleway.IamPolicy(\"objectReadOnly\", new()\n    {\n        Description = \"gives app readonly access to object storage in project\",\n        ApplicationId = app.Id,\n        Rules = new[]\n        {\n            new Scaleway.Inputs.IamPolicyRuleArgs\n            {\n                ProjectIds = new[]\n                {\n                    @default.Apply(@default =\u003e @default.Apply(getAccountProjectResult =\u003e getAccountProjectResult.Id)),\n                },\n                PermissionSetNames = new[]\n                {\n                    \"ObjectStorageReadOnly\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := scaleway.LookupAccountProject(ctx, \u0026scaleway.LookupAccountProjectArgs{\n\t\t\tName: pulumi.StringRef(\"default\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tapp, err := scaleway.NewIamApplication(ctx, \"app\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIamPolicy(ctx, \"objectReadOnly\", \u0026scaleway.IamPolicyArgs{\n\t\t\tDescription:   pulumi.String(\"gives app readonly access to object storage in project\"),\n\t\t\tApplicationId: app.ID(),\n\t\t\tRules: scaleway.IamPolicyRuleArray{\n\t\t\t\t\u0026scaleway.IamPolicyRuleArgs{\n\t\t\t\t\tProjectIds: pulumi.StringArray{\n\t\t\t\t\t\t*pulumi.String(_default.Id),\n\t\t\t\t\t},\n\t\t\t\t\tPermissionSetNames: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"ObjectStorageReadOnly\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetAccountProjectArgs;\nimport com.pulumi.scaleway.IamApplication;\nimport com.pulumi.scaleway.IamPolicy;\nimport com.pulumi.scaleway.IamPolicyArgs;\nimport com.pulumi.scaleway.inputs.IamPolicyRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ScalewayFunctions.getAccountProject(GetAccountProjectArgs.builder()\n            .name(\"default\")\n            .build());\n\n        var app = new IamApplication(\"app\");\n\n        var objectReadOnly = new IamPolicy(\"objectReadOnly\", IamPolicyArgs.builder()        \n            .description(\"gives app readonly access to object storage in project\")\n            .applicationId(app.id())\n            .rules(IamPolicyRuleArgs.builder()\n                .projectIds(default_.id())\n                .permissionSetNames(\"ObjectStorageReadOnly\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  app:\n    type: scaleway:IamApplication\n  objectReadOnly:\n    type: scaleway:IamPolicy\n    properties:\n      description: gives app readonly access to object storage in project\n      applicationId: ${app.id}\n      rules:\n        - projectIds:\n            - ${default.id}\n          permissionSetNames:\n            - ObjectStorageReadOnly\nvariables:\n  default:\n    fn::invoke:\n      Function: scaleway:getAccountProject\n      Arguments:\n        name: default\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPolicies can be imported using the `{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/iamPolicy:IamPolicy main 11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "ID of the Application the policy will be linked to\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the policy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the iam policy.\n"
                },
                "editable": {
                    "type": "boolean",
                    "description": "Whether the policy is editable.\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "ID of the Group the policy will be linked to\n"
                },
                "name": {
                    "type": "string",
                    "description": ".The name of the iam policy.\n"
                },
                "noPrincipal": {
                    "type": "boolean",
                    "description": "If the policy doesn't apply to a principal.\n\n\u003e **Important** Only one of `user_id`, `group_id`, `application_id` and `no_principal`  may be set.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "ID of organization scoped to the rule.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/IamPolicyRule:IamPolicyRule"
                    },
                    "description": "List of rules in the policy.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the policy.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the User the policy will be linked to\n"
                }
            },
            "required": [
                "createdAt",
                "editable",
                "name",
                "organizationId",
                "rules",
                "updatedAt"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "ID of the Application the policy will be linked to\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the iam policy.\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "ID of the Group the policy will be linked to\n"
                },
                "name": {
                    "type": "string",
                    "description": ".The name of the iam policy.\n"
                },
                "noPrincipal": {
                    "type": "boolean",
                    "description": "If the policy doesn't apply to a principal.\n\n\u003e **Important** Only one of `user_id`, `group_id`, `application_id` and `no_principal`  may be set.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "ID of organization scoped to the rule.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/IamPolicyRule:IamPolicyRule"
                    },
                    "description": "List of rules in the policy.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the User the policy will be linked to\n"
                }
            },
            "requiredInputs": [
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamPolicy resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "ID of the Application the policy will be linked to\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the policy.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the iam policy.\n"
                    },
                    "editable": {
                        "type": "boolean",
                        "description": "Whether the policy is editable.\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "ID of the Group the policy will be linked to\n"
                    },
                    "name": {
                        "type": "string",
                        "description": ".The name of the iam policy.\n"
                    },
                    "noPrincipal": {
                        "type": "boolean",
                        "description": "If the policy doesn't apply to a principal.\n\n\u003e **Important** Only one of `user_id`, `group_id`, `application_id` and `no_principal`  may be set.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "ID of organization scoped to the rule.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/IamPolicyRule:IamPolicyRule"
                        },
                        "description": "List of rules in the policy.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the policy.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the User the policy will be linked to\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iamSshKey:IamSshKey": {
            "description": "Creates and manages Scaleway IAM SSH Keys.\nFor more information,\nsee [the documentation](https://developers.scaleway.com/en/products/iam/api/v1alpha1/#ssh-keys-d8ccd4).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.IamSshKey(\"main\", {publicKey: \"\u003cYOUR-PUBLIC-SSH-KEY\u003e\"});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.IamSshKey(\"main\", public_key=\"\u003cYOUR-PUBLIC-SSH-KEY\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.IamSshKey(\"main\", new()\n    {\n        PublicKey = \"\u003cYOUR-PUBLIC-SSH-KEY\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewIamSshKey(ctx, \"main\", \u0026scaleway.IamSshKeyArgs{\n\t\t\tPublicKey: pulumi.String(\"\u003cYOUR-PUBLIC-SSH-KEY\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IamSshKey;\nimport com.pulumi.scaleway.IamSshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new IamSshKey(\"main\", IamSshKeyArgs.builder()        \n            .publicKey(\"\u003cYOUR-PUBLIC-SSH-KEY\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:IamSshKey\n    properties:\n      publicKey: \u003cYOUR-PUBLIC-SSH-KEY\u003e\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSSH keys can be imported using the `id`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/iamSshKey:IamSshKey main 11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the SSH key.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "The SSH key status.\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the iam SSH key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the organization the SSH key is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the SSH key is\nassociated with.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public SSH key to be added.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the SSH key.\n"
                }
            },
            "required": [
                "createdAt",
                "fingerprint",
                "name",
                "organizationId",
                "projectId",
                "publicKey",
                "updatedAt"
            ],
            "inputProperties": {
                "disabled": {
                    "type": "boolean",
                    "description": "The SSH key status.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the SSH key is\nassociated with.\n",
                    "willReplaceOnChanges": true
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public SSH key to be added.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamSshKey resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the SSH key.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "The SSH key status.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the iam SSH key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the SSH key is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the SSH key is\nassociated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public SSH key to be added.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the SSH key.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iamUser:IamUser": {
            "description": "Creates and manages Scaleway IAM Users.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/iam/#path-users-list-users-of-an-organization).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst basic = new scaleway.IamUser(\"basic\", {email: \"test@test.com\"});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nbasic = scaleway.IamUser(\"basic\", email=\"test@test.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var basic = new Scaleway.IamUser(\"basic\", new()\n    {\n        Email = \"test@test.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewIamUser(ctx, \"basic\", \u0026scaleway.IamUserArgs{\n\t\t\tEmail: pulumi.String(\"test@test.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IamUser;\nimport com.pulumi.scaleway.IamUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var basic = new IamUser(\"basic\", IamUserArgs.builder()        \n            .email(\"test@test.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  basic:\n    type: scaleway:IamUser\n    properties:\n      email: test@test.com\n```\n\n\n## Import\n\nIAM users can be imported using the `{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/iamUser:IamUser basic 11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "accountRootUserId": {
                    "type": "string",
                    "description": "The ID of the account root user associated with the user.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the iam user.\n"
                },
                "deletable": {
                    "type": "boolean",
                    "description": "Whether the iam user is deletable.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email of the IAM user.\n"
                },
                "lastLoginAt": {
                    "type": "string",
                    "description": "The date of the last login.\n"
                },
                "mfa": {
                    "type": "boolean",
                    "description": "Whether the MFA is enabled.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "`organization_id`) The ID of the organization the user is associated with.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of user invitation. Check the possible values in the [api doc](https://www.scaleway.com/en/developers/api/iam/#path-users-get-a-given-user).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of user. Check the possible values in the [api doc](https://www.scaleway.com/en/developers/api/iam/#path-users-get-a-given-user).\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the iam user.\n"
                }
            },
            "required": [
                "accountRootUserId",
                "createdAt",
                "deletable",
                "email",
                "lastLoginAt",
                "mfa",
                "organizationId",
                "status",
                "type",
                "updatedAt"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "The email of the IAM user.\n",
                    "willReplaceOnChanges": true
                },
                "organizationId": {
                    "type": "string",
                    "description": "`organization_id`) The ID of the organization the user is associated with.\n"
                }
            },
            "requiredInputs": [
                "email"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamUser resources.\n",
                "properties": {
                    "accountRootUserId": {
                        "type": "string",
                        "description": "The ID of the account root user associated with the user.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the iam user.\n"
                    },
                    "deletable": {
                        "type": "boolean",
                        "description": "Whether the iam user is deletable.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email of the IAM user.\n",
                        "willReplaceOnChanges": true
                    },
                    "lastLoginAt": {
                        "type": "string",
                        "description": "The date of the last login.\n"
                    },
                    "mfa": {
                        "type": "boolean",
                        "description": "Whether the MFA is enabled.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "`organization_id`) The ID of the organization the user is associated with.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of user invitation. Check the possible values in the [api doc](https://www.scaleway.com/en/developers/api/iam/#path-users-get-a-given-user).\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of user. Check the possible values in the [api doc](https://www.scaleway.com/en/developers/api/iam/#path-users-get-a-given-user).\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the iam user.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceImage:InstanceImage": {
            "description": "Creates and manages Scaleway Compute Images.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#images-41389b).\n\n## Example\n\n### From a volume\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst volume = new scaleway.InstanceVolume(\"volume\", {\n    type: \"b_ssd\",\n    sizeInGb: 20,\n});\nconst volumeSnapshot = new scaleway.InstanceSnapshot(\"volumeSnapshot\", {volumeId: volume.id});\nconst volumeImage = new scaleway.InstanceImage(\"volumeImage\", {rootVolumeId: volumeSnapshot.id});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nvolume = scaleway.InstanceVolume(\"volume\",\n    type=\"b_ssd\",\n    size_in_gb=20)\nvolume_snapshot = scaleway.InstanceSnapshot(\"volumeSnapshot\", volume_id=volume.id)\nvolume_image = scaleway.InstanceImage(\"volumeImage\", root_volume_id=volume_snapshot.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var volume = new Scaleway.InstanceVolume(\"volume\", new()\n    {\n        Type = \"b_ssd\",\n        SizeInGb = 20,\n    });\n\n    var volumeSnapshot = new Scaleway.InstanceSnapshot(\"volumeSnapshot\", new()\n    {\n        VolumeId = volume.Id,\n    });\n\n    var volumeImage = new Scaleway.InstanceImage(\"volumeImage\", new()\n    {\n        RootVolumeId = volumeSnapshot.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvolume, err := scaleway.NewInstanceVolume(ctx, \"volume\", \u0026scaleway.InstanceVolumeArgs{\n\t\t\tType:     pulumi.String(\"b_ssd\"),\n\t\t\tSizeInGb: pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvolumeSnapshot, err := scaleway.NewInstanceSnapshot(ctx, \"volumeSnapshot\", \u0026scaleway.InstanceSnapshotArgs{\n\t\t\tVolumeId: volume.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceImage(ctx, \"volumeImage\", \u0026scaleway.InstanceImageArgs{\n\t\t\tRootVolumeId: volumeSnapshot.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceVolume;\nimport com.pulumi.scaleway.InstanceVolumeArgs;\nimport com.pulumi.scaleway.InstanceSnapshot;\nimport com.pulumi.scaleway.InstanceSnapshotArgs;\nimport com.pulumi.scaleway.InstanceImage;\nimport com.pulumi.scaleway.InstanceImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var volume = new InstanceVolume(\"volume\", InstanceVolumeArgs.builder()        \n            .type(\"b_ssd\")\n            .sizeInGb(20)\n            .build());\n\n        var volumeSnapshot = new InstanceSnapshot(\"volumeSnapshot\", InstanceSnapshotArgs.builder()        \n            .volumeId(volume.id())\n            .build());\n\n        var volumeImage = new InstanceImage(\"volumeImage\", InstanceImageArgs.builder()        \n            .rootVolumeId(volumeSnapshot.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  volume:\n    type: scaleway:InstanceVolume\n    properties:\n      type: b_ssd\n      sizeInGb: 20\n  volumeSnapshot:\n    type: scaleway:InstanceSnapshot\n    properties:\n      volumeId: ${volume.id}\n  volumeImage:\n    type: scaleway:InstanceImage\n    properties:\n      rootVolumeId: ${volumeSnapshot.id}\n```\n\n### From a server\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst server = new scaleway.InstanceServer(\"server\", {\n    image: \"ubuntu_jammy\",\n    type: \"DEV1-S\",\n});\nconst serverSnapshot = new scaleway.InstanceSnapshot(\"serverSnapshot\", {volumeId: scaleway_instance_server.main.root_volume[0].volume_id});\nconst serverImage = new scaleway.InstanceImage(\"serverImage\", {rootVolumeId: serverSnapshot.id});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nserver = scaleway.InstanceServer(\"server\",\n    image=\"ubuntu_jammy\",\n    type=\"DEV1-S\")\nserver_snapshot = scaleway.InstanceSnapshot(\"serverSnapshot\", volume_id=scaleway_instance_server[\"main\"][\"root_volume\"][0][\"volume_id\"])\nserver_image = scaleway.InstanceImage(\"serverImage\", root_volume_id=server_snapshot.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var server = new Scaleway.InstanceServer(\"server\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        Type = \"DEV1-S\",\n    });\n\n    var serverSnapshot = new Scaleway.InstanceSnapshot(\"serverSnapshot\", new()\n    {\n        VolumeId = scaleway_instance_server.Main.Root_volume[0].Volume_id,\n    });\n\n    var serverImage = new Scaleway.InstanceImage(\"serverImage\", new()\n    {\n        RootVolumeId = serverSnapshot.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceServer(ctx, \"server\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tserverSnapshot, err := scaleway.NewInstanceSnapshot(ctx, \"serverSnapshot\", \u0026scaleway.InstanceSnapshotArgs{\n\t\t\tVolumeId: pulumi.Any(scaleway_instance_server.Main.Root_volume[0].Volume_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceImage(ctx, \"serverImage\", \u0026scaleway.InstanceImageArgs{\n\t\t\tRootVolumeId: serverSnapshot.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.InstanceSnapshot;\nimport com.pulumi.scaleway.InstanceSnapshotArgs;\nimport com.pulumi.scaleway.InstanceImage;\nimport com.pulumi.scaleway.InstanceImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var server = new InstanceServer(\"server\", InstanceServerArgs.builder()        \n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .build());\n\n        var serverSnapshot = new InstanceSnapshot(\"serverSnapshot\", InstanceSnapshotArgs.builder()        \n            .volumeId(scaleway_instance_server.main().root_volume()[0].volume_id())\n            .build());\n\n        var serverImage = new InstanceImage(\"serverImage\", InstanceImageArgs.builder()        \n            .rootVolumeId(serverSnapshot.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  server:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n  serverSnapshot:\n    type: scaleway:InstanceSnapshot\n    properties:\n      volumeId: ${scaleway_instance_server.main.root_volume[0].volume_id}\n  serverImage:\n    type: scaleway:InstanceImage\n    properties:\n      rootVolumeId: ${serverSnapshot.id}\n```\n\n### With additional volumes\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.InstanceVolume;\nimport com.pulumi.scaleway.InstanceVolumeArgs;\nimport com.pulumi.scaleway.InstanceSnapshot;\nimport com.pulumi.scaleway.InstanceSnapshotArgs;\nimport com.pulumi.scaleway.InstanceImage;\nimport com.pulumi.scaleway.InstanceImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var server = new InstanceServer(\"server\", InstanceServerArgs.builder()        \n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .build());\n\n        var volume = new InstanceVolume(\"volume\", InstanceVolumeArgs.builder()        \n            .type(\"b_ssd\")\n            .sizeInGb(20)\n            .build());\n\n        var volumeSnapshot = new InstanceSnapshot(\"volumeSnapshot\", InstanceSnapshotArgs.builder()        \n            .volumeId(volume.id())\n            .build());\n\n        var serverSnapshot = new InstanceSnapshot(\"serverSnapshot\", InstanceSnapshotArgs.builder()        \n            .volumeId(scaleway_instance_server.main().root_volume()[0].volume_id())\n            .build());\n\n        var image = new InstanceImage(\"image\", InstanceImageArgs.builder()        \n            .rootVolumeId(serverSnapshot.id())\n            .additionalVolumes(volumeSnapshot.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  server:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n  volume:\n    type: scaleway:InstanceVolume\n    properties:\n      type: b_ssd\n      sizeInGb: 20\n  volumeSnapshot:\n    type: scaleway:InstanceSnapshot\n    properties:\n      volumeId: ${volume.id}\n  serverSnapshot:\n    type: scaleway:InstanceSnapshot\n    properties:\n      volumeId: ${scaleway_instance_server.main.root_volume[0].volume_id}\n  image:\n    type: scaleway:InstanceImage\n    properties:\n      rootVolumeId: ${serverSnapshot.id}\n      additionalVolumes:\n        - ${volumeSnapshot.id}\n```\n\n\n## Import\n\nImages can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceImage:InstanceImage main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "additionalVolumeIds": {
                    "type": "string",
                    "description": "List of IDs of the snapshots of the additional volumes to be attached to the image.\n\n\u003e **Important:** For now it is only possible to have 1 additional_volume.\n"
                },
                "additionalVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceImageAdditionalVolume:InstanceImageAdditionalVolume"
                    },
                    "description": "The description of the extra volumes attached to the image.\n"
                },
                "architecture": {
                    "type": "string",
                    "description": "The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.\n"
                },
                "creationDate": {
                    "type": "string",
                    "description": "Date of the volume creation.\n"
                },
                "fromServerId": {
                    "type": "string",
                    "description": "ID of the server the image is based on (in case it is a backup).\n"
                },
                "modificationDate": {
                    "type": "string",
                    "description": "Date of volume latest update.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the image. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the image is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project the image is associated with.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Set to `true` if the image is public.\n"
                },
                "rootVolumeId": {
                    "type": "string",
                    "description": "The ID of the snapshot of the volume to be used as root in the image.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the volume.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the image.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone in which the image should be created.\n"
                }
            },
            "required": [
                "additionalVolumes",
                "creationDate",
                "fromServerId",
                "modificationDate",
                "name",
                "organizationId",
                "projectId",
                "rootVolumeId",
                "state",
                "zone"
            ],
            "inputProperties": {
                "additionalVolumeIds": {
                    "type": "string",
                    "description": "List of IDs of the snapshots of the additional volumes to be attached to the image.\n\n\u003e **Important:** For now it is only possible to have 1 additional_volume.\n"
                },
                "architecture": {
                    "type": "string",
                    "description": "The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the image. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project the image is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "public": {
                    "type": "boolean",
                    "description": "Set to `true` if the image is public.\n"
                },
                "rootVolumeId": {
                    "type": "string",
                    "description": "The ID of the snapshot of the volume to be used as root in the image.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the image.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone in which the image should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "rootVolumeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceImage resources.\n",
                "properties": {
                    "additionalVolumeIds": {
                        "type": "string",
                        "description": "List of IDs of the snapshots of the additional volumes to be attached to the image.\n\n\u003e **Important:** For now it is only possible to have 1 additional_volume.\n"
                    },
                    "additionalVolumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceImageAdditionalVolume:InstanceImageAdditionalVolume"
                        },
                        "description": "The description of the extra volumes attached to the image.\n"
                    },
                    "architecture": {
                        "type": "string",
                        "description": "The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.\n"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Date of the volume creation.\n"
                    },
                    "fromServerId": {
                        "type": "string",
                        "description": "ID of the server the image is based on (in case it is a backup).\n"
                    },
                    "modificationDate": {
                        "type": "string",
                        "description": "Date of volume latest update.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the image. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the image is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the image is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Set to `true` if the image is public.\n"
                    },
                    "rootVolumeId": {
                        "type": "string",
                        "description": "The ID of the snapshot of the volume to be used as root in the image.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the volume.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to apply to the image.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone in which the image should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceIp:InstanceIp": {
            "description": "Creates and manages Scaleway Compute Instance IPs. For more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#ips-268151).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst serverIp = new scaleway.InstanceIp(\"serverIp\", {});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nserver_ip = scaleway.InstanceIp(\"serverIp\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var serverIp = new Scaleway.InstanceIp(\"serverIp\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceIp(ctx, \"serverIp\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceIp;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var serverIp = new InstanceIp(\"serverIp\");\n\n    }\n}\n```\n```yaml\nresources:\n  serverIp:\n    type: scaleway:InstanceIp\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIPs can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceIp:InstanceIp server_ip fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP address.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the IP is associated with.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The IP Prefix.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IP is associated with.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse dns attached to this IP\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The server associated with this IP\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the IP.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the IP (`nat`, `routed_ipv4`, `routed_ipv6`), more information in [the documentation](https://www.scaleway.com/en/docs/compute/instances/api-cli/using-routed-ips/)\n\n\u003e **Important:** An IP can migrate from `nat` to `routed_ipv4` but cannot be converted back\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n"
                }
            },
            "required": [
                "address",
                "organizationId",
                "prefix",
                "projectId",
                "reverse",
                "serverId",
                "type",
                "zone"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IP is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the IP.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the IP (`nat`, `routed_ipv4`, `routed_ipv6`), more information in [the documentation](https://www.scaleway.com/en/docs/compute/instances/api-cli/using-routed-ips/)\n\n\u003e **Important:** An IP can migrate from `nat` to `routed_ipv4` but cannot be converted back\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceIp resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the IP is associated with.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The IP Prefix.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the IP is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse dns attached to this IP\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server associated with this IP\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the IP.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the IP (`nat`, `routed_ipv4`, `routed_ipv6`), more information in [the documentation](https://www.scaleway.com/en/docs/compute/instances/api-cli/using-routed-ips/)\n\n\u003e **Important:** An IP can migrate from `nat` to `routed_ipv4` but cannot be converted back\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the IP should be reserved.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceIpReverseDns:InstanceIpReverseDns": {
            "description": "Manages Scaleway Compute Instance IPs Reverse DNS.\n\nPlease check our [guide](https://www.scaleway.com/en/docs/compute/instances/how-to/configure-reverse-dns/) for more details\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst serverIp = new scaleway.InstanceIp(\"serverIp\", {});\nconst tfA = new scaleway.DomainRecord(\"tfA\", {\n    dnsZone: \"scaleway.com\",\n    type: \"A\",\n    data: serverIp.address,\n    ttl: 3600,\n    priority: 1,\n});\nconst reverse = new scaleway.InstanceIpReverseDns(\"reverse\", {\n    ipId: serverIp.id,\n    reverse: \"www.scaleway.com\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nserver_ip = scaleway.InstanceIp(\"serverIp\")\ntf_a = scaleway.DomainRecord(\"tfA\",\n    dns_zone=\"scaleway.com\",\n    type=\"A\",\n    data=server_ip.address,\n    ttl=3600,\n    priority=1)\nreverse = scaleway.InstanceIpReverseDns(\"reverse\",\n    ip_id=server_ip.id,\n    reverse=\"www.scaleway.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var serverIp = new Scaleway.InstanceIp(\"serverIp\");\n\n    var tfA = new Scaleway.DomainRecord(\"tfA\", new()\n    {\n        DnsZone = \"scaleway.com\",\n        Type = \"A\",\n        Data = serverIp.Address,\n        Ttl = 3600,\n        Priority = 1,\n    });\n\n    var reverse = new Scaleway.InstanceIpReverseDns(\"reverse\", new()\n    {\n        IpId = serverIp.Id,\n        Reverse = \"www.scaleway.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tserverIp, err := scaleway.NewInstanceIp(ctx, \"serverIp\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"tfA\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone:  pulumi.String(\"scaleway.com\"),\n\t\t\tType:     pulumi.String(\"A\"),\n\t\t\tData:     serverIp.Address,\n\t\t\tTtl:      pulumi.Int(3600),\n\t\t\tPriority: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceIpReverseDns(ctx, \"reverse\", \u0026scaleway.InstanceIpReverseDnsArgs{\n\t\t\tIpId:    serverIp.ID(),\n\t\t\tReverse: pulumi.String(\"www.scaleway.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceIp;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport com.pulumi.scaleway.InstanceIpReverseDns;\nimport com.pulumi.scaleway.InstanceIpReverseDnsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var serverIp = new InstanceIp(\"serverIp\");\n\n        var tfA = new DomainRecord(\"tfA\", DomainRecordArgs.builder()        \n            .dnsZone(\"scaleway.com\")\n            .type(\"A\")\n            .data(serverIp.address())\n            .ttl(3600)\n            .priority(1)\n            .build());\n\n        var reverse = new InstanceIpReverseDns(\"reverse\", InstanceIpReverseDnsArgs.builder()        \n            .ipId(serverIp.id())\n            .reverse(\"www.scaleway.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  serverIp:\n    type: scaleway:InstanceIp\n  tfA:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: scaleway.com\n      type: A\n      data: ${serverIp.address}\n      ttl: 3600\n      priority: 1\n  reverse:\n    type: scaleway:InstanceIpReverseDns\n    properties:\n      ipId: ${serverIp.id}\n      reverse: www.scaleway.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIPs reverse DNS can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceIpReverseDns:InstanceIpReverseDns reverse fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "ipId": {
                    "type": "string",
                    "description": "The IP ID\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse DNS for this IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n"
                }
            },
            "required": [
                "ipId",
                "reverse",
                "zone"
            ],
            "inputProperties": {
                "ipId": {
                    "type": "string",
                    "description": "The IP ID\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse DNS for this IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ipId",
                "reverse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceIpReverseDns resources.\n",
                "properties": {
                    "ipId": {
                        "type": "string",
                        "description": "The IP ID\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse DNS for this IP.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the IP should be reserved.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instancePlacementGroup:InstancePlacementGroup": {
            "description": "Creates and manages Compute Instance Placement Groups. For more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst availabilityGroup = new scaleway.InstancePlacementGroup(\"availabilityGroup\", {});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\navailability_group = scaleway.InstancePlacementGroup(\"availabilityGroup\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var availabilityGroup = new Scaleway.InstancePlacementGroup(\"availabilityGroup\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstancePlacementGroup(ctx, \"availabilityGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstancePlacementGroup;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var availabilityGroup = new InstancePlacementGroup(\"availabilityGroup\");\n\n    }\n}\n```\n```yaml\nresources:\n  availabilityGroup:\n    type: scaleway:InstancePlacementGroup\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPlacement groups can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instancePlacementGroup:InstancePlacementGroup availability_group fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the placement group.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the placement group is associated with.\n"
                },
                "policyMode": {
                    "type": "string",
                    "description": "The [policy mode](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group. Possible values are: `optional` or `enforced`.\n"
                },
                "policyRespected": {
                    "type": "boolean",
                    "description": "Is true when the policy is respected.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "The [policy type](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group. Possible values are: `low_latency` or `max_availability`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the placement group is associated with.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the placement group.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the placement group should be created.\n"
                }
            },
            "required": [
                "name",
                "organizationId",
                "policyRespected",
                "projectId",
                "zone"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the placement group.\n"
                },
                "policyMode": {
                    "type": "string",
                    "description": "The [policy mode](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group. Possible values are: `optional` or `enforced`.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "The [policy type](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group. Possible values are: `low_latency` or `max_availability`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the placement group is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the placement group.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the placement group should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstancePlacementGroup resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the placement group.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the placement group is associated with.\n"
                    },
                    "policyMode": {
                        "type": "string",
                        "description": "The [policy mode](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group. Possible values are: `optional` or `enforced`.\n"
                    },
                    "policyRespected": {
                        "type": "boolean",
                        "description": "Is true when the policy is respected.\n"
                    },
                    "policyType": {
                        "type": "string",
                        "description": "The [policy type](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group. Possible values are: `low_latency` or `max_availability`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the placement group is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to apply to the placement group.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the placement group should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instancePrivateNic:InstancePrivateNic": {
            "description": "Creates and manages Scaleway Instance Private NICs. For more information, see\n[the documentation](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst pnic01 = new scaleway.InstancePrivateNic(\"pnic01\", {\n    privateNetworkId: \"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\",\n    serverId: \"fr-par-1/11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\npnic01 = scaleway.InstancePrivateNic(\"pnic01\",\n    private_network_id=\"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\",\n    server_id=\"fr-par-1/11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pnic01 = new Scaleway.InstancePrivateNic(\"pnic01\", new()\n    {\n        PrivateNetworkId = \"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\",\n        ServerId = \"fr-par-1/11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstancePrivateNic(ctx, \"pnic01\", \u0026scaleway.InstancePrivateNicArgs{\n\t\t\tPrivateNetworkId: pulumi.String(\"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"),\n\t\t\tServerId:         pulumi.String(\"fr-par-1/11111111-1111-1111-1111-111111111111\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstancePrivateNic;\nimport com.pulumi.scaleway.InstancePrivateNicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pnic01 = new InstancePrivateNic(\"pnic01\", InstancePrivateNicArgs.builder()        \n            .privateNetworkId(\"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\")\n            .serverId(\"fr-par-1/11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pnic01:\n    type: scaleway:InstancePrivateNic\n    properties:\n      privateNetworkId: fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\n      serverId: fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n### With zone\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {zone: \"fr-par-2\"});\nconst base = new scaleway.InstanceServer(\"base\", {\n    image: \"ubuntu_jammy\",\n    type: \"DEV1-S\",\n    zone: pn01.zone,\n});\nconst pnic01 = new scaleway.InstancePrivateNic(\"pnic01\", {\n    serverId: base.id,\n    privateNetworkId: pn01.id,\n    zone: pn01.zone,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\npn01 = scaleway.VpcPrivateNetwork(\"pn01\", zone=\"fr-par-2\")\nbase = scaleway.InstanceServer(\"base\",\n    image=\"ubuntu_jammy\",\n    type=\"DEV1-S\",\n    zone=pn01.zone)\npnic01 = scaleway.InstancePrivateNic(\"pnic01\",\n    server_id=base.id,\n    private_network_id=pn01.id,\n    zone=pn01.zone)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        Zone = \"fr-par-2\",\n    });\n\n    var @base = new Scaleway.InstanceServer(\"base\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        Type = \"DEV1-S\",\n        Zone = pn01.Zone,\n    });\n\n    var pnic01 = new Scaleway.InstancePrivateNic(\"pnic01\", new()\n    {\n        ServerId = @base.Id,\n        PrivateNetworkId = pn01.Id,\n        Zone = pn01.Zone,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tZone: pulumi.String(\"fr-par-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbase, err := scaleway.NewInstanceServer(ctx, \"base\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tZone:  pn01.Zone,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstancePrivateNic(ctx, \"pnic01\", \u0026scaleway.InstancePrivateNicArgs{\n\t\t\tServerId:         base.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tZone:             pn01.Zone,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.InstancePrivateNic;\nimport com.pulumi.scaleway.InstancePrivateNicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()        \n            .zone(\"fr-par-2\")\n            .build());\n\n        var base = new InstanceServer(\"base\", InstanceServerArgs.builder()        \n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .zone(pn01.zone())\n            .build());\n\n        var pnic01 = new InstancePrivateNic(\"pnic01\", InstancePrivateNicArgs.builder()        \n            .serverId(base.id())\n            .privateNetworkId(pn01.id())\n            .zone(pn01.zone())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      zone: fr-par-2\n  base:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n      zone: ${pn01.zone}\n  pnic01:\n    type: scaleway:InstancePrivateNic\n    properties:\n      serverId: ${base.id}\n      privateNetworkId: ${pn01.id}\n      zone: ${pn01.zone}\n```\n\n\n## Import\n\nPrivate NICs can be imported using the `{zone}/{server_id}/{private_nic_id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instancePrivateNic:InstancePrivateNic pnic01 fr-par-1/11111111-1111-1111-1111-111111111111/22222222-2222-2222-2222-222222222222\n```\n\n ",
            "properties": {
                "ipIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPAM ip list, should be for internal use only\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address of the private NIC.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network attached to.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the server associated with.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the private NIC.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server must be created.\n"
                }
            },
            "required": [
                "macAddress",
                "privateNetworkId",
                "serverId",
                "zone"
            ],
            "inputProperties": {
                "ipIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPAM ip list, should be for internal use only\n",
                    "willReplaceOnChanges": true
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network attached to.\n",
                    "willReplaceOnChanges": true
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the server associated with.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the private NIC.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server must be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "privateNetworkId",
                "serverId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstancePrivateNic resources.\n",
                "properties": {
                    "ipIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IPAM ip list, should be for internal use only\n",
                        "willReplaceOnChanges": true
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "The MAC address of the private NIC.\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "The ID of the private network attached to.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The ID of the server associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the private NIC.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server must be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceSecurityGroup:InstanceSecurityGroup": {
            "description": "\n\n\n## Import\n\nInstance security group can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceSecurityGroup:InstanceSecurityGroup web fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the security group.\n"
                },
                "enableDefaultSecurity": {
                    "type": "boolean",
                    "description": "Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).\n"
                },
                "externalRules": {
                    "type": "boolean",
                    "description": "A boolean to specify whether to use instance_security_group_rules.\nIf `external_rules` is set to `true`, `inbound_rule` and `outbound_rule` can not be set directly in the security group.\n"
                },
                "inboundDefaultPolicy": {
                    "type": "string",
                    "description": "The default policy on incoming traffic. Possible values are: `accept` or `drop`.\n"
                },
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule"
                    },
                    "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the security group is associated with.\n"
                },
                "outboundDefaultPolicy": {
                    "type": "string",
                    "description": "The default policy on outgoing traffic. Possible values are: `accept` or `drop`.\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule"
                    },
                    "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the security group is associated with.\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "A boolean to specify whether the security group should be stateful or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags of the security group.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the security group should be created.\n"
                }
            },
            "required": [
                "name",
                "organizationId",
                "projectId",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the security group.\n"
                },
                "enableDefaultSecurity": {
                    "type": "boolean",
                    "description": "Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).\n"
                },
                "externalRules": {
                    "type": "boolean",
                    "description": "A boolean to specify whether to use instance_security_group_rules.\nIf `external_rules` is set to `true`, `inbound_rule` and `outbound_rule` can not be set directly in the security group.\n"
                },
                "inboundDefaultPolicy": {
                    "type": "string",
                    "description": "The default policy on incoming traffic. Possible values are: `accept` or `drop`.\n"
                },
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule"
                    },
                    "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group.\n"
                },
                "outboundDefaultPolicy": {
                    "type": "string",
                    "description": "The default policy on outgoing traffic. Possible values are: `accept` or `drop`.\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule"
                    },
                    "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the security group is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "stateful": {
                    "type": "boolean",
                    "description": "A boolean to specify whether the security group should be stateful or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags of the security group.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the security group should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceSecurityGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the security group.\n"
                    },
                    "enableDefaultSecurity": {
                        "type": "boolean",
                        "description": "Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).\n"
                    },
                    "externalRules": {
                        "type": "boolean",
                        "description": "A boolean to specify whether to use instance_security_group_rules.\nIf `external_rules` is set to `true`, `inbound_rule` and `outbound_rule` can not be set directly in the security group.\n"
                    },
                    "inboundDefaultPolicy": {
                        "type": "string",
                        "description": "The default policy on incoming traffic. Possible values are: `accept` or `drop`.\n"
                    },
                    "inboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule"
                        },
                        "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the security group.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the security group is associated with.\n"
                    },
                    "outboundDefaultPolicy": {
                        "type": "string",
                        "description": "The default policy on outgoing traffic. Possible values are: `accept` or `drop`.\n"
                    },
                    "outboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule"
                        },
                        "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the security group is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "stateful": {
                        "type": "boolean",
                        "description": "A boolean to specify whether the security group should be stateful or not.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags of the security group.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the security group should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceSecurityGroupRules:InstanceSecurityGroupRules": {
            "description": "Creates and manages Scaleway Compute Instance security group rules. For more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89).\n\nThis resource can be used to externalize rules from a `scaleway.InstanceSecurityGroup` to solve circular dependency problems. When using this resource do not forget to set `external_rules = true` on the security group.\n\n\u003e **Warning:** In order to guaranty rules order in a given security group only one scaleway.InstanceSecurityGroupRules is allowed per security group.\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst sg01 = new scaleway.InstanceSecurityGroup(\"sg01\", {externalRules: true});\nconst sgrs01 = new scaleway.InstanceSecurityGroupRules(\"sgrs01\", {\n    securityGroupId: sg01.id,\n    inboundRules: [{\n        action: \"accept\",\n        port: 80,\n        ipRange: \"0.0.0.0/0\",\n    }],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nsg01 = scaleway.InstanceSecurityGroup(\"sg01\", external_rules=True)\nsgrs01 = scaleway.InstanceSecurityGroupRules(\"sgrs01\",\n    security_group_id=sg01.id,\n    inbound_rules=[scaleway.InstanceSecurityGroupRulesInboundRuleArgs(\n        action=\"accept\",\n        port=80,\n        ip_range=\"0.0.0.0/0\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sg01 = new Scaleway.InstanceSecurityGroup(\"sg01\", new()\n    {\n        ExternalRules = true,\n    });\n\n    var sgrs01 = new Scaleway.InstanceSecurityGroupRules(\"sgrs01\", new()\n    {\n        SecurityGroupId = sg01.Id,\n        InboundRules = new[]\n        {\n            new Scaleway.Inputs.InstanceSecurityGroupRulesInboundRuleArgs\n            {\n                Action = \"accept\",\n                Port = 80,\n                IpRange = \"0.0.0.0/0\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsg01, err := scaleway.NewInstanceSecurityGroup(ctx, \"sg01\", \u0026scaleway.InstanceSecurityGroupArgs{\n\t\t\tExternalRules: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceSecurityGroupRules(ctx, \"sgrs01\", \u0026scaleway.InstanceSecurityGroupRulesArgs{\n\t\t\tSecurityGroupId: sg01.ID(),\n\t\t\tInboundRules: scaleway.InstanceSecurityGroupRulesInboundRuleArray{\n\t\t\t\t\u0026scaleway.InstanceSecurityGroupRulesInboundRuleArgs{\n\t\t\t\t\tAction:  pulumi.String(\"accept\"),\n\t\t\t\t\tPort:    pulumi.Int(80),\n\t\t\t\t\tIpRange: pulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceSecurityGroup;\nimport com.pulumi.scaleway.InstanceSecurityGroupArgs;\nimport com.pulumi.scaleway.InstanceSecurityGroupRules;\nimport com.pulumi.scaleway.InstanceSecurityGroupRulesArgs;\nimport com.pulumi.scaleway.inputs.InstanceSecurityGroupRulesInboundRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sg01 = new InstanceSecurityGroup(\"sg01\", InstanceSecurityGroupArgs.builder()        \n            .externalRules(true)\n            .build());\n\n        var sgrs01 = new InstanceSecurityGroupRules(\"sgrs01\", InstanceSecurityGroupRulesArgs.builder()        \n            .securityGroupId(sg01.id())\n            .inboundRules(InstanceSecurityGroupRulesInboundRuleArgs.builder()\n                .action(\"accept\")\n                .port(80)\n                .ipRange(\"0.0.0.0/0\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sg01:\n    type: scaleway:InstanceSecurityGroup\n    properties:\n      externalRules: true\n  sgrs01:\n    type: scaleway:InstanceSecurityGroupRules\n    properties:\n      securityGroupId: ${sg01.id}\n      inboundRules:\n        - action: accept\n          port: 80\n          ipRange: 0.0.0.0/0\n```\n\n### Simplify your rules using dynamic block and `for_each` loop\n\nYou can use `for_each` syntax to simplify the definition of your rules.\nLet's suppose that your inbound default policy is to drop, but you want to build a list of exceptions to accept.\nCreate a local containing your exceptions (`locals.trusted`) and use the `for_each` syntax in a dynamic block:\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceSecurityGroup;\nimport com.pulumi.scaleway.InstanceSecurityGroupArgs;\nimport com.pulumi.scaleway.InstanceSecurityGroupRules;\nimport com.pulumi.scaleway.InstanceSecurityGroupRulesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainInstanceSecurityGroup = new InstanceSecurityGroup(\"mainInstanceSecurityGroup\", InstanceSecurityGroupArgs.builder()        \n            .description(\"test\")\n            .inboundDefaultPolicy(\"drop\")\n            .outboundDefaultPolicy(\"accept\")\n            .build());\n\n        final var trusted =         \n            \"1.2.3.4\",\n            \"4.5.6.7\",\n            \"7.8.9.10\";\n\n        var mainInstanceSecurityGroupRules = new InstanceSecurityGroupRules(\"mainInstanceSecurityGroupRules\", InstanceSecurityGroupRulesArgs.builder()        \n            .securityGroupId(mainInstanceSecurityGroup.id())\n            .dynamic(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainInstanceSecurityGroup:\n    type: scaleway:InstanceSecurityGroup\n    properties:\n      description: test\n      inboundDefaultPolicy: drop\n      outboundDefaultPolicy: accept\n  mainInstanceSecurityGroupRules:\n    type: scaleway:InstanceSecurityGroupRules\n    properties:\n      securityGroupId: ${mainInstanceSecurityGroup.id}\n      dynamic:\n        - forEach: ${trusted}\n          content:\n            - action: accept\n              ip: ${inbound_rule.value}\n              port: 80\nvariables:\n  trusted:\n    - 1.2.3.4\n    - 4.5.6.7\n    - 7.8.9.10\n```\n\nYou can also use object to assign IP and port in the same time.\nIn your locals, you can use objects to encapsulate several values that will be used later on in the loop:\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceSecurityGroup;\nimport com.pulumi.scaleway.InstanceSecurityGroupArgs;\nimport com.pulumi.scaleway.InstanceSecurityGroupRules;\nimport com.pulumi.scaleway.InstanceSecurityGroupRulesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainInstanceSecurityGroup = new InstanceSecurityGroup(\"mainInstanceSecurityGroup\", InstanceSecurityGroupArgs.builder()        \n            .description(\"test\")\n            .inboundDefaultPolicy(\"drop\")\n            .outboundDefaultPolicy(\"accept\")\n            .build());\n\n        final var trusted =         \n            Map.ofEntries(\n                Map.entry(\"ip\", \"1.2.3.4\"),\n                Map.entry(\"port\", \"80\")\n            ),\n            Map.ofEntries(\n                Map.entry(\"ip\", \"5.6.7.8\"),\n                Map.entry(\"port\", \"81\")\n            ),\n            Map.ofEntries(\n                Map.entry(\"ip\", \"9.10.11.12\"),\n                Map.entry(\"port\", \"81\")\n            );\n\n        var mainInstanceSecurityGroupRules = new InstanceSecurityGroupRules(\"mainInstanceSecurityGroupRules\", InstanceSecurityGroupRulesArgs.builder()        \n            .securityGroupId(mainInstanceSecurityGroup.id())\n            .dynamic(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainInstanceSecurityGroup:\n    type: scaleway:InstanceSecurityGroup\n    properties:\n      description: test\n      inboundDefaultPolicy: drop\n      outboundDefaultPolicy: accept\n  mainInstanceSecurityGroupRules:\n    type: scaleway:InstanceSecurityGroupRules\n    properties:\n      securityGroupId: ${mainInstanceSecurityGroup.id}\n      dynamic:\n        - forEach: ${trusted}\n          content:\n            - action: accept\n              ip: ${inbound_rule.value.ip}\n              port: ${inbound_rule.value.port}\nvariables:\n  trusted:\n    - ip: 1.2.3.4\n      port: '80'\n    - ip: 5.6.7.8\n      port: '81'\n    - ip: 9.10.11.12\n      port: '81'\n```\n\n\n## Import\n\nInstance security group rules can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceSecurityGroupRules:InstanceSecurityGroupRules web fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule"
                    },
                    "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule"
                    },
                    "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The ID of the security group.\n"
                }
            },
            "required": [
                "securityGroupId"
            ],
            "inputProperties": {
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule"
                    },
                    "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule"
                    },
                    "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The ID of the security group.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "securityGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceSecurityGroupRules resources.\n",
                "properties": {
                    "inboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule"
                        },
                        "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "outboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule"
                        },
                        "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The ID of the security group.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceServer:InstanceServer": {
            "description": "Creates and manages Scaleway Compute Instance servers. For more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#servers-8bf7d7).\n\nPlease check our [FAQ - Instances](https://www.scaleway.com/en/docs/faq/instances).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst publicIp = new scaleway.InstanceIp(\"publicIp\", {});\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"ubuntu_jammy\",\n    ipId: publicIp.id,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\npublic_ip = scaleway.InstanceIp(\"publicIp\")\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"ubuntu_jammy\",\n    ip_id=public_ip.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var publicIp = new Scaleway.InstanceIp(\"publicIp\");\n\n    var web = new Scaleway.InstanceServer(\"web\", new()\n    {\n        Type = \"DEV1-S\",\n        Image = \"ubuntu_jammy\",\n        IpId = publicIp.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpublicIp, err := scaleway.NewInstanceIp(ctx, \"publicIp\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tIpId:  publicIp.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceIp;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var publicIp = new InstanceIp(\"publicIp\");\n\n        var web = new InstanceServer(\"web\", InstanceServerArgs.builder()        \n            .type(\"DEV1-S\")\n            .image(\"ubuntu_jammy\")\n            .ipId(publicIp.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  publicIp:\n    type: scaleway:InstanceIp\n  web:\n    type: scaleway:InstanceServer\n    properties:\n      type: DEV1-S\n      image: ubuntu_jammy\n      ipId: ${publicIp.id}\n```\n\n### With additional volumes and tags\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst data = new scaleway.InstanceVolume(\"data\", {\n    sizeInGb: 100,\n    type: \"b_ssd\",\n});\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"ubuntu_jammy\",\n    tags: [\n        \"hello\",\n        \"public\",\n    ],\n    rootVolume: {\n        deleteOnTermination: false,\n    },\n    additionalVolumeIds: [data.id],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\ndata = scaleway.InstanceVolume(\"data\",\n    size_in_gb=100,\n    type=\"b_ssd\")\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"ubuntu_jammy\",\n    tags=[\n        \"hello\",\n        \"public\",\n    ],\n    root_volume=scaleway.InstanceServerRootVolumeArgs(\n        delete_on_termination=False,\n    ),\n    additional_volume_ids=[data.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var data = new Scaleway.InstanceVolume(\"data\", new()\n    {\n        SizeInGb = 100,\n        Type = \"b_ssd\",\n    });\n\n    var web = new Scaleway.InstanceServer(\"web\", new()\n    {\n        Type = \"DEV1-S\",\n        Image = \"ubuntu_jammy\",\n        Tags = new[]\n        {\n            \"hello\",\n            \"public\",\n        },\n        RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs\n        {\n            DeleteOnTermination = false,\n        },\n        AdditionalVolumeIds = new[]\n        {\n            data.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdata, err := scaleway.NewInstanceVolume(ctx, \"data\", \u0026scaleway.InstanceVolumeArgs{\n\t\t\tSizeInGb: pulumi.Int(100),\n\t\t\tType:     pulumi.String(\"b_ssd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"hello\"),\n\t\t\t\tpulumi.String(\"public\"),\n\t\t\t},\n\t\t\tRootVolume: \u0026scaleway.InstanceServerRootVolumeArgs{\n\t\t\t\tDeleteOnTermination: pulumi.Bool(false),\n\t\t\t},\n\t\t\tAdditionalVolumeIds: pulumi.StringArray{\n\t\t\t\tdata.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceVolume;\nimport com.pulumi.scaleway.InstanceVolumeArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerRootVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var data = new InstanceVolume(\"data\", InstanceVolumeArgs.builder()        \n            .sizeInGb(100)\n            .type(\"b_ssd\")\n            .build());\n\n        var web = new InstanceServer(\"web\", InstanceServerArgs.builder()        \n            .type(\"DEV1-S\")\n            .image(\"ubuntu_jammy\")\n            .tags(            \n                \"hello\",\n                \"public\")\n            .rootVolume(InstanceServerRootVolumeArgs.builder()\n                .deleteOnTermination(false)\n                .build())\n            .additionalVolumeIds(data.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  data:\n    type: scaleway:InstanceVolume\n    properties:\n      sizeInGb: 100\n      type: b_ssd\n  web:\n    type: scaleway:InstanceServer\n    properties:\n      type: DEV1-S\n      image: ubuntu_jammy\n      tags:\n        - hello\n        - public\n      rootVolume:\n        deleteOnTermination: false\n      additionalVolumeIds:\n        - ${data.id}\n```\n\n### With a reserved IP\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst ip = new scaleway.InstanceIp(\"ip\", {});\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"f974feac-abae-4365-b988-8ec7d1cec10d\",\n    tags: [\n        \"hello\",\n        \"public\",\n    ],\n    ipId: ip.id,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nip = scaleway.InstanceIp(\"ip\")\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"f974feac-abae-4365-b988-8ec7d1cec10d\",\n    tags=[\n        \"hello\",\n        \"public\",\n    ],\n    ip_id=ip.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip = new Scaleway.InstanceIp(\"ip\");\n\n    var web = new Scaleway.InstanceServer(\"web\", new()\n    {\n        Type = \"DEV1-S\",\n        Image = \"f974feac-abae-4365-b988-8ec7d1cec10d\",\n        Tags = new[]\n        {\n            \"hello\",\n            \"public\",\n        },\n        IpId = ip.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tip, err := scaleway.NewInstanceIp(ctx, \"ip\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tImage: pulumi.String(\"f974feac-abae-4365-b988-8ec7d1cec10d\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"hello\"),\n\t\t\t\tpulumi.String(\"public\"),\n\t\t\t},\n\t\t\tIpId: ip.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceIp;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ip = new InstanceIp(\"ip\");\n\n        var web = new InstanceServer(\"web\", InstanceServerArgs.builder()        \n            .type(\"DEV1-S\")\n            .image(\"f974feac-abae-4365-b988-8ec7d1cec10d\")\n            .tags(            \n                \"hello\",\n                \"public\")\n            .ipId(ip.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ip:\n    type: scaleway:InstanceIp\n  web:\n    type: scaleway:InstanceServer\n    properties:\n      type: DEV1-S\n      image: f974feac-abae-4365-b988-8ec7d1cec10d\n      tags:\n        - hello\n        - public\n      ipId: ${ip.id}\n```\n\n### With security group\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst www = new scaleway.InstanceSecurityGroup(\"www\", {\n    inboundDefaultPolicy: \"drop\",\n    outboundDefaultPolicy: \"accept\",\n    inboundRules: [\n        {\n            action: \"accept\",\n            port: 22,\n            ip: \"212.47.225.64\",\n        },\n        {\n            action: \"accept\",\n            port: 80,\n        },\n        {\n            action: \"accept\",\n            port: 443,\n        },\n    ],\n    outboundRules: [{\n        action: \"drop\",\n        ipRange: \"10.20.0.0/24\",\n    }],\n});\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"ubuntu_jammy\",\n    securityGroupId: www.id,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nwww = scaleway.InstanceSecurityGroup(\"www\",\n    inbound_default_policy=\"drop\",\n    outbound_default_policy=\"accept\",\n    inbound_rules=[\n        scaleway.InstanceSecurityGroupInboundRuleArgs(\n            action=\"accept\",\n            port=22,\n            ip=\"212.47.225.64\",\n        ),\n        scaleway.InstanceSecurityGroupInboundRuleArgs(\n            action=\"accept\",\n            port=80,\n        ),\n        scaleway.InstanceSecurityGroupInboundRuleArgs(\n            action=\"accept\",\n            port=443,\n        ),\n    ],\n    outbound_rules=[scaleway.InstanceSecurityGroupOutboundRuleArgs(\n        action=\"drop\",\n        ip_range=\"10.20.0.0/24\",\n    )])\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"ubuntu_jammy\",\n    security_group_id=www.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var www = new Scaleway.InstanceSecurityGroup(\"www\", new()\n    {\n        InboundDefaultPolicy = \"drop\",\n        OutboundDefaultPolicy = \"accept\",\n        InboundRules = new[]\n        {\n            new Scaleway.Inputs.InstanceSecurityGroupInboundRuleArgs\n            {\n                Action = \"accept\",\n                Port = 22,\n                Ip = \"212.47.225.64\",\n            },\n            new Scaleway.Inputs.InstanceSecurityGroupInboundRuleArgs\n            {\n                Action = \"accept\",\n                Port = 80,\n            },\n            new Scaleway.Inputs.InstanceSecurityGroupInboundRuleArgs\n            {\n                Action = \"accept\",\n                Port = 443,\n            },\n        },\n        OutboundRules = new[]\n        {\n            new Scaleway.Inputs.InstanceSecurityGroupOutboundRuleArgs\n            {\n                Action = \"drop\",\n                IpRange = \"10.20.0.0/24\",\n            },\n        },\n    });\n\n    var web = new Scaleway.InstanceServer(\"web\", new()\n    {\n        Type = \"DEV1-S\",\n        Image = \"ubuntu_jammy\",\n        SecurityGroupId = www.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\twww, err := scaleway.NewInstanceSecurityGroup(ctx, \"www\", \u0026scaleway.InstanceSecurityGroupArgs{\n\t\t\tInboundDefaultPolicy:  pulumi.String(\"drop\"),\n\t\t\tOutboundDefaultPolicy: pulumi.String(\"accept\"),\n\t\t\tInboundRules: scaleway.InstanceSecurityGroupInboundRuleArray{\n\t\t\t\t\u0026scaleway.InstanceSecurityGroupInboundRuleArgs{\n\t\t\t\t\tAction: pulumi.String(\"accept\"),\n\t\t\t\t\tPort:   pulumi.Int(22),\n\t\t\t\t\tIp:     pulumi.String(\"212.47.225.64\"),\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.InstanceSecurityGroupInboundRuleArgs{\n\t\t\t\t\tAction: pulumi.String(\"accept\"),\n\t\t\t\t\tPort:   pulumi.Int(80),\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.InstanceSecurityGroupInboundRuleArgs{\n\t\t\t\t\tAction: pulumi.String(\"accept\"),\n\t\t\t\t\tPort:   pulumi.Int(443),\n\t\t\t\t},\n\t\t\t},\n\t\t\tOutboundRules: scaleway.InstanceSecurityGroupOutboundRuleArray{\n\t\t\t\t\u0026scaleway.InstanceSecurityGroupOutboundRuleArgs{\n\t\t\t\t\tAction:  pulumi.String(\"drop\"),\n\t\t\t\t\tIpRange: pulumi.String(\"10.20.0.0/24\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:            pulumi.String(\"DEV1-S\"),\n\t\t\tImage:           pulumi.String(\"ubuntu_jammy\"),\n\t\t\tSecurityGroupId: www.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceSecurityGroup;\nimport com.pulumi.scaleway.InstanceSecurityGroupArgs;\nimport com.pulumi.scaleway.inputs.InstanceSecurityGroupInboundRuleArgs;\nimport com.pulumi.scaleway.inputs.InstanceSecurityGroupOutboundRuleArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var www = new InstanceSecurityGroup(\"www\", InstanceSecurityGroupArgs.builder()        \n            .inboundDefaultPolicy(\"drop\")\n            .outboundDefaultPolicy(\"accept\")\n            .inboundRules(            \n                InstanceSecurityGroupInboundRuleArgs.builder()\n                    .action(\"accept\")\n                    .port(\"22\")\n                    .ip(\"212.47.225.64\")\n                    .build(),\n                InstanceSecurityGroupInboundRuleArgs.builder()\n                    .action(\"accept\")\n                    .port(\"80\")\n                    .build(),\n                InstanceSecurityGroupInboundRuleArgs.builder()\n                    .action(\"accept\")\n                    .port(\"443\")\n                    .build())\n            .outboundRules(InstanceSecurityGroupOutboundRuleArgs.builder()\n                .action(\"drop\")\n                .ipRange(\"10.20.0.0/24\")\n                .build())\n            .build());\n\n        var web = new InstanceServer(\"web\", InstanceServerArgs.builder()        \n            .type(\"DEV1-S\")\n            .image(\"ubuntu_jammy\")\n            .securityGroupId(www.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  www:\n    type: scaleway:InstanceSecurityGroup\n    properties:\n      inboundDefaultPolicy: drop\n      outboundDefaultPolicy: accept\n      inboundRules:\n        - action: accept\n          port: '22'\n          ip: 212.47.225.64\n        - action: accept\n          port: '80'\n        - action: accept\n          port: '443'\n      outboundRules:\n        - action: drop\n          ipRange: 10.20.0.0/24\n  web:\n    type: scaleway:InstanceServer\n    properties:\n      type: DEV1-S\n      image: ubuntu_jammy\n      securityGroupId: ${www.id}\n```\n\n### With user data and cloud-init\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"ubuntu_jammy\",\n    userData: {\n        foo: \"bar\",\n        \"cloud-init\": fs.readFileSync(`${path.module}/cloud-init.yml`),\n    },\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"ubuntu_jammy\",\n    user_data={\n        \"foo\": \"bar\",\n        \"cloud-init\": (lambda path: open(path).read())(f\"{path['module']}/cloud-init.yml\"),\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var web = new Scaleway.InstanceServer(\"web\", new()\n    {\n        Type = \"DEV1-S\",\n        Image = \"ubuntu_jammy\",\n        UserData = \n        {\n            { \"foo\", \"bar\" },\n            { \"cloud-init\", File.ReadAllText($\"{path.Module}/cloud-init.yml\") },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tUserData: pulumi.StringMap{\n\t\t\t\t\"foo\":        pulumi.String(\"bar\"),\n\t\t\t\t\"cloud-init\": readFileOrPanic(fmt.Sprintf(\"%v/cloud-init.yml\", path.Module)),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var web = new InstanceServer(\"web\", InstanceServerArgs.builder()        \n            .type(\"DEV1-S\")\n            .image(\"ubuntu_jammy\")\n            .userData(Map.ofEntries(\n                Map.entry(\"foo\", \"bar\"),\n                Map.entry(\"cloud-init\", Files.readString(Paths.get(String.format(\"%s/cloud-init.yml\", path.module()))))\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  web:\n    type: scaleway:InstanceServer\n    properties:\n      type: DEV1-S\n      image: ubuntu_jammy\n      userData:\n        foo: bar\n        cloud-init:\n          fn::readFile: ${path.module}/cloud-init.yml\n```\n\n### With private network\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {});\nconst base = new scaleway.InstanceServer(\"base\", {\n    image: \"ubuntu_jammy\",\n    type: \"DEV1-S\",\n    privateNetworks: [{\n        pnId: pn01.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\npn01 = scaleway.VpcPrivateNetwork(\"pn01\")\nbase = scaleway.InstanceServer(\"base\",\n    image=\"ubuntu_jammy\",\n    type=\"DEV1-S\",\n    private_networks=[scaleway.InstanceServerPrivateNetworkArgs(\n        pn_id=pn01.id,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\");\n\n    var @base = new Scaleway.InstanceServer(\"base\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        Type = \"DEV1-S\",\n        PrivateNetworks = new[]\n        {\n            new Scaleway.Inputs.InstanceServerPrivateNetworkArgs\n            {\n                PnId = pn01.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"base\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tPrivateNetworks: scaleway.InstanceServerPrivateNetworkArray{\n\t\t\t\t\u0026scaleway.InstanceServerPrivateNetworkArgs{\n\t\t\t\t\tPnId: pn01.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn01 = new VpcPrivateNetwork(\"pn01\");\n\n        var base = new InstanceServer(\"base\", InstanceServerArgs.builder()        \n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .privateNetworks(InstanceServerPrivateNetworkArgs.builder()\n                .pnId(pn01.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n  base:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n      privateNetworks:\n        - pnId: ${pn01.id}\n```\n\n### Root volume configuration\n\n#### Resized block volume with installed image\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst image = new scaleway.InstanceServer(\"image\", {\n    image: \"ubuntu_jammy\",\n    rootVolume: {\n        sizeInGb: 100,\n        volumeType: \"b_ssd\",\n    },\n    type: \"PRO2-XXS\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nimage = scaleway.InstanceServer(\"image\",\n    image=\"ubuntu_jammy\",\n    root_volume=scaleway.InstanceServerRootVolumeArgs(\n        size_in_gb=100,\n        volume_type=\"b_ssd\",\n    ),\n    type=\"PRO2-XXS\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var image = new Scaleway.InstanceServer(\"image\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs\n        {\n            SizeInGb = 100,\n            VolumeType = \"b_ssd\",\n        },\n        Type = \"PRO2-XXS\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceServer(ctx, \"image\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tRootVolume: \u0026scaleway.InstanceServerRootVolumeArgs{\n\t\t\t\tSizeInGb:   pulumi.Int(100),\n\t\t\t\tVolumeType: pulumi.String(\"b_ssd\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"PRO2-XXS\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerRootVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var image = new InstanceServer(\"image\", InstanceServerArgs.builder()        \n            .image(\"ubuntu_jammy\")\n            .rootVolume(InstanceServerRootVolumeArgs.builder()\n                .sizeInGb(100)\n                .volumeType(\"b_ssd\")\n                .build())\n            .type(\"PRO2-XXS\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  image:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_jammy\n      rootVolume:\n        sizeInGb: 100\n        volumeType: b_ssd\n      type: PRO2-XXS\n```\n\n#### From snapshot\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst snapshot = scaleway.getInstanceSnapshot({\n    name: \"my_snapshot\",\n});\nconst fromSnapshotInstanceVolume = new scaleway.InstanceVolume(\"fromSnapshotInstanceVolume\", {\n    fromSnapshotId: snapshot.then(snapshot =\u003e snapshot.id),\n    type: \"b_ssd\",\n});\nconst fromSnapshotInstanceServer = new scaleway.InstanceServer(\"fromSnapshotInstanceServer\", {\n    type: \"PRO2-XXS\",\n    rootVolume: {\n        volumeId: fromSnapshotInstanceVolume.id,\n    },\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nsnapshot = scaleway.get_instance_snapshot(name=\"my_snapshot\")\nfrom_snapshot_instance_volume = scaleway.InstanceVolume(\"fromSnapshotInstanceVolume\",\n    from_snapshot_id=snapshot.id,\n    type=\"b_ssd\")\nfrom_snapshot_instance_server = scaleway.InstanceServer(\"fromSnapshotInstanceServer\",\n    type=\"PRO2-XXS\",\n    root_volume=scaleway.InstanceServerRootVolumeArgs(\n        volume_id=from_snapshot_instance_volume.id,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var snapshot = Scaleway.GetInstanceSnapshot.Invoke(new()\n    {\n        Name = \"my_snapshot\",\n    });\n\n    var fromSnapshotInstanceVolume = new Scaleway.InstanceVolume(\"fromSnapshotInstanceVolume\", new()\n    {\n        FromSnapshotId = snapshot.Apply(getInstanceSnapshotResult =\u003e getInstanceSnapshotResult.Id),\n        Type = \"b_ssd\",\n    });\n\n    var fromSnapshotInstanceServer = new Scaleway.InstanceServer(\"fromSnapshotInstanceServer\", new()\n    {\n        Type = \"PRO2-XXS\",\n        RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs\n        {\n            VolumeId = fromSnapshotInstanceVolume.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsnapshot, err := scaleway.LookupInstanceSnapshot(ctx, \u0026scaleway.LookupInstanceSnapshotArgs{\n\t\t\tName: pulumi.StringRef(\"my_snapshot\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfromSnapshotInstanceVolume, err := scaleway.NewInstanceVolume(ctx, \"fromSnapshotInstanceVolume\", \u0026scaleway.InstanceVolumeArgs{\n\t\t\tFromSnapshotId: *pulumi.String(snapshot.Id),\n\t\t\tType:           pulumi.String(\"b_ssd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"fromSnapshotInstanceServer\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType: pulumi.String(\"PRO2-XXS\"),\n\t\t\tRootVolume: \u0026scaleway.InstanceServerRootVolumeArgs{\n\t\t\t\tVolumeId: fromSnapshotInstanceVolume.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstanceSnapshotArgs;\nimport com.pulumi.scaleway.InstanceVolume;\nimport com.pulumi.scaleway.InstanceVolumeArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerRootVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var snapshot = ScalewayFunctions.getInstanceSnapshot(GetInstanceSnapshotArgs.builder()\n            .name(\"my_snapshot\")\n            .build());\n\n        var fromSnapshotInstanceVolume = new InstanceVolume(\"fromSnapshotInstanceVolume\", InstanceVolumeArgs.builder()        \n            .fromSnapshotId(snapshot.applyValue(getInstanceSnapshotResult -\u003e getInstanceSnapshotResult.id()))\n            .type(\"b_ssd\")\n            .build());\n\n        var fromSnapshotInstanceServer = new InstanceServer(\"fromSnapshotInstanceServer\", InstanceServerArgs.builder()        \n            .type(\"PRO2-XXS\")\n            .rootVolume(InstanceServerRootVolumeArgs.builder()\n                .volumeId(fromSnapshotInstanceVolume.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fromSnapshotInstanceVolume:\n    type: scaleway:InstanceVolume\n    properties:\n      fromSnapshotId: ${snapshot.id}\n      type: b_ssd\n  fromSnapshotInstanceServer:\n    type: scaleway:InstanceServer\n    properties:\n      type: PRO2-XXS\n      rootVolume:\n        volumeId: ${fromSnapshotInstanceVolume.id}\nvariables:\n  snapshot:\n    fn::invoke:\n      Function: scaleway:getInstanceSnapshot\n      Arguments:\n        name: my_snapshot\n```\n\n## Private Network\n\n\u003e **Important:** Updates to `private_network` will recreate a new private network interface.\n\n- `pn_id` - (Required) The private network ID where to connect.\n- `mac_address` The private NIC MAC address.\n- `status` The private NIC state.\n- `zone` - (Defaults to provider `zone`) The zone in which the server must be created.\n\n\u003e **Important:**\n\n- You can only attach an instance in the same zone as a private network.\n- Instance supports maximum 8 different private networks.\n\n\n## Import\n\nInstance servers can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceServer:InstanceServer web fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "additionalVolumeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)\nattached to the server. Updates to this field will trigger a stop/start of the server.\n\n\u003e **Important:** If this field contains local volumes, the `state` must be set to `stopped`, otherwise it will fail.\n\n\u003e **Important:** If this field contains local volumes, you have to first detach them, in one apply, and then delete the volume in another apply.\n"
                },
                "bootType": {
                    "type": "string",
                    "description": "The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.\n"
                },
                "bootscriptId": {
                    "type": "string",
                    "description": "The ID of the bootscript to use  (set boot_type to `bootscript`).\n"
                },
                "cloudInit": {
                    "type": "string",
                    "description": "The cloud init script associated with this server\n"
                },
                "enableDynamicIp": {
                    "type": "boolean",
                    "description": "If true a dynamic IP will be attached to the server.\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Determines if IPv6 is enabled for the server.\n"
                },
                "image": {
                    "type": "string",
                    "description": "The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1\u0026per_page=100)\nto find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.\n\nYou can check the available labels with our [CLI](https://www.scaleway.com/en/docs/compute/instances/api-cli/creating-managing-instances-with-cliv2/). ```scw marketplace image list```\n\nTo retrieve more information by label please use: ```scw marketplace image get label=\u003cLABEL\u003e```\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "The ID of the reserved IP that is attached to the server.\n"
                },
                "ipIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ID of reserved IPs that are attached to the server. Cannot be used with `ip_id`.\n\n\u003e `ip_id` to `ip_ids` migration: if moving the ip from the old `ip_id` field to the new `ip_ids`, it should not detach the ip.\n"
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "The default ipv6 address routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                },
                "ipv6Gateway": {
                    "type": "string",
                    "description": "The ipv6 gateway address. ( Only set when enable_ipv6 is set to true )\n"
                },
                "ipv6PrefixLength": {
                    "type": "integer",
                    "description": "The prefix length of the ipv6 subnet routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the server is associated with.\n"
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.\n\n\n\u003e **Important:** When updating `placement_group_id` the `state` must be set to `stopped`, otherwise it will fail.\n"
                },
                "placementGroupPolicyRespected": {
                    "type": "boolean",
                    "description": "True when the placement group policy is respected.\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The Scaleway internal IP address of the server.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceServerPrivateNetwork:InstanceServerPrivateNetwork"
                    },
                    "description": "The private network associated with the server.\nUse the `pn_id` key to attach a [private_network](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is associated with.\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IP address of the server.\n"
                },
                "publicIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceServerPublicIp:InstanceServerPublicIp"
                    },
                    "description": "The list of public IPs of the server.\n"
                },
                "replaceOnTypeChange": {
                    "type": "boolean",
                    "description": "If true, the server will be replaced if `type` is changed. Otherwise, the server will migrate.\n"
                },
                "rootVolume": {
                    "$ref": "#/types/scaleway:index/InstanceServerRootVolume:InstanceServerRootVolume",
                    "description": "Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.\n"
                },
                "routedIpEnabled": {
                    "type": "boolean",
                    "description": "If true, the server will support routed ips only. Changing it to true will migrate the server and its IP to routed type.\n\n\u003e **Important:** Enabling routed ip will restart the server\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The commercial type of the server.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\nUpdates to this field will migrate the server, local storage constraint must be respected. [More info](https://www.scaleway.com/en/docs/compute/instances/api-cli/migrating-instances/).\nUse `replace_on_type_change` to trigger replacement instead of migration.\n\n\u003e **Important:** If `type` change and migration occurs, the server will be stopped and changed backed to its original state. It will be started again if it was running.\n"
                },
                "userData": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The user data associated with the server.\nUse the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.\nYou can define values using:\n- string\n- UTF-8 encoded file content using file\n- Binary files using filebase64.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n"
                }
            },
            "required": [
                "bootscriptId",
                "cloudInit",
                "ipv6Address",
                "ipv6Gateway",
                "ipv6PrefixLength",
                "name",
                "organizationId",
                "placementGroupPolicyRespected",
                "privateIp",
                "projectId",
                "publicIp",
                "publicIps",
                "rootVolume",
                "routedIpEnabled",
                "securityGroupId",
                "type",
                "userData",
                "zone"
            ],
            "inputProperties": {
                "additionalVolumeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)\nattached to the server. Updates to this field will trigger a stop/start of the server.\n\n\u003e **Important:** If this field contains local volumes, the `state` must be set to `stopped`, otherwise it will fail.\n\n\u003e **Important:** If this field contains local volumes, you have to first detach them, in one apply, and then delete the volume in another apply.\n"
                },
                "bootType": {
                    "type": "string",
                    "description": "The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.\n"
                },
                "bootscriptId": {
                    "type": "string",
                    "description": "The ID of the bootscript to use  (set boot_type to `bootscript`).\n"
                },
                "cloudInit": {
                    "type": "string",
                    "description": "The cloud init script associated with this server\n"
                },
                "enableDynamicIp": {
                    "type": "boolean",
                    "description": "If true a dynamic IP will be attached to the server.\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Determines if IPv6 is enabled for the server.\n"
                },
                "image": {
                    "type": "string",
                    "description": "The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1\u0026per_page=100)\nto find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.\n\nYou can check the available labels with our [CLI](https://www.scaleway.com/en/docs/compute/instances/api-cli/creating-managing-instances-with-cliv2/). ```scw marketplace image list```\n\nTo retrieve more information by label please use: ```scw marketplace image get label=\u003cLABEL\u003e```\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "The ID of the reserved IP that is attached to the server.\n"
                },
                "ipIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ID of reserved IPs that are attached to the server. Cannot be used with `ip_id`.\n\n\u003e `ip_id` to `ip_ids` migration: if moving the ip from the old `ip_id` field to the new `ip_ids`, it should not detach the ip.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.\n\n\n\u003e **Important:** When updating `placement_group_id` the `state` must be set to `stopped`, otherwise it will fail.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceServerPrivateNetwork:InstanceServerPrivateNetwork"
                    },
                    "description": "The private network associated with the server.\nUse the `pn_id` key to attach a [private_network](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "publicIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceServerPublicIp:InstanceServerPublicIp"
                    },
                    "description": "The list of public IPs of the server.\n"
                },
                "replaceOnTypeChange": {
                    "type": "boolean",
                    "description": "If true, the server will be replaced if `type` is changed. Otherwise, the server will migrate.\n"
                },
                "rootVolume": {
                    "$ref": "#/types/scaleway:index/InstanceServerRootVolume:InstanceServerRootVolume",
                    "description": "Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.\n"
                },
                "routedIpEnabled": {
                    "type": "boolean",
                    "description": "If true, the server will support routed ips only. Changing it to true will migrate the server and its IP to routed type.\n\n\u003e **Important:** Enabling routed ip will restart the server\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The commercial type of the server.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\nUpdates to this field will migrate the server, local storage constraint must be respected. [More info](https://www.scaleway.com/en/docs/compute/instances/api-cli/migrating-instances/).\nUse `replace_on_type_change` to trigger replacement instead of migration.\n\n\u003e **Important:** If `type` change and migration occurs, the server will be stopped and changed backed to its original state. It will be started again if it was running.\n"
                },
                "userData": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The user data associated with the server.\nUse the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.\nYou can define values using:\n- string\n- UTF-8 encoded file content using file\n- Binary files using filebase64.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceServer resources.\n",
                "properties": {
                    "additionalVolumeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)\nattached to the server. Updates to this field will trigger a stop/start of the server.\n\n\u003e **Important:** If this field contains local volumes, the `state` must be set to `stopped`, otherwise it will fail.\n\n\u003e **Important:** If this field contains local volumes, you have to first detach them, in one apply, and then delete the volume in another apply.\n"
                    },
                    "bootType": {
                        "type": "string",
                        "description": "The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.\n"
                    },
                    "bootscriptId": {
                        "type": "string",
                        "description": "The ID of the bootscript to use  (set boot_type to `bootscript`).\n"
                    },
                    "cloudInit": {
                        "type": "string",
                        "description": "The cloud init script associated with this server\n"
                    },
                    "enableDynamicIp": {
                        "type": "boolean",
                        "description": "If true a dynamic IP will be attached to the server.\n"
                    },
                    "enableIpv6": {
                        "type": "boolean",
                        "description": "Determines if IPv6 is enabled for the server.\n"
                    },
                    "image": {
                        "type": "string",
                        "description": "The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1\u0026per_page=100)\nto find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.\n\nYou can check the available labels with our [CLI](https://www.scaleway.com/en/docs/compute/instances/api-cli/creating-managing-instances-with-cliv2/). ```scw marketplace image list```\n\nTo retrieve more information by label please use: ```scw marketplace image get label=\u003cLABEL\u003e```\n"
                    },
                    "ipId": {
                        "type": "string",
                        "description": "The ID of the reserved IP that is attached to the server.\n"
                    },
                    "ipIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of ID of reserved IPs that are attached to the server. Cannot be used with `ip_id`.\n\n\u003e `ip_id` to `ip_ids` migration: if moving the ip from the old `ip_id` field to the new `ip_ids`, it should not detach the ip.\n"
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "The default ipv6 address routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                    },
                    "ipv6Gateway": {
                        "type": "string",
                        "description": "The ipv6 gateway address. ( Only set when enable_ipv6 is set to true )\n"
                    },
                    "ipv6PrefixLength": {
                        "type": "integer",
                        "description": "The prefix length of the ipv6 subnet routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the server is associated with.\n"
                    },
                    "placementGroupId": {
                        "type": "string",
                        "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.\n\n\n\u003e **Important:** When updating `placement_group_id` the `state` must be set to `stopped`, otherwise it will fail.\n"
                    },
                    "placementGroupPolicyRespected": {
                        "type": "boolean",
                        "description": "True when the placement group policy is respected.\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The Scaleway internal IP address of the server.\n"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceServerPrivateNetwork:InstanceServerPrivateNetwork"
                        },
                        "description": "The private network associated with the server.\nUse the `pn_id` key to attach a [private_network](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the server is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "The public IP address of the server.\n"
                    },
                    "publicIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceServerPublicIp:InstanceServerPublicIp"
                        },
                        "description": "The list of public IPs of the server.\n"
                    },
                    "replaceOnTypeChange": {
                        "type": "boolean",
                        "description": "If true, the server will be replaced if `type` is changed. Otherwise, the server will migrate.\n"
                    },
                    "rootVolume": {
                        "$ref": "#/types/scaleway:index/InstanceServerRootVolume:InstanceServerRootVolume",
                        "description": "Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.\n"
                    },
                    "routedIpEnabled": {
                        "type": "boolean",
                        "description": "If true, the server will support routed ips only. Changing it to true will migrate the server and its IP to routed type.\n\n\u003e **Important:** Enabling routed ip will restart the server\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the server.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The commercial type of the server.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\nUpdates to this field will migrate the server, local storage constraint must be respected. [More info](https://www.scaleway.com/en/docs/compute/instances/api-cli/migrating-instances/).\nUse `replace_on_type_change` to trigger replacement instead of migration.\n\n\u003e **Important:** If `type` change and migration occurs, the server will be stopped and changed backed to its original state. It will be started again if it was running.\n"
                    },
                    "userData": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The user data associated with the server.\nUse the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.\nYou can define values using:\n- string\n- UTF-8 encoded file content using file\n- Binary files using filebase64.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceSnapshot:InstanceSnapshot": {
            "description": "Creates and manages Scaleway Compute Snapshots.\nFor more information,\nsee [the documentation](https://developers.scaleway.com/en/products/instance/api/#snapshots-756fae).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.InstanceSnapshot(\"main\", {volumeId: \"11111111-1111-1111-1111-111111111111\"});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.InstanceSnapshot(\"main\", volume_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.InstanceSnapshot(\"main\", new()\n    {\n        VolumeId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceSnapshot(ctx, \"main\", \u0026scaleway.InstanceSnapshotArgs{\n\t\t\tVolumeId: pulumi.String(\"11111111-1111-1111-1111-111111111111\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceSnapshot;\nimport com.pulumi.scaleway.InstanceSnapshotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new InstanceSnapshot(\"main\", InstanceSnapshotArgs.builder()        \n            .volumeId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:InstanceSnapshot\n    properties:\n      volumeId: 11111111-1111-1111-1111-111111111111\n```\n\n## Example with Unified type\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainInstanceVolume = new scaleway.InstanceVolume(\"mainInstanceVolume\", {\n    type: \"l_ssd\",\n    sizeInGb: 10,\n});\nconst mainInstanceServer = new scaleway.InstanceServer(\"mainInstanceServer\", {\n    image: \"ubuntu_jammy\",\n    type: \"DEV1-S\",\n    rootVolume: {\n        sizeInGb: 10,\n        volumeType: \"l_ssd\",\n    },\n    additionalVolumeIds: [mainInstanceVolume.id],\n});\nconst mainInstanceSnapshot = new scaleway.InstanceSnapshot(\"mainInstanceSnapshot\", {\n    volumeId: mainInstanceVolume.id,\n    type: \"unified\",\n}, {\n    dependsOn: [mainInstanceServer],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain_instance_volume = scaleway.InstanceVolume(\"mainInstanceVolume\",\n    type=\"l_ssd\",\n    size_in_gb=10)\nmain_instance_server = scaleway.InstanceServer(\"mainInstanceServer\",\n    image=\"ubuntu_jammy\",\n    type=\"DEV1-S\",\n    root_volume=scaleway.InstanceServerRootVolumeArgs(\n        size_in_gb=10,\n        volume_type=\"l_ssd\",\n    ),\n    additional_volume_ids=[main_instance_volume.id])\nmain_instance_snapshot = scaleway.InstanceSnapshot(\"mainInstanceSnapshot\",\n    volume_id=main_instance_volume.id,\n    type=\"unified\",\n    opts=pulumi.ResourceOptions(depends_on=[main_instance_server]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainInstanceVolume = new Scaleway.InstanceVolume(\"mainInstanceVolume\", new()\n    {\n        Type = \"l_ssd\",\n        SizeInGb = 10,\n    });\n\n    var mainInstanceServer = new Scaleway.InstanceServer(\"mainInstanceServer\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        Type = \"DEV1-S\",\n        RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs\n        {\n            SizeInGb = 10,\n            VolumeType = \"l_ssd\",\n        },\n        AdditionalVolumeIds = new[]\n        {\n            mainInstanceVolume.Id,\n        },\n    });\n\n    var mainInstanceSnapshot = new Scaleway.InstanceSnapshot(\"mainInstanceSnapshot\", new()\n    {\n        VolumeId = mainInstanceVolume.Id,\n        Type = \"unified\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            mainInstanceServer,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainInstanceVolume, err := scaleway.NewInstanceVolume(ctx, \"mainInstanceVolume\", \u0026scaleway.InstanceVolumeArgs{\n\t\t\tType:     pulumi.String(\"l_ssd\"),\n\t\t\tSizeInGb: pulumi.Int(10),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainInstanceServer, err := scaleway.NewInstanceServer(ctx, \"mainInstanceServer\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tRootVolume: \u0026scaleway.InstanceServerRootVolumeArgs{\n\t\t\t\tSizeInGb:   pulumi.Int(10),\n\t\t\t\tVolumeType: pulumi.String(\"l_ssd\"),\n\t\t\t},\n\t\t\tAdditionalVolumeIds: pulumi.StringArray{\n\t\t\t\tmainInstanceVolume.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceSnapshot(ctx, \"mainInstanceSnapshot\", \u0026scaleway.InstanceSnapshotArgs{\n\t\t\tVolumeId: mainInstanceVolume.ID(),\n\t\t\tType:     pulumi.String(\"unified\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmainInstanceServer,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceVolume;\nimport com.pulumi.scaleway.InstanceVolumeArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerRootVolumeArgs;\nimport com.pulumi.scaleway.InstanceSnapshot;\nimport com.pulumi.scaleway.InstanceSnapshotArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainInstanceVolume = new InstanceVolume(\"mainInstanceVolume\", InstanceVolumeArgs.builder()        \n            .type(\"l_ssd\")\n            .sizeInGb(10)\n            .build());\n\n        var mainInstanceServer = new InstanceServer(\"mainInstanceServer\", InstanceServerArgs.builder()        \n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .rootVolume(InstanceServerRootVolumeArgs.builder()\n                .sizeInGb(10)\n                .volumeType(\"l_ssd\")\n                .build())\n            .additionalVolumeIds(mainInstanceVolume.id())\n            .build());\n\n        var mainInstanceSnapshot = new InstanceSnapshot(\"mainInstanceSnapshot\", InstanceSnapshotArgs.builder()        \n            .volumeId(mainInstanceVolume.id())\n            .type(\"unified\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(mainInstanceServer)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainInstanceVolume:\n    type: scaleway:InstanceVolume\n    properties:\n      type: l_ssd\n      sizeInGb: 10\n  mainInstanceServer:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n      rootVolume:\n        sizeInGb: 10\n        volumeType: l_ssd\n      additionalVolumeIds:\n        - ${mainInstanceVolume.id}\n  mainInstanceSnapshot:\n    type: scaleway:InstanceSnapshot\n    properties:\n      volumeId: ${mainInstanceVolume.id}\n      type: unified\n    options:\n      dependson:\n        - ${mainInstanceServer}\n```\n\n## Import a local qcow2 file\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst bucket = new scaleway.ObjectBucket(\"bucket\", {});\nconst qcow = new scaleway.ObjectItem(\"qcow\", {\n    bucket: bucket.name,\n    key: \"server.qcow2\",\n    file: \"myqcow.qcow2\",\n});\nconst snapshot = new scaleway.InstanceSnapshot(\"snapshot\", {\n    type: \"unified\",\n    \"import\": {\n        bucket: qcow.bucket,\n        key: qcow.key,\n    },\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nbucket = scaleway.ObjectBucket(\"bucket\")\nqcow = scaleway.ObjectItem(\"qcow\",\n    bucket=bucket.name,\n    key=\"server.qcow2\",\n    file=\"myqcow.qcow2\")\nsnapshot = scaleway.InstanceSnapshot(\"snapshot\",\n    type=\"unified\",\n    import_=scaleway.InstanceSnapshotImportArgs(\n        bucket=qcow.bucket,\n        key=qcow.key,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var bucket = new Scaleway.ObjectBucket(\"bucket\");\n\n    var qcow = new Scaleway.ObjectItem(\"qcow\", new()\n    {\n        Bucket = bucket.Name,\n        Key = \"server.qcow2\",\n        File = \"myqcow.qcow2\",\n    });\n\n    var snapshot = new Scaleway.InstanceSnapshot(\"snapshot\", new()\n    {\n        Type = \"unified\",\n        Import = new Scaleway.Inputs.InstanceSnapshotImportArgs\n        {\n            Bucket = qcow.Bucket,\n            Key = qcow.Key,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbucket, err := scaleway.NewObjectBucket(ctx, \"bucket\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tqcow, err := scaleway.NewObjectItem(ctx, \"qcow\", \u0026scaleway.ObjectItemArgs{\n\t\t\tBucket: bucket.Name,\n\t\t\tKey:    pulumi.String(\"server.qcow2\"),\n\t\t\tFile:   pulumi.String(\"myqcow.qcow2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceSnapshot(ctx, \"snapshot\", \u0026scaleway.InstanceSnapshotArgs{\n\t\t\tType: pulumi.String(\"unified\"),\n\t\t\tImport: \u0026scaleway.InstanceSnapshotImportArgs{\n\t\t\t\tBucket: qcow.Bucket,\n\t\t\t\tKey:    qcow.Key,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectItem;\nimport com.pulumi.scaleway.ObjectItemArgs;\nimport com.pulumi.scaleway.InstanceSnapshot;\nimport com.pulumi.scaleway.InstanceSnapshotArgs;\nimport com.pulumi.scaleway.inputs.InstanceSnapshotImportArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var bucket = new ObjectBucket(\"bucket\");\n\n        var qcow = new ObjectItem(\"qcow\", ObjectItemArgs.builder()        \n            .bucket(bucket.name())\n            .key(\"server.qcow2\")\n            .file(\"myqcow.qcow2\")\n            .build());\n\n        var snapshot = new InstanceSnapshot(\"snapshot\", InstanceSnapshotArgs.builder()        \n            .type(\"unified\")\n            .import_(InstanceSnapshotImportArgs.builder()\n                .bucket(qcow.bucket())\n                .key(qcow.key())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  bucket:\n    type: scaleway:ObjectBucket\n  qcow:\n    type: scaleway:ObjectItem\n    properties:\n      bucket: ${bucket.name}\n      key: server.qcow2\n      file: myqcow.qcow2\n  snapshot:\n    type: scaleway:InstanceSnapshot\n    properties:\n      type: unified\n      import:\n        bucket: ${qcow.bucket}\n        key: ${qcow.key}\n```\n\n\n## Import\n\nSnapshots can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceSnapshot:InstanceSnapshot main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The snapshot creation time.\n"
                },
                "import": {
                    "$ref": "#/types/scaleway:index/InstanceSnapshotImport:InstanceSnapshotImport",
                    "description": "Import a snapshot from a qcow2 file located in a bucket\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the snapshot. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the snapshot is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the snapshot is\nassociated with.\n"
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "(Optional) The size of the snapshot.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the snapshot.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The snapshot's volume type.  The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD) and `unified`.\nUpdates to this field will recreate a new resource.\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "The ID of the volume to take a snapshot from.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which\nthe snapshot should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "organizationId",
                "projectId",
                "sizeInGb",
                "type",
                "zone"
            ],
            "inputProperties": {
                "import": {
                    "$ref": "#/types/scaleway:index/InstanceSnapshotImport:InstanceSnapshotImport",
                    "description": "Import a snapshot from a qcow2 file located in a bucket\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the snapshot. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the snapshot is\nassociated with.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the snapshot.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The snapshot's volume type.  The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD) and `unified`.\nUpdates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "volumeId": {
                    "type": "string",
                    "description": "The ID of the volume to take a snapshot from.\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which\nthe snapshot should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceSnapshot resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The snapshot creation time.\n"
                    },
                    "import": {
                        "$ref": "#/types/scaleway:index/InstanceSnapshotImport:InstanceSnapshotImport",
                        "description": "Import a snapshot from a qcow2 file located in a bucket\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the snapshot. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the snapshot is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the snapshot is\nassociated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "sizeInGb": {
                        "type": "integer",
                        "description": "(Optional) The size of the snapshot.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to apply to the snapshot.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The snapshot's volume type.  The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD) and `unified`.\nUpdates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The ID of the volume to take a snapshot from.\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which\nthe snapshot should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceUserData:InstanceUserData": {
            "description": "Creates and manages Scaleway Compute Instance User Data values.\n\nUser data is a key value store API you can use to provide data from and to your server without authentication. It is the mechanism by which a user can pass information contained in a local file to an Instance at launch time.\n\nThe typical use case is to pass something like a shell script or a configuration file as user data.\n\nFor more information about [user_data](https://developers.scaleway.com/en/products/instance/api/#patch-9ef3ec)  check our documentation guide [here](https://www.scaleway.com/en/docs/compute/instances/how-to/use-boot-modes/#how-to-use-cloud-init).\n\nAbout cloud-init documentation please check this [link](https://cloudinit.readthedocs.io/en/latest/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst config = new pulumi.Config();\nconst userData = config.getObject(\"userData\") || {\n    \"cloud-init\": `#cloud-config\napt-update: true\napt-upgrade: true\n`,\n    foo: \"bar\",\n};\nconst mainInstanceServer = new scaleway.InstanceServer(\"mainInstanceServer\", {\n    image: \"ubuntu_focal\",\n    type: \"DEV1-S\",\n});\n// User data with a single value\nconst mainInstanceUserData = new scaleway.InstanceUserData(\"mainInstanceUserData\", {\n    serverId: mainInstanceServer.id,\n    key: \"foo\",\n    value: \"bar\",\n});\n// User Data with many keys.\nconst data: scaleway.InstanceUserData[] = [];\nfor (const range = {value: 0}; range.value \u003c userData; range.value++) {\n    data.push(new scaleway.InstanceUserData(`data-${range.value}`, {\n        serverId: mainInstanceServer.id,\n        key: range.key,\n        value: range.value,\n    }));\n}\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nconfig = pulumi.Config()\nuser_data = config.get_object(\"userData\")\nif user_data is None:\n    user_data = {\n        \"cloud-init\": \"\"\"#cloud-config\napt-update: true\napt-upgrade: true\n\"\"\",\n        \"foo\": \"bar\",\n    }\nmain_instance_server = scaleway.InstanceServer(\"mainInstanceServer\",\n    image=\"ubuntu_focal\",\n    type=\"DEV1-S\")\n# User data with a single value\nmain_instance_user_data = scaleway.InstanceUserData(\"mainInstanceUserData\",\n    server_id=main_instance_server.id,\n    key=\"foo\",\n    value=\"bar\")\n# User Data with many keys.\ndata = []\nfor range in [{\"value\": i} for i in range(0, user_data)]:\n    data.append(scaleway.InstanceUserData(f\"data-{range['value']}\",\n        server_id=main_instance_server.id,\n        key=range[\"key\"],\n        value=range[\"value\"]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var userData = config.GetObject\u003cdynamic\u003e(\"userData\") ?? \n    {\n        { \"cloud-init\", @\"#cloud-config\napt-update: true\napt-upgrade: true\n\" },\n        { \"foo\", \"bar\" },\n    };\n    var mainInstanceServer = new Scaleway.InstanceServer(\"mainInstanceServer\", new()\n    {\n        Image = \"ubuntu_focal\",\n        Type = \"DEV1-S\",\n    });\n\n    // User data with a single value\n    var mainInstanceUserData = new Scaleway.InstanceUserData(\"mainInstanceUserData\", new()\n    {\n        ServerId = mainInstanceServer.Id,\n        Key = \"foo\",\n        Value = \"bar\",\n    });\n\n    // User Data with many keys.\n    var data = new List\u003cScaleway.InstanceUserData\u003e();\n    for (var rangeIndex = 0; rangeIndex \u003c userData; rangeIndex++)\n    {\n        var range = new { Value = rangeIndex };\n        data.Add(new Scaleway.InstanceUserData($\"data-{range.Value}\", new()\n        {\n            ServerId = mainInstanceServer.Id,\n            Key = range.Key,\n            Value = range.Value,\n        }));\n    }\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tuserData := map[string]interface{}{\n\t\t\t\"cloud-init\": \"#cloud-config\\napt-update: true\\napt-upgrade: true\\n\",\n\t\t\t\"foo\":        \"bar\",\n\t\t}\n\t\tif param := cfg.GetBool(\"userData\"); param != nil {\n\t\t\tuserData = param\n\t\t}\n\t\tmainInstanceServer, err := scaleway.NewInstanceServer(ctx, \"mainInstanceServer\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_focal\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceUserData(ctx, \"mainInstanceUserData\", \u0026scaleway.InstanceUserDataArgs{\n\t\t\tServerId: mainInstanceServer.ID(),\n\t\t\tKey:      pulumi.String(\"foo\"),\n\t\t\tValue:    pulumi.String(\"bar\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar data []*scaleway.InstanceUserData\n\t\tfor index := 0; index \u003c userData; index++ {\n\t\t\tkey0 := index\n\t\t\tval0 := index\n\t\t\t__res, err := scaleway.NewInstanceUserData(ctx, fmt.Sprintf(\"data-%v\", key0), \u0026scaleway.InstanceUserDataArgs{\n\t\t\t\tServerId: mainInstanceServer.ID(),\n\t\t\t\tKey:      pulumi.Any(key0),\n\t\t\t\tValue:    pulumi.Any(val0),\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tdata = append(data, __res)\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.InstanceUserData;\nimport com.pulumi.scaleway.InstanceUserDataArgs;\nimport com.pulumi.codegen.internal.KeyedValue;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var userData = config.get(\"userData\").orElse(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));\n        var mainInstanceServer = new InstanceServer(\"mainInstanceServer\", InstanceServerArgs.builder()        \n            .image(\"ubuntu_focal\")\n            .type(\"DEV1-S\")\n            .build());\n\n        var mainInstanceUserData = new InstanceUserData(\"mainInstanceUserData\", InstanceUserDataArgs.builder()        \n            .serverId(mainInstanceServer.id())\n            .key(\"foo\")\n            .value(\"bar\")\n            .build());\n\n        for (var i = 0; i \u003c userData; i++) {\n            new InstanceUserData(\"data-\" + i, InstanceUserDataArgs.builder()            \n                .serverId(mainInstanceServer.id())\n                .key(range.key())\n                .value(range.value())\n                .build());\n\n        \n}\n    }\n}\n```\n```yaml\nconfiguration:\n  userData:\n    type: dynamic\n    default:\n      cloud-init: |\n        #cloud-config\n        apt-update: true\n        apt-upgrade: true\n      foo: bar\nresources:\n  # User data with a single value\n  mainInstanceUserData:\n    type: scaleway:InstanceUserData\n    properties:\n      serverId: ${mainInstanceServer.id}\n      key: foo\n      value: bar\n  # User Data with many keys.\n  data:\n    type: scaleway:InstanceUserData\n    properties:\n      serverId: ${mainInstanceServer.id}\n      key: ${range.key}\n      value: ${range.value}\n    options: {}\n  mainInstanceServer:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_focal\n      type: DEV1-S\n```\n\n\n## Import\n\nUser data can be imported using the `{zone}/{key}/{server_id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceUserData:InstanceUserData main fr-par-1/cloud-init/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key of the user data.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the server associated with.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value associated with your key\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n\n\u003e **Important:**   Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.\nYou can define values using:\n- string\n- UTF-8 encoded file content using file\n"
                }
            },
            "required": [
                "key",
                "serverId",
                "value",
                "zone"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Key of the user data.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the server associated with.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value associated with your key\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n\n\u003e **Important:**   Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.\nYou can define values using:\n- string\n- UTF-8 encoded file content using file\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "key",
                "serverId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceUserData resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Key of the user data.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The ID of the server associated with.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value associated with your key\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server should be created.\n\n\u003e **Important:**   Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.\nYou can define values using:\n- string\n- UTF-8 encoded file content using file\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceVolume:InstanceVolume": {
            "description": "Creates and manages Scaleway Compute Instance Volumes.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst serverVolume = new scaleway.InstanceVolume(\"serverVolume\", {\n    sizeInGb: 20,\n    type: \"l_ssd\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nserver_volume = scaleway.InstanceVolume(\"serverVolume\",\n    size_in_gb=20,\n    type=\"l_ssd\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var serverVolume = new Scaleway.InstanceVolume(\"serverVolume\", new()\n    {\n        SizeInGb = 20,\n        Type = \"l_ssd\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceVolume(ctx, \"serverVolume\", \u0026scaleway.InstanceVolumeArgs{\n\t\t\tSizeInGb: pulumi.Int(20),\n\t\t\tType:     pulumi.String(\"l_ssd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceVolume;\nimport com.pulumi.scaleway.InstanceVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var serverVolume = new InstanceVolume(\"serverVolume\", InstanceVolumeArgs.builder()        \n            .sizeInGb(20)\n            .type(\"l_ssd\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  serverVolume:\n    type: scaleway:InstanceVolume\n    properties:\n      sizeInGb: 20\n      type: l_ssd\n```\n\n\n## Import\n\nvolumes can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceVolume:InstanceVolume server_volume fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "fromSnapshotId": {
                    "type": "string",
                    "description": "If set, the new volume will be created from this snapshot. Only one of `size_in_gb`, `from_volume_id` and `from_snapshot_id` should be specified.\n"
                },
                "fromVolumeId": {
                    "type": "string",
                    "description": "If set, the new volume will be copied from this volume. Only one of `size_in_gb`, `from_volume_id` and `from_snapshot_id` should be specified.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the volume. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the volume is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the volume is associated with.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The id of the associated server.\n"
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "The size of the volume. Only one of `size_in_gb`, `from_volume_id` and `from_snapshot_id` should be specified.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the volume.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the volume. The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD), `scratch` (Local Scratch SSD).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the volume should be created.\n"
                }
            },
            "required": [
                "name",
                "organizationId",
                "projectId",
                "serverId",
                "type",
                "zone"
            ],
            "inputProperties": {
                "fromSnapshotId": {
                    "type": "string",
                    "description": "If set, the new volume will be created from this snapshot. Only one of `size_in_gb`, `from_volume_id` and `from_snapshot_id` should be specified.\n",
                    "willReplaceOnChanges": true
                },
                "fromVolumeId": {
                    "type": "string",
                    "description": "If set, the new volume will be copied from this volume. Only one of `size_in_gb`, `from_volume_id` and `from_snapshot_id` should be specified.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the volume. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the volume is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "The size of the volume. Only one of `size_in_gb`, `from_volume_id` and `from_snapshot_id` should be specified.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the volume.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the volume. The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD), `scratch` (Local Scratch SSD).\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the volume should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceVolume resources.\n",
                "properties": {
                    "fromSnapshotId": {
                        "type": "string",
                        "description": "If set, the new volume will be created from this snapshot. Only one of `size_in_gb`, `from_volume_id` and `from_snapshot_id` should be specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "fromVolumeId": {
                        "type": "string",
                        "description": "If set, the new volume will be copied from this volume. Only one of `size_in_gb`, `from_volume_id` and `from_snapshot_id` should be specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the volume. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the volume is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the volume is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The id of the associated server.\n"
                    },
                    "sizeInGb": {
                        "type": "integer",
                        "description": "The size of the volume. Only one of `size_in_gb`, `from_volume_id` and `from_snapshot_id` should be specified.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to apply to the volume.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the volume. The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD), `scratch` (Local Scratch SSD).\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the volume should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iotDevice:IotDevice": {
            "description": "\n\n\n## Import\n\nIoT devices can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/iotDevice:IotDevice device01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "allowInsecure": {
                    "type": "boolean",
                    "description": "Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.\n\n\u003e **Important:** Updates to `allow_insecure` can disconnect eventually connected devices.\n"
                },
                "allowMultipleConnections": {
                    "type": "boolean",
                    "description": "Allow more than one simultaneous connection using the same device credentials.\n\n\u003e **Important:** Updates to `allow_multiple_connections` can disconnect eventually connected devices.\n"
                },
                "certificate": {
                    "$ref": "#/types/scaleway:index/IotDeviceCertificate:IotDeviceCertificate",
                    "description": "The certificate bundle of the device.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time the device was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the IoT device (e.g. `living room`).\n"
                },
                "hubId": {
                    "type": "string",
                    "description": "The ID of the hub on which this device will be created.\n"
                },
                "isConnected": {
                    "type": "boolean",
                    "description": "The current connection status of the device.\n"
                },
                "lastActivityAt": {
                    "type": "string",
                    "description": "The last MQTT activity of the device.\n"
                },
                "messageFilters": {
                    "$ref": "#/types/scaleway:index/IotDeviceMessageFilters:IotDeviceMessageFilters",
                    "description": "Rules that define which messages are authorized or denied based on their topic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT device you want to create (e.g. `my-device`).\n\n\u003e **Important:** Updates to `name` will destroy and recreate a new resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the device.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time the device resource was updated.\n"
                }
            },
            "required": [
                "certificate",
                "createdAt",
                "hubId",
                "isConnected",
                "lastActivityAt",
                "name",
                "region",
                "status",
                "updatedAt"
            ],
            "inputProperties": {
                "allowInsecure": {
                    "type": "boolean",
                    "description": "Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.\n\n\u003e **Important:** Updates to `allow_insecure` can disconnect eventually connected devices.\n"
                },
                "allowMultipleConnections": {
                    "type": "boolean",
                    "description": "Allow more than one simultaneous connection using the same device credentials.\n\n\u003e **Important:** Updates to `allow_multiple_connections` can disconnect eventually connected devices.\n"
                },
                "certificate": {
                    "$ref": "#/types/scaleway:index/IotDeviceCertificate:IotDeviceCertificate",
                    "description": "The certificate bundle of the device.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the IoT device (e.g. `living room`).\n"
                },
                "hubId": {
                    "type": "string",
                    "description": "The ID of the hub on which this device will be created.\n"
                },
                "messageFilters": {
                    "$ref": "#/types/scaleway:index/IotDeviceMessageFilters:IotDeviceMessageFilters",
                    "description": "Rules that define which messages are authorized or denied based on their topic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT device you want to create (e.g. `my-device`).\n\n\u003e **Important:** Updates to `name` will destroy and recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hubId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotDevice resources.\n",
                "properties": {
                    "allowInsecure": {
                        "type": "boolean",
                        "description": "Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.\n\n\u003e **Important:** Updates to `allow_insecure` can disconnect eventually connected devices.\n"
                    },
                    "allowMultipleConnections": {
                        "type": "boolean",
                        "description": "Allow more than one simultaneous connection using the same device credentials.\n\n\u003e **Important:** Updates to `allow_multiple_connections` can disconnect eventually connected devices.\n"
                    },
                    "certificate": {
                        "$ref": "#/types/scaleway:index/IotDeviceCertificate:IotDeviceCertificate",
                        "description": "The certificate bundle of the device.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time the device was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the IoT device (e.g. `living room`).\n"
                    },
                    "hubId": {
                        "type": "string",
                        "description": "The ID of the hub on which this device will be created.\n"
                    },
                    "isConnected": {
                        "type": "boolean",
                        "description": "The current connection status of the device.\n"
                    },
                    "lastActivityAt": {
                        "type": "string",
                        "description": "The last MQTT activity of the device.\n"
                    },
                    "messageFilters": {
                        "$ref": "#/types/scaleway:index/IotDeviceMessageFilters:IotDeviceMessageFilters",
                        "description": "Rules that define which messages are authorized or denied based on their topic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IoT device you want to create (e.g. `my-device`).\n\n\u003e **Important:** Updates to `name` will destroy and recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the device.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time the device resource was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iotHub:IotHub": {
            "description": "\n\n\n## Import\n\nIoT Hubs can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/iotHub:IotHub hub01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "connectedDeviceCount": {
                    "type": "integer",
                    "description": "The current number of connected devices in the Hub.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time the Hub was created.\n"
                },
                "deviceAutoProvisioning": {
                    "type": "boolean",
                    "description": "Wether to enable the device auto provisioning or not\n"
                },
                "deviceCount": {
                    "type": "integer",
                    "description": "The number of registered devices in the Hub.\n"
                },
                "disableEvents": {
                    "type": "boolean",
                    "description": "Whether to enable the hub events or not\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Wether the IoT Hub instance should be enabled or not.\n\n\u003e **Important:** Updates to `enabled` will disconnect eventually connected devices.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The MQTT network endpoint to connect MQTT devices to.\n"
                },
                "eventsTopicPrefix": {
                    "type": "string",
                    "description": "Topic prefix for the hub events\n"
                },
                "hubCa": {
                    "type": "string",
                    "description": "Custom user provided certificate authority\n"
                },
                "hubCaChallenge": {
                    "type": "string",
                    "description": "Challenge certificate for the user provided hub CA\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT Hub instance you want to create (e.g. `my-hub`).\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "productPlan": {
                    "type": "string",
                    "description": "Product plan to create the hub, see documentation for available product plans (e.g. `plan_shared`)\n\n\u003e **Important:** Updates to `product_plan` will recreate the IoT Hub Instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IoT Hub Instance is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the Database Instance should be created.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the Hub.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time the Hub resource was updated.\n"
                }
            },
            "required": [
                "connectedDeviceCount",
                "createdAt",
                "deviceCount",
                "endpoint",
                "name",
                "organizationId",
                "productPlan",
                "projectId",
                "region",
                "status",
                "updatedAt"
            ],
            "inputProperties": {
                "deviceAutoProvisioning": {
                    "type": "boolean",
                    "description": "Wether to enable the device auto provisioning or not\n"
                },
                "disableEvents": {
                    "type": "boolean",
                    "description": "Whether to enable the hub events or not\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Wether the IoT Hub instance should be enabled or not.\n\n\u003e **Important:** Updates to `enabled` will disconnect eventually connected devices.\n"
                },
                "eventsTopicPrefix": {
                    "type": "string",
                    "description": "Topic prefix for the hub events\n"
                },
                "hubCa": {
                    "type": "string",
                    "description": "Custom user provided certificate authority\n"
                },
                "hubCaChallenge": {
                    "type": "string",
                    "description": "Challenge certificate for the user provided hub CA\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT Hub instance you want to create (e.g. `my-hub`).\n"
                },
                "productPlan": {
                    "type": "string",
                    "description": "Product plan to create the hub, see documentation for available product plans (e.g. `plan_shared`)\n\n\u003e **Important:** Updates to `product_plan` will recreate the IoT Hub Instance.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IoT Hub Instance is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the Database Instance should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "productPlan"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotHub resources.\n",
                "properties": {
                    "connectedDeviceCount": {
                        "type": "integer",
                        "description": "The current number of connected devices in the Hub.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time the Hub was created.\n"
                    },
                    "deviceAutoProvisioning": {
                        "type": "boolean",
                        "description": "Wether to enable the device auto provisioning or not\n"
                    },
                    "deviceCount": {
                        "type": "integer",
                        "description": "The number of registered devices in the Hub.\n"
                    },
                    "disableEvents": {
                        "type": "boolean",
                        "description": "Whether to enable the hub events or not\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Wether the IoT Hub instance should be enabled or not.\n\n\u003e **Important:** Updates to `enabled` will disconnect eventually connected devices.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The MQTT network endpoint to connect MQTT devices to.\n"
                    },
                    "eventsTopicPrefix": {
                        "type": "string",
                        "description": "Topic prefix for the hub events\n"
                    },
                    "hubCa": {
                        "type": "string",
                        "description": "Custom user provided certificate authority\n"
                    },
                    "hubCaChallenge": {
                        "type": "string",
                        "description": "Challenge certificate for the user provided hub CA\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IoT Hub instance you want to create (e.g. `my-hub`).\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "productPlan": {
                        "type": "string",
                        "description": "Product plan to create the hub, see documentation for available product plans (e.g. `plan_shared`)\n\n\u003e **Important:** Updates to `product_plan` will recreate the IoT Hub Instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the IoT Hub Instance is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the Database Instance should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the Hub.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time the Hub resource was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iotNetwork:IotNetwork": {
            "description": "\n\n\n## Import\n\nIoT Networks can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/iotNetwork:IotNetwork net01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time the Network was created.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint to use when interacting with the network.\n"
                },
                "hubId": {
                    "type": "string",
                    "description": "The hub ID to which the Network will be attached to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT Network you want to create (e.g. `my-net`).\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The endpoint key to keep secret.\n",
                    "secret": true
                },
                "topicPrefix": {
                    "type": "string",
                    "description": "The prefix that will be prepended to all topics for this Network.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The network type to create (e.g. `sigfox`).\n"
                }
            },
            "required": [
                "createdAt",
                "endpoint",
                "hubId",
                "name",
                "secret",
                "type"
            ],
            "inputProperties": {
                "hubId": {
                    "type": "string",
                    "description": "The hub ID to which the Network will be attached to.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT Network you want to create (e.g. `my-net`).\n",
                    "willReplaceOnChanges": true
                },
                "topicPrefix": {
                    "type": "string",
                    "description": "The prefix that will be prepended to all topics for this Network.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The network type to create (e.g. `sigfox`).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hubId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotNetwork resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time the Network was created.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint to use when interacting with the network.\n"
                    },
                    "hubId": {
                        "type": "string",
                        "description": "The hub ID to which the Network will be attached to.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IoT Network you want to create (e.g. `my-net`).\n",
                        "willReplaceOnChanges": true
                    },
                    "secret": {
                        "type": "string",
                        "description": "The endpoint key to keep secret.\n",
                        "secret": true
                    },
                    "topicPrefix": {
                        "type": "string",
                        "description": "The prefix that will be prepended to all topics for this Network.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The network type to create (e.g. `sigfox`).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iotRoute:IotRoute": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the IoT Route\n"
                },
                "database": {
                    "$ref": "#/types/scaleway:index/IotRouteDatabase:IotRouteDatabase",
                    "description": "Database Route parameters\n"
                },
                "hubId": {
                    "type": "string",
                    "description": "The ID of the route's hub\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the route\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "rest": {
                    "$ref": "#/types/scaleway:index/IotRouteRest:IotRouteRest",
                    "description": "Rest Route parameters\n"
                },
                "s3": {
                    "$ref": "#/types/scaleway:index/IotRouteS3:IotRouteS3",
                    "description": "S3 Route parameters\n"
                },
                "topic": {
                    "type": "string",
                    "description": "The Topic the route subscribes to (wildcards allowed)\n"
                }
            },
            "required": [
                "createdAt",
                "hubId",
                "name",
                "region",
                "topic"
            ],
            "inputProperties": {
                "database": {
                    "$ref": "#/types/scaleway:index/IotRouteDatabase:IotRouteDatabase",
                    "description": "Database Route parameters\n",
                    "willReplaceOnChanges": true
                },
                "hubId": {
                    "type": "string",
                    "description": "The ID of the route's hub\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the route\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                },
                "rest": {
                    "$ref": "#/types/scaleway:index/IotRouteRest:IotRouteRest",
                    "description": "Rest Route parameters\n",
                    "willReplaceOnChanges": true
                },
                "s3": {
                    "$ref": "#/types/scaleway:index/IotRouteS3:IotRouteS3",
                    "description": "S3 Route parameters\n",
                    "willReplaceOnChanges": true
                },
                "topic": {
                    "type": "string",
                    "description": "The Topic the route subscribes to (wildcards allowed)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hubId",
                "topic"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotRoute resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the IoT Route\n"
                    },
                    "database": {
                        "$ref": "#/types/scaleway:index/IotRouteDatabase:IotRouteDatabase",
                        "description": "Database Route parameters\n",
                        "willReplaceOnChanges": true
                    },
                    "hubId": {
                        "type": "string",
                        "description": "The ID of the route's hub\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the route\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "rest": {
                        "$ref": "#/types/scaleway:index/IotRouteRest:IotRouteRest",
                        "description": "Rest Route parameters\n",
                        "willReplaceOnChanges": true
                    },
                    "s3": {
                        "$ref": "#/types/scaleway:index/IotRouteS3:IotRouteS3",
                        "description": "S3 Route parameters\n",
                        "willReplaceOnChanges": true
                    },
                    "topic": {
                        "type": "string",
                        "description": "The Topic the route subscribes to (wildcards allowed)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/ipamIp:IpamIp": {
            "description": "Books and manages Scaleway IPAM IPs.\n\n## Example\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst vpc01 = new scaleway.Vpc(\"vpc01\", {});\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {\n    vpcId: vpc01.id,\n    ipv4Subnet: {\n        subnet: \"172.16.32.0/22\",\n    },\n});\nconst ip01 = new scaleway.IpamIp(\"ip01\", {sources: [{\n    privateNetworkId: pn01.id,\n}]});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nvpc01 = scaleway.Vpc(\"vpc01\")\npn01 = scaleway.VpcPrivateNetwork(\"pn01\",\n    vpc_id=vpc01.id,\n    ipv4_subnet=scaleway.VpcPrivateNetworkIpv4SubnetArgs(\n        subnet=\"172.16.32.0/22\",\n    ))\nip01 = scaleway.IpamIp(\"ip01\", sources=[scaleway.IpamIpSourceArgs(\n    private_network_id=pn01.id,\n)])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vpc01 = new Scaleway.Vpc(\"vpc01\");\n\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        VpcId = vpc01.Id,\n        Ipv4Subnet = new Scaleway.Inputs.VpcPrivateNetworkIpv4SubnetArgs\n        {\n            Subnet = \"172.16.32.0/22\",\n        },\n    });\n\n    var ip01 = new Scaleway.IpamIp(\"ip01\", new()\n    {\n        Sources = new[]\n        {\n            new Scaleway.Inputs.IpamIpSourceArgs\n            {\n                PrivateNetworkId = pn01.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvpc01, err := scaleway.NewVpc(ctx, \"vpc01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tVpcId: vpc01.ID(),\n\t\t\tIpv4Subnet: \u0026scaleway.VpcPrivateNetworkIpv4SubnetArgs{\n\t\t\t\tSubnet: pulumi.String(\"172.16.32.0/22\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIpamIp(ctx, \"ip01\", \u0026scaleway.IpamIpArgs{\n\t\t\tSources: scaleway.IpamIpSourceArray{\n\t\t\t\t\u0026scaleway.IpamIpSourceArgs{\n\t\t\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Vpc;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv4SubnetArgs;\nimport com.pulumi.scaleway.IpamIp;\nimport com.pulumi.scaleway.IpamIpArgs;\nimport com.pulumi.scaleway.inputs.IpamIpSourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc01 = new Vpc(\"vpc01\");\n\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()        \n            .vpcId(vpc01.id())\n            .ipv4Subnet(VpcPrivateNetworkIpv4SubnetArgs.builder()\n                .subnet(\"172.16.32.0/22\")\n                .build())\n            .build());\n\n        var ip01 = new IpamIp(\"ip01\", IpamIpArgs.builder()        \n            .sources(IpamIpSourceArgs.builder()\n                .privateNetworkId(pn01.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc01:\n    type: scaleway:Vpc\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      vpcId: ${vpc01.id}\n      ipv4Subnet:\n        subnet: 172.16.32.0/22\n  ip01:\n    type: scaleway:IpamIp\n    properties:\n      sources:\n        - privateNetworkId: ${pn01.id}\n```\n\n### Request a specific IPv4\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst vpc01 = new scaleway.Vpc(\"vpc01\", {});\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {\n    vpcId: vpc01.id,\n    ipv4Subnet: {\n        subnet: \"172.16.32.0/22\",\n    },\n});\nconst ip01 = new scaleway.IpamIp(\"ip01\", {\n    address: \"172.16.32.7/22\",\n    sources: [{\n        privateNetworkId: pn01.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nvpc01 = scaleway.Vpc(\"vpc01\")\npn01 = scaleway.VpcPrivateNetwork(\"pn01\",\n    vpc_id=vpc01.id,\n    ipv4_subnet=scaleway.VpcPrivateNetworkIpv4SubnetArgs(\n        subnet=\"172.16.32.0/22\",\n    ))\nip01 = scaleway.IpamIp(\"ip01\",\n    address=\"172.16.32.7/22\",\n    sources=[scaleway.IpamIpSourceArgs(\n        private_network_id=pn01.id,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vpc01 = new Scaleway.Vpc(\"vpc01\");\n\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        VpcId = vpc01.Id,\n        Ipv4Subnet = new Scaleway.Inputs.VpcPrivateNetworkIpv4SubnetArgs\n        {\n            Subnet = \"172.16.32.0/22\",\n        },\n    });\n\n    var ip01 = new Scaleway.IpamIp(\"ip01\", new()\n    {\n        Address = \"172.16.32.7/22\",\n        Sources = new[]\n        {\n            new Scaleway.Inputs.IpamIpSourceArgs\n            {\n                PrivateNetworkId = pn01.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvpc01, err := scaleway.NewVpc(ctx, \"vpc01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tVpcId: vpc01.ID(),\n\t\t\tIpv4Subnet: \u0026scaleway.VpcPrivateNetworkIpv4SubnetArgs{\n\t\t\t\tSubnet: pulumi.String(\"172.16.32.0/22\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIpamIp(ctx, \"ip01\", \u0026scaleway.IpamIpArgs{\n\t\t\tAddress: pulumi.String(\"172.16.32.7/22\"),\n\t\t\tSources: scaleway.IpamIpSourceArray{\n\t\t\t\t\u0026scaleway.IpamIpSourceArgs{\n\t\t\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Vpc;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv4SubnetArgs;\nimport com.pulumi.scaleway.IpamIp;\nimport com.pulumi.scaleway.IpamIpArgs;\nimport com.pulumi.scaleway.inputs.IpamIpSourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc01 = new Vpc(\"vpc01\");\n\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()        \n            .vpcId(vpc01.id())\n            .ipv4Subnet(VpcPrivateNetworkIpv4SubnetArgs.builder()\n                .subnet(\"172.16.32.0/22\")\n                .build())\n            .build());\n\n        var ip01 = new IpamIp(\"ip01\", IpamIpArgs.builder()        \n            .address(\"172.16.32.7/22\")\n            .sources(IpamIpSourceArgs.builder()\n                .privateNetworkId(pn01.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc01:\n    type: scaleway:Vpc\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      vpcId: ${vpc01.id}\n      ipv4Subnet:\n        subnet: 172.16.32.0/22\n  ip01:\n    type: scaleway:IpamIp\n    properties:\n      address: 172.16.32.7/22\n      sources:\n        - privateNetworkId: ${pn01.id}\n```\n\n### Request an IPv6\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst vpc01 = new scaleway.Vpc(\"vpc01\", {});\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {\n    vpcId: vpc01.id,\n    ipv6Subnets: [{\n        subnet: \"fd46:78ab:30b8:177c::/64\",\n    }],\n});\nconst ip01 = new scaleway.IpamIp(\"ip01\", {\n    isIpv6: true,\n    sources: [{\n        privateNetworkId: pn01.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nvpc01 = scaleway.Vpc(\"vpc01\")\npn01 = scaleway.VpcPrivateNetwork(\"pn01\",\n    vpc_id=vpc01.id,\n    ipv6_subnets=[scaleway.VpcPrivateNetworkIpv6SubnetArgs(\n        subnet=\"fd46:78ab:30b8:177c::/64\",\n    )])\nip01 = scaleway.IpamIp(\"ip01\",\n    is_ipv6=True,\n    sources=[scaleway.IpamIpSourceArgs(\n        private_network_id=pn01.id,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vpc01 = new Scaleway.Vpc(\"vpc01\");\n\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        VpcId = vpc01.Id,\n        Ipv6Subnets = new[]\n        {\n            new Scaleway.Inputs.VpcPrivateNetworkIpv6SubnetArgs\n            {\n                Subnet = \"fd46:78ab:30b8:177c::/64\",\n            },\n        },\n    });\n\n    var ip01 = new Scaleway.IpamIp(\"ip01\", new()\n    {\n        IsIpv6 = true,\n        Sources = new[]\n        {\n            new Scaleway.Inputs.IpamIpSourceArgs\n            {\n                PrivateNetworkId = pn01.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvpc01, err := scaleway.NewVpc(ctx, \"vpc01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tVpcId: vpc01.ID(),\n\t\t\tIpv6Subnets: scaleway.VpcPrivateNetworkIpv6SubnetArray{\n\t\t\t\t\u0026scaleway.VpcPrivateNetworkIpv6SubnetArgs{\n\t\t\t\t\tSubnet: pulumi.String(\"fd46:78ab:30b8:177c::/64\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIpamIp(ctx, \"ip01\", \u0026scaleway.IpamIpArgs{\n\t\t\tIsIpv6: pulumi.Bool(true),\n\t\t\tSources: scaleway.IpamIpSourceArray{\n\t\t\t\t\u0026scaleway.IpamIpSourceArgs{\n\t\t\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Vpc;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv6SubnetArgs;\nimport com.pulumi.scaleway.IpamIp;\nimport com.pulumi.scaleway.IpamIpArgs;\nimport com.pulumi.scaleway.inputs.IpamIpSourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc01 = new Vpc(\"vpc01\");\n\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()        \n            .vpcId(vpc01.id())\n            .ipv6Subnets(VpcPrivateNetworkIpv6SubnetArgs.builder()\n                .subnet(\"fd46:78ab:30b8:177c::/64\")\n                .build())\n            .build());\n\n        var ip01 = new IpamIp(\"ip01\", IpamIpArgs.builder()        \n            .isIpv6(true)\n            .sources(IpamIpSourceArgs.builder()\n                .privateNetworkId(pn01.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc01:\n    type: scaleway:Vpc\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      vpcId: ${vpc01.id}\n      ipv6Subnets:\n        - subnet: fd46:78ab:30b8:177c::/64\n  ip01:\n    type: scaleway:IpamIp\n    properties:\n      isIpv6: true\n      sources:\n        - privateNetworkId: ${pn01.id}\n```\n\n\n## Import\n\nIPAM IPs can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/ipamIp:IpamIp ip_demo fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Request a specific IP in the requested source pool.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date and time of IP's creation (RFC 3339 format).\n"
                },
                "isIpv6": {
                    "type": "boolean",
                    "description": "Defines whether to request an IPv6 instead of an IPv4.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IP is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the IP.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/IpamIpResource:IpamIpResource"
                    },
                    "description": "The IP resource.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/IpamIpSource:IpamIpSource"
                    },
                    "description": "The source in which to book the IP.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the IP.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date and time of IP's last update (RFC 3339 format).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone of the IP.\n"
                }
            },
            "required": [
                "address",
                "createdAt",
                "projectId",
                "region",
                "resources",
                "sources",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "Request a specific IP in the requested source pool.\n",
                    "willReplaceOnChanges": true
                },
                "isIpv6": {
                    "type": "boolean",
                    "description": "Defines whether to request an IPv6 instead of an IPv4.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IP is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the IP.\n",
                    "willReplaceOnChanges": true
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/IpamIpSource:IpamIpSource"
                    },
                    "description": "The source in which to book the IP.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the IP.\n"
                }
            },
            "requiredInputs": [
                "sources"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpamIp resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "Request a specific IP in the requested source pool.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date and time of IP's creation (RFC 3339 format).\n"
                    },
                    "isIpv6": {
                        "type": "boolean",
                        "description": "Defines whether to request an IPv6 instead of an IPv4.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the IP is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region of the IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/IpamIpResource:IpamIpResource"
                        },
                        "description": "The IP resource.\n"
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/IpamIpSource:IpamIpSource"
                        },
                        "description": "The source in which to book the IP.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the IP.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date and time of IP's last update (RFC 3339 format).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone of the IP.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/k8sCluster:K8sCluster": {
            "description": "Creates and manages Scaleway Kubernetes clusters. For more information, see [the documentation](https://developers.scaleway.com/en/products/k8s/api/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst jack = new scaleway.K8sCluster(\"jack\", {\n    version: \"1.24.3\",\n    cni: \"cilium\",\n    deleteAdditionalResources: false,\n});\nconst john = new scaleway.K8sPool(\"john\", {\n    clusterId: jack.id,\n    nodeType: \"DEV1-M\",\n    size: 1,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\njack = scaleway.K8sCluster(\"jack\",\n    version=\"1.24.3\",\n    cni=\"cilium\",\n    delete_additional_resources=False)\njohn = scaleway.K8sPool(\"john\",\n    cluster_id=jack.id,\n    node_type=\"DEV1-M\",\n    size=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var jack = new Scaleway.K8sCluster(\"jack\", new()\n    {\n        Version = \"1.24.3\",\n        Cni = \"cilium\",\n        DeleteAdditionalResources = false,\n    });\n\n    var john = new Scaleway.K8sPool(\"john\", new()\n    {\n        ClusterId = jack.Id,\n        NodeType = \"DEV1-M\",\n        Size = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tjack, err := scaleway.NewK8sCluster(ctx, \"jack\", \u0026scaleway.K8sClusterArgs{\n\t\t\tVersion:                   pulumi.String(\"1.24.3\"),\n\t\t\tCni:                       pulumi.String(\"cilium\"),\n\t\t\tDeleteAdditionalResources: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewK8sPool(ctx, \"john\", \u0026scaleway.K8sPoolArgs{\n\t\t\tClusterId: jack.ID(),\n\t\t\tNodeType:  pulumi.String(\"DEV1-M\"),\n\t\t\tSize:      pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.K8sCluster;\nimport com.pulumi.scaleway.K8sClusterArgs;\nimport com.pulumi.scaleway.K8sPool;\nimport com.pulumi.scaleway.K8sPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var jack = new K8sCluster(\"jack\", K8sClusterArgs.builder()        \n            .version(\"1.24.3\")\n            .cni(\"cilium\")\n            .deleteAdditionalResources(false)\n            .build());\n\n        var john = new K8sPool(\"john\", K8sPoolArgs.builder()        \n            .clusterId(jack.id())\n            .nodeType(\"DEV1-M\")\n            .size(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  jack:\n    type: scaleway:K8sCluster\n    properties:\n      version: 1.24.3\n      cni: cilium\n      deleteAdditionalResources: false\n  john:\n    type: scaleway:K8sPool\n    properties:\n      clusterId: ${jack.id}\n      nodeType: DEV1-M\n      size: 1\n```\n\n### Multicloud\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst henry = new scaleway.K8sCluster(\"henry\", {\n    type: \"multicloud\",\n    version: \"1.24.3\",\n    cni: \"kilo\",\n    deleteAdditionalResources: false,\n});\nconst friendFromOuterSpace = new scaleway.K8sPool(\"friendFromOuterSpace\", {\n    clusterId: henry.id,\n    nodeType: \"external\",\n    size: 0,\n    minSize: 0,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nhenry = scaleway.K8sCluster(\"henry\",\n    type=\"multicloud\",\n    version=\"1.24.3\",\n    cni=\"kilo\",\n    delete_additional_resources=False)\nfriend_from_outer_space = scaleway.K8sPool(\"friendFromOuterSpace\",\n    cluster_id=henry.id,\n    node_type=\"external\",\n    size=0,\n    min_size=0)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var henry = new Scaleway.K8sCluster(\"henry\", new()\n    {\n        Type = \"multicloud\",\n        Version = \"1.24.3\",\n        Cni = \"kilo\",\n        DeleteAdditionalResources = false,\n    });\n\n    var friendFromOuterSpace = new Scaleway.K8sPool(\"friendFromOuterSpace\", new()\n    {\n        ClusterId = henry.Id,\n        NodeType = \"external\",\n        Size = 0,\n        MinSize = 0,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\thenry, err := scaleway.NewK8sCluster(ctx, \"henry\", \u0026scaleway.K8sClusterArgs{\n\t\t\tType:                      pulumi.String(\"multicloud\"),\n\t\t\tVersion:                   pulumi.String(\"1.24.3\"),\n\t\t\tCni:                       pulumi.String(\"kilo\"),\n\t\t\tDeleteAdditionalResources: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewK8sPool(ctx, \"friendFromOuterSpace\", \u0026scaleway.K8sPoolArgs{\n\t\t\tClusterId: henry.ID(),\n\t\t\tNodeType:  pulumi.String(\"external\"),\n\t\t\tSize:      pulumi.Int(0),\n\t\t\tMinSize:   pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.K8sCluster;\nimport com.pulumi.scaleway.K8sClusterArgs;\nimport com.pulumi.scaleway.K8sPool;\nimport com.pulumi.scaleway.K8sPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var henry = new K8sCluster(\"henry\", K8sClusterArgs.builder()        \n            .type(\"multicloud\")\n            .version(\"1.24.3\")\n            .cni(\"kilo\")\n            .deleteAdditionalResources(false)\n            .build());\n\n        var friendFromOuterSpace = new K8sPool(\"friendFromOuterSpace\", K8sPoolArgs.builder()        \n            .clusterId(henry.id())\n            .nodeType(\"external\")\n            .size(0)\n            .minSize(0)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  henry:\n    type: scaleway:K8sCluster\n    properties:\n      type: multicloud\n      version: 1.24.3\n      cni: kilo\n      deleteAdditionalResources: false\n  friendFromOuterSpace:\n    type: scaleway:K8sPool\n    properties:\n      clusterId: ${henry.id}\n      nodeType: external\n      size: 0\n      minSize: 0\n```\n\nFor a detailed example of how to add or run Elastic Metal servers instead of instances on your cluster, please refer to this guide.\n\n### With additional configuration\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst johnK8sCluster = new scaleway.K8sCluster(\"johnK8sCluster\", {\n    description: \"my awesome cluster\",\n    version: \"1.24.3\",\n    cni: \"calico\",\n    tags: [\n        \"i'm an awesome tag\",\n        \"yay\",\n    ],\n    deleteAdditionalResources: false,\n    autoscalerConfig: {\n        disableScaleDown: false,\n        scaleDownDelayAfterAdd: \"5m\",\n        estimator: \"binpacking\",\n        expander: \"random\",\n        ignoreDaemonsetsUtilization: true,\n        balanceSimilarNodeGroups: true,\n        expendablePodsPriorityCutoff: -5,\n    },\n});\nconst johnK8sPool = new scaleway.K8sPool(\"johnK8sPool\", {\n    clusterId: johnK8sCluster.id,\n    nodeType: \"DEV1-M\",\n    size: 3,\n    autoscaling: true,\n    autohealing: true,\n    minSize: 1,\n    maxSize: 5,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\njohn_k8s_cluster = scaleway.K8sCluster(\"johnK8sCluster\",\n    description=\"my awesome cluster\",\n    version=\"1.24.3\",\n    cni=\"calico\",\n    tags=[\n        \"i'm an awesome tag\",\n        \"yay\",\n    ],\n    delete_additional_resources=False,\n    autoscaler_config=scaleway.K8sClusterAutoscalerConfigArgs(\n        disable_scale_down=False,\n        scale_down_delay_after_add=\"5m\",\n        estimator=\"binpacking\",\n        expander=\"random\",\n        ignore_daemonsets_utilization=True,\n        balance_similar_node_groups=True,\n        expendable_pods_priority_cutoff=-5,\n    ))\njohn_k8s_pool = scaleway.K8sPool(\"johnK8sPool\",\n    cluster_id=john_k8s_cluster.id,\n    node_type=\"DEV1-M\",\n    size=3,\n    autoscaling=True,\n    autohealing=True,\n    min_size=1,\n    max_size=5)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var johnK8sCluster = new Scaleway.K8sCluster(\"johnK8sCluster\", new()\n    {\n        Description = \"my awesome cluster\",\n        Version = \"1.24.3\",\n        Cni = \"calico\",\n        Tags = new[]\n        {\n            \"i'm an awesome tag\",\n            \"yay\",\n        },\n        DeleteAdditionalResources = false,\n        AutoscalerConfig = new Scaleway.Inputs.K8sClusterAutoscalerConfigArgs\n        {\n            DisableScaleDown = false,\n            ScaleDownDelayAfterAdd = \"5m\",\n            Estimator = \"binpacking\",\n            Expander = \"random\",\n            IgnoreDaemonsetsUtilization = true,\n            BalanceSimilarNodeGroups = true,\n            ExpendablePodsPriorityCutoff = -5,\n        },\n    });\n\n    var johnK8sPool = new Scaleway.K8sPool(\"johnK8sPool\", new()\n    {\n        ClusterId = johnK8sCluster.Id,\n        NodeType = \"DEV1-M\",\n        Size = 3,\n        Autoscaling = true,\n        Autohealing = true,\n        MinSize = 1,\n        MaxSize = 5,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tjohnK8sCluster, err := scaleway.NewK8sCluster(ctx, \"johnK8sCluster\", \u0026scaleway.K8sClusterArgs{\n\t\t\tDescription: pulumi.String(\"my awesome cluster\"),\n\t\t\tVersion:     pulumi.String(\"1.24.3\"),\n\t\t\tCni:         pulumi.String(\"calico\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"i'm an awesome tag\"),\n\t\t\t\tpulumi.String(\"yay\"),\n\t\t\t},\n\t\t\tDeleteAdditionalResources: pulumi.Bool(false),\n\t\t\tAutoscalerConfig: \u0026scaleway.K8sClusterAutoscalerConfigArgs{\n\t\t\t\tDisableScaleDown:             pulumi.Bool(false),\n\t\t\t\tScaleDownDelayAfterAdd:       pulumi.String(\"5m\"),\n\t\t\t\tEstimator:                    pulumi.String(\"binpacking\"),\n\t\t\t\tExpander:                     pulumi.String(\"random\"),\n\t\t\t\tIgnoreDaemonsetsUtilization:  pulumi.Bool(true),\n\t\t\t\tBalanceSimilarNodeGroups:     pulumi.Bool(true),\n\t\t\t\tExpendablePodsPriorityCutoff: -5,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewK8sPool(ctx, \"johnK8sPool\", \u0026scaleway.K8sPoolArgs{\n\t\t\tClusterId:   johnK8sCluster.ID(),\n\t\t\tNodeType:    pulumi.String(\"DEV1-M\"),\n\t\t\tSize:        pulumi.Int(3),\n\t\t\tAutoscaling: pulumi.Bool(true),\n\t\t\tAutohealing: pulumi.Bool(true),\n\t\t\tMinSize:     pulumi.Int(1),\n\t\t\tMaxSize:     pulumi.Int(5),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nKubernetes clusters can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/k8sCluster:K8sCluster mycluster fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "admissionPlugins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of [admission plugins](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) to enable on the cluster.\n"
                },
                "apiserverCertSans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional Subject Alternative Names for the Kubernetes API server certificate\n"
                },
                "apiserverUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes API server.\n"
                },
                "autoUpgrade": {
                    "$ref": "#/types/scaleway:index/K8sClusterAutoUpgrade:K8sClusterAutoUpgrade",
                    "description": "The auto upgrade configuration.\n"
                },
                "autoscalerConfig": {
                    "$ref": "#/types/scaleway:index/K8sClusterAutoscalerConfig:K8sClusterAutoscalerConfig",
                    "description": "The configuration options for the [Kubernetes cluster autoscaler](https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler).\n"
                },
                "cni": {
                    "type": "string",
                    "description": "The Container Network Interface (CNI) for the Kubernetes cluster.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the cluster.\n"
                },
                "deleteAdditionalResources": {
                    "type": "boolean",
                    "description": "Delete additional resources like block volumes, loadbalancers and the cluster private network (if empty) that were created in Kubernetes on cluster deletion.\n\u003e **Important:** Setting this field to `true` means that you will lose all your cluster data and network configuration when you delete your cluster.\nIf you prefer keeping it, you should instead set it as `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Kubernetes cluster.\n"
                },
                "featureGates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of [feature gates](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/) to enable on the cluster.\n"
                },
                "kubeconfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/K8sClusterKubeconfig:K8sClusterKubeconfig"
                    },
                    "description": "The kubeconfig configuration file of the Kubernetes cluster\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Kubernetes cluster.\n"
                },
                "openIdConnectConfig": {
                    "$ref": "#/types/scaleway:index/K8sClusterOpenIdConnectConfig:K8sClusterOpenIdConnectConfig",
                    "description": "The OpenID Connect configuration of the cluster\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the cluster is associated with.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network of the cluster.\n\n\u003e **Important:** This field can be set at cluster creation or later to migrate to a Private Network.\nAny subsequent change after this field got set will prompt for cluster recreation.\n\n\u003e Also, you should only use **regional** Private Networks with Kapsule clusters, otherwise you will get an error saying that the Private Network can't be found.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the cluster is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the cluster should be created.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Kubernetes cluster.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Kubernetes cluster.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Kubernetes cluster. Possible values are:\n\n- for mutualized clusters: `kapsule` or `multicloud`\n\n- for dedicated Kapsule clusters: `kapsule-dedicated-4`, `kapsule-dedicated-8` or `kapsule-dedicated-16`.\n\n- for dedicated Kosmos clusters: `multicloud-dedicated-4`, `multicloud-dedicated-8` or `multicloud-dedicated-16`.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update date of the cluster.\n"
                },
                "upgradeAvailable": {
                    "type": "boolean",
                    "description": "Set to `true` if a newer Kubernetes version is available.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the Kubernetes cluster.\n"
                },
                "wildcardDns": {
                    "type": "string",
                    "description": "The DNS wildcard that points to all ready nodes.\n"
                }
            },
            "required": [
                "apiserverUrl",
                "autoUpgrade",
                "autoscalerConfig",
                "cni",
                "createdAt",
                "deleteAdditionalResources",
                "kubeconfigs",
                "name",
                "openIdConnectConfig",
                "organizationId",
                "projectId",
                "region",
                "status",
                "type",
                "updatedAt",
                "upgradeAvailable",
                "version",
                "wildcardDns"
            ],
            "inputProperties": {
                "admissionPlugins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of [admission plugins](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) to enable on the cluster.\n"
                },
                "apiserverCertSans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional Subject Alternative Names for the Kubernetes API server certificate\n"
                },
                "autoUpgrade": {
                    "$ref": "#/types/scaleway:index/K8sClusterAutoUpgrade:K8sClusterAutoUpgrade",
                    "description": "The auto upgrade configuration.\n"
                },
                "autoscalerConfig": {
                    "$ref": "#/types/scaleway:index/K8sClusterAutoscalerConfig:K8sClusterAutoscalerConfig",
                    "description": "The configuration options for the [Kubernetes cluster autoscaler](https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler).\n"
                },
                "cni": {
                    "type": "string",
                    "description": "The Container Network Interface (CNI) for the Kubernetes cluster.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "deleteAdditionalResources": {
                    "type": "boolean",
                    "description": "Delete additional resources like block volumes, loadbalancers and the cluster private network (if empty) that were created in Kubernetes on cluster deletion.\n\u003e **Important:** Setting this field to `true` means that you will lose all your cluster data and network configuration when you delete your cluster.\nIf you prefer keeping it, you should instead set it as `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Kubernetes cluster.\n"
                },
                "featureGates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of [feature gates](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/) to enable on the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Kubernetes cluster.\n"
                },
                "openIdConnectConfig": {
                    "$ref": "#/types/scaleway:index/K8sClusterOpenIdConnectConfig:K8sClusterOpenIdConnectConfig",
                    "description": "The OpenID Connect configuration of the cluster\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network of the cluster.\n\n\u003e **Important:** This field can be set at cluster creation or later to migrate to a Private Network.\nAny subsequent change after this field got set will prompt for cluster recreation.\n\n\u003e Also, you should only use **regional** Private Networks with Kapsule clusters, otherwise you will get an error saying that the Private Network can't be found.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the cluster is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the cluster should be created.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Kubernetes cluster.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Kubernetes cluster. Possible values are:\n\n- for mutualized clusters: `kapsule` or `multicloud`\n\n- for dedicated Kapsule clusters: `kapsule-dedicated-4`, `kapsule-dedicated-8` or `kapsule-dedicated-16`.\n\n- for dedicated Kosmos clusters: `multicloud-dedicated-4`, `multicloud-dedicated-8` or `multicloud-dedicated-16`.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the Kubernetes cluster.\n"
                }
            },
            "requiredInputs": [
                "cni",
                "deleteAdditionalResources",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8sCluster resources.\n",
                "properties": {
                    "admissionPlugins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of [admission plugins](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) to enable on the cluster.\n"
                    },
                    "apiserverCertSans": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Additional Subject Alternative Names for the Kubernetes API server certificate\n"
                    },
                    "apiserverUrl": {
                        "type": "string",
                        "description": "The URL of the Kubernetes API server.\n"
                    },
                    "autoUpgrade": {
                        "$ref": "#/types/scaleway:index/K8sClusterAutoUpgrade:K8sClusterAutoUpgrade",
                        "description": "The auto upgrade configuration.\n"
                    },
                    "autoscalerConfig": {
                        "$ref": "#/types/scaleway:index/K8sClusterAutoscalerConfig:K8sClusterAutoscalerConfig",
                        "description": "The configuration options for the [Kubernetes cluster autoscaler](https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler).\n"
                    },
                    "cni": {
                        "type": "string",
                        "description": "The Container Network Interface (CNI) for the Kubernetes cluster.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the cluster.\n"
                    },
                    "deleteAdditionalResources": {
                        "type": "boolean",
                        "description": "Delete additional resources like block volumes, loadbalancers and the cluster private network (if empty) that were created in Kubernetes on cluster deletion.\n\u003e **Important:** Setting this field to `true` means that you will lose all your cluster data and network configuration when you delete your cluster.\nIf you prefer keeping it, you should instead set it as `false`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the Kubernetes cluster.\n"
                    },
                    "featureGates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of [feature gates](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/) to enable on the cluster.\n"
                    },
                    "kubeconfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/K8sClusterKubeconfig:K8sClusterKubeconfig"
                        },
                        "description": "The kubeconfig configuration file of the Kubernetes cluster\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the Kubernetes cluster.\n"
                    },
                    "openIdConnectConfig": {
                        "$ref": "#/types/scaleway:index/K8sClusterOpenIdConnectConfig:K8sClusterOpenIdConnectConfig",
                        "description": "The OpenID Connect configuration of the cluster\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the cluster is associated with.\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "The ID of the private network of the cluster.\n\n\u003e **Important:** This field can be set at cluster creation or later to migrate to a Private Network.\nAny subsequent change after this field got set will prompt for cluster recreation.\n\n\u003e Also, you should only use **regional** Private Networks with Kapsule clusters, otherwise you will get an error saying that the Private Network can't be found.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the cluster is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the cluster should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Kubernetes cluster.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Kubernetes cluster.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of Kubernetes cluster. Possible values are:\n\n- for mutualized clusters: `kapsule` or `multicloud`\n\n- for dedicated Kapsule clusters: `kapsule-dedicated-4`, `kapsule-dedicated-8` or `kapsule-dedicated-16`.\n\n- for dedicated Kosmos clusters: `multicloud-dedicated-4`, `multicloud-dedicated-8` or `multicloud-dedicated-16`.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the cluster.\n"
                    },
                    "upgradeAvailable": {
                        "type": "boolean",
                        "description": "Set to `true` if a newer Kubernetes version is available.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the Kubernetes cluster.\n"
                    },
                    "wildcardDns": {
                        "type": "string",
                        "description": "The DNS wildcard that points to all ready nodes.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/k8sPool:K8sPool": {
            "description": "\n\n\n## Import\n\nKubernetes pools can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/k8sPool:K8sPool mypool fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "autohealing": {
                    "type": "boolean",
                    "description": "Enables the autohealing feature for this pool.\n"
                },
                "autoscaling": {
                    "type": "boolean",
                    "description": "Enables the autoscaling feature for this pool.\n\u003e **Important:** When enabled, an update of the `size` will not be taken into account.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the Kubernetes cluster on which this pool will be created.\n"
                },
                "containerRuntime": {
                    "type": "string",
                    "description": "The container runtime of the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the pool.\n"
                },
                "currentSize": {
                    "type": "integer",
                    "description": "The actual size of the pool\n"
                },
                "kubeletArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The Kubelet arguments to be used by this pool\n"
                },
                "maxSize": {
                    "type": "integer",
                    "description": "The maximum size of the pool, used by the autoscaling feature.\n"
                },
                "minSize": {
                    "type": "integer",
                    "description": "The minimum size of the pool, used by the autoscaling feature.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.\n\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/K8sPoolNode:K8sPoolNode"
                    },
                    "description": "(List of) The nodes in the default pool.\n"
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "publicIpDisabled": {
                    "type": "boolean",
                    "description": "Defines if the public IP should be removed from Nodes. To use this feature, your Cluster must have an attached Private Network set up with a Public Gateway.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the pool should be created.\n"
                },
                "rootVolumeSizeInGb": {
                    "type": "integer",
                    "description": "The size of the system volume of the nodes in gigabyte\n"
                },
                "rootVolumeType": {
                    "type": "string",
                    "description": "System volume type of the nodes composing the pool\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the pool.\n\u003e **Important:** This field will only be used at creation if autoscaling is enabled.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the pool.\n\u003e Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (Example: \"taint=taintName=taineValue:Effect\")\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update date of the pool.\n"
                },
                "upgradePolicy": {
                    "$ref": "#/types/scaleway:index/K8sPoolUpgradePolicy:K8sPoolUpgradePolicy",
                    "description": "The Pool upgrade policy\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the pool.\n"
                },
                "waitForPoolReady": {
                    "type": "boolean",
                    "description": "Whether to wait for the pool to be ready.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the pool should be created.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                }
            },
            "required": [
                "clusterId",
                "createdAt",
                "currentSize",
                "maxSize",
                "name",
                "nodeType",
                "nodes",
                "region",
                "size",
                "status",
                "updatedAt",
                "upgradePolicy",
                "version",
                "zone"
            ],
            "inputProperties": {
                "autohealing": {
                    "type": "boolean",
                    "description": "Enables the autohealing feature for this pool.\n"
                },
                "autoscaling": {
                    "type": "boolean",
                    "description": "Enables the autoscaling feature for this pool.\n\u003e **Important:** When enabled, an update of the `size` will not be taken into account.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the Kubernetes cluster on which this pool will be created.\n",
                    "willReplaceOnChanges": true
                },
                "containerRuntime": {
                    "type": "string",
                    "description": "The container runtime of the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "kubeletArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The Kubelet arguments to be used by this pool\n"
                },
                "maxSize": {
                    "type": "integer",
                    "description": "The maximum size of the pool, used by the autoscaling feature.\n"
                },
                "minSize": {
                    "type": "integer",
                    "description": "The minimum size of the pool, used by the autoscaling feature.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "nodeType": {
                    "type": "string",
                    "description": "The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.\n\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "publicIpDisabled": {
                    "type": "boolean",
                    "description": "Defines if the public IP should be removed from Nodes. To use this feature, your Cluster must have an attached Private Network set up with a Public Gateway.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the pool should be created.\n",
                    "willReplaceOnChanges": true
                },
                "rootVolumeSizeInGb": {
                    "type": "integer",
                    "description": "The size of the system volume of the nodes in gigabyte\n",
                    "willReplaceOnChanges": true
                },
                "rootVolumeType": {
                    "type": "string",
                    "description": "System volume type of the nodes composing the pool\n",
                    "willReplaceOnChanges": true
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the pool.\n\u003e **Important:** This field will only be used at creation if autoscaling is enabled.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the pool.\n\u003e Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (Example: \"taint=taintName=taineValue:Effect\")\n"
                },
                "upgradePolicy": {
                    "$ref": "#/types/scaleway:index/K8sPoolUpgradePolicy:K8sPoolUpgradePolicy",
                    "description": "The Pool upgrade policy\n"
                },
                "waitForPoolReady": {
                    "type": "boolean",
                    "description": "Whether to wait for the pool to be ready.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the pool should be created.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterId",
                "nodeType",
                "size"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8sPool resources.\n",
                "properties": {
                    "autohealing": {
                        "type": "boolean",
                        "description": "Enables the autohealing feature for this pool.\n"
                    },
                    "autoscaling": {
                        "type": "boolean",
                        "description": "Enables the autoscaling feature for this pool.\n\u003e **Important:** When enabled, an update of the `size` will not be taken into account.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the Kubernetes cluster on which this pool will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "containerRuntime": {
                        "type": "string",
                        "description": "The container runtime of the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the pool.\n"
                    },
                    "currentSize": {
                        "type": "integer",
                        "description": "The actual size of the pool\n"
                    },
                    "kubeletArgs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The Kubelet arguments to be used by this pool\n"
                    },
                    "maxSize": {
                        "type": "integer",
                        "description": "The maximum size of the pool, used by the autoscaling feature.\n"
                    },
                    "minSize": {
                        "type": "integer",
                        "description": "The minimum size of the pool, used by the autoscaling feature.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.\n\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/K8sPoolNode:K8sPoolNode"
                        },
                        "description": "(List of) The nodes in the default pool.\n"
                    },
                    "placementGroupId": {
                        "type": "string",
                        "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicIpDisabled": {
                        "type": "boolean",
                        "description": "Defines if the public IP should be removed from Nodes. To use this feature, your Cluster must have an attached Private Network set up with a Public Gateway.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the pool should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "rootVolumeSizeInGb": {
                        "type": "integer",
                        "description": "The size of the system volume of the nodes in gigabyte\n",
                        "willReplaceOnChanges": true
                    },
                    "rootVolumeType": {
                        "type": "string",
                        "description": "System volume type of the nodes composing the pool\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the pool.\n\u003e **Important:** This field will only be used at creation if autoscaling is enabled.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the node.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the pool.\n\u003e Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (Example: \"taint=taintName=taineValue:Effect\")\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the pool.\n"
                    },
                    "upgradePolicy": {
                        "$ref": "#/types/scaleway:index/K8sPoolUpgradePolicy:K8sPoolUpgradePolicy",
                        "description": "The Pool upgrade policy\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the pool.\n"
                    },
                    "waitForPoolReady": {
                        "type": "boolean",
                        "description": "Whether to wait for the pool to be ready.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the pool should be created.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/lb:Lb": {
            "description": "Creates and manages Scaleway Load-Balancers.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.LbIp(\"main\", {zone: \"fr-par-1\"});\nconst base = new scaleway.Lb(\"base\", {\n    ipId: main.id,\n    zone: main.zone,\n    type: \"LB-S\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.LbIp(\"main\", zone=\"fr-par-1\")\nbase = scaleway.Lb(\"base\",\n    ip_id=main.id,\n    zone=main.zone,\n    type=\"LB-S\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.LbIp(\"main\", new()\n    {\n        Zone = \"fr-par-1\",\n    });\n\n    var @base = new Scaleway.Lb(\"base\", new()\n    {\n        IpId = main.Id,\n        Zone = main.Zone,\n        Type = \"LB-S\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewLbIp(ctx, \"main\", \u0026scaleway.LbIpArgs{\n\t\t\tZone: pulumi.String(\"fr-par-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewLb(ctx, \"base\", \u0026scaleway.LbArgs{\n\t\t\tIpId: main.ID(),\n\t\t\tZone: main.Zone,\n\t\t\tType: pulumi.String(\"LB-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LbIp;\nimport com.pulumi.scaleway.LbIpArgs;\nimport com.pulumi.scaleway.Lb;\nimport com.pulumi.scaleway.LbArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new LbIp(\"main\", LbIpArgs.builder()        \n            .zone(\"fr-par-1\")\n            .build());\n\n        var base = new Lb(\"base\", LbArgs.builder()        \n            .ipId(main.id())\n            .zone(main.zone())\n            .type(\"LB-S\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:LbIp\n    properties:\n      zone: fr-par-1\n  base:\n    type: scaleway:Lb\n    properties:\n      ipId: ${main.id}\n      zone: ${main.zone}\n      type: LB-S\n```\n\n### Private LB\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst base = new scaleway.Lb(\"base\", {\n    ipId: scaleway_lb_ip.main.id,\n    zone: scaleway_lb_ip.main.zone,\n    type: \"LB-S\",\n    assignFlexibleIp: false,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nbase = scaleway.Lb(\"base\",\n    ip_id=scaleway_lb_ip[\"main\"][\"id\"],\n    zone=scaleway_lb_ip[\"main\"][\"zone\"],\n    type=\"LB-S\",\n    assign_flexible_ip=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @base = new Scaleway.Lb(\"base\", new()\n    {\n        IpId = scaleway_lb_ip.Main.Id,\n        Zone = scaleway_lb_ip.Main.Zone,\n        Type = \"LB-S\",\n        AssignFlexibleIp = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLb(ctx, \"base\", \u0026scaleway.LbArgs{\n\t\t\tIpId:             pulumi.Any(scaleway_lb_ip.Main.Id),\n\t\t\tZone:             pulumi.Any(scaleway_lb_ip.Main.Zone),\n\t\t\tType:             pulumi.String(\"LB-S\"),\n\t\t\tAssignFlexibleIp: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Lb;\nimport com.pulumi.scaleway.LbArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var base = new Lb(\"base\", LbArgs.builder()        \n            .ipId(scaleway_lb_ip.main().id())\n            .zone(scaleway_lb_ip.main().zone())\n            .type(\"LB-S\")\n            .assignFlexibleIp(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  base:\n    type: scaleway:Lb\n    properties:\n      ipId: ${scaleway_lb_ip.main.id}\n      zone: ${scaleway_lb_ip.main.zone}\n      type: LB-S\n      assignFlexibleIp: false\n```\n\n### IP for Public Gateway\nresource \"scaleway_vpc_public_gateway_ip\" \"main\" {\n}\n\n### Scaleway Private Network\nresource scaleway_vpc_private_network main {\n}\n\n### VPC Public Gateway Network\nresource \"scaleway_vpc_public_gateway\" \"main\" {\n    name  = \"tf-test-public-gw\"\n    type  = \"VPC-GW-S\"\n    ip_id = scaleway_vpc_public_gateway_ip.main.id\n}\n\n### VPC Public Gateway Network DHCP config\nresource \"scaleway_vpc_public_gateway_dhcp\" \"main\" {\n    subnet = \"10.0.0.0/24\"\n}\n\n### VPC Gateway Network\nresource \"scaleway_vpc_gateway_network\" \"main\" {\n    gateway_id         = scaleway_vpc_public_gateway.main.id\n    private_network_id = scaleway_vpc_private_network.main.id\n    dhcp_id            = scaleway_vpc_public_gateway_dhcp.main.id\n    cleanup_dhcp       = true\n    enable_masquerade  = true\n}\n\n### Scaleway Instance\nresource \"scaleway_instance_server\" \"main\" {\n    name        = \"Scaleway Terraform Provider\"\n    type        = \"DEV1-S\"\n    image       = \"debian_bullseye\"\n    enable_ipv6 = false\n\n    private_network {\n        pn_id = scaleway_vpc_private_network.main.id\n    }\n}\n\n### IP for LB IP\nresource scaleway_lb_ip main {\n}\n\n### Scaleway Private Network\nresource scaleway_vpc_private_network \"main\" {\n    name = \"private network with static config\"\n}\n\n## Migration\n\nIn order to migrate to other types you can check the migration up or down via our CLI `scw lb lb-types list`.\nthis change will not recreate your Load Balancer.\n\nPlease check our [documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-migrate-a-load-balancer) for further details\n\n## IP ID\n\nSince v1.15.0, `ip_id` is a required field. This means that now a separate `scaleway.LbIp` is required.\nWhen importing, the IP needs to be imported as well as the LB.\nWhen upgrading to v1.15.0, you will need to create a new `scaleway.LbIp` resource and import it.\n\nFor instance, if you had the following:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.Lb(\"main\", {\n    type: \"LB-S\",\n    zone: \"fr-par-1\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.Lb(\"main\",\n    type=\"LB-S\",\n    zone=\"fr-par-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.Lb(\"main\", new()\n    {\n        Type = \"LB-S\",\n        Zone = \"fr-par-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLb(ctx, \"main\", \u0026scaleway.LbArgs{\n\t\t\tType: pulumi.String(\"LB-S\"),\n\t\t\tZone: pulumi.String(\"fr-par-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Lb;\nimport com.pulumi.scaleway.LbArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new Lb(\"main\", LbArgs.builder()        \n            .type(\"LB-S\")\n            .zone(\"fr-par-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:Lb\n    properties:\n      type: LB-S\n      zone: fr-par-1\n```\n\nYou will need to update it to:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainLbIp = new scaleway.LbIp(\"mainLbIp\", {});\nconst mainLb = new scaleway.Lb(\"mainLb\", {\n    ipId: mainLbIp.id,\n    zone: \"fr-par-1\",\n    type: \"LB-S\",\n    releaseIp: false,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain_lb_ip = scaleway.LbIp(\"mainLbIp\")\nmain_lb = scaleway.Lb(\"mainLb\",\n    ip_id=main_lb_ip.id,\n    zone=\"fr-par-1\",\n    type=\"LB-S\",\n    release_ip=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainLbIp = new Scaleway.LbIp(\"mainLbIp\");\n\n    var mainLb = new Scaleway.Lb(\"mainLb\", new()\n    {\n        IpId = mainLbIp.Id,\n        Zone = \"fr-par-1\",\n        Type = \"LB-S\",\n        ReleaseIp = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainLbIp, err := scaleway.NewLbIp(ctx, \"mainLbIp\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewLb(ctx, \"mainLb\", \u0026scaleway.LbArgs{\n\t\t\tIpId:      mainLbIp.ID(),\n\t\t\tZone:      pulumi.String(\"fr-par-1\"),\n\t\t\tType:      pulumi.String(\"LB-S\"),\n\t\t\tReleaseIp: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LbIp;\nimport com.pulumi.scaleway.Lb;\nimport com.pulumi.scaleway.LbArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainLbIp = new LbIp(\"mainLbIp\");\n\n        var mainLb = new Lb(\"mainLb\", LbArgs.builder()        \n            .ipId(mainLbIp.id())\n            .zone(\"fr-par-1\")\n            .type(\"LB-S\")\n            .releaseIp(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainLbIp:\n    type: scaleway:LbIp\n  mainLb:\n    type: scaleway:Lb\n    properties:\n      ipId: ${mainLbIp.id}\n      zone: fr-par-1\n      type: LB-S\n      releaseIp: false\n```\n\n## Private Network with static config\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LbIp;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.Lb;\nimport com.pulumi.scaleway.LbArgs;\nimport com.pulumi.scaleway.inputs.LbPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainLbIp = new LbIp(\"mainLbIp\");\n\n        var mainVpcPrivateNetwork = new VpcPrivateNetwork(\"mainVpcPrivateNetwork\");\n\n        var mainLb = new Lb(\"mainLb\", LbArgs.builder()        \n            .ipId(mainLbIp.id())\n            .type(\"LB-S\")\n            .releaseIp(false)\n            .privateNetworks(LbPrivateNetworkArgs.builder()\n                .privateNetworkId(mainVpcPrivateNetwork.id())\n                .staticConfig(\"172.16.0.100\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainLbIp:\n    type: scaleway:LbIp\n  mainVpcPrivateNetwork:\n    type: scaleway:VpcPrivateNetwork\n  mainLb:\n    type: scaleway:Lb\n    properties:\n      ipId: ${mainLbIp.id}\n      type: LB-S\n      releaseIp: false\n      privateNetworks:\n        - privateNetworkId: ${mainVpcPrivateNetwork.id}\n          staticConfig:\n            - 172.16.0.100\n```\n\n\n## Import\n\nLoad-Balancer can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/lb:Lb main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n Be aware that you will also need to import the `scaleway_lb_ip` resource. ",
            "properties": {
                "assignFlexibleIp": {
                    "type": "boolean",
                    "description": "Defines whether to automatically assign a flexible public IP to the load-balancer.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the load-balancer.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The load-balance public IP Address\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "The ID of the associated LB IP. See below.\n\n\u003e **Important:** Updates to `ip_id` will recreate the load-balancer.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the load-balancer.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the load-balancer is associated with.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LbPrivateNetwork:LbPrivateNetwork"
                    },
                    "description": "List of private network to connect with your load balancer\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the load-balancer is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the resource\n"
                },
                "releaseIp": {
                    "type": "boolean",
                    "description": "The release_ip allow release the ip address associated with the load-balancers.\n",
                    "deprecationMessage": "The resource ip will be destroyed by it's own resource. Please set this to `false`"
                },
                "sslCompatibilityLevel": {
                    "type": "string",
                    "description": "Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-create-a-load-balancer).\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the load-balancers.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the load-balancer. Please check the migration section to upgrade the type.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone of the load-balancer.\n"
                }
            },
            "required": [
                "ipAddress",
                "name",
                "organizationId",
                "projectId",
                "region",
                "type",
                "zone"
            ],
            "inputProperties": {
                "assignFlexibleIp": {
                    "type": "boolean",
                    "description": "Defines whether to automatically assign a flexible public IP to the load-balancer.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the load-balancer.\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "The ID of the associated LB IP. See below.\n\n\u003e **Important:** Updates to `ip_id` will recreate the load-balancer.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the load-balancer.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LbPrivateNetwork:LbPrivateNetwork"
                    },
                    "description": "List of private network to connect with your load balancer\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the load-balancer is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "releaseIp": {
                    "type": "boolean",
                    "description": "The release_ip allow release the ip address associated with the load-balancers.\n",
                    "deprecationMessage": "The resource ip will be destroyed by it's own resource. Please set this to `false`"
                },
                "sslCompatibilityLevel": {
                    "type": "string",
                    "description": "Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-create-a-load-balancer).\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the load-balancers.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the load-balancer. Please check the migration section to upgrade the type.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone of the load-balancer.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Lb resources.\n",
                "properties": {
                    "assignFlexibleIp": {
                        "type": "boolean",
                        "description": "Defines whether to automatically assign a flexible public IP to the load-balancer.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the load-balancer.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The load-balance public IP Address\n"
                    },
                    "ipId": {
                        "type": "string",
                        "description": "The ID of the associated LB IP. See below.\n\n\u003e **Important:** Updates to `ip_id` will recreate the load-balancer.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the load-balancer.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the load-balancer is associated with.\n"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/LbPrivateNetwork:LbPrivateNetwork"
                        },
                        "description": "List of private network to connect with your load balancer\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the load-balancer is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the resource\n"
                    },
                    "releaseIp": {
                        "type": "boolean",
                        "description": "The release_ip allow release the ip address associated with the load-balancers.\n",
                        "deprecationMessage": "The resource ip will be destroyed by it's own resource. Please set this to `false`"
                    },
                    "sslCompatibilityLevel": {
                        "type": "string",
                        "description": "Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-create-a-load-balancer).\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the load-balancers.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the load-balancer. Please check the migration section to upgrade the type.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone of the load-balancer.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/lbAcl:LbAcl": {
            "description": "Creates and manages Scaleway Load-Balancer ACLs. For more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-acls).\n\n## Examples Usage\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst acl01 = new scaleway.LbAcl(\"acl01\", {\n    frontendId: scaleway_lb_frontend.frt01.id,\n    description: \"Exclude well-known IPs\",\n    index: 0,\n    action: {\n        type: \"allow\",\n    },\n    match: {\n        ipSubnets: [\n            \"192.168.0.1\",\n            \"192.168.0.2\",\n            \"192.168.10.0/24\",\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nacl01 = scaleway.LbAcl(\"acl01\",\n    frontend_id=scaleway_lb_frontend[\"frt01\"][\"id\"],\n    description=\"Exclude well-known IPs\",\n    index=0,\n    action=scaleway.LbAclActionArgs(\n        type=\"allow\",\n    ),\n    match=scaleway.LbAclMatchArgs(\n        ip_subnets=[\n            \"192.168.0.1\",\n            \"192.168.0.2\",\n            \"192.168.10.0/24\",\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var acl01 = new Scaleway.LbAcl(\"acl01\", new()\n    {\n        FrontendId = scaleway_lb_frontend.Frt01.Id,\n        Description = \"Exclude well-known IPs\",\n        Index = 0,\n        Action = new Scaleway.Inputs.LbAclActionArgs\n        {\n            Type = \"allow\",\n        },\n        Match = new Scaleway.Inputs.LbAclMatchArgs\n        {\n            IpSubnets = new[]\n            {\n                \"192.168.0.1\",\n                \"192.168.0.2\",\n                \"192.168.10.0/24\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLbAcl(ctx, \"acl01\", \u0026scaleway.LbAclArgs{\n\t\t\tFrontendId:  pulumi.Any(scaleway_lb_frontend.Frt01.Id),\n\t\t\tDescription: pulumi.String(\"Exclude well-known IPs\"),\n\t\t\tIndex:       pulumi.Int(0),\n\t\t\tAction: \u0026scaleway.LbAclActionArgs{\n\t\t\t\tType: pulumi.String(\"allow\"),\n\t\t\t},\n\t\t\tMatch: \u0026scaleway.LbAclMatchArgs{\n\t\t\t\tIpSubnets: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"192.168.0.1\"),\n\t\t\t\t\tpulumi.String(\"192.168.0.2\"),\n\t\t\t\t\tpulumi.String(\"192.168.10.0/24\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LbAcl;\nimport com.pulumi.scaleway.LbAclArgs;\nimport com.pulumi.scaleway.inputs.LbAclActionArgs;\nimport com.pulumi.scaleway.inputs.LbAclMatchArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var acl01 = new LbAcl(\"acl01\", LbAclArgs.builder()        \n            .frontendId(scaleway_lb_frontend.frt01().id())\n            .description(\"Exclude well-known IPs\")\n            .index(0)\n            .action(LbAclActionArgs.builder()\n                .type(\"allow\")\n                .build())\n            .match(LbAclMatchArgs.builder()\n                .ipSubnets(                \n                    \"192.168.0.1\",\n                    \"192.168.0.2\",\n                    \"192.168.10.0/24\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  acl01:\n    type: scaleway:LbAcl\n    properties:\n      frontendId: ${scaleway_lb_frontend.frt01.id}\n      description: Exclude well-known IPs\n      index: 0\n      action:\n        type: allow\n      match:\n        ipSubnets:\n          - 192.168.0.1\n          - 192.168.0.2\n          - 192.168.10.0/24\n```\n\n\n## Import\n\nLoad-Balancer ACL can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/lbAcl:LbAcl acl01 fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "action": {
                    "$ref": "#/types/scaleway:index/LbAclAction:LbAclAction",
                    "description": "Action to undertake when an ACL filter matches.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date and time of ACL's creation (RFC 3339 format)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The ACL description.\n"
                },
                "frontendId": {
                    "type": "string",
                    "description": "The load-balancer Frontend ID to attach the ACL to.\n"
                },
                "index": {
                    "type": "integer",
                    "description": "The Priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).\n"
                },
                "match": {
                    "$ref": "#/types/scaleway:index/LbAclMatch:LbAclMatch",
                    "description": "The ACL match rule. At least `ip_subnet` or `http_filter` and `http_filter_value` are required.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ACL name. If not provided it will be randomly generated.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date and time of ACL's update (RFC 3339 format)\n"
                }
            },
            "required": [
                "action",
                "createdAt",
                "frontendId",
                "index",
                "name",
                "updatedAt"
            ],
            "inputProperties": {
                "action": {
                    "$ref": "#/types/scaleway:index/LbAclAction:LbAclAction",
                    "description": "Action to undertake when an ACL filter matches.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The ACL description.\n"
                },
                "frontendId": {
                    "type": "string",
                    "description": "The load-balancer Frontend ID to attach the ACL to.\n",
                    "willReplaceOnChanges": true
                },
                "index": {
                    "type": "integer",
                    "description": "The Priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).\n"
                },
                "match": {
                    "$ref": "#/types/scaleway:index/LbAclMatch:LbAclMatch",
                    "description": "The ACL match rule. At least `ip_subnet` or `http_filter` and `http_filter_value` are required.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ACL name. If not provided it will be randomly generated.\n"
                }
            },
            "requiredInputs": [
                "action",
                "frontendId",
                "index"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbAcl resources.\n",
                "properties": {
                    "action": {
                        "$ref": "#/types/scaleway:index/LbAclAction:LbAclAction",
                        "description": "Action to undertake when an ACL filter matches.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date and time of ACL's creation (RFC 3339 format)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The ACL description.\n"
                    },
                    "frontendId": {
                        "type": "string",
                        "description": "The load-balancer Frontend ID to attach the ACL to.\n",
                        "willReplaceOnChanges": true
                    },
                    "index": {
                        "type": "integer",
                        "description": "The Priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).\n"
                    },
                    "match": {
                        "$ref": "#/types/scaleway:index/LbAclMatch:LbAclMatch",
                        "description": "The ACL match rule. At least `ip_subnet` or `http_filter` and `http_filter_value` are required.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The ACL name. If not provided it will be randomly generated.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date and time of ACL's update (RFC 3339 format)\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/lbBackend:LbBackend": {
            "description": "Creates and manages Scaleway Load-Balancer Backends.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-backends).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst backend01 = new scaleway.LbBackend(\"backend01\", {\n    lbId: scaleway_lb.lb01.id,\n    forwardProtocol: \"http\",\n    forwardPort: 80,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nbackend01 = scaleway.LbBackend(\"backend01\",\n    lb_id=scaleway_lb[\"lb01\"][\"id\"],\n    forward_protocol=\"http\",\n    forward_port=80)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backend01 = new Scaleway.LbBackend(\"backend01\", new()\n    {\n        LbId = scaleway_lb.Lb01.Id,\n        ForwardProtocol = \"http\",\n        ForwardPort = 80,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLbBackend(ctx, \"backend01\", \u0026scaleway.LbBackendArgs{\n\t\t\tLbId:            pulumi.Any(scaleway_lb.Lb01.Id),\n\t\t\tForwardProtocol: pulumi.String(\"http\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LbBackend;\nimport com.pulumi.scaleway.LbBackendArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var backend01 = new LbBackend(\"backend01\", LbBackendArgs.builder()        \n            .lbId(scaleway_lb.lb01().id())\n            .forwardProtocol(\"http\")\n            .forwardPort(\"80\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  backend01:\n    type: scaleway:LbBackend\n    properties:\n      lbId: ${scaleway_lb.lb01.id}\n      forwardProtocol: http\n      forwardPort: '80'\n```\n\n### With HTTP Health Check\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst backend01 = new scaleway.LbBackend(\"backend01\", {\n    lbId: scaleway_lb.lb01.id,\n    forwardProtocol: \"http\",\n    forwardPort: 80,\n    healthCheckHttp: {\n        uri: \"www.test.com/health\",\n    },\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nbackend01 = scaleway.LbBackend(\"backend01\",\n    lb_id=scaleway_lb[\"lb01\"][\"id\"],\n    forward_protocol=\"http\",\n    forward_port=80,\n    health_check_http=scaleway.LbBackendHealthCheckHttpArgs(\n        uri=\"www.test.com/health\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backend01 = new Scaleway.LbBackend(\"backend01\", new()\n    {\n        LbId = scaleway_lb.Lb01.Id,\n        ForwardProtocol = \"http\",\n        ForwardPort = 80,\n        HealthCheckHttp = new Scaleway.Inputs.LbBackendHealthCheckHttpArgs\n        {\n            Uri = \"www.test.com/health\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLbBackend(ctx, \"backend01\", \u0026scaleway.LbBackendArgs{\n\t\t\tLbId:            pulumi.Any(scaleway_lb.Lb01.Id),\n\t\t\tForwardProtocol: pulumi.String(\"http\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t\tHealthCheckHttp: \u0026scaleway.LbBackendHealthCheckHttpArgs{\n\t\t\t\tUri: pulumi.String(\"www.test.com/health\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LbBackend;\nimport com.pulumi.scaleway.LbBackendArgs;\nimport com.pulumi.scaleway.inputs.LbBackendHealthCheckHttpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var backend01 = new LbBackend(\"backend01\", LbBackendArgs.builder()        \n            .lbId(scaleway_lb.lb01().id())\n            .forwardProtocol(\"http\")\n            .forwardPort(\"80\")\n            .healthCheckHttp(LbBackendHealthCheckHttpArgs.builder()\n                .uri(\"www.test.com/health\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  backend01:\n    type: scaleway:LbBackend\n    properties:\n      lbId: ${scaleway_lb.lb01.id}\n      forwardProtocol: http\n      forwardPort: '80'\n      healthCheckHttp:\n        uri: www.test.com/health\n```\n\n\n## Import\n\nLoad-Balancer backend can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/lbBackend:LbBackend backend01 fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "failoverHost": {
                    "type": "string",
                    "description": "Scaleway S3 bucket website to be served in case all backend servers are down.\n\u003e **Note:** Only the host part of the Scaleway S3 bucket website is expected:\ne.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL is 'https://failover-website.s3-website.fr-par.scw.cloud/'.\n"
                },
                "forwardPort": {
                    "type": "integer",
                    "description": "User sessions will be forwarded to this port of backend servers.\n"
                },
                "forwardPortAlgorithm": {
                    "type": "string",
                    "description": "Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.\n"
                },
                "forwardProtocol": {
                    "type": "string",
                    "description": "Backend protocol. Possible values are: `tcp` or `http`.\n"
                },
                "healthCheckDelay": {
                    "type": "string",
                    "description": "Interval between two HC requests.\n"
                },
                "healthCheckHttp": {
                    "$ref": "#/types/scaleway:index/LbBackendHealthCheckHttp:LbBackendHealthCheckHttp",
                    "description": "This block enable HTTP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                },
                "healthCheckHttps": {
                    "$ref": "#/types/scaleway:index/LbBackendHealthCheckHttps:LbBackendHealthCheckHttps",
                    "description": "This block enable HTTPS health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                },
                "healthCheckMaxRetries": {
                    "type": "integer",
                    "description": "Number of allowed failed HC requests before the backend server is marked down.\n"
                },
                "healthCheckPort": {
                    "type": "integer",
                    "description": "Port the HC requests will be send to.\n"
                },
                "healthCheckSendProxy": {
                    "type": "boolean",
                    "description": "Defines whether proxy protocol should be activated for the health check.\n"
                },
                "healthCheckTcp": {
                    "$ref": "#/types/scaleway:index/LbBackendHealthCheckTcp:LbBackendHealthCheckTcp",
                    "description": "This block enable TCP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                },
                "healthCheckTimeout": {
                    "type": "string",
                    "description": "Timeout before we consider a HC request failed.\n"
                },
                "healthCheckTransientDelay": {
                    "type": "string",
                    "description": "The time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN).\n"
                },
                "ignoreSslServerVerify": {
                    "type": "boolean",
                    "description": "Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this backend is attached to.\n\u003e **Important:** Updates to `lb_id` will recreate the backend.\n"
                },
                "maxConnections": {
                    "type": "integer",
                    "description": "Maximum number of connections allowed per backend server.\n"
                },
                "maxRetries": {
                    "type": "integer",
                    "description": "Number of retries when a backend server connection failed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the load-balancer backend.\n"
                },
                "onMarkedDownAction": {
                    "type": "string",
                    "description": "Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdown_sessions`.\n"
                },
                "proxyProtocol": {
                    "type": "string",
                    "description": "Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2_ssl`, `v2_ssl_cn`)\n"
                },
                "redispatchAttemptCount": {
                    "type": "integer",
                    "description": "Whether to use another backend server on each attempt.\n"
                },
                "sendProxyV2": {
                    "type": "boolean",
                    "description": "DEPRECATED please use `proxy_protocol` instead - (Default: `false`) Enables PROXY protocol version 2.\n",
                    "deprecationMessage": "Please use proxy_protocol instead"
                },
                "serverIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of backend server IP addresses. Addresses can be either IPv4 or IPv6.\n"
                },
                "sslBridging": {
                    "type": "boolean",
                    "description": "Enables SSL between load balancer and backend servers.\n"
                },
                "stickySessions": {
                    "type": "string",
                    "description": "The type of sticky sessions. The only current possible values are: `none`, `cookie` and `table`.\n"
                },
                "stickySessionsCookieName": {
                    "type": "string",
                    "description": "Cookie name for sticky sessions. Only applicable when sticky_sessions is set to `cookie`.\n"
                },
                "timeoutConnect": {
                    "type": "string",
                    "description": "Maximum initial server connection establishment time. (e.g.: `1s`)\n"
                },
                "timeoutQueue": {
                    "type": "string",
                    "description": "Maximum time for a request to be left pending in queue when `max_connections` is reached. (e.g.: `1s`)\n"
                },
                "timeoutServer": {
                    "type": "string",
                    "description": "Maximum server connection inactivity time. (e.g.: `1s`)\n"
                },
                "timeoutTunnel": {
                    "type": "string",
                    "description": "Maximum tunnel inactivity time. (e.g.: `1s`)\n"
                }
            },
            "required": [
                "forwardPort",
                "forwardProtocol",
                "healthCheckPort",
                "healthCheckTcp",
                "lbId",
                "name",
                "sendProxyV2"
            ],
            "inputProperties": {
                "failoverHost": {
                    "type": "string",
                    "description": "Scaleway S3 bucket website to be served in case all backend servers are down.\n\u003e **Note:** Only the host part of the Scaleway S3 bucket website is expected:\ne.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL is 'https://failover-website.s3-website.fr-par.scw.cloud/'.\n"
                },
                "forwardPort": {
                    "type": "integer",
                    "description": "User sessions will be forwarded to this port of backend servers.\n"
                },
                "forwardPortAlgorithm": {
                    "type": "string",
                    "description": "Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.\n"
                },
                "forwardProtocol": {
                    "type": "string",
                    "description": "Backend protocol. Possible values are: `tcp` or `http`.\n"
                },
                "healthCheckDelay": {
                    "type": "string",
                    "description": "Interval between two HC requests.\n"
                },
                "healthCheckHttp": {
                    "$ref": "#/types/scaleway:index/LbBackendHealthCheckHttp:LbBackendHealthCheckHttp",
                    "description": "This block enable HTTP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                },
                "healthCheckHttps": {
                    "$ref": "#/types/scaleway:index/LbBackendHealthCheckHttps:LbBackendHealthCheckHttps",
                    "description": "This block enable HTTPS health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                },
                "healthCheckMaxRetries": {
                    "type": "integer",
                    "description": "Number of allowed failed HC requests before the backend server is marked down.\n"
                },
                "healthCheckPort": {
                    "type": "integer",
                    "description": "Port the HC requests will be send to.\n"
                },
                "healthCheckSendProxy": {
                    "type": "boolean",
                    "description": "Defines whether proxy protocol should be activated for the health check.\n"
                },
                "healthCheckTcp": {
                    "$ref": "#/types/scaleway:index/LbBackendHealthCheckTcp:LbBackendHealthCheckTcp",
                    "description": "This block enable TCP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                },
                "healthCheckTimeout": {
                    "type": "string",
                    "description": "Timeout before we consider a HC request failed.\n"
                },
                "healthCheckTransientDelay": {
                    "type": "string",
                    "description": "The time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN).\n"
                },
                "ignoreSslServerVerify": {
                    "type": "boolean",
                    "description": "Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this backend is attached to.\n\u003e **Important:** Updates to `lb_id` will recreate the backend.\n",
                    "willReplaceOnChanges": true
                },
                "maxConnections": {
                    "type": "integer",
                    "description": "Maximum number of connections allowed per backend server.\n"
                },
                "maxRetries": {
                    "type": "integer",
                    "description": "Number of retries when a backend server connection failed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the load-balancer backend.\n"
                },
                "onMarkedDownAction": {
                    "type": "string",
                    "description": "Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdown_sessions`.\n"
                },
                "proxyProtocol": {
                    "type": "string",
                    "description": "Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2_ssl`, `v2_ssl_cn`)\n"
                },
                "redispatchAttemptCount": {
                    "type": "integer",
                    "description": "Whether to use another backend server on each attempt.\n"
                },
                "sendProxyV2": {
                    "type": "boolean",
                    "description": "DEPRECATED please use `proxy_protocol` instead - (Default: `false`) Enables PROXY protocol version 2.\n",
                    "deprecationMessage": "Please use proxy_protocol instead"
                },
                "serverIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of backend server IP addresses. Addresses can be either IPv4 or IPv6.\n"
                },
                "sslBridging": {
                    "type": "boolean",
                    "description": "Enables SSL between load balancer and backend servers.\n"
                },
                "stickySessions": {
                    "type": "string",
                    "description": "The type of sticky sessions. The only current possible values are: `none`, `cookie` and `table`.\n"
                },
                "stickySessionsCookieName": {
                    "type": "string",
                    "description": "Cookie name for sticky sessions. Only applicable when sticky_sessions is set to `cookie`.\n"
                },
                "timeoutConnect": {
                    "type": "string",
                    "description": "Maximum initial server connection establishment time. (e.g.: `1s`)\n"
                },
                "timeoutQueue": {
                    "type": "string",
                    "description": "Maximum time for a request to be left pending in queue when `max_connections` is reached. (e.g.: `1s`)\n"
                },
                "timeoutServer": {
                    "type": "string",
                    "description": "Maximum server connection inactivity time. (e.g.: `1s`)\n"
                },
                "timeoutTunnel": {
                    "type": "string",
                    "description": "Maximum tunnel inactivity time. (e.g.: `1s`)\n"
                }
            },
            "requiredInputs": [
                "forwardPort",
                "forwardProtocol",
                "lbId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbBackend resources.\n",
                "properties": {
                    "failoverHost": {
                        "type": "string",
                        "description": "Scaleway S3 bucket website to be served in case all backend servers are down.\n\u003e **Note:** Only the host part of the Scaleway S3 bucket website is expected:\ne.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL is 'https://failover-website.s3-website.fr-par.scw.cloud/'.\n"
                    },
                    "forwardPort": {
                        "type": "integer",
                        "description": "User sessions will be forwarded to this port of backend servers.\n"
                    },
                    "forwardPortAlgorithm": {
                        "type": "string",
                        "description": "Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.\n"
                    },
                    "forwardProtocol": {
                        "type": "string",
                        "description": "Backend protocol. Possible values are: `tcp` or `http`.\n"
                    },
                    "healthCheckDelay": {
                        "type": "string",
                        "description": "Interval between two HC requests.\n"
                    },
                    "healthCheckHttp": {
                        "$ref": "#/types/scaleway:index/LbBackendHealthCheckHttp:LbBackendHealthCheckHttp",
                        "description": "This block enable HTTP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                    },
                    "healthCheckHttps": {
                        "$ref": "#/types/scaleway:index/LbBackendHealthCheckHttps:LbBackendHealthCheckHttps",
                        "description": "This block enable HTTPS health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                    },
                    "healthCheckMaxRetries": {
                        "type": "integer",
                        "description": "Number of allowed failed HC requests before the backend server is marked down.\n"
                    },
                    "healthCheckPort": {
                        "type": "integer",
                        "description": "Port the HC requests will be send to.\n"
                    },
                    "healthCheckSendProxy": {
                        "type": "boolean",
                        "description": "Defines whether proxy protocol should be activated for the health check.\n"
                    },
                    "healthCheckTcp": {
                        "$ref": "#/types/scaleway:index/LbBackendHealthCheckTcp:LbBackendHealthCheckTcp",
                        "description": "This block enable TCP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                    },
                    "healthCheckTimeout": {
                        "type": "string",
                        "description": "Timeout before we consider a HC request failed.\n"
                    },
                    "healthCheckTransientDelay": {
                        "type": "string",
                        "description": "The time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN).\n"
                    },
                    "ignoreSslServerVerify": {
                        "type": "boolean",
                        "description": "Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection.\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID this backend is attached to.\n\u003e **Important:** Updates to `lb_id` will recreate the backend.\n",
                        "willReplaceOnChanges": true
                    },
                    "maxConnections": {
                        "type": "integer",
                        "description": "Maximum number of connections allowed per backend server.\n"
                    },
                    "maxRetries": {
                        "type": "integer",
                        "description": "Number of retries when a backend server connection failed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the load-balancer backend.\n"
                    },
                    "onMarkedDownAction": {
                        "type": "string",
                        "description": "Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdown_sessions`.\n"
                    },
                    "proxyProtocol": {
                        "type": "string",
                        "description": "Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2_ssl`, `v2_ssl_cn`)\n"
                    },
                    "redispatchAttemptCount": {
                        "type": "integer",
                        "description": "Whether to use another backend server on each attempt.\n"
                    },
                    "sendProxyV2": {
                        "type": "boolean",
                        "description": "DEPRECATED please use `proxy_protocol` instead - (Default: `false`) Enables PROXY protocol version 2.\n",
                        "deprecationMessage": "Please use proxy_protocol instead"
                    },
                    "serverIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of backend server IP addresses. Addresses can be either IPv4 or IPv6.\n"
                    },
                    "sslBridging": {
                        "type": "boolean",
                        "description": "Enables SSL between load balancer and backend servers.\n"
                    },
                    "stickySessions": {
                        "type": "string",
                        "description": "The type of sticky sessions. The only current possible values are: `none`, `cookie` and `table`.\n"
                    },
                    "stickySessionsCookieName": {
                        "type": "string",
                        "description": "Cookie name for sticky sessions. Only applicable when sticky_sessions is set to `cookie`.\n"
                    },
                    "timeoutConnect": {
                        "type": "string",
                        "description": "Maximum initial server connection establishment time. (e.g.: `1s`)\n"
                    },
                    "timeoutQueue": {
                        "type": "string",
                        "description": "Maximum time for a request to be left pending in queue when `max_connections` is reached. (e.g.: `1s`)\n"
                    },
                    "timeoutServer": {
                        "type": "string",
                        "description": "Maximum server connection inactivity time. (e.g.: `1s`)\n"
                    },
                    "timeoutTunnel": {
                        "type": "string",
                        "description": "Maximum tunnel inactivity time. (e.g.: `1s`)\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/lbCertificate:LbCertificate": {
            "properties": {
                "commonName": {
                    "type": "string",
                    "description": "Main domain of the certificate. A new certificate will be created if this field is changed.\n"
                },
                "customCertificate": {
                    "$ref": "#/types/scaleway:index/LbCertificateCustomCertificate:LbCertificateCustomCertificate",
                    "description": "Configuration block for custom certificate chain. Only one of `letsencrypt` and `custom_certificate` should be specified.\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The identifier (SHA-1) of the certificate\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this certificate is attached to.\n\n\u003e **Important:** Updates to `lb_id` will recreate the load-balancer certificate.\n"
                },
                "letsencrypt": {
                    "$ref": "#/types/scaleway:index/LbCertificateLetsencrypt:LbCertificateLetsencrypt",
                    "description": "Configuration block for Let's Encrypt configuration. Only one of `letsencrypt` and `custom_certificate` should be specified.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the certificate backend.\n"
                },
                "notValidAfter": {
                    "type": "string",
                    "description": "The not valid after validity bound timestamp\n"
                },
                "notValidBefore": {
                    "type": "string",
                    "description": "The not valid before validity bound timestamp\n"
                },
                "status": {
                    "type": "string",
                    "description": "Certificate status\n"
                },
                "subjectAlternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of alternative domain names.  A new certificate will be created if this field is changed.\n\n\u003e **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.\n"
                }
            },
            "required": [
                "commonName",
                "fingerprint",
                "lbId",
                "name",
                "notValidAfter",
                "notValidBefore",
                "status",
                "subjectAlternativeNames"
            ],
            "inputProperties": {
                "customCertificate": {
                    "$ref": "#/types/scaleway:index/LbCertificateCustomCertificate:LbCertificateCustomCertificate",
                    "description": "Configuration block for custom certificate chain. Only one of `letsencrypt` and `custom_certificate` should be specified.\n",
                    "willReplaceOnChanges": true
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this certificate is attached to.\n\n\u003e **Important:** Updates to `lb_id` will recreate the load-balancer certificate.\n",
                    "willReplaceOnChanges": true
                },
                "letsencrypt": {
                    "$ref": "#/types/scaleway:index/LbCertificateLetsencrypt:LbCertificateLetsencrypt",
                    "description": "Configuration block for Let's Encrypt configuration. Only one of `letsencrypt` and `custom_certificate` should be specified.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the certificate backend.\n"
                }
            },
            "requiredInputs": [
                "lbId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbCertificate resources.\n",
                "properties": {
                    "commonName": {
                        "type": "string",
                        "description": "Main domain of the certificate. A new certificate will be created if this field is changed.\n"
                    },
                    "customCertificate": {
                        "$ref": "#/types/scaleway:index/LbCertificateCustomCertificate:LbCertificateCustomCertificate",
                        "description": "Configuration block for custom certificate chain. Only one of `letsencrypt` and `custom_certificate` should be specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The identifier (SHA-1) of the certificate\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID this certificate is attached to.\n\n\u003e **Important:** Updates to `lb_id` will recreate the load-balancer certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "letsencrypt": {
                        "$ref": "#/types/scaleway:index/LbCertificateLetsencrypt:LbCertificateLetsencrypt",
                        "description": "Configuration block for Let's Encrypt configuration. Only one of `letsencrypt` and `custom_certificate` should be specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the certificate backend.\n"
                    },
                    "notValidAfter": {
                        "type": "string",
                        "description": "The not valid after validity bound timestamp\n"
                    },
                    "notValidBefore": {
                        "type": "string",
                        "description": "The not valid before validity bound timestamp\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Certificate status\n"
                    },
                    "subjectAlternativeNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of alternative domain names.  A new certificate will be created if this field is changed.\n\n\u003e **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/lbFrontend:LbFrontend": {
            "description": "Creates and manages Scaleway Load-Balancer Frontends. For more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-frontends).\n\n## Examples Usage\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst frontend01 = new scaleway.LbFrontend(\"frontend01\", {\n    lbId: scaleway_lb.lb01.id,\n    backendId: scaleway_lb_backend.backend01.id,\n    inboundPort: 80,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nfrontend01 = scaleway.LbFrontend(\"frontend01\",\n    lb_id=scaleway_lb[\"lb01\"][\"id\"],\n    backend_id=scaleway_lb_backend[\"backend01\"][\"id\"],\n    inbound_port=80)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var frontend01 = new Scaleway.LbFrontend(\"frontend01\", new()\n    {\n        LbId = scaleway_lb.Lb01.Id,\n        BackendId = scaleway_lb_backend.Backend01.Id,\n        InboundPort = 80,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLbFrontend(ctx, \"frontend01\", \u0026scaleway.LbFrontendArgs{\n\t\t\tLbId:        pulumi.Any(scaleway_lb.Lb01.Id),\n\t\t\tBackendId:   pulumi.Any(scaleway_lb_backend.Backend01.Id),\n\t\t\tInboundPort: pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LbFrontend;\nimport com.pulumi.scaleway.LbFrontendArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var frontend01 = new LbFrontend(\"frontend01\", LbFrontendArgs.builder()        \n            .lbId(scaleway_lb.lb01().id())\n            .backendId(scaleway_lb_backend.backend01().id())\n            .inboundPort(\"80\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  frontend01:\n    type: scaleway:LbFrontend\n    properties:\n      lbId: ${scaleway_lb.lb01.id}\n      backendId: ${scaleway_lb_backend.backend01.id}\n      inboundPort: '80'\n```\n\n## With ACLs\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LbFrontend;\nimport com.pulumi.scaleway.LbFrontendArgs;\nimport com.pulumi.scaleway.inputs.LbFrontendAclArgs;\nimport com.pulumi.scaleway.inputs.LbFrontendAclActionArgs;\nimport com.pulumi.scaleway.inputs.LbFrontendAclMatchArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var frontend01 = new LbFrontend(\"frontend01\", LbFrontendArgs.builder()        \n            .lbId(scaleway_lb.lb01().id())\n            .backendId(scaleway_lb_backend.backend01().id())\n            .inboundPort(\"80\")\n            .acls(            \n                LbFrontendAclArgs.builder()\n                    .name(\"blacklist wellknwon IPs\")\n                    .action(LbFrontendAclActionArgs.builder()\n                        .type(\"allow\")\n                        .build())\n                    .match(LbFrontendAclMatchArgs.builder()\n                        .ipSubnets(                        \n                            \"192.168.0.1\",\n                            \"192.168.0.2\",\n                            \"192.168.10.0/24\")\n                        .build())\n                    .build(),\n                LbFrontendAclArgs.builder()\n                    .action(LbFrontendAclActionArgs.builder()\n                        .type(\"deny\")\n                        .build())\n                    .match(LbFrontendAclMatchArgs.builder()\n                        .ipSubnets(\"51.51.51.51\")\n                        .httpFilter(\"regex\")\n                        .httpFilterValues(\"^foo*bar$\")\n                        .build())\n                    .build(),\n                LbFrontendAclArgs.builder()\n                    .action(LbFrontendAclActionArgs.builder()\n                        .type(\"allow\")\n                        .build())\n                    .match(LbFrontendAclMatchArgs.builder()\n                        .httpFilter(\"path_begin\")\n                        .httpFilterValues(                        \n                            \"foo\",\n                            \"bar\")\n                        .build())\n                    .build(),\n                LbFrontendAclArgs.builder()\n                    .action(LbFrontendAclActionArgs.builder()\n                        .type(\"allow\")\n                        .build())\n                    .match(LbFrontendAclMatchArgs.builder()\n                        .httpFilter(\"path_begin\")\n                        .httpFilterValues(\"hi\")\n                        .invert(\"true\")\n                        .build())\n                    .build(),\n                LbFrontendAclArgs.builder()\n                    .action(LbFrontendAclActionArgs.builder()\n                        .type(\"allow\")\n                        .build())\n                    .match(LbFrontendAclMatchArgs.builder()\n                        .httpFilter(\"http_header_match\")\n                        .httpFilterValues(\"foo\")\n                        .httpValueOption(\"bar\")\n                        .build())\n                    .build(),\n                LbFrontendAclArgs.builder()\n                    .action(LbFrontendAclActionArgs.builder()\n                        .type(\"redirect\")\n                        .redirects(LbFrontendAclActionRedirectArgs.builder()\n                            .type(\"location\")\n                            .target(\"https://example.com\")\n                            .code(307)\n                            .build())\n                        .build())\n                    .match(LbFrontendAclMatchArgs.builder()\n                        .ipSubnets(\"10.0.0.10\")\n                        .httpFilter(\"path_begin\")\n                        .httpFilterValues(                        \n                            \"foo\",\n                            \"bar\")\n                        .build())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  frontend01:\n    type: scaleway:LbFrontend\n    properties:\n      lbId: ${scaleway_lb.lb01.id}\n      backendId: ${scaleway_lb_backend.backend01.id}\n      inboundPort: '80'\n      # Allow downstream requests from: 192.168.0.1, 192.168.0.2 or 192.168.10.0/24\n      acls:\n        - name: blacklist wellknwon IPs\n          action:\n            type: allow\n          match:\n            ipSubnets:\n              - 192.168.0.1\n              - 192.168.0.2\n              - 192.168.10.0/24\n        - action:\n            type: deny\n          match:\n            ipSubnets:\n              - 51.51.51.51\n            httpFilter: regex\n            httpFilterValues:\n              - ^foo*bar$\n        - action:\n            type: allow\n          match:\n            httpFilter: path_begin\n            httpFilterValues:\n              - foo\n              - bar\n        - action:\n            type: allow\n          match:\n            httpFilter: path_begin\n            httpFilterValues:\n              - hi\n            invert: 'true'\n        - action:\n            type: allow\n          match:\n            httpFilter: http_header_match\n            httpFilterValues: foo\n            httpValueOption: bar\n        - action:\n            type: redirect\n            redirects:\n              - type: location\n                target: https://example.com\n                code: 307\n          match:\n            ipSubnets:\n              - 10.0.0.10\n            httpFilter: path_begin\n            httpFilterValues:\n              - foo\n              - bar\n```\n\n\n## Import\n\nLoad-Balancer frontend can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/lbFrontend:LbFrontend frontend01 fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LbFrontendAcl:LbFrontendAcl"
                    },
                    "description": "A list of ACL rules to apply to the load-balancer frontend.  Defined below.\n"
                },
                "backendId": {
                    "type": "string",
                    "description": "The load-balancer backend ID this frontend is attached to.\n\n\u003e **Important:** Updates to `lb_id` or `backend_id` will recreate the frontend.\n"
                },
                "certificateId": {
                    "type": "string",
                    "description": "(Deprecated) first certificate ID used by the frontend.\n",
                    "deprecationMessage": "Please use certificate_ids"
                },
                "certificateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Certificate IDs that should be used by the frontend.\n\n\u003e **Important:** Certificates are not allowed on port 80.\n"
                },
                "enableHttp3": {
                    "type": "boolean",
                    "description": "Activates HTTP/3 protocol.\n"
                },
                "externalAcls": {
                    "type": "boolean",
                    "description": "A boolean to specify whether to use lb_acl.\nIf `external_acls` is set to `true`, `acl` can not be set directly in the lb frontend.\n"
                },
                "inboundPort": {
                    "type": "integer",
                    "description": "TCP port to listen on the front side.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this frontend is attached to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ACL name. If not provided it will be randomly generated.\n"
                },
                "timeoutClient": {
                    "type": "string",
                    "description": "Maximum inactivity time on the client side. (e.g.: `1s`)\n"
                }
            },
            "required": [
                "backendId",
                "certificateId",
                "inboundPort",
                "lbId",
                "name"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LbFrontendAcl:LbFrontendAcl"
                    },
                    "description": "A list of ACL rules to apply to the load-balancer frontend.  Defined below.\n"
                },
                "backendId": {
                    "type": "string",
                    "description": "The load-balancer backend ID this frontend is attached to.\n\n\u003e **Important:** Updates to `lb_id` or `backend_id` will recreate the frontend.\n",
                    "willReplaceOnChanges": true
                },
                "certificateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Certificate IDs that should be used by the frontend.\n\n\u003e **Important:** Certificates are not allowed on port 80.\n"
                },
                "enableHttp3": {
                    "type": "boolean",
                    "description": "Activates HTTP/3 protocol.\n"
                },
                "externalAcls": {
                    "type": "boolean",
                    "description": "A boolean to specify whether to use lb_acl.\nIf `external_acls` is set to `true`, `acl` can not be set directly in the lb frontend.\n"
                },
                "inboundPort": {
                    "type": "integer",
                    "description": "TCP port to listen on the front side.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this frontend is attached to.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The ACL name. If not provided it will be randomly generated.\n"
                },
                "timeoutClient": {
                    "type": "string",
                    "description": "Maximum inactivity time on the client side. (e.g.: `1s`)\n"
                }
            },
            "requiredInputs": [
                "backendId",
                "inboundPort",
                "lbId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbFrontend resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/LbFrontendAcl:LbFrontendAcl"
                        },
                        "description": "A list of ACL rules to apply to the load-balancer frontend.  Defined below.\n"
                    },
                    "backendId": {
                        "type": "string",
                        "description": "The load-balancer backend ID this frontend is attached to.\n\n\u003e **Important:** Updates to `lb_id` or `backend_id` will recreate the frontend.\n",
                        "willReplaceOnChanges": true
                    },
                    "certificateId": {
                        "type": "string",
                        "description": "(Deprecated) first certificate ID used by the frontend.\n",
                        "deprecationMessage": "Please use certificate_ids"
                    },
                    "certificateIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Certificate IDs that should be used by the frontend.\n\n\u003e **Important:** Certificates are not allowed on port 80.\n"
                    },
                    "enableHttp3": {
                        "type": "boolean",
                        "description": "Activates HTTP/3 protocol.\n"
                    },
                    "externalAcls": {
                        "type": "boolean",
                        "description": "A boolean to specify whether to use lb_acl.\nIf `external_acls` is set to `true`, `acl` can not be set directly in the lb frontend.\n"
                    },
                    "inboundPort": {
                        "type": "integer",
                        "description": "TCP port to listen on the front side.\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID this frontend is attached to.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The ACL name. If not provided it will be randomly generated.\n"
                    },
                    "timeoutClient": {
                        "type": "string",
                        "description": "Maximum inactivity time on the client side. (e.g.: `1s`)\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/lbIp:LbIp": {
            "description": "Creates and manages Scaleway Load-Balancers IPs.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-ip-addresses).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst ip = new scaleway.LbIp(\"ip\", {reverse: \"my-reverse.com\"});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nip = scaleway.LbIp(\"ip\", reverse=\"my-reverse.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip = new Scaleway.LbIp(\"ip\", new()\n    {\n        Reverse = \"my-reverse.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLbIp(ctx, \"ip\", \u0026scaleway.LbIpArgs{\n\t\t\tReverse: pulumi.String(\"my-reverse.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LbIp;\nimport com.pulumi.scaleway.LbIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ip = new LbIp(\"ip\", LbIpArgs.builder()        \n            .reverse(\"my-reverse.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ip:\n    type: scaleway:LbIp\n    properties:\n      reverse: my-reverse.com\n```\n\n\n## Import\n\nIPs can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/lbIp:LbIp ip01 fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The IP Address\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The associated load-balance ID if any\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IP is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the resource\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain associated with this IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n"
                }
            },
            "required": [
                "ipAddress",
                "lbId",
                "organizationId",
                "projectId",
                "region",
                "reverse",
                "zone"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IP is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain associated with this IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbIp resources.\n",
                "properties": {
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP Address\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The associated load-balance ID if any\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the IP is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the resource\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain associated with this IP.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the IP should be reserved.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/lbRoute:LbRoute": {
            "description": "Creates and manages Scaleway Load-Balancer Routes.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-route).\n\n## Examples\n\n### With SNI for direction to TCP backends\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst ip01 = new scaleway.LbIp(\"ip01\", {});\nconst lb01 = new scaleway.Lb(\"lb01\", {\n    ipId: ip01.id,\n    type: \"lb-s\",\n});\nconst bkd01 = new scaleway.LbBackend(\"bkd01\", {\n    lbId: lb01.id,\n    forwardProtocol: \"tcp\",\n    forwardPort: 80,\n    proxyProtocol: \"none\",\n});\nconst frt01 = new scaleway.LbFrontend(\"frt01\", {\n    lbId: lb01.id,\n    backendId: bkd01.id,\n    inboundPort: 80,\n});\nconst rt01 = new scaleway.LbRoute(\"rt01\", {\n    frontendId: frt01.id,\n    backendId: bkd01.id,\n    matchSni: \"sni.scaleway.com\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nip01 = scaleway.LbIp(\"ip01\")\nlb01 = scaleway.Lb(\"lb01\",\n    ip_id=ip01.id,\n    type=\"lb-s\")\nbkd01 = scaleway.LbBackend(\"bkd01\",\n    lb_id=lb01.id,\n    forward_protocol=\"tcp\",\n    forward_port=80,\n    proxy_protocol=\"none\")\nfrt01 = scaleway.LbFrontend(\"frt01\",\n    lb_id=lb01.id,\n    backend_id=bkd01.id,\n    inbound_port=80)\nrt01 = scaleway.LbRoute(\"rt01\",\n    frontend_id=frt01.id,\n    backend_id=bkd01.id,\n    match_sni=\"sni.scaleway.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip01 = new Scaleway.LbIp(\"ip01\");\n\n    var lb01 = new Scaleway.Lb(\"lb01\", new()\n    {\n        IpId = ip01.Id,\n        Type = \"lb-s\",\n    });\n\n    var bkd01 = new Scaleway.LbBackend(\"bkd01\", new()\n    {\n        LbId = lb01.Id,\n        ForwardProtocol = \"tcp\",\n        ForwardPort = 80,\n        ProxyProtocol = \"none\",\n    });\n\n    var frt01 = new Scaleway.LbFrontend(\"frt01\", new()\n    {\n        LbId = lb01.Id,\n        BackendId = bkd01.Id,\n        InboundPort = 80,\n    });\n\n    var rt01 = new Scaleway.LbRoute(\"rt01\", new()\n    {\n        FrontendId = frt01.Id,\n        BackendId = bkd01.Id,\n        MatchSni = \"sni.scaleway.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tip01, err := scaleway.NewLbIp(ctx, \"ip01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlb01, err := scaleway.NewLb(ctx, \"lb01\", \u0026scaleway.LbArgs{\n\t\t\tIpId: ip01.ID(),\n\t\t\tType: pulumi.String(\"lb-s\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbkd01, err := scaleway.NewLbBackend(ctx, \"bkd01\", \u0026scaleway.LbBackendArgs{\n\t\t\tLbId:            lb01.ID(),\n\t\t\tForwardProtocol: pulumi.String(\"tcp\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t\tProxyProtocol:   pulumi.String(\"none\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfrt01, err := scaleway.NewLbFrontend(ctx, \"frt01\", \u0026scaleway.LbFrontendArgs{\n\t\t\tLbId:        lb01.ID(),\n\t\t\tBackendId:   bkd01.ID(),\n\t\t\tInboundPort: pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewLbRoute(ctx, \"rt01\", \u0026scaleway.LbRouteArgs{\n\t\t\tFrontendId: frt01.ID(),\n\t\t\tBackendId:  bkd01.ID(),\n\t\t\tMatchSni:   pulumi.String(\"sni.scaleway.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LbIp;\nimport com.pulumi.scaleway.Lb;\nimport com.pulumi.scaleway.LbArgs;\nimport com.pulumi.scaleway.LbBackend;\nimport com.pulumi.scaleway.LbBackendArgs;\nimport com.pulumi.scaleway.LbFrontend;\nimport com.pulumi.scaleway.LbFrontendArgs;\nimport com.pulumi.scaleway.LbRoute;\nimport com.pulumi.scaleway.LbRouteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ip01 = new LbIp(\"ip01\");\n\n        var lb01 = new Lb(\"lb01\", LbArgs.builder()        \n            .ipId(ip01.id())\n            .type(\"lb-s\")\n            .build());\n\n        var bkd01 = new LbBackend(\"bkd01\", LbBackendArgs.builder()        \n            .lbId(lb01.id())\n            .forwardProtocol(\"tcp\")\n            .forwardPort(80)\n            .proxyProtocol(\"none\")\n            .build());\n\n        var frt01 = new LbFrontend(\"frt01\", LbFrontendArgs.builder()        \n            .lbId(lb01.id())\n            .backendId(bkd01.id())\n            .inboundPort(80)\n            .build());\n\n        var rt01 = new LbRoute(\"rt01\", LbRouteArgs.builder()        \n            .frontendId(frt01.id())\n            .backendId(bkd01.id())\n            .matchSni(\"sni.scaleway.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ip01:\n    type: scaleway:LbIp\n  lb01:\n    type: scaleway:Lb\n    properties:\n      ipId: ${ip01.id}\n      type: lb-s\n  bkd01:\n    type: scaleway:LbBackend\n    properties:\n      lbId: ${lb01.id}\n      forwardProtocol: tcp\n      forwardPort: 80\n      proxyProtocol: none\n  frt01:\n    type: scaleway:LbFrontend\n    properties:\n      lbId: ${lb01.id}\n      backendId: ${bkd01.id}\n      inboundPort: 80\n  rt01:\n    type: scaleway:LbRoute\n    properties:\n      frontendId: ${frt01.id}\n      backendId: ${bkd01.id}\n      matchSni: sni.scaleway.com\n```\n\n### With host-header for direction to HTTP backends\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst ip01 = new scaleway.LbIp(\"ip01\", {});\nconst lb01 = new scaleway.Lb(\"lb01\", {\n    ipId: ip01.id,\n    type: \"lb-s\",\n});\nconst bkd01 = new scaleway.LbBackend(\"bkd01\", {\n    lbId: lb01.id,\n    forwardProtocol: \"http\",\n    forwardPort: 80,\n    proxyProtocol: \"none\",\n});\nconst frt01 = new scaleway.LbFrontend(\"frt01\", {\n    lbId: lb01.id,\n    backendId: bkd01.id,\n    inboundPort: 80,\n});\nconst rt01 = new scaleway.LbRoute(\"rt01\", {\n    frontendId: frt01.id,\n    backendId: bkd01.id,\n    matchHostHeader: \"host.scaleway.com\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nip01 = scaleway.LbIp(\"ip01\")\nlb01 = scaleway.Lb(\"lb01\",\n    ip_id=ip01.id,\n    type=\"lb-s\")\nbkd01 = scaleway.LbBackend(\"bkd01\",\n    lb_id=lb01.id,\n    forward_protocol=\"http\",\n    forward_port=80,\n    proxy_protocol=\"none\")\nfrt01 = scaleway.LbFrontend(\"frt01\",\n    lb_id=lb01.id,\n    backend_id=bkd01.id,\n    inbound_port=80)\nrt01 = scaleway.LbRoute(\"rt01\",\n    frontend_id=frt01.id,\n    backend_id=bkd01.id,\n    match_host_header=\"host.scaleway.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip01 = new Scaleway.LbIp(\"ip01\");\n\n    var lb01 = new Scaleway.Lb(\"lb01\", new()\n    {\n        IpId = ip01.Id,\n        Type = \"lb-s\",\n    });\n\n    var bkd01 = new Scaleway.LbBackend(\"bkd01\", new()\n    {\n        LbId = lb01.Id,\n        ForwardProtocol = \"http\",\n        ForwardPort = 80,\n        ProxyProtocol = \"none\",\n    });\n\n    var frt01 = new Scaleway.LbFrontend(\"frt01\", new()\n    {\n        LbId = lb01.Id,\n        BackendId = bkd01.Id,\n        InboundPort = 80,\n    });\n\n    var rt01 = new Scaleway.LbRoute(\"rt01\", new()\n    {\n        FrontendId = frt01.Id,\n        BackendId = bkd01.Id,\n        MatchHostHeader = \"host.scaleway.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tip01, err := scaleway.NewLbIp(ctx, \"ip01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlb01, err := scaleway.NewLb(ctx, \"lb01\", \u0026scaleway.LbArgs{\n\t\t\tIpId: ip01.ID(),\n\t\t\tType: pulumi.String(\"lb-s\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbkd01, err := scaleway.NewLbBackend(ctx, \"bkd01\", \u0026scaleway.LbBackendArgs{\n\t\t\tLbId:            lb01.ID(),\n\t\t\tForwardProtocol: pulumi.String(\"http\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t\tProxyProtocol:   pulumi.String(\"none\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfrt01, err := scaleway.NewLbFrontend(ctx, \"frt01\", \u0026scaleway.LbFrontendArgs{\n\t\t\tLbId:        lb01.ID(),\n\t\t\tBackendId:   bkd01.ID(),\n\t\t\tInboundPort: pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewLbRoute(ctx, \"rt01\", \u0026scaleway.LbRouteArgs{\n\t\t\tFrontendId:      frt01.ID(),\n\t\t\tBackendId:       bkd01.ID(),\n\t\t\tMatchHostHeader: pulumi.String(\"host.scaleway.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LbIp;\nimport com.pulumi.scaleway.Lb;\nimport com.pulumi.scaleway.LbArgs;\nimport com.pulumi.scaleway.LbBackend;\nimport com.pulumi.scaleway.LbBackendArgs;\nimport com.pulumi.scaleway.LbFrontend;\nimport com.pulumi.scaleway.LbFrontendArgs;\nimport com.pulumi.scaleway.LbRoute;\nimport com.pulumi.scaleway.LbRouteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ip01 = new LbIp(\"ip01\");\n\n        var lb01 = new Lb(\"lb01\", LbArgs.builder()        \n            .ipId(ip01.id())\n            .type(\"lb-s\")\n            .build());\n\n        var bkd01 = new LbBackend(\"bkd01\", LbBackendArgs.builder()        \n            .lbId(lb01.id())\n            .forwardProtocol(\"http\")\n            .forwardPort(80)\n            .proxyProtocol(\"none\")\n            .build());\n\n        var frt01 = new LbFrontend(\"frt01\", LbFrontendArgs.builder()        \n            .lbId(lb01.id())\n            .backendId(bkd01.id())\n            .inboundPort(80)\n            .build());\n\n        var rt01 = new LbRoute(\"rt01\", LbRouteArgs.builder()        \n            .frontendId(frt01.id())\n            .backendId(bkd01.id())\n            .matchHostHeader(\"host.scaleway.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ip01:\n    type: scaleway:LbIp\n  lb01:\n    type: scaleway:Lb\n    properties:\n      ipId: ${ip01.id}\n      type: lb-s\n  bkd01:\n    type: scaleway:LbBackend\n    properties:\n      lbId: ${lb01.id}\n      forwardProtocol: http\n      forwardPort: 80\n      proxyProtocol: none\n  frt01:\n    type: scaleway:LbFrontend\n    properties:\n      lbId: ${lb01.id}\n      backendId: ${bkd01.id}\n      inboundPort: 80\n  rt01:\n    type: scaleway:LbRoute\n    properties:\n      frontendId: ${frt01.id}\n      backendId: ${bkd01.id}\n      matchHostHeader: host.scaleway.com\n```\n\n\n## Import\n\nLoad-Balancer frontend can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/lbRoute:LbRoute main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "backendId": {
                    "type": "string",
                    "description": "The ID of the backend to which the route is associated.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date at which the route was created.\n"
                },
                "frontendId": {
                    "type": "string",
                    "description": "The ID of the frontend to which the route is associated.\n"
                },
                "matchHostHeader": {
                    "type": "string",
                    "description": "The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.\nOnly one of `match_sni` and `match_host_header` should be specified.\n\n\u003e **Important:** This field should be set for routes on HTTP Load Balancers.\n"
                },
                "matchSni": {
                    "type": "string",
                    "description": "The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.\nOnly one of `match_sni` and `match_host_header` should be specified.\n\n\u003e **Important:** This field should be set for routes on TCP Load Balancers.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date at which the route was last updated.\n"
                }
            },
            "required": [
                "backendId",
                "createdAt",
                "frontendId",
                "updatedAt"
            ],
            "inputProperties": {
                "backendId": {
                    "type": "string",
                    "description": "The ID of the backend to which the route is associated.\n"
                },
                "frontendId": {
                    "type": "string",
                    "description": "The ID of the frontend to which the route is associated.\n",
                    "willReplaceOnChanges": true
                },
                "matchHostHeader": {
                    "type": "string",
                    "description": "The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.\nOnly one of `match_sni` and `match_host_header` should be specified.\n\n\u003e **Important:** This field should be set for routes on HTTP Load Balancers.\n"
                },
                "matchSni": {
                    "type": "string",
                    "description": "The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.\nOnly one of `match_sni` and `match_host_header` should be specified.\n\n\u003e **Important:** This field should be set for routes on TCP Load Balancers.\n"
                }
            },
            "requiredInputs": [
                "backendId",
                "frontendId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbRoute resources.\n",
                "properties": {
                    "backendId": {
                        "type": "string",
                        "description": "The ID of the backend to which the route is associated.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date at which the route was created.\n"
                    },
                    "frontendId": {
                        "type": "string",
                        "description": "The ID of the frontend to which the route is associated.\n",
                        "willReplaceOnChanges": true
                    },
                    "matchHostHeader": {
                        "type": "string",
                        "description": "The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.\nOnly one of `match_sni` and `match_host_header` should be specified.\n\n\u003e **Important:** This field should be set for routes on HTTP Load Balancers.\n"
                    },
                    "matchSni": {
                        "type": "string",
                        "description": "The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.\nOnly one of `match_sni` and `match_host_header` should be specified.\n\n\u003e **Important:** This field should be set for routes on TCP Load Balancers.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date at which the route was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/mnqCredential:MnqCredential": {
            "description": "\n\n\n## Import\n\nCredential can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/mnqCredential:MnqCredential main fr-par/11111111111111111111111111111111\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The credential name..\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace containing the Credential.\n"
                },
                "natsCredentials": {
                    "$ref": "#/types/scaleway:index/MnqCredentialNatsCredentials:MnqCredentialNatsCredentials",
                    "description": "Credentials file used to connect to the NATS service.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol associated to the Credential. Possible values are `nats` and `sqs_sns`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`). The region\nin which the namespace should be created.\n"
                },
                "sqsSnsCredentials": {
                    "$ref": "#/types/scaleway:index/MnqCredentialSqsSnsCredentials:MnqCredentialSqsSnsCredentials",
                    "description": "Credential used to connect to the SQS/SNS service.\n"
                }
            },
            "required": [
                "name",
                "namespaceId",
                "natsCredentials",
                "protocol",
                "region"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The credential name..\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace containing the Credential.\n",
                    "willReplaceOnChanges": true
                },
                "natsCredentials": {
                    "$ref": "#/types/scaleway:index/MnqCredentialNatsCredentials:MnqCredentialNatsCredentials",
                    "description": "Credentials file used to connect to the NATS service.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`). The region\nin which the namespace should be created.\n",
                    "willReplaceOnChanges": true
                },
                "sqsSnsCredentials": {
                    "$ref": "#/types/scaleway:index/MnqCredentialSqsSnsCredentials:MnqCredentialSqsSnsCredentials",
                    "description": "Credential used to connect to the SQS/SNS service.\n"
                }
            },
            "requiredInputs": [
                "namespaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MnqCredential resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The credential name..\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace containing the Credential.\n",
                        "willReplaceOnChanges": true
                    },
                    "natsCredentials": {
                        "$ref": "#/types/scaleway:index/MnqCredentialNatsCredentials:MnqCredentialNatsCredentials",
                        "description": "Credentials file used to connect to the NATS service.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol associated to the Credential. Possible values are `nats` and `sqs_sns`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Defaults to provider `region`). The region\nin which the namespace should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "sqsSnsCredentials": {
                        "$ref": "#/types/scaleway:index/MnqCredentialSqsSnsCredentials:MnqCredentialSqsSnsCredentials",
                        "description": "Credential used to connect to the SQS/SNS service.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/mnqNamespace:MnqNamespace": {
            "description": "Creates and manages Scaleway Messaging and queuing Namespace.\nFor further information please check\nour [documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/mnq/v1alpha1#pkg-index)\n\n\u003e NOTE: This resource refers to the old version of the MNQ API. You should use new resources dedicated to your protocol. SQS, NATS.\n\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.MnqNamespace(\"main\", {\n    protocol: \"nats\",\n    region: \"fr-par\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.MnqNamespace(\"main\",\n    protocol=\"nats\",\n    region=\"fr-par\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.MnqNamespace(\"main\", new()\n    {\n        Protocol = \"nats\",\n        Region = \"fr-par\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewMnqNamespace(ctx, \"main\", \u0026scaleway.MnqNamespaceArgs{\n\t\t\tProtocol: pulumi.String(\"nats\"),\n\t\t\tRegion:   pulumi.String(\"fr-par\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.MnqNamespace;\nimport com.pulumi.scaleway.MnqNamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new MnqNamespace(\"main\", MnqNamespaceArgs.builder()        \n            .protocol(\"nats\")\n            .region(\"fr-par\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:MnqNamespace\n    properties:\n      protocol: nats\n      region: fr-par\n```\n\n\n## Import\n\nNamespaces can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/mnqNamespace:MnqNamespace main fr-par/11111111111111111111111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time the Namespace was created.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint of the service matching the Namespace protocol.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the namespace.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the\nnamespace is associated with.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol to apply on your namespace. Please check our\nsupported [protocols](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/mnq/v1alpha1#pkg-constants).\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which the namespace should be created.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time the Namespace was updated.\n"
                }
            },
            "required": [
                "createdAt",
                "endpoint",
                "name",
                "projectId",
                "protocol",
                "region",
                "updatedAt"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the namespace.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the\nnamespace is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol to apply on your namespace. Please check our\nsupported [protocols](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/mnq/v1alpha1#pkg-constants).\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which the namespace should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "protocol"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MnqNamespace resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time the Namespace was created.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the service matching the Namespace protocol.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the namespace.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the\nnamespace is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol to apply on your namespace. Please check our\nsupported [protocols](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/mnq/v1alpha1#pkg-constants).\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region\nin which the namespace should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time the Namespace was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/mnqNatsAccount:MnqNatsAccount": {
            "description": "Creates and manages Scaleway Messaging and queuing Nats Accounts.\nFor further information please check\nour [documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/nats-overview/)\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.MnqNatsAccount(\"main\", {});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.MnqNatsAccount(\"main\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.MnqNatsAccount(\"main\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewMnqNatsAccount(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.MnqNatsAccount;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new MnqNatsAccount(\"main\");\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:MnqNatsAccount\n```\n\n\n## Import\n\nNamespaces can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/mnqNatsAccount:MnqNatsAccount main fr-par/11111111111111111111111111111111\n```\n\n ",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint of the NATS service for this account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the nats account.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the\naccount is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which the account should be created.\n"
                }
            },
            "required": [
                "endpoint",
                "name",
                "projectId",
                "region"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the nats account.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the\naccount is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which the account should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MnqNatsAccount resources.\n",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the NATS service for this account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the nats account.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the\naccount is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region\nin which the account should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/mnqNatsCredentials:MnqNatsCredentials": {
            "description": "Creates and manages Scaleway Messaging and queuing Nats Credentials.\nFor further information please check\nour [documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/nats-overview/)\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainMnqNatsAccount = new scaleway.MnqNatsAccount(\"mainMnqNatsAccount\", {});\nconst mainMnqNatsCredentials = new scaleway.MnqNatsCredentials(\"mainMnqNatsCredentials\", {accountId: mainMnqNatsAccount.id});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain_mnq_nats_account = scaleway.MnqNatsAccount(\"mainMnqNatsAccount\")\nmain_mnq_nats_credentials = scaleway.MnqNatsCredentials(\"mainMnqNatsCredentials\", account_id=main_mnq_nats_account.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainMnqNatsAccount = new Scaleway.MnqNatsAccount(\"mainMnqNatsAccount\");\n\n    var mainMnqNatsCredentials = new Scaleway.MnqNatsCredentials(\"mainMnqNatsCredentials\", new()\n    {\n        AccountId = mainMnqNatsAccount.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainMnqNatsAccount, err := scaleway.NewMnqNatsAccount(ctx, \"mainMnqNatsAccount\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewMnqNatsCredentials(ctx, \"mainMnqNatsCredentials\", \u0026scaleway.MnqNatsCredentialsArgs{\n\t\t\tAccountId: mainMnqNatsAccount.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.MnqNatsAccount;\nimport com.pulumi.scaleway.MnqNatsCredentials;\nimport com.pulumi.scaleway.MnqNatsCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainMnqNatsAccount = new MnqNatsAccount(\"mainMnqNatsAccount\");\n\n        var mainMnqNatsCredentials = new MnqNatsCredentials(\"mainMnqNatsCredentials\", MnqNatsCredentialsArgs.builder()        \n            .accountId(mainMnqNatsAccount.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainMnqNatsAccount:\n    type: scaleway:MnqNatsAccount\n  mainMnqNatsCredentials:\n    type: scaleway:MnqNatsCredentials\n    properties:\n      accountId: ${mainMnqNatsAccount.id}\n```\n\n\n## Import\n\nNamespaces can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/mnqNatsCredentials:MnqNatsCredentials main fr-par/11111111111111111111111111111111\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The ID of the nats account the credentials are generated from\n"
                },
                "file": {
                    "type": "string",
                    "description": "The content of the credentials file.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the nats credentials.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which the account exists.\n"
                }
            },
            "required": [
                "accountId",
                "file",
                "name",
                "region"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "The ID of the nats account the credentials are generated from\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the nats credentials.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which the account exists.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MnqNatsCredentials resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The ID of the nats account the credentials are generated from\n"
                    },
                    "file": {
                        "type": "string",
                        "description": "The content of the credentials file.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the nats credentials.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region\nin which the account exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/mnqQueue:MnqQueue": {
            "properties": {
                "messageMaxAge": {
                    "type": "integer",
                    "description": "The number of seconds the queue retains a message.\n"
                },
                "messageMaxSize": {
                    "type": "integer",
                    "description": "The maximum size of a message. Should be in bytes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the queue. Conflicts with name_prefix.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Creates a unique name beginning with the specified prefix. Conflicts with name.\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The ID of the Namespace associated to\n"
                },
                "nats": {
                    "$ref": "#/types/scaleway:index/MnqQueueNats:MnqQueueNats",
                    "description": "The NATS attributes of the queue\n"
                },
                "sqs": {
                    "$ref": "#/types/scaleway:index/MnqQueueSqs:MnqQueueSqs",
                    "description": "The SQS attributes of the queue\n"
                }
            },
            "required": [
                "name",
                "namePrefix",
                "namespaceId"
            ],
            "inputProperties": {
                "messageMaxAge": {
                    "type": "integer",
                    "description": "The number of seconds the queue retains a message.\n"
                },
                "messageMaxSize": {
                    "type": "integer",
                    "description": "The maximum size of a message. Should be in bytes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the queue. Conflicts with name_prefix.\n",
                    "willReplaceOnChanges": true
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Creates a unique name beginning with the specified prefix. Conflicts with name.\n",
                    "willReplaceOnChanges": true
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The ID of the Namespace associated to\n"
                },
                "nats": {
                    "$ref": "#/types/scaleway:index/MnqQueueNats:MnqQueueNats",
                    "description": "The NATS attributes of the queue\n"
                },
                "sqs": {
                    "$ref": "#/types/scaleway:index/MnqQueueSqs:MnqQueueSqs",
                    "description": "The SQS attributes of the queue\n"
                }
            },
            "requiredInputs": [
                "namespaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MnqQueue resources.\n",
                "properties": {
                    "messageMaxAge": {
                        "type": "integer",
                        "description": "The number of seconds the queue retains a message.\n"
                    },
                    "messageMaxSize": {
                        "type": "integer",
                        "description": "The maximum size of a message. Should be in bytes.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the queue. Conflicts with name_prefix.\n",
                        "willReplaceOnChanges": true
                    },
                    "namePrefix": {
                        "type": "string",
                        "description": "Creates a unique name beginning with the specified prefix. Conflicts with name.\n",
                        "willReplaceOnChanges": true
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The ID of the Namespace associated to\n"
                    },
                    "nats": {
                        "$ref": "#/types/scaleway:index/MnqQueueNats:MnqQueueNats",
                        "description": "The NATS attributes of the queue\n"
                    },
                    "sqs": {
                        "$ref": "#/types/scaleway:index/MnqQueueSqs:MnqQueueSqs",
                        "description": "The SQS attributes of the queue\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/mnqSqs:MnqSqs": {
            "description": "Activate Scaleway Messaging and queuing SQS for a project.\nFor further information please check\nour [documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/sqs-overview/)\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\n// For default project in default region\nconst main = new scaleway.MnqSqs(\"main\", {});\n// For specific project in default region\nconst forProject = new scaleway.MnqSqs(\"forProject\", {projectId: scaleway_account_project.main.id});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\n# For default project in default region\nmain = scaleway.MnqSqs(\"main\")\n# For specific project in default region\nfor_project = scaleway.MnqSqs(\"forProject\", project_id=scaleway_account_project[\"main\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // For default project in default region\n    var main = new Scaleway.MnqSqs(\"main\");\n\n    // For specific project in default region\n    var forProject = new Scaleway.MnqSqs(\"forProject\", new()\n    {\n        ProjectId = scaleway_account_project.Main.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewMnqSqs(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewMnqSqs(ctx, \"forProject\", \u0026scaleway.MnqSqsArgs{\n\t\t\tProjectId: pulumi.Any(scaleway_account_project.Main.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.MnqSqs;\nimport com.pulumi.scaleway.MnqSqsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new MnqSqs(\"main\");\n\n        var forProject = new MnqSqs(\"forProject\", MnqSqsArgs.builder()        \n            .projectId(scaleway_account_project.main().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # For default project in default region\n  main:\n    type: scaleway:MnqSqs\n  # For specific project in default region\n  forProject:\n    type: scaleway:MnqSqs\n    properties:\n      projectId: ${scaleway_account_project.main.id}\n```\n\n\n## Import\n\nSQS status can be imported using the `{region}/{project_id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/mnqSqs:MnqSqs main fr-par/11111111111111111111111111111111\n```\n\n ",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint of the SQS service for this project.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the sqs will be enabled for.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which sqs will be enabled.\n"
                }
            },
            "required": [
                "endpoint",
                "projectId",
                "region"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the sqs will be enabled for.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which sqs will be enabled.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MnqSqs resources.\n",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the SQS service for this project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the sqs will be enabled for.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region\nin which sqs will be enabled.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/mnqSqsCredentials:MnqSqsCredentials": {
            "description": "Creates and manages Scaleway Messaging and queuing SQS Credentials.\nFor further information please check\nour [documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/sqs-overview/)\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainMnqSqs = new scaleway.MnqSqs(\"mainMnqSqs\", {});\nconst mainMnqSqsCredentials = new scaleway.MnqSqsCredentials(\"mainMnqSqsCredentials\", {\n    projectId: mainMnqSqs.projectId,\n    permissions: {\n        canManage: false,\n        canReceive: true,\n        canPublish: false,\n    },\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain_mnq_sqs = scaleway.MnqSqs(\"mainMnqSqs\")\nmain_mnq_sqs_credentials = scaleway.MnqSqsCredentials(\"mainMnqSqsCredentials\",\n    project_id=main_mnq_sqs.project_id,\n    permissions=scaleway.MnqSqsCredentialsPermissionsArgs(\n        can_manage=False,\n        can_receive=True,\n        can_publish=False,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainMnqSqs = new Scaleway.MnqSqs(\"mainMnqSqs\");\n\n    var mainMnqSqsCredentials = new Scaleway.MnqSqsCredentials(\"mainMnqSqsCredentials\", new()\n    {\n        ProjectId = mainMnqSqs.ProjectId,\n        Permissions = new Scaleway.Inputs.MnqSqsCredentialsPermissionsArgs\n        {\n            CanManage = false,\n            CanReceive = true,\n            CanPublish = false,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainMnqSqs, err := scaleway.NewMnqSqs(ctx, \"mainMnqSqs\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewMnqSqsCredentials(ctx, \"mainMnqSqsCredentials\", \u0026scaleway.MnqSqsCredentialsArgs{\n\t\t\tProjectId: mainMnqSqs.ProjectId,\n\t\t\tPermissions: \u0026scaleway.MnqSqsCredentialsPermissionsArgs{\n\t\t\t\tCanManage:  pulumi.Bool(false),\n\t\t\t\tCanReceive: pulumi.Bool(true),\n\t\t\t\tCanPublish: pulumi.Bool(false),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.MnqSqs;\nimport com.pulumi.scaleway.MnqSqsCredentials;\nimport com.pulumi.scaleway.MnqSqsCredentialsArgs;\nimport com.pulumi.scaleway.inputs.MnqSqsCredentialsPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainMnqSqs = new MnqSqs(\"mainMnqSqs\");\n\n        var mainMnqSqsCredentials = new MnqSqsCredentials(\"mainMnqSqsCredentials\", MnqSqsCredentialsArgs.builder()        \n            .projectId(mainMnqSqs.projectId())\n            .permissions(MnqSqsCredentialsPermissionsArgs.builder()\n                .canManage(false)\n                .canReceive(true)\n                .canPublish(false)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainMnqSqs:\n    type: scaleway:MnqSqs\n  mainMnqSqsCredentials:\n    type: scaleway:MnqSqsCredentials\n    properties:\n      projectId: ${mainMnqSqs.projectId}\n      permissions:\n        canManage: false\n        canReceive: true\n        canPublish: false\n```\n\n\n## Import\n\nSQS credentials can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/mnqSqsCredentials:MnqSqsCredentials main fr-par/11111111111111111111111111111111\n```\n\n ",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The ID of the key.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the sqs credentials.\n"
                },
                "permissions": {
                    "$ref": "#/types/scaleway:index/MnqSqsCredentialsPermissions:MnqSqsCredentialsPermissions",
                    "description": ". List of permissions associated to these credentials. Only one of permissions may be set.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the sqs is enabled for.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which sqs is enabled.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret value of the key.\n",
                    "secret": true
                }
            },
            "required": [
                "accessKey",
                "name",
                "permissions",
                "projectId",
                "region",
                "secretKey"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the sqs credentials.\n"
                },
                "permissions": {
                    "$ref": "#/types/scaleway:index/MnqSqsCredentialsPermissions:MnqSqsCredentialsPermissions",
                    "description": ". List of permissions associated to these credentials. Only one of permissions may be set.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the sqs is enabled for.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which sqs is enabled.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MnqSqsCredentials resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The ID of the key.\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the sqs credentials.\n"
                    },
                    "permissions": {
                        "$ref": "#/types/scaleway:index/MnqSqsCredentialsPermissions:MnqSqsCredentialsPermissions",
                        "description": ". List of permissions associated to these credentials. Only one of permissions may be set.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the sqs is enabled for.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which sqs is enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The secret value of the key.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/mnqSqsQueue:MnqSqsQueue": {
            "description": "Creates and manages Scaleway Messaging and queuing SQS Queues.\nFor further information please check\nour [documentation](https://www.scaleway.com/en/docs/serverless/messaging/how-to/create-manage-queues/)\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainMnqSqs = new scaleway.MnqSqs(\"mainMnqSqs\", {});\nconst mainMnqSqsCredentials = new scaleway.MnqSqsCredentials(\"mainMnqSqsCredentials\", {\n    projectId: mainMnqSqs.projectId,\n    permissions: {\n        canManage: false,\n        canReceive: true,\n        canPublish: false,\n    },\n});\nconst mainMnqSqsQueue = new scaleway.MnqSqsQueue(\"mainMnqSqsQueue\", {\n    projectId: mainMnqSqs.projectId,\n    endpoint: mainMnqSqs.endpoint,\n    accessKey: mainMnqSqsCredentials.accessKey,\n    secretKey: mainMnqSqsCredentials.secretKey,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain_mnq_sqs = scaleway.MnqSqs(\"mainMnqSqs\")\nmain_mnq_sqs_credentials = scaleway.MnqSqsCredentials(\"mainMnqSqsCredentials\",\n    project_id=main_mnq_sqs.project_id,\n    permissions=scaleway.MnqSqsCredentialsPermissionsArgs(\n        can_manage=False,\n        can_receive=True,\n        can_publish=False,\n    ))\nmain_mnq_sqs_queue = scaleway.MnqSqsQueue(\"mainMnqSqsQueue\",\n    project_id=main_mnq_sqs.project_id,\n    endpoint=main_mnq_sqs.endpoint,\n    access_key=main_mnq_sqs_credentials.access_key,\n    secret_key=main_mnq_sqs_credentials.secret_key)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainMnqSqs = new Scaleway.MnqSqs(\"mainMnqSqs\");\n\n    var mainMnqSqsCredentials = new Scaleway.MnqSqsCredentials(\"mainMnqSqsCredentials\", new()\n    {\n        ProjectId = mainMnqSqs.ProjectId,\n        Permissions = new Scaleway.Inputs.MnqSqsCredentialsPermissionsArgs\n        {\n            CanManage = false,\n            CanReceive = true,\n            CanPublish = false,\n        },\n    });\n\n    var mainMnqSqsQueue = new Scaleway.MnqSqsQueue(\"mainMnqSqsQueue\", new()\n    {\n        ProjectId = mainMnqSqs.ProjectId,\n        Endpoint = mainMnqSqs.Endpoint,\n        AccessKey = mainMnqSqsCredentials.AccessKey,\n        SecretKey = mainMnqSqsCredentials.SecretKey,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainMnqSqs, err := scaleway.NewMnqSqs(ctx, \"mainMnqSqs\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainMnqSqsCredentials, err := scaleway.NewMnqSqsCredentials(ctx, \"mainMnqSqsCredentials\", \u0026scaleway.MnqSqsCredentialsArgs{\n\t\t\tProjectId: mainMnqSqs.ProjectId,\n\t\t\tPermissions: \u0026scaleway.MnqSqsCredentialsPermissionsArgs{\n\t\t\t\tCanManage:  pulumi.Bool(false),\n\t\t\t\tCanReceive: pulumi.Bool(true),\n\t\t\t\tCanPublish: pulumi.Bool(false),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewMnqSqsQueue(ctx, \"mainMnqSqsQueue\", \u0026scaleway.MnqSqsQueueArgs{\n\t\t\tProjectId: mainMnqSqs.ProjectId,\n\t\t\tEndpoint:  mainMnqSqs.Endpoint,\n\t\t\tAccessKey: mainMnqSqsCredentials.AccessKey,\n\t\t\tSecretKey: mainMnqSqsCredentials.SecretKey,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.MnqSqs;\nimport com.pulumi.scaleway.MnqSqsCredentials;\nimport com.pulumi.scaleway.MnqSqsCredentialsArgs;\nimport com.pulumi.scaleway.inputs.MnqSqsCredentialsPermissionsArgs;\nimport com.pulumi.scaleway.MnqSqsQueue;\nimport com.pulumi.scaleway.MnqSqsQueueArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainMnqSqs = new MnqSqs(\"mainMnqSqs\");\n\n        var mainMnqSqsCredentials = new MnqSqsCredentials(\"mainMnqSqsCredentials\", MnqSqsCredentialsArgs.builder()        \n            .projectId(mainMnqSqs.projectId())\n            .permissions(MnqSqsCredentialsPermissionsArgs.builder()\n                .canManage(false)\n                .canReceive(true)\n                .canPublish(false)\n                .build())\n            .build());\n\n        var mainMnqSqsQueue = new MnqSqsQueue(\"mainMnqSqsQueue\", MnqSqsQueueArgs.builder()        \n            .projectId(mainMnqSqs.projectId())\n            .endpoint(mainMnqSqs.endpoint())\n            .accessKey(mainMnqSqsCredentials.accessKey())\n            .secretKey(mainMnqSqsCredentials.secretKey())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainMnqSqs:\n    type: scaleway:MnqSqs\n  mainMnqSqsCredentials:\n    type: scaleway:MnqSqsCredentials\n    properties:\n      projectId: ${mainMnqSqs.projectId}\n      permissions:\n        canManage: false\n        canReceive: true\n        canPublish: false\n  mainMnqSqsQueue:\n    type: scaleway:MnqSqsQueue\n    properties:\n      projectId: ${mainMnqSqs.projectId}\n      endpoint: ${mainMnqSqs.endpoint}\n      accessKey: ${mainMnqSqsCredentials.accessKey}\n      secretKey: ${mainMnqSqsCredentials.secretKey}\n```\n\n\n## Import\n\nSQS queues can be imported using the `{region}/{project-id}/{queue-name}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/mnqSqsQueue:MnqSqsQueue main fr-par/11111111111111111111111111111111/my-queue\n```\n\n ",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key of the SQS queue.\n",
                    "secret": true
                },
                "contentBasedDeduplication": {
                    "type": "boolean",
                    "description": "Specifies whether to enable content-based deduplication. Defaults to `false`.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `http://sqs-sns.mnq.{region}.scw.cloud`.\n"
                },
                "fifoQueue": {
                    "type": "boolean",
                    "description": "Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.\n"
                },
                "messageMaxAge": {
                    "type": "integer",
                    "description": "The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.\n"
                },
                "messageMaxSize": {
                    "type": "integer",
                    "description": "The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the sqs queue. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the sqs is enabled for.\n"
                },
                "receiveWaitTimeSeconds": {
                    "type": "integer",
                    "description": "The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which sqs is enabled.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key of the SQS queue.\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the queue.\n"
                },
                "visibilityTimeoutSeconds": {
                    "type": "integer",
                    "description": "The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.\n"
                }
            },
            "required": [
                "accessKey",
                "contentBasedDeduplication",
                "fifoQueue",
                "name",
                "namePrefix",
                "projectId",
                "region",
                "secretKey",
                "url"
            ],
            "inputProperties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key of the SQS queue.\n",
                    "secret": true
                },
                "contentBasedDeduplication": {
                    "type": "boolean",
                    "description": "Specifies whether to enable content-based deduplication. Defaults to `false`.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `http://sqs-sns.mnq.{region}.scw.cloud`.\n"
                },
                "fifoQueue": {
                    "type": "boolean",
                    "description": "Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.\n"
                },
                "messageMaxAge": {
                    "type": "integer",
                    "description": "The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.\n"
                },
                "messageMaxSize": {
                    "type": "integer",
                    "description": "The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the sqs queue. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.\n",
                    "willReplaceOnChanges": true
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the sqs is enabled for.\n",
                    "willReplaceOnChanges": true
                },
                "receiveWaitTimeSeconds": {
                    "type": "integer",
                    "description": "The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which sqs is enabled.\n",
                    "willReplaceOnChanges": true
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key of the SQS queue.\n",
                    "secret": true
                },
                "visibilityTimeoutSeconds": {
                    "type": "integer",
                    "description": "The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.\n"
                }
            },
            "requiredInputs": [
                "accessKey",
                "secretKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MnqSqsQueue resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The access key of the SQS queue.\n",
                        "secret": true
                    },
                    "contentBasedDeduplication": {
                        "type": "boolean",
                        "description": "Specifies whether to enable content-based deduplication. Defaults to `false`.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `http://sqs-sns.mnq.{region}.scw.cloud`.\n"
                    },
                    "fifoQueue": {
                        "type": "boolean",
                        "description": "Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.\n"
                    },
                    "messageMaxAge": {
                        "type": "integer",
                        "description": "The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.\n"
                    },
                    "messageMaxSize": {
                        "type": "integer",
                        "description": "The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the sqs queue. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.\n",
                        "willReplaceOnChanges": true
                    },
                    "namePrefix": {
                        "type": "string",
                        "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the sqs is enabled for.\n",
                        "willReplaceOnChanges": true
                    },
                    "receiveWaitTimeSeconds": {
                        "type": "integer",
                        "description": "The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which sqs is enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The secret key of the SQS queue.\n",
                        "secret": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the queue.\n"
                    },
                    "visibilityTimeoutSeconds": {
                        "type": "integer",
                        "description": "The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectBucket:ObjectBucket": {
            "description": "Creates and manages Scaleway object storage buckets.\nFor more information, see [the documentation](https://www.scaleway.com/en/docs/object-storage-feature/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst someBucket = new scaleway.ObjectBucket(\"someBucket\", {tags: {\n    key: \"value\",\n}});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nsome_bucket = scaleway.ObjectBucket(\"someBucket\", tags={\n    \"key\": \"value\",\n})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var someBucket = new Scaleway.ObjectBucket(\"someBucket\", new()\n    {\n        Tags = \n        {\n            { \"key\", \"value\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewObjectBucket(ctx, \"someBucket\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"key\": pulumi.String(\"value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var someBucket = new ObjectBucket(\"someBucket\", ObjectBucketArgs.builder()        \n            .tags(Map.of(\"key\", \"value\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  someBucket:\n    type: scaleway:ObjectBucket\n    properties:\n      tags:\n        key: value\n```\n{{% /example %}}\n{{% example %}}\n### Creating the bucket in a specific project\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst someBucket = new scaleway.ObjectBucket(\"someBucket\", {projectId: \"11111111-1111-1111-1111-111111111111\"});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nsome_bucket = scaleway.ObjectBucket(\"someBucket\", project_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var someBucket = new Scaleway.ObjectBucket(\"someBucket\", new()\n    {\n        ProjectId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewObjectBucket(ctx, \"someBucket\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tProjectId: pulumi.String(\"11111111-1111-1111-1111-111111111111\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var someBucket = new ObjectBucket(\"someBucket\", ObjectBucketArgs.builder()        \n            .projectId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  someBucket:\n    type: scaleway:ObjectBucket\n    properties:\n      projectId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% example %}}\n### Using object lifecycle\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.ObjectBucket(\"main\", {\n    lifecycleRules: [\n        {\n            enabled: true,\n            expiration: {\n                days: 365,\n            },\n            id: \"id1\",\n            prefix: \"path1/\",\n            transitions: [{\n                days: 120,\n                storageClass: \"GLACIER\",\n            }],\n        },\n        {\n            enabled: true,\n            expiration: {\n                days: 50,\n            },\n            id: \"id2\",\n            prefix: \"path2/\",\n        },\n        {\n            enabled: false,\n            expiration: {\n                days: 1,\n            },\n            id: \"id3\",\n            prefix: \"path3/\",\n            tags: {\n                tagKey: \"tagValue\",\n                terraform: \"hashicorp\",\n            },\n        },\n        {\n            enabled: true,\n            id: \"id4\",\n            tags: {\n                tag1: \"value1\",\n            },\n            transitions: [{\n                days: 0,\n                storageClass: \"GLACIER\",\n            }],\n        },\n        {\n            abortIncompleteMultipartUploadDays: 30,\n            enabled: true,\n        },\n    ],\n    region: \"fr-par\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.ObjectBucket(\"main\",\n    lifecycle_rules=[\n        scaleway.ObjectBucketLifecycleRuleArgs(\n            enabled=True,\n            expiration=scaleway.ObjectBucketLifecycleRuleExpirationArgs(\n                days=365,\n            ),\n            id=\"id1\",\n            prefix=\"path1/\",\n            transitions=[scaleway.ObjectBucketLifecycleRuleTransitionArgs(\n                days=120,\n                storage_class=\"GLACIER\",\n            )],\n        ),\n        scaleway.ObjectBucketLifecycleRuleArgs(\n            enabled=True,\n            expiration=scaleway.ObjectBucketLifecycleRuleExpirationArgs(\n                days=50,\n            ),\n            id=\"id2\",\n            prefix=\"path2/\",\n        ),\n        scaleway.ObjectBucketLifecycleRuleArgs(\n            enabled=False,\n            expiration=scaleway.ObjectBucketLifecycleRuleExpirationArgs(\n                days=1,\n            ),\n            id=\"id3\",\n            prefix=\"path3/\",\n            tags={\n                \"tagKey\": \"tagValue\",\n                \"terraform\": \"hashicorp\",\n            },\n        ),\n        scaleway.ObjectBucketLifecycleRuleArgs(\n            enabled=True,\n            id=\"id4\",\n            tags={\n                \"tag1\": \"value1\",\n            },\n            transitions=[scaleway.ObjectBucketLifecycleRuleTransitionArgs(\n                days=0,\n                storage_class=\"GLACIER\",\n            )],\n        ),\n        scaleway.ObjectBucketLifecycleRuleArgs(\n            abort_incomplete_multipart_upload_days=30,\n            enabled=True,\n        ),\n    ],\n    region=\"fr-par\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ObjectBucket(\"main\", new()\n    {\n        LifecycleRules = new[]\n        {\n            new Scaleway.Inputs.ObjectBucketLifecycleRuleArgs\n            {\n                Enabled = true,\n                Expiration = new Scaleway.Inputs.ObjectBucketLifecycleRuleExpirationArgs\n                {\n                    Days = 365,\n                },\n                Id = \"id1\",\n                Prefix = \"path1/\",\n                Transitions = new[]\n                {\n                    new Scaleway.Inputs.ObjectBucketLifecycleRuleTransitionArgs\n                    {\n                        Days = 120,\n                        StorageClass = \"GLACIER\",\n                    },\n                },\n            },\n            new Scaleway.Inputs.ObjectBucketLifecycleRuleArgs\n            {\n                Enabled = true,\n                Expiration = new Scaleway.Inputs.ObjectBucketLifecycleRuleExpirationArgs\n                {\n                    Days = 50,\n                },\n                Id = \"id2\",\n                Prefix = \"path2/\",\n            },\n            new Scaleway.Inputs.ObjectBucketLifecycleRuleArgs\n            {\n                Enabled = false,\n                Expiration = new Scaleway.Inputs.ObjectBucketLifecycleRuleExpirationArgs\n                {\n                    Days = 1,\n                },\n                Id = \"id3\",\n                Prefix = \"path3/\",\n                Tags = \n                {\n                    { \"tagKey\", \"tagValue\" },\n                    { \"terraform\", \"hashicorp\" },\n                },\n            },\n            new Scaleway.Inputs.ObjectBucketLifecycleRuleArgs\n            {\n                Enabled = true,\n                Id = \"id4\",\n                Tags = \n                {\n                    { \"tag1\", \"value1\" },\n                },\n                Transitions = new[]\n                {\n                    new Scaleway.Inputs.ObjectBucketLifecycleRuleTransitionArgs\n                    {\n                        Days = 0,\n                        StorageClass = \"GLACIER\",\n                    },\n                },\n            },\n            new Scaleway.Inputs.ObjectBucketLifecycleRuleArgs\n            {\n                AbortIncompleteMultipartUploadDays = 30,\n                Enabled = true,\n            },\n        },\n        Region = \"fr-par\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewObjectBucket(ctx, \"main\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tLifecycleRules: scaleway.ObjectBucketLifecycleRuleArray{\n\t\t\t\t\u0026scaleway.ObjectBucketLifecycleRuleArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tExpiration: \u0026scaleway.ObjectBucketLifecycleRuleExpirationArgs{\n\t\t\t\t\t\tDays: pulumi.Int(365),\n\t\t\t\t\t},\n\t\t\t\t\tId:     pulumi.String(\"id1\"),\n\t\t\t\t\tPrefix: pulumi.String(\"path1/\"),\n\t\t\t\t\tTransitions: scaleway.ObjectBucketLifecycleRuleTransitionArray{\n\t\t\t\t\t\t\u0026scaleway.ObjectBucketLifecycleRuleTransitionArgs{\n\t\t\t\t\t\t\tDays:         pulumi.Int(120),\n\t\t\t\t\t\t\tStorageClass: pulumi.String(\"GLACIER\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.ObjectBucketLifecycleRuleArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tExpiration: \u0026scaleway.ObjectBucketLifecycleRuleExpirationArgs{\n\t\t\t\t\t\tDays: pulumi.Int(50),\n\t\t\t\t\t},\n\t\t\t\t\tId:     pulumi.String(\"id2\"),\n\t\t\t\t\tPrefix: pulumi.String(\"path2/\"),\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.ObjectBucketLifecycleRuleArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(false),\n\t\t\t\t\tExpiration: \u0026scaleway.ObjectBucketLifecycleRuleExpirationArgs{\n\t\t\t\t\t\tDays: pulumi.Int(1),\n\t\t\t\t\t},\n\t\t\t\t\tId:     pulumi.String(\"id3\"),\n\t\t\t\t\tPrefix: pulumi.String(\"path3/\"),\n\t\t\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\t\t\"tagKey\":    pulumi.String(\"tagValue\"),\n\t\t\t\t\t\t\"terraform\": pulumi.String(\"hashicorp\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.ObjectBucketLifecycleRuleArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tId:      pulumi.String(\"id4\"),\n\t\t\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\t\t\"tag1\": pulumi.String(\"value1\"),\n\t\t\t\t\t},\n\t\t\t\t\tTransitions: scaleway.ObjectBucketLifecycleRuleTransitionArray{\n\t\t\t\t\t\t\u0026scaleway.ObjectBucketLifecycleRuleTransitionArgs{\n\t\t\t\t\t\t\tDays:         pulumi.Int(0),\n\t\t\t\t\t\t\tStorageClass: pulumi.String(\"GLACIER\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.ObjectBucketLifecycleRuleArgs{\n\t\t\t\t\tAbortIncompleteMultipartUploadDays: pulumi.Int(30),\n\t\t\t\t\tEnabled:                            pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRegion: pulumi.String(\"fr-par\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketLifecycleRuleArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketLifecycleRuleExpirationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ObjectBucket(\"main\", ObjectBucketArgs.builder()        \n            .lifecycleRules(            \n                ObjectBucketLifecycleRuleArgs.builder()\n                    .enabled(true)\n                    .expiration(ObjectBucketLifecycleRuleExpirationArgs.builder()\n                        .days(365)\n                        .build())\n                    .id(\"id1\")\n                    .prefix(\"path1/\")\n                    .transitions(ObjectBucketLifecycleRuleTransitionArgs.builder()\n                        .days(120)\n                        .storageClass(\"GLACIER\")\n                        .build())\n                    .build(),\n                ObjectBucketLifecycleRuleArgs.builder()\n                    .enabled(true)\n                    .expiration(ObjectBucketLifecycleRuleExpirationArgs.builder()\n                        .days(\"50\")\n                        .build())\n                    .id(\"id2\")\n                    .prefix(\"path2/\")\n                    .build(),\n                ObjectBucketLifecycleRuleArgs.builder()\n                    .enabled(false)\n                    .expiration(ObjectBucketLifecycleRuleExpirationArgs.builder()\n                        .days(\"1\")\n                        .build())\n                    .id(\"id3\")\n                    .prefix(\"path3/\")\n                    .tags(Map.ofEntries(\n                        Map.entry(\"tagKey\", \"tagValue\"),\n                        Map.entry(\"terraform\", \"hashicorp\")\n                    ))\n                    .build(),\n                ObjectBucketLifecycleRuleArgs.builder()\n                    .enabled(true)\n                    .id(\"id4\")\n                    .tags(Map.of(\"tag1\", \"value1\"))\n                    .transitions(ObjectBucketLifecycleRuleTransitionArgs.builder()\n                        .days(0)\n                        .storageClass(\"GLACIER\")\n                        .build())\n                    .build(),\n                ObjectBucketLifecycleRuleArgs.builder()\n                    .abortIncompleteMultipartUploadDays(30)\n                    .enabled(true)\n                    .build())\n            .region(\"fr-par\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ObjectBucket\n    properties:\n      lifecycleRules:\n        - enabled: true\n          expiration:\n            days: 365\n          id: id1\n          prefix: path1/\n          transitions:\n            - days: 120\n              storageClass: GLACIER\n        - enabled: true\n          expiration:\n            days: '50'\n          id: id2\n          prefix: path2/\n        - enabled: false\n          expiration:\n            days: '1'\n          id: id3\n          prefix: path3/\n          tags:\n            tagKey: tagValue\n            terraform: hashicorp\n        - enabled: true\n          id: id4\n          tags:\n            tag1: value1\n          transitions:\n            - days: 0\n              storageClass: GLACIER\n        - abortIncompleteMultipartUploadDays: 30\n          enabled: true\n      region: fr-par\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nBuckets can be imported using the `{region}/{bucketName}` identifier, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/objectBucket:ObjectBucket some_bucket fr-par/some-bucket\n```\n\n If you are importing a bucket from a specific project (that is not your default project), you can use the following syntaxbash\n\n```sh\n $ pulumi import scaleway:index/objectBucket:ObjectBucket some_bucket fr-par/some-bucket@11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "acl": {
                    "type": "string",
                    "description": "(Deprecated) The canned ACL you want to apply to the bucket.\n",
                    "deprecationMessage": "ACL attribute is deprecated. Please use the resource scaleway_object_bucket_acl instead."
                },
                "apiEndpoint": {
                    "type": "string",
                    "description": "API URL of the bucket\n"
                },
                "corsRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketCorsRule:ObjectBucketCorsRule"
                    },
                    "description": "A rule of [Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) (documented below).\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint URL of the bucket\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Enable deletion of objects in bucket before destroying, locked objects or under legal hold are also deleted and **not** recoverable\n"
                },
                "lifecycleRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketLifecycleRule:ObjectBucketLifecycleRule"
                    },
                    "description": "Lifecycle configuration is a set of rules that define actions that Scaleway Object Storage applies to a group of objects\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "objectLockEnabled": {
                    "type": "boolean",
                    "description": "Enable object lock\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the bucket is associated with.\n\nThe `acl` attribute is deprecated. See scaleway.ObjectBucketAcl resource documentation.\nPlease check the [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) documentation for supported values.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of tags (key / value) for the bucket.\n"
                },
                "versioning": {
                    "$ref": "#/types/scaleway:index/ObjectBucketVersioning:ObjectBucketVersioning",
                    "description": "A state of [versioning](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html) (documented below)\n"
                }
            },
            "required": [
                "apiEndpoint",
                "endpoint",
                "name",
                "projectId",
                "region",
                "versioning"
            ],
            "inputProperties": {
                "acl": {
                    "type": "string",
                    "description": "(Deprecated) The canned ACL you want to apply to the bucket.\n",
                    "deprecationMessage": "ACL attribute is deprecated. Please use the resource scaleway_object_bucket_acl instead."
                },
                "corsRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketCorsRule:ObjectBucketCorsRule"
                    },
                    "description": "A rule of [Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) (documented below).\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Enable deletion of objects in bucket before destroying, locked objects or under legal hold are also deleted and **not** recoverable\n"
                },
                "lifecycleRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketLifecycleRule:ObjectBucketLifecycleRule"
                    },
                    "description": "Lifecycle configuration is a set of rules that define actions that Scaleway Object Storage applies to a group of objects\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the bucket.\n",
                    "willReplaceOnChanges": true
                },
                "objectLockEnabled": {
                    "type": "boolean",
                    "description": "Enable object lock\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the bucket is associated with.\n\nThe `acl` attribute is deprecated. See scaleway.ObjectBucketAcl resource documentation.\nPlease check the [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) documentation for supported values.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of tags (key / value) for the bucket.\n"
                },
                "versioning": {
                    "$ref": "#/types/scaleway:index/ObjectBucketVersioning:ObjectBucketVersioning",
                    "description": "A state of [versioning](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html) (documented below)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectBucket resources.\n",
                "properties": {
                    "acl": {
                        "type": "string",
                        "description": "(Deprecated) The canned ACL you want to apply to the bucket.\n",
                        "deprecationMessage": "ACL attribute is deprecated. Please use the resource scaleway_object_bucket_acl instead."
                    },
                    "apiEndpoint": {
                        "type": "string",
                        "description": "API URL of the bucket\n"
                    },
                    "corsRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/ObjectBucketCorsRule:ObjectBucketCorsRule"
                        },
                        "description": "A rule of [Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) (documented below).\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint URL of the bucket\n"
                    },
                    "forceDestroy": {
                        "type": "boolean",
                        "description": "Enable deletion of objects in bucket before destroying, locked objects or under legal hold are also deleted and **not** recoverable\n"
                    },
                    "lifecycleRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/ObjectBucketLifecycleRule:ObjectBucketLifecycleRule"
                        },
                        "description": "Lifecycle configuration is a set of rules that define actions that Scaleway Object Storage applies to a group of objects\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "objectLockEnabled": {
                        "type": "boolean",
                        "description": "Enable object lock\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the bucket is associated with.\n\nThe `acl` attribute is deprecated. See scaleway.ObjectBucketAcl resource documentation.\nPlease check the [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) documentation for supported values.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A list of tags (key / value) for the bucket.\n"
                    },
                    "versioning": {
                        "$ref": "#/types/scaleway:index/ObjectBucketVersioning:ObjectBucketVersioning",
                        "description": "A state of [versioning](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html) (documented below)\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectBucketAcl:ObjectBucketAcl": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst someBucket = new scaleway.ObjectBucket(\"someBucket\", {});\nconst main = new scaleway.ObjectBucketAcl(\"main\", {\n    bucket: scaleway_object_bucket.main.name,\n    acl: \"private\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nsome_bucket = scaleway.ObjectBucket(\"someBucket\")\nmain = scaleway.ObjectBucketAcl(\"main\",\n    bucket=scaleway_object_bucket[\"main\"][\"name\"],\n    acl=\"private\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var someBucket = new Scaleway.ObjectBucket(\"someBucket\");\n\n    var main = new Scaleway.ObjectBucketAcl(\"main\", new()\n    {\n        Bucket = scaleway_object_bucket.Main.Name,\n        Acl = \"private\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewObjectBucket(ctx, \"someBucket\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewObjectBucketAcl(ctx, \"main\", \u0026scaleway.ObjectBucketAclArgs{\n\t\t\tBucket: pulumi.Any(scaleway_object_bucket.Main.Name),\n\t\t\tAcl:    pulumi.String(\"private\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketAcl;\nimport com.pulumi.scaleway.ObjectBucketAclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var someBucket = new ObjectBucket(\"someBucket\");\n\n        var main = new ObjectBucketAcl(\"main\", ObjectBucketAclArgs.builder()        \n            .bucket(scaleway_object_bucket.main().name())\n            .acl(\"private\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  someBucket:\n    type: scaleway:ObjectBucket\n  main:\n    type: scaleway:ObjectBucketAcl\n    properties:\n      bucket: ${scaleway_object_bucket.main.name}\n      acl: private\n```\n{{% /example %}}\n{{% /examples %}}\n## Example with Grants\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainObjectBucket = new scaleway.ObjectBucket(\"mainObjectBucket\", {});\nconst mainObjectBucketAcl = new scaleway.ObjectBucketAcl(\"mainObjectBucketAcl\", {\n    bucket: mainObjectBucket.name,\n    accessControlPolicy: {\n        grants: [\n            {\n                grantee: {\n                    id: \"\u003cproject-id\u003e:\u003cproject-id\u003e\",\n                    type: \"CanonicalUser\",\n                },\n                permission: \"FULL_CONTROL\",\n            },\n            {\n                grantee: {\n                    id: \"\u003cproject-id\u003e\",\n                    type: \"CanonicalUser\",\n                },\n                permission: \"WRITE\",\n            },\n        ],\n        owner: {\n            id: \"\u003cproject-id\u003e\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain_object_bucket = scaleway.ObjectBucket(\"mainObjectBucket\")\nmain_object_bucket_acl = scaleway.ObjectBucketAcl(\"mainObjectBucketAcl\",\n    bucket=main_object_bucket.name,\n    access_control_policy=scaleway.ObjectBucketAclAccessControlPolicyArgs(\n        grants=[\n            scaleway.ObjectBucketAclAccessControlPolicyGrantArgs(\n                grantee=scaleway.ObjectBucketAclAccessControlPolicyGrantGranteeArgs(\n                    id=\"\u003cproject-id\u003e:\u003cproject-id\u003e\",\n                    type=\"CanonicalUser\",\n                ),\n                permission=\"FULL_CONTROL\",\n            ),\n            scaleway.ObjectBucketAclAccessControlPolicyGrantArgs(\n                grantee=scaleway.ObjectBucketAclAccessControlPolicyGrantGranteeArgs(\n                    id=\"\u003cproject-id\u003e\",\n                    type=\"CanonicalUser\",\n                ),\n                permission=\"WRITE\",\n            ),\n        ],\n        owner=scaleway.ObjectBucketAclAccessControlPolicyOwnerArgs(\n            id=\"\u003cproject-id\u003e\",\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainObjectBucket = new Scaleway.ObjectBucket(\"mainObjectBucket\");\n\n    var mainObjectBucketAcl = new Scaleway.ObjectBucketAcl(\"mainObjectBucketAcl\", new()\n    {\n        Bucket = mainObjectBucket.Name,\n        AccessControlPolicy = new Scaleway.Inputs.ObjectBucketAclAccessControlPolicyArgs\n        {\n            Grants = new[]\n            {\n                new Scaleway.Inputs.ObjectBucketAclAccessControlPolicyGrantArgs\n                {\n                    Grantee = new Scaleway.Inputs.ObjectBucketAclAccessControlPolicyGrantGranteeArgs\n                    {\n                        Id = \"\u003cproject-id\u003e:\u003cproject-id\u003e\",\n                        Type = \"CanonicalUser\",\n                    },\n                    Permission = \"FULL_CONTROL\",\n                },\n                new Scaleway.Inputs.ObjectBucketAclAccessControlPolicyGrantArgs\n                {\n                    Grantee = new Scaleway.Inputs.ObjectBucketAclAccessControlPolicyGrantGranteeArgs\n                    {\n                        Id = \"\u003cproject-id\u003e\",\n                        Type = \"CanonicalUser\",\n                    },\n                    Permission = \"WRITE\",\n                },\n            },\n            Owner = new Scaleway.Inputs.ObjectBucketAclAccessControlPolicyOwnerArgs\n            {\n                Id = \"\u003cproject-id\u003e\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainObjectBucket, err := scaleway.NewObjectBucket(ctx, \"mainObjectBucket\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewObjectBucketAcl(ctx, \"mainObjectBucketAcl\", \u0026scaleway.ObjectBucketAclArgs{\n\t\t\tBucket: mainObjectBucket.Name,\n\t\t\tAccessControlPolicy: \u0026scaleway.ObjectBucketAclAccessControlPolicyArgs{\n\t\t\t\tGrants: scaleway.ObjectBucketAclAccessControlPolicyGrantArray{\n\t\t\t\t\t\u0026scaleway.ObjectBucketAclAccessControlPolicyGrantArgs{\n\t\t\t\t\t\tGrantee: \u0026scaleway.ObjectBucketAclAccessControlPolicyGrantGranteeArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(\"\u003cproject-id\u003e:\u003cproject-id\u003e\"),\n\t\t\t\t\t\t\tType: pulumi.String(\"CanonicalUser\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tPermission: pulumi.String(\"FULL_CONTROL\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026scaleway.ObjectBucketAclAccessControlPolicyGrantArgs{\n\t\t\t\t\t\tGrantee: \u0026scaleway.ObjectBucketAclAccessControlPolicyGrantGranteeArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(\"\u003cproject-id\u003e\"),\n\t\t\t\t\t\t\tType: pulumi.String(\"CanonicalUser\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tPermission: pulumi.String(\"WRITE\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tOwner: \u0026scaleway.ObjectBucketAclAccessControlPolicyOwnerArgs{\n\t\t\t\t\tId: pulumi.String(\"\u003cproject-id\u003e\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketAcl;\nimport com.pulumi.scaleway.ObjectBucketAclArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketAclAccessControlPolicyArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketAclAccessControlPolicyOwnerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainObjectBucket = new ObjectBucket(\"mainObjectBucket\");\n\n        var mainObjectBucketAcl = new ObjectBucketAcl(\"mainObjectBucketAcl\", ObjectBucketAclArgs.builder()        \n            .bucket(mainObjectBucket.name())\n            .accessControlPolicy(ObjectBucketAclAccessControlPolicyArgs.builder()\n                .grants(                \n                    ObjectBucketAclAccessControlPolicyGrantArgs.builder()\n                        .grantee(ObjectBucketAclAccessControlPolicyGrantGranteeArgs.builder()\n                            .id(\"\u003cproject-id\u003e:\u003cproject-id\u003e\")\n                            .type(\"CanonicalUser\")\n                            .build())\n                        .permission(\"FULL_CONTROL\")\n                        .build(),\n                    ObjectBucketAclAccessControlPolicyGrantArgs.builder()\n                        .grantee(ObjectBucketAclAccessControlPolicyGrantGranteeArgs.builder()\n                            .id(\"\u003cproject-id\u003e\")\n                            .type(\"CanonicalUser\")\n                            .build())\n                        .permission(\"WRITE\")\n                        .build())\n                .owner(ObjectBucketAclAccessControlPolicyOwnerArgs.builder()\n                    .id(\"\u003cproject-id\u003e\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainObjectBucket:\n    type: scaleway:ObjectBucket\n  mainObjectBucketAcl:\n    type: scaleway:ObjectBucketAcl\n    properties:\n      bucket: ${mainObjectBucket.name}\n      accessControlPolicy:\n        grants:\n          - grantee:\n              id: \u003cproject-id\u003e:\u003cproject-id\u003e\n              type: CanonicalUser\n            permission: FULL_CONTROL\n          - grantee:\n              id: \u003cproject-id\u003e\n              type: CanonicalUser\n            permission: WRITE\n        owner:\n          id: \u003cproject-id\u003e\n```\n\n## The ACL\n\nPlease check the [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl)\n\n## The Access Control policy\n\nThe `access_control_policy` configuration block supports the following arguments:\n\n* `grant` - (Required) Set of grant configuration blocks documented below.\n* `owner` - (Required) Configuration block of the bucket owner's display name and ID documented below.\n\n## The Grant\n\nThe `grant` configuration block supports the following arguments:\n\n* `grantee` - (Required) Configuration block for the project being granted permissions documented below.\n* `permission` - (Required) Logging permissions assigned to the grantee for the bucket.\n\n## The permission\n\nThe following list shows each access policy permissions supported.\n\n`READ`, `WRITE`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`\n\nFor more information about ACL permissions in the S3 bucket, see [ACL permissions](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html).\n\n## The owner\n\nThe `owner` configuration block supports the following arguments:\n\n* `id` - (Required) The ID of the project owner.\n* `display_name` - (Optional) The display name of the owner.\n\n## the grantee\n\nThe `grantee` configuration block supports the following arguments:\n\n* `id` - (Required) The canonical user ID of the grantee.\n* `type` - (Required) Type of grantee. Valid values: CanonicalUser.\n\n\n## Import\n\nBuckets can be imported using the `{region}/{bucketName}/{acl}` identifier, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/objectBucketAcl:ObjectBucketAcl some_bucket fr-par/some-bucket\n```\n\n /private ",
            "properties": {
                "accessControlPolicy": {
                    "$ref": "#/types/scaleway:index/ObjectBucketAclAccessControlPolicy:ObjectBucketAclAccessControlPolicy",
                    "description": "A configuration block that sets the ACL permissions for an object per grantee documented below.\n"
                },
                "acl": {
                    "type": "string",
                    "description": "The canned ACL you want to apply to the bucket.\n"
                },
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "expectedBucketOwner": {
                    "type": "string",
                    "description": "The project ID of the expected bucket owner.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the bucket is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.\n"
                }
            },
            "required": [
                "accessControlPolicy",
                "bucket",
                "projectId",
                "region"
            ],
            "inputProperties": {
                "accessControlPolicy": {
                    "$ref": "#/types/scaleway:index/ObjectBucketAclAccessControlPolicy:ObjectBucketAclAccessControlPolicy",
                    "description": "A configuration block that sets the ACL permissions for an object per grantee documented below.\n"
                },
                "acl": {
                    "type": "string",
                    "description": "The canned ACL you want to apply to the bucket.\n"
                },
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket.\n",
                    "willReplaceOnChanges": true
                },
                "expectedBucketOwner": {
                    "type": "string",
                    "description": "The project ID of the expected bucket owner.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the bucket is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "bucket"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectBucketAcl resources.\n",
                "properties": {
                    "accessControlPolicy": {
                        "$ref": "#/types/scaleway:index/ObjectBucketAclAccessControlPolicy:ObjectBucketAclAccessControlPolicy",
                        "description": "A configuration block that sets the ACL permissions for an object per grantee documented below.\n"
                    },
                    "acl": {
                        "type": "string",
                        "description": "The canned ACL you want to apply to the bucket.\n"
                    },
                    "bucket": {
                        "type": "string",
                        "description": "The name of the bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "expectedBucketOwner": {
                        "type": "string",
                        "description": "The project ID of the expected bucket owner.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the bucket is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectBucketLockConfiguration:ObjectBucketLockConfiguration": {
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "The bucket name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "rule": {
                    "$ref": "#/types/scaleway:index/ObjectBucketLockConfigurationRule:ObjectBucketLockConfigurationRule",
                    "description": "Specifies the Object Lock rule for the specified object.\n"
                }
            },
            "required": [
                "bucket",
                "projectId",
                "region",
                "rule"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string",
                    "description": "The bucket name.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                },
                "rule": {
                    "$ref": "#/types/scaleway:index/ObjectBucketLockConfigurationRule:ObjectBucketLockConfigurationRule",
                    "description": "Specifies the Object Lock rule for the specified object.\n"
                }
            },
            "requiredInputs": [
                "bucket",
                "rule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectBucketLockConfiguration resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "description": "The bucket name.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project_id you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "rule": {
                        "$ref": "#/types/scaleway:index/ObjectBucketLockConfigurationRule:ObjectBucketLockConfigurationRule",
                        "description": "Specifies the Object Lock rule for the specified object.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectBucketPolicy:ObjectBucketPolicy": {
            "description": "Creates and manages Scaleway object storage bucket policy.\nFor more information, see [the documentation](https://www.scaleway.com/en/docs/storage/object/api-cli/bucket-policy/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst bucket = new scaleway.ObjectBucket(\"bucket\", {});\nconst main = new scaleway.IamApplication(\"main\", {description: \"a description\"});\nconst policy = new scaleway.ObjectBucketPolicy(\"policy\", {\n    bucket: bucket.name,\n    policy: pulumi.all([main.id, bucket.name, bucket.name]).apply(([id, bucketName, bucketName1]) =\u003e JSON.stringify({\n        Version: \"2023-04-17\",\n        Id: \"MyBucketPolicy\",\n        Statement: [{\n            Sid: \"Delegate access\",\n            Effect: \"Allow\",\n            Principal: {\n                SCW: `application_id:${id}`,\n            },\n            Action: \"s3:ListBucket\",\n            Resource: [\n                bucketName,\n                `${bucketName1}/*`,\n            ],\n        }],\n    })),\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport json\n\nbucket = scaleway.ObjectBucket(\"bucket\")\nmain = scaleway.IamApplication(\"main\", description=\"a description\")\npolicy = scaleway.ObjectBucketPolicy(\"policy\",\n    bucket=bucket.name,\n    policy=pulumi.Output.all(main.id, bucket.name, bucket.name).apply(lambda id, bucketName, bucketName1: json.dumps({\n        \"Version\": \"2023-04-17\",\n        \"Id\": \"MyBucketPolicy\",\n        \"Statement\": [{\n            \"Sid\": \"Delegate access\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"SCW\": f\"application_id:{id}\",\n            },\n            \"Action\": \"s3:ListBucket\",\n            \"Resource\": [\n                bucket_name,\n                f\"{bucket_name1}/*\",\n            ],\n        }],\n    })))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var bucket = new Scaleway.ObjectBucket(\"bucket\");\n\n    var main = new Scaleway.IamApplication(\"main\", new()\n    {\n        Description = \"a description\",\n    });\n\n    var policy = new Scaleway.ObjectBucketPolicy(\"policy\", new()\n    {\n        Bucket = bucket.Name,\n        Policy = Output.Tuple(main.Id, bucket.Name, bucket.Name).Apply(values =\u003e\n        {\n            var id = values.Item1;\n            var bucketName = values.Item2;\n            var bucketName1 = values.Item3;\n            return JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                [\"Version\"] = \"2023-04-17\",\n                [\"Id\"] = \"MyBucketPolicy\",\n                [\"Statement\"] = new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"Sid\"] = \"Delegate access\",\n                        [\"Effect\"] = \"Allow\",\n                        [\"Principal\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"SCW\"] = $\"application_id:{id}\",\n                        },\n                        [\"Action\"] = \"s3:ListBucket\",\n                        [\"Resource\"] = new[]\n                        {\n                            bucketName,\n                            $\"{bucketName1}/*\",\n                        },\n                    },\n                },\n            });\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbucket, err := scaleway.NewObjectBucket(ctx, \"bucket\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmain, err := scaleway.NewIamApplication(ctx, \"main\", \u0026scaleway.IamApplicationArgs{\n\t\t\tDescription: pulumi.String(\"a description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewObjectBucketPolicy(ctx, \"policy\", \u0026scaleway.ObjectBucketPolicyArgs{\n\t\t\tBucket: bucket.Name,\n\t\t\tPolicy: pulumi.All(main.ID(), bucket.Name, bucket.Name).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\tid := _args[0].(string)\n\t\t\t\tbucketName := _args[1].(string)\n\t\t\t\tbucketName1 := _args[2].(string)\n\t\t\t\tvar _zero string\n\t\t\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\t\t\"Version\": \"2023-04-17\",\n\t\t\t\t\t\"Id\":      \"MyBucketPolicy\",\n\t\t\t\t\t\"Statement\": []map[string]interface{}{\n\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\"Sid\":    \"Delegate access\",\n\t\t\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\t\t\"Principal\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\"SCW\": fmt.Sprintf(\"application_id:%v\", id),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Action\": \"s3:ListBucket\",\n\t\t\t\t\t\t\t\"Resource\": []string{\n\t\t\t\t\t\t\t\tbucketName,\n\t\t\t\t\t\t\t\tfmt.Sprintf(\"%v/*\", bucketName1),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn _zero, err\n\t\t\t\t}\n\t\t\t\tjson0 := string(tmpJSON0)\n\t\t\t\treturn json0, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.IamApplication;\nimport com.pulumi.scaleway.IamApplicationArgs;\nimport com.pulumi.scaleway.ObjectBucketPolicy;\nimport com.pulumi.scaleway.ObjectBucketPolicyArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var bucket = new ObjectBucket(\"bucket\");\n\n        var main = new IamApplication(\"main\", IamApplicationArgs.builder()        \n            .description(\"a description\")\n            .build());\n\n        var policy = new ObjectBucketPolicy(\"policy\", ObjectBucketPolicyArgs.builder()        \n            .bucket(bucket.name())\n            .policy(Output.tuple(main.id(), bucket.name(), bucket.name()).applyValue(values -\u003e {\n                var id = values.t1;\n                var bucketName = values.t2;\n                var bucketName1 = values.t3;\n                return serializeJson(\n                    jsonObject(\n                        jsonProperty(\"Version\", \"2023-04-17\"),\n                        jsonProperty(\"Id\", \"MyBucketPolicy\"),\n                        jsonProperty(\"Statement\", jsonArray(jsonObject(\n                            jsonProperty(\"Sid\", \"Delegate access\"),\n                            jsonProperty(\"Effect\", \"Allow\"),\n                            jsonProperty(\"Principal\", jsonObject(\n                                jsonProperty(\"SCW\", String.format(\"application_id:%s\", id))\n                            )),\n                            jsonProperty(\"Action\", \"s3:ListBucket\"),\n                            jsonProperty(\"Resource\", jsonArray(\n                                bucketName, \n                                String.format(\"%s/*\", bucketName1)\n                            ))\n                        )))\n                    ));\n            }))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  bucket:\n    type: scaleway:ObjectBucket\n  main:\n    type: scaleway:IamApplication\n    properties:\n      description: a description\n  policy:\n    type: scaleway:ObjectBucketPolicy\n    properties:\n      bucket: ${bucket.name}\n      policy:\n        fn::toJSON:\n          Version: 2023-04-17\n          Id: MyBucketPolicy\n          Statement:\n            - Sid: Delegate access\n              Effect: Allow\n              Principal:\n                SCW: application_id:${main.id}\n              Action: s3:ListBucket\n              Resource:\n                - ${bucket.name}\n                - ${bucket.name}/*\n```\n{{% /example %}}\n{{% /examples %}}\n## Example with aws provider\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.aws.iam.IamFunctions;\nimport com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;\nimport com.pulumi.scaleway.ObjectBucketPolicy;\nimport com.pulumi.scaleway.ObjectBucketPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var bucket = new ObjectBucket(\"bucket\");\n\n        final var policy = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()\n            .version(\"2023-04-17\")\n            .id(\"MyBucketPolicy\")\n            .statements(GetPolicyDocumentStatementArgs.builder()\n                .sid(\"Delegate access\")\n                .effect(\"Allow\")\n                .principals(GetPolicyDocumentStatementPrincipalArgs.builder()\n                    .type(\"SCW\")\n                    .identifiers(\"application_id:\u003cAPPLICATION_ID\u003e\")\n                    .build())\n                .actions(\"s3:ListBucket\")\n                .resources(                \n                    bucket.name(),\n                    bucket.name().applyValue(name -\u003e String.format(\"%s/*\", name)))\n                .build())\n            .build());\n\n        var main = new ObjectBucketPolicy(\"main\", ObjectBucketPolicyArgs.builder()        \n            .bucket(bucket.name())\n            .policy(policy.applyValue(getPolicyDocumentResult -\u003e getPolicyDocumentResult).applyValue(policy -\u003e policy.applyValue(getPolicyDocumentResult -\u003e getPolicyDocumentResult.json())))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  bucket:\n    type: scaleway:ObjectBucket\n  main:\n    type: scaleway:ObjectBucketPolicy\n    properties:\n      bucket: ${bucket.name}\n      policy: ${policy.json}\nvariables:\n  policy:\n    fn::invoke:\n      Function: aws:iam:getPolicyDocument\n      Arguments:\n        version: 2023-04-17\n        id: MyBucketPolicy\n        statements:\n          - sid: Delegate access\n            effect: Allow\n            principals:\n              - type: SCW\n                identifiers:\n                  - application_id:\u003cAPPLICATION_ID\u003e\n            actions:\n              - s3:ListBucket\n            resources:\n              - ${bucket.name}\n              - ${bucket.name}/*\n```\n\n\n## Import\n\nBuckets can be imported using the `{region}/{bucketName}` identifier, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/objectBucketPolicy:ObjectBucketPolicy some_bucket fr-par/some-bucket\n```\n\n ",
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "The text of the policy.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the bucket is associated with.\n\n\u003e **Important:** The aws_iam_policy_document data source may be used, so long as it specifies a principal.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region this bucket resides in.\n"
                }
            },
            "required": [
                "bucket",
                "policy",
                "projectId",
                "region"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "The text of the policy.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the bucket is associated with.\n\n\u003e **Important:** The aws_iam_policy_document data source may be used, so long as it specifies a principal.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region this bucket resides in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "bucket",
                "policy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectBucketPolicy resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "description": "The name of the bucket.\n"
                    },
                    "policy": {
                        "type": "string",
                        "description": "The text of the policy.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the bucket is associated with.\n\n\u003e **Important:** The aws_iam_policy_document data source may be used, so long as it specifies a principal.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The Scaleway region this bucket resides in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectBucketWebsiteConfiguration:ObjectBucketWebsiteConfiguration": {
            "description": "Provides an Object bucket website configuration resource.\nFor more information, see [Hosting Websites on Object bucket](https://www.scaleway.com/en/docs/storage/object/how-to/use-bucket-website/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainObjectBucket = new scaleway.ObjectBucket(\"mainObjectBucket\", {acl: \"public-read\"});\nconst mainObjectBucketWebsiteConfiguration = new scaleway.ObjectBucketWebsiteConfiguration(\"mainObjectBucketWebsiteConfiguration\", {\n    bucket: mainObjectBucket.name,\n    indexDocument: {\n        suffix: \"index.html\",\n    },\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain_object_bucket = scaleway.ObjectBucket(\"mainObjectBucket\", acl=\"public-read\")\nmain_object_bucket_website_configuration = scaleway.ObjectBucketWebsiteConfiguration(\"mainObjectBucketWebsiteConfiguration\",\n    bucket=main_object_bucket.name,\n    index_document=scaleway.ObjectBucketWebsiteConfigurationIndexDocumentArgs(\n        suffix=\"index.html\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainObjectBucket = new Scaleway.ObjectBucket(\"mainObjectBucket\", new()\n    {\n        Acl = \"public-read\",\n    });\n\n    var mainObjectBucketWebsiteConfiguration = new Scaleway.ObjectBucketWebsiteConfiguration(\"mainObjectBucketWebsiteConfiguration\", new()\n    {\n        Bucket = mainObjectBucket.Name,\n        IndexDocument = new Scaleway.Inputs.ObjectBucketWebsiteConfigurationIndexDocumentArgs\n        {\n            Suffix = \"index.html\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainObjectBucket, err := scaleway.NewObjectBucket(ctx, \"mainObjectBucket\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tAcl: pulumi.String(\"public-read\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewObjectBucketWebsiteConfiguration(ctx, \"mainObjectBucketWebsiteConfiguration\", \u0026scaleway.ObjectBucketWebsiteConfigurationArgs{\n\t\t\tBucket: mainObjectBucket.Name,\n\t\t\tIndexDocument: \u0026scaleway.ObjectBucketWebsiteConfigurationIndexDocumentArgs{\n\t\t\t\tSuffix: pulumi.String(\"index.html\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.ObjectBucketWebsiteConfiguration;\nimport com.pulumi.scaleway.ObjectBucketWebsiteConfigurationArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketWebsiteConfigurationIndexDocumentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainObjectBucket = new ObjectBucket(\"mainObjectBucket\", ObjectBucketArgs.builder()        \n            .acl(\"public-read\")\n            .build());\n\n        var mainObjectBucketWebsiteConfiguration = new ObjectBucketWebsiteConfiguration(\"mainObjectBucketWebsiteConfiguration\", ObjectBucketWebsiteConfigurationArgs.builder()        \n            .bucket(mainObjectBucket.name())\n            .indexDocument(ObjectBucketWebsiteConfigurationIndexDocumentArgs.builder()\n                .suffix(\"index.html\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainObjectBucket:\n    type: scaleway:ObjectBucket\n    properties:\n      acl: public-read\n  mainObjectBucketWebsiteConfiguration:\n    type: scaleway:ObjectBucketWebsiteConfiguration\n    properties:\n      bucket: ${mainObjectBucket.name}\n      indexDocument:\n        suffix: index.html\n```\n{{% /example %}}\n{{% /examples %}}\n## Example with `policy`\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainObjectBucket = new scaleway.ObjectBucket(\"mainObjectBucket\", {acl: \"public-read\"});\nconst mainObjectBucketPolicy = new scaleway.ObjectBucketPolicy(\"mainObjectBucketPolicy\", {\n    bucket: mainObjectBucket.name,\n    policy: JSON.stringify({\n        Version: \"2012-10-17\",\n        Id: \"MyPolicy\",\n        Statement: [{\n            Sid: \"GrantToEveryone\",\n            Effect: \"Allow\",\n            Principal: \"*\",\n            Action: [\"s3:GetObject\"],\n            Resource: [\"\u003cbucket-name\u003e/*\"],\n        }],\n    }),\n});\nconst mainObjectBucketWebsiteConfiguration = new scaleway.ObjectBucketWebsiteConfiguration(\"mainObjectBucketWebsiteConfiguration\", {\n    bucket: mainObjectBucket.name,\n    indexDocument: {\n        suffix: \"index.html\",\n    },\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport json\n\nmain_object_bucket = scaleway.ObjectBucket(\"mainObjectBucket\", acl=\"public-read\")\nmain_object_bucket_policy = scaleway.ObjectBucketPolicy(\"mainObjectBucketPolicy\",\n    bucket=main_object_bucket.name,\n    policy=json.dumps({\n        \"Version\": \"2012-10-17\",\n        \"Id\": \"MyPolicy\",\n        \"Statement\": [{\n            \"Sid\": \"GrantToEveryone\",\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": [\"s3:GetObject\"],\n            \"Resource\": [\"\u003cbucket-name\u003e/*\"],\n        }],\n    }))\nmain_object_bucket_website_configuration = scaleway.ObjectBucketWebsiteConfiguration(\"mainObjectBucketWebsiteConfiguration\",\n    bucket=main_object_bucket.name,\n    index_document=scaleway.ObjectBucketWebsiteConfigurationIndexDocumentArgs(\n        suffix=\"index.html\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainObjectBucket = new Scaleway.ObjectBucket(\"mainObjectBucket\", new()\n    {\n        Acl = \"public-read\",\n    });\n\n    var mainObjectBucketPolicy = new Scaleway.ObjectBucketPolicy(\"mainObjectBucketPolicy\", new()\n    {\n        Bucket = mainObjectBucket.Name,\n        Policy = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"Version\"] = \"2012-10-17\",\n            [\"Id\"] = \"MyPolicy\",\n            [\"Statement\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"Sid\"] = \"GrantToEveryone\",\n                    [\"Effect\"] = \"Allow\",\n                    [\"Principal\"] = \"*\",\n                    [\"Action\"] = new[]\n                    {\n                        \"s3:GetObject\",\n                    },\n                    [\"Resource\"] = new[]\n                    {\n                        \"\u003cbucket-name\u003e/*\",\n                    },\n                },\n            },\n        }),\n    });\n\n    var mainObjectBucketWebsiteConfiguration = new Scaleway.ObjectBucketWebsiteConfiguration(\"mainObjectBucketWebsiteConfiguration\", new()\n    {\n        Bucket = mainObjectBucket.Name,\n        IndexDocument = new Scaleway.Inputs.ObjectBucketWebsiteConfigurationIndexDocumentArgs\n        {\n            Suffix = \"index.html\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainObjectBucket, err := scaleway.NewObjectBucket(ctx, \"mainObjectBucket\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tAcl: pulumi.String(\"public-read\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\"Id\":      \"MyPolicy\",\n\t\t\t\"Statement\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"Sid\":       \"GrantToEveryone\",\n\t\t\t\t\t\"Effect\":    \"Allow\",\n\t\t\t\t\t\"Principal\": \"*\",\n\t\t\t\t\t\"Action\": []string{\n\t\t\t\t\t\t\"s3:GetObject\",\n\t\t\t\t\t},\n\t\t\t\t\t\"Resource\": []string{\n\t\t\t\t\t\t\"\u003cbucket-name\u003e/*\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = scaleway.NewObjectBucketPolicy(ctx, \"mainObjectBucketPolicy\", \u0026scaleway.ObjectBucketPolicyArgs{\n\t\t\tBucket: mainObjectBucket.Name,\n\t\t\tPolicy: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewObjectBucketWebsiteConfiguration(ctx, \"mainObjectBucketWebsiteConfiguration\", \u0026scaleway.ObjectBucketWebsiteConfigurationArgs{\n\t\t\tBucket: mainObjectBucket.Name,\n\t\t\tIndexDocument: \u0026scaleway.ObjectBucketWebsiteConfigurationIndexDocumentArgs{\n\t\t\t\tSuffix: pulumi.String(\"index.html\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.ObjectBucketPolicy;\nimport com.pulumi.scaleway.ObjectBucketPolicyArgs;\nimport com.pulumi.scaleway.ObjectBucketWebsiteConfiguration;\nimport com.pulumi.scaleway.ObjectBucketWebsiteConfigurationArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketWebsiteConfigurationIndexDocumentArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainObjectBucket = new ObjectBucket(\"mainObjectBucket\", ObjectBucketArgs.builder()        \n            .acl(\"public-read\")\n            .build());\n\n        var mainObjectBucketPolicy = new ObjectBucketPolicy(\"mainObjectBucketPolicy\", ObjectBucketPolicyArgs.builder()        \n            .bucket(mainObjectBucket.name())\n            .policy(serializeJson(\n                jsonObject(\n                    jsonProperty(\"Version\", \"2012-10-17\"),\n                    jsonProperty(\"Id\", \"MyPolicy\"),\n                    jsonProperty(\"Statement\", jsonArray(jsonObject(\n                        jsonProperty(\"Sid\", \"GrantToEveryone\"),\n                        jsonProperty(\"Effect\", \"Allow\"),\n                        jsonProperty(\"Principal\", \"*\"),\n                        jsonProperty(\"Action\", jsonArray(\"s3:GetObject\")),\n                        jsonProperty(\"Resource\", jsonArray(\"\u003cbucket-name\u003e/*\"))\n                    )))\n                )))\n            .build());\n\n        var mainObjectBucketWebsiteConfiguration = new ObjectBucketWebsiteConfiguration(\"mainObjectBucketWebsiteConfiguration\", ObjectBucketWebsiteConfigurationArgs.builder()        \n            .bucket(mainObjectBucket.name())\n            .indexDocument(ObjectBucketWebsiteConfigurationIndexDocumentArgs.builder()\n                .suffix(\"index.html\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainObjectBucket:\n    type: scaleway:ObjectBucket\n    properties:\n      acl: public-read\n  mainObjectBucketPolicy:\n    type: scaleway:ObjectBucketPolicy\n    properties:\n      bucket: ${mainObjectBucket.name}\n      policy:\n        fn::toJSON:\n          Version: 2012-10-17\n          Id: MyPolicy\n          Statement:\n            - Sid: GrantToEveryone\n              Effect: Allow\n              Principal: '*'\n              Action:\n                - s3:GetObject\n              Resource:\n                - \u003cbucket-name\u003e/*\n  mainObjectBucketWebsiteConfiguration:\n    type: scaleway:ObjectBucketWebsiteConfiguration\n    properties:\n      bucket: ${mainObjectBucket.name}\n      indexDocument:\n        suffix: index.html\n```\n\n## index_document\n\nThe `index_document` configuration block supports the following arguments:\n\n* `suffix` - (Required) A suffix that is appended to a request that is for a directory on the website endpoint.\n\n\u003e **Important:** The suffix must not be empty and must not include a slash character. The routing is not supported.\n\nIn addition to all above arguments, the following attribute is exported:\n\n* `id` - The region and bucket separated by a slash (/)\n* `website_domain` - The domain of the website endpoint. This is used to create DNS alias [records](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/).\n* `website_endpoint` - The website endpoint.\n\n\u003e **Important:** Please check our concepts section to know more about the [endpoint](https://www.scaleway.com/en/docs/storage/object/concepts/#endpoint).\n\n## error_document\n\nThe error_document configuration block supports the following arguments:\n\n* `key` - (Required) The object key name to use when a 4XX class error occurs.\n\n\n## Import\n\nWebsite configuration Bucket can be imported using the `{region}/{bucketName}` identifier, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/objectBucketWebsiteConfiguration:ObjectBucketWebsiteConfiguration some_bucket fr-par/some-bucket\n```\n\n ",
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "(Required, Forces new resource) The name of the bucket.\n"
                },
                "errorDocument": {
                    "$ref": "#/types/scaleway:index/ObjectBucketWebsiteConfigurationErrorDocument:ObjectBucketWebsiteConfigurationErrorDocument",
                    "description": "(Optional) The name of the error document for the website detailed below.\n"
                },
                "indexDocument": {
                    "$ref": "#/types/scaleway:index/ObjectBucketWebsiteConfigurationIndexDocument:ObjectBucketWebsiteConfigurationIndexDocument",
                    "description": "(Required) The name of the index document for the website detailed below.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "(Defaults to provider `project_id`) The ID of the project the bucket is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "websiteDomain": {
                    "type": "string",
                    "description": "The website endpoint.\n"
                },
                "websiteEndpoint": {
                    "type": "string",
                    "description": "The domain of the website endpoint.\n"
                }
            },
            "required": [
                "bucket",
                "indexDocument",
                "projectId",
                "region",
                "websiteDomain",
                "websiteEndpoint"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string",
                    "description": "(Required, Forces new resource) The name of the bucket.\n",
                    "willReplaceOnChanges": true
                },
                "errorDocument": {
                    "$ref": "#/types/scaleway:index/ObjectBucketWebsiteConfigurationErrorDocument:ObjectBucketWebsiteConfigurationErrorDocument",
                    "description": "(Optional) The name of the error document for the website detailed below.\n"
                },
                "indexDocument": {
                    "$ref": "#/types/scaleway:index/ObjectBucketWebsiteConfigurationIndexDocument:ObjectBucketWebsiteConfigurationIndexDocument",
                    "description": "(Required) The name of the index document for the website detailed below.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "(Defaults to provider `project_id`) The ID of the project the bucket is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "bucket",
                "indexDocument"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectBucketWebsiteConfiguration resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "description": "(Required, Forces new resource) The name of the bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "errorDocument": {
                        "$ref": "#/types/scaleway:index/ObjectBucketWebsiteConfigurationErrorDocument:ObjectBucketWebsiteConfigurationErrorDocument",
                        "description": "(Optional) The name of the error document for the website detailed below.\n"
                    },
                    "indexDocument": {
                        "$ref": "#/types/scaleway:index/ObjectBucketWebsiteConfigurationIndexDocument:ObjectBucketWebsiteConfigurationIndexDocument",
                        "description": "(Required) The name of the index document for the website detailed below.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "(Defaults to provider `project_id`) The ID of the project the bucket is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "websiteDomain": {
                        "type": "string",
                        "description": "The website endpoint.\n"
                    },
                    "websiteEndpoint": {
                        "type": "string",
                        "description": "The domain of the website endpoint.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectItem:ObjectItem": {
            "description": "Creates and manages Scaleway object storage objects.\nFor more information, see [the documentation](https://www.scaleway.com/en/docs/object-storage-feature/).\n\n\n## Import\n\nObjects can be imported using the `{region}/{bucketName}/{objectKey}` identifier, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/objectItem:ObjectItem some_object fr-par/some-bucket/some-file\n```\n\n ",
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "content": {
                    "type": "string",
                    "description": "The content of the file to upload. Only one of `file`, `content` or `content_base64` can be defined.\n"
                },
                "contentBase64": {
                    "type": "string",
                    "description": "The base64-encoded content of the file to upload. Only one of `file`, `content` or `content_base64` can be defined.\n"
                },
                "file": {
                    "type": "string",
                    "description": "The name of the file to upload, defaults to an empty file. Only one of `file`, `content` or `content_base64` can be defined.\n"
                },
                "hash": {
                    "type": "string",
                    "description": "Hash of the file, used to trigger upload on file change\n"
                },
                "key": {
                    "type": "string",
                    "description": "The path of the object.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of metadata used for the object, keys must be lowercase\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the bucket is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region this bucket resides in.\n"
                },
                "storageClass": {
                    "type": "string",
                    "description": "Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/storage/object/concepts/#storage-class) `STANDARD`, `GLACIER`, `ONEZONE_IA` used to store the object.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of tags\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Visibility of the object, `public-read` or `private`\n"
                }
            },
            "required": [
                "bucket",
                "key",
                "projectId",
                "region",
                "visibility"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "content": {
                    "type": "string",
                    "description": "The content of the file to upload. Only one of `file`, `content` or `content_base64` can be defined.\n"
                },
                "contentBase64": {
                    "type": "string",
                    "description": "The base64-encoded content of the file to upload. Only one of `file`, `content` or `content_base64` can be defined.\n"
                },
                "file": {
                    "type": "string",
                    "description": "The name of the file to upload, defaults to an empty file. Only one of `file`, `content` or `content_base64` can be defined.\n"
                },
                "hash": {
                    "type": "string",
                    "description": "Hash of the file, used to trigger upload on file change\n"
                },
                "key": {
                    "type": "string",
                    "description": "The path of the object.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of metadata used for the object, keys must be lowercase\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the bucket is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region this bucket resides in.\n",
                    "willReplaceOnChanges": true
                },
                "storageClass": {
                    "type": "string",
                    "description": "Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/storage/object/concepts/#storage-class) `STANDARD`, `GLACIER`, `ONEZONE_IA` used to store the object.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of tags\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Visibility of the object, `public-read` or `private`\n"
                }
            },
            "requiredInputs": [
                "bucket",
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectItem resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "description": "The name of the bucket.\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "The content of the file to upload. Only one of `file`, `content` or `content_base64` can be defined.\n"
                    },
                    "contentBase64": {
                        "type": "string",
                        "description": "The base64-encoded content of the file to upload. Only one of `file`, `content` or `content_base64` can be defined.\n"
                    },
                    "file": {
                        "type": "string",
                        "description": "The name of the file to upload, defaults to an empty file. Only one of `file`, `content` or `content_base64` can be defined.\n"
                    },
                    "hash": {
                        "type": "string",
                        "description": "Hash of the file, used to trigger upload on file change\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The path of the object.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of metadata used for the object, keys must be lowercase\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the bucket is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The Scaleway region this bucket resides in.\n",
                        "willReplaceOnChanges": true
                    },
                    "storageClass": {
                        "type": "string",
                        "description": "Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/storage/object/concepts/#storage-class) `STANDARD`, `GLACIER`, `ONEZONE_IA` used to store the object.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of tags\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Visibility of the object, `public-read` or `private`\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/rdbAcl:RdbAcl": {
            "description": "Creates and manages Scaleway Database instance authorized IPs.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api/#acl-rules-allowed-ips).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.RdbAcl(\"main\", {\n    instanceId: scaleway_rdb_instance.main.id,\n    aclRules: [{\n        ip: \"1.2.3.4/32\",\n        description: \"foo\",\n    }],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.RdbAcl(\"main\",\n    instance_id=scaleway_rdb_instance[\"main\"][\"id\"],\n    acl_rules=[scaleway.RdbAclAclRuleArgs(\n        ip=\"1.2.3.4/32\",\n        description=\"foo\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.RdbAcl(\"main\", new()\n    {\n        InstanceId = scaleway_rdb_instance.Main.Id,\n        AclRules = new[]\n        {\n            new Scaleway.Inputs.RdbAclAclRuleArgs\n            {\n                Ip = \"1.2.3.4/32\",\n                Description = \"foo\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewRdbAcl(ctx, \"main\", \u0026scaleway.RdbAclArgs{\n\t\t\tInstanceId: pulumi.Any(scaleway_rdb_instance.Main.Id),\n\t\t\tAclRules: scaleway.RdbAclAclRuleArray{\n\t\t\t\t\u0026scaleway.RdbAclAclRuleArgs{\n\t\t\t\t\tIp:          pulumi.String(\"1.2.3.4/32\"),\n\t\t\t\t\tDescription: pulumi.String(\"foo\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.RdbAcl;\nimport com.pulumi.scaleway.RdbAclArgs;\nimport com.pulumi.scaleway.inputs.RdbAclAclRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new RdbAcl(\"main\", RdbAclArgs.builder()        \n            .instanceId(scaleway_rdb_instance.main().id())\n            .aclRules(RdbAclAclRuleArgs.builder()\n                .ip(\"1.2.3.4/32\")\n                .description(\"foo\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:RdbAcl\n    properties:\n      instanceId: ${scaleway_rdb_instance.main.id}\n      aclRules:\n        - ip: 1.2.3.4/32\n          description: foo\n```\n\n\n## Import\n\nDatabase Instance can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/rdbAcl:RdbAcl acl01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "aclRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/RdbAclAclRule:RdbAclAclRule"
                    },
                    "description": "A list of ACLs (structure is described below)\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the rdb instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database ACL.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the Database Instance should be created.\n"
                }
            },
            "required": [
                "aclRules",
                "instanceId",
                "region"
            ],
            "inputProperties": {
                "aclRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/RdbAclAclRule:RdbAclAclRule"
                    },
                    "description": "A list of ACLs (structure is described below)\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the rdb instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database ACL.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the Database Instance should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "aclRules",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RdbAcl resources.\n",
                "properties": {
                    "aclRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/RdbAclAclRule:RdbAclAclRule"
                        },
                        "description": "A list of ACLs (structure is described below)\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the rdb instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database ACL.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the Database Instance should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/rdbDatabase:RdbDatabase": {
            "description": "Creates and manages Scaleway RDB database.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.RdbDatabase(\"main\", {instanceId: scaleway_rdb_instance.main.id});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.RdbDatabase(\"main\", instance_id=scaleway_rdb_instance[\"main\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.RdbDatabase(\"main\", new()\n    {\n        InstanceId = scaleway_rdb_instance.Main.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewRdbDatabase(ctx, \"main\", \u0026scaleway.RdbDatabaseArgs{\n\t\t\tInstanceId: pulumi.Any(scaleway_rdb_instance.Main.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.RdbDatabase;\nimport com.pulumi.scaleway.RdbDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new RdbDatabase(\"main\", RdbDatabaseArgs.builder()        \n            .instanceId(scaleway_rdb_instance.main().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:RdbDatabase\n    properties:\n      instanceId: ${scaleway_rdb_instance.main.id}\n```\n\n\n## Import\n\nRDB Database can be imported using the `{region}/{id}/{DBNAME}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/rdbDatabase:RdbDatabase rdb01_mydb fr-par/11111111-1111-1111-1111-111111111111/mydb\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the rdb instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Whether the database is managed or not.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-new-database`).\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The name of the owner of the database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n"
                },
                "size": {
                    "type": "string",
                    "description": "Size of the database (in bytes).\n"
                }
            },
            "required": [
                "instanceId",
                "managed",
                "name",
                "owner",
                "region",
                "size"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the rdb instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-new-database`).\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RdbDatabase resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the rdb instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database.\n",
                        "willReplaceOnChanges": true
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Whether the database is managed or not.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the database (e.g. `my-new-database`).\n",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "The name of the owner of the database.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the resource exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "string",
                        "description": "Size of the database (in bytes).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/rdbDatabaseBackup:RdbDatabaseBackup": {
            "description": "Creates and manages Scaleway RDB database backup.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.RdbDatabaseBackup(\"main\", {\n    instanceId: data.scaleway_rdb_instance.main.id,\n    databaseName: data.scaleway_rdb_database.main.name,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.RdbDatabaseBackup(\"main\",\n    instance_id=data[\"scaleway_rdb_instance\"][\"main\"][\"id\"],\n    database_name=data[\"scaleway_rdb_database\"][\"main\"][\"name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.RdbDatabaseBackup(\"main\", new()\n    {\n        InstanceId = data.Scaleway_rdb_instance.Main.Id,\n        DatabaseName = data.Scaleway_rdb_database.Main.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewRdbDatabaseBackup(ctx, \"main\", \u0026scaleway.RdbDatabaseBackupArgs{\n\t\t\tInstanceId:   pulumi.Any(data.Scaleway_rdb_instance.Main.Id),\n\t\t\tDatabaseName: pulumi.Any(data.Scaleway_rdb_database.Main.Name),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.RdbDatabaseBackup;\nimport com.pulumi.scaleway.RdbDatabaseBackupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new RdbDatabaseBackup(\"main\", RdbDatabaseBackupArgs.builder()        \n            .instanceId(data.scaleway_rdb_instance().main().id())\n            .databaseName(data.scaleway_rdb_database().main().name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:RdbDatabaseBackup\n    properties:\n      instanceId: ${data.scaleway_rdb_instance.main.id}\n      databaseName: ${data.scaleway_rdb_database.main.name}\n```\n\n### With expiration\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.RdbDatabaseBackup(\"main\", {\n    instanceId: data.scaleway_rdb_instance.main.id,\n    databaseName: data.scaleway_rdb_database.main.name,\n    expiresAt: \"2022-06-16T07:48:44Z\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.RdbDatabaseBackup(\"main\",\n    instance_id=data[\"scaleway_rdb_instance\"][\"main\"][\"id\"],\n    database_name=data[\"scaleway_rdb_database\"][\"main\"][\"name\"],\n    expires_at=\"2022-06-16T07:48:44Z\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.RdbDatabaseBackup(\"main\", new()\n    {\n        InstanceId = data.Scaleway_rdb_instance.Main.Id,\n        DatabaseName = data.Scaleway_rdb_database.Main.Name,\n        ExpiresAt = \"2022-06-16T07:48:44Z\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewRdbDatabaseBackup(ctx, \"main\", \u0026scaleway.RdbDatabaseBackupArgs{\n\t\t\tInstanceId:   pulumi.Any(data.Scaleway_rdb_instance.Main.Id),\n\t\t\tDatabaseName: pulumi.Any(data.Scaleway_rdb_database.Main.Name),\n\t\t\tExpiresAt:    pulumi.String(\"2022-06-16T07:48:44Z\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.RdbDatabaseBackup;\nimport com.pulumi.scaleway.RdbDatabaseBackupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new RdbDatabaseBackup(\"main\", RdbDatabaseBackupArgs.builder()        \n            .instanceId(data.scaleway_rdb_instance().main().id())\n            .databaseName(data.scaleway_rdb_database().main().name())\n            .expiresAt(\"2022-06-16T07:48:44Z\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:RdbDatabaseBackup\n    properties:\n      instanceId: ${data.scaleway_rdb_instance.main.id}\n      databaseName: ${data.scaleway_rdb_database.main.name}\n      expiresAt: 2022-06-16T07:48:44Z\n```\n\n\n## Import\n\nRDB Database can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/rdbDatabaseBackup:RdbDatabaseBackup mybackup fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation date (Format ISO 8601).\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database of this backup.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration date (Format ISO 8601).\n\n\u003e **Important:** `expires_at` cannot be removed after being set.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the rdb instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Backup.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "Name of the instance of the backup.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-database`).\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size of the backup (in bytes).\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Updated date (Format ISO 8601).\n"
                }
            },
            "required": [
                "createdAt",
                "databaseName",
                "instanceId",
                "instanceName",
                "name",
                "region",
                "size",
                "updatedAt"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database of this backup.\n",
                    "willReplaceOnChanges": true
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration date (Format ISO 8601).\n\n\u003e **Important:** `expires_at` cannot be removed after being set.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the rdb instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Backup.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-database`).\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RdbDatabaseBackup resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date (Format ISO 8601).\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "Name of the database of this backup.\n",
                        "willReplaceOnChanges": true
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "Expiration date (Format ISO 8601).\n\n\u003e **Important:** `expires_at` cannot be removed after being set.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the rdb instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Backup.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "Name of the instance of the backup.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the database (e.g. `my-database`).\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the resource exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size of the backup (in bytes).\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Updated date (Format ISO 8601).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/rdbInstance:RdbInstance": {
            "description": "\n\n\n## Import\n\nDatabase Instance can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/rdbInstance:RdbInstance rdb01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "backupSameRegion": {
                    "type": "boolean",
                    "description": "Boolean to store logical backups in the same region as the database instance.\n"
                },
                "backupScheduleFrequency": {
                    "type": "integer",
                    "description": "Backup schedule frequency in hours.\n"
                },
                "backupScheduleRetention": {
                    "type": "integer",
                    "description": "Backup schedule retention in days.\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "Certificate of the database instance.\n"
                },
                "disableBackup": {
                    "type": "boolean",
                    "description": "Disable automated backup for the database instance.\n"
                },
                "endpointIp": {
                    "type": "string",
                    "description": "(Deprecated) The IP of the Database Instance.\n",
                    "deprecationMessage": "Please use the private_network or the load_balancer attribute"
                },
                "endpointPort": {
                    "type": "integer",
                    "description": "(Deprecated) The port of the Database Instance.\n"
                },
                "engine": {
                    "type": "string",
                    "description": "Database Instance's engine version (e.g. `PostgreSQL-11`).\n\n\u003e **Important:** Updates to `engine` will recreate the Database Instance.\n"
                },
                "initSettings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of engine settings to be set at database initialisation.\n\n\u003e **Important:** Updates to `init_settings` will recreate the Database Instance.\n"
                },
                "isHaCluster": {
                    "type": "boolean",
                    "description": "Enable or disable high availability for the database instance.\n\n\u003e **Important:** Updates to `is_ha_cluster` will recreate the Database Instance.\n"
                },
                "loadBalancers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/RdbInstanceLoadBalancer:RdbInstanceLoadBalancer"
                    },
                    "description": "List of load balancer endpoints of the database instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of database instance you want to create (e.g. `db-dev-s`).\n\n\u003e **Important:** Updates to `node_type` will upgrade the Database Instance to the desired `node_type` without any\ninterruption. Keep in mind that you cannot downgrade a Database Instance.\n\n\u003e **Important:** Once your instance reaches `disk_full` status, if you are using `lssd` storage, you should upgrade the node_type,\nand if you are using `bssd` storage, you should increase the volume size before making any other change to your instance.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the Database Instance is associated with.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the database instance.\n",
                    "secret": true
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/RdbInstancePrivateNetwork:RdbInstancePrivateNetwork",
                    "description": "List of private networks endpoints of the database instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Database\nInstance is associated with.\n"
                },
                "readReplicas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/RdbInstanceReadReplica:RdbInstanceReadReplica"
                    },
                    "description": "List of read replicas of the database instance.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the Database Instance should be created.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of engine settings to be set. Using this option will override default config.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Database Instance.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the database instance.\n\n\u003e **Important:** Updates to `user_name` will recreate the Database Instance.\n"
                },
                "volumeSizeInGb": {
                    "type": "integer",
                    "description": "Volume size (in GB) when `volume_type` is set to `bssd`.\n\n\u003e **Important:** Once your instance reaches `disk_full` status, you should increase the volume size before making any other change to your instance.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Type of volume where data are stored (`bssd` or `lssd`).\n"
                }
            },
            "required": [
                "backupSameRegion",
                "backupScheduleFrequency",
                "backupScheduleRetention",
                "certificate",
                "endpointIp",
                "endpointPort",
                "engine",
                "loadBalancers",
                "name",
                "nodeType",
                "organizationId",
                "projectId",
                "readReplicas",
                "region",
                "settings",
                "volumeSizeInGb"
            ],
            "inputProperties": {
                "backupSameRegion": {
                    "type": "boolean",
                    "description": "Boolean to store logical backups in the same region as the database instance.\n"
                },
                "backupScheduleFrequency": {
                    "type": "integer",
                    "description": "Backup schedule frequency in hours.\n"
                },
                "backupScheduleRetention": {
                    "type": "integer",
                    "description": "Backup schedule retention in days.\n"
                },
                "disableBackup": {
                    "type": "boolean",
                    "description": "Disable automated backup for the database instance.\n"
                },
                "engine": {
                    "type": "string",
                    "description": "Database Instance's engine version (e.g. `PostgreSQL-11`).\n\n\u003e **Important:** Updates to `engine` will recreate the Database Instance.\n",
                    "willReplaceOnChanges": true
                },
                "initSettings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of engine settings to be set at database initialisation.\n\n\u003e **Important:** Updates to `init_settings` will recreate the Database Instance.\n",
                    "willReplaceOnChanges": true
                },
                "isHaCluster": {
                    "type": "boolean",
                    "description": "Enable or disable high availability for the database instance.\n\n\u003e **Important:** Updates to `is_ha_cluster` will recreate the Database Instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of database instance you want to create (e.g. `db-dev-s`).\n\n\u003e **Important:** Updates to `node_type` will upgrade the Database Instance to the desired `node_type` without any\ninterruption. Keep in mind that you cannot downgrade a Database Instance.\n\n\u003e **Important:** Once your instance reaches `disk_full` status, if you are using `lssd` storage, you should upgrade the node_type,\nand if you are using `bssd` storage, you should increase the volume size before making any other change to your instance.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the database instance.\n",
                    "secret": true
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/RdbInstancePrivateNetwork:RdbInstancePrivateNetwork",
                    "description": "List of private networks endpoints of the database instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Database\nInstance is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the Database Instance should be created.\n",
                    "willReplaceOnChanges": true
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of engine settings to be set. Using this option will override default config.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Database Instance.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the database instance.\n\n\u003e **Important:** Updates to `user_name` will recreate the Database Instance.\n",
                    "willReplaceOnChanges": true
                },
                "volumeSizeInGb": {
                    "type": "integer",
                    "description": "Volume size (in GB) when `volume_type` is set to `bssd`.\n\n\u003e **Important:** Once your instance reaches `disk_full` status, you should increase the volume size before making any other change to your instance.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Type of volume where data are stored (`bssd` or `lssd`).\n"
                }
            },
            "requiredInputs": [
                "engine",
                "nodeType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RdbInstance resources.\n",
                "properties": {
                    "backupSameRegion": {
                        "type": "boolean",
                        "description": "Boolean to store logical backups in the same region as the database instance.\n"
                    },
                    "backupScheduleFrequency": {
                        "type": "integer",
                        "description": "Backup schedule frequency in hours.\n"
                    },
                    "backupScheduleRetention": {
                        "type": "integer",
                        "description": "Backup schedule retention in days.\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "Certificate of the database instance.\n"
                    },
                    "disableBackup": {
                        "type": "boolean",
                        "description": "Disable automated backup for the database instance.\n"
                    },
                    "endpointIp": {
                        "type": "string",
                        "description": "(Deprecated) The IP of the Database Instance.\n",
                        "deprecationMessage": "Please use the private_network or the load_balancer attribute"
                    },
                    "endpointPort": {
                        "type": "integer",
                        "description": "(Deprecated) The port of the Database Instance.\n"
                    },
                    "engine": {
                        "type": "string",
                        "description": "Database Instance's engine version (e.g. `PostgreSQL-11`).\n\n\u003e **Important:** Updates to `engine` will recreate the Database Instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "initSettings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of engine settings to be set at database initialisation.\n\n\u003e **Important:** Updates to `init_settings` will recreate the Database Instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "isHaCluster": {
                        "type": "boolean",
                        "description": "Enable or disable high availability for the database instance.\n\n\u003e **Important:** Updates to `is_ha_cluster` will recreate the Database Instance.\n"
                    },
                    "loadBalancers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/RdbInstanceLoadBalancer:RdbInstanceLoadBalancer"
                        },
                        "description": "List of load balancer endpoints of the database instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Database Instance.\n"
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "The type of database instance you want to create (e.g. `db-dev-s`).\n\n\u003e **Important:** Updates to `node_type` will upgrade the Database Instance to the desired `node_type` without any\ninterruption. Keep in mind that you cannot downgrade a Database Instance.\n\n\u003e **Important:** Once your instance reaches `disk_full` status, if you are using `lssd` storage, you should upgrade the node_type,\nand if you are using `bssd` storage, you should increase the volume size before making any other change to your instance.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the Database Instance is associated with.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for the first user of the database instance.\n",
                        "secret": true
                    },
                    "privateNetwork": {
                        "$ref": "#/types/scaleway:index/RdbInstancePrivateNetwork:RdbInstancePrivateNetwork",
                        "description": "List of private networks endpoints of the database instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the Database\nInstance is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "readReplicas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/RdbInstanceReadReplica:RdbInstanceReadReplica"
                        },
                        "description": "List of read replicas of the database instance.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region\nin which the Database Instance should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "settings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of engine settings to be set. Using this option will override default config.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Database Instance.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Identifier for the first user of the database instance.\n\n\u003e **Important:** Updates to `user_name` will recreate the Database Instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "volumeSizeInGb": {
                        "type": "integer",
                        "description": "Volume size (in GB) when `volume_type` is set to `bssd`.\n\n\u003e **Important:** Once your instance reaches `disk_full` status, you should increase the volume size before making any other change to your instance.\n"
                    },
                    "volumeType": {
                        "type": "string",
                        "description": "Type of volume where data are stored (`bssd` or `lssd`).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/rdbPrivilege:RdbPrivilege": {
            "description": "Create and manage Scaleway RDB database privilege.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api/#user-and-permissions).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainRdbInstance = new scaleway.RdbInstance(\"mainRdbInstance\", {\n    nodeType: \"DB-DEV-S\",\n    engine: \"PostgreSQL-11\",\n    isHaCluster: true,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n});\nconst mainRdbDatabase = new scaleway.RdbDatabase(\"mainRdbDatabase\", {instanceId: mainRdbInstance.id});\nconst mainRdbUser = new scaleway.RdbUser(\"mainRdbUser\", {\n    instanceId: mainRdbInstance.id,\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    isAdmin: false,\n});\nconst mainRdbPrivilege = new scaleway.RdbPrivilege(\"mainRdbPrivilege\", {\n    instanceId: mainRdbInstance.id,\n    userName: \"my-db-user\",\n    databaseName: \"my-db-name\",\n    permission: \"all\",\n}, {\n    dependsOn: [\n        mainRdbUser,\n        mainRdbDatabase,\n    ],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain_rdb_instance = scaleway.RdbInstance(\"mainRdbInstance\",\n    node_type=\"DB-DEV-S\",\n    engine=\"PostgreSQL-11\",\n    is_ha_cluster=True,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\")\nmain_rdb_database = scaleway.RdbDatabase(\"mainRdbDatabase\", instance_id=main_rdb_instance.id)\nmain_rdb_user = scaleway.RdbUser(\"mainRdbUser\",\n    instance_id=main_rdb_instance.id,\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    is_admin=False)\nmain_rdb_privilege = scaleway.RdbPrivilege(\"mainRdbPrivilege\",\n    instance_id=main_rdb_instance.id,\n    user_name=\"my-db-user\",\n    database_name=\"my-db-name\",\n    permission=\"all\",\n    opts=pulumi.ResourceOptions(depends_on=[\n            main_rdb_user,\n            main_rdb_database,\n        ]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainRdbInstance = new Scaleway.RdbInstance(\"mainRdbInstance\", new()\n    {\n        NodeType = \"DB-DEV-S\",\n        Engine = \"PostgreSQL-11\",\n        IsHaCluster = true,\n        DisableBackup = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n    });\n\n    var mainRdbDatabase = new Scaleway.RdbDatabase(\"mainRdbDatabase\", new()\n    {\n        InstanceId = mainRdbInstance.Id,\n    });\n\n    var mainRdbUser = new Scaleway.RdbUser(\"mainRdbUser\", new()\n    {\n        InstanceId = mainRdbInstance.Id,\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        IsAdmin = false,\n    });\n\n    var mainRdbPrivilege = new Scaleway.RdbPrivilege(\"mainRdbPrivilege\", new()\n    {\n        InstanceId = mainRdbInstance.Id,\n        UserName = \"my-db-user\",\n        DatabaseName = \"my-db-name\",\n        Permission = \"all\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            mainRdbUser,\n            mainRdbDatabase,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainRdbInstance, err := scaleway.NewRdbInstance(ctx, \"mainRdbInstance\", \u0026scaleway.RdbInstanceArgs{\n\t\t\tNodeType:      pulumi.String(\"DB-DEV-S\"),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-11\"),\n\t\t\tIsHaCluster:   pulumi.Bool(true),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainRdbDatabase, err := scaleway.NewRdbDatabase(ctx, \"mainRdbDatabase\", \u0026scaleway.RdbDatabaseArgs{\n\t\t\tInstanceId: mainRdbInstance.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainRdbUser, err := scaleway.NewRdbUser(ctx, \"mainRdbUser\", \u0026scaleway.RdbUserArgs{\n\t\t\tInstanceId: mainRdbInstance.ID(),\n\t\t\tPassword:   pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tIsAdmin:    pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewRdbPrivilege(ctx, \"mainRdbPrivilege\", \u0026scaleway.RdbPrivilegeArgs{\n\t\t\tInstanceId:   mainRdbInstance.ID(),\n\t\t\tUserName:     pulumi.String(\"my-db-user\"),\n\t\t\tDatabaseName: pulumi.String(\"my-db-name\"),\n\t\t\tPermission:   pulumi.String(\"all\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmainRdbUser,\n\t\t\tmainRdbDatabase,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.RdbInstance;\nimport com.pulumi.scaleway.RdbInstanceArgs;\nimport com.pulumi.scaleway.RdbDatabase;\nimport com.pulumi.scaleway.RdbDatabaseArgs;\nimport com.pulumi.scaleway.RdbUser;\nimport com.pulumi.scaleway.RdbUserArgs;\nimport com.pulumi.scaleway.RdbPrivilege;\nimport com.pulumi.scaleway.RdbPrivilegeArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainRdbInstance = new RdbInstance(\"mainRdbInstance\", RdbInstanceArgs.builder()        \n            .nodeType(\"DB-DEV-S\")\n            .engine(\"PostgreSQL-11\")\n            .isHaCluster(true)\n            .disableBackup(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .build());\n\n        var mainRdbDatabase = new RdbDatabase(\"mainRdbDatabase\", RdbDatabaseArgs.builder()        \n            .instanceId(mainRdbInstance.id())\n            .build());\n\n        var mainRdbUser = new RdbUser(\"mainRdbUser\", RdbUserArgs.builder()        \n            .instanceId(mainRdbInstance.id())\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .isAdmin(false)\n            .build());\n\n        var mainRdbPrivilege = new RdbPrivilege(\"mainRdbPrivilege\", RdbPrivilegeArgs.builder()        \n            .instanceId(mainRdbInstance.id())\n            .userName(\"my-db-user\")\n            .databaseName(\"my-db-name\")\n            .permission(\"all\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    mainRdbUser,\n                    mainRdbDatabase)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainRdbInstance:\n    type: scaleway:RdbInstance\n    properties:\n      nodeType: DB-DEV-S\n      engine: PostgreSQL-11\n      isHaCluster: true\n      disableBackup: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n  mainRdbDatabase:\n    type: scaleway:RdbDatabase\n    properties:\n      instanceId: ${mainRdbInstance.id}\n  mainRdbPrivilege:\n    type: scaleway:RdbPrivilege\n    properties:\n      instanceId: ${mainRdbInstance.id}\n      userName: my-db-user\n      databaseName: my-db-name\n      permission: all\n    options:\n      dependson:\n        - ${mainRdbUser}\n        - ${mainRdbDatabase}\n  mainRdbUser:\n    type: scaleway:RdbUser\n    properties:\n      instanceId: ${mainRdbInstance.id}\n      password: thiZ_is_v\u0026ry_s3cret\n      isAdmin: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThe user privileges can be imported using the `{region}/{instance_id}/{database_name}/{user_name}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/rdbPrivilege:RdbPrivilege o fr-par/11111111-1111-1111-1111-111111111111/database_name/foo\n```\n\n ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-db-name`).\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the rdb instance.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Name of the user (e.g. `my-db-user`).\n"
                }
            },
            "required": [
                "databaseName",
                "instanceId",
                "permission",
                "region",
                "userName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-db-name`).\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the rdb instance.\n",
                    "willReplaceOnChanges": true
                },
                "permission": {
                    "type": "string",
                    "description": "Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "Name of the user (e.g. `my-db-user`).\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "instanceId",
                "permission",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RdbPrivilege resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Name of the database (e.g. `my-db-name`).\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the rdb instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "permission": {
                        "type": "string",
                        "description": "Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the resource exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "description": "Name of the user (e.g. `my-db-user`).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/rdbReadReplica:RdbReadReplica": {
            "description": "Creates and manages Scaleway Database read replicas.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst instance = new scaleway.RdbInstance(\"instance\", {\n    nodeType: \"db-dev-s\",\n    engine: \"PostgreSQL-14\",\n    isHaCluster: false,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    tags: [\n        \"terraform-test\",\n        \"scaleway_rdb_read_replica\",\n        \"minimal\",\n    ],\n});\nconst replica = new scaleway.RdbReadReplica(\"replica\", {\n    instanceId: instance.id,\n    directAccess: {},\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\ninstance = scaleway.RdbInstance(\"instance\",\n    node_type=\"db-dev-s\",\n    engine=\"PostgreSQL-14\",\n    is_ha_cluster=False,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    tags=[\n        \"terraform-test\",\n        \"scaleway_rdb_read_replica\",\n        \"minimal\",\n    ])\nreplica = scaleway.RdbReadReplica(\"replica\",\n    instance_id=instance.id,\n    direct_access=scaleway.RdbReadReplicaDirectAccessArgs())\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var instance = new Scaleway.RdbInstance(\"instance\", new()\n    {\n        NodeType = \"db-dev-s\",\n        Engine = \"PostgreSQL-14\",\n        IsHaCluster = false,\n        DisableBackup = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        Tags = new[]\n        {\n            \"terraform-test\",\n            \"scaleway_rdb_read_replica\",\n            \"minimal\",\n        },\n    });\n\n    var replica = new Scaleway.RdbReadReplica(\"replica\", new()\n    {\n        InstanceId = instance.Id,\n        DirectAccess = null,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinstance, err := scaleway.NewRdbInstance(ctx, \"instance\", \u0026scaleway.RdbInstanceArgs{\n\t\t\tNodeType:      pulumi.String(\"db-dev-s\"),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-14\"),\n\t\t\tIsHaCluster:   pulumi.Bool(false),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"terraform-test\"),\n\t\t\t\tpulumi.String(\"scaleway_rdb_read_replica\"),\n\t\t\t\tpulumi.String(\"minimal\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewRdbReadReplica(ctx, \"replica\", \u0026scaleway.RdbReadReplicaArgs{\n\t\t\tInstanceId:   instance.ID(),\n\t\t\tDirectAccess: nil,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.RdbInstance;\nimport com.pulumi.scaleway.RdbInstanceArgs;\nimport com.pulumi.scaleway.RdbReadReplica;\nimport com.pulumi.scaleway.RdbReadReplicaArgs;\nimport com.pulumi.scaleway.inputs.RdbReadReplicaDirectAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var instance = new RdbInstance(\"instance\", RdbInstanceArgs.builder()        \n            .nodeType(\"db-dev-s\")\n            .engine(\"PostgreSQL-14\")\n            .isHaCluster(false)\n            .disableBackup(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .tags(            \n                \"terraform-test\",\n                \"scaleway_rdb_read_replica\",\n                \"minimal\")\n            .build());\n\n        var replica = new RdbReadReplica(\"replica\", RdbReadReplicaArgs.builder()        \n            .instanceId(instance.id())\n            .directAccess()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  instance:\n    type: scaleway:RdbInstance\n    properties:\n      nodeType: db-dev-s\n      engine: PostgreSQL-14\n      isHaCluster: false\n      disableBackup: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      tags:\n        - terraform-test\n        - scaleway_rdb_read_replica\n        - minimal\n  replica:\n    type: scaleway:RdbReadReplica\n    properties:\n      instanceId: ${instance.id}\n      directAccess: {}\n```\n\n### Private network\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst instance = new scaleway.RdbInstance(\"instance\", {\n    nodeType: \"db-dev-s\",\n    engine: \"PostgreSQL-14\",\n    isHaCluster: false,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n});\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {});\nconst replica = new scaleway.RdbReadReplica(\"replica\", {\n    instanceId: instance.id,\n    privateNetwork: {\n        privateNetworkId: pn.id,\n        serviceIp: \"192.168.1.254/24\",\n    },\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\ninstance = scaleway.RdbInstance(\"instance\",\n    node_type=\"db-dev-s\",\n    engine=\"PostgreSQL-14\",\n    is_ha_cluster=False,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\")\npn = scaleway.VpcPrivateNetwork(\"pn\")\nreplica = scaleway.RdbReadReplica(\"replica\",\n    instance_id=instance.id,\n    private_network=scaleway.RdbReadReplicaPrivateNetworkArgs(\n        private_network_id=pn.id,\n        service_ip=\"192.168.1.254/24\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var instance = new Scaleway.RdbInstance(\"instance\", new()\n    {\n        NodeType = \"db-dev-s\",\n        Engine = \"PostgreSQL-14\",\n        IsHaCluster = false,\n        DisableBackup = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n    });\n\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\");\n\n    var replica = new Scaleway.RdbReadReplica(\"replica\", new()\n    {\n        InstanceId = instance.Id,\n        PrivateNetwork = new Scaleway.Inputs.RdbReadReplicaPrivateNetworkArgs\n        {\n            PrivateNetworkId = pn.Id,\n            ServiceIp = \"192.168.1.254/24\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinstance, err := scaleway.NewRdbInstance(ctx, \"instance\", \u0026scaleway.RdbInstanceArgs{\n\t\t\tNodeType:      pulumi.String(\"db-dev-s\"),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-14\"),\n\t\t\tIsHaCluster:   pulumi.Bool(false),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewRdbReadReplica(ctx, \"replica\", \u0026scaleway.RdbReadReplicaArgs{\n\t\t\tInstanceId: instance.ID(),\n\t\t\tPrivateNetwork: \u0026scaleway.RdbReadReplicaPrivateNetworkArgs{\n\t\t\t\tPrivateNetworkId: pn.ID(),\n\t\t\t\tServiceIp:        pulumi.String(\"192.168.1.254/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.RdbInstance;\nimport com.pulumi.scaleway.RdbInstanceArgs;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.RdbReadReplica;\nimport com.pulumi.scaleway.RdbReadReplicaArgs;\nimport com.pulumi.scaleway.inputs.RdbReadReplicaPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var instance = new RdbInstance(\"instance\", RdbInstanceArgs.builder()        \n            .nodeType(\"db-dev-s\")\n            .engine(\"PostgreSQL-14\")\n            .isHaCluster(false)\n            .disableBackup(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .build());\n\n        var pn = new VpcPrivateNetwork(\"pn\");\n\n        var replica = new RdbReadReplica(\"replica\", RdbReadReplicaArgs.builder()        \n            .instanceId(instance.id())\n            .privateNetwork(RdbReadReplicaPrivateNetworkArgs.builder()\n                .privateNetworkId(pn.id())\n                .serviceIp(\"192.168.1.254/24\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  instance:\n    type: scaleway:RdbInstance\n    properties:\n      nodeType: db-dev-s\n      engine: PostgreSQL-14\n      isHaCluster: false\n      disableBackup: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n  pn:\n    type: scaleway:VpcPrivateNetwork\n  replica:\n    type: scaleway:RdbReadReplica\n    properties:\n      instanceId: ${instance.id}\n      privateNetwork:\n        privateNetworkId: ${pn.id}\n        serviceIp: 192.168.1.254/24\n```\n\n\n## Import\n\nDatabase Read replica can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/rdbReadReplica:RdbReadReplica rr fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "directAccess": {
                    "$ref": "#/types/scaleway:index/RdbReadReplicaDirectAccess:RdbReadReplicaDirectAccess",
                    "description": "Creates a direct access endpoint to rdb replica.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the rdb instance.\n\n\u003e **Important:** The replica musts contains at least one of `direct_access` or `private_network`. It can contain both.\n"
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/RdbReadReplicaPrivateNetwork:RdbReadReplicaPrivateNetwork",
                    "description": "Create an endpoint in a private network.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the Database read replica should be created.\n"
                },
                "sameZone": {
                    "type": "boolean",
                    "description": "Defines whether to create the replica in the same availability zone as the main instance nodes or not.\n"
                }
            },
            "required": [
                "instanceId",
                "region"
            ],
            "inputProperties": {
                "directAccess": {
                    "$ref": "#/types/scaleway:index/RdbReadReplicaDirectAccess:RdbReadReplicaDirectAccess",
                    "description": "Creates a direct access endpoint to rdb replica.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the rdb instance.\n\n\u003e **Important:** The replica musts contains at least one of `direct_access` or `private_network`. It can contain both.\n"
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/RdbReadReplicaPrivateNetwork:RdbReadReplicaPrivateNetwork",
                    "description": "Create an endpoint in a private network.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the Database read replica should be created.\n",
                    "willReplaceOnChanges": true
                },
                "sameZone": {
                    "type": "boolean",
                    "description": "Defines whether to create the replica in the same availability zone as the main instance nodes or not.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RdbReadReplica resources.\n",
                "properties": {
                    "directAccess": {
                        "$ref": "#/types/scaleway:index/RdbReadReplicaDirectAccess:RdbReadReplicaDirectAccess",
                        "description": "Creates a direct access endpoint to rdb replica.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the rdb instance.\n\n\u003e **Important:** The replica musts contains at least one of `direct_access` or `private_network`. It can contain both.\n"
                    },
                    "privateNetwork": {
                        "$ref": "#/types/scaleway:index/RdbReadReplicaPrivateNetwork:RdbReadReplicaPrivateNetwork",
                        "description": "Create an endpoint in a private network.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region\nin which the Database read replica should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "sameZone": {
                        "type": "boolean",
                        "description": "Defines whether to create the replica in the same availability zone as the main instance nodes or not.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/rdbUser:RdbUser": {
            "description": "Creates and manages Scaleway Database Users.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as random from \"@pulumi/random\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst dbPassword = new random.RandomPassword(\"dbPassword\", {\n    length: 16,\n    special: true,\n});\nconst dbAdmin = new scaleway.RdbUser(\"dbAdmin\", {\n    instanceId: scaleway_rdb_instance.main.id,\n    password: dbPassword.result,\n    isAdmin: true,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_random as random\n\ndb_password = random.RandomPassword(\"dbPassword\",\n    length=16,\n    special=True)\ndb_admin = scaleway.RdbUser(\"dbAdmin\",\n    instance_id=scaleway_rdb_instance[\"main\"][\"id\"],\n    password=db_password.result,\n    is_admin=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Random = Pulumi.Random;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dbPassword = new Random.RandomPassword(\"dbPassword\", new()\n    {\n        Length = 16,\n        Special = true,\n    });\n\n    var dbAdmin = new Scaleway.RdbUser(\"dbAdmin\", new()\n    {\n        InstanceId = scaleway_rdb_instance.Main.Id,\n        Password = dbPassword.Result,\n        IsAdmin = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi-random/sdk/v4/go/random\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdbPassword, err := random.NewRandomPassword(ctx, \"dbPassword\", \u0026random.RandomPasswordArgs{\n\t\t\tLength:  pulumi.Int(16),\n\t\t\tSpecial: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewRdbUser(ctx, \"dbAdmin\", \u0026scaleway.RdbUserArgs{\n\t\t\tInstanceId: pulumi.Any(scaleway_rdb_instance.Main.Id),\n\t\t\tPassword:   dbPassword.Result,\n\t\t\tIsAdmin:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.random.RandomPassword;\nimport com.pulumi.random.RandomPasswordArgs;\nimport com.pulumi.scaleway.RdbUser;\nimport com.pulumi.scaleway.RdbUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dbPassword = new RandomPassword(\"dbPassword\", RandomPasswordArgs.builder()        \n            .length(16)\n            .special(true)\n            .build());\n\n        var dbAdmin = new RdbUser(\"dbAdmin\", RdbUserArgs.builder()        \n            .instanceId(scaleway_rdb_instance.main().id())\n            .password(dbPassword.result())\n            .isAdmin(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dbPassword:\n    type: random:RandomPassword\n    properties:\n      length: 16\n      special: true\n  dbAdmin:\n    type: scaleway:RdbUser\n    properties:\n      instanceId: ${scaleway_rdb_instance.main.id}\n      password: ${dbPassword.result}\n      isAdmin: true\n```\n\n\n## Import\n\nDatabase User can be imported using `{region}/{instance_id}/{user_name}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/rdbUser:RdbUser admin fr-par/11111111-1111-1111-1111-111111111111/admin\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the rdb instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database User.\n"
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Grant admin permissions to the Database User.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Database User name.\n\n\u003e **Important:** Updates to `name` will recreate the Database User.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Database User password.\n",
                    "secret": true
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region this resource resides in.\n"
                }
            },
            "required": [
                "instanceId",
                "name",
                "password",
                "region"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the rdb instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database User.\n",
                    "willReplaceOnChanges": true
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Grant admin permissions to the Database User.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Database User name.\n\n\u003e **Important:** Updates to `name` will recreate the Database User.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "Database User password.\n",
                    "secret": true
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region this resource resides in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId",
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RdbUser resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the rdb instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database User.\n",
                        "willReplaceOnChanges": true
                    },
                    "isAdmin": {
                        "type": "boolean",
                        "description": "Grant admin permissions to the Database User.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Database User name.\n\n\u003e **Important:** Updates to `name` will recreate the Database User.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "Database User password.\n",
                        "secret": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The Scaleway region this resource resides in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/redisCluster:RedisCluster": {
            "description": "Creates and manages Scaleway Redis Clusters.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/redis/api/v1alpha1/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.RedisCluster(\"main\", {\n    acls: [{\n        description: \"Allow all\",\n        ip: \"0.0.0.0/0\",\n    }],\n    clusterSize: 1,\n    nodeType: \"RED1-MICRO\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    tags: [\n        \"test\",\n        \"redis\",\n    ],\n    tlsEnabled: true,\n    userName: \"my_initial_user\",\n    version: \"6.2.6\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.RedisCluster(\"main\",\n    acls=[scaleway.RedisClusterAclArgs(\n        description=\"Allow all\",\n        ip=\"0.0.0.0/0\",\n    )],\n    cluster_size=1,\n    node_type=\"RED1-MICRO\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    tags=[\n        \"test\",\n        \"redis\",\n    ],\n    tls_enabled=True,\n    user_name=\"my_initial_user\",\n    version=\"6.2.6\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.RedisCluster(\"main\", new()\n    {\n        Acls = new[]\n        {\n            new Scaleway.Inputs.RedisClusterAclArgs\n            {\n                Description = \"Allow all\",\n                Ip = \"0.0.0.0/0\",\n            },\n        },\n        ClusterSize = 1,\n        NodeType = \"RED1-MICRO\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        Tags = new[]\n        {\n            \"test\",\n            \"redis\",\n        },\n        TlsEnabled = true,\n        UserName = \"my_initial_user\",\n        Version = \"6.2.6\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewRedisCluster(ctx, \"main\", \u0026scaleway.RedisClusterArgs{\n\t\t\tAcls: scaleway.RedisClusterAclArray{\n\t\t\t\t\u0026scaleway.RedisClusterAclArgs{\n\t\t\t\t\tDescription: pulumi.String(\"Allow all\"),\n\t\t\t\t\tIp:          pulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tClusterSize: pulumi.Int(1),\n\t\t\tNodeType:    pulumi.String(\"RED1-MICRO\"),\n\t\t\tPassword:    pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"test\"),\n\t\t\t\tpulumi.String(\"redis\"),\n\t\t\t},\n\t\t\tTlsEnabled: pulumi.Bool(true),\n\t\t\tUserName:   pulumi.String(\"my_initial_user\"),\n\t\t\tVersion:    pulumi.String(\"6.2.6\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.RedisCluster;\nimport com.pulumi.scaleway.RedisClusterArgs;\nimport com.pulumi.scaleway.inputs.RedisClusterAclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new RedisCluster(\"main\", RedisClusterArgs.builder()        \n            .acls(RedisClusterAclArgs.builder()\n                .description(\"Allow all\")\n                .ip(\"0.0.0.0/0\")\n                .build())\n            .clusterSize(1)\n            .nodeType(\"RED1-MICRO\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .tags(            \n                \"test\",\n                \"redis\")\n            .tlsEnabled(\"true\")\n            .userName(\"my_initial_user\")\n            .version(\"6.2.6\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:RedisCluster\n    properties:\n      acls:\n        - description: Allow all\n          ip: 0.0.0.0/0\n      clusterSize: 1\n      nodeType: RED1-MICRO\n      password: thiZ_is_v\u0026ry_s3cret\n      tags:\n        - test\n        - redis\n      tlsEnabled: 'true'\n      userName: my_initial_user\n      version: 6.2.6\n```\n\n### With settings\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.RedisCluster(\"main\", {\n    nodeType: \"RED1-MICRO\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    settings: {\n        maxclients: \"1000\",\n        \"tcp-keepalive\": \"120\",\n    },\n    userName: \"my_initial_user\",\n    version: \"6.2.6\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.RedisCluster(\"main\",\n    node_type=\"RED1-MICRO\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    settings={\n        \"maxclients\": \"1000\",\n        \"tcp-keepalive\": \"120\",\n    },\n    user_name=\"my_initial_user\",\n    version=\"6.2.6\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.RedisCluster(\"main\", new()\n    {\n        NodeType = \"RED1-MICRO\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        Settings = \n        {\n            { \"maxclients\", \"1000\" },\n            { \"tcp-keepalive\", \"120\" },\n        },\n        UserName = \"my_initial_user\",\n        Version = \"6.2.6\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewRedisCluster(ctx, \"main\", \u0026scaleway.RedisClusterArgs{\n\t\t\tNodeType: pulumi.String(\"RED1-MICRO\"),\n\t\t\tPassword: pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tSettings: pulumi.StringMap{\n\t\t\t\t\"maxclients\":    pulumi.String(\"1000\"),\n\t\t\t\t\"tcp-keepalive\": pulumi.String(\"120\"),\n\t\t\t},\n\t\t\tUserName: pulumi.String(\"my_initial_user\"),\n\t\t\tVersion:  pulumi.String(\"6.2.6\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.RedisCluster;\nimport com.pulumi.scaleway.RedisClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new RedisCluster(\"main\", RedisClusterArgs.builder()        \n            .nodeType(\"RED1-MICRO\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .settings(Map.ofEntries(\n                Map.entry(\"maxclients\", \"1000\"),\n                Map.entry(\"tcp-keepalive\", \"120\")\n            ))\n            .userName(\"my_initial_user\")\n            .version(\"6.2.6\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:RedisCluster\n    properties:\n      nodeType: RED1-MICRO\n      password: thiZ_is_v\u0026ry_s3cret\n      settings:\n        maxclients: '1000'\n        tcp-keepalive: '120'\n      userName: my_initial_user\n      version: 6.2.6\n```\n\n### With a private network\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {});\nconst main = new scaleway.RedisCluster(\"main\", {\n    version: \"6.2.6\",\n    nodeType: \"RED1-MICRO\",\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    clusterSize: 1,\n    privateNetworks: [{\n        id: pn.id,\n        serviceIps: [\"10.12.1.1/20\"],\n    }],\n}, {\n    dependsOn: [pn],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\npn = scaleway.VpcPrivateNetwork(\"pn\")\nmain = scaleway.RedisCluster(\"main\",\n    version=\"6.2.6\",\n    node_type=\"RED1-MICRO\",\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    cluster_size=1,\n    private_networks=[scaleway.RedisClusterPrivateNetworkArgs(\n        id=pn.id,\n        service_ips=[\"10.12.1.1/20\"],\n    )],\n    opts=pulumi.ResourceOptions(depends_on=[pn]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\");\n\n    var main = new Scaleway.RedisCluster(\"main\", new()\n    {\n        Version = \"6.2.6\",\n        NodeType = \"RED1-MICRO\",\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        ClusterSize = 1,\n        PrivateNetworks = new[]\n        {\n            new Scaleway.Inputs.RedisClusterPrivateNetworkArgs\n            {\n                Id = pn.Id,\n                ServiceIps = new[]\n                {\n                    \"10.12.1.1/20\",\n                },\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            pn,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewRedisCluster(ctx, \"main\", \u0026scaleway.RedisClusterArgs{\n\t\t\tVersion:     pulumi.String(\"6.2.6\"),\n\t\t\tNodeType:    pulumi.String(\"RED1-MICRO\"),\n\t\t\tUserName:    pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:    pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tClusterSize: pulumi.Int(1),\n\t\t\tPrivateNetworks: scaleway.RedisClusterPrivateNetworkArray{\n\t\t\t\t\u0026scaleway.RedisClusterPrivateNetworkArgs{\n\t\t\t\t\tId: pn.ID(),\n\t\t\t\t\tServiceIps: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"10.12.1.1/20\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tpn,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.RedisCluster;\nimport com.pulumi.scaleway.RedisClusterArgs;\nimport com.pulumi.scaleway.inputs.RedisClusterPrivateNetworkArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn = new VpcPrivateNetwork(\"pn\");\n\n        var main = new RedisCluster(\"main\", RedisClusterArgs.builder()        \n            .version(\"6.2.6\")\n            .nodeType(\"RED1-MICRO\")\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .clusterSize(1)\n            .privateNetworks(RedisClusterPrivateNetworkArgs.builder()\n                .id(pn.id())\n                .serviceIps(\"10.12.1.1/20\")\n                .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(pn)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn:\n    type: scaleway:VpcPrivateNetwork\n  main:\n    type: scaleway:RedisCluster\n    properties:\n      version: 6.2.6\n      nodeType: RED1-MICRO\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      clusterSize: 1\n      privateNetworks:\n        - id: ${pn.id}\n          serviceIps:\n            - 10.12.1.1/20\n    options:\n      dependson:\n        - ${pn}\n```\n\n\n## Import\n\nRedis Cluster can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/redisCluster:RedisCluster main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/RedisClusterAcl:RedisClusterAcl"
                    },
                    "description": "List of acl rules, this is cluster's authorized IPs. More details on the ACL section.\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "The PEM of the certificate used by redis, only when `tls_enabled` is true\n"
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of nodes in the Redis Cluster.\n\n\u003e **Important:** You cannot set `cluster_size` to 2, you either have to choose Standalone mode (1 node) or Cluster mode\nwhich is minimum 3 (1 main node + 2 secondary nodes)\n\n\u003e **Important:** You can set a bigger `cluster_size` than you initially did, it will migrate the Redis Cluster, but\nkeep in mind that you cannot downgrade a Redis Cluster so setting a smaller `cluster_size` will not have any effect.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of creation of the Redis Cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Redis Cluster.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of Redis Cluster you want to create (e.g. `RED1-M`).\n\n\u003e **Important:** Updates to `node_type` will migrate the Redis Cluster to the desired `node_type`. Keep in mind that\nyou cannot downgrade a Redis Cluster.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the Redis Cluster.\n",
                    "secret": true
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/RedisClusterPrivateNetwork:RedisClusterPrivateNetwork"
                    },
                    "description": "Describes the private network you want to connect to your cluster. If not set, a public\nnetwork will be provided. More details on the Private Network section\n\n\u003e **Important:** The way to use private networks differs whether you are using redis in standalone or cluster mode.\n\n- Standalone mode (`cluster_size` = 1) : you can attach as many private networks as you want (each must be a separate\nblock). If you detach your only private network, your cluster won't be reachable until you define a new private or\npublic network. You can modify your private_network and its specs, you can have both a private and public network side\nby side.\n\n- Cluster mode (`cluster_size` \u003e 1) : you can define a single private network as you create your cluster, you won't be\nable to edit or detach it afterward, unless you create another cluster. Your `service_ips` must be listed as follows:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Redis Cluster is\nassociated with.\n"
                },
                "publicNetwork": {
                    "$ref": "#/types/scaleway:index/RedisClusterPublicNetwork:RedisClusterPublicNetwork",
                    "description": "(Optional) Public network details. Only one of `private_network` and `public_network` may be set.\n\u003e The `public_network` block exports:\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of settings for redis cluster. Available settings can be found by listing redis versions\nwith scaleway API or CLI\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Redis Cluster.\n"
                },
                "tlsEnabled": {
                    "type": "boolean",
                    "description": "Whether TLS is enabled or not.\n\n\u003e The changes on `tls_enabled` will force the resource creation.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the Redis Cluster.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the Redis Cluster.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Redis's Cluster version (e.g. `6.2.6`).\n\n\u003e **Important:** Updates to `version` will migrate the Redis Cluster to the desired `version`. Keep in mind that you\ncannot downgrade a Redis Cluster.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the\nRedis Cluster should be created.\n"
                }
            },
            "required": [
                "certificate",
                "clusterSize",
                "createdAt",
                "name",
                "nodeType",
                "password",
                "projectId",
                "publicNetwork",
                "updatedAt",
                "userName",
                "version",
                "zone"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/RedisClusterAcl:RedisClusterAcl"
                    },
                    "description": "List of acl rules, this is cluster's authorized IPs. More details on the ACL section.\n"
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of nodes in the Redis Cluster.\n\n\u003e **Important:** You cannot set `cluster_size` to 2, you either have to choose Standalone mode (1 node) or Cluster mode\nwhich is minimum 3 (1 main node + 2 secondary nodes)\n\n\u003e **Important:** You can set a bigger `cluster_size` than you initially did, it will migrate the Redis Cluster, but\nkeep in mind that you cannot downgrade a Redis Cluster so setting a smaller `cluster_size` will not have any effect.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Redis Cluster.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of Redis Cluster you want to create (e.g. `RED1-M`).\n\n\u003e **Important:** Updates to `node_type` will migrate the Redis Cluster to the desired `node_type`. Keep in mind that\nyou cannot downgrade a Redis Cluster.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the Redis Cluster.\n",
                    "secret": true
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/RedisClusterPrivateNetwork:RedisClusterPrivateNetwork"
                    },
                    "description": "Describes the private network you want to connect to your cluster. If not set, a public\nnetwork will be provided. More details on the Private Network section\n\n\u003e **Important:** The way to use private networks differs whether you are using redis in standalone or cluster mode.\n\n- Standalone mode (`cluster_size` = 1) : you can attach as many private networks as you want (each must be a separate\nblock). If you detach your only private network, your cluster won't be reachable until you define a new private or\npublic network. You can modify your private_network and its specs, you can have both a private and public network side\nby side.\n\n- Cluster mode (`cluster_size` \u003e 1) : you can define a single private network as you create your cluster, you won't be\nable to edit or detach it afterward, unless you create another cluster. Your `service_ips` must be listed as follows:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Redis Cluster is\nassociated with.\n",
                    "willReplaceOnChanges": true
                },
                "publicNetwork": {
                    "$ref": "#/types/scaleway:index/RedisClusterPublicNetwork:RedisClusterPublicNetwork",
                    "description": "(Optional) Public network details. Only one of `private_network` and `public_network` may be set.\n\u003e The `public_network` block exports:\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of settings for redis cluster. Available settings can be found by listing redis versions\nwith scaleway API or CLI\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Redis Cluster.\n"
                },
                "tlsEnabled": {
                    "type": "boolean",
                    "description": "Whether TLS is enabled or not.\n\n\u003e The changes on `tls_enabled` will force the resource creation.\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the Redis Cluster.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Redis's Cluster version (e.g. `6.2.6`).\n\n\u003e **Important:** Updates to `version` will migrate the Redis Cluster to the desired `version`. Keep in mind that you\ncannot downgrade a Redis Cluster.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the\nRedis Cluster should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "nodeType",
                "password",
                "userName",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RedisCluster resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/RedisClusterAcl:RedisClusterAcl"
                        },
                        "description": "List of acl rules, this is cluster's authorized IPs. More details on the ACL section.\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "The PEM of the certificate used by redis, only when `tls_enabled` is true\n"
                    },
                    "clusterSize": {
                        "type": "integer",
                        "description": "The number of nodes in the Redis Cluster.\n\n\u003e **Important:** You cannot set `cluster_size` to 2, you either have to choose Standalone mode (1 node) or Cluster mode\nwhich is minimum 3 (1 main node + 2 secondary nodes)\n\n\u003e **Important:** You can set a bigger `cluster_size` than you initially did, it will migrate the Redis Cluster, but\nkeep in mind that you cannot downgrade a Redis Cluster so setting a smaller `cluster_size` will not have any effect.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of creation of the Redis Cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Redis Cluster.\n"
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "The type of Redis Cluster you want to create (e.g. `RED1-M`).\n\n\u003e **Important:** Updates to `node_type` will migrate the Redis Cluster to the desired `node_type`. Keep in mind that\nyou cannot downgrade a Redis Cluster.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for the first user of the Redis Cluster.\n",
                        "secret": true
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/RedisClusterPrivateNetwork:RedisClusterPrivateNetwork"
                        },
                        "description": "Describes the private network you want to connect to your cluster. If not set, a public\nnetwork will be provided. More details on the Private Network section\n\n\u003e **Important:** The way to use private networks differs whether you are using redis in standalone or cluster mode.\n\n- Standalone mode (`cluster_size` = 1) : you can attach as many private networks as you want (each must be a separate\nblock). If you detach your only private network, your cluster won't be reachable until you define a new private or\npublic network. You can modify your private_network and its specs, you can have both a private and public network side\nby side.\n\n- Cluster mode (`cluster_size` \u003e 1) : you can define a single private network as you create your cluster, you won't be\nable to edit or detach it afterward, unless you create another cluster. Your `service_ips` must be listed as follows:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the Redis Cluster is\nassociated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicNetwork": {
                        "$ref": "#/types/scaleway:index/RedisClusterPublicNetwork:RedisClusterPublicNetwork",
                        "description": "(Optional) Public network details. Only one of `private_network` and `public_network` may be set.\n\u003e The `public_network` block exports:\n"
                    },
                    "settings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of settings for redis cluster. Available settings can be found by listing redis versions\nwith scaleway API or CLI\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Redis Cluster.\n"
                    },
                    "tlsEnabled": {
                        "type": "boolean",
                        "description": "Whether TLS is enabled or not.\n\n\u003e The changes on `tls_enabled` will force the resource creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the Redis Cluster.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Identifier for the first user of the Redis Cluster.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Redis's Cluster version (e.g. `6.2.6`).\n\n\u003e **Important:** Updates to `version` will migrate the Redis Cluster to the desired `version`. Keep in mind that you\ncannot downgrade a Redis Cluster.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the\nRedis Cluster should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/registryNamespace:RegistryNamespace": {
            "description": "Creates and manages Scaleway Container Registry.\nFor more information see [the documentation](https://developers.scaleway.com/en/products/registry/api/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.RegistryNamespace(\"main\", {\n    description: \"Main container registry\",\n    isPublic: false,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.RegistryNamespace(\"main\",\n    description=\"Main container registry\",\n    is_public=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.RegistryNamespace(\"main\", new()\n    {\n        Description = \"Main container registry\",\n        IsPublic = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewRegistryNamespace(ctx, \"main\", \u0026scaleway.RegistryNamespaceArgs{\n\t\t\tDescription: pulumi.String(\"Main container registry\"),\n\t\t\tIsPublic:    pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.RegistryNamespace;\nimport com.pulumi.scaleway.RegistryNamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new RegistryNamespace(\"main\", RegistryNamespaceArgs.builder()        \n            .description(\"Main container registry\")\n            .isPublic(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:RegistryNamespace\n    properties:\n      description: Main container registry\n      isPublic: false\n```\n\n\n## Import\n\nNamespaces can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/registryNamespace:RegistryNamespace main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint reachable by Docker.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Whether the images stored in the namespace should be downloadable publicly (docker pull).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the namespace.\n\n\u003e **Important** Updates to `name` will recreate the namespace.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the namespace is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                }
            },
            "required": [
                "endpoint",
                "name",
                "organizationId",
                "projectId",
                "region"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Whether the images stored in the namespace should be downloadable publicly (docker pull).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the namespace.\n\n\u003e **Important** Updates to `name` will recreate the namespace.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RegistryNamespace resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the namespace.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "Endpoint reachable by Docker.\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "Whether the images stored in the namespace should be downloadable publicly (docker pull).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the namespace.\n\n\u003e **Important** Updates to `name` will recreate the namespace.\n",
                        "willReplaceOnChanges": true
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the namespace is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the namespace is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/secret:Secret": {
            "description": "Creates and manages Scaleway Secrets.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/secret_manager/api/v1alpha1/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.Secret(\"main\", {\n    description: \"barr\",\n    tags: [\n        \"foo\",\n        \"terraform\",\n    ],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.Secret(\"main\",\n    description=\"barr\",\n    tags=[\n        \"foo\",\n        \"terraform\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.Secret(\"main\", new()\n    {\n        Description = \"barr\",\n        Tags = new[]\n        {\n            \"foo\",\n            \"terraform\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewSecret(ctx, \"main\", \u0026scaleway.SecretArgs{\n\t\t\tDescription: pulumi.String(\"barr\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo\"),\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Secret;\nimport com.pulumi.scaleway.SecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new Secret(\"main\", SecretArgs.builder()        \n            .description(\"barr\")\n            .tags(            \n                \"foo\",\n                \"terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:Secret\n    properties:\n      description: barr\n      tags:\n        - foo\n        - terraform\n```\n\n\n## Import\n\nThe Secret can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/secret:Secret main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date and time of secret's creation (RFC 3339 format).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the secret (e.g. `my-new-description`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the secret (e.g. `my-secret`).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID containing is the secret.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the resource exists.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Secret.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags of the secret (e.g. `[\"tag\", \"secret\"]`).\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date and time of secret's last update (RFC 3339 format).\n"
                },
                "versionCount": {
                    "type": "integer",
                    "description": "The number of versions for this Secret.\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "projectId",
                "region",
                "status",
                "updatedAt",
                "versionCount"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the secret (e.g. `my-new-description`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the secret (e.g. `my-secret`).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID containing is the secret.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the resource exists.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags of the secret (e.g. `[\"tag\", \"secret\"]`).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secret resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date and time of secret's creation (RFC 3339 format).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the secret (e.g. `my-new-description`).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the secret (e.g. `my-secret`).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID containing is the secret.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region\nin which the resource exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Secret.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags of the secret (e.g. `[\"tag\", \"secret\"]`).\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date and time of secret's last update (RFC 3339 format).\n"
                    },
                    "versionCount": {
                        "type": "integer",
                        "description": "The number of versions for this Secret.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/secretVersion:SecretVersion": {
            "description": "\n\n\n## Import\n\nThe Secret Version can be imported using the `{region}/{id}/{revision}`, e.g. ~\u003e **Important:** Be aware if you import with revision `latest` you will overwrite the version you used before. bash\n\n```sh\n $ pulumi import scaleway:index/secretVersion:SecretVersion main fr-par/11111111-1111-1111-1111-111111111111/2\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date and time of secret version's creation (RFC 3339 format).\n"
                },
                "data": {
                    "type": "string",
                    "description": "The data payload of the secret version. Must be no larger than 64KiB. (e.g. `my-secret-version-payload`). more on the data section\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the secret version (e.g. `my-new-description`).\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the resource exists.\n"
                },
                "revision": {
                    "type": "string",
                    "description": "The revision for this Secret Version.\n"
                },
                "secretId": {
                    "type": "string",
                    "description": "The Secret ID associated wit the secret version.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Secret Version.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date and time of secret version's last update (RFC 3339 format).\n"
                }
            },
            "required": [
                "createdAt",
                "data",
                "region",
                "revision",
                "secretId",
                "status",
                "updatedAt"
            ],
            "inputProperties": {
                "data": {
                    "type": "string",
                    "description": "The data payload of the secret version. Must be no larger than 64KiB. (e.g. `my-secret-version-payload`). more on the data section\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the secret version (e.g. `my-new-description`).\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the resource exists.\n",
                    "willReplaceOnChanges": true
                },
                "secretId": {
                    "type": "string",
                    "description": "The Secret ID associated wit the secret version.\n"
                }
            },
            "requiredInputs": [
                "data",
                "secretId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretVersion resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date and time of secret version's creation (RFC 3339 format).\n"
                    },
                    "data": {
                        "type": "string",
                        "description": "The data payload of the secret version. Must be no larger than 64KiB. (e.g. `my-secret-version-payload`). more on the data section\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the secret version (e.g. `my-new-description`).\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region\nin which the resource exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "revision": {
                        "type": "string",
                        "description": "The revision for this Secret Version.\n"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "The Secret ID associated wit the secret version.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Secret Version.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date and time of secret version's last update (RFC 3339 format).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/temDomain:TemDomain": {
            "description": "Creates and manages Scaleway Transactional Email Domains.\nFor more information see [the documentation](https://developers.scaleway.com/en/products/transactional_email/api/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.TemDomain(\"main\", {acceptTos: true});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.TemDomain(\"main\", accept_tos=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.TemDomain(\"main\", new()\n    {\n        AcceptTos = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewTemDomain(ctx, \"main\", \u0026scaleway.TemDomainArgs{\n\t\t\tAcceptTos: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.TemDomain;\nimport com.pulumi.scaleway.TemDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new TemDomain(\"main\", TemDomainArgs.builder()        \n            .acceptTos(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:TemDomain\n    properties:\n      acceptTos: true\n```\n\n### Add the required records to your DNS zone\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst config = new pulumi.Config();\nconst domainName = config.require(\"domainName\");\nconst main = new scaleway.TemDomain(\"main\", {acceptTos: true});\nconst spf = new scaleway.DomainRecord(\"spf\", {\n    dnsZone: domainName,\n    type: \"TXT\",\n    data: pulumi.interpolate`v=spf1 ${main.spfConfig} -all`,\n});\nconst dkim = new scaleway.DomainRecord(\"dkim\", {\n    dnsZone: domainName,\n    type: \"TXT\",\n    data: main.dkimConfig,\n});\nconst mx = new scaleway.DomainRecord(\"mx\", {\n    dnsZone: domainName,\n    type: \"MX\",\n    data: \".\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nconfig = pulumi.Config()\ndomain_name = config.require(\"domainName\")\nmain = scaleway.TemDomain(\"main\", accept_tos=True)\nspf = scaleway.DomainRecord(\"spf\",\n    dns_zone=domain_name,\n    type=\"TXT\",\n    data=main.spf_config.apply(lambda spf_config: f\"v=spf1 {spf_config} -all\"))\ndkim = scaleway.DomainRecord(\"dkim\",\n    dns_zone=domain_name,\n    type=\"TXT\",\n    data=main.dkim_config)\nmx = scaleway.DomainRecord(\"mx\",\n    dns_zone=domain_name,\n    type=\"MX\",\n    data=\".\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var domainName = config.Require(\"domainName\");\n    var main = new Scaleway.TemDomain(\"main\", new()\n    {\n        AcceptTos = true,\n    });\n\n    var spf = new Scaleway.DomainRecord(\"spf\", new()\n    {\n        DnsZone = domainName,\n        Type = \"TXT\",\n        Data = main.SpfConfig.Apply(spfConfig =\u003e $\"v=spf1 {spfConfig} -all\"),\n    });\n\n    var dkim = new Scaleway.DomainRecord(\"dkim\", new()\n    {\n        DnsZone = domainName,\n        Type = \"TXT\",\n        Data = main.DkimConfig,\n    });\n\n    var mx = new Scaleway.DomainRecord(\"mx\", new()\n    {\n        DnsZone = domainName,\n        Type = \"MX\",\n        Data = \".\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdomainName := cfg.Require(\"domainName\")\n\t\tmain, err := scaleway.NewTemDomain(ctx, \"main\", \u0026scaleway.TemDomainArgs{\n\t\t\tAcceptTos: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"spf\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(domainName),\n\t\t\tType:    pulumi.String(\"TXT\"),\n\t\t\tData: main.SpfConfig.ApplyT(func(spfConfig string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"v=spf1 %v -all\", spfConfig), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"dkim\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(domainName),\n\t\t\tType:    pulumi.String(\"TXT\"),\n\t\t\tData:    main.DkimConfig,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"mx\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(domainName),\n\t\t\tType:    pulumi.String(\"MX\"),\n\t\t\tData:    pulumi.String(\".\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.TemDomain;\nimport com.pulumi.scaleway.TemDomainArgs;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var domainName = config.get(\"domainName\");\n        var main = new TemDomain(\"main\", TemDomainArgs.builder()        \n            .acceptTos(true)\n            .build());\n\n        var spf = new DomainRecord(\"spf\", DomainRecordArgs.builder()        \n            .dnsZone(domainName)\n            .type(\"TXT\")\n            .data(main.spfConfig().applyValue(spfConfig -\u003e String.format(\"v=spf1 %s -all\", spfConfig)))\n            .build());\n\n        var dkim = new DomainRecord(\"dkim\", DomainRecordArgs.builder()        \n            .dnsZone(domainName)\n            .type(\"TXT\")\n            .data(main.dkimConfig())\n            .build());\n\n        var mx = new DomainRecord(\"mx\", DomainRecordArgs.builder()        \n            .dnsZone(domainName)\n            .type(\"MX\")\n            .data(\".\")\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  domainName:\n    type: string\nresources:\n  main:\n    type: scaleway:TemDomain\n    properties:\n      acceptTos: true\n  spf:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: ${domainName}\n      type: TXT\n      data: v=spf1 ${main.spfConfig} -all\n  dkim:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: ${domainName}\n      type: TXT\n      data: ${main.dkimConfig}\n  mx:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: ${domainName}\n      type: MX\n      data: .\n```\n\n\n## Import\n\nDomains can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/temDomain:TemDomain main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "acceptTos": {
                    "type": "boolean",
                    "description": "Acceptation of the [Term of Service](https://tem.s3.fr-par.scw.cloud/antispam_policy.pdf).\n\u003e **Important:**  This attribute must be set to `true`.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the Transaction Email Domain's creation (RFC 3339 format).\n"
                },
                "dkimConfig": {
                    "type": "string",
                    "description": "The DKIM public key, as should be recorded in the DNS zone.\n"
                },
                "lastError": {
                    "type": "string",
                    "description": "The error message if the last check failed.\n"
                },
                "lastValidAt": {
                    "type": "string",
                    "description": "The date and time the domain was last found to be valid (RFC 3339 format).\n"
                },
                "mxBlackhole": {
                    "type": "string",
                    "description": "The Scaleway's blackhole MX server to use if you do not have one.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The domain name, must not be used in another Transactional Email Domain.\n\u003e **Important:** Updates to `name` will recreate the domain.\n"
                },
                "nextCheckAt": {
                    "type": "string",
                    "description": "The date and time of the next scheduled check (RFC 3339 format).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the domain is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the domain should be created.\n"
                },
                "reputations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/TemDomainReputation:TemDomainReputation"
                    },
                    "description": "The domain's reputation.\n"
                },
                "revokedAt": {
                    "type": "string",
                    "description": "The date and time of the revocation of the domain (RFC 3339 format).\n"
                },
                "smtpHost": {
                    "type": "string",
                    "description": "The SMTP host to use to send emails.\n"
                },
                "smtpPort": {
                    "type": "integer",
                    "description": "The SMTP port to use to send emails over TLS.\n"
                },
                "smtpPortAlternative": {
                    "type": "integer",
                    "description": "The SMTP port to use to send emails over TLS.\n"
                },
                "smtpPortUnsecure": {
                    "type": "integer",
                    "description": "The SMTP port to use to send emails.\n"
                },
                "smtpsPort": {
                    "type": "integer",
                    "description": "The SMTPS port to use to send emails over TLS Wrapper.\n"
                },
                "smtpsPortAlternative": {
                    "type": "integer",
                    "description": "The SMTPS port to use to send emails over TLS Wrapper.\n"
                },
                "spfConfig": {
                    "type": "string",
                    "description": "The snippet of the SPF record that should be registered in the DNS zone.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the domain's reputation.\n"
                }
            },
            "required": [
                "acceptTos",
                "createdAt",
                "dkimConfig",
                "lastError",
                "lastValidAt",
                "mxBlackhole",
                "name",
                "nextCheckAt",
                "projectId",
                "region",
                "reputations",
                "revokedAt",
                "smtpHost",
                "smtpPort",
                "smtpPortAlternative",
                "smtpPortUnsecure",
                "smtpsPort",
                "smtpsPortAlternative",
                "spfConfig",
                "status"
            ],
            "inputProperties": {
                "acceptTos": {
                    "type": "boolean",
                    "description": "Acceptation of the [Term of Service](https://tem.s3.fr-par.scw.cloud/antispam_policy.pdf).\n\u003e **Important:**  This attribute must be set to `true`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The domain name, must not be used in another Transactional Email Domain.\n\u003e **Important:** Updates to `name` will recreate the domain.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the domain is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the domain should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "acceptTos"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TemDomain resources.\n",
                "properties": {
                    "acceptTos": {
                        "type": "boolean",
                        "description": "Acceptation of the [Term of Service](https://tem.s3.fr-par.scw.cloud/antispam_policy.pdf).\n\u003e **Important:**  This attribute must be set to `true`.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the Transaction Email Domain's creation (RFC 3339 format).\n"
                    },
                    "dkimConfig": {
                        "type": "string",
                        "description": "The DKIM public key, as should be recorded in the DNS zone.\n"
                    },
                    "lastError": {
                        "type": "string",
                        "description": "The error message if the last check failed.\n"
                    },
                    "lastValidAt": {
                        "type": "string",
                        "description": "The date and time the domain was last found to be valid (RFC 3339 format).\n"
                    },
                    "mxBlackhole": {
                        "type": "string",
                        "description": "The Scaleway's blackhole MX server to use if you do not have one.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The domain name, must not be used in another Transactional Email Domain.\n\u003e **Important:** Updates to `name` will recreate the domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "nextCheckAt": {
                        "type": "string",
                        "description": "The date and time of the next scheduled check (RFC 3339 format).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the domain is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the domain should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "reputations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/TemDomainReputation:TemDomainReputation"
                        },
                        "description": "The domain's reputation.\n"
                    },
                    "revokedAt": {
                        "type": "string",
                        "description": "The date and time of the revocation of the domain (RFC 3339 format).\n"
                    },
                    "smtpHost": {
                        "type": "string",
                        "description": "The SMTP host to use to send emails.\n"
                    },
                    "smtpPort": {
                        "type": "integer",
                        "description": "The SMTP port to use to send emails over TLS.\n"
                    },
                    "smtpPortAlternative": {
                        "type": "integer",
                        "description": "The SMTP port to use to send emails over TLS.\n"
                    },
                    "smtpPortUnsecure": {
                        "type": "integer",
                        "description": "The SMTP port to use to send emails.\n"
                    },
                    "smtpsPort": {
                        "type": "integer",
                        "description": "The SMTPS port to use to send emails over TLS Wrapper.\n"
                    },
                    "smtpsPortAlternative": {
                        "type": "integer",
                        "description": "The SMTPS port to use to send emails over TLS Wrapper.\n"
                    },
                    "spfConfig": {
                        "type": "string",
                        "description": "The snippet of the SPF record that should be registered in the DNS zone.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the domain's reputation.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpc:Vpc": {
            "description": "Creates and manages Scaleway Virtual Private Clouds.\nFor more information, see [the documentation](https://www.scaleway.com/en/docs/network/vpc/concepts/).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst vpc01 = new scaleway.Vpc(\"vpc01\", {tags: [\n    \"demo\",\n    \"terraform\",\n]});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nvpc01 = scaleway.Vpc(\"vpc01\", tags=[\n    \"demo\",\n    \"terraform\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vpc01 = new Scaleway.Vpc(\"vpc01\", new()\n    {\n        Tags = new[]\n        {\n            \"demo\",\n            \"terraform\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewVpc(ctx, \"vpc01\", \u0026scaleway.VpcArgs{\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"demo\"),\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Vpc;\nimport com.pulumi.scaleway.VpcArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc01 = new Vpc(\"vpc01\", VpcArgs.builder()        \n            .tags(            \n                \"demo\",\n                \"terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc01:\n    type: scaleway:Vpc\n    properties:\n      tags:\n        - demo\n        - terraform\n```\n\n\n## Import\n\nVPCs can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpc:Vpc vpc_demo fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date and time of VPC's creation (RFC 3339 format).\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Defines whether the VPC is the default one for its Project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the VPC. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the VPC is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the VPC is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the VPC.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the VPC.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date and time of VPC's last update (RFC 3339 format).\n"
                }
            },
            "required": [
                "createdAt",
                "isDefault",
                "name",
                "organizationId",
                "projectId",
                "region",
                "updatedAt"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the VPC. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the VPC is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the VPC.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the VPC.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vpc resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date and time of VPC's creation (RFC 3339 format).\n"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Defines whether the VPC is the default one for its Project.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the VPC. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the VPC is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the VPC is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region of the VPC.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the VPC.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date and time of VPC's last update (RFC 3339 format).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcGatewayNetwork:VpcGatewayNetwork": {
            "description": "Creates and manages Scaleway VPC Public Gateway Network.\nIt allows attaching Private Networks to the VPC Public Gateway and your DHCP config\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#step-3-attach-private-networks-to-the-vpc-public-gateway).\n\n## Example\n\n### Create a gateway network with DHCP\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {});\nconst gw01 = new scaleway.VpcPublicGatewayIp(\"gw01\", {});\nconst dhcp01 = new scaleway.VpcPublicGatewayDhcp(\"dhcp01\", {\n    subnet: \"192.168.1.0/24\",\n    pushDefaultRoute: true,\n});\nconst pg01 = new scaleway.VpcPublicGateway(\"pg01\", {\n    type: \"VPC-GW-S\",\n    ipId: gw01.id,\n});\nconst main = new scaleway.VpcGatewayNetwork(\"main\", {\n    gatewayId: pg01.id,\n    privateNetworkId: pn01.id,\n    dhcpId: dhcp01.id,\n    cleanupDhcp: true,\n    enableMasquerade: true,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\npn01 = scaleway.VpcPrivateNetwork(\"pn01\")\ngw01 = scaleway.VpcPublicGatewayIp(\"gw01\")\ndhcp01 = scaleway.VpcPublicGatewayDhcp(\"dhcp01\",\n    subnet=\"192.168.1.0/24\",\n    push_default_route=True)\npg01 = scaleway.VpcPublicGateway(\"pg01\",\n    type=\"VPC-GW-S\",\n    ip_id=gw01.id)\nmain = scaleway.VpcGatewayNetwork(\"main\",\n    gateway_id=pg01.id,\n    private_network_id=pn01.id,\n    dhcp_id=dhcp01.id,\n    cleanup_dhcp=True,\n    enable_masquerade=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\");\n\n    var gw01 = new Scaleway.VpcPublicGatewayIp(\"gw01\");\n\n    var dhcp01 = new Scaleway.VpcPublicGatewayDhcp(\"dhcp01\", new()\n    {\n        Subnet = \"192.168.1.0/24\",\n        PushDefaultRoute = true,\n    });\n\n    var pg01 = new Scaleway.VpcPublicGateway(\"pg01\", new()\n    {\n        Type = \"VPC-GW-S\",\n        IpId = gw01.Id,\n    });\n\n    var main = new Scaleway.VpcGatewayNetwork(\"main\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateNetworkId = pn01.Id,\n        DhcpId = dhcp01.Id,\n        CleanupDhcp = true,\n        EnableMasquerade = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgw01, err := scaleway.NewVpcPublicGatewayIp(ctx, \"gw01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdhcp01, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"dhcp01\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet:           pulumi.String(\"192.168.1.0/24\"),\n\t\t\tPushDefaultRoute: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpg01, err := scaleway.NewVpcPublicGateway(ctx, \"pg01\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t\tIpId: gw01.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcGatewayNetwork(ctx, \"main\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pg01.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tDhcpId:           dhcp01.ID(),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn01 = new VpcPrivateNetwork(\"pn01\");\n\n        var gw01 = new VpcPublicGatewayIp(\"gw01\");\n\n        var dhcp01 = new VpcPublicGatewayDhcp(\"dhcp01\", VpcPublicGatewayDhcpArgs.builder()        \n            .subnet(\"192.168.1.0/24\")\n            .pushDefaultRoute(true)\n            .build());\n\n        var pg01 = new VpcPublicGateway(\"pg01\", VpcPublicGatewayArgs.builder()        \n            .type(\"VPC-GW-S\")\n            .ipId(gw01.id())\n            .build());\n\n        var main = new VpcGatewayNetwork(\"main\", VpcGatewayNetworkArgs.builder()        \n            .gatewayId(pg01.id())\n            .privateNetworkId(pn01.id())\n            .dhcpId(dhcp01.id())\n            .cleanupDhcp(true)\n            .enableMasquerade(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n  gw01:\n    type: scaleway:VpcPublicGatewayIp\n  dhcp01:\n    type: scaleway:VpcPublicGatewayDhcp\n    properties:\n      subnet: 192.168.1.0/24\n      pushDefaultRoute: true\n  pg01:\n    type: scaleway:VpcPublicGateway\n    properties:\n      type: VPC-GW-S\n      ipId: ${gw01.id}\n  main:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${pg01.id}\n      privateNetworkId: ${pn01.id}\n      dhcpId: ${dhcp01.id}\n      cleanupDhcp: true\n      enableMasquerade: true\n```\n\n### Create a gateway network with a static IP address\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {});\nconst pg01 = new scaleway.VpcPublicGateway(\"pg01\", {type: \"VPC-GW-S\"});\nconst main = new scaleway.VpcGatewayNetwork(\"main\", {\n    gatewayId: pg01.id,\n    privateNetworkId: pn01.id,\n    enableDhcp: false,\n    enableMasquerade: true,\n    staticAddress: \"192.168.1.42/24\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\npn01 = scaleway.VpcPrivateNetwork(\"pn01\")\npg01 = scaleway.VpcPublicGateway(\"pg01\", type=\"VPC-GW-S\")\nmain = scaleway.VpcGatewayNetwork(\"main\",\n    gateway_id=pg01.id,\n    private_network_id=pn01.id,\n    enable_dhcp=False,\n    enable_masquerade=True,\n    static_address=\"192.168.1.42/24\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\");\n\n    var pg01 = new Scaleway.VpcPublicGateway(\"pg01\", new()\n    {\n        Type = \"VPC-GW-S\",\n    });\n\n    var main = new Scaleway.VpcGatewayNetwork(\"main\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateNetworkId = pn01.Id,\n        EnableDhcp = false,\n        EnableMasquerade = true,\n        StaticAddress = \"192.168.1.42/24\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpg01, err := scaleway.NewVpcPublicGateway(ctx, \"pg01\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcGatewayNetwork(ctx, \"main\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pg01.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tEnableDhcp:       pulumi.Bool(false),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t\tStaticAddress:    pulumi.String(\"192.168.1.42/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn01 = new VpcPrivateNetwork(\"pn01\");\n\n        var pg01 = new VpcPublicGateway(\"pg01\", VpcPublicGatewayArgs.builder()        \n            .type(\"VPC-GW-S\")\n            .build());\n\n        var main = new VpcGatewayNetwork(\"main\", VpcGatewayNetworkArgs.builder()        \n            .gatewayId(pg01.id())\n            .privateNetworkId(pn01.id())\n            .enableDhcp(false)\n            .enableMasquerade(true)\n            .staticAddress(\"192.168.1.42/24\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n  pg01:\n    type: scaleway:VpcPublicGateway\n    properties:\n      type: VPC-GW-S\n  main:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${pg01.id}\n      privateNetworkId: ${pn01.id}\n      enableDhcp: false\n      enableMasquerade: true\n      staticAddress: 192.168.1.42/24\n```\n\n### Create a gateway network with IPAM config\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst vpc01 = new scaleway.Vpc(\"vpc01\", {});\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {\n    ipv4Subnet: {\n        subnet: \"172.16.64.0/22\",\n    },\n    vpcId: vpc01.id,\n});\nconst pg01 = new scaleway.VpcPublicGateway(\"pg01\", {type: \"VPC-GW-S\"});\nconst main = new scaleway.VpcGatewayNetwork(\"main\", {\n    gatewayId: pg01.id,\n    privateNetworkId: pn01.id,\n    enableMasquerade: true,\n    ipamConfigs: [{\n        pushDefaultRoute: true,\n    }],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nvpc01 = scaleway.Vpc(\"vpc01\")\npn01 = scaleway.VpcPrivateNetwork(\"pn01\",\n    ipv4_subnet=scaleway.VpcPrivateNetworkIpv4SubnetArgs(\n        subnet=\"172.16.64.0/22\",\n    ),\n    vpc_id=vpc01.id)\npg01 = scaleway.VpcPublicGateway(\"pg01\", type=\"VPC-GW-S\")\nmain = scaleway.VpcGatewayNetwork(\"main\",\n    gateway_id=pg01.id,\n    private_network_id=pn01.id,\n    enable_masquerade=True,\n    ipam_configs=[scaleway.VpcGatewayNetworkIpamConfigArgs(\n        push_default_route=True,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vpc01 = new Scaleway.Vpc(\"vpc01\");\n\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        Ipv4Subnet = new Scaleway.Inputs.VpcPrivateNetworkIpv4SubnetArgs\n        {\n            Subnet = \"172.16.64.0/22\",\n        },\n        VpcId = vpc01.Id,\n    });\n\n    var pg01 = new Scaleway.VpcPublicGateway(\"pg01\", new()\n    {\n        Type = \"VPC-GW-S\",\n    });\n\n    var main = new Scaleway.VpcGatewayNetwork(\"main\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateNetworkId = pn01.Id,\n        EnableMasquerade = true,\n        IpamConfigs = new[]\n        {\n            new Scaleway.Inputs.VpcGatewayNetworkIpamConfigArgs\n            {\n                PushDefaultRoute = true,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvpc01, err := scaleway.NewVpc(ctx, \"vpc01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tIpv4Subnet: \u0026scaleway.VpcPrivateNetworkIpv4SubnetArgs{\n\t\t\t\tSubnet: pulumi.String(\"172.16.64.0/22\"),\n\t\t\t},\n\t\t\tVpcId: vpc01.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpg01, err := scaleway.NewVpcPublicGateway(ctx, \"pg01\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcGatewayNetwork(ctx, \"main\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pg01.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t\tIpamConfigs: scaleway.VpcGatewayNetworkIpamConfigArray{\n\t\t\t\t\u0026scaleway.VpcGatewayNetworkIpamConfigArgs{\n\t\t\t\t\tPushDefaultRoute: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Vpc;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv4SubnetArgs;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport com.pulumi.scaleway.inputs.VpcGatewayNetworkIpamConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc01 = new Vpc(\"vpc01\");\n\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()        \n            .ipv4Subnet(VpcPrivateNetworkIpv4SubnetArgs.builder()\n                .subnet(\"172.16.64.0/22\")\n                .build())\n            .vpcId(vpc01.id())\n            .build());\n\n        var pg01 = new VpcPublicGateway(\"pg01\", VpcPublicGatewayArgs.builder()        \n            .type(\"VPC-GW-S\")\n            .build());\n\n        var main = new VpcGatewayNetwork(\"main\", VpcGatewayNetworkArgs.builder()        \n            .gatewayId(pg01.id())\n            .privateNetworkId(pn01.id())\n            .enableMasquerade(true)\n            .ipamConfigs(VpcGatewayNetworkIpamConfigArgs.builder()\n                .pushDefaultRoute(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc01:\n    type: scaleway:Vpc\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      ipv4Subnet:\n        subnet: 172.16.64.0/22\n      vpcId: ${vpc01.id}\n  pg01:\n    type: scaleway:VpcPublicGateway\n    properties:\n      type: VPC-GW-S\n  main:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${pg01.id}\n      privateNetworkId: ${pn01.id}\n      enableMasquerade: true\n      ipamConfigs:\n        - pushDefaultRoute: true\n```\n\n\n## Import\n\nGateway network can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcGatewayNetwork:VpcGatewayNetwork main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "cleanupDhcp": {
                    "type": "boolean",
                    "description": "Remove DHCP config on this network on destroy. It requires DHCP id.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the gateway network.\n"
                },
                "dhcpId": {
                    "type": "string",
                    "description": "The ID of the public gateway DHCP config. Only one of `dhcp_id`, `static_address` and `ipam_config` should be specified.\n"
                },
                "enableDhcp": {
                    "type": "boolean",
                    "description": "Enable DHCP config on this network. It requires DHCP id.\n"
                },
                "enableMasquerade": {
                    "type": "boolean",
                    "description": "Enable masquerade on this network\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "The ID of the public gateway.\n"
                },
                "ipamConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/VpcGatewayNetworkIpamConfig:VpcGatewayNetworkIpamConfig"
                    },
                    "description": "Auto-configure the Gateway Network using Scaleway's IPAM (IP address management service).\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The mac address of the creation of the gateway network.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network.\n"
                },
                "staticAddress": {
                    "type": "string",
                    "description": "Enable DHCP config on this network. Only one of `dhcp_id`, `static_address` and `ipam_config` should be specified.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Public Gateway's connection to the Private Network.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the gateway network.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the gateway network should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "gatewayId",
                "macAddress",
                "privateNetworkId",
                "staticAddress",
                "status",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "cleanupDhcp": {
                    "type": "boolean",
                    "description": "Remove DHCP config on this network on destroy. It requires DHCP id.\n"
                },
                "dhcpId": {
                    "type": "string",
                    "description": "The ID of the public gateway DHCP config. Only one of `dhcp_id`, `static_address` and `ipam_config` should be specified.\n"
                },
                "enableDhcp": {
                    "type": "boolean",
                    "description": "Enable DHCP config on this network. It requires DHCP id.\n"
                },
                "enableMasquerade": {
                    "type": "boolean",
                    "description": "Enable masquerade on this network\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "The ID of the public gateway.\n"
                },
                "ipamConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/VpcGatewayNetworkIpamConfig:VpcGatewayNetworkIpamConfig"
                    },
                    "description": "Auto-configure the Gateway Network using Scaleway's IPAM (IP address management service).\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network.\n"
                },
                "staticAddress": {
                    "type": "string",
                    "description": "Enable DHCP config on this network. Only one of `dhcp_id`, `static_address` and `ipam_config` should be specified.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the gateway network should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "gatewayId",
                "privateNetworkId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcGatewayNetwork resources.\n",
                "properties": {
                    "cleanupDhcp": {
                        "type": "boolean",
                        "description": "Remove DHCP config on this network on destroy. It requires DHCP id.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the gateway network.\n"
                    },
                    "dhcpId": {
                        "type": "string",
                        "description": "The ID of the public gateway DHCP config. Only one of `dhcp_id`, `static_address` and `ipam_config` should be specified.\n"
                    },
                    "enableDhcp": {
                        "type": "boolean",
                        "description": "Enable DHCP config on this network. It requires DHCP id.\n"
                    },
                    "enableMasquerade": {
                        "type": "boolean",
                        "description": "Enable masquerade on this network\n"
                    },
                    "gatewayId": {
                        "type": "string",
                        "description": "The ID of the public gateway.\n"
                    },
                    "ipamConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/VpcGatewayNetworkIpamConfig:VpcGatewayNetworkIpamConfig"
                        },
                        "description": "Auto-configure the Gateway Network using Scaleway's IPAM (IP address management service).\n"
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "The mac address of the creation of the gateway network.\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "The ID of the private network.\n"
                    },
                    "staticAddress": {
                        "type": "string",
                        "description": "Enable DHCP config on this network. Only one of `dhcp_id`, `static_address` and `ipam_config` should be specified.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Public Gateway's connection to the Private Network.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the gateway network.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the gateway network should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPrivateNetwork:VpcPrivateNetwork": {
            "description": "Creates and manages Scaleway VPC Private Networks.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc/api/#private-networks-ac2df4).\n\n## Example\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst pnPriv = new scaleway.VpcPrivateNetwork(\"pnPriv\", {tags: [\n    \"demo\",\n    \"terraform\",\n]});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\npn_priv = scaleway.VpcPrivateNetwork(\"pnPriv\", tags=[\n    \"demo\",\n    \"terraform\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pnPriv = new Scaleway.VpcPrivateNetwork(\"pnPriv\", new()\n    {\n        Tags = new[]\n        {\n            \"demo\",\n            \"terraform\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewVpcPrivateNetwork(ctx, \"pnPriv\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"demo\"),\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pnPriv = new VpcPrivateNetwork(\"pnPriv\", VpcPrivateNetworkArgs.builder()        \n            .tags(            \n                \"demo\",\n                \"terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pnPriv:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      tags:\n        - demo\n        - terraform\n```\n\n### With subnets\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst pnPriv = new scaleway.VpcPrivateNetwork(\"pnPriv\", {\n    ipv4Subnet: {\n        subnet: \"192.168.0.0/24\",\n    },\n    ipv6Subnets: [\n        {\n            subnet: \"fd46:78ab:30b8:177c::/64\",\n        },\n        {\n            subnet: \"fd46:78ab:30b8:c7df::/64\",\n        },\n    ],\n    tags: [\n        \"demo\",\n        \"terraform\",\n    ],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\npn_priv = scaleway.VpcPrivateNetwork(\"pnPriv\",\n    ipv4_subnet=scaleway.VpcPrivateNetworkIpv4SubnetArgs(\n        subnet=\"192.168.0.0/24\",\n    ),\n    ipv6_subnets=[\n        scaleway.VpcPrivateNetworkIpv6SubnetArgs(\n            subnet=\"fd46:78ab:30b8:177c::/64\",\n        ),\n        scaleway.VpcPrivateNetworkIpv6SubnetArgs(\n            subnet=\"fd46:78ab:30b8:c7df::/64\",\n        ),\n    ],\n    tags=[\n        \"demo\",\n        \"terraform\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pnPriv = new Scaleway.VpcPrivateNetwork(\"pnPriv\", new()\n    {\n        Ipv4Subnet = new Scaleway.Inputs.VpcPrivateNetworkIpv4SubnetArgs\n        {\n            Subnet = \"192.168.0.0/24\",\n        },\n        Ipv6Subnets = new[]\n        {\n            new Scaleway.Inputs.VpcPrivateNetworkIpv6SubnetArgs\n            {\n                Subnet = \"fd46:78ab:30b8:177c::/64\",\n            },\n            new Scaleway.Inputs.VpcPrivateNetworkIpv6SubnetArgs\n            {\n                Subnet = \"fd46:78ab:30b8:c7df::/64\",\n            },\n        },\n        Tags = new[]\n        {\n            \"demo\",\n            \"terraform\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewVpcPrivateNetwork(ctx, \"pnPriv\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tIpv4Subnet: \u0026scaleway.VpcPrivateNetworkIpv4SubnetArgs{\n\t\t\t\tSubnet: pulumi.String(\"192.168.0.0/24\"),\n\t\t\t},\n\t\t\tIpv6Subnets: scaleway.VpcPrivateNetworkIpv6SubnetArray{\n\t\t\t\t\u0026scaleway.VpcPrivateNetworkIpv6SubnetArgs{\n\t\t\t\t\tSubnet: pulumi.String(\"fd46:78ab:30b8:177c::/64\"),\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.VpcPrivateNetworkIpv6SubnetArgs{\n\t\t\t\t\tSubnet: pulumi.String(\"fd46:78ab:30b8:c7df::/64\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"demo\"),\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv4SubnetArgs;\nimport com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv6SubnetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pnPriv = new VpcPrivateNetwork(\"pnPriv\", VpcPrivateNetworkArgs.builder()        \n            .ipv4Subnet(VpcPrivateNetworkIpv4SubnetArgs.builder()\n                .subnet(\"192.168.0.0/24\")\n                .build())\n            .ipv6Subnets(            \n                VpcPrivateNetworkIpv6SubnetArgs.builder()\n                    .subnet(\"fd46:78ab:30b8:177c::/64\")\n                    .build(),\n                VpcPrivateNetworkIpv6SubnetArgs.builder()\n                    .subnet(\"fd46:78ab:30b8:c7df::/64\")\n                    .build())\n            .tags(            \n                \"demo\",\n                \"terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pnPriv:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      ipv4Subnet:\n        subnet: 192.168.0.0/24\n      ipv6Subnets:\n        - subnet: fd46:78ab:30b8:177c::/64\n        - subnet: fd46:78ab:30b8:c7df::/64\n      tags:\n        - demo\n        - terraform\n```\n\n\n## Import\n\nPrivate networks can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcPrivateNetwork:VpcPrivateNetwork vpc_demo fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the subnet.\n"
                },
                "ipv4Subnet": {
                    "$ref": "#/types/scaleway:index/VpcPrivateNetworkIpv4Subnet:VpcPrivateNetworkIpv4Subnet",
                    "description": "The IPv4 subnet to associate with the private network.\n"
                },
                "ipv6Subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/VpcPrivateNetworkIpv6Subnet:VpcPrivateNetworkIpv6Subnet"
                    },
                    "description": "The IPv6 subnets to associate with the private network.\n"
                },
                "isRegional": {
                    "type": "boolean",
                    "description": "The private networks are necessarily regional now.\n",
                    "deprecationMessage": "This field is deprecated and will be removed in the next major version"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the private network. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the private network is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the private network is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the private network.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the private network.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the subnet.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC in which to create the private network.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "please use `region` instead - (Defaults to provider `zone`) The zone in which the private network should be created.\n",
                    "deprecationMessage": "This field is deprecated and will be removed in the next major version, please use `region` instead"
                }
            },
            "required": [
                "createdAt",
                "ipv4Subnet",
                "ipv6Subnets",
                "isRegional",
                "name",
                "organizationId",
                "projectId",
                "region",
                "updatedAt",
                "vpcId",
                "zone"
            ],
            "inputProperties": {
                "ipv4Subnet": {
                    "$ref": "#/types/scaleway:index/VpcPrivateNetworkIpv4Subnet:VpcPrivateNetworkIpv4Subnet",
                    "description": "The IPv4 subnet to associate with the private network.\n"
                },
                "ipv6Subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/VpcPrivateNetworkIpv6Subnet:VpcPrivateNetworkIpv6Subnet"
                    },
                    "description": "The IPv6 subnets to associate with the private network.\n"
                },
                "isRegional": {
                    "type": "boolean",
                    "description": "The private networks are necessarily regional now.\n",
                    "deprecationMessage": "This field is deprecated and will be removed in the next major version"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the private network. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the private network is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the private network.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the private network.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC in which to create the private network.\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "please use `region` instead - (Defaults to provider `zone`) The zone in which the private network should be created.\n",
                    "deprecationMessage": "This field is deprecated and will be removed in the next major version, please use `region` instead"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPrivateNetwork resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the subnet.\n"
                    },
                    "ipv4Subnet": {
                        "$ref": "#/types/scaleway:index/VpcPrivateNetworkIpv4Subnet:VpcPrivateNetworkIpv4Subnet",
                        "description": "The IPv4 subnet to associate with the private network.\n"
                    },
                    "ipv6Subnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/VpcPrivateNetworkIpv6Subnet:VpcPrivateNetworkIpv6Subnet"
                        },
                        "description": "The IPv6 subnets to associate with the private network.\n"
                    },
                    "isRegional": {
                        "type": "boolean",
                        "description": "The private networks are necessarily regional now.\n",
                        "deprecationMessage": "This field is deprecated and will be removed in the next major version"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the private network. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the private network is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the private network is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region of the private network.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the private network.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the subnet.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The VPC in which to create the private network.\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "please use `region` instead - (Defaults to provider `zone`) The zone in which the private network should be created.\n",
                        "deprecationMessage": "This field is deprecated and will be removed in the next major version, please use `region` instead"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGateway:VpcPublicGateway": {
            "description": "Creates and manages Scaleway VPC Public Gateway.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.VpcPublicGateway(\"main\", {\n    tags: [\n        \"demo\",\n        \"terraform\",\n    ],\n    type: \"VPC-GW-S\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.VpcPublicGateway(\"main\",\n    tags=[\n        \"demo\",\n        \"terraform\",\n    ],\n    type=\"VPC-GW-S\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGateway(\"main\", new()\n    {\n        Tags = new[]\n        {\n            \"demo\",\n            \"terraform\",\n        },\n        Type = \"VPC-GW-S\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewVpcPublicGateway(ctx, \"main\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"demo\"),\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGateway(\"main\", VpcPublicGatewayArgs.builder()        \n            .tags(            \n                \"demo\",\n                \"terraform\")\n            .type(\"VPC-GW-S\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPublicGateway\n    properties:\n      tags:\n        - demo\n        - terraform\n      type: VPC-GW-S\n```\n\n\n## Import\n\nPublic gateway can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcPublicGateway:VpcPublicGateway main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "bastionEnabled": {
                    "type": "boolean",
                    "description": "Enable SSH bastion on the gateway\n"
                },
                "bastionPort": {
                    "type": "integer",
                    "description": "The port on which the SSH bastion will listen.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the public gateway.\n"
                },
                "enableSmtp": {
                    "type": "boolean",
                    "description": "Enable SMTP on the gateway\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "attach an existing flexible IP to the gateway\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the public gateway. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the public gateway is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway is associated with.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the public gateway.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the public gateway.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The gateway type.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the public gateway.\n"
                },
                "upstreamDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "override the gateway's default recursive DNS servers, if DNS features are enabled.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway should be created.\n"
                }
            },
            "required": [
                "bastionPort",
                "createdAt",
                "enableSmtp",
                "ipId",
                "name",
                "organizationId",
                "projectId",
                "status",
                "type",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "bastionEnabled": {
                    "type": "boolean",
                    "description": "Enable SSH bastion on the gateway\n"
                },
                "bastionPort": {
                    "type": "integer",
                    "description": "The port on which the SSH bastion will listen.\n"
                },
                "enableSmtp": {
                    "type": "boolean",
                    "description": "Enable SMTP on the gateway\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "attach an existing flexible IP to the gateway\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the public gateway. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the public gateway.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The gateway type.\n",
                    "willReplaceOnChanges": true
                },
                "upstreamDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "override the gateway's default recursive DNS servers, if DNS features are enabled.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGateway resources.\n",
                "properties": {
                    "bastionEnabled": {
                        "type": "boolean",
                        "description": "Enable SSH bastion on the gateway\n"
                    },
                    "bastionPort": {
                        "type": "integer",
                        "description": "The port on which the SSH bastion will listen.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the public gateway.\n"
                    },
                    "enableSmtp": {
                        "type": "boolean",
                        "description": "Enable SMTP on the gateway\n"
                    },
                    "ipId": {
                        "type": "string",
                        "description": "attach an existing flexible IP to the gateway\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the public gateway. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the public gateway is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the public gateway is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the public gateway.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the public gateway.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The gateway type.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the public gateway.\n"
                    },
                    "upstreamDnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "override the gateway's default recursive DNS servers, if DNS features are enabled.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the public gateway should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGatewayDhcp:VpcPublicGatewayDhcp": {
            "description": "Creates and manages Scaleway VPC Public Gateway DHCP.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#dhcp-c05544).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.VpcPublicGatewayDhcp(\"main\", {subnet: \"192.168.1.0/24\"});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.VpcPublicGatewayDhcp(\"main\", subnet=\"192.168.1.0/24\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGatewayDhcp(\"main\", new()\n    {\n        Subnet = \"192.168.1.0/24\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"main\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGatewayDhcp(\"main\", VpcPublicGatewayDhcpArgs.builder()        \n            .subnet(\"192.168.1.0/24\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPublicGatewayDhcp\n    properties:\n      subnet: 192.168.1.0/24\n```\n\n\n## Import\n\nPublic gateway DHCP config can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcPublicGatewayDhcp:VpcPublicGatewayDhcp main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP address of the public gateway DHCP config.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the public gateway DHCP config.\n"
                },
                "dnsLocalName": {
                    "type": "string",
                    "description": "TLD given to hostnames in the Private Network. Allowed characters are `a-z0-9-.`. Defaults to the slugified Private Network name if created along a GatewayNetwork, or else to `priv`.\n"
                },
                "dnsSearches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional DNS search paths\n"
                },
                "dnsServersOverrides": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Override the DNS server list pushed to DHCP clients, instead of the gateway itself\n"
                },
                "enableDynamic": {
                    "type": "boolean",
                    "description": "Whether to enable dynamic pooling of IPs. By turning the dynamic pool off, only pre-existing DHCP reservations will be handed out. Defaults to `true`.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the public gateway DHCP config is associated with.\n"
                },
                "poolHigh": {
                    "type": "string",
                    "description": "High IP (excluded) of the dynamic address pool. Defaults to the last address of the subnet.\n"
                },
                "poolLow": {
                    "type": "string",
                    "description": "Low IP (included) of the dynamic address pool. Defaults to the second address of the subnet.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway DHCP config is associated with.\n"
                },
                "pushDefaultRoute": {
                    "type": "boolean",
                    "description": "Whether the gateway should push a default route to DHCP clients or only hand out IPs. Defaults to `true`.\n"
                },
                "pushDnsServer": {
                    "type": "boolean",
                    "description": "Whether the gateway should push custom DNS servers to clients. This allows for instance hostname \u003e IP resolution. Defaults to `true`.\n"
                },
                "rebindTimer": {
                    "type": "integer",
                    "description": "After how long, in seconds, a DHCP client will query for a new lease if previous renews fail. Must be 30s lower than `valid_lifetime`. Defaults to 51m (3060s).\n"
                },
                "renewTimer": {
                    "type": "integer",
                    "description": "After how long, in seconds, a renewal will be attempted. Must be 30s lower than `rebind_timer`. Defaults to 50m (3000s).\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet to associate with the public gateway DHCP config.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the public gateway DHCP config.\n"
                },
                "validLifetime": {
                    "type": "integer",
                    "description": "For how long, in seconds, will DHCP entries will be valid. Defaults to 1h (3600s).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n"
                }
            },
            "required": [
                "address",
                "createdAt",
                "dnsLocalName",
                "dnsSearches",
                "dnsServersOverrides",
                "enableDynamic",
                "organizationId",
                "poolHigh",
                "poolLow",
                "projectId",
                "pushDefaultRoute",
                "pushDnsServer",
                "rebindTimer",
                "renewTimer",
                "subnet",
                "updatedAt",
                "validLifetime",
                "zone"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The IP address of the public gateway DHCP config.\n"
                },
                "dnsLocalName": {
                    "type": "string",
                    "description": "TLD given to hostnames in the Private Network. Allowed characters are `a-z0-9-.`. Defaults to the slugified Private Network name if created along a GatewayNetwork, or else to `priv`.\n"
                },
                "dnsSearches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional DNS search paths\n"
                },
                "dnsServersOverrides": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Override the DNS server list pushed to DHCP clients, instead of the gateway itself\n"
                },
                "enableDynamic": {
                    "type": "boolean",
                    "description": "Whether to enable dynamic pooling of IPs. By turning the dynamic pool off, only pre-existing DHCP reservations will be handed out. Defaults to `true`.\n"
                },
                "poolHigh": {
                    "type": "string",
                    "description": "High IP (excluded) of the dynamic address pool. Defaults to the last address of the subnet.\n"
                },
                "poolLow": {
                    "type": "string",
                    "description": "Low IP (included) of the dynamic address pool. Defaults to the second address of the subnet.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway DHCP config is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "pushDefaultRoute": {
                    "type": "boolean",
                    "description": "Whether the gateway should push a default route to DHCP clients or only hand out IPs. Defaults to `true`.\n"
                },
                "pushDnsServer": {
                    "type": "boolean",
                    "description": "Whether the gateway should push custom DNS servers to clients. This allows for instance hostname \u003e IP resolution. Defaults to `true`.\n"
                },
                "rebindTimer": {
                    "type": "integer",
                    "description": "After how long, in seconds, a DHCP client will query for a new lease if previous renews fail. Must be 30s lower than `valid_lifetime`. Defaults to 51m (3060s).\n"
                },
                "renewTimer": {
                    "type": "integer",
                    "description": "After how long, in seconds, a renewal will be attempted. Must be 30s lower than `rebind_timer`. Defaults to 50m (3000s).\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet to associate with the public gateway DHCP config.\n"
                },
                "validLifetime": {
                    "type": "integer",
                    "description": "For how long, in seconds, will DHCP entries will be valid. Defaults to 1h (3600s).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "subnet"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGatewayDhcp resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address of the public gateway DHCP config.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the public gateway DHCP config.\n"
                    },
                    "dnsLocalName": {
                        "type": "string",
                        "description": "TLD given to hostnames in the Private Network. Allowed characters are `a-z0-9-.`. Defaults to the slugified Private Network name if created along a GatewayNetwork, or else to `priv`.\n"
                    },
                    "dnsSearches": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Additional DNS search paths\n"
                    },
                    "dnsServersOverrides": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Override the DNS server list pushed to DHCP clients, instead of the gateway itself\n"
                    },
                    "enableDynamic": {
                        "type": "boolean",
                        "description": "Whether to enable dynamic pooling of IPs. By turning the dynamic pool off, only pre-existing DHCP reservations will be handed out. Defaults to `true`.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the public gateway DHCP config is associated with.\n"
                    },
                    "poolHigh": {
                        "type": "string",
                        "description": "High IP (excluded) of the dynamic address pool. Defaults to the last address of the subnet.\n"
                    },
                    "poolLow": {
                        "type": "string",
                        "description": "Low IP (included) of the dynamic address pool. Defaults to the second address of the subnet.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the public gateway DHCP config is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "pushDefaultRoute": {
                        "type": "boolean",
                        "description": "Whether the gateway should push a default route to DHCP clients or only hand out IPs. Defaults to `true`.\n"
                    },
                    "pushDnsServer": {
                        "type": "boolean",
                        "description": "Whether the gateway should push custom DNS servers to clients. This allows for instance hostname \u003e IP resolution. Defaults to `true`.\n"
                    },
                    "rebindTimer": {
                        "type": "integer",
                        "description": "After how long, in seconds, a DHCP client will query for a new lease if previous renews fail. Must be 30s lower than `valid_lifetime`. Defaults to 51m (3060s).\n"
                    },
                    "renewTimer": {
                        "type": "integer",
                        "description": "After how long, in seconds, a renewal will be attempted. Must be 30s lower than `rebind_timer`. Defaults to 50m (3000s).\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "The subnet to associate with the public gateway DHCP config.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the public gateway DHCP config.\n"
                    },
                    "validLifetime": {
                        "type": "integer",
                        "description": "For how long, in seconds, will DHCP entries will be valid. Defaults to 1h (3600s).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGatewayDhcpReservation:VpcPublicGatewayDhcpReservation": {
            "description": "Creates and manages the [Scaleway DHCP Reservations](https://www.scaleway.com/en/docs/network/vpc/concepts/#dhcp).\n\nThe static associations are used to assign IP addresses based on the MAC addresses of the Instance.\n\nStatically assigned IP addresses should fall within the configured subnet, but be outside of the dynamic range.\n\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#dhcp-c05544) and [configuration guide](https://www.scaleway.com/en/docs/network/vpc/how-to/configure-a-public-gateway/#how-to-review-and-configure-dhcp).\n\n[DHCP reservations](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#dhcp-entries-e40fb6) hold both dynamic DHCP leases (IP addresses dynamically assigned by the gateway to instances) and static user-created DHCP reservations.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainVpcPrivateNetwork = new scaleway.VpcPrivateNetwork(\"mainVpcPrivateNetwork\", {});\nconst mainInstanceServer = new scaleway.InstanceServer(\"mainInstanceServer\", {\n    image: \"ubuntu_jammy\",\n    type: \"DEV1-S\",\n    zone: \"fr-par-1\",\n    privateNetworks: [{\n        pnId: mainVpcPrivateNetwork.id,\n    }],\n});\nconst mainVpcPublicGatewayIp = new scaleway.VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\", {});\nconst mainVpcPublicGatewayDhcp = new scaleway.VpcPublicGatewayDhcp(\"mainVpcPublicGatewayDhcp\", {subnet: \"192.168.1.0/24\"});\nconst mainVpcPublicGateway = new scaleway.VpcPublicGateway(\"mainVpcPublicGateway\", {\n    type: \"VPC-GW-S\",\n    ipId: mainVpcPublicGatewayIp.id,\n});\nconst mainVpcGatewayNetwork = new scaleway.VpcGatewayNetwork(\"mainVpcGatewayNetwork\", {\n    gatewayId: mainVpcPublicGateway.id,\n    privateNetworkId: mainVpcPrivateNetwork.id,\n    dhcpId: mainVpcPublicGatewayDhcp.id,\n    cleanupDhcp: true,\n    enableMasquerade: true,\n}, {\n    dependsOn: [\n        mainVpcPublicGatewayIp,\n        mainVpcPrivateNetwork,\n    ],\n});\nconst mainVpcPublicGatewayDhcpReservation = new scaleway.VpcPublicGatewayDhcpReservation(\"mainVpcPublicGatewayDhcpReservation\", {\n    gatewayNetworkId: mainVpcGatewayNetwork.id,\n    macAddress: mainInstanceServer.privateNetworks.apply(privateNetworks =\u003e privateNetworks?.[0]?.macAddress),\n    ipAddress: \"192.168.1.1\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain_vpc_private_network = scaleway.VpcPrivateNetwork(\"mainVpcPrivateNetwork\")\nmain_instance_server = scaleway.InstanceServer(\"mainInstanceServer\",\n    image=\"ubuntu_jammy\",\n    type=\"DEV1-S\",\n    zone=\"fr-par-1\",\n    private_networks=[scaleway.InstanceServerPrivateNetworkArgs(\n        pn_id=main_vpc_private_network.id,\n    )])\nmain_vpc_public_gateway_ip = scaleway.VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\")\nmain_vpc_public_gateway_dhcp = scaleway.VpcPublicGatewayDhcp(\"mainVpcPublicGatewayDhcp\", subnet=\"192.168.1.0/24\")\nmain_vpc_public_gateway = scaleway.VpcPublicGateway(\"mainVpcPublicGateway\",\n    type=\"VPC-GW-S\",\n    ip_id=main_vpc_public_gateway_ip.id)\nmain_vpc_gateway_network = scaleway.VpcGatewayNetwork(\"mainVpcGatewayNetwork\",\n    gateway_id=main_vpc_public_gateway.id,\n    private_network_id=main_vpc_private_network.id,\n    dhcp_id=main_vpc_public_gateway_dhcp.id,\n    cleanup_dhcp=True,\n    enable_masquerade=True,\n    opts=pulumi.ResourceOptions(depends_on=[\n            main_vpc_public_gateway_ip,\n            main_vpc_private_network,\n        ]))\nmain_vpc_public_gateway_dhcp_reservation = scaleway.VpcPublicGatewayDhcpReservation(\"mainVpcPublicGatewayDhcpReservation\",\n    gateway_network_id=main_vpc_gateway_network.id,\n    mac_address=main_instance_server.private_networks[0].mac_address,\n    ip_address=\"192.168.1.1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainVpcPrivateNetwork = new Scaleway.VpcPrivateNetwork(\"mainVpcPrivateNetwork\");\n\n    var mainInstanceServer = new Scaleway.InstanceServer(\"mainInstanceServer\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        Type = \"DEV1-S\",\n        Zone = \"fr-par-1\",\n        PrivateNetworks = new[]\n        {\n            new Scaleway.Inputs.InstanceServerPrivateNetworkArgs\n            {\n                PnId = mainVpcPrivateNetwork.Id,\n            },\n        },\n    });\n\n    var mainVpcPublicGatewayIp = new Scaleway.VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\");\n\n    var mainVpcPublicGatewayDhcp = new Scaleway.VpcPublicGatewayDhcp(\"mainVpcPublicGatewayDhcp\", new()\n    {\n        Subnet = \"192.168.1.0/24\",\n    });\n\n    var mainVpcPublicGateway = new Scaleway.VpcPublicGateway(\"mainVpcPublicGateway\", new()\n    {\n        Type = \"VPC-GW-S\",\n        IpId = mainVpcPublicGatewayIp.Id,\n    });\n\n    var mainVpcGatewayNetwork = new Scaleway.VpcGatewayNetwork(\"mainVpcGatewayNetwork\", new()\n    {\n        GatewayId = mainVpcPublicGateway.Id,\n        PrivateNetworkId = mainVpcPrivateNetwork.Id,\n        DhcpId = mainVpcPublicGatewayDhcp.Id,\n        CleanupDhcp = true,\n        EnableMasquerade = true,\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            mainVpcPublicGatewayIp,\n            mainVpcPrivateNetwork,\n        },\n    });\n\n    var mainVpcPublicGatewayDhcpReservation = new Scaleway.VpcPublicGatewayDhcpReservation(\"mainVpcPublicGatewayDhcpReservation\", new()\n    {\n        GatewayNetworkId = mainVpcGatewayNetwork.Id,\n        MacAddress = mainInstanceServer.PrivateNetworks.Apply(privateNetworks =\u003e privateNetworks[0]?.MacAddress),\n        IpAddress = \"192.168.1.1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainVpcPrivateNetwork, err := scaleway.NewVpcPrivateNetwork(ctx, \"mainVpcPrivateNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainInstanceServer, err := scaleway.NewInstanceServer(ctx, \"mainInstanceServer\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tZone:  pulumi.String(\"fr-par-1\"),\n\t\t\tPrivateNetworks: scaleway.InstanceServerPrivateNetworkArray{\n\t\t\t\t\u0026scaleway.InstanceServerPrivateNetworkArgs{\n\t\t\t\t\tPnId: mainVpcPrivateNetwork.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGatewayIp, err := scaleway.NewVpcPublicGatewayIp(ctx, \"mainVpcPublicGatewayIp\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGatewayDhcp, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"mainVpcPublicGatewayDhcp\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGateway, err := scaleway.NewVpcPublicGateway(ctx, \"mainVpcPublicGateway\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t\tIpId: mainVpcPublicGatewayIp.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcGatewayNetwork, err := scaleway.NewVpcGatewayNetwork(ctx, \"mainVpcGatewayNetwork\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        mainVpcPublicGateway.ID(),\n\t\t\tPrivateNetworkId: mainVpcPrivateNetwork.ID(),\n\t\t\tDhcpId:           mainVpcPublicGatewayDhcp.ID(),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmainVpcPublicGatewayIp,\n\t\t\tmainVpcPrivateNetwork,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcPublicGatewayDhcpReservation(ctx, \"mainVpcPublicGatewayDhcpReservation\", \u0026scaleway.VpcPublicGatewayDhcpReservationArgs{\n\t\t\tGatewayNetworkId: mainVpcGatewayNetwork.ID(),\n\t\t\tMacAddress: mainInstanceServer.PrivateNetworks.ApplyT(func(privateNetworks []scaleway.InstanceServerPrivateNetwork) (*string, error) {\n\t\t\t\treturn \u0026privateNetworks[0].MacAddress, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tIpAddress: pulumi.String(\"192.168.1.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerPrivateNetworkArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpReservation;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpReservationArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainVpcPrivateNetwork = new VpcPrivateNetwork(\"mainVpcPrivateNetwork\");\n\n        var mainInstanceServer = new InstanceServer(\"mainInstanceServer\", InstanceServerArgs.builder()        \n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .zone(\"fr-par-1\")\n            .privateNetworks(InstanceServerPrivateNetworkArgs.builder()\n                .pnId(mainVpcPrivateNetwork.id())\n                .build())\n            .build());\n\n        var mainVpcPublicGatewayIp = new VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\");\n\n        var mainVpcPublicGatewayDhcp = new VpcPublicGatewayDhcp(\"mainVpcPublicGatewayDhcp\", VpcPublicGatewayDhcpArgs.builder()        \n            .subnet(\"192.168.1.0/24\")\n            .build());\n\n        var mainVpcPublicGateway = new VpcPublicGateway(\"mainVpcPublicGateway\", VpcPublicGatewayArgs.builder()        \n            .type(\"VPC-GW-S\")\n            .ipId(mainVpcPublicGatewayIp.id())\n            .build());\n\n        var mainVpcGatewayNetwork = new VpcGatewayNetwork(\"mainVpcGatewayNetwork\", VpcGatewayNetworkArgs.builder()        \n            .gatewayId(mainVpcPublicGateway.id())\n            .privateNetworkId(mainVpcPrivateNetwork.id())\n            .dhcpId(mainVpcPublicGatewayDhcp.id())\n            .cleanupDhcp(true)\n            .enableMasquerade(true)\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    mainVpcPublicGatewayIp,\n                    mainVpcPrivateNetwork)\n                .build());\n\n        var mainVpcPublicGatewayDhcpReservation = new VpcPublicGatewayDhcpReservation(\"mainVpcPublicGatewayDhcpReservation\", VpcPublicGatewayDhcpReservationArgs.builder()        \n            .gatewayNetworkId(mainVpcGatewayNetwork.id())\n            .macAddress(mainInstanceServer.privateNetworks().applyValue(privateNetworks -\u003e privateNetworks[0].macAddress()))\n            .ipAddress(\"192.168.1.1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainVpcPrivateNetwork:\n    type: scaleway:VpcPrivateNetwork\n  mainInstanceServer:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n      zone: fr-par-1\n      privateNetworks:\n        - pnId: ${mainVpcPrivateNetwork.id}\n  mainVpcPublicGatewayIp:\n    type: scaleway:VpcPublicGatewayIp\n  mainVpcPublicGatewayDhcp:\n    type: scaleway:VpcPublicGatewayDhcp\n    properties:\n      subnet: 192.168.1.0/24\n  mainVpcPublicGateway:\n    type: scaleway:VpcPublicGateway\n    properties:\n      type: VPC-GW-S\n      ipId: ${mainVpcPublicGatewayIp.id}\n  mainVpcGatewayNetwork:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${mainVpcPublicGateway.id}\n      privateNetworkId: ${mainVpcPrivateNetwork.id}\n      dhcpId: ${mainVpcPublicGatewayDhcp.id}\n      cleanupDhcp: true\n      enableMasquerade: true\n    options:\n      dependson:\n        - ${mainVpcPublicGatewayIp}\n        - ${mainVpcPrivateNetwork}\n  mainVpcPublicGatewayDhcpReservation:\n    type: scaleway:VpcPublicGatewayDhcpReservation\n    properties:\n      gatewayNetworkId: ${mainVpcGatewayNetwork.id}\n      macAddress: ${mainInstanceServer.privateNetworks[0].macAddress}\n      ipAddress: 192.168.1.1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPublic gateway DHCP Reservation config can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcPublicGatewayDhcpReservation:VpcPublicGatewayDhcpReservation main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the public gateway DHCP config.\n"
                },
                "gatewayNetworkId": {
                    "type": "string",
                    "description": "The ID of the owning GatewayNetwork.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The Hostname of the client machine.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address to give to the machine (IP address).\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address to give a static entry to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The reservation type, either static (DHCP reservation) or dynamic (DHCP lease). Possible values are reservation and lease.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the public gateway DHCP config.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "gatewayNetworkId",
                "hostname",
                "ipAddress",
                "macAddress",
                "type",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "gatewayNetworkId": {
                    "type": "string",
                    "description": "The ID of the owning GatewayNetwork.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address to give to the machine (IP address).\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address to give a static entry to.\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "gatewayNetworkId",
                "ipAddress",
                "macAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGatewayDhcpReservation resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the public gateway DHCP config.\n"
                    },
                    "gatewayNetworkId": {
                        "type": "string",
                        "description": "The ID of the owning GatewayNetwork.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The Hostname of the client machine.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address to give to the machine (IP address).\n"
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "The MAC address to give a static entry to.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The reservation type, either static (DHCP reservation) or dynamic (DHCP lease). Possible values are reservation and lease.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the public gateway DHCP config.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGatewayIp:VpcPublicGatewayIp": {
            "description": "Creates and manages Scaleway VPC Public Gateway IP.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#ips-268151).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst main = new scaleway.VpcPublicGatewayIp(\"main\", {reverse: \"tf.example.com\"});\nconst tfA = new scaleway.DomainRecord(\"tfA\", {\n    data: main.address,\n    dnsZone: \"example.com\",\n    priority: 1,\n    ttl: 3600,\n    type: \"A\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain = scaleway.VpcPublicGatewayIp(\"main\", reverse=\"tf.example.com\")\ntf_a = scaleway.DomainRecord(\"tfA\",\n    data=main.address,\n    dns_zone=\"example.com\",\n    priority=1,\n    ttl=3600,\n    type=\"A\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGatewayIp(\"main\", new()\n    {\n        Reverse = \"tf.example.com\",\n    });\n\n    var tfA = new Scaleway.DomainRecord(\"tfA\", new()\n    {\n        Data = main.Address,\n        DnsZone = \"example.com\",\n        Priority = 1,\n        Ttl = 3600,\n        Type = \"A\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPublicGatewayIp(ctx, \"main\", \u0026scaleway.VpcPublicGatewayIpArgs{\n\t\t\tReverse: pulumi.String(\"tf.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"tfA\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:     main.Address,\n\t\t\tDnsZone:  pulumi.String(\"example.com\"),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tTtl:      pulumi.Int(3600),\n\t\t\tType:     pulumi.String(\"A\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.VpcPublicGatewayIpArgs;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGatewayIp(\"main\", VpcPublicGatewayIpArgs.builder()        \n            .reverse(\"tf.example.com\")\n            .build());\n\n        var tfA = new DomainRecord(\"tfA\", DomainRecordArgs.builder()        \n            .data(main.address())\n            .dnsZone(\"example.com\")\n            .priority(1)\n            .ttl(3600)\n            .type(\"A\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tfA:\n    type: scaleway:DomainRecord\n    properties:\n      data: ${main.address}\n      dnsZone: example.com\n      priority: 1\n      ttl: 3600\n      type: A\n  main:\n    type: scaleway:VpcPublicGatewayIp\n    properties:\n      reverse: tf.example.com\n```\n\n\n## Import\n\nPublic gateway can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcPublicGatewayIp:VpcPublicGatewayIp main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP address itself.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the public gateway ip.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the public gateway ip is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway ip is associated with.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain name for the IP address\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the public gateway IP.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the public gateway ip.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway ip should be created.\n"
                }
            },
            "required": [
                "address",
                "createdAt",
                "organizationId",
                "projectId",
                "reverse",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway ip is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain name for the IP address\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the public gateway IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway ip should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGatewayIp resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address itself.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the public gateway ip.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the public gateway ip is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the public gateway ip is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain name for the IP address\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the public gateway IP.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the public gateway ip.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the public gateway ip should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGatewayIpReverseDns:VpcPublicGatewayIpReverseDns": {
            "description": "Manages Scaleway VPC Public Gateways IPs reverse DNS.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#ips-268151).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst mainVpcPublicGatewayIp = new scaleway.VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\", {});\nconst tfA = new scaleway.DomainRecord(\"tfA\", {\n    dnsZone: \"example.com\",\n    type: \"A\",\n    data: mainVpcPublicGatewayIp.address,\n    ttl: 3600,\n    priority: 1,\n});\nconst mainVpcPublicGatewayIpReverseDns = new scaleway.VpcPublicGatewayIpReverseDns(\"mainVpcPublicGatewayIpReverseDns\", {\n    gatewayIpId: mainVpcPublicGatewayIp.id,\n    reverse: \"tf.example.com\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\nmain_vpc_public_gateway_ip = scaleway.VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\")\ntf_a = scaleway.DomainRecord(\"tfA\",\n    dns_zone=\"example.com\",\n    type=\"A\",\n    data=main_vpc_public_gateway_ip.address,\n    ttl=3600,\n    priority=1)\nmain_vpc_public_gateway_ip_reverse_dns = scaleway.VpcPublicGatewayIpReverseDns(\"mainVpcPublicGatewayIpReverseDns\",\n    gateway_ip_id=main_vpc_public_gateway_ip.id,\n    reverse=\"tf.example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainVpcPublicGatewayIp = new Scaleway.VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\");\n\n    var tfA = new Scaleway.DomainRecord(\"tfA\", new()\n    {\n        DnsZone = \"example.com\",\n        Type = \"A\",\n        Data = mainVpcPublicGatewayIp.Address,\n        Ttl = 3600,\n        Priority = 1,\n    });\n\n    var mainVpcPublicGatewayIpReverseDns = new Scaleway.VpcPublicGatewayIpReverseDns(\"mainVpcPublicGatewayIpReverseDns\", new()\n    {\n        GatewayIpId = mainVpcPublicGatewayIp.Id,\n        Reverse = \"tf.example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainVpcPublicGatewayIp, err := scaleway.NewVpcPublicGatewayIp(ctx, \"mainVpcPublicGatewayIp\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"tfA\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone:  pulumi.String(\"example.com\"),\n\t\t\tType:     pulumi.String(\"A\"),\n\t\t\tData:     mainVpcPublicGatewayIp.Address,\n\t\t\tTtl:      pulumi.Int(3600),\n\t\t\tPriority: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcPublicGatewayIpReverseDns(ctx, \"mainVpcPublicGatewayIpReverseDns\", \u0026scaleway.VpcPublicGatewayIpReverseDnsArgs{\n\t\t\tGatewayIpId: mainVpcPublicGatewayIp.ID(),\n\t\t\tReverse:     pulumi.String(\"tf.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayIpReverseDns;\nimport com.pulumi.scaleway.VpcPublicGatewayIpReverseDnsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainVpcPublicGatewayIp = new VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\");\n\n        var tfA = new DomainRecord(\"tfA\", DomainRecordArgs.builder()        \n            .dnsZone(\"example.com\")\n            .type(\"A\")\n            .data(mainVpcPublicGatewayIp.address())\n            .ttl(3600)\n            .priority(1)\n            .build());\n\n        var mainVpcPublicGatewayIpReverseDns = new VpcPublicGatewayIpReverseDns(\"mainVpcPublicGatewayIpReverseDns\", VpcPublicGatewayIpReverseDnsArgs.builder()        \n            .gatewayIpId(mainVpcPublicGatewayIp.id())\n            .reverse(\"tf.example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainVpcPublicGatewayIp:\n    type: scaleway:VpcPublicGatewayIp\n  tfA:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: example.com\n      type: A\n      data: ${mainVpcPublicGatewayIp.address}\n      ttl: 3600\n      priority: 1\n  mainVpcPublicGatewayIpReverseDns:\n    type: scaleway:VpcPublicGatewayIpReverseDns\n    properties:\n      gatewayIpId: ${mainVpcPublicGatewayIp.id}\n      reverse: tf.example.com\n```\n\n\n## Import\n\nPublic gateway IPs reverse DNS can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcPublicGatewayIpReverseDns:VpcPublicGatewayIpReverseDns main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "gatewayIpId": {
                    "type": "string",
                    "description": "The public gateway IP ID\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain name for this IP address\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n"
                }
            },
            "required": [
                "gatewayIpId",
                "reverse",
                "zone"
            ],
            "inputProperties": {
                "gatewayIpId": {
                    "type": "string",
                    "description": "The public gateway IP ID\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain name for this IP address\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "gatewayIpId",
                "reverse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGatewayIpReverseDns resources.\n",
                "properties": {
                    "gatewayIpId": {
                        "type": "string",
                        "description": "The public gateway IP ID\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain name for this IP address\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the IP should be reserved.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGatewayPatRule:VpcPublicGatewayPatRule": {
            "description": "Creates and manages Scaleway VPC Public Gateway PAT (Port Address Translation).\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1#pat-rules-e75d10).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\n\nconst pg01 = new scaleway.VpcPublicGateway(\"pg01\", {type: \"VPC-GW-S\"});\nconst dhcp01 = new scaleway.VpcPublicGatewayDhcp(\"dhcp01\", {subnet: \"192.168.1.0/24\"});\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {});\nconst gn01 = new scaleway.VpcGatewayNetwork(\"gn01\", {\n    gatewayId: pg01.id,\n    privateNetworkId: pn01.id,\n    dhcpId: dhcp01.id,\n    cleanupDhcp: true,\n});\nconst main = new scaleway.VpcPublicGatewayPatRule(\"main\", {\n    gatewayId: pg01.id,\n    privateIp: dhcp01.address,\n    privatePort: 42,\n    publicPort: 42,\n    protocol: \"both\",\n}, {\n    dependsOn: [\n        gn01,\n        pn01,\n    ],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\n\npg01 = scaleway.VpcPublicGateway(\"pg01\", type=\"VPC-GW-S\")\ndhcp01 = scaleway.VpcPublicGatewayDhcp(\"dhcp01\", subnet=\"192.168.1.0/24\")\npn01 = scaleway.VpcPrivateNetwork(\"pn01\")\ngn01 = scaleway.VpcGatewayNetwork(\"gn01\",\n    gateway_id=pg01.id,\n    private_network_id=pn01.id,\n    dhcp_id=dhcp01.id,\n    cleanup_dhcp=True)\nmain = scaleway.VpcPublicGatewayPatRule(\"main\",\n    gateway_id=pg01.id,\n    private_ip=dhcp01.address,\n    private_port=42,\n    public_port=42,\n    protocol=\"both\",\n    opts=pulumi.ResourceOptions(depends_on=[\n            gn01,\n            pn01,\n        ]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pg01 = new Scaleway.VpcPublicGateway(\"pg01\", new()\n    {\n        Type = \"VPC-GW-S\",\n    });\n\n    var dhcp01 = new Scaleway.VpcPublicGatewayDhcp(\"dhcp01\", new()\n    {\n        Subnet = \"192.168.1.0/24\",\n    });\n\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\");\n\n    var gn01 = new Scaleway.VpcGatewayNetwork(\"gn01\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateNetworkId = pn01.Id,\n        DhcpId = dhcp01.Id,\n        CleanupDhcp = true,\n    });\n\n    var main = new Scaleway.VpcPublicGatewayPatRule(\"main\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateIp = dhcp01.Address,\n        PrivatePort = 42,\n        PublicPort = 42,\n        Protocol = \"both\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            gn01,\n            pn01,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpg01, err := scaleway.NewVpcPublicGateway(ctx, \"pg01\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdhcp01, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"dhcp01\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgn01, err := scaleway.NewVpcGatewayNetwork(ctx, \"gn01\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pg01.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tDhcpId:           dhcp01.ID(),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcPublicGatewayPatRule(ctx, \"main\", \u0026scaleway.VpcPublicGatewayPatRuleArgs{\n\t\t\tGatewayId:   pg01.ID(),\n\t\t\tPrivateIp:   dhcp01.Address,\n\t\t\tPrivatePort: pulumi.Int(42),\n\t\t\tPublicPort:  pulumi.Int(42),\n\t\t\tProtocol:    pulumi.String(\"both\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tgn01,\n\t\t\tpn01,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayPatRule;\nimport com.pulumi.scaleway.VpcPublicGatewayPatRuleArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pg01 = new VpcPublicGateway(\"pg01\", VpcPublicGatewayArgs.builder()        \n            .type(\"VPC-GW-S\")\n            .build());\n\n        var dhcp01 = new VpcPublicGatewayDhcp(\"dhcp01\", VpcPublicGatewayDhcpArgs.builder()        \n            .subnet(\"192.168.1.0/24\")\n            .build());\n\n        var pn01 = new VpcPrivateNetwork(\"pn01\");\n\n        var gn01 = new VpcGatewayNetwork(\"gn01\", VpcGatewayNetworkArgs.builder()        \n            .gatewayId(pg01.id())\n            .privateNetworkId(pn01.id())\n            .dhcpId(dhcp01.id())\n            .cleanupDhcp(true)\n            .build());\n\n        var main = new VpcPublicGatewayPatRule(\"main\", VpcPublicGatewayPatRuleArgs.builder()        \n            .gatewayId(pg01.id())\n            .privateIp(dhcp01.address())\n            .privatePort(42)\n            .publicPort(42)\n            .protocol(\"both\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    gn01,\n                    pn01)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pg01:\n    type: scaleway:VpcPublicGateway\n    properties:\n      type: VPC-GW-S\n  dhcp01:\n    type: scaleway:VpcPublicGatewayDhcp\n    properties:\n      subnet: 192.168.1.0/24\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n  gn01:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${pg01.id}\n      privateNetworkId: ${pn01.id}\n      dhcpId: ${dhcp01.id}\n      cleanupDhcp: true\n  main:\n    type: scaleway:VpcPublicGatewayPatRule\n    properties:\n      gatewayId: ${pg01.id}\n      privateIp: ${dhcp01.address}\n      privatePort: 42\n      publicPort: 42\n      protocol: both\n    options:\n      dependson:\n        - ${gn01}\n        - ${pn01}\n```\n\n\n## Import\n\nPublic gateway PAT rules config can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcPublicGatewayPatRule:VpcPublicGatewayPatRule main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the pat rule config.\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "The ID of the public gateway.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the pat rule config is associated with.\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The Private IP to forward data to (IP address).\n"
                },
                "privatePort": {
                    "type": "integer",
                    "description": "The Private port to translate to.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The Protocol the rule should apply to. Possible values are both, tcp and udp.\n"
                },
                "publicPort": {
                    "type": "integer",
                    "description": "The Public port to listen on.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the pat rule config.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "gatewayId",
                "organizationId",
                "privateIp",
                "privatePort",
                "publicPort",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "gatewayId": {
                    "type": "string",
                    "description": "The ID of the public gateway.\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The Private IP to forward data to (IP address).\n"
                },
                "privatePort": {
                    "type": "integer",
                    "description": "The Private port to translate to.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The Protocol the rule should apply to. Possible values are both, tcp and udp.\n"
                },
                "publicPort": {
                    "type": "integer",
                    "description": "The Public port to listen on.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "gatewayId",
                "privateIp",
                "privatePort",
                "publicPort"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGatewayPatRule resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the pat rule config.\n"
                    },
                    "gatewayId": {
                        "type": "string",
                        "description": "The ID of the public gateway.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the pat rule config is associated with.\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The Private IP to forward data to (IP address).\n"
                    },
                    "privatePort": {
                        "type": "integer",
                        "description": "The Private port to translate to.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The Protocol the rule should apply to. Possible values are both, tcp and udp.\n"
                    },
                    "publicPort": {
                        "type": "integer",
                        "description": "The Public port to listen on.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the pat rule config.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/webHosting:WebHosting": {
            "description": "Creates and manages Scaleway Web Hostings.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/webhosting/).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byName = scaleway.getWebHostOffer({\n    name: \"lite\",\n});\nconst main = new scaleway.WebHosting(\"main\", {\n    offerId: byName.then(byName =\u003e byName.offerId),\n    email: \"your@email.com\",\n    domain: \"yourdomain.com\",\n    tags: [\n        \"webhosting\",\n        \"provider\",\n        \"terraform\",\n    ],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_web_host_offer(name=\"lite\")\nmain = scaleway.WebHosting(\"main\",\n    offer_id=by_name.offer_id,\n    email=\"your@email.com\",\n    domain=\"yourdomain.com\",\n    tags=[\n        \"webhosting\",\n        \"provider\",\n        \"terraform\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetWebHostOffer.Invoke(new()\n    {\n        Name = \"lite\",\n    });\n\n    var main = new Scaleway.WebHosting(\"main\", new()\n    {\n        OfferId = byName.Apply(getWebHostOfferResult =\u003e getWebHostOfferResult.OfferId),\n        Email = \"your@email.com\",\n        Domain = \"yourdomain.com\",\n        Tags = new[]\n        {\n            \"webhosting\",\n            \"provider\",\n            \"terraform\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbyName, err := scaleway.GetWebHostOffer(ctx, \u0026scaleway.GetWebHostOfferArgs{\n\t\t\tName: pulumi.StringRef(\"lite\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewWebHosting(ctx, \"main\", \u0026scaleway.WebHostingArgs{\n\t\t\tOfferId: *pulumi.String(byName.OfferId),\n\t\t\tEmail:   pulumi.String(\"your@email.com\"),\n\t\t\tDomain:  pulumi.String(\"yourdomain.com\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"webhosting\"),\n\t\t\t\tpulumi.String(\"provider\"),\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetWebHostOfferArgs;\nimport com.pulumi.scaleway.WebHosting;\nimport com.pulumi.scaleway.WebHostingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getWebHostOffer(GetWebHostOfferArgs.builder()\n            .name(\"lite\")\n            .build());\n\n        var main = new WebHosting(\"main\", WebHostingArgs.builder()        \n            .offerId(byName.applyValue(getWebHostOfferResult -\u003e getWebHostOfferResult.offerId()))\n            .email(\"your@email.com\")\n            .domain(\"yourdomain.com\")\n            .tags(            \n                \"webhosting\",\n                \"provider\",\n                \"terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:WebHosting\n    properties:\n      offerId: ${byName.offerId}\n      email: your@email.com\n      domain: yourdomain.com\n      tags:\n        - webhosting\n        - provider\n        - terraform\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getWebHostOffer\n      Arguments:\n        name: lite\n```\n\n\n## Import\n\nHostings can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/webHosting:WebHosting hosting01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "cpanelUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/WebHostingCpanelUrl:WebHostingCpanelUrl"
                    },
                    "description": "The URL to connect to cPanel Dashboard and to Webmail interface.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date and time of hosting's creation (RFC 3339 format).\n"
                },
                "dnsStatus": {
                    "type": "string",
                    "description": "The DNS status of the hosting.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain name of the hosting.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The contact email of the client for the hosting.\n"
                },
                "offerId": {
                    "type": "string",
                    "description": "The ID of the selected offer for the hosting.\n"
                },
                "offerName": {
                    "type": "string",
                    "description": "The name of the active offer.\n"
                },
                "optionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the selected options for the hosting.\n"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/WebHostingOption:WebHostingOption"
                    },
                    "description": "The active options of the hosting.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the hosting is associated with.\n"
                },
                "platformHostname": {
                    "type": "string",
                    "description": "The hostname of the host platform.\n"
                },
                "platformNumber": {
                    "type": "integer",
                    "description": "The number of the host platform.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the VPC is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the Hosting.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The hosting status.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the hosting.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date and time of hosting's last update (RFC 3339 format).\n"
                },
                "username": {
                    "type": "string",
                    "description": "The main hosting cPanel username.\n"
                }
            },
            "required": [
                "cpanelUrls",
                "createdAt",
                "dnsStatus",
                "domain",
                "email",
                "offerId",
                "offerName",
                "options",
                "organizationId",
                "platformHostname",
                "platformNumber",
                "projectId",
                "region",
                "status",
                "tags",
                "updatedAt",
                "username"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The domain name of the hosting.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The contact email of the client for the hosting.\n"
                },
                "offerId": {
                    "type": "string",
                    "description": "The ID of the selected offer for the hosting.\n"
                },
                "optionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the selected options for the hosting.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the VPC is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the Hosting.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the hosting.\n"
                }
            },
            "requiredInputs": [
                "domain",
                "email",
                "offerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebHosting resources.\n",
                "properties": {
                    "cpanelUrls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/WebHostingCpanelUrl:WebHostingCpanelUrl"
                        },
                        "description": "The URL to connect to cPanel Dashboard and to Webmail interface.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date and time of hosting's creation (RFC 3339 format).\n"
                    },
                    "dnsStatus": {
                        "type": "string",
                        "description": "The DNS status of the hosting.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain name of the hosting.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The contact email of the client for the hosting.\n"
                    },
                    "offerId": {
                        "type": "string",
                        "description": "The ID of the selected offer for the hosting.\n"
                    },
                    "offerName": {
                        "type": "string",
                        "description": "The name of the active offer.\n"
                    },
                    "optionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of the selected options for the hosting.\n"
                    },
                    "options": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/WebHostingOption:WebHostingOption"
                        },
                        "description": "The active options of the hosting.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the hosting is associated with.\n"
                    },
                    "platformHostname": {
                        "type": "string",
                        "description": "The hostname of the host platform.\n"
                    },
                    "platformNumber": {
                        "type": "integer",
                        "description": "The number of the host platform.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the VPC is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region of the Hosting.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The hosting status.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the hosting.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date and time of hosting's last update (RFC 3339 format).\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The main hosting cPanel username.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "scaleway:index/getAccountProject:getAccountProject": {
            "description": "Gets information about an existing Project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byName = scaleway.getAccountProject({\n    name: \"default\",\n});\nconst byId = scaleway.getAccountProject({\n    projectId: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_account_project(name=\"default\")\nby_id = scaleway.get_account_project(project_id=\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetAccountProject.Invoke(new()\n    {\n        Name = \"default\",\n    });\n\n    var byId = Scaleway.GetAccountProject.Invoke(new()\n    {\n        ProjectId = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupAccountProject(ctx, \u0026scaleway.LookupAccountProjectArgs{\n\t\t\tName: pulumi.StringRef(\"default\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupAccountProject(ctx, \u0026scaleway.LookupAccountProjectArgs{\n\t\t\tProjectId: pulumi.StringRef(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetAccountProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getAccountProject(GetAccountProjectArgs.builder()\n            .name(\"default\")\n            .build());\n\n        final var byId = ScalewayFunctions.getAccountProject(GetAccountProjectArgs.builder()\n            .projectId(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getAccountProject\n      Arguments:\n        name: default\n  byId:\n    fn::invoke:\n      Function: scaleway:getAccountProject\n      Arguments:\n        projectId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAccountProject.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Project.\nOnly one of the `name` and `project_id` should be specified.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the Project is associated with.\nIf no default organization_id is set, one must be set explicitly in this datasource\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project.\nOnly one of the `name` and `project_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccountProject.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "projectId",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getAccountSshKey:getAccountSshKey": {
            "description": "Use this data source to get SSH key information based on its ID or name.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myKey = scaleway.getAccountSshKey({\n    sshKeyId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_account_ssh_key(ssh_key_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myKey = Scaleway.GetAccountSshKey.Invoke(new()\n    {\n        SshKeyId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupAccountSshKey(ctx, \u0026scaleway.LookupAccountSshKeyArgs{\n\t\t\tSshKeyId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetAccountSshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = ScalewayFunctions.getAccountSshKey(GetAccountSshKeyArgs.builder()\n            .sshKeyId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    fn::invoke:\n      Function: scaleway:getAccountSshKey\n      Arguments:\n        sshKeyId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAccountSshKey.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The SSH key name. Only one of `name` and `ssh_key_id` should be specified.\n"
                    },
                    "sshKeyId": {
                        "type": "string",
                        "description": "The SSH key id. Only one of `name` and `ssh_key_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccountSshKey.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "disabled": {
                        "type": "boolean"
                    },
                    "fingerprint": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the SSH key is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The SSH public key string\n"
                    },
                    "sshKeyId": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "disabled",
                    "fingerprint",
                    "organizationId",
                    "projectId",
                    "publicKey",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getAvailabilityZones:getAvailabilityZones": {
            "description": "Use this data source to get the available zones information based on its Region.\n\nFor technical and legal reasons, some products are split by Region or by Availability Zones. When using such product,\nyou can choose the location that better fits your need (country, latency, …).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = scaleway.getAvailabilityZones({\n    region: \"nl-ams\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.get_availability_zones(region=\"nl-ams\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Scaleway.GetAvailabilityZones.Invoke(new()\n    {\n        Region = \"nl-ams\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetAvailabilityZones(ctx, \u0026scaleway.GetAvailabilityZonesArgs{\n\t\t\tRegion: pulumi.StringRef(\"nl-ams\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetAvailabilityZonesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = ScalewayFunctions.getAvailabilityZones(GetAvailabilityZonesArgs.builder()\n            .region(\"nl-ams\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  main:\n    fn::invoke:\n      Function: scaleway:getAvailabilityZones\n      Arguments:\n        region: nl-ams\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAvailabilityZones.\n",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "Region is represented as a Geographical area such as France. Defaults: `fr-par`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAvailabilityZones.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of availability zones by regions\n"
                    }
                },
                "type": "object",
                "required": [
                    "zones",
                    "id"
                ]
            }
        },
        "scaleway:index/getBaremetalOffer:getBaremetalOffer": {
            "description": "Gets information about a baremetal offer. For more information, see [the documentation](https://developers.scaleway.com/en/products/baremetal/api).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myOffer = scaleway.getBaremetalOffer({\n    offerId: \"25dcf38b-c90c-4b18-97a2-6956e9d1e113\",\n    zone: \"fr-par-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_offer = scaleway.get_baremetal_offer(offer_id=\"25dcf38b-c90c-4b18-97a2-6956e9d1e113\",\n    zone=\"fr-par-2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myOffer = Scaleway.GetBaremetalOffer.Invoke(new()\n    {\n        OfferId = \"25dcf38b-c90c-4b18-97a2-6956e9d1e113\",\n        Zone = \"fr-par-2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetBaremetalOffer(ctx, \u0026scaleway.GetBaremetalOfferArgs{\n\t\t\tOfferId: pulumi.StringRef(\"25dcf38b-c90c-4b18-97a2-6956e9d1e113\"),\n\t\t\tZone:    pulumi.StringRef(\"fr-par-2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBaremetalOfferArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myOffer = ScalewayFunctions.getBaremetalOffer(GetBaremetalOfferArgs.builder()\n            .offerId(\"25dcf38b-c90c-4b18-97a2-6956e9d1e113\")\n            .zone(\"fr-par-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myOffer:\n    fn::invoke:\n      Function: scaleway:getBaremetalOffer\n      Arguments:\n        offerId: 25dcf38b-c90c-4b18-97a2-6956e9d1e113\n        zone: fr-par-2\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBaremetalOffer.\n",
                "properties": {
                    "includeDisabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "The offer name. Only one of `name` and `offer_id` should be specified.\n"
                    },
                    "offerId": {
                        "type": "string",
                        "description": "The offer id. Only one of `name` and `offer_id` should be specified.\n"
                    },
                    "subscriptionPeriod": {
                        "type": "string",
                        "description": "Period of subscription the desired offer. Should be `hourly` or `monthly`.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the offer should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBaremetalOffer.\n",
                "properties": {
                    "bandwidth": {
                        "type": "integer",
                        "description": "Available Bandwidth with the offer.\n"
                    },
                    "commercialRange": {
                        "type": "string",
                        "description": "Commercial range of the offer.\n"
                    },
                    "cpus": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalOfferCpus:getBaremetalOfferCpus"
                        },
                        "description": "A list of cpu specifications. (Structure is documented below.)\n"
                    },
                    "disks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalOfferDisk:getBaremetalOfferDisk"
                        },
                        "description": "A list of disk specifications. (Structure is documented below.)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeDisabled": {
                        "type": "boolean"
                    },
                    "memories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalOfferMemory:getBaremetalOfferMemory"
                        },
                        "description": "A list of memory specifications. (Structure is documented below.)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the CPU.\n"
                    },
                    "offerId": {
                        "type": "string"
                    },
                    "stock": {
                        "type": "string",
                        "description": "Stock status for this offer. Possible values are: `empty`, `low` or `available`.\n"
                    },
                    "subscriptionPeriod": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "bandwidth",
                    "commercialRange",
                    "cpus",
                    "disks",
                    "memories",
                    "stock",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getBaremetalOption:getBaremetalOption": {
            "description": "Gets information about a baremetal option.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/baremetal/api).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byName = scaleway.getBaremetalOption({\n    name: \"Remote Access\",\n});\nconst byId = scaleway.getBaremetalOption({\n    optionId: \"931df052-d713-4674-8b58-96a63244c8e2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_baremetal_option(name=\"Remote Access\")\nby_id = scaleway.get_baremetal_option(option_id=\"931df052-d713-4674-8b58-96a63244c8e2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetBaremetalOption.Invoke(new()\n    {\n        Name = \"Remote Access\",\n    });\n\n    var byId = Scaleway.GetBaremetalOption.Invoke(new()\n    {\n        OptionId = \"931df052-d713-4674-8b58-96a63244c8e2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetBaremetalOption(ctx, \u0026scaleway.GetBaremetalOptionArgs{\n\t\t\tName: pulumi.StringRef(\"Remote Access\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.GetBaremetalOption(ctx, \u0026scaleway.GetBaremetalOptionArgs{\n\t\t\tOptionId: pulumi.StringRef(\"931df052-d713-4674-8b58-96a63244c8e2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBaremetalOptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getBaremetalOption(GetBaremetalOptionArgs.builder()\n            .name(\"Remote Access\")\n            .build());\n\n        final var byId = ScalewayFunctions.getBaremetalOption(GetBaremetalOptionArgs.builder()\n            .optionId(\"931df052-d713-4674-8b58-96a63244c8e2\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getBaremetalOption\n      Arguments:\n        name: Remote Access\n  byId:\n    fn::invoke:\n      Function: scaleway:getBaremetalOption\n      Arguments:\n        optionId: 931df052-d713-4674-8b58-96a63244c8e2\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBaremetalOption.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The option name. Only one of `name` and `option_id` should be specified.\n"
                    },
                    "optionId": {
                        "type": "string",
                        "description": "The option id. Only one of `name` and `option_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the option exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBaremetalOption.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "manageable": {
                        "type": "boolean",
                        "description": "Is false if the option could not be added or removed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the option.\n"
                    },
                    "optionId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "manageable",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getBaremetalOs:getBaremetalOs": {
            "description": "Gets information about a baremetal operating system.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/baremetal/api).\n\nYou can also use the [scaleway-cli](https://github.com/scaleway/scaleway-cli) with `scw baremetal os list` to list all available operating systems.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byName = scaleway.getBaremetalOs({\n    name: \"Ubuntu\",\n    version: \"20.04 LTS (Focal Fossa)\",\n});\nconst byId = scaleway.getBaremetalOs({\n    osId: \"03b7f4ba-a6a1-4305-984e-b54fafbf1681\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_baremetal_os(name=\"Ubuntu\",\n    version=\"20.04 LTS (Focal Fossa)\")\nby_id = scaleway.get_baremetal_os(os_id=\"03b7f4ba-a6a1-4305-984e-b54fafbf1681\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetBaremetalOs.Invoke(new()\n    {\n        Name = \"Ubuntu\",\n        Version = \"20.04 LTS (Focal Fossa)\",\n    });\n\n    var byId = Scaleway.GetBaremetalOs.Invoke(new()\n    {\n        OsId = \"03b7f4ba-a6a1-4305-984e-b54fafbf1681\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetBaremetalOs(ctx, \u0026scaleway.GetBaremetalOsArgs{\n\t\t\tName:    pulumi.StringRef(\"Ubuntu\"),\n\t\t\tVersion: pulumi.StringRef(\"20.04 LTS (Focal Fossa)\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.GetBaremetalOs(ctx, \u0026scaleway.GetBaremetalOsArgs{\n\t\t\tOsId: pulumi.StringRef(\"03b7f4ba-a6a1-4305-984e-b54fafbf1681\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBaremetalOsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getBaremetalOs(GetBaremetalOsArgs.builder()\n            .name(\"Ubuntu\")\n            .version(\"20.04 LTS (Focal Fossa)\")\n            .build());\n\n        final var byId = ScalewayFunctions.getBaremetalOs(GetBaremetalOsArgs.builder()\n            .osId(\"03b7f4ba-a6a1-4305-984e-b54fafbf1681\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getBaremetalOs\n      Arguments:\n        name: Ubuntu\n        version: 20.04 LTS (Focal Fossa)\n  byId:\n    fn::invoke:\n      Function: scaleway:getBaremetalOs\n      Arguments:\n        osId: 03b7f4ba-a6a1-4305-984e-b54fafbf1681\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBaremetalOs.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The os name. Only one of `name` and `os_id` should be specified.\n"
                    },
                    "osId": {
                        "type": "string",
                        "description": "The operating system id. Only one of `name` and `os_id` should be specified.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The os version.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the os exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBaremetalOs.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "osId": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getBaremetalServer:getBaremetalServer": {
            "description": "Gets information about a baremetal server.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/baremetal/api).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byName = scaleway.getBaremetalServer({\n    name: \"foobar\",\n    zone: \"fr-par-2\",\n});\nconst byId = scaleway.getBaremetalServer({\n    serverId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_baremetal_server(name=\"foobar\",\n    zone=\"fr-par-2\")\nby_id = scaleway.get_baremetal_server(server_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetBaremetalServer.Invoke(new()\n    {\n        Name = \"foobar\",\n        Zone = \"fr-par-2\",\n    });\n\n    var byId = Scaleway.GetBaremetalServer.Invoke(new()\n    {\n        ServerId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupBaremetalServer(ctx, \u0026scaleway.LookupBaremetalServerArgs{\n\t\t\tName: pulumi.StringRef(\"foobar\"),\n\t\t\tZone: pulumi.StringRef(\"fr-par-2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupBaremetalServer(ctx, \u0026scaleway.LookupBaremetalServerArgs{\n\t\t\tServerId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBaremetalServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getBaremetalServer(GetBaremetalServerArgs.builder()\n            .name(\"foobar\")\n            .zone(\"fr-par-2\")\n            .build());\n\n        final var byId = ScalewayFunctions.getBaremetalServer(GetBaremetalServerArgs.builder()\n            .serverId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getBaremetalServer\n      Arguments:\n        name: foobar\n        zone: fr-par-2\n  byId:\n    fn::invoke:\n      Function: scaleway:getBaremetalServer\n      Arguments:\n        serverId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBaremetalServer.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The server name. Only one of `name` and `server_id` should be specified.\n"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBaremetalServer.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "installConfigAfterward": {
                        "type": "boolean"
                    },
                    "ips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalServerIp:getBaremetalServerIp"
                        }
                    },
                    "ipv4s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalServerIpv4:getBaremetalServerIpv4"
                        }
                    },
                    "ipv6s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalServerIpv6:getBaremetalServerIpv6"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "offer": {
                        "type": "string"
                    },
                    "offerId": {
                        "type": "string"
                    },
                    "offerName": {
                        "type": "string"
                    },
                    "options": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalServerOption:getBaremetalServerOption"
                        }
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "os": {
                        "type": "string"
                    },
                    "osName": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalServerPrivateNetwork:getBaremetalServerPrivateNetwork"
                        }
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "reinstallOnConfigChanges": {
                        "type": "boolean"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "servicePassword": {
                        "type": "string"
                    },
                    "serviceUser": {
                        "type": "string"
                    },
                    "sshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "user": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "domain",
                    "hostname",
                    "installConfigAfterward",
                    "ips",
                    "ipv4s",
                    "ipv6s",
                    "offer",
                    "offerId",
                    "offerName",
                    "options",
                    "organizationId",
                    "os",
                    "osName",
                    "password",
                    "privateNetworks",
                    "projectId",
                    "reinstallOnConfigChanges",
                    "servicePassword",
                    "serviceUser",
                    "sshKeyIds",
                    "tags",
                    "user",
                    "id"
                ]
            }
        },
        "scaleway:index/getBillingConsumptions:getBillingConsumptions": {
            "outputs": {
                "description": "A collection of values returned by getBillingConsumptions.\n",
                "properties": {
                    "consumptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBillingConsumptionsConsumption:getBillingConsumptionsConsumption"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "consumptions",
                    "organizationId",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getBillingInvoices:getBillingInvoices": {
            "description": "Gets information about your Invoices.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst my-invoices = scaleway.getBillingInvoices({\n    invoiceType: \"periodic\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_invoices = scaleway.get_billing_invoices(invoice_type=\"periodic\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_invoices = Scaleway.GetBillingInvoices.Invoke(new()\n    {\n        InvoiceType = \"periodic\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetBillingInvoices(ctx, \u0026scaleway.GetBillingInvoicesArgs{\n\t\t\tInvoiceType: pulumi.StringRef(\"periodic\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBillingInvoicesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-invoices = ScalewayFunctions.getBillingInvoices(GetBillingInvoicesArgs.builder()\n            .invoiceType(\"periodic\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-invoices:\n    fn::invoke:\n      Function: scaleway:getBillingInvoices\n      Arguments:\n        invoiceType: periodic\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBillingInvoices.\n",
                "properties": {
                    "invoiceType": {
                        "type": "string",
                        "description": "Invoices with the given type are listed. Valid values are `periodic` and `purchase`.\n"
                    },
                    "startedAfter": {
                        "type": "string",
                        "description": "Invoices with a start date that are greater or equal to `started_after` are listed (RFC 3339 format).\n"
                    },
                    "startedBefore": {
                        "type": "string",
                        "description": "Invoices with a start date that precedes `started_before` are listed (RFC 3339 format).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBillingInvoices.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "invoiceType": {
                        "type": "string",
                        "description": "The type of invoice.\n"
                    },
                    "invoices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBillingInvoicesInvoice:getBillingInvoicesInvoice"
                        },
                        "description": "List of found invoices\n"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "startedAfter": {
                        "type": "string"
                    },
                    "startedBefore": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "invoices",
                    "organizationId",
                    "id"
                ]
            }
        },
        "scaleway:index/getCockpit:getCockpit": {
            "description": "Gets information about the Scaleway Cockpit.\n\nFor more information consult the [documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = scaleway.getCockpit({});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.get_cockpit()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Scaleway.GetCockpit.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupCockpit(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetCockpitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = ScalewayFunctions.getCockpit();\n\n    }\n}\n```\n```yaml\nvariables:\n  main:\n    fn::invoke:\n      Function: scaleway:getCockpit\n      Arguments: {}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = scaleway.getCockpit({\n    projectId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.get_cockpit(project_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Scaleway.GetCockpit.Invoke(new()\n    {\n        ProjectId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupCockpit(ctx, \u0026scaleway.LookupCockpitArgs{\n\t\t\tProjectId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetCockpitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = ScalewayFunctions.getCockpit(GetCockpitArgs.builder()\n            .projectId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  main:\n    fn::invoke:\n      Function: scaleway:getCockpit\n      Arguments:\n        projectId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCockpit.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the cockpit is associated with.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCockpit.\n",
                "properties": {
                    "endpoints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getCockpitEndpoint:getCockpitEndpoint"
                        },
                        "description": "Endpoints\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The ID of the current plan\n"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "endpoints",
                    "planId",
                    "id"
                ]
            }
        },
        "scaleway:index/getCockpitPlan:getCockpitPlan": {
            "description": "Gets information about a Scaleway Cockpit plan.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst premium = scaleway.getCockpitPlan({\n    name: \"premium\",\n});\nconst main = new scaleway.Cockpit(\"main\", {plan: premium.then(premium =\u003e premium.id)});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\npremium = scaleway.get_cockpit_plan(name=\"premium\")\nmain = scaleway.Cockpit(\"main\", plan=premium.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var premium = Scaleway.GetCockpitPlan.Invoke(new()\n    {\n        Name = \"premium\",\n    });\n\n    var main = new Scaleway.Cockpit(\"main\", new()\n    {\n        Plan = premium.Apply(getCockpitPlanResult =\u003e getCockpitPlanResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpremium, err := scaleway.GetCockpitPlan(ctx, \u0026scaleway.GetCockpitPlanArgs{\n\t\t\tName: \"premium\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewCockpit(ctx, \"main\", \u0026scaleway.CockpitArgs{\n\t\t\tPlan: *pulumi.String(premium.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetCockpitPlanArgs;\nimport com.pulumi.scaleway.Cockpit;\nimport com.pulumi.scaleway.CockpitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var premium = ScalewayFunctions.getCockpitPlan(GetCockpitPlanArgs.builder()\n            .name(\"premium\")\n            .build());\n\n        var main = new Cockpit(\"main\", CockpitArgs.builder()        \n            .plan(premium.applyValue(getCockpitPlanResult -\u003e getCockpitPlanResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:Cockpit\n    properties:\n      plan: ${premium.id}\nvariables:\n  premium:\n    fn::invoke:\n      Function: scaleway:getCockpitPlan\n      Arguments:\n        name: premium\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCockpitPlan.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the plan.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCockpitPlan.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "scaleway:index/getContainer:getContainer": {
            "description": "Gets information about the Scaleway Container.\n\nFor more information consult the [documentation](https://www.scaleway.com/en/docs/faq/serverless-containers/).\n\nFor more details about the limitation check [containers-limitations](https://www.scaleway.com/en/docs/compute/containers/reference-content/containers-limitations/).\n\nYou can check also our [containers guide](https://www.scaleway.com/en/docs/compute/containers/concepts/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst mainContainerNamespace = new scaleway.ContainerNamespace(\"mainContainerNamespace\", {});\nconst mainContainer = new scaleway.Container(\"mainContainer\", {namespaceId: mainContainerNamespace.id});\nconst byName = scaleway.getContainerOutput({\n    namespaceId: mainContainerNamespace.id,\n    name: mainContainer.name,\n});\nconst byId = scaleway.getContainerOutput({\n    namespaceId: mainContainerNamespace.id,\n    containerId: mainContainer.id,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain_container_namespace = scaleway.ContainerNamespace(\"mainContainerNamespace\")\nmain_container = scaleway.Container(\"mainContainer\", namespace_id=main_container_namespace.id)\nby_name = scaleway.get_container_output(namespace_id=main_container_namespace.id,\n    name=main_container.name)\nby_id = scaleway.get_container_output(namespace_id=main_container_namespace.id,\n    container_id=main_container.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainContainerNamespace = new Scaleway.ContainerNamespace(\"mainContainerNamespace\");\n\n    var mainContainer = new Scaleway.Container(\"mainContainer\", new()\n    {\n        NamespaceId = mainContainerNamespace.Id,\n    });\n\n    var byName = Scaleway.GetContainer.Invoke(new()\n    {\n        NamespaceId = mainContainerNamespace.Id,\n        Name = mainContainer.Name,\n    });\n\n    var byId = Scaleway.GetContainer.Invoke(new()\n    {\n        NamespaceId = mainContainerNamespace.Id,\n        ContainerId = mainContainer.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainContainerNamespace, err := scaleway.NewContainerNamespace(ctx, \"mainContainerNamespace\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainContainer, err := scaleway.NewContainer(ctx, \"mainContainer\", \u0026scaleway.ContainerArgs{\n\t\t\tNamespaceId: mainContainerNamespace.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupContainerOutput(ctx, scaleway.GetContainerOutputArgs{\n\t\t\tNamespaceId: mainContainerNamespace.ID(),\n\t\t\tName:        mainContainer.Name,\n\t\t}, nil)\n\t\t_ = scaleway.LookupContainerOutput(ctx, scaleway.GetContainerOutputArgs{\n\t\t\tNamespaceId: mainContainerNamespace.ID(),\n\t\t\tContainerId: mainContainer.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerNamespace;\nimport com.pulumi.scaleway.Container;\nimport com.pulumi.scaleway.ContainerArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetContainerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainContainerNamespace = new ContainerNamespace(\"mainContainerNamespace\");\n\n        var mainContainer = new Container(\"mainContainer\", ContainerArgs.builder()        \n            .namespaceId(mainContainerNamespace.id())\n            .build());\n\n        final var byName = ScalewayFunctions.getContainer(GetContainerArgs.builder()\n            .namespaceId(mainContainerNamespace.id())\n            .name(mainContainer.name())\n            .build());\n\n        final var byId = ScalewayFunctions.getContainer(GetContainerArgs.builder()\n            .namespaceId(mainContainerNamespace.id())\n            .containerId(mainContainer.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainContainerNamespace:\n    type: scaleway:ContainerNamespace\n  mainContainer:\n    type: scaleway:Container\n    properties:\n      namespaceId: ${mainContainerNamespace.id}\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getContainer\n      Arguments:\n        namespaceId: ${mainContainerNamespace.id}\n        name: ${mainContainer.name}\n  byId:\n    fn::invoke:\n      Function: scaleway:getContainer\n      Arguments:\n        namespaceId: ${mainContainerNamespace.id}\n        containerId: ${mainContainer.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getContainer.\n",
                "properties": {
                    "containerId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the container name.\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The container namespace ID of the container.\n\n\u003e **Important** Updates to `name` will recreate the container.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Defaults to provider `region`) The region in which the container was created.\n"
                    }
                },
                "type": "object",
                "required": [
                    "namespaceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getContainer.\n",
                "properties": {
                    "containerId": {
                        "type": "string"
                    },
                    "cpuLimit": {
                        "type": "integer",
                        "description": "The amount of vCPU computing resources to allocate to each container. Defaults  to 70.\n"
                    },
                    "cronStatus": {
                        "type": "string",
                        "description": "The cron status of the container.\n"
                    },
                    "deploy": {
                        "type": "boolean",
                        "description": "Boolean indicating whether the container is on a production environment.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the container.\n"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "The container domain name.\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The [environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#environment-variables) variables of the container.\n"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "The error message of the container.\n"
                    },
                    "httpOption": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "maxConcurrency": {
                        "type": "integer",
                        "description": "The maximum number of simultaneous requests your container can handle at the same time. Defaults to 50.\n"
                    },
                    "maxScale": {
                        "type": "integer",
                        "description": "The maximum of number of instances this container can scale to. Default to 20.\n"
                    },
                    "memoryLimit": {
                        "type": "integer",
                        "description": "The memory computing resources in MB to allocate to each container. Defaults to 128.\n"
                    },
                    "minScale": {
                        "type": "integer",
                        "description": "The minimum of running container instances continuously. Defaults to 0.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port to expose the container. Defaults to 8080.\n"
                    },
                    "privacy": {
                        "type": "string",
                        "description": "The privacy type define the way to authenticate to your container. Please check our dedicated [section](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8).\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The communication [protocol](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8) http1 or h2c. Defaults to http1.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Defaults to provider `region`) The region in which the container was created.\n"
                    },
                    "registryImage": {
                        "type": "string",
                        "description": "The registry image address. e.g: **\"rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE\"**.\n"
                    },
                    "registrySha256": {
                        "type": "string",
                        "description": "The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string.\n"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "The container status.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to 300s.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cpuLimit",
                    "cronStatus",
                    "deploy",
                    "description",
                    "domainName",
                    "environmentVariables",
                    "errorMessage",
                    "httpOption",
                    "maxConcurrency",
                    "maxScale",
                    "memoryLimit",
                    "minScale",
                    "namespaceId",
                    "port",
                    "privacy",
                    "protocol",
                    "registryImage",
                    "registrySha256",
                    "secretEnvironmentVariables",
                    "status",
                    "timeout",
                    "id"
                ]
            }
        },
        "scaleway:index/getContainerNamespace:getContainerNamespace": {
            "description": "Gets information about a container namespace.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byName = scaleway.getContainerNamespace({\n    name: \"my-namespace-name\",\n});\nconst byId = scaleway.getContainerNamespace({\n    namespaceId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_container_namespace(name=\"my-namespace-name\")\nby_id = scaleway.get_container_namespace(namespace_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetContainerNamespace.Invoke(new()\n    {\n        Name = \"my-namespace-name\",\n    });\n\n    var byId = Scaleway.GetContainerNamespace.Invoke(new()\n    {\n        NamespaceId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupContainerNamespace(ctx, \u0026scaleway.LookupContainerNamespaceArgs{\n\t\t\tName: pulumi.StringRef(\"my-namespace-name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupContainerNamespace(ctx, \u0026scaleway.LookupContainerNamespaceArgs{\n\t\t\tNamespaceId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetContainerNamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getContainerNamespace(GetContainerNamespaceArgs.builder()\n            .name(\"my-namespace-name\")\n            .build());\n\n        final var byId = ScalewayFunctions.getContainerNamespace(GetContainerNamespaceArgs.builder()\n            .namespaceId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getContainerNamespace\n      Arguments:\n        name: my-namespace-name\n  byId:\n    fn::invoke:\n      Function: scaleway:getContainerNamespace\n      Arguments:\n        namespaceId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getContainerNamespace.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The namespace name.\nOnly one of `name` and `namespace_id` should be specified.\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id.\nOnly one of `name` and `namespace_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the namespace exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getContainerNamespace.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the namespace.\n"
                    },
                    "destroyRegistry": {
                        "type": "boolean"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The environment variables of the namespace.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the namespace is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "registryEndpoint": {
                        "type": "string",
                        "description": "The registry endpoint of the namespace.\n"
                    },
                    "registryNamespaceId": {
                        "type": "string",
                        "description": "The registry namespace ID of the namespace.\n"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "destroyRegistry",
                    "environmentVariables",
                    "organizationId",
                    "projectId",
                    "registryEndpoint",
                    "registryNamespaceId",
                    "secretEnvironmentVariables",
                    "id"
                ]
            }
        },
        "scaleway:index/getDocumentDBDatabase:getDocumentDBDatabase": {
            "description": "Gets information about DocumentDB database. More on our official [site](https://www.scaleway.com/en/developers/api/document_db/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = scaleway.getDocumentDBDatabase({\n    instanceId: \"11111111-1111-1111-1111-111111111111\",\n    name: \"foobar\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.get_document_db_database(instance_id=\"11111111-1111-1111-1111-111111111111\",\n    name=\"foobar\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Scaleway.GetDocumentDBDatabase.Invoke(new()\n    {\n        InstanceId = \"11111111-1111-1111-1111-111111111111\",\n        Name = \"foobar\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupDocumentDBDatabase(ctx, \u0026scaleway.LookupDocumentDBDatabaseArgs{\n\t\t\tInstanceId: \"11111111-1111-1111-1111-111111111111\",\n\t\t\tName:       pulumi.StringRef(\"foobar\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetDocumentDBDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = ScalewayFunctions.getDocumentDBDatabase(GetDocumentDBDatabaseArgs.builder()\n            .instanceId(\"11111111-1111-1111-1111-111111111111\")\n            .name(\"foobar\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  main:\n    fn::invoke:\n      Function: scaleway:getDocumentDBDatabase\n      Arguments:\n        instanceId: 11111111-1111-1111-1111-111111111111\n        name: foobar\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDocumentDBDatabase.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The DocumentDB instance ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DocumentDB instance.\n"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDocumentDBDatabase.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Whether the database is managed or not.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The name of the owner of the database.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "size": {
                        "type": "string",
                        "description": "Size of the database (in bytes).\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "managed",
                    "owner",
                    "projectId",
                    "size",
                    "id"
                ]
            }
        },
        "scaleway:index/getDocumentDBInstance:getDocumentDBInstance": {
            "description": "Gets information about an DocumentDB instance. For further information see our [developers website](https://www.scaleway.com/en/developers/api/document_db/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst db = scaleway.getDocumentDBInstance({\n    instanceId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\ndb = scaleway.get_document_db_instance(instance_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var db = Scaleway.GetDocumentDBInstance.Invoke(new()\n    {\n        InstanceId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupDocumentDBInstance(ctx, \u0026scaleway.LookupDocumentDBInstanceArgs{\n\t\t\tInstanceId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetDocumentDBInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var db = ScalewayFunctions.getDocumentDBInstance(GetDocumentDBInstanceArgs.builder()\n            .instanceId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  db:\n    fn::invoke:\n      Function: scaleway:getDocumentDBInstance\n      Arguments:\n        instanceId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDocumentDBInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The DocumentDB instance ID.\nOnly one of `name` and `instance_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DocumentDB instance.\nOnly one of `name` and `instance_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the DocumentDB instance exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDocumentDBInstance.\n",
                "properties": {
                    "engine": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "isHaCluster": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nodeType": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "telemetryEnabled": {
                        "type": "boolean"
                    },
                    "userName": {
                        "type": "string"
                    },
                    "volumeSizeInGb": {
                        "type": "integer"
                    },
                    "volumeType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "engine",
                    "isHaCluster",
                    "nodeType",
                    "password",
                    "projectId",
                    "tags",
                    "telemetryEnabled",
                    "userName",
                    "volumeSizeInGb",
                    "volumeType",
                    "id"
                ]
            }
        },
        "scaleway:index/getDocumentDBLoadBalancerEndpoint:getDocumentDBLoadBalancerEndpoint": {
            "inputs": {
                "description": "A collection of arguments for invoking getDocumentDBLoadBalancerEndpoint.\n",
                "properties": {
                    "instanceId": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDocumentDBLoadBalancerEndpoint.\n",
                "properties": {
                    "hostname": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "ip": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "port": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "hostname",
                    "instanceId",
                    "instanceName",
                    "ip",
                    "name",
                    "port",
                    "projectId",
                    "region",
                    "id"
                ]
            }
        },
        "scaleway:index/getDomainRecord:getDomainRecord": {
            "description": "Gets information about a domain record.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byContent = scaleway.getDomainRecord({\n    data: \"1.2.3.4\",\n    dnsZone: \"domain.tld\",\n    name: \"www\",\n    type: \"A\",\n});\nconst byId = scaleway.getDomainRecord({\n    dnsZone: \"domain.tld\",\n    recordId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_content = scaleway.get_domain_record(data=\"1.2.3.4\",\n    dns_zone=\"domain.tld\",\n    name=\"www\",\n    type=\"A\")\nby_id = scaleway.get_domain_record(dns_zone=\"domain.tld\",\n    record_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byContent = Scaleway.GetDomainRecord.Invoke(new()\n    {\n        Data = \"1.2.3.4\",\n        DnsZone = \"domain.tld\",\n        Name = \"www\",\n        Type = \"A\",\n    });\n\n    var byId = Scaleway.GetDomainRecord.Invoke(new()\n    {\n        DnsZone = \"domain.tld\",\n        RecordId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupDomainRecord(ctx, \u0026scaleway.LookupDomainRecordArgs{\n\t\t\tData:    pulumi.StringRef(\"1.2.3.4\"),\n\t\t\tDnsZone: pulumi.StringRef(\"domain.tld\"),\n\t\t\tName:    pulumi.StringRef(\"www\"),\n\t\t\tType:    pulumi.StringRef(\"A\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupDomainRecord(ctx, \u0026scaleway.LookupDomainRecordArgs{\n\t\t\tDnsZone:  pulumi.StringRef(\"domain.tld\"),\n\t\t\tRecordId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetDomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byContent = ScalewayFunctions.getDomainRecord(GetDomainRecordArgs.builder()\n            .data(\"1.2.3.4\")\n            .dnsZone(\"domain.tld\")\n            .name(\"www\")\n            .type(\"A\")\n            .build());\n\n        final var byId = ScalewayFunctions.getDomainRecord(GetDomainRecordArgs.builder()\n            .dnsZone(\"domain.tld\")\n            .recordId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byContent:\n    fn::invoke:\n      Function: scaleway:getDomainRecord\n      Arguments:\n        data: 1.2.3.4\n        dnsZone: domain.tld\n        name: www\n        type: A\n  byId:\n    fn::invoke:\n      Function: scaleway:getDomainRecord\n      Arguments:\n        dnsZone: domain.tld\n        recordId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDomainRecord.\n",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The content of the record (an IPv4 for an `A`, a string for a `TXT`...).\nCannot be used with `record_id`.\n"
                    },
                    "dnsZone": {
                        "type": "string",
                        "description": "The IP address.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the record (can be an empty string for a root record).\nCannot be used with `record_id`.\n"
                    },
                    "recordId": {
                        "type": "string",
                        "description": "The record ID.\nCannot be used with `name`, `type` and `data`.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).\nCannot be used with `record_id`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDomainRecord.\n",
                "properties": {
                    "data": {
                        "type": "string"
                    },
                    "dnsZone": {
                        "type": "string"
                    },
                    "geoIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDomainRecordGeoIp:getDomainRecordGeoIp"
                        },
                        "description": "Dynamic record base on user geolocalisation (More information about dynamic records)\n"
                    },
                    "httpServices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDomainRecordHttpService:getDomainRecordHttpService"
                        },
                        "description": "Dynamic record base on URL resolve (More information about dynamic records)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keepEmptyZone": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "The priority of the record (mostly used with an `MX` record)\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "recordId": {
                        "type": "string"
                    },
                    "rootZone": {
                        "type": "boolean"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "Time To Live of the record in seconds.\n"
                    },
                    "type": {
                        "type": "string"
                    },
                    "views": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDomainRecordView:getDomainRecordView"
                        },
                        "description": "Dynamic record based on the client’s (resolver) subnet (More information about dynamic records)\n"
                    },
                    "weighteds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDomainRecordWeighted:getDomainRecordWeighted"
                        },
                        "description": "Dynamic record base on IP weights (More information about dynamic records)\n"
                    }
                },
                "type": "object",
                "required": [
                    "geoIps",
                    "httpServices",
                    "keepEmptyZone",
                    "priority",
                    "projectId",
                    "rootZone",
                    "ttl",
                    "views",
                    "weighteds",
                    "id"
                ]
            }
        },
        "scaleway:index/getDomainZone:getDomainZone": {
            "description": "Gets information about a domain zone.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = scaleway.getDomainZone({\n    domain: \"scaleway-terraform.com\",\n    subdomain: \"test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.get_domain_zone(domain=\"scaleway-terraform.com\",\n    subdomain=\"test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Scaleway.GetDomainZone.Invoke(new()\n    {\n        Domain = \"scaleway-terraform.com\",\n        Subdomain = \"test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupDomainZone(ctx, \u0026scaleway.LookupDomainZoneArgs{\n\t\t\tDomain:    pulumi.StringRef(\"scaleway-terraform.com\"),\n\t\t\tSubdomain: pulumi.StringRef(\"test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetDomainZoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = ScalewayFunctions.getDomainZone(GetDomainZoneArgs.builder()\n            .domain(\"scaleway-terraform.com\")\n            .subdomain(\"test\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  main:\n    fn::invoke:\n      Function: scaleway:getDomainZone\n      Arguments:\n        domain: scaleway-terraform.com\n        subdomain: test\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDomainZone.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The domain where the DNS zone will be created.\n"
                    },
                    "subdomain": {
                        "type": "string",
                        "description": "The subdomain(zone name) to create in the domain.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDomainZone.\n",
                "properties": {
                    "domain": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "message": {
                        "type": "string",
                        "description": "Message\n"
                    },
                    "ns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "NameServer list for zone.\n"
                    },
                    "nsDefaults": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "NameServer default list for zone.\n"
                    },
                    "nsMasters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "NameServer master list for zone.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "The domain zone status.\n"
                    },
                    "subdomain": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the DNS zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "message",
                    "ns",
                    "nsDefaults",
                    "nsMasters",
                    "projectId",
                    "status",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getFlexibleIp:getFlexibleIp": {
            "description": "Gets information about a Flexible IP.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetFlexibleIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myIp = ScalewayFunctions.getFlexibleIp(GetFlexibleIpArgs.builder()\n            .ipId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myIp:\n    fn::invoke:\n      Function: scaleway:getFlexibleIp\n      Arguments:\n        ipId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFlexibleIp.\n",
                "properties": {
                    "flexibleIpId": {
                        "type": "string"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address.\nOnly one of `ip_address` and `ip_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "(Defaults to provider `project_id`) The ID of the project the IP is in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFlexibleIp.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "flexibleIpId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "isIpv6": {
                        "type": "boolean"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "(Defaults to provider `organization_id`) The ID of the organization the IP is in.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "(Defaults to provider `project_id`) The ID of the project the IP is in.\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain associated with this IP.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The associated server ID if any\n"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "isIpv6",
                    "organizationId",
                    "projectId",
                    "reverse",
                    "serverId",
                    "status",
                    "tags",
                    "updatedAt",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getFlexibleIps:getFlexibleIps": {
            "description": "Gets information about multiple Flexible IPs.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst fipsByTags = scaleway.getFlexibleIps({\n    tags: [\"a tag\"],\n});\nconst myOffer = scaleway.getBaremetalOffer({\n    name: \"EM-B112X-SSD\",\n});\nconst base = new scaleway.BaremetalServer(\"base\", {\n    offer: myOffer.then(myOffer =\u003e myOffer.offerId),\n    installConfigAfterward: true,\n});\nconst first = new scaleway.FlexibleIp(\"first\", {\n    serverId: base.id,\n    tags: [\n        \"foo\",\n        \"first\",\n    ],\n});\nconst second = new scaleway.FlexibleIp(\"second\", {\n    serverId: base.id,\n    tags: [\n        \"foo\",\n        \"second\",\n    ],\n});\nconst fipsByServerId = scaleway.getFlexibleIpsOutput({\n    serverIds: [base.id],\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nfips_by_tags = scaleway.get_flexible_ips(tags=[\"a tag\"])\nmy_offer = scaleway.get_baremetal_offer(name=\"EM-B112X-SSD\")\nbase = scaleway.BaremetalServer(\"base\",\n    offer=my_offer.offer_id,\n    install_config_afterward=True)\nfirst = scaleway.FlexibleIp(\"first\",\n    server_id=base.id,\n    tags=[\n        \"foo\",\n        \"first\",\n    ])\nsecond = scaleway.FlexibleIp(\"second\",\n    server_id=base.id,\n    tags=[\n        \"foo\",\n        \"second\",\n    ])\nfips_by_server_id = scaleway.get_flexible_ips_output(server_ids=[base.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fipsByTags = Scaleway.GetFlexibleIps.Invoke(new()\n    {\n        Tags = new[]\n        {\n            \"a tag\",\n        },\n    });\n\n    var myOffer = Scaleway.GetBaremetalOffer.Invoke(new()\n    {\n        Name = \"EM-B112X-SSD\",\n    });\n\n    var @base = new Scaleway.BaremetalServer(\"base\", new()\n    {\n        Offer = myOffer.Apply(getBaremetalOfferResult =\u003e getBaremetalOfferResult.OfferId),\n        InstallConfigAfterward = true,\n    });\n\n    var first = new Scaleway.FlexibleIp(\"first\", new()\n    {\n        ServerId = @base.Id,\n        Tags = new[]\n        {\n            \"foo\",\n            \"first\",\n        },\n    });\n\n    var second = new Scaleway.FlexibleIp(\"second\", new()\n    {\n        ServerId = @base.Id,\n        Tags = new[]\n        {\n            \"foo\",\n            \"second\",\n        },\n    });\n\n    var fipsByServerId = Scaleway.GetFlexibleIps.Invoke(new()\n    {\n        ServerIds = new[]\n        {\n            @base.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetFlexibleIps(ctx, \u0026scaleway.GetFlexibleIpsArgs{\n\t\t\tTags: []string{\n\t\t\t\t\"a tag\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyOffer, err := scaleway.GetBaremetalOffer(ctx, \u0026scaleway.GetBaremetalOfferArgs{\n\t\t\tName: pulumi.StringRef(\"EM-B112X-SSD\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbase, err := scaleway.NewBaremetalServer(ctx, \"base\", \u0026scaleway.BaremetalServerArgs{\n\t\t\tOffer:                  *pulumi.String(myOffer.OfferId),\n\t\t\tInstallConfigAfterward: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFlexibleIp(ctx, \"first\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tServerId: base.ID(),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo\"),\n\t\t\t\tpulumi.String(\"first\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFlexibleIp(ctx, \"second\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tServerId: base.ID(),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo\"),\n\t\t\t\tpulumi.String(\"second\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.GetFlexibleIpsOutput(ctx, scaleway.GetFlexibleIpsOutputArgs{\n\t\t\tServerIds: pulumi.StringArray{\n\t\t\t\tbase.ID(),\n\t\t\t},\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetFlexibleIpsArgs;\nimport com.pulumi.scaleway.inputs.GetBaremetalOfferArgs;\nimport com.pulumi.scaleway.BaremetalServer;\nimport com.pulumi.scaleway.BaremetalServerArgs;\nimport com.pulumi.scaleway.FlexibleIp;\nimport com.pulumi.scaleway.FlexibleIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fipsByTags = ScalewayFunctions.getFlexibleIps(GetFlexibleIpsArgs.builder()\n            .tags(\"a tag\")\n            .build());\n\n        final var myOffer = ScalewayFunctions.getBaremetalOffer(GetBaremetalOfferArgs.builder()\n            .name(\"EM-B112X-SSD\")\n            .build());\n\n        var base = new BaremetalServer(\"base\", BaremetalServerArgs.builder()        \n            .offer(myOffer.applyValue(getBaremetalOfferResult -\u003e getBaremetalOfferResult.offerId()))\n            .installConfigAfterward(true)\n            .build());\n\n        var first = new FlexibleIp(\"first\", FlexibleIpArgs.builder()        \n            .serverId(base.id())\n            .tags(            \n                \"foo\",\n                \"first\")\n            .build());\n\n        var second = new FlexibleIp(\"second\", FlexibleIpArgs.builder()        \n            .serverId(base.id())\n            .tags(            \n                \"foo\",\n                \"second\")\n            .build());\n\n        final var fipsByServerId = ScalewayFunctions.getFlexibleIps(GetFlexibleIpsArgs.builder()\n            .serverIds(base.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  base:\n    type: scaleway:BaremetalServer\n    properties:\n      offer: ${myOffer.offerId}\n      installConfigAfterward: true\n  first:\n    type: scaleway:FlexibleIp\n    properties:\n      serverId: ${base.id}\n      tags:\n        - foo\n        - first\n  second:\n    type: scaleway:FlexibleIp\n    properties:\n      serverId: ${base.id}\n      tags:\n        - foo\n        - second\nvariables:\n  fipsByTags:\n    fn::invoke:\n      Function: scaleway:getFlexibleIps\n      Arguments:\n        tags:\n          - a tag\n  myOffer:\n    fn::invoke:\n      Function: scaleway:getBaremetalOffer\n      Arguments:\n        name: EM-B112X-SSD\n  fipsByServerId:\n    fn::invoke:\n      Function: scaleway:getFlexibleIps\n      Arguments:\n        serverIds:\n          - ${base.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFlexibleIps.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "(Defaults to provider `project_id`) The ID of the project the IP is in.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of server IDs used as filter. IPs with these exact server IDs are listed.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tags used as filter. IPs with these exact tags are listed.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which IPs exist.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFlexibleIps.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getFlexibleIpsIp:getFlexibleIpsIp"
                        },
                        "description": "List of found flexible IPS\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "(Defaults to provider `organization_id`) The ID of the organization the IP is in.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "(Defaults to provider `project_id`) The ID of the project the IP is in.\n"
                    },
                    "serverIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of tags which are attached to the flexible IP.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "(Defaults to provider `zone`) The zone in which the MAC address exist.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ips",
                    "organizationId",
                    "projectId",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getFunction:getFunction": {
            "inputs": {
                "description": "A collection of arguments for invoking getFunction.\n",
                "properties": {
                    "functionId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "namespaceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFunction.\n",
                "properties": {
                    "cpuLimit": {
                        "type": "integer"
                    },
                    "deploy": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "domainName": {
                        "type": "string"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "functionId": {
                        "type": "string"
                    },
                    "handler": {
                        "type": "string"
                    },
                    "httpOption": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "maxScale": {
                        "type": "integer"
                    },
                    "memoryLimit": {
                        "type": "integer"
                    },
                    "minScale": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "privacy": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "runtime": {
                        "type": "string"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "timeout": {
                        "type": "integer"
                    },
                    "zipFile": {
                        "type": "string"
                    },
                    "zipHash": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cpuLimit",
                    "deploy",
                    "description",
                    "domainName",
                    "environmentVariables",
                    "handler",
                    "httpOption",
                    "maxScale",
                    "memoryLimit",
                    "minScale",
                    "namespaceId",
                    "organizationId",
                    "privacy",
                    "projectId",
                    "region",
                    "runtime",
                    "secretEnvironmentVariables",
                    "timeout",
                    "zipFile",
                    "zipHash",
                    "id"
                ]
            }
        },
        "scaleway:index/getFunctionNamespace:getFunctionNamespace": {
            "description": "Gets information about a function namespace.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myNamespace = scaleway.getFunctionNamespace({\n    namespaceId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_namespace = scaleway.get_function_namespace(namespace_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myNamespace = Scaleway.GetFunctionNamespace.Invoke(new()\n    {\n        NamespaceId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupFunctionNamespace(ctx, \u0026scaleway.LookupFunctionNamespaceArgs{\n\t\t\tNamespaceId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetFunctionNamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myNamespace = ScalewayFunctions.getFunctionNamespace(GetFunctionNamespaceArgs.builder()\n            .namespaceId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myNamespace:\n    fn::invoke:\n      Function: scaleway:getFunctionNamespace\n      Arguments:\n        namespaceId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFunctionNamespace.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The namespace name.\nOnly one of `name` and `namespace_id` should be specified.\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id.\nOnly one of `name` and `namespace_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the namespace exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFunctionNamespace.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the namespace.\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The environment variables of the namespace.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the namespace is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "registryEndpoint": {
                        "type": "string",
                        "description": "The registry endpoint of the namespace.\n"
                    },
                    "registryNamespaceId": {
                        "type": "string",
                        "description": "The registry namespace ID of the namespace.\n"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "environmentVariables",
                    "organizationId",
                    "projectId",
                    "registryEndpoint",
                    "registryNamespaceId",
                    "secretEnvironmentVariables",
                    "id"
                ]
            }
        },
        "scaleway:index/getIamApplication:getIamApplication": {
            "description": "Gets information about an existing IAM application.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst findByName = scaleway.getIamApplication({\n    name: \"foobar\",\n});\nconst findById = scaleway.getIamApplication({\n    applicationId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nfind_by_name = scaleway.get_iam_application(name=\"foobar\")\nfind_by_id = scaleway.get_iam_application(application_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var findByName = Scaleway.GetIamApplication.Invoke(new()\n    {\n        Name = \"foobar\",\n    });\n\n    var findById = Scaleway.GetIamApplication.Invoke(new()\n    {\n        ApplicationId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupIamApplication(ctx, \u0026scaleway.LookupIamApplicationArgs{\n\t\t\tName: pulumi.StringRef(\"foobar\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupIamApplication(ctx, \u0026scaleway.LookupIamApplicationArgs{\n\t\t\tApplicationId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIamApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var findByName = ScalewayFunctions.getIamApplication(GetIamApplicationArgs.builder()\n            .name(\"foobar\")\n            .build());\n\n        final var findById = ScalewayFunctions.getIamApplication(GetIamApplicationArgs.builder()\n            .applicationId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  findByName:\n    fn::invoke:\n      Function: scaleway:getIamApplication\n      Arguments:\n        name: foobar\n  findById:\n    fn::invoke:\n      Function: scaleway:getIamApplication\n      Arguments:\n        applicationId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIamApplication.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The ID of the IAM application.\nOnly one of the `name` and `application_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IAM application.\nOnly one of the `name` and `application_id` should be specified.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "`organization_id`) The ID of the\norganization the application is associated with.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIamApplication.\n",
                "properties": {
                    "applicationId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "editable": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "editable",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getIamGroup:getIamGroup": {
            "description": "Gets information about an existing IAM group. For more information, please\ncheck [the documentation](https://developers.scaleway.com/en/products/iam/api/v1alpha1/#applications-83ce5e)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst findByName = scaleway.getIamGroup({\n    name: \"foobar\",\n});\nconst findById = scaleway.getIamGroup({\n    groupId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nfind_by_name = scaleway.get_iam_group(name=\"foobar\")\nfind_by_id = scaleway.get_iam_group(group_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var findByName = Scaleway.GetIamGroup.Invoke(new()\n    {\n        Name = \"foobar\",\n    });\n\n    var findById = Scaleway.GetIamGroup.Invoke(new()\n    {\n        GroupId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupIamGroup(ctx, \u0026scaleway.LookupIamGroupArgs{\n\t\t\tName: pulumi.StringRef(\"foobar\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupIamGroup(ctx, \u0026scaleway.LookupIamGroupArgs{\n\t\t\tGroupId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIamGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var findByName = ScalewayFunctions.getIamGroup(GetIamGroupArgs.builder()\n            .name(\"foobar\")\n            .build());\n\n        final var findById = ScalewayFunctions.getIamGroup(GetIamGroupArgs.builder()\n            .groupId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  findByName:\n    fn::invoke:\n      Function: scaleway:getIamGroup\n      Arguments:\n        name: foobar\n  findById:\n    fn::invoke:\n      Function: scaleway:getIamGroup\n      Arguments:\n        groupId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIamGroup.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "The ID of the IAM group.\nOnly one of the `name` and `group_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IAM group.\nOnly one of the `name` and `group_id` should be specified.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "`organization_id`) The ID of the\norganization the group is associated with.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIamGroup.\n",
                "properties": {
                    "applicationIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "externalMembership": {
                        "type": "boolean"
                    },
                    "groupId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "userIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "applicationIds",
                    "createdAt",
                    "description",
                    "externalMembership",
                    "updatedAt",
                    "userIds",
                    "id"
                ]
            }
        },
        "scaleway:index/getIamSshKey:getIamSshKey": {
            "description": "Use this data source to get SSH key information based on its ID or name.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myKey = scaleway.getIamSshKey({\n    sshKeyId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_iam_ssh_key(ssh_key_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myKey = Scaleway.GetIamSshKey.Invoke(new()\n    {\n        SshKeyId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupIamSshKey(ctx, \u0026scaleway.LookupIamSshKeyArgs{\n\t\t\tSshKeyId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIamSshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = ScalewayFunctions.getIamSshKey(GetIamSshKeyArgs.builder()\n            .sshKeyId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    fn::invoke:\n      Function: scaleway:getIamSshKey\n      Arguments:\n        sshKeyId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIamSshKey.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The SSH key name. Only one of `name` and `ssh_key_id` should be specified.\n"
                    },
                    "sshKeyId": {
                        "type": "string",
                        "description": "The SSH key id. Only one of `name` and `ssh_key_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIamSshKey.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the SSH key.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "The SSH key status.\n"
                    },
                    "fingerprint": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the SSH key is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The SSH public key string\n"
                    },
                    "sshKeyId": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the SSH key.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "disabled",
                    "fingerprint",
                    "organizationId",
                    "projectId",
                    "publicKey",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getIamUser:getIamUser": {
            "description": "Use this data source to get information on an existing IAM user based on its ID or email address.\nFor more information,\nsee [the documentation](https://developers.scaleway.com/en/products/iam/api/v1alpha1/#users-06bdcf).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst findById = scaleway.getIamUser({\n    userId: \"11111111-1111-1111-1111-111111111111\",\n});\nconst findByEmail = scaleway.getIamUser({\n    email: \"foo@bar.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nfind_by_id = scaleway.get_iam_user(user_id=\"11111111-1111-1111-1111-111111111111\")\nfind_by_email = scaleway.get_iam_user(email=\"foo@bar.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var findById = Scaleway.GetIamUser.Invoke(new()\n    {\n        UserId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n    var findByEmail = Scaleway.GetIamUser.Invoke(new()\n    {\n        Email = \"foo@bar.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupIamUser(ctx, \u0026scaleway.LookupIamUserArgs{\n\t\t\tUserId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupIamUser(ctx, \u0026scaleway.LookupIamUserArgs{\n\t\t\tEmail: pulumi.StringRef(\"foo@bar.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIamUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var findById = ScalewayFunctions.getIamUser(GetIamUserArgs.builder()\n            .userId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n        final var findByEmail = ScalewayFunctions.getIamUser(GetIamUserArgs.builder()\n            .email(\"foo@bar.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  findById:\n    fn::invoke:\n      Function: scaleway:getIamUser\n      Arguments:\n        userId: 11111111-1111-1111-1111-111111111111\n  findByEmail:\n    fn::invoke:\n      Function: scaleway:getIamUser\n      Arguments:\n        email: foo@bar.com\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIamUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address of the IAM user. Only one of the `email` and `user_id` should be specified.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "`organization_id`) The ID of the\norganization the user is associated with.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the IAM user. Only one of the `email` and `user_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIamUser.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceImage:getInstanceImage": {
            "description": "Gets information about an instance image.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myImage = scaleway.getInstanceImage({\n    imageId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_image = scaleway.get_instance_image(image_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myImage = Scaleway.GetInstanceImage.Invoke(new()\n    {\n        ImageId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupInstanceImage(ctx, \u0026scaleway.LookupInstanceImageArgs{\n\t\t\tImageId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstanceImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myImage = ScalewayFunctions.getInstanceImage(GetInstanceImageArgs.builder()\n            .imageId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myImage:\n    fn::invoke:\n      Function: scaleway:getInstanceImage\n      Arguments:\n        imageId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceImage.\n",
                "properties": {
                    "architecture": {
                        "type": "string",
                        "description": "The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The image id. Only one of `name` and `image_id` should be specified.\n"
                    },
                    "latest": {
                        "type": "boolean",
                        "description": "Use the latest image ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The image name. Only one of `name` and `image_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the image is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the image exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceImage.\n",
                "properties": {
                    "additionalVolumeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of the additional volumes in this image.\n"
                    },
                    "architecture": {
                        "type": "string"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Date of the image creation.\n"
                    },
                    "defaultBootscriptId": {
                        "type": "string",
                        "description": "ID of the default bootscript for this image.\n"
                    },
                    "fromServerId": {
                        "type": "string",
                        "description": "ID of the server the image if based from.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "modificationDate": {
                        "type": "string",
                        "description": "Date of image latest update.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the image is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the image is associated with.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Set to `true` if the image is public.\n"
                    },
                    "rootVolumeId": {
                        "type": "string",
                        "description": "ID of the root volume in this image.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the image. Possible values are: `available`, `creating` or `error`.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "additionalVolumeIds",
                    "creationDate",
                    "defaultBootscriptId",
                    "fromServerId",
                    "modificationDate",
                    "organizationId",
                    "projectId",
                    "public",
                    "rootVolumeId",
                    "state",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceIp:getInstanceIp": {
            "description": "Gets information about an instance IP.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myIp = scaleway.getInstanceIp({\n    id: \"fr-par-1/11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_ip = scaleway.get_instance_ip(id=\"fr-par-1/11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myIp = Scaleway.GetInstanceIp.Invoke(new()\n    {\n        Id = \"fr-par-1/11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupInstanceIp(ctx, \u0026scaleway.LookupInstanceIpArgs{\n\t\t\tId: pulumi.StringRef(\"fr-par-1/11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstanceIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myIp = ScalewayFunctions.getInstanceIp(GetInstanceIpArgs.builder()\n            .id(\"fr-par-1/11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myIp:\n    fn::invoke:\n      Function: scaleway:getInstanceIp\n      Arguments:\n        id: fr-par-1/11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceIp.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 address to retrieve\nOnly one of `address` and `id` should be specified.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the IP address to retrieve\nOnly one of `address` and `id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceIp.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the IP.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the IP is associated with.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The IP Prefix.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse dns attached to this IP\n"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the IP\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "organizationId",
                    "prefix",
                    "projectId",
                    "reverse",
                    "serverId",
                    "tags",
                    "type",
                    "zone"
                ]
            }
        },
        "scaleway:index/getInstancePrivateNic:getInstancePrivateNic": {
            "description": "Gets information about an instance private NIC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byNicId = scaleway.getInstancePrivateNic({\n    privateNicId: \"11111111-1111-1111-1111-111111111111\",\n    serverId: \"11111111-1111-1111-1111-111111111111\",\n});\nconst byPnId = scaleway.getInstancePrivateNic({\n    privateNetworkId: \"11111111-1111-1111-1111-111111111111\",\n    serverId: \"11111111-1111-1111-1111-111111111111\",\n});\nconst byTags = scaleway.getInstancePrivateNic({\n    serverId: \"11111111-1111-1111-1111-111111111111\",\n    tags: [\"mytag\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_nic_id = scaleway.get_instance_private_nic(private_nic_id=\"11111111-1111-1111-1111-111111111111\",\n    server_id=\"11111111-1111-1111-1111-111111111111\")\nby_pn_id = scaleway.get_instance_private_nic(private_network_id=\"11111111-1111-1111-1111-111111111111\",\n    server_id=\"11111111-1111-1111-1111-111111111111\")\nby_tags = scaleway.get_instance_private_nic(server_id=\"11111111-1111-1111-1111-111111111111\",\n    tags=[\"mytag\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byNicId = Scaleway.GetInstancePrivateNic.Invoke(new()\n    {\n        PrivateNicId = \"11111111-1111-1111-1111-111111111111\",\n        ServerId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n    var byPnId = Scaleway.GetInstancePrivateNic.Invoke(new()\n    {\n        PrivateNetworkId = \"11111111-1111-1111-1111-111111111111\",\n        ServerId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n    var byTags = Scaleway.GetInstancePrivateNic.Invoke(new()\n    {\n        ServerId = \"11111111-1111-1111-1111-111111111111\",\n        Tags = new[]\n        {\n            \"mytag\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupInstancePrivateNic(ctx, \u0026scaleway.LookupInstancePrivateNicArgs{\n\t\t\tPrivateNicId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t\tServerId:     \"11111111-1111-1111-1111-111111111111\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupInstancePrivateNic(ctx, \u0026scaleway.LookupInstancePrivateNicArgs{\n\t\t\tPrivateNetworkId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t\tServerId:         \"11111111-1111-1111-1111-111111111111\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupInstancePrivateNic(ctx, \u0026scaleway.LookupInstancePrivateNicArgs{\n\t\t\tServerId: \"11111111-1111-1111-1111-111111111111\",\n\t\t\tTags: []string{\n\t\t\t\t\"mytag\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstancePrivateNicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byNicId = ScalewayFunctions.getInstancePrivateNic(GetInstancePrivateNicArgs.builder()\n            .privateNicId(\"11111111-1111-1111-1111-111111111111\")\n            .serverId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n        final var byPnId = ScalewayFunctions.getInstancePrivateNic(GetInstancePrivateNicArgs.builder()\n            .privateNetworkId(\"11111111-1111-1111-1111-111111111111\")\n            .serverId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n        final var byTags = ScalewayFunctions.getInstancePrivateNic(GetInstancePrivateNicArgs.builder()\n            .serverId(\"11111111-1111-1111-1111-111111111111\")\n            .tags(\"mytag\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byNicId:\n    fn::invoke:\n      Function: scaleway:getInstancePrivateNic\n      Arguments:\n        privateNicId: 11111111-1111-1111-1111-111111111111\n        serverId: 11111111-1111-1111-1111-111111111111\n  byPnId:\n    fn::invoke:\n      Function: scaleway:getInstancePrivateNic\n      Arguments:\n        privateNetworkId: 11111111-1111-1111-1111-111111111111\n        serverId: 11111111-1111-1111-1111-111111111111\n  byTags:\n    fn::invoke:\n      Function: scaleway:getInstancePrivateNic\n      Arguments:\n        serverId: 11111111-1111-1111-1111-111111111111\n        tags:\n          - mytag\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstancePrivateNic.\n",
                "properties": {
                    "privateNetworkId": {
                        "type": "string",
                        "description": "The ID of the private network\nOnly one of `private_nic_id` and `private_network_id` should be specified.\n"
                    },
                    "privateNicId": {
                        "type": "string",
                        "description": "The ID of the instance server private nic\nOnly one of `private_nic_id` and `private_network_id` should be specified.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server's id\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the private NIC.\nAs datasource only returns one private NIC, the search with given tags must return only one result\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the private nic exists.\n"
                    }
                },
                "type": "object",
                "required": [
                    "serverId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInstancePrivateNic.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "macAddress": {
                        "type": "string"
                    },
                    "privateNetworkId": {
                        "type": "string"
                    },
                    "privateNicId": {
                        "type": "string"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "ipIds",
                    "macAddress",
                    "serverId",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceSecurityGroup:getInstanceSecurityGroup": {
            "description": "Gets information about a Security Group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myKey = scaleway.getInstanceSecurityGroup({\n    securityGroupId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_instance_security_group(security_group_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myKey = Scaleway.GetInstanceSecurityGroup.Invoke(new()\n    {\n        SecurityGroupId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupInstanceSecurityGroup(ctx, \u0026scaleway.LookupInstanceSecurityGroupArgs{\n\t\t\tSecurityGroupId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstanceSecurityGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = ScalewayFunctions.getInstanceSecurityGroup(GetInstanceSecurityGroupArgs.builder()\n            .securityGroupId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    fn::invoke:\n      Function: scaleway:getInstanceSecurityGroup\n      Arguments:\n        securityGroupId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceSecurityGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The security group name. Only one of `name` and `security_group_id` should be specified.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The security group id. Only one of `name` and `security_group_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the security group exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceSecurityGroup.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "enableDefaultSecurity": {
                        "type": "boolean"
                    },
                    "externalRules": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "inboundDefaultPolicy": {
                        "type": "string",
                        "description": "The default policy on incoming traffic. Possible values are: `accept` or `drop`.\n"
                    },
                    "inboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceSecurityGroupInboundRule:getInstanceSecurityGroupInboundRule"
                        },
                        "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the security group is associated with.\n"
                    },
                    "outboundDefaultPolicy": {
                        "type": "string",
                        "description": "The default policy on outgoing traffic. Possible values are: `accept` or `drop`.\n"
                    },
                    "outboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceSecurityGroupOutboundRule:getInstanceSecurityGroupOutboundRule"
                        },
                        "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the security group is associated with.\n"
                    },
                    "securityGroupId": {
                        "type": "string"
                    },
                    "stateful": {
                        "type": "boolean"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "enableDefaultSecurity",
                    "externalRules",
                    "inboundDefaultPolicy",
                    "inboundRules",
                    "organizationId",
                    "outboundDefaultPolicy",
                    "outboundRules",
                    "projectId",
                    "stateful",
                    "tags",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceServer:getInstanceServer": {
            "description": "Gets information about an instance server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myKey = scaleway.getInstanceServer({\n    serverId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_instance_server(server_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myKey = Scaleway.GetInstanceServer.Invoke(new()\n    {\n        ServerId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupInstanceServer(ctx, \u0026scaleway.LookupInstanceServerArgs{\n\t\t\tServerId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstanceServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = ScalewayFunctions.getInstanceServer(GetInstanceServerArgs.builder()\n            .serverId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    fn::invoke:\n      Function: scaleway:getInstanceServer\n      Arguments:\n        serverId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceServer.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The server name. Only one of `name` and `server_id` should be specified.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server id. Only one of `name` and `server_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceServer.\n",
                "properties": {
                    "additionalVolumeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)\nattached to the server.\n"
                    },
                    "bootType": {
                        "type": "string"
                    },
                    "bootscriptId": {
                        "type": "string"
                    },
                    "cloudInit": {
                        "type": "string",
                        "description": "The cloud init script associated with this server.\n"
                    },
                    "enableDynamicIp": {
                        "type": "boolean",
                        "description": "True if dynamic IP in enable on the server.\n"
                    },
                    "enableIpv6": {
                        "type": "boolean",
                        "description": "Determines if IPv6 is enabled for the server.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "image": {
                        "type": "string",
                        "description": "The UUID and the label of the base image used by the server.\n"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "ipIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "The default ipv6 address routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                    },
                    "ipv6Gateway": {
                        "type": "string",
                        "description": "The ipv6 gateway address. ( Only set when enable_ipv6 is set to true )\n"
                    },
                    "ipv6PrefixLength": {
                        "type": "integer",
                        "description": "The prefix length of the ipv6 subnet routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the server is associated with.\n"
                    },
                    "placementGroupId": {
                        "type": "string",
                        "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.\n"
                    },
                    "placementGroupPolicyRespected": {
                        "type": "boolean",
                        "description": "True when the placement group policy is respected.\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The Scaleway internal IP address of the server.\n"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceServerPrivateNetwork:getInstanceServerPrivateNetwork"
                        }
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the server is associated with.\n"
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "The public IP address of the server.\n"
                    },
                    "publicIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceServerPublicIp:getInstanceServerPublicIp"
                        },
                        "description": "The list of public IPs of the server\n"
                    },
                    "replaceOnTypeChange": {
                        "type": "boolean"
                    },
                    "rootVolumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceServerRootVolume:getInstanceServerRootVolume"
                        }
                    },
                    "routedIpEnabled": {
                        "type": "boolean",
                        "description": "True if the server support routed ip only.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.\n"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the server.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The commercial type of the server.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\n"
                    },
                    "userData": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The user data associated with the server.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "additionalVolumeIds",
                    "bootType",
                    "bootscriptId",
                    "cloudInit",
                    "enableDynamicIp",
                    "enableIpv6",
                    "image",
                    "ipId",
                    "ipIds",
                    "ipv6Address",
                    "ipv6Gateway",
                    "ipv6PrefixLength",
                    "organizationId",
                    "placementGroupId",
                    "placementGroupPolicyRespected",
                    "privateIp",
                    "privateNetworks",
                    "projectId",
                    "publicIp",
                    "publicIps",
                    "replaceOnTypeChange",
                    "rootVolumes",
                    "routedIpEnabled",
                    "securityGroupId",
                    "state",
                    "tags",
                    "type",
                    "userData",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceServers:getInstanceServers": {
            "description": "Gets information about multiple instance servers.\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myKey = scaleway.getInstanceServers({\n    name: \"myserver\",\n    zone: \"fr-par-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_instance_servers(name=\"myserver\",\n    zone=\"fr-par-2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myKey = Scaleway.GetInstanceServers.Invoke(new()\n    {\n        Name = \"myserver\",\n        Zone = \"fr-par-2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetInstanceServers(ctx, \u0026scaleway.GetInstanceServersArgs{\n\t\t\tName: pulumi.StringRef(\"myserver\"),\n\t\t\tZone: pulumi.StringRef(\"fr-par-2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstanceServersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = ScalewayFunctions.getInstanceServers(GetInstanceServersArgs.builder()\n            .name(\"myserver\")\n            .zone(\"fr-par-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    fn::invoke:\n      Function: scaleway:getInstanceServers\n      Arguments:\n        name: myserver\n        zone: fr-par-2\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceServers.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The server name used as filter. Servers with a name like it are listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the server is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tags used as filter. Servers with these exact tags are listed.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which servers exist.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceServers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the server is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the server is associated with.\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceServersServer:getInstanceServersServer"
                        },
                        "description": "List of found servers\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the server.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone in which the server is.\n"
                    }
                },
                "type": "object",
                "required": [
                    "organizationId",
                    "projectId",
                    "servers",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceSnapshot:getInstanceSnapshot": {
            "description": "Gets information about an instance snapshot.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byName = scaleway.getInstanceSnapshot({\n    name: \"my-snapshot-name\",\n});\nconst byId = scaleway.getInstanceSnapshot({\n    snapshotId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_instance_snapshot(name=\"my-snapshot-name\")\nby_id = scaleway.get_instance_snapshot(snapshot_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetInstanceSnapshot.Invoke(new()\n    {\n        Name = \"my-snapshot-name\",\n    });\n\n    var byId = Scaleway.GetInstanceSnapshot.Invoke(new()\n    {\n        SnapshotId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupInstanceSnapshot(ctx, \u0026scaleway.LookupInstanceSnapshotArgs{\n\t\t\tName: pulumi.StringRef(\"my-snapshot-name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupInstanceSnapshot(ctx, \u0026scaleway.LookupInstanceSnapshotArgs{\n\t\t\tSnapshotId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstanceSnapshotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getInstanceSnapshot(GetInstanceSnapshotArgs.builder()\n            .name(\"my-snapshot-name\")\n            .build());\n\n        final var byId = ScalewayFunctions.getInstanceSnapshot(GetInstanceSnapshotArgs.builder()\n            .snapshotId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getInstanceSnapshot\n      Arguments:\n        name: my-snapshot-name\n  byId:\n    fn::invoke:\n      Function: scaleway:getInstanceSnapshot\n      Arguments:\n        snapshotId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceSnapshot.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The snapshot name.\nOnly one of `name` and `snapshot_id` should be specified.\n"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "The snapshot id.\nOnly one of `name` and `snapshot_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the snapshot exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceSnapshot.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceSnapshotImport:getInstanceSnapshotImport"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "sizeInGb": {
                        "type": "integer"
                    },
                    "snapshotId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "volumeId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "imports",
                    "organizationId",
                    "projectId",
                    "sizeInGb",
                    "tags",
                    "type",
                    "volumeId",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceVolume:getInstanceVolume": {
            "description": "Gets information about an instance volume.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myVolume = scaleway.getInstanceVolume({\n    volumeId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_volume = scaleway.get_instance_volume(volume_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myVolume = Scaleway.GetInstanceVolume.Invoke(new()\n    {\n        VolumeId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupInstanceVolume(ctx, \u0026scaleway.LookupInstanceVolumeArgs{\n\t\t\tVolumeId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstanceVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myVolume = ScalewayFunctions.getInstanceVolume(GetInstanceVolumeArgs.builder()\n            .volumeId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myVolume:\n    fn::invoke:\n      Function: scaleway:getInstanceVolume\n      Arguments:\n        volumeId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceVolume.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The volume name.\nOnly one of `name` and `volume_id` should be specified.\n"
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The volume id.\nOnly one of `name` and `volume_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the volume exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceVolume.\n",
                "properties": {
                    "fromSnapshotId": {
                        "type": "string"
                    },
                    "fromVolumeId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the volume is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "sizeInGb": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "volumeId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "fromSnapshotId",
                    "fromVolumeId",
                    "organizationId",
                    "projectId",
                    "serverId",
                    "sizeInGb",
                    "tags",
                    "type",
                    "id"
                ]
            }
        },
        "scaleway:index/getIotDevice:getIotDevice": {
            "description": "Gets information about an IOT Device.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myDevice = scaleway.getIotDevice({\n    deviceId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_device = scaleway.get_iot_device(device_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDevice = Scaleway.GetIotDevice.Invoke(new()\n    {\n        DeviceId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupIotDevice(ctx, \u0026scaleway.LookupIotDeviceArgs{\n\t\t\tDeviceId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIotDeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDevice = ScalewayFunctions.getIotDevice(GetIotDeviceArgs.builder()\n            .deviceId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDevice:\n    fn::invoke:\n      Function: scaleway:getIotDevice\n      Arguments:\n        deviceId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIotDevice.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "The device ID.\nOnly one of the `name` and `device_id` should be specified.\n"
                    },
                    "hubId": {
                        "type": "string",
                        "description": "The hub ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Hub.\nOnly one of the `name` and `device_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the hub exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIotDevice.\n",
                "properties": {
                    "allowInsecure": {
                        "type": "boolean"
                    },
                    "allowMultipleConnections": {
                        "type": "boolean"
                    },
                    "certificates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getIotDeviceCertificate:getIotDeviceCertificate"
                        }
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "deviceId": {
                        "type": "string"
                    },
                    "hubId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isConnected": {
                        "type": "boolean"
                    },
                    "lastActivityAt": {
                        "type": "string"
                    },
                    "messageFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getIotDeviceMessageFilter:getIotDeviceMessageFilter"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "allowInsecure",
                    "allowMultipleConnections",
                    "certificates",
                    "createdAt",
                    "description",
                    "hubId",
                    "isConnected",
                    "lastActivityAt",
                    "messageFilters",
                    "status",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getIotHub:getIotHub": {
            "description": "Gets information about an IOT Hub.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myHub = scaleway.getIotHub({\n    hubId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_hub = scaleway.get_iot_hub(hub_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myHub = Scaleway.GetIotHub.Invoke(new()\n    {\n        HubId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupIotHub(ctx, \u0026scaleway.LookupIotHubArgs{\n\t\t\tHubId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIotHubArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myHub = ScalewayFunctions.getIotHub(GetIotHubArgs.builder()\n            .hubId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myHub:\n    fn::invoke:\n      Function: scaleway:getIotHub\n      Arguments:\n        hubId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIotHub.\n",
                "properties": {
                    "hubId": {
                        "type": "string",
                        "description": "The Hub ID.\nOnly one of the `name` and `hub_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Hub.\nOnly one of the `name` and `hub_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the hub exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIotHub.\n",
                "properties": {
                    "connectedDeviceCount": {
                        "type": "integer"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "deviceAutoProvisioning": {
                        "type": "boolean"
                    },
                    "deviceCount": {
                        "type": "integer"
                    },
                    "disableEvents": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "endpoint": {
                        "type": "string"
                    },
                    "eventsTopicPrefix": {
                        "type": "string"
                    },
                    "hubCa": {
                        "type": "string"
                    },
                    "hubCaChallenge": {
                        "type": "string"
                    },
                    "hubId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "productPlan": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "connectedDeviceCount",
                    "createdAt",
                    "deviceAutoProvisioning",
                    "deviceCount",
                    "disableEvents",
                    "enabled",
                    "endpoint",
                    "eventsTopicPrefix",
                    "hubCa",
                    "hubCaChallenge",
                    "organizationId",
                    "productPlan",
                    "projectId",
                    "status",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getIpamIp:getIpamIp": {
            "description": "Gets information about IP managed by IPAM service. IPAM service is used for dhcp bundled in VPCs' private networks.\n\n## Examples\n\n### Instance Private Network IP\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Find the private IPv4 using resource name\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {});\n// Get Instance IP in a private network\nconst nic = new scaleway.InstancePrivateNic(\"nic\", {\n    serverId: scaleway_instance_server.server.id,\n    privateNetworkId: pn.id,\n});\nconst byMac = scaleway.getIpamIpOutput({\n    macAddress: nic.macAddress,\n    type: \"ipv4\",\n});\nconst byId = scaleway.getIpamIpOutput({\n    resource: {\n        id: nic.id,\n        type: \"instance_private_nic\",\n    },\n    type: \"ipv4\",\n});\nconst main = new scaleway.RdbInstance(\"main\", {\n    nodeType: \"DB-DEV-S\",\n    engine: \"PostgreSQL-15\",\n    isHaCluster: true,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    privateNetwork: {\n        pnId: pn.id,\n    },\n});\nconst byName = scaleway.getIpamIpOutput({\n    resource: {\n        name: main.name,\n        type: \"rdb_instance\",\n    },\n    type: \"ipv4\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\n# Find the private IPv4 using resource name\npn = scaleway.VpcPrivateNetwork(\"pn\")\n# Get Instance IP in a private network\nnic = scaleway.InstancePrivateNic(\"nic\",\n    server_id=scaleway_instance_server[\"server\"][\"id\"],\n    private_network_id=pn.id)\nby_mac = scaleway.get_ipam_ip_output(mac_address=nic.mac_address,\n    type=\"ipv4\")\nby_id = scaleway.get_ipam_ip_output(resource=scaleway.GetIpamIpResourceArgs(\n        id=nic.id,\n        type=\"instance_private_nic\",\n    ),\n    type=\"ipv4\")\nmain = scaleway.RdbInstance(\"main\",\n    node_type=\"DB-DEV-S\",\n    engine=\"PostgreSQL-15\",\n    is_ha_cluster=True,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    private_network=scaleway.RdbInstancePrivateNetworkArgs(\n        pn_id=pn.id,\n    ))\nby_name = scaleway.get_ipam_ip_output(resource=scaleway.GetIpamIpResourceArgs(\n        name=main.name,\n        type=\"rdb_instance\",\n    ),\n    type=\"ipv4\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Find the private IPv4 using resource name\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\");\n\n    // Get Instance IP in a private network\n    var nic = new Scaleway.InstancePrivateNic(\"nic\", new()\n    {\n        ServerId = scaleway_instance_server.Server.Id,\n        PrivateNetworkId = pn.Id,\n    });\n\n    var byMac = Scaleway.GetIpamIp.Invoke(new()\n    {\n        MacAddress = nic.MacAddress,\n        Type = \"ipv4\",\n    });\n\n    var byId = Scaleway.GetIpamIp.Invoke(new()\n    {\n        Resource = new Scaleway.Inputs.GetIpamIpResourceInputArgs\n        {\n            Id = nic.Id,\n            Type = \"instance_private_nic\",\n        },\n        Type = \"ipv4\",\n    });\n\n    var main = new Scaleway.RdbInstance(\"main\", new()\n    {\n        NodeType = \"DB-DEV-S\",\n        Engine = \"PostgreSQL-15\",\n        IsHaCluster = true,\n        DisableBackup = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        PrivateNetwork = new Scaleway.Inputs.RdbInstancePrivateNetworkArgs\n        {\n            PnId = pn.Id,\n        },\n    });\n\n    var byName = Scaleway.GetIpamIp.Invoke(new()\n    {\n        Resource = new Scaleway.Inputs.GetIpamIpResourceInputArgs\n        {\n            Name = main.Name,\n            Type = \"rdb_instance\",\n        },\n        Type = \"ipv4\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tnic, err := scaleway.NewInstancePrivateNic(ctx, \"nic\", \u0026scaleway.InstancePrivateNicArgs{\n\t\t\tServerId:         pulumi.Any(scaleway_instance_server.Server.Id),\n\t\t\tPrivateNetworkId: pn.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupIpamIpOutput(ctx, scaleway.GetIpamIpOutputArgs{\n\t\t\tMacAddress: nic.MacAddress,\n\t\t\tType:       pulumi.String(\"ipv4\"),\n\t\t}, nil)\n\t\t_ = scaleway.LookupIpamIpOutput(ctx, scaleway.GetIpamIpOutputArgs{\n\t\t\tResource: \u0026scaleway.GetIpamIpResourceArgs{\n\t\t\t\tId:   nic.ID(),\n\t\t\t\tType: pulumi.String(\"instance_private_nic\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"ipv4\"),\n\t\t}, nil)\n\t\tmain, err := scaleway.NewRdbInstance(ctx, \"main\", \u0026scaleway.RdbInstanceArgs{\n\t\t\tNodeType:      pulumi.String(\"DB-DEV-S\"),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-15\"),\n\t\t\tIsHaCluster:   pulumi.Bool(true),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tPrivateNetwork: \u0026scaleway.RdbInstancePrivateNetworkArgs{\n\t\t\t\tPnId: pn.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupIpamIpOutput(ctx, scaleway.GetIpamIpOutputArgs{\n\t\t\tResource: \u0026scaleway.GetIpamIpResourceArgs{\n\t\t\t\tName: main.Name,\n\t\t\t\tType: pulumi.String(\"rdb_instance\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"ipv4\"),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.InstancePrivateNic;\nimport com.pulumi.scaleway.InstancePrivateNicArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIpamIpArgs;\nimport com.pulumi.scaleway.inputs.GetIpamIpResourceArgs;\nimport com.pulumi.scaleway.RdbInstance;\nimport com.pulumi.scaleway.RdbInstanceArgs;\nimport com.pulumi.scaleway.inputs.RdbInstancePrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn = new VpcPrivateNetwork(\"pn\");\n\n        var nic = new InstancePrivateNic(\"nic\", InstancePrivateNicArgs.builder()        \n            .serverId(scaleway_instance_server.server().id())\n            .privateNetworkId(pn.id())\n            .build());\n\n        final var byMac = ScalewayFunctions.getIpamIp(GetIpamIpArgs.builder()\n            .macAddress(nic.macAddress())\n            .type(\"ipv4\")\n            .build());\n\n        final var byId = ScalewayFunctions.getIpamIp(GetIpamIpArgs.builder()\n            .resource(GetIpamIpResourceArgs.builder()\n                .id(nic.id())\n                .type(\"instance_private_nic\")\n                .build())\n            .type(\"ipv4\")\n            .build());\n\n        var main = new RdbInstance(\"main\", RdbInstanceArgs.builder()        \n            .nodeType(\"DB-DEV-S\")\n            .engine(\"PostgreSQL-15\")\n            .isHaCluster(true)\n            .disableBackup(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .privateNetwork(RdbInstancePrivateNetworkArgs.builder()\n                .pnId(pn.id())\n                .build())\n            .build());\n\n        final var byName = ScalewayFunctions.getIpamIp(GetIpamIpArgs.builder()\n            .resource(GetIpamIpResourceArgs.builder()\n                .name(main.name())\n                .type(\"rdb_instance\")\n                .build())\n            .type(\"ipv4\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Get Instance IP in a private network\n  nic:\n    type: scaleway:InstancePrivateNic\n    properties:\n      serverId: ${scaleway_instance_server.server.id}\n      privateNetworkId: ${pn.id}\n  # Find the private IPv4 using resource name\n  pn:\n    type: scaleway:VpcPrivateNetwork\n  main:\n    type: scaleway:RdbInstance\n    properties:\n      nodeType: DB-DEV-S\n      engine: PostgreSQL-15\n      isHaCluster: true\n      disableBackup: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      privateNetwork:\n        pnId: ${pn.id}\nvariables:\n  byMac:\n    fn::invoke:\n      Function: scaleway:getIpamIp\n      Arguments:\n        macAddress: ${nic.macAddress}\n        type: ipv4\n  byId:\n    fn::invoke:\n      Function: scaleway:getIpamIp\n      Arguments:\n        resource:\n          id: ${nic.id}\n          type: instance_private_nic\n        type: ipv4\n  byName:\n    fn::invoke:\n      Function: scaleway:getIpamIp\n      Arguments:\n        resource:\n          name: ${main.name}\n          type: rdb_instance\n        type: ipv4\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIpamIp.\n",
                "properties": {
                    "macAddress": {
                        "type": "string",
                        "description": "The Mac Address linked to the IP.\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "The ID of the private network the IP belong to.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the IP is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the IP exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "resource": {
                        "$ref": "#/types/scaleway:index/getIpamIpResource:getIpamIpResource",
                        "description": "Filter by resource ID, type or name. If specified, `type` is required, and at least one of `id` or `name` must be set.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the IP.\nAs datasource only returns one IP, the search with given tags must return only one result.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the resource to get the IP from. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1#pkg-constants) with type list.\n"
                    },
                    "zonal": {
                        "type": "string",
                        "description": "Only IPs that are zonal, and in this zone, will be returned.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIpamIp.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "macAddress": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "privateNetworkId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "resource": {
                        "$ref": "#/types/scaleway:index/getIpamIpResource:getIpamIpResource"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "zonal": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "organizationId",
                    "projectId",
                    "region",
                    "type",
                    "zonal",
                    "id"
                ]
            }
        },
        "scaleway:index/getK8sCluster:getK8sCluster": {
            "description": "Gets information about a Kubernetes Cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myKey = scaleway.getK8sCluster({\n    clusterId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_k8s_cluster(cluster_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myKey = Scaleway.GetK8sCluster.Invoke(new()\n    {\n        ClusterId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupK8sCluster(ctx, \u0026scaleway.LookupK8sClusterArgs{\n\t\t\tClusterId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetK8sClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = ScalewayFunctions.getK8sCluster(GetK8sClusterArgs.builder()\n            .clusterId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    fn::invoke:\n      Function: scaleway:getK8sCluster\n      Arguments:\n        clusterId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getK8sCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster ID. Only one of `name` and `cluster_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cluster name. Only one of `name` and `cluster_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the cluster exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getK8sCluster.\n",
                "properties": {
                    "admissionPlugins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of [admission plugins](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) enabled on the cluster.\n"
                    },
                    "apiserverCertSans": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "apiserverUrl": {
                        "type": "string",
                        "description": "The URL of the Kubernetes API server.\n"
                    },
                    "autoUpgrades": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getK8sClusterAutoUpgrade:getK8sClusterAutoUpgrade"
                        },
                        "description": "The auto upgrade configuration.\n"
                    },
                    "autoscalerConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getK8sClusterAutoscalerConfig:getK8sClusterAutoscalerConfig"
                        },
                        "description": "The configuration options for the [Kubernetes cluster autoscaler](https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler).\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "cni": {
                        "type": "string",
                        "description": "The Container Network Interface (CNI) for the Kubernetes cluster.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the cluster.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the Kubernetes cluster.\n"
                    },
                    "featureGates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of [feature gates](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/) enabled on the cluster.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kubeconfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getK8sClusterKubeconfig:getK8sClusterKubeconfig"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "openIdConnectConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getK8sClusterOpenIdConnectConfig:getK8sClusterOpenIdConnectConfig"
                        }
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the cluster is associated with.\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "The ID of the private network of the cluster.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the cluster is associated with.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the cluster is.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Kubernetes cluster.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Kubernetes cluster.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the Kubernetes cluster.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the cluster.\n"
                    },
                    "upgradeAvailable": {
                        "type": "boolean",
                        "description": "True if a newer Kubernetes version is available.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the Kubernetes cluster.\n"
                    },
                    "wildcardDns": {
                        "type": "string",
                        "description": "The DNS wildcard that points to all ready nodes.\n"
                    }
                },
                "type": "object",
                "required": [
                    "admissionPlugins",
                    "apiserverCertSans",
                    "apiserverUrl",
                    "autoUpgrades",
                    "autoscalerConfigs",
                    "cni",
                    "createdAt",
                    "description",
                    "featureGates",
                    "kubeconfigs",
                    "openIdConnectConfigs",
                    "organizationId",
                    "privateNetworkId",
                    "projectId",
                    "status",
                    "tags",
                    "type",
                    "updatedAt",
                    "upgradeAvailable",
                    "version",
                    "wildcardDns",
                    "id"
                ]
            }
        },
        "scaleway:index/getK8sPool:getK8sPool": {
            "description": "Gets information about a Kubernetes Cluster's Pool.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myKey = scaleway.getK8sPool({\n    poolId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_k8s_pool(pool_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myKey = Scaleway.GetK8sPool.Invoke(new()\n    {\n        PoolId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupK8sPool(ctx, \u0026scaleway.LookupK8sPoolArgs{\n\t\t\tPoolId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetK8sPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = ScalewayFunctions.getK8sPool(GetK8sPoolArgs.builder()\n            .poolId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    fn::invoke:\n      Function: scaleway:getK8sPool\n      Arguments:\n        poolId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getK8sPool.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster ID. Required when `name` is set.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The pool name. Only one of `name` and `pool_id` should be specified. `cluster_id` should be specified with `name`.\n"
                    },
                    "poolId": {
                        "type": "string",
                        "description": "The pool's ID. Only one of `name` and `pool_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the pool exists.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the pool.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getK8sPool.\n",
                "properties": {
                    "autohealing": {
                        "type": "boolean",
                        "description": "True if the autohealing feature is enabled for this pool.\n"
                    },
                    "autoscaling": {
                        "type": "boolean",
                        "description": "True if the autoscaling feature is enabled for this pool.\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "containerRuntime": {
                        "type": "string",
                        "description": "The container runtime of the pool.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the pool.\n"
                    },
                    "currentSize": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kubeletArgs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "maxSize": {
                        "type": "integer",
                        "description": "The maximum size of the pool, used by the autoscaling feature.\n"
                    },
                    "minSize": {
                        "type": "integer",
                        "description": "The minimum size of the pool, used by the autoscaling feature.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the node.\n"
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "The commercial type of the pool instances.\n"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getK8sPoolNode:getK8sPoolNode"
                        },
                        "description": "(List of) The nodes in the default pool.\n"
                    },
                    "placementGroupId": {
                        "type": "string",
                        "description": "[placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool are attached to.\n"
                    },
                    "poolId": {
                        "type": "string"
                    },
                    "publicIpDisabled": {
                        "type": "boolean"
                    },
                    "region": {
                        "type": "string"
                    },
                    "rootVolumeSizeInGb": {
                        "type": "integer"
                    },
                    "rootVolumeType": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the pool.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the node.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the pool.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the pool.\n"
                    },
                    "upgradePolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getK8sPoolUpgradePolicy:getK8sPoolUpgradePolicy"
                        }
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the pool.\n"
                    },
                    "waitForPoolReady": {
                        "type": "boolean"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "autohealing",
                    "autoscaling",
                    "containerRuntime",
                    "createdAt",
                    "currentSize",
                    "kubeletArgs",
                    "maxSize",
                    "minSize",
                    "nodeType",
                    "nodes",
                    "placementGroupId",
                    "publicIpDisabled",
                    "rootVolumeSizeInGb",
                    "rootVolumeType",
                    "status",
                    "tags",
                    "updatedAt",
                    "upgradePolicies",
                    "version",
                    "waitForPoolReady",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getK8sVersion:getK8sVersion": {
            "description": "Gets information about a Kubernetes version.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/k8s/api).\n\nYou can also use the [scaleway-cli](https://github.com/scaleway/scaleway-cli) with `scw k8s version list` to list all available versions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Use the latest version\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst latest = scaleway.getK8sVersion({\n    name: \"latest\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nlatest = scaleway.get_k8s_version(name=\"latest\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var latest = Scaleway.GetK8sVersion.Invoke(new()\n    {\n        Name = \"latest\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetK8sVersion(ctx, \u0026scaleway.GetK8sVersionArgs{\n\t\t\tName: \"latest\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetK8sVersionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var latest = ScalewayFunctions.getK8sVersion(GetK8sVersionArgs.builder()\n            .name(\"latest\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  latest:\n    fn::invoke:\n      Function: scaleway:getK8sVersion\n      Arguments:\n        name: latest\n```\n{{% /example %}}\n{{% example %}}\n### Use a specific version\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byName = scaleway.getK8sVersion({\n    name: \"1.26.0\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_k8s_version(name=\"1.26.0\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetK8sVersion.Invoke(new()\n    {\n        Name = \"1.26.0\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetK8sVersion(ctx, \u0026scaleway.GetK8sVersionArgs{\n\t\t\tName: \"1.26.0\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetK8sVersionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getK8sVersion(GetK8sVersionArgs.builder()\n            .name(\"1.26.0\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getK8sVersion\n      Arguments:\n        name: 1.26.0\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getK8sVersion.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Kubernetes version.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the version exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getK8sVersion.\n",
                "properties": {
                    "availableCnis": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of supported Container Network Interface (CNI) plugins for this version.\n"
                    },
                    "availableContainerRuntimes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of supported container runtimes for this version.\n"
                    },
                    "availableFeatureGates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of supported feature gates for this version.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "availableCnis",
                    "availableContainerRuntimes",
                    "availableFeatureGates",
                    "name",
                    "region",
                    "id"
                ]
            }
        },
        "scaleway:index/getLb:getLb": {
            "description": "Gets information about a Load Balancer.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byName = scaleway.getLb({\n    name: \"foobar\",\n});\nconst byId = scaleway.getLb({\n    lbId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_lb(name=\"foobar\")\nby_id = scaleway.get_lb(lb_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetLb.Invoke(new()\n    {\n        Name = \"foobar\",\n    });\n\n    var byId = Scaleway.GetLb.Invoke(new()\n    {\n        LbId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupLb(ctx, \u0026scaleway.LookupLbArgs{\n\t\t\tName: pulumi.StringRef(\"foobar\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupLb(ctx, \u0026scaleway.LookupLbArgs{\n\t\t\tLbId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLbArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getLb(GetLbArgs.builder()\n            .name(\"foobar\")\n            .build());\n\n        final var byId = ScalewayFunctions.getLb(GetLbArgs.builder()\n            .lbId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getLb\n      Arguments:\n        name: foobar\n  byId:\n    fn::invoke:\n      Function: scaleway:getLb\n      Arguments:\n        lbId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLb.\n",
                "properties": {
                    "lbId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The load balancer name.\n"
                    },
                    "releaseIp": {
                        "type": "boolean"
                    },
                    "zone": {
                        "type": "string",
                        "description": "(Defaults to provider `zone`) The zone in which the LB exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLb.\n",
                "properties": {
                    "assignFlexibleIp": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The load-balancer public IP Address.\n"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "lbId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbPrivateNetwork:getLbPrivateNetwork"
                        }
                    },
                    "projectId": {
                        "type": "string",
                        "description": "(Defaults to provider `project_id`) The ID of the project the LB is associated with.\n"
                    },
                    "region": {
                        "type": "string"
                    },
                    "releaseIp": {
                        "type": "boolean"
                    },
                    "sslCompatibilityLevel": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the load-balancer.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the load-balancer.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "(Defaults to provider `zone`) The zone in which the LB exists.\n"
                    }
                },
                "type": "object",
                "required": [
                    "assignFlexibleIp",
                    "description",
                    "ipAddress",
                    "ipId",
                    "organizationId",
                    "privateNetworks",
                    "projectId",
                    "region",
                    "sslCompatibilityLevel",
                    "tags",
                    "type",
                    "id"
                ]
            }
        },
        "scaleway:index/getLbAcls:getLbAcls": {
            "description": "Gets information about multiple Load Balancer ACLs.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byFrontID = scaleway.getLbAcls({\n    frontendId: scaleway_lb_frontend.frt01.id,\n});\nconst byFrontIDAndName = scaleway.getLbAcls({\n    frontendId: scaleway_lb_frontend.frt01.id,\n    name: \"tf-acls-datasource\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_front_id = scaleway.get_lb_acls(frontend_id=scaleway_lb_frontend[\"frt01\"][\"id\"])\nby_front_id_and_name = scaleway.get_lb_acls(frontend_id=scaleway_lb_frontend[\"frt01\"][\"id\"],\n    name=\"tf-acls-datasource\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byFrontID = Scaleway.GetLbAcls.Invoke(new()\n    {\n        FrontendId = scaleway_lb_frontend.Frt01.Id,\n    });\n\n    var byFrontIDAndName = Scaleway.GetLbAcls.Invoke(new()\n    {\n        FrontendId = scaleway_lb_frontend.Frt01.Id,\n        Name = \"tf-acls-datasource\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetLbAcls(ctx, \u0026scaleway.GetLbAclsArgs{\n\t\t\tFrontendId: scaleway_lb_frontend.Frt01.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.GetLbAcls(ctx, \u0026scaleway.GetLbAclsArgs{\n\t\t\tFrontendId: scaleway_lb_frontend.Frt01.Id,\n\t\t\tName:       pulumi.StringRef(\"tf-acls-datasource\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLbAclsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byFrontID = ScalewayFunctions.getLbAcls(GetLbAclsArgs.builder()\n            .frontendId(scaleway_lb_frontend.frt01().id())\n            .build());\n\n        final var byFrontIDAndName = ScalewayFunctions.getLbAcls(GetLbAclsArgs.builder()\n            .frontendId(scaleway_lb_frontend.frt01().id())\n            .name(\"tf-acls-datasource\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byFrontID:\n    fn::invoke:\n      Function: scaleway:getLbAcls\n      Arguments:\n        frontendId: ${scaleway_lb_frontend.frt01.id}\n  byFrontIDAndName:\n    fn::invoke:\n      Function: scaleway:getLbAcls\n      Arguments:\n        frontendId: ${scaleway_lb_frontend.frt01.id}\n        name: tf-acls-datasource\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLbAcls.\n",
                "properties": {
                    "frontendId": {
                        "type": "string",
                        "description": "The frontend ID this ACL is attached to. ACLs with a frontend ID like it are listed.\n\u003e **Important:** LB Frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The ACL name used as filter. ACLs with a name like it are listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which ACLs exist.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "frontendId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLbAcls.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbAclsAcl:getLbAclsAcl"
                        },
                        "description": "List of found ACLs\n"
                    },
                    "frontendId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "acls",
                    "frontendId",
                    "organizationId",
                    "projectId",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getLbBackend:getLbBackend": {
            "description": "Get information about Scaleway Load-Balancer Backends.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-backends).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst mainLbIp = new scaleway.LbIp(\"mainLbIp\", {});\nconst mainLb = new scaleway.Lb(\"mainLb\", {\n    ipId: mainLbIp.id,\n    type: \"LB-S\",\n});\nconst mainLbBackend = new scaleway.LbBackend(\"mainLbBackend\", {\n    lbId: mainLb.id,\n    forwardProtocol: \"http\",\n    forwardPort: 80,\n});\nconst byID = scaleway.getLbBackendOutput({\n    backendId: mainLbBackend.id,\n});\nconst byName = scaleway.getLbBackendOutput({\n    name: mainLbBackend.name,\n    lbId: mainLb.id,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain_lb_ip = scaleway.LbIp(\"mainLbIp\")\nmain_lb = scaleway.Lb(\"mainLb\",\n    ip_id=main_lb_ip.id,\n    type=\"LB-S\")\nmain_lb_backend = scaleway.LbBackend(\"mainLbBackend\",\n    lb_id=main_lb.id,\n    forward_protocol=\"http\",\n    forward_port=80)\nby_id = scaleway.get_lb_backend_output(backend_id=main_lb_backend.id)\nby_name = scaleway.get_lb_backend_output(name=main_lb_backend.name,\n    lb_id=main_lb.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainLbIp = new Scaleway.LbIp(\"mainLbIp\");\n\n    var mainLb = new Scaleway.Lb(\"mainLb\", new()\n    {\n        IpId = mainLbIp.Id,\n        Type = \"LB-S\",\n    });\n\n    var mainLbBackend = new Scaleway.LbBackend(\"mainLbBackend\", new()\n    {\n        LbId = mainLb.Id,\n        ForwardProtocol = \"http\",\n        ForwardPort = 80,\n    });\n\n    var byID = Scaleway.GetLbBackend.Invoke(new()\n    {\n        BackendId = mainLbBackend.Id,\n    });\n\n    var byName = Scaleway.GetLbBackend.Invoke(new()\n    {\n        Name = mainLbBackend.Name,\n        LbId = mainLb.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainLbIp, err := scaleway.NewLbIp(ctx, \"mainLbIp\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainLb, err := scaleway.NewLb(ctx, \"mainLb\", \u0026scaleway.LbArgs{\n\t\t\tIpId: mainLbIp.ID(),\n\t\t\tType: pulumi.String(\"LB-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainLbBackend, err := scaleway.NewLbBackend(ctx, \"mainLbBackend\", \u0026scaleway.LbBackendArgs{\n\t\t\tLbId:            mainLb.ID(),\n\t\t\tForwardProtocol: pulumi.String(\"http\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupLbBackendOutput(ctx, scaleway.GetLbBackendOutputArgs{\n\t\t\tBackendId: mainLbBackend.ID(),\n\t\t}, nil)\n\t\t_ = scaleway.LookupLbBackendOutput(ctx, scaleway.GetLbBackendOutputArgs{\n\t\t\tName: mainLbBackend.Name,\n\t\t\tLbId: mainLb.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LbIp;\nimport com.pulumi.scaleway.Lb;\nimport com.pulumi.scaleway.LbArgs;\nimport com.pulumi.scaleway.LbBackend;\nimport com.pulumi.scaleway.LbBackendArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLbBackendArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainLbIp = new LbIp(\"mainLbIp\");\n\n        var mainLb = new Lb(\"mainLb\", LbArgs.builder()        \n            .ipId(mainLbIp.id())\n            .type(\"LB-S\")\n            .build());\n\n        var mainLbBackend = new LbBackend(\"mainLbBackend\", LbBackendArgs.builder()        \n            .lbId(mainLb.id())\n            .forwardProtocol(\"http\")\n            .forwardPort(\"80\")\n            .build());\n\n        final var byID = ScalewayFunctions.getLbBackend(GetLbBackendArgs.builder()\n            .backendId(mainLbBackend.id())\n            .build());\n\n        final var byName = ScalewayFunctions.getLbBackend(GetLbBackendArgs.builder()\n            .name(mainLbBackend.name())\n            .lbId(mainLb.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainLbIp:\n    type: scaleway:LbIp\n  mainLb:\n    type: scaleway:Lb\n    properties:\n      ipId: ${mainLbIp.id}\n      type: LB-S\n  mainLbBackend:\n    type: scaleway:LbBackend\n    properties:\n      lbId: ${mainLb.id}\n      forwardProtocol: http\n      forwardPort: '80'\nvariables:\n  byID:\n    fn::invoke:\n      Function: scaleway:getLbBackend\n      Arguments:\n        backendId: ${mainLbBackend.id}\n  byName:\n    fn::invoke:\n      Function: scaleway:getLbBackend\n      Arguments:\n        name: ${mainLbBackend.name}\n        lbId: ${mainLb.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLbBackend.\n",
                "properties": {
                    "backendId": {
                        "type": "string",
                        "description": "The backend id.\n- Only one of `name` and `backend_id` should be specified.\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID this backend is attached to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the backend.\n- When using the `name` you should specify the `lb-id`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLbBackend.\n",
                "properties": {
                    "backendId": {
                        "type": "string"
                    },
                    "failoverHost": {
                        "type": "string"
                    },
                    "forwardPort": {
                        "type": "integer"
                    },
                    "forwardPortAlgorithm": {
                        "type": "string"
                    },
                    "forwardProtocol": {
                        "type": "string"
                    },
                    "healthCheckDelay": {
                        "type": "string"
                    },
                    "healthCheckHttp": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbBackendHealthCheckHttp:getLbBackendHealthCheckHttp"
                        }
                    },
                    "healthCheckHttps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbBackendHealthCheckHttp:getLbBackendHealthCheckHttp"
                        }
                    },
                    "healthCheckMaxRetries": {
                        "type": "integer"
                    },
                    "healthCheckPort": {
                        "type": "integer"
                    },
                    "healthCheckSendProxy": {
                        "type": "boolean"
                    },
                    "healthCheckTcps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbBackendHealthCheckTcp:getLbBackendHealthCheckTcp"
                        }
                    },
                    "healthCheckTimeout": {
                        "type": "string"
                    },
                    "healthCheckTransientDelay": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ignoreSslServerVerify": {
                        "type": "boolean"
                    },
                    "lbId": {
                        "type": "string"
                    },
                    "maxConnections": {
                        "type": "integer"
                    },
                    "maxRetries": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "onMarkedDownAction": {
                        "type": "string"
                    },
                    "proxyProtocol": {
                        "type": "string"
                    },
                    "redispatchAttemptCount": {
                        "type": "integer"
                    },
                    "sendProxyV2": {
                        "type": "boolean"
                    },
                    "serverIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sslBridging": {
                        "type": "boolean"
                    },
                    "stickySessions": {
                        "type": "string"
                    },
                    "stickySessionsCookieName": {
                        "type": "string"
                    },
                    "timeoutConnect": {
                        "type": "string"
                    },
                    "timeoutQueue": {
                        "type": "string"
                    },
                    "timeoutServer": {
                        "type": "string"
                    },
                    "timeoutTunnel": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "failoverHost",
                    "forwardPort",
                    "forwardPortAlgorithm",
                    "forwardProtocol",
                    "healthCheckDelay",
                    "healthCheckHttp",
                    "healthCheckHttps",
                    "healthCheckMaxRetries",
                    "healthCheckPort",
                    "healthCheckSendProxy",
                    "healthCheckTcps",
                    "healthCheckTimeout",
                    "healthCheckTransientDelay",
                    "ignoreSslServerVerify",
                    "maxConnections",
                    "maxRetries",
                    "onMarkedDownAction",
                    "proxyProtocol",
                    "redispatchAttemptCount",
                    "sendProxyV2",
                    "serverIps",
                    "sslBridging",
                    "stickySessions",
                    "stickySessionsCookieName",
                    "timeoutConnect",
                    "timeoutQueue",
                    "timeoutServer",
                    "timeoutTunnel",
                    "id"
                ]
            }
        },
        "scaleway:index/getLbBackends:getLbBackends": {
            "description": "Gets information about multiple Load Balancer Backends.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byLBID = scaleway.getLbBackends({\n    lbId: scaleway_lb.lb01.id,\n});\nconst byLBIDAndName = scaleway.getLbBackends({\n    lbId: scaleway_lb.lb01.id,\n    name: \"tf-backend-datasource\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_lbid = scaleway.get_lb_backends(lb_id=scaleway_lb[\"lb01\"][\"id\"])\nby_lbid_and_name = scaleway.get_lb_backends(lb_id=scaleway_lb[\"lb01\"][\"id\"],\n    name=\"tf-backend-datasource\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byLBID = Scaleway.GetLbBackends.Invoke(new()\n    {\n        LbId = scaleway_lb.Lb01.Id,\n    });\n\n    var byLBIDAndName = Scaleway.GetLbBackends.Invoke(new()\n    {\n        LbId = scaleway_lb.Lb01.Id,\n        Name = \"tf-backend-datasource\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetLbBackends(ctx, \u0026scaleway.GetLbBackendsArgs{\n\t\t\tLbId: scaleway_lb.Lb01.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.GetLbBackends(ctx, \u0026scaleway.GetLbBackendsArgs{\n\t\t\tLbId: scaleway_lb.Lb01.Id,\n\t\t\tName: pulumi.StringRef(\"tf-backend-datasource\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLbBackendsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byLBID = ScalewayFunctions.getLbBackends(GetLbBackendsArgs.builder()\n            .lbId(scaleway_lb.lb01().id())\n            .build());\n\n        final var byLBIDAndName = ScalewayFunctions.getLbBackends(GetLbBackendsArgs.builder()\n            .lbId(scaleway_lb.lb01().id())\n            .name(\"tf-backend-datasource\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byLBID:\n    fn::invoke:\n      Function: scaleway:getLbBackends\n      Arguments:\n        lbId: ${scaleway_lb.lb01.id}\n  byLBIDAndName:\n    fn::invoke:\n      Function: scaleway:getLbBackends\n      Arguments:\n        lbId: ${scaleway_lb.lb01.id}\n        name: tf-backend-datasource\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLbBackends.\n",
                "properties": {
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID this backend is attached to. backends with a LB ID like it are listed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The backend name used as filter. Backends with a name like it are listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which backends exist.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "lbId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLbBackends.\n",
                "properties": {
                    "backends": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbBackendsBackend:getLbBackendsBackend"
                        },
                        "description": "List of found backends\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lbId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "backends",
                    "lbId",
                    "organizationId",
                    "projectId",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getLbCertificate:getLbCertificate": {
            "description": "Get information about Scaleway Load-Balancer Certificates.\n\nThis data source can prove useful when a module accepts an LB Certificate as an input variable and needs to, for example, determine the security of a certificate for your LB Frontend associated with your domain, etc.\n\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-certificate).\n\n## Examples\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLbCertificate.\n",
                "properties": {
                    "certificateId": {
                        "type": "string",
                        "description": "The certificate id.\n- Only one of `name` and `certificate_id` should be specified.\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID this certificate is attached to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the certificate backend.\n- When using a certificate `name` you should specify the `lb-id`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLbCertificate.\n",
                "properties": {
                    "certificateId": {
                        "type": "string"
                    },
                    "commonName": {
                        "type": "string"
                    },
                    "customCertificates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbCertificateCustomCertificate:getLbCertificateCustomCertificate"
                        }
                    },
                    "fingerprint": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lbId": {
                        "type": "string"
                    },
                    "letsencrypts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbCertificateLetsencrypt:getLbCertificateLetsencrypt"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "notValidAfter": {
                        "type": "string"
                    },
                    "notValidBefore": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "subjectAlternativeNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "commonName",
                    "customCertificates",
                    "fingerprint",
                    "letsencrypts",
                    "notValidAfter",
                    "notValidBefore",
                    "status",
                    "subjectAlternativeNames",
                    "id"
                ]
            }
        },
        "scaleway:index/getLbFrontend:getLbFrontend": {
            "description": "Get information about Scaleway Load-Balancer Frontends.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-frontends).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst ip01 = new scaleway.LbIp(\"ip01\", {});\nconst lb01 = new scaleway.Lb(\"lb01\", {\n    ipId: ip01.id,\n    type: \"lb-s\",\n});\nconst bkd01 = new scaleway.LbBackend(\"bkd01\", {\n    lbId: lb01.id,\n    forwardProtocol: \"tcp\",\n    forwardPort: 80,\n    proxyProtocol: \"none\",\n});\nconst frt01 = new scaleway.LbFrontend(\"frt01\", {\n    lbId: lb01.id,\n    backendId: bkd01.id,\n    inboundPort: 80,\n});\nconst byID = scaleway.getLbFrontendOutput({\n    frontendId: frt01.id,\n});\nconst byName = scaleway.getLbFrontendOutput({\n    name: frt01.name,\n    lbId: lb01.id,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nip01 = scaleway.LbIp(\"ip01\")\nlb01 = scaleway.Lb(\"lb01\",\n    ip_id=ip01.id,\n    type=\"lb-s\")\nbkd01 = scaleway.LbBackend(\"bkd01\",\n    lb_id=lb01.id,\n    forward_protocol=\"tcp\",\n    forward_port=80,\n    proxy_protocol=\"none\")\nfrt01 = scaleway.LbFrontend(\"frt01\",\n    lb_id=lb01.id,\n    backend_id=bkd01.id,\n    inbound_port=80)\nby_id = scaleway.get_lb_frontend_output(frontend_id=frt01.id)\nby_name = scaleway.get_lb_frontend_output(name=frt01.name,\n    lb_id=lb01.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip01 = new Scaleway.LbIp(\"ip01\");\n\n    var lb01 = new Scaleway.Lb(\"lb01\", new()\n    {\n        IpId = ip01.Id,\n        Type = \"lb-s\",\n    });\n\n    var bkd01 = new Scaleway.LbBackend(\"bkd01\", new()\n    {\n        LbId = lb01.Id,\n        ForwardProtocol = \"tcp\",\n        ForwardPort = 80,\n        ProxyProtocol = \"none\",\n    });\n\n    var frt01 = new Scaleway.LbFrontend(\"frt01\", new()\n    {\n        LbId = lb01.Id,\n        BackendId = bkd01.Id,\n        InboundPort = 80,\n    });\n\n    var byID = Scaleway.GetLbFrontend.Invoke(new()\n    {\n        FrontendId = frt01.Id,\n    });\n\n    var byName = Scaleway.GetLbFrontend.Invoke(new()\n    {\n        Name = frt01.Name,\n        LbId = lb01.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tip01, err := scaleway.NewLbIp(ctx, \"ip01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlb01, err := scaleway.NewLb(ctx, \"lb01\", \u0026scaleway.LbArgs{\n\t\t\tIpId: ip01.ID(),\n\t\t\tType: pulumi.String(\"lb-s\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbkd01, err := scaleway.NewLbBackend(ctx, \"bkd01\", \u0026scaleway.LbBackendArgs{\n\t\t\tLbId:            lb01.ID(),\n\t\t\tForwardProtocol: pulumi.String(\"tcp\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t\tProxyProtocol:   pulumi.String(\"none\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfrt01, err := scaleway.NewLbFrontend(ctx, \"frt01\", \u0026scaleway.LbFrontendArgs{\n\t\t\tLbId:        lb01.ID(),\n\t\t\tBackendId:   bkd01.ID(),\n\t\t\tInboundPort: pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupLbFrontendOutput(ctx, scaleway.GetLbFrontendOutputArgs{\n\t\t\tFrontendId: frt01.ID(),\n\t\t}, nil)\n\t\t_ = scaleway.LookupLbFrontendOutput(ctx, scaleway.GetLbFrontendOutputArgs{\n\t\t\tName: frt01.Name,\n\t\t\tLbId: lb01.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LbIp;\nimport com.pulumi.scaleway.Lb;\nimport com.pulumi.scaleway.LbArgs;\nimport com.pulumi.scaleway.LbBackend;\nimport com.pulumi.scaleway.LbBackendArgs;\nimport com.pulumi.scaleway.LbFrontend;\nimport com.pulumi.scaleway.LbFrontendArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLbFrontendArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ip01 = new LbIp(\"ip01\");\n\n        var lb01 = new Lb(\"lb01\", LbArgs.builder()        \n            .ipId(ip01.id())\n            .type(\"lb-s\")\n            .build());\n\n        var bkd01 = new LbBackend(\"bkd01\", LbBackendArgs.builder()        \n            .lbId(lb01.id())\n            .forwardProtocol(\"tcp\")\n            .forwardPort(80)\n            .proxyProtocol(\"none\")\n            .build());\n\n        var frt01 = new LbFrontend(\"frt01\", LbFrontendArgs.builder()        \n            .lbId(lb01.id())\n            .backendId(bkd01.id())\n            .inboundPort(80)\n            .build());\n\n        final var byID = ScalewayFunctions.getLbFrontend(GetLbFrontendArgs.builder()\n            .frontendId(frt01.id())\n            .build());\n\n        final var byName = ScalewayFunctions.getLbFrontend(GetLbFrontendArgs.builder()\n            .name(frt01.name())\n            .lbId(lb01.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ip01:\n    type: scaleway:LbIp\n  lb01:\n    type: scaleway:Lb\n    properties:\n      ipId: ${ip01.id}\n      type: lb-s\n  bkd01:\n    type: scaleway:LbBackend\n    properties:\n      lbId: ${lb01.id}\n      forwardProtocol: tcp\n      forwardPort: 80\n      proxyProtocol: none\n  frt01:\n    type: scaleway:LbFrontend\n    properties:\n      lbId: ${lb01.id}\n      backendId: ${bkd01.id}\n      inboundPort: 80\nvariables:\n  byID:\n    fn::invoke:\n      Function: scaleway:getLbFrontend\n      Arguments:\n        frontendId: ${frt01.id}\n  byName:\n    fn::invoke:\n      Function: scaleway:getLbFrontend\n      Arguments:\n        name: ${frt01.name}\n        lbId: ${lb01.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLbFrontend.\n",
                "properties": {
                    "frontendId": {
                        "type": "string",
                        "description": "The frontend id.\n- Only one of `name` and `frontend_id` should be specified.\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID this frontend is attached to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the frontend.\n- When using the `name` you should specify the `lb-id`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLbFrontend.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbFrontendAcl:getLbFrontendAcl"
                        }
                    },
                    "backendId": {
                        "type": "string"
                    },
                    "certificateId": {
                        "type": "string"
                    },
                    "certificateIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "enableHttp3": {
                        "type": "boolean"
                    },
                    "externalAcls": {
                        "type": "boolean"
                    },
                    "frontendId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "inboundPort": {
                        "type": "integer"
                    },
                    "lbId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "timeoutClient": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "acls",
                    "backendId",
                    "certificateId",
                    "certificateIds",
                    "enableHttp3",
                    "externalAcls",
                    "inboundPort",
                    "timeoutClient",
                    "id"
                ]
            }
        },
        "scaleway:index/getLbFrontends:getLbFrontends": {
            "description": "Gets information about multiple Load Balancer Frontends.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byLBID = scaleway.getLbFrontends({\n    lbId: scaleway_lb.lb01.id,\n});\nconst byLBIDAndName = scaleway.getLbFrontends({\n    lbId: scaleway_lb.lb01.id,\n    name: \"tf-frontend-datasource\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_lbid = scaleway.get_lb_frontends(lb_id=scaleway_lb[\"lb01\"][\"id\"])\nby_lbid_and_name = scaleway.get_lb_frontends(lb_id=scaleway_lb[\"lb01\"][\"id\"],\n    name=\"tf-frontend-datasource\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byLBID = Scaleway.GetLbFrontends.Invoke(new()\n    {\n        LbId = scaleway_lb.Lb01.Id,\n    });\n\n    var byLBIDAndName = Scaleway.GetLbFrontends.Invoke(new()\n    {\n        LbId = scaleway_lb.Lb01.Id,\n        Name = \"tf-frontend-datasource\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetLbFrontends(ctx, \u0026scaleway.GetLbFrontendsArgs{\n\t\t\tLbId: scaleway_lb.Lb01.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.GetLbFrontends(ctx, \u0026scaleway.GetLbFrontendsArgs{\n\t\t\tLbId: scaleway_lb.Lb01.Id,\n\t\t\tName: pulumi.StringRef(\"tf-frontend-datasource\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLbFrontendsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byLBID = ScalewayFunctions.getLbFrontends(GetLbFrontendsArgs.builder()\n            .lbId(scaleway_lb.lb01().id())\n            .build());\n\n        final var byLBIDAndName = ScalewayFunctions.getLbFrontends(GetLbFrontendsArgs.builder()\n            .lbId(scaleway_lb.lb01().id())\n            .name(\"tf-frontend-datasource\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byLBID:\n    fn::invoke:\n      Function: scaleway:getLbFrontends\n      Arguments:\n        lbId: ${scaleway_lb.lb01.id}\n  byLBIDAndName:\n    fn::invoke:\n      Function: scaleway:getLbFrontends\n      Arguments:\n        lbId: ${scaleway_lb.lb01.id}\n        name: tf-frontend-datasource\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLbFrontends.\n",
                "properties": {
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID this frontend is attached to. frontends with a LB ID like it are listed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The frontend name used as filter. Frontends with a name like it are listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which frontends exist.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "lbId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLbFrontends.\n",
                "properties": {
                    "frontends": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbFrontendsFrontend:getLbFrontendsFrontend"
                        },
                        "description": "List of found frontends\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lbId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "frontends",
                    "lbId",
                    "organizationId",
                    "projectId",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getLbIp:getLbIp": {
            "description": "Gets information about a Load Balancer IP.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myIp = scaleway.getLbIp({\n    ipId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_ip = scaleway.get_lb_ip(ip_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myIp = Scaleway.GetLbIp.Invoke(new()\n    {\n        IpId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupLbIp(ctx, \u0026scaleway.LookupLbIpArgs{\n\t\t\tIpId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLbIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myIp = ScalewayFunctions.getLbIp(GetLbIpArgs.builder()\n            .ipId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myIp:\n    fn::invoke:\n      Function: scaleway:getLbIp\n      Arguments:\n        ipId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLbIp.\n",
                "properties": {
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address.\nOnly one of `ip_address` and `ip_id` should be specified.\n"
                    },
                    "ipId": {
                        "type": "string",
                        "description": "The IP ID.\nOnly one of `ip_address` and `ip_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLbIp.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The associated load-balancer ID if any\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "(Defaults to provider `organization_id`) The ID of the organization the LB IP is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain associated with this IP.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "lbId",
                    "organizationId",
                    "projectId",
                    "region",
                    "reverse",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getLbIps:getLbIps": {
            "description": "Gets information about multiple Load Balancer IPs.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myKey = scaleway.getLbIps({\n    ipCidrRange: \"0.0.0.0/0\",\n    zone: \"fr-par-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_lb_ips(ip_cidr_range=\"0.0.0.0/0\",\n    zone=\"fr-par-2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myKey = Scaleway.GetLbIps.Invoke(new()\n    {\n        IpCidrRange = \"0.0.0.0/0\",\n        Zone = \"fr-par-2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetLbIps(ctx, \u0026scaleway.GetLbIpsArgs{\n\t\t\tIpCidrRange: pulumi.StringRef(\"0.0.0.0/0\"),\n\t\t\tZone:        pulumi.StringRef(\"fr-par-2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLbIpsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = ScalewayFunctions.getLbIps(GetLbIpsArgs.builder()\n            .ipCidrRange(\"0.0.0.0/0\")\n            .zone(\"fr-par-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    fn::invoke:\n      Function: scaleway:getLbIps\n      Arguments:\n        ipCidrRange: 0.0.0.0/0\n        zone: fr-par-2\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLbIps.\n",
                "properties": {
                    "ipCidrRange": {
                        "type": "string",
                        "description": "The IP CIDR range used as a filter. IPs within a CIDR block like it are listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the load-balancer is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which IPs exist.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLbIps.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipCidrRange": {
                        "type": "string"
                    },
                    "ips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbIpsIp:getLbIpsIp"
                        },
                        "description": "List of found IPs\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the load-balancer is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the load-balancer is associated with.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone in which the load-balancer is.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ips",
                    "organizationId",
                    "projectId",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getLbRoute:getLbRoute": {
            "description": "Get information about Scaleway Load-Balancer Routes.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-route).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst ip01 = new scaleway.LbIp(\"ip01\", {});\nconst lb01 = new scaleway.Lb(\"lb01\", {\n    ipId: ip01.id,\n    type: \"lb-s\",\n});\nconst bkd01 = new scaleway.LbBackend(\"bkd01\", {\n    lbId: lb01.id,\n    forwardProtocol: \"tcp\",\n    forwardPort: 80,\n    proxyProtocol: \"none\",\n});\nconst frt01 = new scaleway.LbFrontend(\"frt01\", {\n    lbId: lb01.id,\n    backendId: bkd01.id,\n    inboundPort: 80,\n});\nconst rt01 = new scaleway.LbRoute(\"rt01\", {\n    frontendId: frt01.id,\n    backendId: bkd01.id,\n    matchSni: \"sni.scaleway.com\",\n});\nconst byID = scaleway.getLbRouteOutput({\n    routeId: rt01.id,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nip01 = scaleway.LbIp(\"ip01\")\nlb01 = scaleway.Lb(\"lb01\",\n    ip_id=ip01.id,\n    type=\"lb-s\")\nbkd01 = scaleway.LbBackend(\"bkd01\",\n    lb_id=lb01.id,\n    forward_protocol=\"tcp\",\n    forward_port=80,\n    proxy_protocol=\"none\")\nfrt01 = scaleway.LbFrontend(\"frt01\",\n    lb_id=lb01.id,\n    backend_id=bkd01.id,\n    inbound_port=80)\nrt01 = scaleway.LbRoute(\"rt01\",\n    frontend_id=frt01.id,\n    backend_id=bkd01.id,\n    match_sni=\"sni.scaleway.com\")\nby_id = scaleway.get_lb_route_output(route_id=rt01.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip01 = new Scaleway.LbIp(\"ip01\");\n\n    var lb01 = new Scaleway.Lb(\"lb01\", new()\n    {\n        IpId = ip01.Id,\n        Type = \"lb-s\",\n    });\n\n    var bkd01 = new Scaleway.LbBackend(\"bkd01\", new()\n    {\n        LbId = lb01.Id,\n        ForwardProtocol = \"tcp\",\n        ForwardPort = 80,\n        ProxyProtocol = \"none\",\n    });\n\n    var frt01 = new Scaleway.LbFrontend(\"frt01\", new()\n    {\n        LbId = lb01.Id,\n        BackendId = bkd01.Id,\n        InboundPort = 80,\n    });\n\n    var rt01 = new Scaleway.LbRoute(\"rt01\", new()\n    {\n        FrontendId = frt01.Id,\n        BackendId = bkd01.Id,\n        MatchSni = \"sni.scaleway.com\",\n    });\n\n    var byID = Scaleway.GetLbRoute.Invoke(new()\n    {\n        RouteId = rt01.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tip01, err := scaleway.NewLbIp(ctx, \"ip01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlb01, err := scaleway.NewLb(ctx, \"lb01\", \u0026scaleway.LbArgs{\n\t\t\tIpId: ip01.ID(),\n\t\t\tType: pulumi.String(\"lb-s\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbkd01, err := scaleway.NewLbBackend(ctx, \"bkd01\", \u0026scaleway.LbBackendArgs{\n\t\t\tLbId:            lb01.ID(),\n\t\t\tForwardProtocol: pulumi.String(\"tcp\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t\tProxyProtocol:   pulumi.String(\"none\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfrt01, err := scaleway.NewLbFrontend(ctx, \"frt01\", \u0026scaleway.LbFrontendArgs{\n\t\t\tLbId:        lb01.ID(),\n\t\t\tBackendId:   bkd01.ID(),\n\t\t\tInboundPort: pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\trt01, err := scaleway.NewLbRoute(ctx, \"rt01\", \u0026scaleway.LbRouteArgs{\n\t\t\tFrontendId: frt01.ID(),\n\t\t\tBackendId:  bkd01.ID(),\n\t\t\tMatchSni:   pulumi.String(\"sni.scaleway.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupLbRouteOutput(ctx, scaleway.GetLbRouteOutputArgs{\n\t\t\tRouteId: rt01.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LbIp;\nimport com.pulumi.scaleway.Lb;\nimport com.pulumi.scaleway.LbArgs;\nimport com.pulumi.scaleway.LbBackend;\nimport com.pulumi.scaleway.LbBackendArgs;\nimport com.pulumi.scaleway.LbFrontend;\nimport com.pulumi.scaleway.LbFrontendArgs;\nimport com.pulumi.scaleway.LbRoute;\nimport com.pulumi.scaleway.LbRouteArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLbRouteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ip01 = new LbIp(\"ip01\");\n\n        var lb01 = new Lb(\"lb01\", LbArgs.builder()        \n            .ipId(ip01.id())\n            .type(\"lb-s\")\n            .build());\n\n        var bkd01 = new LbBackend(\"bkd01\", LbBackendArgs.builder()        \n            .lbId(lb01.id())\n            .forwardProtocol(\"tcp\")\n            .forwardPort(80)\n            .proxyProtocol(\"none\")\n            .build());\n\n        var frt01 = new LbFrontend(\"frt01\", LbFrontendArgs.builder()        \n            .lbId(lb01.id())\n            .backendId(bkd01.id())\n            .inboundPort(80)\n            .build());\n\n        var rt01 = new LbRoute(\"rt01\", LbRouteArgs.builder()        \n            .frontendId(frt01.id())\n            .backendId(bkd01.id())\n            .matchSni(\"sni.scaleway.com\")\n            .build());\n\n        final var byID = ScalewayFunctions.getLbRoute(GetLbRouteArgs.builder()\n            .routeId(rt01.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ip01:\n    type: scaleway:LbIp\n  lb01:\n    type: scaleway:Lb\n    properties:\n      ipId: ${ip01.id}\n      type: lb-s\n  bkd01:\n    type: scaleway:LbBackend\n    properties:\n      lbId: ${lb01.id}\n      forwardProtocol: tcp\n      forwardPort: 80\n      proxyProtocol: none\n  frt01:\n    type: scaleway:LbFrontend\n    properties:\n      lbId: ${lb01.id}\n      backendId: ${bkd01.id}\n      inboundPort: 80\n  rt01:\n    type: scaleway:LbRoute\n    properties:\n      frontendId: ${frt01.id}\n      backendId: ${bkd01.id}\n      matchSni: sni.scaleway.com\nvariables:\n  byID:\n    fn::invoke:\n      Function: scaleway:getLbRoute\n      Arguments:\n        routeId: ${rt01.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLbRoute.\n",
                "properties": {
                    "routeId": {
                        "type": "string",
                        "description": "The route id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "routeId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLbRoute.\n",
                "properties": {
                    "backendId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "frontendId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "matchHostHeader": {
                        "type": "string"
                    },
                    "matchSni": {
                        "type": "string"
                    },
                    "routeId": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "backendId",
                    "createdAt",
                    "frontendId",
                    "matchHostHeader",
                    "matchSni",
                    "routeId",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getLbRoutes:getLbRoutes": {
            "description": "Gets information about multiple Load Balancer Routes.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byFrontendID = scaleway.getLbRoutes({\n    frontendId: scaleway_lb_frontend.frt01.id,\n});\nconst myKey = scaleway.getLbRoutes({\n    frontendId: \"11111111-1111-1111-1111-111111111111\",\n    zone: \"fr-par-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_frontend_id = scaleway.get_lb_routes(frontend_id=scaleway_lb_frontend[\"frt01\"][\"id\"])\nmy_key = scaleway.get_lb_routes(frontend_id=\"11111111-1111-1111-1111-111111111111\",\n    zone=\"fr-par-2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byFrontendID = Scaleway.GetLbRoutes.Invoke(new()\n    {\n        FrontendId = scaleway_lb_frontend.Frt01.Id,\n    });\n\n    var myKey = Scaleway.GetLbRoutes.Invoke(new()\n    {\n        FrontendId = \"11111111-1111-1111-1111-111111111111\",\n        Zone = \"fr-par-2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetLbRoutes(ctx, \u0026scaleway.GetLbRoutesArgs{\n\t\t\tFrontendId: pulumi.StringRef(scaleway_lb_frontend.Frt01.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.GetLbRoutes(ctx, \u0026scaleway.GetLbRoutesArgs{\n\t\t\tFrontendId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t\tZone:       pulumi.StringRef(\"fr-par-2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLbRoutesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byFrontendID = ScalewayFunctions.getLbRoutes(GetLbRoutesArgs.builder()\n            .frontendId(scaleway_lb_frontend.frt01().id())\n            .build());\n\n        final var myKey = ScalewayFunctions.getLbRoutes(GetLbRoutesArgs.builder()\n            .frontendId(\"11111111-1111-1111-1111-111111111111\")\n            .zone(\"fr-par-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byFrontendID:\n    fn::invoke:\n      Function: scaleway:getLbRoutes\n      Arguments:\n        frontendId: ${scaleway_lb_frontend.frt01.id}\n  myKey:\n    fn::invoke:\n      Function: scaleway:getLbRoutes\n      Arguments:\n        frontendId: 11111111-1111-1111-1111-111111111111\n        zone: fr-par-2\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLbRoutes.\n",
                "properties": {
                    "frontendId": {
                        "type": "string",
                        "description": "The frontend ID origin of redirection used as a filter. routes with a frontend ID like it are listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which routes exist.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLbRoutes.\n",
                "properties": {
                    "frontendId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "routes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbRoutesRoute:getLbRoutesRoute"
                        },
                        "description": "List of found routes\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "organizationId",
                    "projectId",
                    "routes",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getLbs:getLbs": {
            "description": "Gets information about multiple Load Balancers.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myKey = scaleway.getLbs({\n    name: \"foobar\",\n    zone: \"fr-par-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_lbs(name=\"foobar\",\n    zone=\"fr-par-2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myKey = Scaleway.GetLbs.Invoke(new()\n    {\n        Name = \"foobar\",\n        Zone = \"fr-par-2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetLbs(ctx, \u0026scaleway.GetLbsArgs{\n\t\t\tName: pulumi.StringRef(\"foobar\"),\n\t\t\tZone: pulumi.StringRef(\"fr-par-2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLbsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = ScalewayFunctions.getLbs(GetLbsArgs.builder()\n            .name(\"foobar\")\n            .zone(\"fr-par-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    fn::invoke:\n      Function: scaleway:getLbs\n      Arguments:\n        name: foobar\n        zone: fr-par-2\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLbs.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The load balancer name used as a filter. LBs with a name like it are listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the load-balancer is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which LBs exist.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLbs.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lbs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbsLb:getLbsLb"
                        },
                        "description": "List of found LBs\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the load-balancer.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the load-balancer is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the load-balancer is associated with.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone in which the load-balancer is.\n"
                    }
                },
                "type": "object",
                "required": [
                    "lbs",
                    "organizationId",
                    "projectId",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getMarketplaceImage:getMarketplaceImage": {
            "description": "Gets local image ID of an image from its label name.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myImage = scaleway.getMarketplaceImage({\n    label: \"ubuntu_jammy\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_image = scaleway.get_marketplace_image(label=\"ubuntu_jammy\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myImage = Scaleway.GetMarketplaceImage.Invoke(new()\n    {\n        Label = \"ubuntu_jammy\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetMarketplaceImage(ctx, \u0026scaleway.GetMarketplaceImageArgs{\n\t\t\tLabel: \"ubuntu_jammy\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetMarketplaceImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myImage = ScalewayFunctions.getMarketplaceImage(GetMarketplaceImageArgs.builder()\n            .label(\"ubuntu_jammy\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myImage:\n    fn::invoke:\n      Function: scaleway:getMarketplaceImage\n      Arguments:\n        label: ubuntu_jammy\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMarketplaceImage.\n",
                "properties": {
                    "instanceType": {
                        "type": "string",
                        "description": "The instance type the image is compatible with.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Exact label of the desired image. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1\u0026per_page=100)\nto find the right `label`.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the image exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "label"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMarketplaceImage.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceType": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "label",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getMnqSqs:getMnqSqs": {
            "description": "Gets information about SQS for a project\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = scaleway.getMnqSqs({});\nconst forProject = scaleway.getMnqSqs({\n    projectId: scaleway_account_project.main.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.get_mnq_sqs()\nfor_project = scaleway.get_mnq_sqs(project_id=scaleway_account_project[\"main\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Scaleway.GetMnqSqs.Invoke();\n\n    var forProject = Scaleway.GetMnqSqs.Invoke(new()\n    {\n        ProjectId = scaleway_account_project.Main.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupMnqSqs(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupMnqSqs(ctx, \u0026scaleway.LookupMnqSqsArgs{\n\t\t\tProjectId: pulumi.StringRef(scaleway_account_project.Main.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetMnqSqsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = ScalewayFunctions.getMnqSqs();\n\n        final var forProject = ScalewayFunctions.getMnqSqs(GetMnqSqsArgs.builder()\n            .projectId(scaleway_account_project.main().id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  main:\n    fn::invoke:\n      Function: scaleway:getMnqSqs\n      Arguments: {}\n  forProject:\n    fn::invoke:\n      Function: scaleway:getMnqSqs\n      Arguments:\n        projectId: ${scaleway_account_project.main.id}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMnqSqs.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project for which sqs is enabled.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which sqs is enabled.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMnqSqs.\n",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the SQS service for this project.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "endpoint",
                    "id"
                ]
            }
        },
        "scaleway:index/getObjectBucket:getObjectBucket": {
            "description": "Gets information about the Bucket.\nFor more information, see [the documentation](https://www.scaleway.com/en/docs/object-storage-feature/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.ObjectBucket(\"main\", {tags: {\n    foo: \"bar\",\n}});\nconst selected = scaleway.getObjectBucket({\n    name: \"bucket.test.com\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.ObjectBucket(\"main\", tags={\n    \"foo\": \"bar\",\n})\nselected = scaleway.get_object_bucket(name=\"bucket.test.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ObjectBucket(\"main\", new()\n    {\n        Tags = \n        {\n            { \"foo\", \"bar\" },\n        },\n    });\n\n    var selected = Scaleway.GetObjectBucket.Invoke(new()\n    {\n        Name = \"bucket.test.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewObjectBucket(ctx, \"main\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupObjectBucket(ctx, \u0026scaleway.LookupObjectBucketArgs{\n\t\t\tName: pulumi.StringRef(\"bucket.test.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetObjectBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ObjectBucket(\"main\", ObjectBucketArgs.builder()        \n            .tags(Map.of(\"foo\", \"bar\"))\n            .build());\n\n        final var selected = ScalewayFunctions.getObjectBucket(GetObjectBucketArgs.builder()\n            .name(\"bucket.test.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ObjectBucket\n    properties:\n      tags:\n        foo: bar\nvariables:\n  selected:\n    fn::invoke:\n      Function: scaleway:getObjectBucket\n      Arguments:\n        name: bucket.test.com\n```\n\n{{% /example %}}\n{{% example %}}\n### Fetching the bucket from a specific project\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst selected = scaleway.getObjectBucket({\n    name: \"bucket.test.com\",\n    projectId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nselected = scaleway.get_object_bucket(name=\"bucket.test.com\",\n    project_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var selected = Scaleway.GetObjectBucket.Invoke(new()\n    {\n        Name = \"bucket.test.com\",\n        ProjectId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupObjectBucket(ctx, \u0026scaleway.LookupObjectBucketArgs{\n\t\t\tName:      pulumi.StringRef(\"bucket.test.com\"),\n\t\t\tProjectId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetObjectBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var selected = ScalewayFunctions.getObjectBucket(GetObjectBucketArgs.builder()\n            .name(\"bucket.test.com\")\n            .projectId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  selected:\n    fn::invoke:\n      Function: scaleway:getObjectBucket\n      Arguments:\n        name: bucket.test.com\n        projectId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getObjectBucket.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The bucket name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the bucket is associated with.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the Object Storage exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getObjectBucket.\n",
                "properties": {
                    "acl": {
                        "type": "string"
                    },
                    "apiEndpoint": {
                        "type": "string"
                    },
                    "corsRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getObjectBucketCorsRule:getObjectBucketCorsRule"
                        }
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint URL of the bucket\n"
                    },
                    "forceDestroy": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lifecycleRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getObjectBucketLifecycleRule:getObjectBucketLifecycleRule"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "objectLockEnabled": {
                        "type": "boolean"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "versionings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getObjectBucketVersioning:getObjectBucketVersioning"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "acl",
                    "apiEndpoint",
                    "corsRules",
                    "endpoint",
                    "forceDestroy",
                    "lifecycleRules",
                    "objectLockEnabled",
                    "tags",
                    "versionings",
                    "id"
                ]
            }
        },
        "scaleway:index/getObjectBucketPolicy:getObjectBucketPolicy": {
            "description": "Gets information about the Bucket's policy.\nFor more information, see [the documentation](https://www.scaleway.com/en/docs/object-storage-feature/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = scaleway.getObjectBucketPolicy({\n    bucket: \"bucket.test.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.get_object_bucket_policy(bucket=\"bucket.test.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Scaleway.GetObjectBucketPolicy.Invoke(new()\n    {\n        Bucket = \"bucket.test.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupObjectBucketPolicy(ctx, \u0026scaleway.LookupObjectBucketPolicyArgs{\n\t\t\tBucket: \"bucket.test.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetObjectBucketPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = ScalewayFunctions.getObjectBucketPolicy(GetObjectBucketPolicyArgs.builder()\n            .bucket(\"bucket.test.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  main:\n    fn::invoke:\n      Function: scaleway:getObjectBucketPolicy\n      Arguments:\n        bucket: bucket.test.com\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getObjectBucketPolicy.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "description": "The bucket name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the bucket is associated with.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the Object Storage exists.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bucket"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getObjectBucketPolicy.\n",
                "properties": {
                    "bucket": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "policy": {
                        "type": "string",
                        "description": "The bucket's policy in JSON format.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "bucket",
                    "policy",
                    "id"
                ]
            }
        },
        "scaleway:index/getRdbAcl:getRdbAcl": {
            "description": "Gets information about the RDB instance network Access Control List.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myAcl = scaleway.getRdbAcl({\n    instanceId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_acl = scaleway.get_rdb_acl(instance_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myAcl = Scaleway.GetRdbAcl.Invoke(new()\n    {\n        InstanceId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupRdbAcl(ctx, \u0026scaleway.LookupRdbAclArgs{\n\t\t\tInstanceId: \"11111111-1111-1111-1111-111111111111\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetRdbAclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myAcl = ScalewayFunctions.getRdbAcl(GetRdbAclArgs.builder()\n            .instanceId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myAcl:\n    fn::invoke:\n      Function: scaleway:getRdbAcl\n      Arguments:\n        instanceId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRdbAcl.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The RDB instance ID.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the Database Instance should be created.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRdbAcl.\n",
                "properties": {
                    "aclRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getRdbAclAclRule:getRdbAclAclRule"
                        },
                        "description": "A list of ACLs rules (structure is described below)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "aclRules",
                    "instanceId",
                    "id"
                ]
            }
        },
        "scaleway:index/getRdbDatabase:getRdbDatabase": {
            "description": "Gets information about a RDB database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myDb = scaleway.getRdbDatabase({\n    instanceId: \"11111111-1111-1111-1111-111111111111\",\n    name: \"foobar\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_db = scaleway.get_rdb_database(instance_id=\"11111111-1111-1111-1111-111111111111\",\n    name=\"foobar\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDb = Scaleway.GetRdbDatabase.Invoke(new()\n    {\n        InstanceId = \"11111111-1111-1111-1111-111111111111\",\n        Name = \"foobar\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupRdbDatabase(ctx, \u0026scaleway.LookupRdbDatabaseArgs{\n\t\t\tInstanceId: \"11111111-1111-1111-1111-111111111111\",\n\t\t\tName:       \"foobar\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetRdbDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDb = ScalewayFunctions.getRdbDatabase(GetRdbDatabaseArgs.builder()\n            .instanceId(\"11111111-1111-1111-1111-111111111111\")\n            .name(\"foobar\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDb:\n    fn::invoke:\n      Function: scaleway:getRdbDatabase\n      Arguments:\n        instanceId: 11111111-1111-1111-1111-111111111111\n        name: foobar\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRdbDatabase.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The RDB instance ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the RDB instance.\n"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRdbDatabase.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Whether the database is managed or not.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The name of the owner of the database.\n"
                    },
                    "region": {
                        "type": "string"
                    },
                    "size": {
                        "type": "string",
                        "description": "Size of the database (in bytes).\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "managed",
                    "name",
                    "owner",
                    "size",
                    "id"
                ]
            }
        },
        "scaleway:index/getRdbDatabaseBackup:getRdbDatabaseBackup": {
            "description": "Gets information about an RDB backup.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst findByName = scaleway.getRdbDatabaseBackup({\n    name: \"mybackup\",\n});\nconst findByNameAndInstance = scaleway.getRdbDatabaseBackup({\n    instanceId: \"11111111-1111-1111-1111-111111111111\",\n    name: \"mybackup\",\n});\nconst findById = scaleway.getRdbDatabaseBackup({\n    backupId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nfind_by_name = scaleway.get_rdb_database_backup(name=\"mybackup\")\nfind_by_name_and_instance = scaleway.get_rdb_database_backup(instance_id=\"11111111-1111-1111-1111-111111111111\",\n    name=\"mybackup\")\nfind_by_id = scaleway.get_rdb_database_backup(backup_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var findByName = Scaleway.GetRdbDatabaseBackup.Invoke(new()\n    {\n        Name = \"mybackup\",\n    });\n\n    var findByNameAndInstance = Scaleway.GetRdbDatabaseBackup.Invoke(new()\n    {\n        InstanceId = \"11111111-1111-1111-1111-111111111111\",\n        Name = \"mybackup\",\n    });\n\n    var findById = Scaleway.GetRdbDatabaseBackup.Invoke(new()\n    {\n        BackupId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupRdbDatabaseBackup(ctx, \u0026scaleway.LookupRdbDatabaseBackupArgs{\n\t\t\tName: pulumi.StringRef(\"mybackup\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupRdbDatabaseBackup(ctx, \u0026scaleway.LookupRdbDatabaseBackupArgs{\n\t\t\tInstanceId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t\tName:       pulumi.StringRef(\"mybackup\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupRdbDatabaseBackup(ctx, \u0026scaleway.LookupRdbDatabaseBackupArgs{\n\t\t\tBackupId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetRdbDatabaseBackupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var findByName = ScalewayFunctions.getRdbDatabaseBackup(GetRdbDatabaseBackupArgs.builder()\n            .name(\"mybackup\")\n            .build());\n\n        final var findByNameAndInstance = ScalewayFunctions.getRdbDatabaseBackup(GetRdbDatabaseBackupArgs.builder()\n            .instanceId(\"11111111-1111-1111-1111-111111111111\")\n            .name(\"mybackup\")\n            .build());\n\n        final var findById = ScalewayFunctions.getRdbDatabaseBackup(GetRdbDatabaseBackupArgs.builder()\n            .backupId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  findByName:\n    fn::invoke:\n      Function: scaleway:getRdbDatabaseBackup\n      Arguments:\n        name: mybackup\n  findByNameAndInstance:\n    fn::invoke:\n      Function: scaleway:getRdbDatabaseBackup\n      Arguments:\n        instanceId: 11111111-1111-1111-1111-111111111111\n        name: mybackup\n  findById:\n    fn::invoke:\n      Function: scaleway:getRdbDatabaseBackup\n      Arguments:\n        backupId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRdbDatabaseBackup.\n",
                "properties": {
                    "backupId": {
                        "type": "string",
                        "description": "The RDB backup ID.\nOnly one of the `name` and `backup_id` should be specified.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The RDB instance ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the RDB instance.\nOnly one of the `name` and `backup_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the Database Instance should be created.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRdbDatabaseBackup.\n",
                "properties": {
                    "backupId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "databaseName": {
                        "type": "string"
                    },
                    "expiresAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "databaseName",
                    "expiresAt",
                    "instanceName",
                    "size",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getRdbInstance:getRdbInstance": {
            "description": "Gets information about an RDB instance. For further information see our [developers website](https://developers.scaleway.com/en/products/rdb/api/#database-instance)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRdbInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The RDB instance ID.\nOnly one of `name` and `instance_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the RDB instance.\nOnly one of `name` and `instance_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the RDB instance exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRdbInstance.\n",
                "properties": {
                    "backupSameRegion": {
                        "type": "boolean"
                    },
                    "backupScheduleFrequency": {
                        "type": "integer"
                    },
                    "backupScheduleRetention": {
                        "type": "integer"
                    },
                    "certificate": {
                        "type": "string"
                    },
                    "disableBackup": {
                        "type": "boolean"
                    },
                    "endpointIp": {
                        "type": "string"
                    },
                    "endpointPort": {
                        "type": "integer"
                    },
                    "engine": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "initSettings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "isHaCluster": {
                        "type": "boolean"
                    },
                    "loadBalancers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getRdbInstanceLoadBalancer:getRdbInstanceLoadBalancer"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "nodeType": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getRdbInstancePrivateNetwork:getRdbInstancePrivateNetwork"
                        }
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "readReplicas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getRdbInstanceReadReplica:getRdbInstanceReadReplica"
                        }
                    },
                    "region": {
                        "type": "string"
                    },
                    "settings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "userName": {
                        "type": "string"
                    },
                    "volumeSizeInGb": {
                        "type": "integer"
                    },
                    "volumeType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "backupSameRegion",
                    "backupScheduleFrequency",
                    "backupScheduleRetention",
                    "certificate",
                    "disableBackup",
                    "endpointIp",
                    "endpointPort",
                    "engine",
                    "initSettings",
                    "isHaCluster",
                    "loadBalancers",
                    "nodeType",
                    "organizationId",
                    "password",
                    "privateNetworks",
                    "projectId",
                    "readReplicas",
                    "settings",
                    "tags",
                    "userName",
                    "volumeSizeInGb",
                    "volumeType",
                    "id"
                ]
            }
        },
        "scaleway:index/getRdbPrivilege:getRdbPrivilege": {
            "description": "Gets information about the privilege on RDB database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = scaleway.getRdbPrivilege({\n    databaseName: \"my-database\",\n    instanceId: \"11111111-1111-111111111111\",\n    userName: \"my-user\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.get_rdb_privilege(database_name=\"my-database\",\n    instance_id=\"11111111-1111-111111111111\",\n    user_name=\"my-user\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Scaleway.GetRdbPrivilege.Invoke(new()\n    {\n        DatabaseName = \"my-database\",\n        InstanceId = \"11111111-1111-111111111111\",\n        UserName = \"my-user\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupRdbPrivilege(ctx, \u0026scaleway.LookupRdbPrivilegeArgs{\n\t\t\tDatabaseName: \"my-database\",\n\t\t\tInstanceId:   \"11111111-1111-111111111111\",\n\t\t\tUserName:     \"my-user\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetRdbPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = ScalewayFunctions.getRdbPrivilege(GetRdbPrivilegeArgs.builder()\n            .databaseName(\"my-database\")\n            .instanceId(\"11111111-1111-111111111111\")\n            .userName(\"my-user\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  main:\n    fn::invoke:\n      Function: scaleway:getRdbPrivilege\n      Arguments:\n        databaseName: my-database\n        instanceId: 11111111-1111-111111111111\n        userName: my-user\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRdbPrivilege.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database name.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The RDB instance ID.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the resource exists.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "The user name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "databaseName",
                    "instanceId",
                    "userName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRdbPrivilege.\n",
                "properties": {
                    "databaseName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission for this user on the database. Possible values are `readonly`, `readwrite`, `all`\n, `custom` and `none`.\n"
                    },
                    "region": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "databaseName",
                    "instanceId",
                    "permission",
                    "userName",
                    "id"
                ]
            }
        },
        "scaleway:index/getRedisCluster:getRedisCluster": {
            "description": "Gets information about a Redis cluster. For further information check our [api documentation](https://developers.scaleway.com/en/products/redis/api/v1alpha1/#clusters-a85816)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myCluster = scaleway.getRedisCluster({\n    clusterId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_cluster = scaleway.get_redis_cluster(cluster_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myCluster = Scaleway.GetRedisCluster.Invoke(new()\n    {\n        ClusterId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupRedisCluster(ctx, \u0026scaleway.LookupRedisClusterArgs{\n\t\t\tClusterId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetRedisClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myCluster = ScalewayFunctions.getRedisCluster(GetRedisClusterArgs.builder()\n            .clusterId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myCluster:\n    fn::invoke:\n      Function: scaleway:getRedisCluster\n      Arguments:\n        clusterId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRedisCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The Redis cluster ID.\nOnly one of the `name` and `cluster_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Redis cluster.\nOnly one of the `name` and `cluster_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`region`) The zone in which the server exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRedisCluster.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getRedisClusterAcl:getRedisClusterAcl"
                        }
                    },
                    "certificate": {
                        "type": "string"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "clusterSize": {
                        "type": "integer"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nodeType": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getRedisClusterPrivateNetwork:getRedisClusterPrivateNetwork"
                        }
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "publicNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getRedisClusterPublicNetwork:getRedisClusterPublicNetwork"
                        }
                    },
                    "settings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tlsEnabled": {
                        "type": "boolean"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "acls",
                    "certificate",
                    "clusterSize",
                    "createdAt",
                    "nodeType",
                    "password",
                    "privateNetworks",
                    "projectId",
                    "publicNetworks",
                    "settings",
                    "tags",
                    "tlsEnabled",
                    "updatedAt",
                    "userName",
                    "version",
                    "id"
                ]
            }
        },
        "scaleway:index/getRegistryImage:getRegistryImage": {
            "description": "Gets information about a registry image.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myImage = scaleway.getRegistryImage({\n    imageId: \"11111111-1111-1111-1111-111111111111\",\n    namespaceId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_image = scaleway.get_registry_image(image_id=\"11111111-1111-1111-1111-111111111111\",\n    namespace_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myImage = Scaleway.GetRegistryImage.Invoke(new()\n    {\n        ImageId = \"11111111-1111-1111-1111-111111111111\",\n        NamespaceId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetRegistryImage(ctx, \u0026scaleway.GetRegistryImageArgs{\n\t\t\tImageId:     pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t\tNamespaceId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetRegistryImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myImage = ScalewayFunctions.getRegistryImage(GetRegistryImageArgs.builder()\n            .imageId(\"11111111-1111-1111-1111-111111111111\")\n            .namespaceId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myImage:\n    fn::invoke:\n      Function: scaleway:getRegistryImage\n      Arguments:\n        imageId: 11111111-1111-1111-1111-111111111111\n        namespaceId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRegistryImage.\n",
                "properties": {
                    "imageId": {
                        "type": "string",
                        "description": "The image ID.\nOnly one of `name` and `image_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The image name.\nOnly one of `name` and `image_id` should be specified.\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace ID in which the image is.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the image is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the image exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the registry image\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegistryImage.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the image is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the registry image.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the registry image\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "The privacy policy of the registry image.\n"
                    }
                },
                "type": "object",
                "required": [
                    "namespaceId",
                    "organizationId",
                    "projectId",
                    "region",
                    "size",
                    "tags",
                    "visibility",
                    "id"
                ]
            }
        },
        "scaleway:index/getRegistryNamespace:getRegistryNamespace": {
            "description": "Gets information about a registry namespace.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myNamespace = scaleway.getRegistryNamespace({\n    namespaceId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_namespace = scaleway.get_registry_namespace(namespace_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myNamespace = Scaleway.GetRegistryNamespace.Invoke(new()\n    {\n        NamespaceId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupRegistryNamespace(ctx, \u0026scaleway.LookupRegistryNamespaceArgs{\n\t\t\tNamespaceId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetRegistryNamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myNamespace = ScalewayFunctions.getRegistryNamespace(GetRegistryNamespaceArgs.builder()\n            .namespaceId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myNamespace:\n    fn::invoke:\n      Function: scaleway:getRegistryNamespace\n      Arguments:\n        namespaceId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRegistryNamespace.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The namespace name.\nOnly one of `name` and `namespace_id` should be specified.\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id.\nOnly one of `name` and `namespace_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the namespace exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegistryNamespace.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the Registry Namespace.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "The Namespace Privacy Policy: whether or not the images are public.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the namespace is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "endpoint",
                    "isPublic",
                    "organizationId",
                    "projectId",
                    "id"
                ]
            }
        },
        "scaleway:index/getSecret:getSecret": {
            "description": "Gets information about Scaleway Secrets.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/secret_manager/api/v1alpha1/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.Secret(\"main\", {description: \"barr\"});\nconst mySecret = scaleway.getSecret({\n    secretId: \"11111111-1111-1111-1111-111111111111\",\n});\nconst byName = scaleway.getSecret({\n    name: \"your_secret_name\",\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.Secret(\"main\", description=\"barr\")\nmy_secret = scaleway.get_secret(secret_id=\"11111111-1111-1111-1111-111111111111\")\nby_name = scaleway.get_secret(name=\"your_secret_name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.Secret(\"main\", new()\n    {\n        Description = \"barr\",\n    });\n\n    var mySecret = Scaleway.GetSecret.Invoke(new()\n    {\n        SecretId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n    var byName = Scaleway.GetSecret.Invoke(new()\n    {\n        Name = \"your_secret_name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewSecret(ctx, \"main\", \u0026scaleway.SecretArgs{\n\t\t\tDescription: pulumi.String(\"barr\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupSecret(ctx, \u0026scaleway.LookupSecretArgs{\n\t\t\tSecretId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupSecret(ctx, \u0026scaleway.LookupSecretArgs{\n\t\t\tName: pulumi.StringRef(\"your_secret_name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Secret;\nimport com.pulumi.scaleway.SecretArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new Secret(\"main\", SecretArgs.builder()        \n            .description(\"barr\")\n            .build());\n\n        final var mySecret = ScalewayFunctions.getSecret(GetSecretArgs.builder()\n            .secretId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n        final var byName = ScalewayFunctions.getSecret(GetSecretArgs.builder()\n            .name(\"your_secret_name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:Secret\n    properties:\n      description: barr\nvariables:\n  mySecret:\n    fn::invoke:\n      Function: scaleway:getSecret\n      Arguments:\n        secretId: 11111111-1111-1111-1111-111111111111\n  byName:\n    fn::invoke:\n      Function: scaleway:getSecret\n      Arguments:\n        name: your_secret_name\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecret.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The secret name.\nOnly one of `name` and `secret_id` should be specified.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the Project is associated with.\nIf no default organization_id is set, one must be set explicitly in this datasource\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the\nproject the secret is associated with.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the secret exists.\n"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "The secret id.\nOnly one of `name` and `secret_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecret.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "versionCount": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "organizationId",
                    "status",
                    "tags",
                    "updatedAt",
                    "versionCount",
                    "id"
                ]
            }
        },
        "scaleway:index/getSecretVersion:getSecretVersion": {
            "inputs": {
                "description": "A collection of arguments for invoking getSecretVersion.\n",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "`region`) The region\nin which the resource exists.\n"
                    },
                    "revision": {
                        "type": "string",
                        "description": "The revision for this Secret Version.\n"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "The Secret ID associated wit the secret version.\nOnly one of `secret_id` and `secret_name` should be specified.\n"
                    },
                    "secretName": {
                        "type": "string",
                        "description": "The Name of Secret associated wit the secret version.\nOnly one of `secret_id` and `secret_name` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecretVersion.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date and time of secret version's creation (RFC 3339 format).\n"
                    },
                    "data": {
                        "type": "string",
                        "description": "The data payload of the secret version. more on the data section\n",
                        "secret": true
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) Description of the secret version (e.g. `my-new-description`).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string"
                    },
                    "secretName": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Secret Version.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date and time of secret version's last update (RFC 3339 format).\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "data",
                    "description",
                    "status",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getTemDomain:getTemDomain": {
            "description": "Gets information about a transactional email domain.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myDomain = scaleway.getTemDomain({\n    domainId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_domain = scaleway.get_tem_domain(domain_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDomain = Scaleway.GetTemDomain.Invoke(new()\n    {\n        DomainId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupTemDomain(ctx, \u0026scaleway.LookupTemDomainArgs{\n\t\t\tDomainId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetTemDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDomain = ScalewayFunctions.getTemDomain(GetTemDomainArgs.builder()\n            .domainId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDomain:\n    fn::invoke:\n      Function: scaleway:getTemDomain\n      Arguments:\n        domainId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTemDomain.\n",
                "properties": {
                    "domainId": {
                        "type": "string",
                        "description": "The domain id.\nOnly one of `name` and `domain_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The domain name.\nOnly one of `name` and `domain_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the domain exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTemDomain.\n",
                "properties": {
                    "acceptTos": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "dkimConfig": {
                        "type": "string"
                    },
                    "domainId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lastError": {
                        "type": "string"
                    },
                    "lastValidAt": {
                        "type": "string"
                    },
                    "mxBlackhole": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nextCheckAt": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "reputations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getTemDomainReputation:getTemDomainReputation"
                        }
                    },
                    "revokedAt": {
                        "type": "string"
                    },
                    "smtpHost": {
                        "type": "string"
                    },
                    "smtpPort": {
                        "type": "integer"
                    },
                    "smtpPortAlternative": {
                        "type": "integer"
                    },
                    "smtpPortUnsecure": {
                        "type": "integer"
                    },
                    "smtpsPort": {
                        "type": "integer"
                    },
                    "smtpsPortAlternative": {
                        "type": "integer"
                    },
                    "spfConfig": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "acceptTos",
                    "createdAt",
                    "dkimConfig",
                    "lastError",
                    "lastValidAt",
                    "mxBlackhole",
                    "nextCheckAt",
                    "projectId",
                    "reputations",
                    "revokedAt",
                    "smtpHost",
                    "smtpPort",
                    "smtpPortAlternative",
                    "smtpPortUnsecure",
                    "smtpsPort",
                    "smtpsPortAlternative",
                    "spfConfig",
                    "status",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpc:getVpc": {
            "description": "Gets information about a Scaleway Virtual Private Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byName = scaleway.getVpc({\n    name: \"foobar\",\n});\nconst byId = scaleway.getVpc({\n    vpcId: \"11111111-1111-1111-1111-111111111111\",\n});\nconst default = scaleway.getVpc({\n    isDefault: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_vpc(name=\"foobar\")\nby_id = scaleway.get_vpc(vpc_id=\"11111111-1111-1111-1111-111111111111\")\ndefault = scaleway.get_vpc(is_default=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetVpc.Invoke(new()\n    {\n        Name = \"foobar\",\n    });\n\n    var byId = Scaleway.GetVpc.Invoke(new()\n    {\n        VpcId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n    var @default = Scaleway.GetVpc.Invoke(new()\n    {\n        IsDefault = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupVpc(ctx, \u0026scaleway.LookupVpcArgs{\n\t\t\tName: pulumi.StringRef(\"foobar\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupVpc(ctx, \u0026scaleway.LookupVpcArgs{\n\t\t\tVpcId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupVpc(ctx, \u0026scaleway.LookupVpcArgs{\n\t\t\tIsDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getVpc(GetVpcArgs.builder()\n            .name(\"foobar\")\n            .build());\n\n        final var byId = ScalewayFunctions.getVpc(GetVpcArgs.builder()\n            .vpcId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n        final var default = ScalewayFunctions.getVpc(GetVpcArgs.builder()\n            .isDefault(true)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getVpc\n      Arguments:\n        name: foobar\n  byId:\n    fn::invoke:\n      Function: scaleway:getVpc\n      Arguments:\n        vpcId: 11111111-1111-1111-1111-111111111111\n  default:\n    fn::invoke:\n      Function: scaleway:getVpc\n      Arguments:\n        isDefault: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVpc.\n",
                "properties": {
                    "isDefault": {
                        "type": "boolean",
                        "description": "To get default VPC's information.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the VPC. One of `name` and `vpc_id` should be specified.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the VPC is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the VPC is associated with.\n"
                    },
                    "region": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "ID of the VPC. One of `name` and `vpc_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpc.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "organizationId",
                    "tags",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpcGatewayNetwork:getVpcGatewayNetwork": {
            "description": "Gets information about a gateway network.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.VpcGatewayNetwork(\"main\", {\n    gatewayId: scaleway_vpc_public_gateway.pg01.id,\n    privateNetworkId: scaleway_vpc_private_network.pn01.id,\n    dhcpId: scaleway_vpc_public_gateway_dhcp.dhcp01.id,\n    cleanupDhcp: true,\n    enableMasquerade: true,\n});\nconst byId = scaleway.getVpcGatewayNetworkOutput({\n    gatewayNetworkId: main.id,\n});\nconst byGatewayAndPn = scaleway.getVpcGatewayNetwork({\n    gatewayId: scaleway_vpc_public_gateway.pg01.id,\n    privateNetworkId: scaleway_vpc_private_network.pn01.id,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.VpcGatewayNetwork(\"main\",\n    gateway_id=scaleway_vpc_public_gateway[\"pg01\"][\"id\"],\n    private_network_id=scaleway_vpc_private_network[\"pn01\"][\"id\"],\n    dhcp_id=scaleway_vpc_public_gateway_dhcp[\"dhcp01\"][\"id\"],\n    cleanup_dhcp=True,\n    enable_masquerade=True)\nby_id = scaleway.get_vpc_gateway_network_output(gateway_network_id=main.id)\nby_gateway_and_pn = scaleway.get_vpc_gateway_network(gateway_id=scaleway_vpc_public_gateway[\"pg01\"][\"id\"],\n    private_network_id=scaleway_vpc_private_network[\"pn01\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcGatewayNetwork(\"main\", new()\n    {\n        GatewayId = scaleway_vpc_public_gateway.Pg01.Id,\n        PrivateNetworkId = scaleway_vpc_private_network.Pn01.Id,\n        DhcpId = scaleway_vpc_public_gateway_dhcp.Dhcp01.Id,\n        CleanupDhcp = true,\n        EnableMasquerade = true,\n    });\n\n    var byId = Scaleway.GetVpcGatewayNetwork.Invoke(new()\n    {\n        GatewayNetworkId = main.Id,\n    });\n\n    var byGatewayAndPn = Scaleway.GetVpcGatewayNetwork.Invoke(new()\n    {\n        GatewayId = scaleway_vpc_public_gateway.Pg01.Id,\n        PrivateNetworkId = scaleway_vpc_private_network.Pn01.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcGatewayNetwork(ctx, \"main\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pulumi.Any(scaleway_vpc_public_gateway.Pg01.Id),\n\t\t\tPrivateNetworkId: pulumi.Any(scaleway_vpc_private_network.Pn01.Id),\n\t\t\tDhcpId:           pulumi.Any(scaleway_vpc_public_gateway_dhcp.Dhcp01.Id),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupVpcGatewayNetworkOutput(ctx, scaleway.GetVpcGatewayNetworkOutputArgs{\n\t\t\tGatewayNetworkId: main.ID(),\n\t\t}, nil)\n\t\t_, err = scaleway.LookupVpcGatewayNetwork(ctx, \u0026scaleway.LookupVpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pulumi.StringRef(scaleway_vpc_public_gateway.Pg01.Id),\n\t\t\tPrivateNetworkId: pulumi.StringRef(scaleway_vpc_private_network.Pn01.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcGatewayNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcGatewayNetwork(\"main\", VpcGatewayNetworkArgs.builder()        \n            .gatewayId(scaleway_vpc_public_gateway.pg01().id())\n            .privateNetworkId(scaleway_vpc_private_network.pn01().id())\n            .dhcpId(scaleway_vpc_public_gateway_dhcp.dhcp01().id())\n            .cleanupDhcp(true)\n            .enableMasquerade(true)\n            .build());\n\n        final var byId = ScalewayFunctions.getVpcGatewayNetwork(GetVpcGatewayNetworkArgs.builder()\n            .gatewayNetworkId(main.id())\n            .build());\n\n        final var byGatewayAndPn = ScalewayFunctions.getVpcGatewayNetwork(GetVpcGatewayNetworkArgs.builder()\n            .gatewayId(scaleway_vpc_public_gateway.pg01().id())\n            .privateNetworkId(scaleway_vpc_private_network.pn01().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${scaleway_vpc_public_gateway.pg01.id}\n      privateNetworkId: ${scaleway_vpc_private_network.pn01.id}\n      dhcpId: ${scaleway_vpc_public_gateway_dhcp.dhcp01.id}\n      cleanupDhcp: true\n      enableMasquerade: true\nvariables:\n  byId:\n    fn::invoke:\n      Function: scaleway:getVpcGatewayNetwork\n      Arguments:\n        gatewayNetworkId: ${main.id}\n  byGatewayAndPn:\n    fn::invoke:\n      Function: scaleway:getVpcGatewayNetwork\n      Arguments:\n        gatewayId: ${scaleway_vpc_public_gateway.pg01.id}\n        privateNetworkId: ${scaleway_vpc_private_network.pn01.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcGatewayNetwork.\n",
                "properties": {
                    "dhcpId": {
                        "type": "string",
                        "description": "ID of the public gateway DHCP config\n"
                    },
                    "enableMasquerade": {
                        "type": "boolean",
                        "description": "If masquerade is enabled on requested network\n"
                    },
                    "gatewayId": {
                        "type": "string",
                        "description": "ID of the public gateway the gateway network is linked to\n"
                    },
                    "gatewayNetworkId": {
                        "type": "string",
                        "description": "ID of the gateway network.\n\n\u003e Only one of `gateway_network_id` or filters should be specified. You can use all the filters you want.\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "ID of the private network the gateway network is linked to\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcGatewayNetwork.\n",
                "properties": {
                    "cleanupDhcp": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "dhcpId": {
                        "type": "string"
                    },
                    "enableDhcp": {
                        "type": "boolean"
                    },
                    "enableMasquerade": {
                        "type": "boolean"
                    },
                    "gatewayId": {
                        "type": "string"
                    },
                    "gatewayNetworkId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipamConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getVpcGatewayNetworkIpamConfig:getVpcGatewayNetworkIpamConfig"
                        }
                    },
                    "macAddress": {
                        "type": "string"
                    },
                    "privateNetworkId": {
                        "type": "string"
                    },
                    "staticAddress": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cleanupDhcp",
                    "createdAt",
                    "enableDhcp",
                    "ipamConfigs",
                    "macAddress",
                    "staticAddress",
                    "status",
                    "updatedAt",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpcPrivateNetwork:getVpcPrivateNetwork": {
            "description": "Gets information about a private network.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myName = scaleway.getVpcPrivateNetwork({\n    name: \"foobar\",\n});\nconst myId = scaleway.getVpcPrivateNetwork({\n    privateNetworkId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_name = scaleway.get_vpc_private_network(name=\"foobar\")\nmy_id = scaleway.get_vpc_private_network(private_network_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myName = Scaleway.GetVpcPrivateNetwork.Invoke(new()\n    {\n        Name = \"foobar\",\n    });\n\n    var myId = Scaleway.GetVpcPrivateNetwork.Invoke(new()\n    {\n        PrivateNetworkId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupVpcPrivateNetwork(ctx, \u0026scaleway.LookupVpcPrivateNetworkArgs{\n\t\t\tName: pulumi.StringRef(\"foobar\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupVpcPrivateNetwork(ctx, \u0026scaleway.LookupVpcPrivateNetworkArgs{\n\t\t\tPrivateNetworkId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myName = ScalewayFunctions.getVpcPrivateNetwork(GetVpcPrivateNetworkArgs.builder()\n            .name(\"foobar\")\n            .build());\n\n        final var myId = ScalewayFunctions.getVpcPrivateNetwork(GetVpcPrivateNetworkArgs.builder()\n            .privateNetworkId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myName:\n    fn::invoke:\n      Function: scaleway:getVpcPrivateNetwork\n      Arguments:\n        name: foobar\n  myId:\n    fn::invoke:\n      Function: scaleway:getVpcPrivateNetwork\n      Arguments:\n        privateNetworkId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPrivateNetwork.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the private network. One of `name` and `private_network_id` should be specified.\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "ID of the private network. One of `name` and `private_network_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPrivateNetwork.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipv4Subnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getVpcPrivateNetworkIpv4Subnet:getVpcPrivateNetworkIpv4Subnet"
                        },
                        "description": "(Optional) The IPv4 subnet associated with the private network.\n"
                    },
                    "ipv6Subnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getVpcPrivateNetworkIpv6Subnet:getVpcPrivateNetworkIpv6Subnet"
                        },
                        "description": "(Optional) The IPv6 subnets associated with the private network.\n"
                    },
                    "isRegional": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "privateNetworkId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "ipv4Subnets",
                    "ipv6Subnets",
                    "isRegional",
                    "organizationId",
                    "projectId",
                    "region",
                    "tags",
                    "updatedAt",
                    "vpcId",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpcPublicGateway:getVpcPublicGateway": {
            "description": "Gets information about a public gateway.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.VpcPublicGateway(\"main\", {\n    type: \"VPC-GW-S\",\n    zone: \"nl-ams-1\",\n});\nconst pgTestByName = scaleway.getVpcPublicGatewayOutput({\n    name: main.name,\n    zone: \"nl-ams-1\",\n});\nconst pgTestById = scaleway.getVpcPublicGatewayOutput({\n    publicGatewayId: main.id,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.VpcPublicGateway(\"main\",\n    type=\"VPC-GW-S\",\n    zone=\"nl-ams-1\")\npg_test_by_name = scaleway.get_vpc_public_gateway_output(name=main.name,\n    zone=\"nl-ams-1\")\npg_test_by_id = scaleway.get_vpc_public_gateway_output(public_gateway_id=main.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGateway(\"main\", new()\n    {\n        Type = \"VPC-GW-S\",\n        Zone = \"nl-ams-1\",\n    });\n\n    var pgTestByName = Scaleway.GetVpcPublicGateway.Invoke(new()\n    {\n        Name = main.Name,\n        Zone = \"nl-ams-1\",\n    });\n\n    var pgTestById = Scaleway.GetVpcPublicGateway.Invoke(new()\n    {\n        PublicGatewayId = main.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPublicGateway(ctx, \"main\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t\tZone: pulumi.String(\"nl-ams-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupVpcPublicGatewayOutput(ctx, scaleway.GetVpcPublicGatewayOutputArgs{\n\t\t\tName: main.Name,\n\t\t\tZone: pulumi.String(\"nl-ams-1\"),\n\t\t}, nil)\n\t\t_ = scaleway.LookupVpcPublicGatewayOutput(ctx, scaleway.GetVpcPublicGatewayOutputArgs{\n\t\t\tPublicGatewayId: main.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcPublicGatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGateway(\"main\", VpcPublicGatewayArgs.builder()        \n            .type(\"VPC-GW-S\")\n            .zone(\"nl-ams-1\")\n            .build());\n\n        final var pgTestByName = ScalewayFunctions.getVpcPublicGateway(GetVpcPublicGatewayArgs.builder()\n            .name(main.name())\n            .zone(\"nl-ams-1\")\n            .build());\n\n        final var pgTestById = ScalewayFunctions.getVpcPublicGateway(GetVpcPublicGatewayArgs.builder()\n            .publicGatewayId(main.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPublicGateway\n    properties:\n      type: VPC-GW-S\n      zone: nl-ams-1\nvariables:\n  pgTestByName:\n    fn::invoke:\n      Function: scaleway:getVpcPublicGateway\n      Arguments:\n        name: ${main.name}\n        zone: nl-ams-1\n  pgTestById:\n    fn::invoke:\n      Function: scaleway:getVpcPublicGateway\n      Arguments:\n        publicGatewayId: ${main.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPublicGateway.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Exact name of the public gateway.\n"
                    },
                    "publicGatewayId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which\nthe public gateway should be created.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPublicGateway.\n",
                "properties": {
                    "bastionEnabled": {
                        "type": "boolean"
                    },
                    "bastionPort": {
                        "type": "integer"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "enableSmtp": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "publicGatewayId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "upstreamDnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "bastionEnabled",
                    "bastionPort",
                    "createdAt",
                    "enableSmtp",
                    "ipId",
                    "organizationId",
                    "projectId",
                    "status",
                    "tags",
                    "type",
                    "updatedAt",
                    "upstreamDnsServers",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpcPublicGatewayDhcp:getVpcPublicGatewayDhcp": {
            "description": "Gets information about a public gateway DHCP.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.VpcPublicGatewayDhcp(\"main\", {subnet: \"192.168.0.0/24\"});\nconst dhcpById = scaleway.getVpcPublicGatewayDhcpOutput({\n    dhcpId: main.id,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.VpcPublicGatewayDhcp(\"main\", subnet=\"192.168.0.0/24\")\ndhcp_by_id = scaleway.get_vpc_public_gateway_dhcp_output(dhcp_id=main.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGatewayDhcp(\"main\", new()\n    {\n        Subnet = \"192.168.0.0/24\",\n    });\n\n    var dhcpById = Scaleway.GetVpcPublicGatewayDhcp.Invoke(new()\n    {\n        DhcpId = main.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"main\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.0.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupVpcPublicGatewayDhcpOutput(ctx, scaleway.GetVpcPublicGatewayDhcpOutputArgs{\n\t\t\tDhcpId: main.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcPublicGatewayDhcpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGatewayDhcp(\"main\", VpcPublicGatewayDhcpArgs.builder()        \n            .subnet(\"192.168.0.0/24\")\n            .build());\n\n        final var dhcpById = ScalewayFunctions.getVpcPublicGatewayDhcp(GetVpcPublicGatewayDhcpArgs.builder()\n            .dhcpId(main.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPublicGatewayDhcp\n    properties:\n      subnet: 192.168.0.0/24\nvariables:\n  dhcpById:\n    fn::invoke:\n      Function: scaleway:getVpcPublicGatewayDhcp\n      Arguments:\n        dhcpId: ${main.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPublicGatewayDhcp.\n",
                "properties": {
                    "dhcpId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "dhcpId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPublicGatewayDhcp.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "dhcpId": {
                        "type": "string"
                    },
                    "dnsLocalName": {
                        "type": "string"
                    },
                    "dnsSearches": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dnsServersOverrides": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "enableDynamic": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "poolHigh": {
                        "type": "string"
                    },
                    "poolLow": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "pushDefaultRoute": {
                        "type": "boolean"
                    },
                    "pushDnsServer": {
                        "type": "boolean"
                    },
                    "rebindTimer": {
                        "type": "integer"
                    },
                    "renewTimer": {
                        "type": "integer"
                    },
                    "subnet": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "validLifetime": {
                        "type": "integer"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "createdAt",
                    "dhcpId",
                    "dnsLocalName",
                    "dnsSearches",
                    "dnsServersOverrides",
                    "enableDynamic",
                    "organizationId",
                    "poolHigh",
                    "poolLow",
                    "projectId",
                    "pushDefaultRoute",
                    "pushDnsServer",
                    "rebindTimer",
                    "renewTimer",
                    "subnet",
                    "updatedAt",
                    "validLifetime",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpcPublicGatewayDhcpReservation:getVpcPublicGatewayDhcpReservation": {
            "description": "Gets information about a dhcp entries. For further information please check the\nAPI [documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#dhcp-entries-e40fb6)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPublicGatewayDhcpReservation.\n",
                "properties": {
                    "gatewayNetworkId": {
                        "type": "string",
                        "description": "The ID of the owning GatewayNetwork\n"
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "The MAC address of the reservation to retrieve\n"
                    },
                    "reservationId": {
                        "type": "string",
                        "description": "The ID of the Reservation to retrieve\n"
                    },
                    "waitForDhcp": {
                        "type": "boolean",
                        "description": "Boolean to wait for mac_address to exist in dhcp\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which\nthe image exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPublicGatewayDhcpReservation.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the public gateway DHCP config.\n"
                    },
                    "gatewayNetworkId": {
                        "type": "string",
                        "description": "The ID of the owning GatewayNetwork.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The Hostname of the client machine.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address to give to the machine (IP address).\n"
                    },
                    "macAddress": {
                        "type": "string"
                    },
                    "reservationId": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "The reservation type, either static (DHCP reservation) or dynamic (DHCP lease). Possible values are reservation and lease.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the public gateway DHCP config.\n"
                    },
                    "waitForDhcp": {
                        "type": "boolean"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "hostname",
                    "ipAddress",
                    "type",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpcPublicGatewayIp:getVpcPublicGatewayIp": {
            "description": "Gets information about a public gateway IP.\n\nFor further information please check the API [documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#get-66f0c0)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@ediri/scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.VpcPublicGatewayIp(\"main\", {});\nconst ipById = scaleway.getVpcPublicGatewayIpOutput({\n    ipId: main.id,\n});\n```\n```python\nimport pulumi\nimport ediri_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.VpcPublicGatewayIp(\"main\")\nip_by_id = scaleway.get_vpc_public_gateway_ip_output(ip_id=main.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = ediri.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGatewayIp(\"main\");\n\n    var ipById = Scaleway.GetVpcPublicGatewayIp.Invoke(new()\n    {\n        IpId = main.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPublicGatewayIp(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupVpcPublicGatewayIpOutput(ctx, scaleway.GetVpcPublicGatewayIpOutputArgs{\n\t\t\tIpId: main.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcPublicGatewayIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGatewayIp(\"main\");\n\n        final var ipById = ScalewayFunctions.getVpcPublicGatewayIp(GetVpcPublicGatewayIpArgs.builder()\n            .ipId(main.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPublicGatewayIp\nvariables:\n  ipById:\n    fn::invoke:\n      Function: scaleway:getVpcPublicGatewayIp\n      Arguments:\n        ipId: ${main.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPublicGatewayIp.\n",
                "properties": {
                    "ipId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPublicGatewayIp.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "reverse": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "createdAt",
                    "organizationId",
                    "projectId",
                    "reverse",
                    "tags",
                    "updatedAt",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpcPublicGatewayPatRule:getVpcPublicGatewayPatRule": {
            "description": "Gets information about a public gateway PAT rule. For further information please check the\nAPI [documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#get-8faeea)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPublicGatewayPatRule.\n",
                "properties": {
                    "patRuleId": {
                        "type": "string",
                        "description": "The ID of the PAT rule to retrieve\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which\nthe image exists.\n"
                    }
                },
                "type": "object",
                "required": [
                    "patRuleId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPublicGatewayPatRule.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "gatewayId": {
                        "type": "string",
                        "description": "The ID of the public gateway.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "patRuleId": {
                        "type": "string"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The Private IP to forward data to (IP address).\n"
                    },
                    "privatePort": {
                        "type": "integer",
                        "description": "The Private port to translate to.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The Protocol the rule should apply to. Possible values are both, tcp and udp.\n"
                    },
                    "publicPort": {
                        "type": "integer",
                        "description": "The Public port to listen on.\n"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "gatewayId",
                    "organizationId",
                    "patRuleId",
                    "privateIp",
                    "privatePort",
                    "protocol",
                    "publicPort",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpcs:getVpcs": {
            "description": "Gets information about multiple Virtual Private Clouds.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myKey = scaleway.getVpcs({\n    name: \"tf-vpc-datasource\",\n    region: \"nl-ams\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_vpcs(name=\"tf-vpc-datasource\",\n    region=\"nl-ams\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myKey = Scaleway.GetVpcs.Invoke(new()\n    {\n        Name = \"tf-vpc-datasource\",\n        Region = \"nl-ams\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetVpcs(ctx, \u0026scaleway.GetVpcsArgs{\n\t\t\tName:   pulumi.StringRef(\"tf-vpc-datasource\"),\n\t\t\tRegion: pulumi.StringRef(\"nl-ams\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = ScalewayFunctions.getVpcs(GetVpcsArgs.builder()\n            .name(\"tf-vpc-datasource\")\n            .region(\"nl-ams\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    fn::invoke:\n      Function: scaleway:getVpcs\n      Arguments:\n        name: tf-vpc-datasource\n        region: nl-ams\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcs.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The VPC name used as filter. VPCs with a name like it are listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the VPC is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which vpcs exist.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tags used as filter. VPCs with these exact tags are listed.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcs.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the VPC is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the VPC is associated with.\n"
                    },
                    "region": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "vpcs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getVpcsVpc:getVpcsVpc"
                        },
                        "description": "List of found vpcs\n"
                    }
                },
                "type": "object",
                "required": [
                    "organizationId",
                    "projectId",
                    "region",
                    "vpcs",
                    "id"
                ]
            }
        },
        "scaleway:index/getWebHostOffer:getWebHostOffer": {
            "description": "Gets information about a webhosting offer.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byName = scaleway.getWebHostOffer({\n    name: \"performance\",\n});\nconst byId = scaleway.getWebHostOffer({\n    offerId: \"de2426b4-a9e9-11ec-b909-0242ac120002\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_web_host_offer(name=\"performance\")\nby_id = scaleway.get_web_host_offer(offer_id=\"de2426b4-a9e9-11ec-b909-0242ac120002\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetWebHostOffer.Invoke(new()\n    {\n        Name = \"performance\",\n    });\n\n    var byId = Scaleway.GetWebHostOffer.Invoke(new()\n    {\n        OfferId = \"de2426b4-a9e9-11ec-b909-0242ac120002\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetWebHostOffer(ctx, \u0026scaleway.GetWebHostOfferArgs{\n\t\t\tName: pulumi.StringRef(\"performance\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.GetWebHostOffer(ctx, \u0026scaleway.GetWebHostOfferArgs{\n\t\t\tOfferId: pulumi.StringRef(\"de2426b4-a9e9-11ec-b909-0242ac120002\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetWebHostOfferArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getWebHostOffer(GetWebHostOfferArgs.builder()\n            .name(\"performance\")\n            .build());\n\n        final var byId = ScalewayFunctions.getWebHostOffer(GetWebHostOfferArgs.builder()\n            .offerId(\"de2426b4-a9e9-11ec-b909-0242ac120002\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getWebHostOffer\n      Arguments:\n        name: performance\n  byId:\n    fn::invoke:\n      Function: scaleway:getWebHostOffer\n      Arguments:\n        offerId: de2426b4-a9e9-11ec-b909-0242ac120002\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getWebHostOffer.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The offer name. Only one of `name` and `offer_id` should be specified.\n"
                    },
                    "offerId": {
                        "type": "string",
                        "description": "The offer id. Only one of `name` and `offer_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which offer exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getWebHostOffer.\n",
                "properties": {
                    "billingOperationPath": {
                        "type": "string",
                        "description": "The unique identifier used for billing.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "offerId": {
                        "type": "string"
                    },
                    "price": {
                        "type": "string",
                        "description": "The offer price.\n"
                    },
                    "products": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getWebHostOfferProduct:getWebHostOfferProduct"
                        },
                        "description": "The offer product.\n"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "billingOperationPath",
                    "price",
                    "products",
                    "region",
                    "id"
                ]
            }
        },
        "scaleway:index/getWebhosting:getWebhosting": {
            "description": "Gets information about a webhosting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byDomain = scaleway.getWebhosting({\n    domain: \"foobar.com\",\n});\nconst byId = scaleway.getWebhosting({\n    webhostingId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_domain = scaleway.get_webhosting(domain=\"foobar.com\")\nby_id = scaleway.get_webhosting(webhosting_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byDomain = Scaleway.GetWebhosting.Invoke(new()\n    {\n        Domain = \"foobar.com\",\n    });\n\n    var byId = Scaleway.GetWebhosting.Invoke(new()\n    {\n        WebhostingId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-scaleway/sdk/v2/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetWebhosting(ctx, \u0026scaleway.GetWebhostingArgs{\n\t\t\tDomain: pulumi.StringRef(\"foobar.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.GetWebhosting(ctx, \u0026scaleway.GetWebhostingArgs{\n\t\t\tWebhostingId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetWebhostingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byDomain = ScalewayFunctions.getWebhosting(GetWebhostingArgs.builder()\n            .domain(\"foobar.com\")\n            .build());\n\n        final var byId = ScalewayFunctions.getWebhosting(GetWebhostingArgs.builder()\n            .webhostingId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byDomain:\n    fn::invoke:\n      Function: scaleway:getWebhosting\n      Arguments:\n        domain: foobar.com\n  byId:\n    fn::invoke:\n      Function: scaleway:getWebhosting\n      Arguments:\n        webhostingId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getWebhosting.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The hosting domain name. Only one of `domain` and `webhosting_id` should be specified.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the hosting is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the hosting is associated with.\n"
                    },
                    "webhostingId": {
                        "type": "string",
                        "description": "The hosting id. Only one of `domain` and `webhosting_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getWebhosting.\n",
                "properties": {
                    "cpanelUrls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getWebhostingCpanelUrl:getWebhostingCpanelUrl"
                        }
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "dnsStatus": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "offerId": {
                        "type": "string"
                    },
                    "offerName": {
                        "type": "string"
                    },
                    "optionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "options": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getWebhostingOption:getWebhostingOption"
                        }
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "platformHostname": {
                        "type": "string"
                    },
                    "platformNumber": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "webhostingId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cpanelUrls",
                    "createdAt",
                    "dnsStatus",
                    "email",
                    "offerId",
                    "offerName",
                    "optionIds",
                    "options",
                    "organizationId",
                    "platformHostname",
                    "platformNumber",
                    "region",
                    "status",
                    "tags",
                    "updatedAt",
                    "username",
                    "id"
                ]
            }
        }
    }
}